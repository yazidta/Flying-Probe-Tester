
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c05c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800c22c  0800c22c  0000d22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8e4  0800c8e4  0000e0c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8e4  0800c8e4  0000d8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8ec  0800c8ec  0000e0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8ec  0800c8ec  0000d8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c8f0  0800c8f0  0000d8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800c8f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff4  200000c0  0800c9b4  0000e0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  0800c9b4  0000f0b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002407e  00000000  00000000  0000e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d08  00000000  00000000  0003216e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00036e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001580  00000000  00000000  00038a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6d5  00000000  00000000  00039fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a001  00000000  00000000  0006569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9909  00000000  00000000  0008f69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079b0  00000000  00000000  00188fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0019099c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c214 	.word	0x0800c214

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800c214 	.word	0x0800c214

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f007 f8ef 	bl	80077a8 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f007 f955 	bl	8007888 <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f004 fc55 	bl	8004f28 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000dc 	.word	0x200000dc

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <LCD_I2C_Cursor+0x30>)
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	78bb      	ldrb	r3, [r7, #2]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	3b80      	subs	r3, #128	@ 0x80
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff68 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800c88c 	.word	0x0800c88c

080007d4 <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d90a      	bls.n	8000800 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	3b02      	subs	r3, #2
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	78bb      	ldrb	r3, [r7, #2]
 80007f2:	3314      	adds	r3, #20
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffd1 	bl	80007a0 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 80007fe:	e005      	b.n	800080c <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8000800:	78ba      	ldrb	r2, [r7, #2]
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffca 	bl	80007a0 <LCD_I2C_Cursor>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ff3a 	bl	8000698 <__lcd_i2c_write_command>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3340      	adds	r3, #64	@ 0x40
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff ff26 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
 8000850:	e00a      	b.n	8000868 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff ff2b 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	3301      	adds	r3, #1
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d9f1      	bls.n	8000852 <LCD_I2C_DefineChar+0x26>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 8000886:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8000888:	69b8      	ldr	r0, [r7, #24]
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000892:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	461a      	mov	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffbf 	bl	800082c <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]
 80008b2:	e025      	b.n	8000900 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	3303      	adds	r3, #3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff88 	bl	80007d4 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff5b 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe6b 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	3303      	adds	r3, #3
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff75 	bl	80007d4 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fedf 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 80008fa:	7ffb      	ldrb	r3, [r7, #31]
 80008fc:	3301      	adds	r3, #1
 80008fe:	77fb      	strb	r3, [r7, #31]
 8000900:	7ffa      	ldrb	r2, [r7, #31]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3d5      	bcc.n	80008b4 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800c238 	.word	0x0800c238
 8000918:	0800c244 	.word	0x0800c244

0800091c <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t CurrentPosition;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e07d      	b.n	8000a26 <HAL_TIM_PWM_PulseFinishedCallback+0x10a>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4942      	ldr	r1, [pc, #264]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2068      	movs	r0, #104	@ 0x68
 8000934:	fb00 f303 	mul.w	r3, r0, r3
 8000938:	440b      	add	r3, r1
 800093a:	330c      	adds	r3, #12
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	429a      	cmp	r2, r3
 8000942:	d16d      	bne.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  motors[i].stepsTaken++;
 8000944:	4a3c      	ldr	r2, [pc, #240]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2168      	movs	r1, #104	@ 0x68
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	4413      	add	r3, r2
 8000950:	3344      	adds	r3, #68	@ 0x44
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	4938      	ldr	r1, [pc, #224]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2068      	movs	r0, #104	@ 0x68
 800095c:	fb00 f303 	mul.w	r3, r0, r3
 8000960:	440b      	add	r3, r1
 8000962:	3344      	adds	r3, #68	@ 0x44
 8000964:	601a      	str	r2, [r3, #0]
		  stepsTaken[i] = motors[i].stepsTaken;
 8000966:	4a34      	ldr	r2, [pc, #208]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2168      	movs	r1, #104	@ 0x68
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	4413      	add	r3, r2
 8000972:	3344      	adds	r3, #68	@ 0x44
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4931      	ldr	r1, [pc, #196]	@ (8000a3c <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 800097e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2168      	movs	r1, #104	@ 0x68
 8000984:	fb01 f303 	mul.w	r3, r1, r3
 8000988:	4413      	add	r3, r2
 800098a:	331c      	adds	r3, #28
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	492a      	ldr	r1, [pc, #168]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2068      	movs	r0, #104	@ 0x68
 8000994:	fb00 f303 	mul.w	r3, r0, r3
 8000998:	440b      	add	r3, r1
 800099a:	3320      	adds	r3, #32
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	4610      	mov	r0, r2
 80009a2:	f004 f9db 	bl	8004d5c <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d111      	bne.n	80009d0 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		  motors[i].StepsFront++;
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2168      	movs	r1, #104	@ 0x68
 80009b2:	fb01 f303 	mul.w	r3, r1, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	3358      	adds	r3, #88	@ 0x58
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	491e      	ldr	r1, [pc, #120]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2068      	movs	r0, #104	@ 0x68
 80009c4:	fb00 f303 	mul.w	r3, r0, r3
 80009c8:	440b      	add	r3, r1
 80009ca:	3358      	adds	r3, #88	@ 0x58
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e027      	b.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2168      	movs	r1, #104	@ 0x68
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	4413      	add	r3, r2
 80009dc:	331c      	adds	r3, #28
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4915      	ldr	r1, [pc, #84]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2068      	movs	r0, #104	@ 0x68
 80009e6:	fb00 f303 	mul.w	r3, r0, r3
 80009ea:	440b      	add	r3, r1
 80009ec:	3320      	adds	r3, #32
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4610      	mov	r0, r2
 80009f4:	f004 f9b2 	bl	8004d5c <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>

			  		  motors[i].StepsBack++;
 80009fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2168      	movs	r1, #104	@ 0x68
 8000a04:	fb01 f303 	mul.w	r3, r1, r3
 8000a08:	4413      	add	r3, r2
 8000a0a:	335c      	adds	r3, #92	@ 0x5c
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	4909      	ldr	r1, [pc, #36]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2068      	movs	r0, #104	@ 0x68
 8000a16:	fb00 f303 	mul.w	r3, r0, r3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	335c      	adds	r3, #92	@ 0x5c
 8000a1e:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	f77f af7e 	ble.w	800092a <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		 }
      }

    }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000d44 	.word	0x20000d44
 8000a3c:	200000e4 	.word	0x200000e4

08000a40 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69d8      	ldr	r0, [r3, #28]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	8c1b      	ldrh	r3, [r3, #32]
 8000a54:	78fa      	ldrb	r2, [r7, #3]
 8000a56:	4619      	mov	r1, r3
 8000a58:	f004 f998 	bl	8004d8c <HAL_GPIO_WritePin>
    direction = state;
 8000a5c:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <TMC2209_SetDirection+0x2c>)
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000e3 	.word	0x200000e3

08000a70 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a84:	78fa      	ldrb	r2, [r7, #3]
 8000a86:	4619      	mov	r1, r3
 8000a88:	f004 f980 	bl	8004d8c <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 8000aa6:	f005 fc39 	bl	800631c <HAL_RCC_GetHCLKFreq>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abc:	3b01      	subs	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d106      	bne.n	8000ae8 <TMC2209_SetSpeed+0x54>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	0852      	lsrs	r2, r2, #1
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ae6:	e031      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d106      	bne.n	8000afe <TMC2209_SetSpeed+0x6a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	085b      	lsrs	r3, r3, #1
 8000afa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000afc:	e026      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	d106      	bne.n	8000b14 <TMC2209_SetSpeed+0x80>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	085b      	lsrs	r3, r3, #1
 8000b10:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b12:	e01b      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b0c      	cmp	r3, #12
 8000b1a:	d106      	bne.n	8000b2a <TMC2209_SetSpeed+0x96>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	085b      	lsrs	r3, r3, #1
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b28:	e010      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d106      	bne.n	8000b40 <TMC2209_SetSpeed+0xac>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b3e:	e005      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff80 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f007 f948 	bl	8007e08 <HAL_TIM_PWM_Stop_IT>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000b94:	2100      	movs	r1, #0
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff6a 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f006 ffea 	bl	8007b78 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <TMC2209_Start_C>:
void TMC2209_Start_C(Motor *motor) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	60bb      	str	r3, [r7, #8]
   //motor->stepsTaken = 0;
	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff50 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000bd0:	68b9      	ldr	r1, [r7, #8]
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f006 ffd0 	bl	8007b78 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <TMC2209_CountSteps>:



static void TMC2209_CountSteps(Motor *motor, uint32_t totalSteps){ // Static for now unless we need to expose it later
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	motor->nextTotalSteps = totalSteps;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	649a      	str	r2, [r3, #72]	@ 0x48
	motor->stepsTaken = 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	645a      	str	r2, [r3, #68]	@ 0x44
	while (motor->stepsTaken < motor->nextTotalSteps); // Wait until we reach required steps
 8000bfe:	bf00      	nop
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d3f8      	bcc.n	8000c00 <TMC2209_CountSteps+0x18>
	//HAL_Delay(1); // To not fad the cpu --NOTE: CHECK IF THERE SHOULD BE A DELAY
	motor->nextTotalSteps = 0;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <TMC2209_MoveTo>:

void TMC2209_checkStatus(Motor *motor, bool *isStepping, uint32_t *nextTotalSteps){
	 *isStepping = motor->isStepping;
     *nextTotalSteps = motor->nextTotalSteps;
}
void TMC2209_MoveTo(Axis *axis, uint8_t motorIndex, float targetPositionMM) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c2e:	72fb      	strb	r3, [r7, #11]
    // Validate the motor index
    if (motorIndex >= MAX_MOTORS_PER_AXIS) {
 8000c30:	7afb      	ldrb	r3, [r7, #11]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d903      	bls.n	8000c3e <TMC2209_MoveTo+0x1e>
        debug_print("Invalid motor index.\r\n");
 8000c36:	4832      	ldr	r0, [pc, #200]	@ (8000d00 <TMC2209_MoveTo+0xe0>)
 8000c38:	f000 f864 	bl	8000d04 <debug_print>
        return;
 8000c3c:	e05c      	b.n	8000cf8 <TMC2209_MoveTo+0xd8>
    }

    // Select the motor from the axis
    Motor *motor = axis->motors[motorIndex];
 8000c3e:	7afa      	ldrb	r2, [r7, #11]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c46:	61bb      	str	r3, [r7, #24]
//    }

    // Calculate the distance to move in millimeters
    //motor->currentPositionMM =0;

    float distanceToMoveMM = targetPositionMM - axis->motors[motorIndex]->currentPositionMM;
 8000c48:	7afa      	ldrb	r2, [r7, #11]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c50:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000c54:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c5c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Convert the distance to move into steps
    int32_t stepsToMove = (int32_t)(distanceToMoveMM * axis->stepPerUnit);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c72:	ee17 3a90 	vmov	r3, s15
 8000c76:	61fb      	str	r3, [r7, #28]

    // Update the target position in the motor structure
    axis->motors[motorIndex]->nextPositionMM = targetPositionMM;
 8000c78:	7afa      	ldrb	r2, [r7, #11]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	651a      	str	r2, [r3, #80]	@ 0x50

    // Decide the direction based on the sign of the steps
    if (stepsToMove > 0) {
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	dd08      	ble.n	8000c9c <TMC2209_MoveTo+0x7c>
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_RESET); // Forward direction
 8000c8a:	7afa      	ldrb	r2, [r7, #11]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fed3 	bl	8000a40 <TMC2209_SetDirection>
 8000c9a:	e00a      	b.n	8000cb2 <TMC2209_MoveTo+0x92>
    } else {
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_SET); // Reverse direction
 8000c9c:	7afa      	ldrb	r2, [r7, #11]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff feca 	bl	8000a40 <TMC2209_SetDirection>
        stepsToMove = -stepsToMove; // Convert to positive for step count
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	425b      	negs	r3, r3
 8000cb0:	61fb      	str	r3, [r7, #28]
    }

    // Start the motor
    TMC2209_Start(axis->motors[motorIndex]);
 8000cb2:	7afa      	ldrb	r2, [r7, #11]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff60 	bl	8000b80 <TMC2209_Start>

    // Set the total steps to move
    axis->motors[motorIndex]->nextTotalSteps = stepsToMove;
 8000cc0:	7afa      	ldrb	r2, [r7, #11]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	69fa      	ldr	r2, [r7, #28]
 8000cca:	649a      	str	r2, [r3, #72]	@ 0x48
	TMC2209_CountSteps(axis->motors[motorIndex], stepsToMove);
 8000ccc:	7afa      	ldrb	r2, [r7, #11]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	69fa      	ldr	r2, [r7, #28]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff85 	bl	8000be8 <TMC2209_CountSteps>

    // Stop the motor
    TMC2209_Stop(axis->motors[motorIndex]);
 8000cde:	7afa      	ldrb	r2, [r7, #11]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff34 	bl	8000b54 <TMC2209_Stop>

    // Update the current position in the motor structure
    axis->motors[motorIndex]->currentPositionMM = targetPositionMM;
 8000cec:	7afa      	ldrb	r2, [r7, #11]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	0800c330 	.word	0x0800c330

08000d04 <debug_print>:
    }
    (void)dummy;
}


void debug_print(const char* msg) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fa7f 	bl	8000210 <strlen>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <debug_print+0x28>)
 8000d1e:	f008 fac5 	bl	80092ac <HAL_UART_Transmit>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200005d4 	.word	0x200005d4

08000d30 <debug_print_hex>:

 void debug_print_hex(uint8_t* data, uint8_t length) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0c4      	sub	sp, #272	@ 0x110
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d3e:	6018      	str	r0, [r3, #0]
 8000d40:	460a      	mov	r2, r1
 8000d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d46:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000d4a:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    char* ptr = buffer;
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    ptr += sprintf(ptr, "[");
 8000d54:	4924      	ldr	r1, [pc, #144]	@ (8000de8 <debug_print_hex+0xb8>)
 8000d56:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000d5a:	f00a fd65 	bl	800b828 <siprintf>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000d66:	4413      	add	r3, r2
 8000d68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for(uint8_t i = 0; i < length; i++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
 8000d72:	e01a      	b.n	8000daa <debug_print_hex+0x7a>
        ptr += sprintf(ptr, "%02X ", data[i]);
 8000d74:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000d78:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d7c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4918      	ldr	r1, [pc, #96]	@ (8000dec <debug_print_hex+0xbc>)
 8000d8a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000d8e:	f00a fd4b 	bl	800b828 <siprintf>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for(uint8_t i = 0; i < length; i++) {
 8000da0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000da4:	3301      	adds	r3, #1
 8000da6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
 8000daa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dae:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000db2:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d3db      	bcc.n	8000d74 <debug_print_hex+0x44>
    }
    ptr += sprintf(ptr, "]\r\n");
 8000dbc:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <debug_print_hex+0xc0>)
 8000dbe:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000dc2:	f00a fd31 	bl	800b828 <siprintf>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000dce:	4413      	add	r3, r2
 8000dd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    debug_print(buffer);
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff93 	bl	8000d04 <debug_print>
}
 8000dde:	bf00      	nop
 8000de0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	0800c364 	.word	0x0800c364
 8000dec:	0800c368 	.word	0x0800c368
 8000df0:	0800c370 	.word	0x0800c370

08000df4 <calculate_CRC>:

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	73bb      	strb	r3, [r7, #14]
 8000e08:	e027      	b.n	8000e5a <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000e14:	2300      	movs	r3, #0
 8000e16:	733b      	strb	r3, [r7, #12]
 8000e18:	e019      	b.n	8000e4e <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	09db      	lsrs	r3, r3, #7
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	7b7b      	ldrb	r3, [r7, #13]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d007      	beq.n	8000e3c <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	f083 0307 	eor.w	r3, r3, #7
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e002      	b.n	8000e42 <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
 8000e44:	085b      	lsrs	r3, r3, #1
 8000e46:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	733b      	strb	r3, [r7, #12]
 8000e4e:	7b3b      	ldrb	r3, [r7, #12]
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d9e2      	bls.n	8000e1a <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	3301      	adds	r3, #1
 8000e58:	73bb      	strb	r3, [r7, #14]
 8000e5a:	7bba      	ldrb	r2, [r7, #14]
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d3d3      	bcc.n	8000e0a <calculate_CRC+0x16>
        }
    }
    return crc;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <TMC2209_WaitForReply>:




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8000e78:	f003 f878 	bl	8003f6c <HAL_GetTick>
 8000e7c:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 8000e7e:	e00c      	b.n	8000e9a <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 8000e80:	f003 f874 	bl	8003f6c <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d204      	bcs.n	8000e9a <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 8000e90:	4808      	ldr	r0, [pc, #32]	@ (8000eb4 <TMC2209_WaitForReply+0x44>)
 8000e92:	f7ff ff37 	bl	8000d04 <debug_print>
             return 0; // Timeout
 8000e96:	2300      	movs	r3, #0
 8000e98:	e008      	b.n	8000eac <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8000e9a:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <TMC2209_WaitForReply+0x48>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ed      	beq.n	8000e80 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8000ea4:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <TMC2209_WaitForReply+0x48>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 8000eaa:	2301      	movs	r3, #1
 }
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	0800c374 	.word	0x0800c374
 8000eb8:	20000108 	.word	0x20000108

08000ebc <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
	uint8_t flag = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	75fb      	strb	r3, [r7, #23]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	6858      	ldr	r0, [r3, #4]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	f008 f9e6 	bl	80092ac <HAL_UART_Transmit>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d004      	beq.n	8000ef0 <TMC2209_sendCommand+0x34>
         debug_print("Failed to send command.\r\n");
 8000ee6:	481a      	ldr	r0, [pc, #104]	@ (8000f50 <TMC2209_sendCommand+0x94>)
 8000ee8:	f7ff ff0c 	bl	8000d04 <debug_print>
         return 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	e02a      	b.n	8000f46 <TMC2209_sendCommand+0x8a>
     }


     if(readLength){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d026      	beq.n	8000f44 <TMC2209_sendCommand+0x88>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	6858      	ldr	r0, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	3301      	adds	r3, #1
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	4913      	ldr	r1, [pc, #76]	@ (8000f54 <TMC2209_sendCommand+0x98>)
 8000f06:	f008 fa5a 	bl	80093be <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 8000f0a:	20c8      	movs	r0, #200	@ 0xc8
 8000f0c:	f7ff ffb0 	bl	8000e70 <TMC2209_WaitForReply>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d104      	bne.n	8000f20 <TMC2209_sendCommand+0x64>
         debug_print("No reply received.\r\n");
 8000f16:	4810      	ldr	r0, [pc, #64]	@ (8000f58 <TMC2209_sendCommand+0x9c>)
 8000f18:	f7ff fef4 	bl	8000d04 <debug_print>
         return 0; // command failed
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e012      	b.n	8000f46 <TMC2209_sendCommand+0x8a>
     }
     /// DEBUG ///
     // Send transmitted data -- Note: this can't be called before receiving or else it will interfere with huart2

     debug_print("Data Transmitted: ");
 8000f20:	480e      	ldr	r0, [pc, #56]	@ (8000f5c <TMC2209_sendCommand+0xa0>)
 8000f22:	f7ff feef 	bl	8000d04 <debug_print>
     debug_print_hex(command, writeLength);
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff feff 	bl	8000d30 <debug_print_hex>
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
 8000f32:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <TMC2209_sendCommand+0xa4>)
 8000f34:	f7ff fee6 	bl	8000d04 <debug_print>
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
 8000f38:	2108      	movs	r1, #8
 8000f3a:	480a      	ldr	r0, [pc, #40]	@ (8000f64 <TMC2209_sendCommand+0xa8>)
 8000f3c:	f7ff fef8 	bl	8000d30 <debug_print_hex>

     return rxBuffer; // Success
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <TMC2209_sendCommand+0xa8>)
 8000f42:	e000      	b.n	8000f46 <TMC2209_sendCommand+0x8a>
     }

     return flag;
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	0800c394 	.word	0x0800c394
 8000f54:	200000f4 	.word	0x200000f4
 8000f58:	0800c3b0 	.word	0x0800c3b0
 8000f5c:	0800c3c8 	.word	0x0800c3c8
 8000f60:	0800c3dc 	.word	0x0800c3dc
 8000f64:	20000100 	.word	0x20000100

08000f68 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	460b      	mov	r3, r1
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8000f76:	2305      	movs	r3, #5
 8000f78:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	7a1b      	ldrb	r3, [r3, #8]
 8000f7e:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8000f80:	7afb      	ldrb	r3, [r7, #11]
 8000f82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	0e1b      	lsrs	r3, r3, #24
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	141b      	asrs	r3, r3, #16
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	121b      	asrs	r3, r3, #8
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	2107      	movs	r1, #7
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff20 	bl	8000df4 <calculate_CRC>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8000fb8:	f107 0010 	add.w	r0, r7, #16
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	f7ff ff7b 	bl	8000ebc <TMC2209_sendCommand>

 }
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
 	uint8_t read_request_command[8] = { 0 };
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]

// 	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
// 		return tmc2209->config->shadowRegister[address];

 	read_request_command[0] = SYNC;
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a1b      	ldrb	r3, [r3, #8]
 8000fec:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fefb 	bl	8000df4 <calculate_CRC>
 8000ffe:	4603      	mov	r3, r0
 8001000:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 8001002:	f107 000c 	add.w	r0, r7, #12
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2208      	movs	r2, #8
 800100a:	2104      	movs	r1, #4
 800100c:	f7ff ff56 	bl	8000ebc <TMC2209_sendCommand>
 8001010:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b05      	cmp	r3, #5
 8001018:	d00c      	beq.n	8001034 <TMC2209_readInit+0x64>
 		// If first byte equals 0 then it means no reply so return
 		if (verifyBuffer[0] == 0)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <TMC2209_readInit+0x58>
 			return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e03e      	b.n	80010a6 <TMC2209_readInit+0xd6>
 		debug_print("Invalid data received!(SYNC Byte)\r\n");
 8001028:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <TMC2209_readInit+0xe0>)
 800102a:	f7ff fe6b 	bl	8000d04 <debug_print>
 		return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e038      	b.n	80010a6 <TMC2209_readInit+0xd6>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2bff      	cmp	r3, #255	@ 0xff
 800103c:	d005      	beq.n	800104a <TMC2209_readInit+0x7a>
 		debug_print("Invalid data received!(MCU Address)\r\n");
 800103e:	481d      	ldr	r0, [pc, #116]	@ (80010b4 <TMC2209_readInit+0xe4>)
 8001040:	f7ff fe60 	bl	8000d04 <debug_print>
 		return -1;
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	e02d      	b.n	80010a6 <TMC2209_readInit+0xd6>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3302      	adds	r3, #2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	78fa      	ldrb	r2, [r7, #3]
 8001052:	429a      	cmp	r2, r3
 8001054:	d005      	beq.n	8001062 <TMC2209_readInit+0x92>
 		debug_print("Invalid data received!(Register Address)\r\n");
 8001056:	4818      	ldr	r0, [pc, #96]	@ (80010b8 <TMC2209_readInit+0xe8>)
 8001058:	f7ff fe54 	bl	8000d04 <debug_print>
 		return -1;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	e021      	b.n	80010a6 <TMC2209_readInit+0xd6>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3307      	adds	r3, #7
 8001066:	781c      	ldrb	r4, [r3, #0]
 8001068:	2107      	movs	r1, #7
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff fec2 	bl	8000df4 <calculate_CRC>
 8001070:	4603      	mov	r3, r0
 8001072:	429c      	cmp	r4, r3
 8001074:	d005      	beq.n	8001082 <TMC2209_readInit+0xb2>
 		debug_print("Invalid data received!(CRC)\r\n");
 8001076:	4811      	ldr	r0, [pc, #68]	@ (80010bc <TMC2209_readInit+0xec>)
 8001078:	f7ff fe44 	bl	8000d04 <debug_print>
 		return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	e011      	b.n	80010a6 <TMC2209_readInit+0xd6>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3303      	adds	r3, #3
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	061a      	lsls	r2, r3, #24
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3304      	adds	r3, #4
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	431a      	orrs	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3305      	adds	r3, #5
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	4313      	orrs	r3, r2
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	3206      	adds	r2, #6
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	4313      	orrs	r3, r2
 }
 80010a6:	4618      	mov	r0, r3
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800c3f0 	.word	0x0800c3f0
 80010b4:	0800c414 	.word	0x0800c414
 80010b8:	0800c43c 	.word	0x0800c43c
 80010bc:	0800c468 	.word	0x0800c468

080010c0 <setMicrosteppingResolution>:

 }


// Function to set the microstepping resolution through UART
void setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0ac      	sub	sp, #176	@ 0xb0
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f002 ff59 	bl	8003f84 <HAL_Delay>
    uint8_t driverID = tmc2209->driver.id;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
    char debug_msg[150];

    snprintf(debug_msg, sizeof(debug_msg), "----- Setting Microstepping For Driver ID: %u -----\r\n", driverID);
 80010da:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80010de:	f107 0008 	add.w	r0, r7, #8
 80010e2:	4a6d      	ldr	r2, [pc, #436]	@ (8001298 <setMicrosteppingResolution+0x1d8>)
 80010e4:	2196      	movs	r1, #150	@ 0x96
 80010e6:	f00a fb6b 	bl	800b7c0 <sniprintf>
    debug_print(debug_msg);
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe08 	bl	8000d04 <debug_print>
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	2296      	movs	r2, #150	@ 0x96
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00a fbb3 	bl	800b868 <memset>
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8001108:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800110c:	461a      	mov	r2, r3
 800110e:	2100      	movs	r1, #0
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <TMC2209_writeInit>

    HAL_Delay(2);
 8001116:	2002      	movs	r0, #2
 8001118:	f002 ff34 	bl	8003f84 <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 800111c:	216c      	movs	r1, #108	@ 0x6c
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff56 	bl	8000fd0 <TMC2209_readInit>
 8001124:	4603      	mov	r3, r0
 8001126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 800112a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800112e:	0e1b      	lsrs	r3, r3, #24
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001140:	d053      	beq.n	80011ea <setMicrosteppingResolution+0x12a>
 8001142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001146:	dc74      	bgt.n	8001232 <setMicrosteppingResolution+0x172>
 8001148:	2b80      	cmp	r3, #128	@ 0x80
 800114a:	d052      	beq.n	80011f2 <setMicrosteppingResolution+0x132>
 800114c:	2b80      	cmp	r3, #128	@ 0x80
 800114e:	dc70      	bgt.n	8001232 <setMicrosteppingResolution+0x172>
 8001150:	2b20      	cmp	r3, #32
 8001152:	dc47      	bgt.n	80011e4 <setMicrosteppingResolution+0x124>
 8001154:	2b00      	cmp	r3, #0
 8001156:	dd6c      	ble.n	8001232 <setMicrosteppingResolution+0x172>
 8001158:	3b01      	subs	r3, #1
 800115a:	2b1f      	cmp	r3, #31
 800115c:	d869      	bhi.n	8001232 <setMicrosteppingResolution+0x172>
 800115e:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <setMicrosteppingResolution+0xa4>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	0800122b 	.word	0x0800122b
 8001168:	08001223 	.word	0x08001223
 800116c:	08001233 	.word	0x08001233
 8001170:	0800121b 	.word	0x0800121b
 8001174:	08001233 	.word	0x08001233
 8001178:	08001233 	.word	0x08001233
 800117c:	08001233 	.word	0x08001233
 8001180:	08001213 	.word	0x08001213
 8001184:	08001233 	.word	0x08001233
 8001188:	08001233 	.word	0x08001233
 800118c:	08001233 	.word	0x08001233
 8001190:	08001233 	.word	0x08001233
 8001194:	08001233 	.word	0x08001233
 8001198:	08001233 	.word	0x08001233
 800119c:	08001233 	.word	0x08001233
 80011a0:	0800120b 	.word	0x0800120b
 80011a4:	08001233 	.word	0x08001233
 80011a8:	08001233 	.word	0x08001233
 80011ac:	08001233 	.word	0x08001233
 80011b0:	08001233 	.word	0x08001233
 80011b4:	08001233 	.word	0x08001233
 80011b8:	08001233 	.word	0x08001233
 80011bc:	08001233 	.word	0x08001233
 80011c0:	08001233 	.word	0x08001233
 80011c4:	08001233 	.word	0x08001233
 80011c8:	08001233 	.word	0x08001233
 80011cc:	08001233 	.word	0x08001233
 80011d0:	08001233 	.word	0x08001233
 80011d4:	08001233 	.word	0x08001233
 80011d8:	08001233 	.word	0x08001233
 80011dc:	08001233 	.word	0x08001233
 80011e0:	08001203 	.word	0x08001203
 80011e4:	2b40      	cmp	r3, #64	@ 0x40
 80011e6:	d008      	beq.n	80011fa <setMicrosteppingResolution+0x13a>
 80011e8:	e023      	b.n	8001232 <setMicrosteppingResolution+0x172>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 80011ea:	2300      	movs	r3, #0
 80011ec:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011f0:	e024      	b.n	800123c <setMicrosteppingResolution+0x17c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 80011f2:	2301      	movs	r3, #1
 80011f4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011f8:	e020      	b.n	800123c <setMicrosteppingResolution+0x17c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 80011fa:	2302      	movs	r3, #2
 80011fc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001200:	e01c      	b.n	800123c <setMicrosteppingResolution+0x17c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 8001202:	2303      	movs	r3, #3
 8001204:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001208:	e018      	b.n	800123c <setMicrosteppingResolution+0x17c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 800120a:	2304      	movs	r3, #4
 800120c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001210:	e014      	b.n	800123c <setMicrosteppingResolution+0x17c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 8001212:	2305      	movs	r3, #5
 8001214:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001218:	e010      	b.n	800123c <setMicrosteppingResolution+0x17c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 800121a:	2306      	movs	r3, #6
 800121c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001220:	e00c      	b.n	800123c <setMicrosteppingResolution+0x17c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 8001222:	2307      	movs	r3, #7
 8001224:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001228:	e008      	b.n	800123c <setMicrosteppingResolution+0x17c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 800122a:	2308      	movs	r3, #8
 800122c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001230:	e004      	b.n	800123c <setMicrosteppingResolution+0x17c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 8001232:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001236:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 800123a:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 800123c:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 8001240:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001244:	429a      	cmp	r2, r3
 8001246:	d103      	bne.n	8001250 <setMicrosteppingResolution+0x190>
        debug_print("Resolution unchanged, no update needed.\n");
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <setMicrosteppingResolution+0x1dc>)
 800124a:	f7ff fd5b 	bl	8000d04 <debug_print>
 800124e:	e01f      	b.n	8001290 <setMicrosteppingResolution+0x1d0>
        return;
    }
    HAL_Delay(2);
 8001250:	2002      	movs	r0, #2
 8001252:	f002 fe97 	bl	8003f84 <HAL_Delay>
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8001256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800125a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800125e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001262:	061b      	lsls	r3, r3, #24
 8001264:	4313      	orrs	r3, r2
 8001266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 800126a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800126e:	461a      	mov	r2, r3
 8001270:	216c      	movs	r1, #108	@ 0x6c
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fe78 	bl	8000f68 <TMC2209_writeInit>

    // Debug
    sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
 8001278:	887a      	ldrh	r2, [r7, #2]
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <setMicrosteppingResolution+0x1e0>)
 8001280:	4618      	mov	r0, r3
 8001282:	f00a fad1 	bl	800b828 <siprintf>
    debug_print(debug_msg);
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fd3a 	bl	8000d04 <debug_print>

}
 8001290:	37b0      	adds	r7, #176	@ 0xb0
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	0800c64c 	.word	0x0800c64c
 800129c:	0800c684 	.word	0x0800c684
 80012a0:	0800c6b0 	.word	0x0800c6b0

080012a4 <configureGCONF>:
    debug_print(debug_msg);

    return irun_value;
}

void configureGCONF(Motor *tmc2209) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f002 fe69 	bl	8003f84 <HAL_Delay>
    uint32_t gconf = 0x000000C0; // pdn_disable = 1, mstep_reg_select = 1
 80012b2:	23c0      	movs	r3, #192	@ 0xc0
 80012b4:	60fb      	str	r3, [r7, #12]
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	461a      	mov	r2, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fe53 	bl	8000f68 <TMC2209_writeInit>
    HAL_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f002 fe5e 	bl	8003f84 <HAL_Delay>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <TMC2209_setMotorsConfiguration>:
	debug_print("Send Delay set successfully! \r\n");

}

void TMC2209_setMotorsConfiguration(Motor *motors, uint8_t sendDelay, bool enableSpreadCycle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	4613      	mov	r3, r2
 80012de:	70bb      	strb	r3, [r7, #2]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e041      	b.n	800136a <TMC2209_setMotorsConfiguration+0x9a>
    	HAL_Delay(2000);
 80012e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012ea:	f002 fe4b 	bl	8003f84 <HAL_Delay>
    	configureGCONF(&motors[i]);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2268      	movs	r2, #104	@ 0x68
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffd2 	bl	80012a4 <configureGCONF>
    	HAL_Delay(1000);
 8001300:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001304:	f002 fe3e 	bl	8003f84 <HAL_Delay>
    	uint16_t mstep = motors[i].driver.mstep;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2268      	movs	r2, #104	@ 0x68
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	885b      	ldrh	r3, [r3, #2]
 8001316:	81bb      	strh	r3, [r7, #12]
        setMicrosteppingResolution(&motors[i], mstep);
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2268      	movs	r2, #104	@ 0x68
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	89ba      	ldrh	r2, [r7, #12]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fec9 	bl	80010c0 <setMicrosteppingResolution>

        TMC2209_SetSpeed(&motors[0], 5000);
 800132e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fbae 	bl	8000a94 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[1], 15000);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3368      	adds	r3, #104	@ 0x68
 800133c:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fba7 	bl	8000a94 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[2], 5000);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	33d0      	adds	r3, #208	@ 0xd0
 800134a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fba0 	bl	8000a94 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[3], 15000);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800135a:	f643 2198 	movw	r1, #15000	@ 0x3a98
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fb98 	bl	8000a94 <TMC2209_SetSpeed>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d9ba      	bls.n	80012e6 <TMC2209_setMotorsConfiguration+0x16>
       // HAL_Delay(1000);
       // checkMicrosteppingResolution(&motors[i]);
       // HAL_Delay(1000);
       // TMC2209_SetSpreadCycle(&motors[i], enableSpreadCycle);
    }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e1fa      	b.n	800177e <initializeMotors+0x402>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x00; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 8001388:	4ab8      	ldr	r2, [pc, #736]	@ (800166c <initializeMotors+0x2f0>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2168      	movs	r1, #104	@ 0x68
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	3308      	adds	r3, #8
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	b2d8      	uxtb	r0, r3
 800139e:	4ab3      	ldr	r2, [pc, #716]	@ (800166c <initializeMotors+0x2f0>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2168      	movs	r1, #104	@ 0x68
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	4602      	mov	r2, r0
 80013ac:	701a      	strb	r2, [r3, #0]

        motors[i].stepsTaken = 0;
 80013ae:	4aaf      	ldr	r2, [pc, #700]	@ (800166c <initializeMotors+0x2f0>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2168      	movs	r1, #104	@ 0x68
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	3344      	adds	r3, #68	@ 0x44
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 80013c0:	4aaa      	ldr	r2, [pc, #680]	@ (800166c <initializeMotors+0x2f0>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2168      	movs	r1, #104	@ 0x68
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	3348      	adds	r3, #72	@ 0x48
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 80013d2:	4aa6      	ldr	r2, [pc, #664]	@ (800166c <initializeMotors+0x2f0>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2168      	movs	r1, #104	@ 0x68
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	4413      	add	r3, r2
 80013de:	334c      	adds	r3, #76	@ 0x4c
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 80013e6:	4aa1      	ldr	r2, [pc, #644]	@ (800166c <initializeMotors+0x2f0>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2168      	movs	r1, #104	@ 0x68
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	3350      	adds	r3, #80	@ 0x50
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 80013fa:	4a9c      	ldr	r2, [pc, #624]	@ (800166c <initializeMotors+0x2f0>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2168      	movs	r1, #104	@ 0x68
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	3354      	adds	r3, #84	@ 0x54
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d166      	bne.n	80014e0 <initializeMotors+0x164>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8001412:	4a96      	ldr	r2, [pc, #600]	@ (800166c <initializeMotors+0x2f0>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2168      	movs	r1, #104	@ 0x68
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	330c      	adds	r3, #12
 8001420:	4a93      	ldr	r2, [pc, #588]	@ (8001670 <initializeMotors+0x2f4>)
 8001422:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8001424:	4a91      	ldr	r2, [pc, #580]	@ (800166c <initializeMotors+0x2f0>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2168      	movs	r1, #104	@ 0x68
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4413      	add	r3, r2
 8001430:	3310      	adds	r3, #16
 8001432:	2208      	movs	r2, #8
 8001434:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 16;
 8001436:	4a8d      	ldr	r2, [pc, #564]	@ (800166c <initializeMotors+0x2f0>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2168      	movs	r1, #104	@ 0x68
 800143c:	fb01 f303 	mul.w	r3, r1, r3
 8001440:	4413      	add	r3, r2
 8001442:	3302      	adds	r3, #2
 8001444:	2210      	movs	r2, #16
 8001446:	801a      	strh	r2, [r3, #0]
        motors[i].driver.huart = &huart2;
 8001448:	4a88      	ldr	r2, [pc, #544]	@ (800166c <initializeMotors+0x2f0>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2168      	movs	r1, #104	@ 0x68
 800144e:	fb01 f303 	mul.w	r3, r1, r3
 8001452:	4413      	add	r3, r2
 8001454:	3304      	adds	r3, #4
 8001456:	4a87      	ldr	r2, [pc, #540]	@ (8001674 <initializeMotors+0x2f8>)
 8001458:	601a      	str	r2, [r3, #0]
        motors[i].stepsPerRevolution = 400;
 800145a:	4a84      	ldr	r2, [pc, #528]	@ (800166c <initializeMotors+0x2f0>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2168      	movs	r1, #104	@ 0x68
 8001460:	fb01 f303 	mul.w	r3, r1, r3
 8001464:	4413      	add	r3, r2
 8001466:	333c      	adds	r3, #60	@ 0x3c
 8001468:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800146c:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = STEP1_GPIO_Port;
 800146e:	4a7f      	ldr	r2, [pc, #508]	@ (800166c <initializeMotors+0x2f0>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2168      	movs	r1, #104	@ 0x68
 8001474:	fb01 f303 	mul.w	r3, r1, r3
 8001478:	4413      	add	r3, r2
 800147a:	3314      	adds	r3, #20
 800147c:	4a7e      	ldr	r2, [pc, #504]	@ (8001678 <initializeMotors+0x2fc>)
 800147e:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = STEP1_Pin;
 8001480:	4a7a      	ldr	r2, [pc, #488]	@ (800166c <initializeMotors+0x2f0>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2168      	movs	r1, #104	@ 0x68
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	3318      	adds	r3, #24
 800148e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001492:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = DIR1_GPIO_Port;
 8001494:	4a75      	ldr	r2, [pc, #468]	@ (800166c <initializeMotors+0x2f0>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2168      	movs	r1, #104	@ 0x68
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	331c      	adds	r3, #28
 80014a2:	4a76      	ldr	r2, [pc, #472]	@ (800167c <initializeMotors+0x300>)
 80014a4:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = DIR1_Pin;
 80014a6:	4a71      	ldr	r2, [pc, #452]	@ (800166c <initializeMotors+0x2f0>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2168      	movs	r1, #104	@ 0x68
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	3320      	adds	r3, #32
 80014b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014b8:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = ENN1_GPIO_Port;
 80014ba:	4a6c      	ldr	r2, [pc, #432]	@ (800166c <initializeMotors+0x2f0>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2168      	movs	r1, #104	@ 0x68
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	3324      	adds	r3, #36	@ 0x24
 80014c8:	4a6b      	ldr	r2, [pc, #428]	@ (8001678 <initializeMotors+0x2fc>)
 80014ca:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = ENN1_Pin;
 80014cc:	4a67      	ldr	r2, [pc, #412]	@ (800166c <initializeMotors+0x2f0>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2168      	movs	r1, #104	@ 0x68
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	3328      	adds	r3, #40	@ 0x28
 80014da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014de:	801a      	strh	r2, [r3, #0]

        }


        if(i == 1){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d165      	bne.n	80015b2 <initializeMotors+0x236>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim1;				 // TIMER HANDLER
 80014e6:	4a61      	ldr	r2, [pc, #388]	@ (800166c <initializeMotors+0x2f0>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2168      	movs	r1, #104	@ 0x68
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	330c      	adds	r3, #12
 80014f4:	4a62      	ldr	r2, [pc, #392]	@ (8001680 <initializeMotors+0x304>)
 80014f6:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_4; // PWM channel for motor 1
 80014f8:	4a5c      	ldr	r2, [pc, #368]	@ (800166c <initializeMotors+0x2f0>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2168      	movs	r1, #104	@ 0x68
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	3310      	adds	r3, #16
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 800150a:	4a58      	ldr	r2, [pc, #352]	@ (800166c <initializeMotors+0x2f0>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2168      	movs	r1, #104	@ 0x68
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	3302      	adds	r3, #2
 8001518:	2210      	movs	r2, #16
 800151a:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart4;
 800151c:	4a53      	ldr	r2, [pc, #332]	@ (800166c <initializeMotors+0x2f0>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2168      	movs	r1, #104	@ 0x68
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3304      	adds	r3, #4
 800152a:	4a56      	ldr	r2, [pc, #344]	@ (8001684 <initializeMotors+0x308>)
 800152c:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 800152e:	4a4f      	ldr	r2, [pc, #316]	@ (800166c <initializeMotors+0x2f0>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2168      	movs	r1, #104	@ 0x68
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	333c      	adds	r3, #60	@ 0x3c
 800153c:	22c8      	movs	r2, #200	@ 0xc8
 800153e:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP2_GPIO_Port;
 8001540:	4a4a      	ldr	r2, [pc, #296]	@ (800166c <initializeMotors+0x2f0>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2168      	movs	r1, #104	@ 0x68
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	3314      	adds	r3, #20
 800154e:	4a4b      	ldr	r2, [pc, #300]	@ (800167c <initializeMotors+0x300>)
 8001550:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP2_Pin;
 8001552:	4a46      	ldr	r2, [pc, #280]	@ (800166c <initializeMotors+0x2f0>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2168      	movs	r1, #104	@ 0x68
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	3318      	adds	r3, #24
 8001560:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001564:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR2_GPIO_Port;
 8001566:	4a41      	ldr	r2, [pc, #260]	@ (800166c <initializeMotors+0x2f0>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2168      	movs	r1, #104	@ 0x68
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	331c      	adds	r3, #28
 8001574:	4a41      	ldr	r2, [pc, #260]	@ (800167c <initializeMotors+0x300>)
 8001576:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR2_Pin;
 8001578:	4a3c      	ldr	r2, [pc, #240]	@ (800166c <initializeMotors+0x2f0>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2168      	movs	r1, #104	@ 0x68
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	3320      	adds	r3, #32
 8001586:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800158a:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN2_GPIO_Port;
 800158c:	4a37      	ldr	r2, [pc, #220]	@ (800166c <initializeMotors+0x2f0>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2168      	movs	r1, #104	@ 0x68
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	3324      	adds	r3, #36	@ 0x24
 800159a:	4a38      	ldr	r2, [pc, #224]	@ (800167c <initializeMotors+0x300>)
 800159c:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN2_Pin;
 800159e:	4a33      	ldr	r2, [pc, #204]	@ (800166c <initializeMotors+0x2f0>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2168      	movs	r1, #104	@ 0x68
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	3328      	adds	r3, #40	@ 0x28
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d178      	bne.n	80016aa <initializeMotors+0x32e>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim5;				 // TIMER HANDLER
 80015b8:	4a2c      	ldr	r2, [pc, #176]	@ (800166c <initializeMotors+0x2f0>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2168      	movs	r1, #104	@ 0x68
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	330c      	adds	r3, #12
 80015c6:	4a30      	ldr	r2, [pc, #192]	@ (8001688 <initializeMotors+0x30c>)
 80015c8:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 80015ca:	4a28      	ldr	r2, [pc, #160]	@ (800166c <initializeMotors+0x2f0>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2168      	movs	r1, #104	@ 0x68
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	3310      	adds	r3, #16
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80015dc:	4a23      	ldr	r2, [pc, #140]	@ (800166c <initializeMotors+0x2f0>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2168      	movs	r1, #104	@ 0x68
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	3302      	adds	r3, #2
 80015ea:	2210      	movs	r2, #16
 80015ec:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 80015ee:	4a1f      	ldr	r2, [pc, #124]	@ (800166c <initializeMotors+0x2f0>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2168      	movs	r1, #104	@ 0x68
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	3304      	adds	r3, #4
 80015fc:	4a23      	ldr	r2, [pc, #140]	@ (800168c <initializeMotors+0x310>)
 80015fe:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 8001600:	4a1a      	ldr	r2, [pc, #104]	@ (800166c <initializeMotors+0x2f0>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2168      	movs	r1, #104	@ 0x68
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	4413      	add	r3, r2
 800160c:	333c      	adds	r3, #60	@ 0x3c
 800160e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001612:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = STEP3_GPIO_Port;
 8001614:	4a15      	ldr	r2, [pc, #84]	@ (800166c <initializeMotors+0x2f0>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2168      	movs	r1, #104	@ 0x68
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3314      	adds	r3, #20
 8001622:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <initializeMotors+0x314>)
 8001624:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP3_Pin;
 8001626:	4a11      	ldr	r2, [pc, #68]	@ (800166c <initializeMotors+0x2f0>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2168      	movs	r1, #104	@ 0x68
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	3318      	adds	r3, #24
 8001634:	2201      	movs	r2, #1
 8001636:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR3_GPIO_Port;
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <initializeMotors+0x2f0>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2168      	movs	r1, #104	@ 0x68
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	331c      	adds	r3, #28
 8001646:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <initializeMotors+0x300>)
 8001648:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR3_Pin;
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <initializeMotors+0x2f0>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2168      	movs	r1, #104	@ 0x68
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	3320      	adds	r3, #32
 8001658:	2204      	movs	r2, #4
 800165a:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN3_GPIO_Port;
 800165c:	4a03      	ldr	r2, [pc, #12]	@ (800166c <initializeMotors+0x2f0>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2168      	movs	r1, #104	@ 0x68
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	3324      	adds	r3, #36	@ 0x24
 800166a:	e013      	b.n	8001694 <initializeMotors+0x318>
 800166c:	20000d44 	.word	0x20000d44
 8001670:	20000228 	.word	0x20000228
 8001674:	2000054c 	.word	0x2000054c
 8001678:	40020400 	.word	0x40020400
 800167c:	40021000 	.word	0x40021000
 8001680:	200001dc 	.word	0x200001dc
 8001684:	2000043c 	.word	0x2000043c
 8001688:	2000030c 	.word	0x2000030c
 800168c:	200004c4 	.word	0x200004c4
 8001690:	40020000 	.word	0x40020000
 8001694:	4a3f      	ldr	r2, [pc, #252]	@ (8001794 <initializeMotors+0x418>)
 8001696:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN3_Pin;
 8001698:	4a3f      	ldr	r2, [pc, #252]	@ (8001798 <initializeMotors+0x41c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2168      	movs	r1, #104	@ 0x68
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	3328      	adds	r3, #40	@ 0x28
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	801a      	strh	r2, [r3, #0]


        }

        if(i == 3){
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d163      	bne.n	8001778 <initializeMotors+0x3fc>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 80016b0:	4a39      	ldr	r2, [pc, #228]	@ (8001798 <initializeMotors+0x41c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2168      	movs	r1, #104	@ 0x68
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	330c      	adds	r3, #12
 80016be:	4a37      	ldr	r2, [pc, #220]	@ (800179c <initializeMotors+0x420>)
 80016c0:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 80016c2:	4a35      	ldr	r2, [pc, #212]	@ (8001798 <initializeMotors+0x41c>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2168      	movs	r1, #104	@ 0x68
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	3310      	adds	r3, #16
 80016d0:	2208      	movs	r2, #8
 80016d2:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80016d4:	4a30      	ldr	r2, [pc, #192]	@ (8001798 <initializeMotors+0x41c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2168      	movs	r1, #104	@ 0x68
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	3302      	adds	r3, #2
 80016e2:	2210      	movs	r2, #16
 80016e4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 80016e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001798 <initializeMotors+0x41c>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2168      	movs	r1, #104	@ 0x68
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	3304      	adds	r3, #4
 80016f4:	4a2a      	ldr	r2, [pc, #168]	@ (80017a0 <initializeMotors+0x424>)
 80016f6:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 80016f8:	4a27      	ldr	r2, [pc, #156]	@ (8001798 <initializeMotors+0x41c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2168      	movs	r1, #104	@ 0x68
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	333c      	adds	r3, #60	@ 0x3c
 8001706:	22c8      	movs	r2, #200	@ 0xc8
 8001708:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP4_GPIO_Port;
 800170a:	4a23      	ldr	r2, [pc, #140]	@ (8001798 <initializeMotors+0x41c>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2168      	movs	r1, #104	@ 0x68
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3314      	adds	r3, #20
 8001718:	4a22      	ldr	r2, [pc, #136]	@ (80017a4 <initializeMotors+0x428>)
 800171a:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP4_Pin;
 800171c:	4a1e      	ldr	r2, [pc, #120]	@ (8001798 <initializeMotors+0x41c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2168      	movs	r1, #104	@ 0x68
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3318      	adds	r3, #24
 800172a:	2201      	movs	r2, #1
 800172c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR4_GPIO_Port;
 800172e:	4a1a      	ldr	r2, [pc, #104]	@ (8001798 <initializeMotors+0x41c>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2168      	movs	r1, #104	@ 0x68
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	331c      	adds	r3, #28
 800173c:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <initializeMotors+0x418>)
 800173e:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR4_Pin;
 8001740:	4a15      	ldr	r2, [pc, #84]	@ (8001798 <initializeMotors+0x41c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2168      	movs	r1, #104	@ 0x68
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	3320      	adds	r3, #32
 800174e:	2201      	movs	r2, #1
 8001750:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN4_GPIO_Port;
 8001752:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <initializeMotors+0x41c>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2168      	movs	r1, #104	@ 0x68
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	3324      	adds	r3, #36	@ 0x24
 8001760:	4a0c      	ldr	r2, [pc, #48]	@ (8001794 <initializeMotors+0x418>)
 8001762:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN4_Pin;
 8001764:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <initializeMotors+0x41c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2168      	movs	r1, #104	@ 0x68
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3328      	adds	r3, #40	@ 0x28
 8001772:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001776:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b03      	cmp	r3, #3
 8001782:	f77f ae01 	ble.w	8001388 <initializeMotors+0xc>


    }


}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40021000 	.word	0x40021000
 8001798:	20000d44 	.word	0x20000d44
 800179c:	20000274 	.word	0x20000274
 80017a0:	2000065c 	.word	0x2000065c
 80017a4:	40020400 	.word	0x40020400

080017a8 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    axis->motors[1]->currentPositionMM = 0;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	8852      	ldrh	r2, [r2, #2]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	641a      	str	r2, [r3, #64]	@ 0x40
    axis->stepPerUnit = totalStepsPerRevolution / circumference;;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f103 0014 	add.w	r0, r3, #20
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <initializeAxis+0x98>)
 8001816:	210a      	movs	r1, #10
 8001818:	f009 ffd2 	bl	800b7c0 <sniprintf>
    if (motor2 != NULL) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00a      	beq.n	8001838 <initializeAxis+0x90>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f103 001e 	add.w	r0, r3, #30
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	4a03      	ldr	r2, [pc, #12]	@ (8001840 <initializeAxis+0x98>)
 8001832:	210a      	movs	r1, #10
 8001834:	f009 ffc4 	bl	800b7c0 <sniprintf>
    }
}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	0800c87c 	.word	0x0800c87c

08001844 <initializeSystem>:

void initializeSystem(){
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af02      	add	r7, sp, #8
    // X-axis
    initializeAxis(&axes[0], &motors[0],&motors[2], 40, "Y");
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <initializeSystem+0x2c>)
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2328      	movs	r3, #40	@ 0x28
 8001850:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <initializeSystem+0x30>)
 8001852:	4909      	ldr	r1, [pc, #36]	@ (8001878 <initializeSystem+0x34>)
 8001854:	4809      	ldr	r0, [pc, #36]	@ (800187c <initializeSystem+0x38>)
 8001856:	f7ff ffa7 	bl	80017a8 <initializeAxis>
    initializeAxis(&axes[1], &motors[1],&motors[3], 8, "X");
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <initializeSystem+0x3c>)
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2308      	movs	r3, #8
 8001860:	4a08      	ldr	r2, [pc, #32]	@ (8001884 <initializeSystem+0x40>)
 8001862:	4909      	ldr	r1, [pc, #36]	@ (8001888 <initializeSystem+0x44>)
 8001864:	4809      	ldr	r0, [pc, #36]	@ (800188c <initializeSystem+0x48>)
 8001866:	f7ff ff9f 	bl	80017a8 <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[1], &motors[1], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	0800c884 	.word	0x0800c884
 8001874:	20000e14 	.word	0x20000e14
 8001878:	20000d44 	.word	0x20000d44
 800187c:	20000ee4 	.word	0x20000ee4
 8001880:	0800c888 	.word	0x0800c888
 8001884:	20000e7c 	.word	0x20000e7c
 8001888:	20000dac 	.word	0x20000dac
 800188c:	20000f0c 	.word	0x20000f0c

08001890 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	213c      	movs	r1, #60	@ 0x3c
 800189e:	4618      	mov	r0, r3
 80018a0:	f006 fc26 	bl	80080f0 <HAL_TIM_Encoder_Start>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <IsSensorTriggered>:
	SERVO_WritePosition(hservo, 90);
	SERVO_WritePosition(hservo1, 92);
	return x;
}
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	4619      	mov	r1, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f003 fa4d 	bl	8004d5c <HAL_GPIO_ReadPin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <IsSensorTriggered+0x24>
    	return false;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 80018d0:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f80d 	bl	800190c <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f006 f841 	bl	8007984 <HAL_TIM_PWM_Start>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8001918:	edd7 7a00 	vldr	s15, [r7]
 800191c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	d503      	bpl.n	800192e <PWM_WriteDuty+0x22>
    duty = 0.0;
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	e00a      	b.n	8001944 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800192e:	edd7 7a00 	vldr	s15, [r7]
 8001932:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80019f0 <PWM_WriteDuty+0xe4>
 8001936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	dd01      	ble.n	8001944 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <PWM_WriteDuty+0xe8>)
 8001942:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001952:	3301      	adds	r3, #1
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800195c:	edd7 7a00 	vldr	s15, [r7]
 8001960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001964:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80019f0 <PWM_WriteDuty+0xe4>
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <PWM_WriteDuty+0x7e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001988:	e02c      	b.n	80019e4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b04      	cmp	r3, #4
 8001990:	d105      	bne.n	800199e <PWM_WriteDuty+0x92>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800199c:	e022      	b.n	80019e4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d105      	bne.n	80019b2 <PWM_WriteDuty+0xa6>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80019b0:	e018      	b.n	80019e4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d105      	bne.n	80019c6 <PWM_WriteDuty+0xba>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019c4:	e00e      	b.n	80019e4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d105      	bne.n	80019da <PWM_WriteDuty+0xce>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80019d8:	e004      	b.n	80019e4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	42c80000 	.word	0x42c80000
 80019f4:	42c80000 	.word	0x42c80000

080019f8 <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 70.0f);
 8001a00:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001a1c <SERVO_Init+0x24>
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f80b 	bl	8001a20 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff64 	bl	80018da <PWM_Init>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	428c0000 	.word	0x428c0000

08001a20 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8001a2c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001a88 <SERVO_WritePosition+0x68>
 8001a30:	ed97 0a00 	vldr	s0, [r7]
 8001a34:	f00a fbb5 	bl	800c1a2 <fminf>
 8001a38:	eef0 7a40 	vmov.f32	s15, s0
 8001a3c:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001a8c <SERVO_WritePosition+0x6c>
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	f00a fb90 	bl	800c168 <fmaxf>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a58:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001a88 <SERVO_WritePosition+0x68>
 8001a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a60:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a70:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff46 	bl	800190c <PWM_WriteDuty>
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	43340000 	.word	0x43340000
 8001a8c:	00000000 	.word	0x00000000

08001a90 <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <HAL_UART_RxCpltCallback+0x4c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00e      	beq.n	8001ac0 <HAL_UART_RxCpltCallback+0x30>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x50>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d009      	beq.n	8001ac0 <HAL_UART_RxCpltCallback+0x30>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x54>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_UART_RxCpltCallback+0x30>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <HAL_UART_RxCpltCallback+0x58>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d108      	bne.n	8001ad2 <HAL_UART_RxCpltCallback+0x42>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_UART_RxCpltCallback+0x5c>)
 8001ac2:	2209      	movs	r2, #9
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480a      	ldr	r0, [pc, #40]	@ (8001af0 <HAL_UART_RxCpltCallback+0x60>)
 8001ac8:	f009 ff02 	bl	800b8d0 <memcpy>
        rxBufferReady = 1;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_UART_RxCpltCallback+0x64>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]

    }

    // TODO: UART callback for read from PCB2Gcode

}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	40011400 	.word	0x40011400
 8001ae4:	40004c00 	.word	0x40004c00
 8001ae8:	40005000 	.word	0x40005000
 8001aec:	200000f5 	.word	0x200000f5
 8001af0:	20000100 	.word	0x20000100
 8001af4:	20000108 	.word	0x20000108

08001af8 <motorHoming>:
int8_t motor2Cali[2];
uint32_t StepsFront[4]={0,0,0,0};
int32_t StepsBack[4]={0,0};
uint32_t LastSteps[3] = {0,0,0,0};

void motorHoming(Motor *motor, GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin, int direction, int speed, int homePositionMM) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	80fb      	strh	r3, [r7, #6]
    TMC2209_SetDirection(motor, direction);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7fe ff96 	bl	8000a40 <TMC2209_SetDirection>
    TMC2209_SetSpeed(motor, speed);
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	4619      	mov	r1, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7fe ffbb 	bl	8000a94 <TMC2209_SetSpeed>

    if (IsSensorTriggered(GPIO_Port, GPIO_Pin) == 0) {
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4619      	mov	r1, r3
 8001b22:	68b8      	ldr	r0, [r7, #8]
 8001b24:	f7ff fec2 	bl	80018ac <IsSensorTriggered>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f083 0301 	eor.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02a      	beq.n	8001b8a <motorHoming+0x92>
        TMC2209_Start(motor);
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff f823 	bl	8000b80 <TMC2209_Start>

        while (IsSensorTriggered(GPIO_Port, GPIO_Pin) == 0);
 8001b3a:	bf00      	nop
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	68b8      	ldr	r0, [r7, #8]
 8001b42:	f7ff feb3 	bl	80018ac <IsSensorTriggered>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f083 0301 	eor.w	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f4      	bne.n	8001b3c <motorHoming+0x44>

        if (IsSensorTriggered(GPIO_Port, GPIO_Pin) == 1) {
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	4619      	mov	r1, r3
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	f7ff fea8 	bl	80018ac <IsSensorTriggered>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d013      	beq.n	8001b8a <motorHoming+0x92>
            TMC2209_Stop(motor);
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7fe fff6 	bl	8000b54 <TMC2209_Stop>
            motor->currentPositionMM = homePositionMM;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
            motor->stepsTaken = 0;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	@ 0x44
            motor->StepsBack = 0;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	65da      	str	r2, [r3, #92]	@ 0x5c
            motor->StepsFront = 0;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	659a      	str	r2, [r3, #88]	@ 0x58
        }
    }

    TMC2209_Stop(motor);
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f7fe ffe2 	bl	8000b54 <TMC2209_Stop>
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <MotorsHoming>:

bool MotorsHoming(Motor *motor) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	6078      	str	r0, [r7, #4]
    motorHoming(&motor[0], EndStop1_GPIO_Port, EndStop1_Pin, 1, 8000, 0);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2301      	movs	r3, #1
 8001bac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb0:	4919      	ldr	r1, [pc, #100]	@ (8001c18 <MotorsHoming+0x80>)
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa0 	bl	8001af8 <motorHoming>
    motorHoming(&motor[1], EndStop2_GPIO_Port, EndStop2_Pin, 0, 14000, 0);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	f243 63b0 	movw	r3, #14000	@ 0x36b0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bce:	4913      	ldr	r1, [pc, #76]	@ (8001c1c <MotorsHoming+0x84>)
 8001bd0:	f7ff ff92 	bl	8001af8 <motorHoming>
    motorHoming(&motor[2], EndStop3_GPIO_Port, EndStop3_Pin, 0, 10000, 0);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2300      	movs	r3, #0
 8001be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bea:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <MotorsHoming+0x84>)
 8001bec:	f7ff ff84 	bl	8001af8 <motorHoming>
    motorHoming(&motor[3], EndStop4_GPIO_Port, EndStop4_Pin, 0, 8000, 450);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f503 709c 	add.w	r0, r3, #312	@ 0x138
 8001bf6:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c08:	4903      	ldr	r1, [pc, #12]	@ (8001c18 <MotorsHoming+0x80>)
 8001c0a:	f7ff ff75 	bl	8001af8 <motorHoming>

    return true;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021000 	.word	0x40021000

08001c20 <MotorControl_ButtonHandler>:


void MotorControl_ButtonHandler(Axis *axes,Motor *motors) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	static uint8_t CtrPressedFlag = 0; // Flag to detect button press edge
	    // StepsFront[0] = 0;
	//TMC2209_SetSpeed(&motors[0],10000);
	//TMC2209_SetSpeed(&motors[2],10000);
	    uint32_t pressStartTime = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
	    uint32_t debounceTime = 50;
 8001c2e:	2332      	movs	r3, #50	@ 0x32
 8001c30:	613b      	str	r3, [r7, #16]
	    uint32_t currentTime = HAL_GetTick();
 8001c32:	f002 f99b 	bl	8003f6c <HAL_GetTick>
 8001c36:	60f8      	str	r0, [r7, #12]
	    static uint32_t lastPressTime = 0; // Last valid press timestamp

	    if (HAL_GPIO_ReadPin(BtnCtr_GPIO_Port, BtnCtr_Pin) == GPIO_PIN_SET) {
 8001c38:	2101      	movs	r1, #1
 8001c3a:	48b1      	ldr	r0, [pc, #708]	@ (8001f00 <MotorControl_ButtonHandler+0x2e0>)
 8001c3c:	f003 f88e 	bl	8004d5c <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d10a      	bne.n	8001c5c <MotorControl_ButtonHandler+0x3c>
	        if (CtrPressedFlag == 0) { // Only increment on first press
 8001c46:	4baf      	ldr	r3, [pc, #700]	@ (8001f04 <MotorControl_ButtonHandler+0x2e4>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8192 	bne.w	8001f74 <MotorControl_ButtonHandler+0x354>
	            pressStartTime = currentTime;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	617b      	str	r3, [r7, #20]
	            CtrPressedFlag = 1; // Set flag to avoid multiple increments
 8001c54:	4bab      	ldr	r3, [pc, #684]	@ (8001f04 <MotorControl_ButtonHandler+0x2e4>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e18b      	b.n	8001f74 <MotorControl_ButtonHandler+0x354>
	        }
	    } else {
	        if (CtrPressedFlag == 1 && (currentTime - pressStartTime) >= debounceTime) {
 8001c5c:	4ba9      	ldr	r3, [pc, #676]	@ (8001f04 <MotorControl_ButtonHandler+0x2e4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10e      	bne.n	8001c82 <MotorControl_ButtonHandler+0x62>
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d808      	bhi.n	8001c82 <MotorControl_ButtonHandler+0x62>
	            Pressed += 1;
 8001c70:	4ba5      	ldr	r3, [pc, #660]	@ (8001f08 <MotorControl_ButtonHandler+0x2e8>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4ba3      	ldr	r3, [pc, #652]	@ (8001f08 <MotorControl_ButtonHandler+0x2e8>)
 8001c7a:	701a      	strb	r2, [r3, #0]
	            lastPressTime = currentTime; // Update the last valid press time
 8001c7c:	4aa3      	ldr	r2, [pc, #652]	@ (8001f0c <MotorControl_ButtonHandler+0x2ec>)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6013      	str	r3, [r2, #0]
	              }
	        CtrPressedFlag = 0; // Reset flag when button is released
 8001c82:	4ba0      	ldr	r3, [pc, #640]	@ (8001f04 <MotorControl_ButtonHandler+0x2e4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
        switch (Pressed) {
 8001c88:	4b9f      	ldr	r3, [pc, #636]	@ (8001f08 <MotorControl_ButtonHandler+0x2e8>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d003      	beq.n	8001c98 <MotorControl_ButtonHandler+0x78>
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	f000 8097 	beq.w	8001dc4 <MotorControl_ButtonHandler+0x1a4>
 8001c96:	e169      	b.n	8001f6c <MotorControl_ButtonHandler+0x34c>
            case 1:
                // Save calibration for first press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160;
 8001c98:	4b9d      	ldr	r3, [pc, #628]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	23d0      	movs	r3, #208	@ 0xd0
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	4a99      	ldr	r2, [pc, #612]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	22d0      	movs	r2, #208	@ 0xd0
 8001cb2:	fb01 f202 	mul.w	r2, r1, r2
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	440a      	add	r2, r1
 8001cba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bfb8      	it	lt
 8001cc2:	425b      	neglt	r3, r3
 8001cc4:	4a93      	ldr	r2, [pc, #588]	@ (8001f14 <MotorControl_ButtonHandler+0x2f4>)
 8001cc6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cca:	1192      	asrs	r2, r2, #6
 8001ccc:	17db      	asrs	r3, r3, #31
 8001cce:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2].currentPositionMM =
 8001cd0:	4b8f      	ldr	r3, [pc, #572]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	23d0      	movs	r3, #208	@ 0xd0
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	ee07 1a90 	vmov	s15, r1
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400;
 8001cec:	4b88      	ldr	r3, [pc, #544]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	23d0      	movs	r3, #208	@ 0xd0
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	3368      	adds	r3, #104	@ 0x68
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d00:	4619      	mov	r1, r3
 8001d02:	4b83      	ldr	r3, [pc, #524]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	23d0      	movs	r3, #208	@ 0xd0
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	3368      	adds	r3, #104	@ 0x68
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	1acb      	subs	r3, r1, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bfb8      	it	lt
 8001d1c:	425b      	neglt	r3, r3
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f18 <MotorControl_ButtonHandler+0x2f8>)
 8001d20:	fb82 1203 	smull	r1, r2, r2, r3
 8001d24:	11d2      	asrs	r2, r2, #7
 8001d26:	17db      	asrs	r3, r3, #31
 8001d28:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2 + 1].currentPositionMM =
 8001d2a:	4b79      	ldr	r3, [pc, #484]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	23d0      	movs	r3, #208	@ 0xd0
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	3368      	adds	r3, #104	@ 0x68
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	ee07 1a90 	vmov	s15, r1
 8001d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d44:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

                motors[motorGroup * 2].calib[0] = motors[motorGroup * 2].currentPositionMM;
 8001d48:	4b71      	ldr	r3, [pc, #452]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	23d0      	movs	r3, #208	@ 0xd0
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	441a      	add	r2, r3
 8001d58:	4b6d      	ldr	r3, [pc, #436]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	23d0      	movs	r3, #208	@ 0xd0
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	440b      	add	r3, r1
 8001d68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d6a:	661a      	str	r2, [r3, #96]	@ 0x60
                motors[motorGroup * 2 + 1].calib[0] = motors[motorGroup * 2 + 1].currentPositionMM;
 8001d6c:	4b68      	ldr	r3, [pc, #416]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	23d0      	movs	r3, #208	@ 0xd0
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	3368      	adds	r3, #104	@ 0x68
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	441a      	add	r2, r3
 8001d7e:	4b64      	ldr	r3, [pc, #400]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	23d0      	movs	r3, #208	@ 0xd0
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	3368      	adds	r3, #104	@ 0x68
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	440b      	add	r3, r1
 8001d90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d92:	661a      	str	r2, [r3, #96]	@ 0x60

                motors[motorGroup * 2].currentPositionMM = 0;
 8001d94:	4b5e      	ldr	r3, [pc, #376]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	23d0      	movs	r3, #208	@ 0xd0
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	64da      	str	r2, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM = 0;
 8001daa:	4b59      	ldr	r3, [pc, #356]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	23d0      	movs	r3, #208	@ 0xd0
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	3368      	adds	r3, #104	@ 0x68
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
                break;
 8001dc2:	e0d7      	b.n	8001f74 <MotorControl_ButtonHandler+0x354>

            case 2:
                // Save calibration for second press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 8001dc4:	4b52      	ldr	r3, [pc, #328]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	23d0      	movs	r3, #208	@ 0xd0
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001dd8:	7812      	ldrb	r2, [r2, #0]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	22d0      	movs	r2, #208	@ 0xd0
 8001dde:	fb01 f202 	mul.w	r2, r1, r2
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	440a      	add	r2, r1
 8001de6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bfb8      	it	lt
 8001dee:	425b      	neglt	r3, r3
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2].currentPositionMM =
 8001df8:	4b45      	ldr	r3, [pc, #276]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	23d0      	movs	r3, #208	@ 0xd0
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 8001e08:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001f1c <MotorControl_ButtonHandler+0x2fc>
 8001e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2].currentPositionMM =
 8001e10:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 8001e14:	4b3e      	ldr	r3, [pc, #248]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	23d0      	movs	r3, #208	@ 0xd0
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	3368      	adds	r3, #104	@ 0x68
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	23d0      	movs	r3, #208	@ 0xd0
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	3368      	adds	r3, #104	@ 0x68
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bfb8      	it	lt
 8001e44:	425b      	neglt	r3, r3
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2 + 1].currentPositionMM =
 8001e4e:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	23d0      	movs	r3, #208	@ 0xd0
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	3368      	adds	r3, #104	@ 0x68
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 8001e60:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001f20 <MotorControl_ButtonHandler+0x300>
 8001e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2 + 1].currentPositionMM =
 8001e68:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

                motors[motorGroup * 2].calib[1] = motors[motorGroup * 2].currentPositionMM;
 8001e6c:	4b28      	ldr	r3, [pc, #160]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	23d0      	movs	r3, #208	@ 0xd0
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	441a      	add	r2, r3
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	23d0      	movs	r3, #208	@ 0xd0
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	6839      	ldr	r1, [r7, #0]
 8001e8a:	440b      	add	r3, r1
 8001e8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e8e:	665a      	str	r2, [r3, #100]	@ 0x64
                motors[motorGroup * 2 + 1].calib[1] = motors[motorGroup * 2 + 1].currentPositionMM;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	23d0      	movs	r3, #208	@ 0xd0
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	3368      	adds	r3, #104	@ 0x68
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	441a      	add	r2, r3
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	23d0      	movs	r3, #208	@ 0xd0
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	3368      	adds	r3, #104	@ 0x68
 8001eb0:	6839      	ldr	r1, [r7, #0]
 8001eb2:	440b      	add	r3, r1
 8001eb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001eb6:	665a      	str	r2, [r3, #100]	@ 0x64
                if (motorGroup >= 2) {
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d902      	bls.n	8001ec6 <MotorControl_ButtonHandler+0x2a6>
                       motorGroup = 0;  // Reset or handle as per your system's requirement
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
                  }
                // Perform homing for all motors
                  //MotorsHoming(motors);

               // Move all motors to their saved calibrated positions
                if(motorGroup == 0){
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <MotorControl_ButtonHandler+0x2f0>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d12a      	bne.n	8001f24 <MotorControl_ButtonHandler+0x304>
                   TMC2209_MoveTo(&axes[0],0,motors[0].calib[1]);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed8:	2100      	movs	r1, #0
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fea0 	bl	8000c20 <TMC2209_MoveTo>
                   TMC2209_MoveTo(&axes[1],0,-motors[1].calib[0]);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	3368      	adds	r3, #104	@ 0x68
 8001eea:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001eee:	eef1 7a67 	vneg.f32	s15, s15
 8001ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7fe fe91 	bl	8000c20 <TMC2209_MoveTo>
 8001efe:	e02b      	b.n	8001f58 <MotorControl_ButtonHandler+0x338>
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	2000011c 	.word	0x2000011c
 8001f08:	200000e2 	.word	0x200000e2
 8001f0c:	20000120 	.word	0x20000120
 8001f10:	20000109 	.word	0x20000109
 8001f14:	66666667 	.word	0x66666667
 8001f18:	51eb851f 	.word	0x51eb851f
 8001f1c:	43200000 	.word	0x43200000
 8001f20:	43c80000 	.word	0x43c80000
//                TMC2209_MoveTo(&axes[1],1,-400);
                }
                else {
                	TMC2209_MoveTo(&axes[0],1,motors[2].calib[1]);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	33d0      	adds	r3, #208	@ 0xd0
 8001f28:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	2101      	movs	r1, #1
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fe74 	bl	8000c20 <TMC2209_MoveTo>
                    TMC2209_MoveTo(&axes[1],1,-motors[3].calib[0]);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001f44:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001f48:	eef1 7a67 	vneg.f32	s15, s15
 8001f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f50:	2101      	movs	r1, #1
 8001f52:	4610      	mov	r0, r2
 8001f54:	f7fe fe64 	bl	8000c20 <TMC2209_MoveTo>
                }
                motorGroup += 1;
 8001f58:	4b7e      	ldr	r3, [pc, #504]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b7c      	ldr	r3, [pc, #496]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8001f62:	701a      	strb	r2, [r3, #0]

           // Reset Pressed counter to prevent further calibration steps
                Pressed = 0;
 8001f64:	4b7c      	ldr	r3, [pc, #496]	@ (8002158 <MotorControl_ButtonHandler+0x538>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
                    break;
 8001f6a:	e003      	b.n	8001f74 <MotorControl_ButtonHandler+0x354>

                 default:
                                // Handle unexpected Pressed value
                   Pressed = 0;
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002158 <MotorControl_ButtonHandler+0x538>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
                   break;
 8001f72:	bf00      	nop

    }



	if(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 8001f74:	2102      	movs	r1, #2
 8001f76:	4879      	ldr	r0, [pc, #484]	@ (800215c <MotorControl_ButtonHandler+0x53c>)
 8001f78:	f002 fef0 	bl	8004d5c <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11e      	bne.n	8001fc0 <MotorControl_ButtonHandler+0x3a0>
		    // Send one step for each millisecond the button is pressed
	    //setMicrosteppingResolution(&motors[motorGroup *2], 16);
		//TMC2209_SetSpeed(&motors[motorGroup *2+1],16000);
			//StepsFront[0] = 0;
            //LastSteps[0] += StepsFront[0];
			TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_SET);
 8001f82:	4b74      	ldr	r3, [pc, #464]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	23d0      	movs	r3, #208	@ 0xd0
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	2101      	movs	r1, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fd53 	bl	8000a40 <TMC2209_SetDirection>
		    TMC2209_Start_C(&motors[motorGroup * 2]);
 8001f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	23d0      	movs	r3, #208	@ 0xd0
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fe02 	bl	8000bb4 <TMC2209_Start_C>
		    while(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 8001fb0:	bf00      	nop
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4869      	ldr	r0, [pc, #420]	@ (800215c <MotorControl_ButtonHandler+0x53c>)
 8001fb6:	f002 fed1 	bl	8004d5c <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f8      	beq.n	8001fb2 <MotorControl_ButtonHandler+0x392>
//        	TMC2209_Stop(&motors[motorGroup * 2]);
//        	StepsFront[0] = 0;

    	//}
}
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_SET ) {
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	4866      	ldr	r0, [pc, #408]	@ (800215c <MotorControl_ButtonHandler+0x53c>)
 8001fc4:	f002 feca 	bl	8004d5c <HAL_GPIO_ReadPin>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10a      	bne.n	8001fe4 <MotorControl_ButtonHandler+0x3c4>
    	TMC2209_Stop(&motors[motorGroup * 2]);
 8001fce:	4b61      	ldr	r3, [pc, #388]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	23d0      	movs	r3, #208	@ 0xd0
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fdb8 	bl	8000b54 <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	485d      	ldr	r0, [pc, #372]	@ (800215c <MotorControl_ButtonHandler+0x53c>)
 8001fe8:	f002 feb8 	bl	8004d5c <HAL_GPIO_ReadPin>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d11e      	bne.n	8002030 <MotorControl_ButtonHandler+0x410>
		//motors[motorGroup*2].stepsTaken = 0;
		//StepsBack[0] = 0;
		//StepsBack[0] += motors[motorGroup*2].stepsTaken;
		TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_RESET);
 8001ff2:	4b58      	ldr	r3, [pc, #352]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	23d0      	movs	r3, #208	@ 0xd0
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fd1b 	bl	8000a40 <TMC2209_SetDirection>
		TMC2209_Start_C(&motors[motorGroup * 2]);
 800200a:	4b52      	ldr	r3, [pc, #328]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	23d0      	movs	r3, #208	@ 0xd0
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4413      	add	r3, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fdca 	bl	8000bb4 <TMC2209_Start_C>
		while(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 8002020:	bf00      	nop
 8002022:	2101      	movs	r1, #1
 8002024:	484d      	ldr	r0, [pc, #308]	@ (800215c <MotorControl_ButtonHandler+0x53c>)
 8002026:	f002 fe99 	bl	8004d5c <HAL_GPIO_ReadPin>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f8      	beq.n	8002022 <MotorControl_ButtonHandler+0x402>
//
//    	}


}
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_SET || StepsBack[0] > 28000) {
 8002030:	2101      	movs	r1, #1
 8002032:	484a      	ldr	r0, [pc, #296]	@ (800215c <MotorControl_ButtonHandler+0x53c>)
 8002034:	f002 fe92 	bl	8004d5c <HAL_GPIO_ReadPin>
 8002038:	4603      	mov	r3, r0
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <MotorControl_ButtonHandler+0x42a>
 800203e:	4b48      	ldr	r3, [pc, #288]	@ (8002160 <MotorControl_ButtonHandler+0x540>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f646 5260 	movw	r2, #28000	@ 0x6d60
 8002046:	4293      	cmp	r3, r2
 8002048:	dd0a      	ble.n	8002060 <MotorControl_ButtonHandler+0x440>
        // Button 1 pressed (Step Motor in one direction)
    	TMC2209_Stop(&motors[motorGroup * 2]);
 800204a:	4b42      	ldr	r3, [pc, #264]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	23d0      	movs	r3, #208	@ 0xd0
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fd7a 	bl	8000b54 <TMC2209_Stop>

        //TMC2209_CountSteps_C(&motors[motorGroup * 2],StepsBack[0]);
    }


	if(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET){
 8002060:	2102      	movs	r1, #2
 8002062:	4840      	ldr	r0, [pc, #256]	@ (8002164 <MotorControl_ButtonHandler+0x544>)
 8002064:	f002 fe7a 	bl	8004d5c <HAL_GPIO_ReadPin>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d120      	bne.n	80020b0 <MotorControl_ButtonHandler+0x490>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_SET);
 800206e:	4b39      	ldr	r3, [pc, #228]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	23d0      	movs	r3, #208	@ 0xd0
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	3368      	adds	r3, #104	@ 0x68
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fcdc 	bl	8000a40 <TMC2209_SetDirection>
        TMC2209_Start_C(&motors[motorGroup * 2+1]);
 8002088:	4b32      	ldr	r3, [pc, #200]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	23d0      	movs	r3, #208	@ 0xd0
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	3368      	adds	r3, #104	@ 0x68
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	4413      	add	r3, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fd8a 	bl	8000bb4 <TMC2209_Start_C>
        while(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET);
 80020a0:	bf00      	nop
 80020a2:	2102      	movs	r1, #2
 80020a4:	482f      	ldr	r0, [pc, #188]	@ (8002164 <MotorControl_ButtonHandler+0x544>)
 80020a6:	f002 fe59 	bl	8004d5c <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f8      	beq.n	80020a2 <MotorControl_ButtonHandler+0x482>
}
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_SET) {
 80020b0:	2102      	movs	r1, #2
 80020b2:	482c      	ldr	r0, [pc, #176]	@ (8002164 <MotorControl_ButtonHandler+0x544>)
 80020b4:	f002 fe52 	bl	8004d5c <HAL_GPIO_ReadPin>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10b      	bne.n	80020d6 <MotorControl_ButtonHandler+0x4b6>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2 + 1]);
 80020be:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	23d0      	movs	r3, #208	@ 0xd0
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	3368      	adds	r3, #104	@ 0x68
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fd3f 	bl	8000b54 <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET){
 80020d6:	2101      	movs	r1, #1
 80020d8:	4823      	ldr	r0, [pc, #140]	@ (8002168 <MotorControl_ButtonHandler+0x548>)
 80020da:	f002 fe3f 	bl	8004d5c <HAL_GPIO_ReadPin>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d120      	bne.n	8002126 <MotorControl_ButtonHandler+0x506>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_RESET);
 80020e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	23d0      	movs	r3, #208	@ 0xd0
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	3368      	adds	r3, #104	@ 0x68
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fca1 	bl	8000a40 <TMC2209_SetDirection>
        TMC2209_Start_C(&motors[motorGroup * 2+1]);
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	23d0      	movs	r3, #208	@ 0xd0
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	3368      	adds	r3, #104	@ 0x68
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fd4f 	bl	8000bb4 <TMC2209_Start_C>
        while(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET);
 8002116:	bf00      	nop
 8002118:	2101      	movs	r1, #1
 800211a:	4813      	ldr	r0, [pc, #76]	@ (8002168 <MotorControl_ButtonHandler+0x548>)
 800211c:	f002 fe1e 	bl	8004d5c <HAL_GPIO_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f8      	beq.n	8002118 <MotorControl_ButtonHandler+0x4f8>
}
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_SET) {
 8002126:	2101      	movs	r1, #1
 8002128:	480f      	ldr	r0, [pc, #60]	@ (8002168 <MotorControl_ButtonHandler+0x548>)
 800212a:	f002 fe17 	bl	8004d5c <HAL_GPIO_ReadPin>
 800212e:	4603      	mov	r3, r0
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10b      	bne.n	800214c <MotorControl_ButtonHandler+0x52c>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2+1]);
 8002134:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <MotorControl_ButtonHandler+0x534>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	23d0      	movs	r3, #208	@ 0xd0
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	3368      	adds	r3, #104	@ 0x68
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fd04 	bl	8000b54 <TMC2209_Stop>
    }
}
 800214c:	bf00      	nop
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000109 	.word	0x20000109
 8002158:	200000e2 	.word	0x200000e2
 800215c:	40021400 	.word	0x40021400
 8002160:	2000010c 	.word	0x2000010c
 8002164:	40020c00 	.word	0x40020c00
 8002168:	40021800 	.word	0x40021800

0800216c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800217c:	d102      	bne.n	8002184 <HAL_GPIO_EXTI_Callback+0x18>
    {

    flagUserBtn = 1;
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <HAL_GPIO_EXTI_Callback+0x24>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
    }

}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	20000f34 	.word	0x20000f34

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002198:	f001 fe97 	bl	8003eca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219c:	f000 f8da 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a0:	f000 fe58 	bl	8002e54 <MX_GPIO_Init>
  MX_DMA_Init();
 80021a4:	f000 fe14 	bl	8002dd0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80021a8:	f000 fd84 	bl	8002cb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80021ac:	f000 fde2 	bl	8002d74 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 80021b0:	f000 fc0a 	bl	80029c8 <MX_TIM7_Init>
  MX_TIM4_Init();
 80021b4:	f000 fb56 	bl	8002864 <MX_TIM4_Init>
  MX_TIM2_Init();
 80021b8:	f000 fa64 	bl	8002684 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80021bc:	f000 fd4a 	bl	8002c54 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80021c0:	f008 fd54 	bl	800ac6c <MX_FATFS_Init>
  MX_SPI2_Init();
 80021c4:	f000 f974 	bl	80024b0 <MX_SPI2_Init>
  MX_TIM3_Init();
 80021c8:	f000 fad4 	bl	8002774 <MX_TIM3_Init>
  MX_TIM14_Init();
 80021cc:	f000 fc94 	bl	8002af8 <MX_TIM14_Init>
  MX_TIM5_Init();
 80021d0:	f000 fb9e 	bl	8002910 <MX_TIM5_Init>
  MX_TIM9_Init();
 80021d4:	f000 fc2e 	bl	8002a34 <MX_TIM9_Init>
  MX_I2C1_Init();
 80021d8:	f000 f92a 	bl	8002430 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80021dc:	f000 fd9a 	bl	8002d14 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80021e0:	f000 fcd8 	bl	8002b94 <MX_UART4_Init>
  MX_UART5_Init();
 80021e4:	f000 fd06 	bl	8002bf4 <MX_UART5_Init>
  MX_TIM1_Init();
 80021e8:	f000 f9a0 	bl	800252c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_I2C_Init(&hlcd3);
 80021ec:	4843      	ldr	r0, [pc, #268]	@ (80022fc <main+0x168>)
 80021ee:	f7fe fa73 	bl	80006d8 <LCD_I2C_Init>
  LCD_I2C_Clear(&hlcd3);
 80021f2:	4842      	ldr	r0, [pc, #264]	@ (80022fc <main+0x168>)
 80021f4:	f7fe fb0e 	bl	8000814 <LCD_I2C_Clear>
  LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
 80021f8:	2102      	movs	r1, #2
 80021fa:	4840      	ldr	r0, [pc, #256]	@ (80022fc <main+0x168>)
 80021fc:	f7fe fb3c 	bl	8000878 <LCD_I2C_DisplaySequentialGlossyText>

  SERVO_Init(&hservo1);
 8002200:	483f      	ldr	r0, [pc, #252]	@ (8002300 <main+0x16c>)
 8002202:	f7ff fbf9 	bl	80019f8 <SERVO_Init>
  SERVO_Init(&hservo2);
 8002206:	483f      	ldr	r0, [pc, #252]	@ (8002304 <main+0x170>)
 8002208:	f7ff fbf6 	bl	80019f8 <SERVO_Init>

  initializeMotors();
 800220c:	f7ff f8b6 	bl	800137c <initializeMotors>
  initializeSystem();
 8002210:	f7ff fb18 	bl	8001844 <initializeSystem>
  ENC_Init(&henc1);
 8002214:	483c      	ldr	r0, [pc, #240]	@ (8002308 <main+0x174>)
 8002216:	f7ff fb3b 	bl	8001890 <ENC_Init>

  TMC2209_setMotorsConfiguration(motors,8,1);
 800221a:	2201      	movs	r2, #1
 800221c:	2108      	movs	r1, #8
 800221e:	483b      	ldr	r0, [pc, #236]	@ (800230c <main+0x178>)
 8002220:	f7ff f856 	bl	80012d0 <TMC2209_setMotorsConfiguration>
  TMC2209_MoveTo(&axes[1],1,30);
 8002224:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002228:	2101      	movs	r1, #1
 800222a:	4839      	ldr	r0, [pc, #228]	@ (8002310 <main+0x17c>)
 800222c:	f7fe fcf8 	bl	8000c20 <TMC2209_MoveTo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1){

	   /// DEBUG ///
	      ES1 =IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin);
 8002230:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002234:	4837      	ldr	r0, [pc, #220]	@ (8002314 <main+0x180>)
 8002236:	f7ff fb39 	bl	80018ac <IsSensorTriggered>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	4b36      	ldr	r3, [pc, #216]	@ (8002318 <main+0x184>)
 8002240:	701a      	strb	r2, [r3, #0]
	      ES2 =IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin);
 8002242:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002246:	4835      	ldr	r0, [pc, #212]	@ (800231c <main+0x188>)
 8002248:	f7ff fb30 	bl	80018ac <IsSensorTriggered>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <main+0x18c>)
 8002252:	701a      	strb	r2, [r3, #0]
	      ES3= IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin);
 8002254:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002258:	4830      	ldr	r0, [pc, #192]	@ (800231c <main+0x188>)
 800225a:	f7ff fb27 	bl	80018ac <IsSensorTriggered>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	4b30      	ldr	r3, [pc, #192]	@ (8002324 <main+0x190>)
 8002264:	701a      	strb	r2, [r3, #0]
	      ES4 = IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin);
 8002266:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800226a:	482a      	ldr	r0, [pc, #168]	@ (8002314 <main+0x180>)
 800226c:	f7ff fb1e 	bl	80018ac <IsSensorTriggered>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <main+0x194>)
 8002276:	701a      	strb	r2, [r3, #0]

	      Btn1 = IsSensorTriggered(BtnLeft_GPIO_Port, BtnLeft_Pin);
 8002278:	2101      	movs	r1, #1
 800227a:	482c      	ldr	r0, [pc, #176]	@ (800232c <main+0x198>)
 800227c:	f7ff fb16 	bl	80018ac <IsSensorTriggered>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	4b2a      	ldr	r3, [pc, #168]	@ (8002330 <main+0x19c>)
 8002286:	701a      	strb	r2, [r3, #0]
	      Btn2 = IsSensorTriggered(BtnRight_GPIO_Port, BtnRight_Pin);
 8002288:	2102      	movs	r1, #2
 800228a:	482a      	ldr	r0, [pc, #168]	@ (8002334 <main+0x1a0>)
 800228c:	f7ff fb0e 	bl	80018ac <IsSensorTriggered>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <main+0x1a4>)
 8002296:	701a      	strb	r2, [r3, #0]
	      Btn3 = IsSensorTriggered(BtnDown_GPIO_Port, BtnDown_Pin);
 8002298:	2101      	movs	r1, #1
 800229a:	481e      	ldr	r0, [pc, #120]	@ (8002314 <main+0x180>)
 800229c:	f7ff fb06 	bl	80018ac <IsSensorTriggered>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <main+0x1a8>)
 80022a6:	701a      	strb	r2, [r3, #0]
	      Btn4 = IsSensorTriggered(BtnUp_GPIO_Port, BtnUp_Pin);
 80022a8:	2102      	movs	r1, #2
 80022aa:	481a      	ldr	r0, [pc, #104]	@ (8002314 <main+0x180>)
 80022ac:	f7ff fafe 	bl	80018ac <IsSensorTriggered>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <main+0x1ac>)
 80022b6:	701a      	strb	r2, [r3, #0]
	      Btn5 = IsSensorTriggered(BtnCtr_GPIO_Port, BtnCtr_Pin);
 80022b8:	2101      	movs	r1, #1
 80022ba:	481e      	ldr	r0, [pc, #120]	@ (8002334 <main+0x1a0>)
 80022bc:	f7ff faf6 	bl	80018ac <IsSensorTriggered>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <main+0x1b0>)
 80022c6:	701a      	strb	r2, [r3, #0]
	   /// DEBUG ///

      if (flagUserBtn)	{
 80022c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002348 <main+0x1b4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <main+0x152>
    	homingFlag = MotorsHoming(&motors);
 80022d2:	480e      	ldr	r0, [pc, #56]	@ (800230c <main+0x178>)
 80022d4:	f7ff fc60 	bl	8001b98 <MotorsHoming>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <main+0x1b8>)
 80022de:	701a      	strb	r2, [r3, #0]

    	flagUserBtn = 0;
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <main+0x1b4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
      }
  	if (homingFlag){
 80022e6:	4b19      	ldr	r3, [pc, #100]	@ (800234c <main+0x1b8>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d09f      	beq.n	8002230 <main+0x9c>
    	  MotorControl_ButtonHandler(&axes,&motors);
 80022f0:	4906      	ldr	r1, [pc, #24]	@ (800230c <main+0x178>)
 80022f2:	4817      	ldr	r0, [pc, #92]	@ (8002350 <main+0x1bc>)
 80022f4:	f7ff fc94 	bl	8001c20 <MotorControl_ButtonHandler>
	      ES1 =IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin);
 80022f8:	e79a      	b.n	8002230 <main+0x9c>
 80022fa:	bf00      	nop
 80022fc:	20000018 	.word	0x20000018
 8002300:	2000002c 	.word	0x2000002c
 8002304:	2000003c 	.word	0x2000003c
 8002308:	20000000 	.word	0x20000000
 800230c:	20000d44 	.word	0x20000d44
 8002310:	20000f0c 	.word	0x20000f0c
 8002314:	40021400 	.word	0x40021400
 8002318:	20000f35 	.word	0x20000f35
 800231c:	40021000 	.word	0x40021000
 8002320:	20000f36 	.word	0x20000f36
 8002324:	20000f37 	.word	0x20000f37
 8002328:	20000f38 	.word	0x20000f38
 800232c:	40021800 	.word	0x40021800
 8002330:	20000f39 	.word	0x20000f39
 8002334:	40020c00 	.word	0x40020c00
 8002338:	20000f3a 	.word	0x20000f3a
 800233c:	20000f3b 	.word	0x20000f3b
 8002340:	20000f3c 	.word	0x20000f3c
 8002344:	20000f3d 	.word	0x20000f3d
 8002348:	20000f34 	.word	0x20000f34
 800234c:	20000f3e 	.word	0x20000f3e
 8002350:	20000ee4 	.word	0x20000ee4

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b094      	sub	sp, #80	@ 0x50
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	2230      	movs	r2, #48	@ 0x30
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f009 fa80 	bl	800b868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002378:	f003 fada 	bl	8005930 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <SystemClock_Config+0xd4>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	4a29      	ldr	r2, [pc, #164]	@ (8002428 <SystemClock_Config+0xd4>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	@ 0x40
 8002388:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <SystemClock_Config+0xd4>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <SystemClock_Config+0xd8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a24      	ldr	r2, [pc, #144]	@ (800242c <SystemClock_Config+0xd8>)
 800239a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b22      	ldr	r3, [pc, #136]	@ (800242c <SystemClock_Config+0xd8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80023b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b6:	2302      	movs	r3, #2
 80023b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80023c4:	23d8      	movs	r3, #216	@ 0xd8
 80023c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023c8:	2302      	movs	r3, #2
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80023cc:	2309      	movs	r3, #9
 80023ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d0:	f107 0320 	add.w	r3, r7, #32
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 fb0b 	bl	80059f0 <HAL_RCC_OscConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80023e0:	f000 fe60 	bl	80030a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023e4:	f003 fab4 	bl	8005950 <HAL_PWREx_EnableOverDrive>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80023ee:	f000 fe59 	bl	80030a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f2:	230f      	movs	r3, #15
 80023f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f6:	2302      	movs	r3, #2
 80023f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002402:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002404:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002408:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	2107      	movs	r1, #7
 8002410:	4618      	mov	r0, r3
 8002412:	f003 fd91 	bl	8005f38 <HAL_RCC_ClockConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800241c:	f000 fe42 	bl	80030a4 <Error_Handler>
  }
}
 8002420:	bf00      	nop
 8002422:	3750      	adds	r7, #80	@ 0x50
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000

08002430 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002436:	4a1c      	ldr	r2, [pc, #112]	@ (80024a8 <MX_I2C1_Init+0x78>)
 8002438:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800243c:	4a1b      	ldr	r2, [pc, #108]	@ (80024ac <MX_I2C1_Init+0x7c>)
 800243e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002448:	2201      	movs	r2, #1
 800244a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800244c:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002464:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800246a:	480e      	ldr	r0, [pc, #56]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800246c:	f002 fcc0 	bl	8004df0 <HAL_I2C_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002476:	f000 fe15 	bl	80030a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800247a:	2100      	movs	r1, #0
 800247c:	4809      	ldr	r0, [pc, #36]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800247e:	f003 f885 	bl	800558c <HAL_I2CEx_ConfigAnalogFilter>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002488:	f000 fe0c 	bl	80030a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800248c:	2100      	movs	r1, #0
 800248e:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002490:	f003 f8c7 	bl	8005622 <HAL_I2CEx_ConfigDigitalFilter>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800249a:	f000 fe03 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000124 	.word	0x20000124
 80024a8:	40005400 	.word	0x40005400
 80024ac:	20404768 	.word	0x20404768

080024b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <MX_SPI2_Init+0x78>)
 80024b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80024ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024d6:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024e6:	2238      	movs	r2, #56	@ 0x38
 80024e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <MX_SPI2_Init+0x74>)
 80024fe:	2207      	movs	r2, #7
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <MX_SPI2_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <MX_SPI2_Init+0x74>)
 800250a:	2208      	movs	r2, #8
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	@ (8002524 <MX_SPI2_Init+0x74>)
 8002510:	f004 fb28 	bl	8006b64 <HAL_SPI_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800251a:	f000 fdc3 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000178 	.word	0x20000178
 8002528:	40003800 	.word	0x40003800

0800252c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b09a      	sub	sp, #104	@ 0x68
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002532:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002540:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800254c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
 800255c:	615a      	str	r2, [r3, #20]
 800255e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	222c      	movs	r2, #44	@ 0x2c
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f009 f97e 	bl	800b868 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800256c:	4b43      	ldr	r3, [pc, #268]	@ (800267c <MX_TIM1_Init+0x150>)
 800256e:	4a44      	ldr	r2, [pc, #272]	@ (8002680 <MX_TIM1_Init+0x154>)
 8002570:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 8002572:	4b42      	ldr	r3, [pc, #264]	@ (800267c <MX_TIM1_Init+0x150>)
 8002574:	22d7      	movs	r2, #215	@ 0xd7
 8002576:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002578:	4b40      	ldr	r3, [pc, #256]	@ (800267c <MX_TIM1_Init+0x150>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800257e:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <MX_TIM1_Init+0x150>)
 8002580:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002584:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002586:	4b3d      	ldr	r3, [pc, #244]	@ (800267c <MX_TIM1_Init+0x150>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800258c:	4b3b      	ldr	r3, [pc, #236]	@ (800267c <MX_TIM1_Init+0x150>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b3a      	ldr	r3, [pc, #232]	@ (800267c <MX_TIM1_Init+0x150>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002598:	4838      	ldr	r0, [pc, #224]	@ (800267c <MX_TIM1_Init+0x150>)
 800259a:	f005 f8ad 	bl	80076f8 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80025a4:	f000 fd7e 	bl	80030a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80025b2:	4619      	mov	r1, r3
 80025b4:	4831      	ldr	r0, [pc, #196]	@ (800267c <MX_TIM1_Init+0x150>)
 80025b6:	f006 f845 	bl	8008644 <HAL_TIM_ConfigClockSource>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025c0:	f000 fd70 	bl	80030a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025c4:	482d      	ldr	r0, [pc, #180]	@ (800267c <MX_TIM1_Init+0x150>)
 80025c6:	f005 f986 	bl	80078d6 <HAL_TIM_PWM_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80025d0:	f000 fd68 	bl	80030a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025d8:	2300      	movs	r3, #0
 80025da:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025dc:	2300      	movs	r3, #0
 80025de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80025e4:	4619      	mov	r1, r3
 80025e6:	4825      	ldr	r0, [pc, #148]	@ (800267c <MX_TIM1_Init+0x150>)
 80025e8:	f006 fce8 	bl	8008fbc <HAL_TIMEx_MasterConfigSynchronization>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80025f2:	f000 fd57 	bl	80030a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f6:	2360      	movs	r3, #96	@ 0x60
 80025f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 80025fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80025fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002600:	2300      	movs	r3, #0
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800260c:	2300      	movs	r3, #0
 800260e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002610:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002614:	220c      	movs	r2, #12
 8002616:	4619      	mov	r1, r3
 8002618:	4818      	ldr	r0, [pc, #96]	@ (800267c <MX_TIM1_Init+0x150>)
 800261a:	f005 feff 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002624:	f000 fd3e 	bl	80030a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800263c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002640:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800264a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4807      	ldr	r0, [pc, #28]	@ (800267c <MX_TIM1_Init+0x150>)
 800265e:	f006 fd3b 	bl	80090d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002668:	f000 fd1c 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800266c:	4803      	ldr	r0, [pc, #12]	@ (800267c <MX_TIM1_Init+0x150>)
 800266e:	f000 ff0f 	bl	8003490 <HAL_TIM_MspPostInit>

}
 8002672:	bf00      	nop
 8002674:	3768      	adds	r7, #104	@ 0x68
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001dc 	.word	0x200001dc
 8002680:	40010000 	.word	0x40010000

08002684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08e      	sub	sp, #56	@ 0x38
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a4:	463b      	mov	r3, r7
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 80026be:	4b2c      	ldr	r3, [pc, #176]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026c0:	22d7      	movs	r2, #215	@ 0xd7
 80026c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80026ca:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026de:	4824      	ldr	r0, [pc, #144]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026e0:	f005 f80a 	bl	80076f8 <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80026ea:	f000 fcdb 	bl	80030a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026f8:	4619      	mov	r1, r3
 80026fa:	481d      	ldr	r0, [pc, #116]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026fc:	f005 ffa2 	bl	8008644 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002706:	f000 fccd 	bl	80030a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800270a:	4819      	ldr	r0, [pc, #100]	@ (8002770 <MX_TIM2_Init+0xec>)
 800270c:	f005 f8e3 	bl	80078d6 <HAL_TIM_PWM_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002716:	f000 fcc5 	bl	80030a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	4619      	mov	r1, r3
 8002728:	4811      	ldr	r0, [pc, #68]	@ (8002770 <MX_TIM2_Init+0xec>)
 800272a:	f006 fc47 	bl	8008fbc <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002734:	f000 fcb6 	bl	80030a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002738:	2360      	movs	r3, #96	@ 0x60
 800273a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800273c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002740:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800274a:	463b      	mov	r3, r7
 800274c:	2208      	movs	r2, #8
 800274e:	4619      	mov	r1, r3
 8002750:	4807      	ldr	r0, [pc, #28]	@ (8002770 <MX_TIM2_Init+0xec>)
 8002752:	f005 fe63 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800275c:	f000 fca2 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002760:	4803      	ldr	r0, [pc, #12]	@ (8002770 <MX_TIM2_Init+0xec>)
 8002762:	f000 fe95 	bl	8003490 <HAL_TIM_MspPostInit>

}
 8002766:	bf00      	nop
 8002768:	3738      	adds	r7, #56	@ 0x38
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000228 	.word	0x20000228

08002774 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	@ 0x38
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002794:	463b      	mov	r3, r7
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	611a      	str	r2, [r3, #16]
 80027a2:	615a      	str	r2, [r3, #20]
 80027a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027a6:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002860 <MX_TIM3_Init+0xec>)
 80027aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 80027ac:	4b2b      	ldr	r3, [pc, #172]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027ae:	22d7      	movs	r2, #215	@ 0xd7
 80027b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80027b8:	4b28      	ldr	r3, [pc, #160]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c0:	4b26      	ldr	r3, [pc, #152]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c6:	4b25      	ldr	r3, [pc, #148]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027cc:	4823      	ldr	r0, [pc, #140]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027ce:	f004 ff93 	bl	80076f8 <HAL_TIM_Base_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80027d8:	f000 fc64 	bl	80030a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027e6:	4619      	mov	r1, r3
 80027e8:	481c      	ldr	r0, [pc, #112]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027ea:	f005 ff2b 	bl	8008644 <HAL_TIM_ConfigClockSource>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80027f4:	f000 fc56 	bl	80030a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027f8:	4818      	ldr	r0, [pc, #96]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027fa:	f005 f86c 	bl	80078d6 <HAL_TIM_PWM_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002804:	f000 fc4e 	bl	80030a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	4619      	mov	r1, r3
 8002816:	4811      	ldr	r0, [pc, #68]	@ (800285c <MX_TIM3_Init+0xe8>)
 8002818:	f006 fbd0 	bl	8008fbc <HAL_TIMEx_MasterConfigSynchronization>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002822:	f000 fc3f 	bl	80030a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002826:	2360      	movs	r3, #96	@ 0x60
 8002828:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800282a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800282e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	2208      	movs	r2, #8
 800283c:	4619      	mov	r1, r3
 800283e:	4807      	ldr	r0, [pc, #28]	@ (800285c <MX_TIM3_Init+0xe8>)
 8002840:	f005 fdec 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800284a:	f000 fc2b 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800284e:	4803      	ldr	r0, [pc, #12]	@ (800285c <MX_TIM3_Init+0xe8>)
 8002850:	f000 fe1e 	bl	8003490 <HAL_TIM_MspPostInit>

}
 8002854:	bf00      	nop
 8002856:	3738      	adds	r7, #56	@ 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000274 	.word	0x20000274
 8002860:	40000400 	.word	0x40000400

08002864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	@ 0x30
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	2224      	movs	r2, #36	@ 0x24
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f008 fff8 	bl	800b868 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002878:	463b      	mov	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002882:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <MX_TIM4_Init+0xa4>)
 8002884:	4a21      	ldr	r2, [pc, #132]	@ (800290c <MX_TIM4_Init+0xa8>)
 8002886:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002888:	4b1f      	ldr	r3, [pc, #124]	@ (8002908 <MX_TIM4_Init+0xa4>)
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <MX_TIM4_Init+0xa4>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002894:	4b1c      	ldr	r3, [pc, #112]	@ (8002908 <MX_TIM4_Init+0xa4>)
 8002896:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800289a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <MX_TIM4_Init+0xa4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <MX_TIM4_Init+0xa4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028a8:	2303      	movs	r3, #3
 80028aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028b0:	2301      	movs	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80028b8:	230f      	movs	r3, #15
 80028ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028c0:	2301      	movs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80028c8:	230f      	movs	r3, #15
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	4619      	mov	r1, r3
 80028d2:	480d      	ldr	r0, [pc, #52]	@ (8002908 <MX_TIM4_Init+0xa4>)
 80028d4:	f005 fb66 	bl	8007fa4 <HAL_TIM_Encoder_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80028de:	f000 fbe1 	bl	80030a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028ea:	463b      	mov	r3, r7
 80028ec:	4619      	mov	r1, r3
 80028ee:	4806      	ldr	r0, [pc, #24]	@ (8002908 <MX_TIM4_Init+0xa4>)
 80028f0:	f006 fb64 	bl	8008fbc <HAL_TIMEx_MasterConfigSynchronization>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80028fa:	f000 fbd3 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	3730      	adds	r7, #48	@ 0x30
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200002c0 	.word	0x200002c0
 800290c:	40000800 	.word	0x40000800

08002910 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	@ 0x28
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002922:	463b      	mov	r3, r7
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
 8002930:	615a      	str	r2, [r3, #20]
 8002932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002934:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 8002936:	4a23      	ldr	r2, [pc, #140]	@ (80029c4 <MX_TIM5_Init+0xb4>)
 8002938:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 800293a:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 800293c:	22d7      	movs	r2, #215	@ 0xd7
 800293e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002940:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002946:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 8002948:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800294c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294e:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002954:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800295a:	4819      	ldr	r0, [pc, #100]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 800295c:	f004 ffbb 	bl	80078d6 <HAL_TIM_PWM_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002966:	f000 fb9d 	bl	80030a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002972:	f107 031c 	add.w	r3, r7, #28
 8002976:	4619      	mov	r1, r3
 8002978:	4811      	ldr	r0, [pc, #68]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 800297a:	f006 fb1f 	bl	8008fbc <HAL_TIMEx_MasterConfigSynchronization>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002984:	f000 fb8e 	bl	80030a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002988:	2360      	movs	r3, #96	@ 0x60
 800298a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800298c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002990:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800299a:	463b      	mov	r3, r7
 800299c:	2200      	movs	r2, #0
 800299e:	4619      	mov	r1, r3
 80029a0:	4807      	ldr	r0, [pc, #28]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 80029a2:	f005 fd3b 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80029ac:	f000 fb7a 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80029b0:	4803      	ldr	r0, [pc, #12]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 80029b2:	f000 fd6d 	bl	8003490 <HAL_TIM_MspPostInit>

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	@ 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000030c 	.word	0x2000030c
 80029c4:	40000c00 	.word	0x40000c00

080029c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <MX_TIM7_Init+0x64>)
 80029da:	4a15      	ldr	r2, [pc, #84]	@ (8002a30 <MX_TIM7_Init+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <MX_TIM7_Init+0x64>)
 80029e0:	22d7      	movs	r2, #215	@ 0xd7
 80029e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <MX_TIM7_Init+0x64>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <MX_TIM7_Init+0x64>)
 80029ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <MX_TIM7_Init+0x64>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029f8:	480c      	ldr	r0, [pc, #48]	@ (8002a2c <MX_TIM7_Init+0x64>)
 80029fa:	f004 fe7d 	bl	80076f8 <HAL_TIM_Base_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002a04:	f000 fb4e 	bl	80030a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MX_TIM7_Init+0x64>)
 8002a16:	f006 fad1 	bl	8008fbc <HAL_TIMEx_MasterConfigSynchronization>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002a20:	f000 fb40 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000358 	.word	0x20000358
 8002a30:	40001400 	.word	0x40001400

08002a34 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	@ 0x30
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3a:	f107 0320 	add.w	r3, r7, #32
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	615a      	str	r2, [r3, #20]
 8002a58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002a5a:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002a5c:	4a25      	ldr	r2, [pc, #148]	@ (8002af4 <MX_TIM9_Init+0xc0>)
 8002a5e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8002a60:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002a62:	226b      	movs	r2, #107	@ 0x6b
 8002a64:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a66:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8002a6c:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002a6e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002a72:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002a80:	481b      	ldr	r0, [pc, #108]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002a82:	f004 fe39 	bl	80076f8 <HAL_TIM_Base_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002a8c:	f000 fb0a 	bl	80030a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a94:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002a96:	f107 0320 	add.w	r3, r7, #32
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4814      	ldr	r0, [pc, #80]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002a9e:	f005 fdd1 	bl	8008644 <HAL_TIM_ConfigClockSource>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002aa8:	f000 fafc 	bl	80030a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002aac:	4810      	ldr	r0, [pc, #64]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002aae:	f004 ff12 	bl	80078d6 <HAL_TIM_PWM_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002ab8:	f000 faf4 	bl	80030a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002abc:	2360      	movs	r3, #96	@ 0x60
 8002abe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002ac0:	230a      	movs	r3, #10
 8002ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4807      	ldr	r0, [pc, #28]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002ad4:	f005 fca2 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002ade:	f000 fae1 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002ae2:	4803      	ldr	r0, [pc, #12]	@ (8002af0 <MX_TIM9_Init+0xbc>)
 8002ae4:	f000 fcd4 	bl	8003490 <HAL_TIM_MspPostInit>

}
 8002ae8:	bf00      	nop
 8002aea:	3730      	adds	r7, #48	@ 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200003a4 	.word	0x200003a4
 8002af4:	40014000 	.word	0x40014000

08002af8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
 8002b0c:	615a      	str	r2, [r3, #20]
 8002b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002b10:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b12:	4a1f      	ldr	r2, [pc, #124]	@ (8002b90 <MX_TIM14_Init+0x98>)
 8002b14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b18:	226b      	movs	r2, #107	@ 0x6b
 8002b1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b24:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002b28:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b2a:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b30:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002b36:	4815      	ldr	r0, [pc, #84]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b38:	f004 fdde 	bl	80076f8 <HAL_TIM_Base_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002b42:	f000 faaf 	bl	80030a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002b46:	4811      	ldr	r0, [pc, #68]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b48:	f004 fec5 	bl	80078d6 <HAL_TIM_PWM_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002b52:	f000 faa7 	bl	80030a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b56:	2360      	movs	r3, #96	@ 0x60
 8002b58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002b5a:	230a      	movs	r3, #10
 8002b5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4807      	ldr	r0, [pc, #28]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b6e:	f005 fc55 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002b78:	f000 fa94 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002b7c:	4803      	ldr	r0, [pc, #12]	@ (8002b8c <MX_TIM14_Init+0x94>)
 8002b7e:	f000 fc87 	bl	8003490 <HAL_TIM_MspPostInit>

}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200003f0 	.word	0x200003f0
 8002b90:	40002000 	.word	0x40002000

08002b94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b98:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <MX_UART4_Init+0x58>)
 8002b9a:	4a15      	ldr	r2, [pc, #84]	@ (8002bf0 <MX_UART4_Init+0x5c>)
 8002b9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002b9e:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <MX_UART4_Init+0x58>)
 8002ba0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ba4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <MX_UART4_Init+0x58>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <MX_UART4_Init+0x58>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bec <MX_UART4_Init+0x58>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <MX_UART4_Init+0x58>)
 8002bba:	220c      	movs	r2, #12
 8002bbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <MX_UART4_Init+0x58>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <MX_UART4_Init+0x58>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bca:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <MX_UART4_Init+0x58>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <MX_UART4_Init+0x58>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bd6:	4805      	ldr	r0, [pc, #20]	@ (8002bec <MX_UART4_Init+0x58>)
 8002bd8:	f006 fb1a 	bl	8009210 <HAL_UART_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002be2:	f000 fa5f 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2000043c 	.word	0x2000043c
 8002bf0:	40004c00 	.word	0x40004c00

08002bf4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002bf8:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002bfa:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <MX_UART5_Init+0x5c>)
 8002bfc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002bfe:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <MX_UART5_Init+0x58>)
 8002c38:	f006 faea 	bl	8009210 <HAL_UART_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002c42:	f000 fa2f 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200004c4 	.word	0x200004c4
 8002c50:	40005000 	.word	0x40005000

08002c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c5a:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <MX_USART2_UART_Init+0x5c>)
 8002c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c66:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	@ (8002cac <MX_USART2_UART_Init+0x58>)
 8002c98:	f006 faba 	bl	8009210 <HAL_UART_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ca2:	f000 f9ff 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000054c 	.word	0x2000054c
 8002cb0:	40004400 	.word	0x40004400

08002cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cba:	4a15      	ldr	r2, [pc, #84]	@ (8002d10 <MX_USART3_UART_Init+0x5c>)
 8002cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8002cbe:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cc0:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8002cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc6:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cda:	220c      	movs	r2, #12
 8002cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce4:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cea:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	@ (8002d0c <MX_USART3_UART_Init+0x58>)
 8002cf8:	f006 fa8a 	bl	8009210 <HAL_UART_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002d02:	f000 f9cf 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200005d4 	.word	0x200005d4
 8002d10:	40004800 	.word	0x40004800

08002d14 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d18:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d1a:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <MX_USART6_UART_Init+0x5c>)
 8002d1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d24:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d44:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	@ (8002d6c <MX_USART6_UART_Init+0x58>)
 8002d58:	f006 fa5a 	bl	8009210 <HAL_UART_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002d62:	f000 f99f 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000065c 	.word	0x2000065c
 8002d70:	40011400 	.word	0x40011400

08002d74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d78:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002d7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002d80:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d82:	2206      	movs	r2, #6
 8002d84:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d88:	2202      	movs	r2, #2
 8002d8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d94:	2202      	movs	r2, #2
 8002d96:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002db0:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002db6:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002db8:	f002 fc7f 	bl	80056ba <HAL_PCD_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002dc2:	f000 f96f 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000864 	.word	0x20000864

08002dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <MX_DMA_Init+0x80>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	4a1d      	ldr	r2, [pc, #116]	@ (8002e50 <MX_DMA_Init+0x80>)
 8002ddc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <MX_DMA_Init+0x80>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dee:	4b18      	ldr	r3, [pc, #96]	@ (8002e50 <MX_DMA_Init+0x80>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a17      	ldr	r2, [pc, #92]	@ (8002e50 <MX_DMA_Init+0x80>)
 8002df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <MX_DMA_Init+0x80>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	200b      	movs	r0, #11
 8002e0c:	f001 f9b9 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002e10:	200b      	movs	r0, #11
 8002e12:	f001 f9d2 	bl	80041ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	200d      	movs	r0, #13
 8002e1c:	f001 f9b1 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002e20:	200d      	movs	r0, #13
 8002e22:	f001 f9ca 	bl	80041ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2010      	movs	r0, #16
 8002e2c:	f001 f9a9 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002e30:	2010      	movs	r0, #16
 8002e32:	f001 f9c2 	bl	80041ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2100      	movs	r1, #0
 8002e3a:	2039      	movs	r0, #57	@ 0x39
 8002e3c:	f001 f9a1 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e40:	2039      	movs	r0, #57	@ 0x39
 8002e42:	f001 f9ba 	bl	80041ba <HAL_NVIC_EnableIRQ>

}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800

08002e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08e      	sub	sp, #56	@ 0x38
 8002e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e6a:	4b87      	ldr	r3, [pc, #540]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a86      	ldr	r2, [pc, #536]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b84      	ldr	r3, [pc, #528]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	623b      	str	r3, [r7, #32]
 8002e80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e82:	4b81      	ldr	r3, [pc, #516]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	4a80      	ldr	r2, [pc, #512]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8e:	4b7e      	ldr	r3, [pc, #504]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	4a7a      	ldr	r2, [pc, #488]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ea0:	f043 0320 	orr.w	r3, r3, #32
 8002ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea6:	4b78      	ldr	r3, [pc, #480]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eb2:	4b75      	ldr	r3, [pc, #468]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a74      	ldr	r2, [pc, #464]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b72      	ldr	r3, [pc, #456]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	4b6f      	ldr	r3, [pc, #444]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	4a6e      	ldr	r2, [pc, #440]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee2:	4b69      	ldr	r3, [pc, #420]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a68      	ldr	r2, [pc, #416]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b66      	ldr	r3, [pc, #408]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002efa:	4b63      	ldr	r3, [pc, #396]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	4a62      	ldr	r2, [pc, #392]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f06:	4b60      	ldr	r3, [pc, #384]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f12:	4b5d      	ldr	r3, [pc, #372]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a5c      	ldr	r2, [pc, #368]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8003088 <MX_GPIO_Init+0x234>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f249 5185 	movw	r1, #38277	@ 0x9585
 8002f30:	4856      	ldr	r0, [pc, #344]	@ (800308c <MX_GPIO_Init+0x238>)
 8002f32:	f001 ff2b 	bl	8004d8c <HAL_GPIO_WritePin>
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENN1_Pin|SPI_cs_Pin, GPIO_PIN_RESET);
 8002f36:	2200      	movs	r2, #0
 8002f38:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002f3c:	4854      	ldr	r0, [pc, #336]	@ (8003090 <MX_GPIO_Init+0x23c>)
 8002f3e:	f001 ff25 	bl	8004d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2140      	movs	r1, #64	@ 0x40
 8002f46:	4853      	ldr	r0, [pc, #332]	@ (8003094 <MX_GPIO_Init+0x240>)
 8002f48:	f001 ff20 	bl	8004d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR3_Pin ENN3_Pin ENN4_Pin ENN2_Pin
                           DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8002f4c:	f249 5385 	movw	r3, #38277	@ 0x9585
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f62:	4619      	mov	r1, r3
 8002f64:	4849      	ldr	r0, [pc, #292]	@ (800308c <MX_GPIO_Init+0x238>)
 8002f66:	f001 fd4d 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4845      	ldr	r0, [pc, #276]	@ (8003098 <MX_GPIO_Init+0x244>)
 8002f82:	f001 fd3f 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnDown_Pin BtnUp_Pin EndStop1_Pin EndStop4_Pin
                           BtnDownF15_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin|BtnUp_Pin|EndStop1_Pin|EndStop4_Pin
 8002f86:	f24e 0303 	movw	r3, #57347	@ 0xe003
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BtnDownF15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4840      	ldr	r0, [pc, #256]	@ (800309c <MX_GPIO_Init+0x248>)
 8002f9c:	f001 fd32 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BtnLeft_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BtnLeft_GPIO_Port, &GPIO_InitStruct);
 8002fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4838      	ldr	r0, [pc, #224]	@ (8003094 <MX_GPIO_Init+0x240>)
 8002fb4:	f001 fd26 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop2_Pin EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop2_Pin|EndStop3_Pin;
 8002fb8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fca:	4619      	mov	r1, r3
 8002fcc:	482f      	ldr	r0, [pc, #188]	@ (800308c <MX_GPIO_Init+0x238>)
 8002fce:	f001 fd19 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8002fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4829      	ldr	r0, [pc, #164]	@ (800308c <MX_GPIO_Init+0x238>)
 8002fe8:	f001 fd0c 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENN1_Pin SPI_cs_Pin */
  GPIO_InitStruct.Pin = ENN1_Pin|SPI_cs_Pin;
 8002fec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003002:	4619      	mov	r1, r3
 8003004:	4822      	ldr	r0, [pc, #136]	@ (8003090 <MX_GPIO_Init+0x23c>)
 8003006:	f001 fcfd 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBtn_Pin */
  GPIO_InitStruct.Pin = EncoderBtn_Pin;
 800300a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003010:	2300      	movs	r3, #0
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EncoderBtn_GPIO_Port, &GPIO_InitStruct);
 8003018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800301c:	4619      	mov	r1, r3
 800301e:	4820      	ldr	r0, [pc, #128]	@ (80030a0 <MX_GPIO_Init+0x24c>)
 8003020:	f001 fcf0 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003024:	2340      	movs	r3, #64	@ 0x40
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003028:	2301      	movs	r3, #1
 800302a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003038:	4619      	mov	r1, r3
 800303a:	4816      	ldr	r0, [pc, #88]	@ (8003094 <MX_GPIO_Init+0x240>)
 800303c:	f001 fce2 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003040:	2380      	movs	r3, #128	@ 0x80
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800304c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003050:	4619      	mov	r1, r3
 8003052:	4810      	ldr	r0, [pc, #64]	@ (8003094 <MX_GPIO_Init+0x240>)
 8003054:	f001 fcd6 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnCtr_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin|BtnRight_Pin;
 8003058:	2303      	movs	r3, #3
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305c:	2300      	movs	r3, #0
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003060:	2301      	movs	r3, #1
 8003062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003068:	4619      	mov	r1, r3
 800306a:	480d      	ldr	r0, [pc, #52]	@ (80030a0 <MX_GPIO_Init+0x24c>)
 800306c:	f001 fcca 	bl	8004a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	2100      	movs	r1, #0
 8003074:	2028      	movs	r0, #40	@ 0x28
 8003076:	f001 f884 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800307a:	2028      	movs	r0, #40	@ 0x28
 800307c:	f001 f89d 	bl	80041ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003080:	bf00      	nop
 8003082:	3738      	adds	r7, #56	@ 0x38
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	40021000 	.word	0x40021000
 8003090:	40020400 	.word	0x40020400
 8003094:	40021800 	.word	0x40021800
 8003098:	40020800 	.word	0x40020800
 800309c:	40021400 	.word	0x40021400
 80030a0:	40020c00 	.word	0x40020c00

080030a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a8:	b672      	cpsid	i
}
 80030aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <Error_Handler+0x8>

080030b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <HAL_MspInit+0x44>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	4a0e      	ldr	r2, [pc, #56]	@ (80030f4 <HAL_MspInit+0x44>)
 80030bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_MspInit+0x44>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_MspInit+0x44>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	4a08      	ldr	r2, [pc, #32]	@ (80030f4 <HAL_MspInit+0x44>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_MspInit+0x44>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800

080030f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0aa      	sub	sp, #168	@ 0xa8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003110:	f107 0310 	add.w	r3, r7, #16
 8003114:	2284      	movs	r2, #132	@ 0x84
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f008 fba5 	bl	800b868 <memset>
  if(hi2c->Instance==I2C1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a22      	ldr	r2, [pc, #136]	@ (80031ac <HAL_I2C_MspInit+0xb4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d13c      	bne.n	80031a2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003128:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800312c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800312e:	2300      	movs	r3, #0
 8003130:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	4618      	mov	r0, r3
 8003138:	f003 f924 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003142:	f7ff ffaf 	bl	80030a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <HAL_I2C_MspInit+0xb8>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <HAL_I2C_MspInit+0xb8>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	6313      	str	r3, [r2, #48]	@ 0x30
 8003152:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <HAL_I2C_MspInit+0xb8>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800315e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003162:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003166:	2312      	movs	r3, #18
 8003168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003178:	2304      	movs	r3, #4
 800317a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003182:	4619      	mov	r1, r3
 8003184:	480b      	ldr	r0, [pc, #44]	@ (80031b4 <HAL_I2C_MspInit+0xbc>)
 8003186:	f001 fc3d 	bl	8004a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800318a:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_I2C_MspInit+0xb8>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	4a08      	ldr	r2, [pc, #32]	@ (80031b0 <HAL_I2C_MspInit+0xb8>)
 8003190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003194:	6413      	str	r3, [r2, #64]	@ 0x40
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_I2C_MspInit+0xb8>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80031a2:	bf00      	nop
 80031a4:	37a8      	adds	r7, #168	@ 0xa8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40005400 	.word	0x40005400
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020400 	.word	0x40020400

080031b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	@ 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a25      	ldr	r2, [pc, #148]	@ (800326c <HAL_SPI_MspInit+0xb4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d144      	bne.n	8003264 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031da:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	4a24      	ldr	r2, [pc, #144]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 80031e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e6:	4b22      	ldr	r3, [pc, #136]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b16      	ldr	r3, [pc, #88]	@ (8003270 <HAL_SPI_MspInit+0xb8>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003222:	2304      	movs	r3, #4
 8003224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322e:	2303      	movs	r3, #3
 8003230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003232:	2305      	movs	r3, #5
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	4619      	mov	r1, r3
 800323c:	480d      	ldr	r0, [pc, #52]	@ (8003274 <HAL_SPI_MspInit+0xbc>)
 800323e:	f001 fbe1 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003242:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8003246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003250:	2303      	movs	r3, #3
 8003252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003254:	2305      	movs	r3, #5
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	4619      	mov	r1, r3
 800325e:	4806      	ldr	r0, [pc, #24]	@ (8003278 <HAL_SPI_MspInit+0xc0>)
 8003260:	f001 fbd0 	bl	8004a04 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003264:	bf00      	nop
 8003266:	3728      	adds	r7, #40	@ 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40003800 	.word	0x40003800
 8003270:	40023800 	.word	0x40023800
 8003274:	40020800 	.word	0x40020800
 8003278:	40020400 	.word	0x40020400

0800327c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a42      	ldr	r2, [pc, #264]	@ (8003394 <HAL_TIM_Base_MspInit+0x118>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d114      	bne.n	80032b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800328e:	4b42      	ldr	r3, [pc, #264]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	4a41      	ldr	r2, [pc, #260]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6453      	str	r3, [r2, #68]	@ 0x44
 800329a:	4b3f      	ldr	r3, [pc, #252]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2100      	movs	r1, #0
 80032aa:	201b      	movs	r0, #27
 80032ac:	f000 ff69 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032b0:	201b      	movs	r0, #27
 80032b2:	f000 ff82 	bl	80041ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80032b6:	e068      	b.n	800338a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c0:	d114      	bne.n	80032ec <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032c2:	4b35      	ldr	r3, [pc, #212]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	4a34      	ldr	r2, [pc, #208]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ce:	4b32      	ldr	r3, [pc, #200]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	201c      	movs	r0, #28
 80032e0:	f000 ff4f 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032e4:	201c      	movs	r0, #28
 80032e6:	f000 ff68 	bl	80041ba <HAL_NVIC_EnableIRQ>
}
 80032ea:	e04e      	b.n	800338a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	@ (800339c <HAL_TIM_Base_MspInit+0x120>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d114      	bne.n	8003320 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032f6:	4b28      	ldr	r3, [pc, #160]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	4a27      	ldr	r2, [pc, #156]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6413      	str	r3, [r2, #64]	@ 0x40
 8003302:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	201d      	movs	r0, #29
 8003314:	f000 ff35 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003318:	201d      	movs	r0, #29
 800331a:	f000 ff4e 	bl	80041ba <HAL_NVIC_EnableIRQ>
}
 800331e:	e034      	b.n	800338a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1e      	ldr	r2, [pc, #120]	@ (80033a0 <HAL_TIM_Base_MspInit+0x124>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10c      	bne.n	8003344 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800332a:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	4a1a      	ldr	r2, [pc, #104]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003330:	f043 0320 	orr.w	r3, r3, #32
 8003334:	6413      	str	r3, [r2, #64]	@ 0x40
 8003336:	4b18      	ldr	r3, [pc, #96]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
}
 8003342:	e022      	b.n	800338a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a16      	ldr	r2, [pc, #88]	@ (80033a4 <HAL_TIM_Base_MspInit+0x128>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10c      	bne.n	8003368 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800334e:	4b12      	ldr	r3, [pc, #72]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	4a11      	ldr	r2, [pc, #68]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	6453      	str	r3, [r2, #68]	@ 0x44
 800335a:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
}
 8003366:	e010      	b.n	800338a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0e      	ldr	r2, [pc, #56]	@ (80033a8 <HAL_TIM_Base_MspInit+0x12c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10b      	bne.n	800338a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003372:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337c:	6413      	str	r3, [r2, #64]	@ 0x40
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_TIM_Base_MspInit+0x11c>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
}
 800338a:	bf00      	nop
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40010000 	.word	0x40010000
 8003398:	40023800 	.word	0x40023800
 800339c:	40000400 	.word	0x40000400
 80033a0:	40001400 	.word	0x40001400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40002000 	.word	0x40002000

080033ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003438 <HAL_TIM_Encoder_MspInit+0x8c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d130      	bne.n	8003430 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033ce:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <HAL_TIM_Encoder_MspInit+0x90>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	4a1a      	ldr	r2, [pc, #104]	@ (800343c <HAL_TIM_Encoder_MspInit+0x90>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033da:	4b18      	ldr	r3, [pc, #96]	@ (800343c <HAL_TIM_Encoder_MspInit+0x90>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e6:	4b15      	ldr	r3, [pc, #84]	@ (800343c <HAL_TIM_Encoder_MspInit+0x90>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a14      	ldr	r2, [pc, #80]	@ (800343c <HAL_TIM_Encoder_MspInit+0x90>)
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b12      	ldr	r3, [pc, #72]	@ (800343c <HAL_TIM_Encoder_MspInit+0x90>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 80033fe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003410:	2302      	movs	r3, #2
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4619      	mov	r1, r3
 800341a:	4809      	ldr	r0, [pc, #36]	@ (8003440 <HAL_TIM_Encoder_MspInit+0x94>)
 800341c:	f001 faf2 	bl	8004a04 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003420:	2200      	movs	r2, #0
 8003422:	2100      	movs	r1, #0
 8003424:	201e      	movs	r0, #30
 8003426:	f000 feac 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800342a:	201e      	movs	r0, #30
 800342c:	f000 fec5 	bl	80041ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003430:	bf00      	nop
 8003432:	3728      	adds	r7, #40	@ 0x28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40000800 	.word	0x40000800
 800343c:	40023800 	.word	0x40023800
 8003440:	40020c00 	.word	0x40020c00

08003444 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0d      	ldr	r2, [pc, #52]	@ (8003488 <HAL_TIM_PWM_MspInit+0x44>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d113      	bne.n	800347e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003456:	4b0d      	ldr	r3, [pc, #52]	@ (800348c <HAL_TIM_PWM_MspInit+0x48>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	4a0c      	ldr	r2, [pc, #48]	@ (800348c <HAL_TIM_PWM_MspInit+0x48>)
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	6413      	str	r3, [r2, #64]	@ 0x40
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <HAL_TIM_PWM_MspInit+0x48>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	2032      	movs	r0, #50	@ 0x32
 8003474:	f000 fe85 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003478:	2032      	movs	r0, #50	@ 0x32
 800347a:	f000 fe9e 	bl	80041ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08e      	sub	sp, #56	@ 0x38
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a67      	ldr	r2, [pc, #412]	@ (800364c <HAL_TIM_MspPostInit+0x1bc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d11d      	bne.n	80034ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034b2:	4b67      	ldr	r3, [pc, #412]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a66      	ldr	r2, [pc, #408]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 80034b8:	f043 0310 	orr.w	r3, r3, #16
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b64      	ldr	r3, [pc, #400]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	623b      	str	r3, [r7, #32]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 80034ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034dc:	2301      	movs	r3, #1
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	485b      	ldr	r0, [pc, #364]	@ (8003654 <HAL_TIM_MspPostInit+0x1c4>)
 80034e8:	f001 fa8c 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80034ec:	e0a9      	b.n	8003642 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f6:	d11d      	bne.n	8003534 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f8:	4b55      	ldr	r3, [pc, #340]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	4a54      	ldr	r2, [pc, #336]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 80034fe:	f043 0302 	orr.w	r3, r3, #2
 8003502:	6313      	str	r3, [r2, #48]	@ 0x30
 8003504:	4b52      	ldr	r3, [pc, #328]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8003510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003522:	2301      	movs	r3, #1
 8003524:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800352a:	4619      	mov	r1, r3
 800352c:	484a      	ldr	r0, [pc, #296]	@ (8003658 <HAL_TIM_MspPostInit+0x1c8>)
 800352e:	f001 fa69 	bl	8004a04 <HAL_GPIO_Init>
}
 8003532:	e086      	b.n	8003642 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a48      	ldr	r2, [pc, #288]	@ (800365c <HAL_TIM_MspPostInit+0x1cc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d11c      	bne.n	8003578 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353e:	4b44      	ldr	r3, [pc, #272]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	4a43      	ldr	r2, [pc, #268]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	6313      	str	r3, [r2, #48]	@ 0x30
 800354a:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8003556:	2301      	movs	r3, #1
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2300      	movs	r3, #0
 8003564:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003566:	2302      	movs	r3, #2
 8003568:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 800356a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800356e:	4619      	mov	r1, r3
 8003570:	4839      	ldr	r0, [pc, #228]	@ (8003658 <HAL_TIM_MspPostInit+0x1c8>)
 8003572:	f001 fa47 	bl	8004a04 <HAL_GPIO_Init>
}
 8003576:	e064      	b.n	8003642 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM5)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a38      	ldr	r2, [pc, #224]	@ (8003660 <HAL_TIM_MspPostInit+0x1d0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d11c      	bne.n	80035bc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b33      	ldr	r3, [pc, #204]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	4a32      	ldr	r2, [pc, #200]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6313      	str	r3, [r2, #48]	@ 0x30
 800358e:	4b30      	ldr	r3, [pc, #192]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP3_Pin;
 800359a:	2301      	movs	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035aa:	2302      	movs	r3, #2
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 80035ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035b2:	4619      	mov	r1, r3
 80035b4:	482b      	ldr	r0, [pc, #172]	@ (8003664 <HAL_TIM_MspPostInit+0x1d4>)
 80035b6:	f001 fa25 	bl	8004a04 <HAL_GPIO_Init>
}
 80035ba:	e042      	b.n	8003642 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a29      	ldr	r2, [pc, #164]	@ (8003668 <HAL_TIM_MspPostInit+0x1d8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d11c      	bne.n	8003600 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035c6:	4b22      	ldr	r3, [pc, #136]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	4a21      	ldr	r2, [pc, #132]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 80035cc:	f043 0310 	orr.w	r3, r3, #16
 80035d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2PWM_Pin;
 80035de:	2320      	movs	r3, #32
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80035ee:	2303      	movs	r3, #3
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2PWM_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035f6:	4619      	mov	r1, r3
 80035f8:	4816      	ldr	r0, [pc, #88]	@ (8003654 <HAL_TIM_MspPostInit+0x1c4>)
 80035fa:	f001 fa03 	bl	8004a04 <HAL_GPIO_Init>
}
 80035fe:	e020      	b.n	8003642 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM14)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a19      	ldr	r2, [pc, #100]	@ (800366c <HAL_TIM_MspPostInit+0x1dc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d11b      	bne.n	8003642 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360a:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	4a10      	ldr	r2, [pc, #64]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6313      	str	r3, [r2, #48]	@ 0x30
 8003616:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <HAL_TIM_MspPostInit+0x1c0>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003632:	2309      	movs	r3, #9
 8003634:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 8003636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800363a:	4619      	mov	r1, r3
 800363c:	4809      	ldr	r0, [pc, #36]	@ (8003664 <HAL_TIM_MspPostInit+0x1d4>)
 800363e:	f001 f9e1 	bl	8004a04 <HAL_GPIO_Init>
}
 8003642:	bf00      	nop
 8003644:	3738      	adds	r7, #56	@ 0x38
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40023800 	.word	0x40023800
 8003654:	40021000 	.word	0x40021000
 8003658:	40020400 	.word	0x40020400
 800365c:	40000400 	.word	0x40000400
 8003660:	40000c00 	.word	0x40000c00
 8003664:	40020000 	.word	0x40020000
 8003668:	40014000 	.word	0x40014000
 800366c:	40002000 	.word	0x40002000

08003670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0b4      	sub	sp, #208	@ 0xd0
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003688:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800368c:	2284      	movs	r2, #132	@ 0x84
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f008 f8e9 	bl	800b868 <memset>
  if(huart->Instance==UART4)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a8a      	ldr	r2, [pc, #552]	@ (80038c4 <HAL_UART_MspInit+0x254>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d174      	bne.n	800378a <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80036a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036b0:	4618      	mov	r0, r3
 80036b2:	f002 fe67 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80036bc:	f7ff fcf2 	bl	80030a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80036c0:	4b81      	ldr	r3, [pc, #516]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	4a80      	ldr	r2, [pc, #512]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80036c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80036cc:	4b7e      	ldr	r3, [pc, #504]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d8:	4b7b      	ldr	r3, [pc, #492]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	4a7a      	ldr	r2, [pc, #488]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e4:	4b78      	ldr	r3, [pc, #480]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80036f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003704:	2303      	movs	r3, #3
 8003706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800370a:	2308      	movs	r3, #8
 800370c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003710:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003714:	4619      	mov	r1, r3
 8003716:	486d      	ldr	r0, [pc, #436]	@ (80038cc <HAL_UART_MspInit+0x25c>)
 8003718:	f001 f974 	bl	8004a04 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800371c:	4b6c      	ldr	r3, [pc, #432]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 800371e:	4a6d      	ldr	r2, [pc, #436]	@ (80038d4 <HAL_UART_MspInit+0x264>)
 8003720:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003722:	4b6b      	ldr	r3, [pc, #428]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003724:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003728:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800372a:	4b69      	ldr	r3, [pc, #420]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003730:	4b67      	ldr	r3, [pc, #412]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003736:	4b66      	ldr	r3, [pc, #408]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800373c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800373e:	4b64      	ldr	r3, [pc, #400]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003744:	4b62      	ldr	r3, [pc, #392]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003746:	2200      	movs	r2, #0
 8003748:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800374a:	4b61      	ldr	r3, [pc, #388]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 800374c:	2200      	movs	r2, #0
 800374e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003750:	4b5f      	ldr	r3, [pc, #380]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003752:	2200      	movs	r2, #0
 8003754:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003756:	4b5e      	ldr	r3, [pc, #376]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003758:	2200      	movs	r2, #0
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800375c:	485c      	ldr	r0, [pc, #368]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 800375e:	f000 fd47 	bl	80041f0 <HAL_DMA_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8003768:	f7ff fc9c 	bl	80030a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a58      	ldr	r2, [pc, #352]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003770:	675a      	str	r2, [r3, #116]	@ 0x74
 8003772:	4a57      	ldr	r2, [pc, #348]	@ (80038d0 <HAL_UART_MspInit+0x260>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	2034      	movs	r0, #52	@ 0x34
 800377e:	f000 fd00 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003782:	2034      	movs	r0, #52	@ 0x34
 8003784:	f000 fd19 	bl	80041ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003788:	e1e2      	b.n	8003b50 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==UART5)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a52      	ldr	r2, [pc, #328]	@ (80038d8 <HAL_UART_MspInit+0x268>)
 8003790:	4293      	cmp	r3, r2
 8003792:	f040 80a9 	bne.w	80038e8 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800379a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 fdec 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_UART_MspInit+0x146>
      Error_Handler();
 80037b2:	f7ff fc77 	bl	80030a4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80037b6:	4b44      	ldr	r3, [pc, #272]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	4a43      	ldr	r2, [pc, #268]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c2:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	4b3e      	ldr	r3, [pc, #248]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	4a3d      	ldr	r2, [pc, #244]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037da:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037e6:	4b38      	ldr	r3, [pc, #224]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	4a37      	ldr	r2, [pc, #220]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f2:	4b35      	ldr	r3, [pc, #212]	@ (80038c8 <HAL_UART_MspInit+0x258>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80037fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003802:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003812:	2303      	movs	r3, #3
 8003814:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003818:	2308      	movs	r3, #8
 800381a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800381e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003822:	4619      	mov	r1, r3
 8003824:	4829      	ldr	r0, [pc, #164]	@ (80038cc <HAL_UART_MspInit+0x25c>)
 8003826:	f001 f8ed 	bl	8004a04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800382a:	2304      	movs	r3, #4
 800382c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	2303      	movs	r3, #3
 800383e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003842:	2308      	movs	r3, #8
 8003844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003848:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800384c:	4619      	mov	r1, r3
 800384e:	4823      	ldr	r0, [pc, #140]	@ (80038dc <HAL_UART_MspInit+0x26c>)
 8003850:	f001 f8d8 	bl	8004a04 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003854:	4b22      	ldr	r3, [pc, #136]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 8003856:	4a23      	ldr	r2, [pc, #140]	@ (80038e4 <HAL_UART_MspInit+0x274>)
 8003858:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800385a:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 800385c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003860:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003862:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003868:	4b1d      	ldr	r3, [pc, #116]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800386e:	4b1c      	ldr	r3, [pc, #112]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 8003870:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003874:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003876:	4b1a      	ldr	r3, [pc, #104]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 8003878:	2200      	movs	r2, #0
 800387a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800387c:	4b18      	ldr	r3, [pc, #96]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003882:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 8003884:	2200      	movs	r2, #0
 8003886:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003888:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 800388a:	2200      	movs	r2, #0
 800388c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800388e:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 8003890:	2200      	movs	r2, #0
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003894:	4812      	ldr	r0, [pc, #72]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 8003896:	f000 fcab 	bl	80041f0 <HAL_DMA_Init>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_UART_MspInit+0x234>
      Error_Handler();
 80038a0:	f7ff fc00 	bl	80030a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a0e      	ldr	r2, [pc, #56]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 80038a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80038aa:	4a0d      	ldr	r2, [pc, #52]	@ (80038e0 <HAL_UART_MspInit+0x270>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80038b0:	2200      	movs	r2, #0
 80038b2:	2100      	movs	r1, #0
 80038b4:	2035      	movs	r0, #53	@ 0x35
 80038b6:	f000 fc64 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80038ba:	2035      	movs	r0, #53	@ 0x35
 80038bc:	f000 fc7d 	bl	80041ba <HAL_NVIC_EnableIRQ>
}
 80038c0:	e146      	b.n	8003b50 <HAL_UART_MspInit+0x4e0>
 80038c2:	bf00      	nop
 80038c4:	40004c00 	.word	0x40004c00
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40020800 	.word	0x40020800
 80038d0:	200006e4 	.word	0x200006e4
 80038d4:	40026040 	.word	0x40026040
 80038d8:	40005000 	.word	0x40005000
 80038dc:	40020c00 	.word	0x40020c00
 80038e0:	20000744 	.word	0x20000744
 80038e4:	40026010 	.word	0x40026010
  else if(huart->Instance==USART2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a9a      	ldr	r2, [pc, #616]	@ (8003b58 <HAL_UART_MspInit+0x4e8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d172      	bne.n	80039d8 <HAL_UART_MspInit+0x368>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fd3f 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 800390c:	f7ff fbca 	bl	80030a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003910:	4b92      	ldr	r3, [pc, #584]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	4a91      	ldr	r2, [pc, #580]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800391a:	6413      	str	r3, [r2, #64]	@ 0x40
 800391c:	4b8f      	ldr	r3, [pc, #572]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003928:	4b8c      	ldr	r3, [pc, #560]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	4a8b      	ldr	r2, [pc, #556]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 800392e:	f043 0308 	orr.w	r3, r3, #8
 8003932:	6313      	str	r3, [r2, #48]	@ 0x30
 8003934:	4b89      	ldr	r3, [pc, #548]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003940:	2360      	movs	r3, #96	@ 0x60
 8003942:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003958:	2307      	movs	r3, #7
 800395a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800395e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003962:	4619      	mov	r1, r3
 8003964:	487e      	ldr	r0, [pc, #504]	@ (8003b60 <HAL_UART_MspInit+0x4f0>)
 8003966:	f001 f84d 	bl	8004a04 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800396a:	4b7e      	ldr	r3, [pc, #504]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 800396c:	4a7e      	ldr	r2, [pc, #504]	@ (8003b68 <HAL_UART_MspInit+0x4f8>)
 800396e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003970:	4b7c      	ldr	r3, [pc, #496]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 8003972:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003976:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003978:	4b7a      	ldr	r3, [pc, #488]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800397e:	4b79      	ldr	r3, [pc, #484]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003984:	4b77      	ldr	r3, [pc, #476]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 8003986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800398a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800398c:	4b75      	ldr	r3, [pc, #468]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003992:	4b74      	ldr	r3, [pc, #464]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003998:	4b72      	ldr	r3, [pc, #456]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 800399a:	2200      	movs	r2, #0
 800399c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800399e:	4b71      	ldr	r3, [pc, #452]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80039aa:	486e      	ldr	r0, [pc, #440]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 80039ac:	f000 fc20 	bl	80041f0 <HAL_DMA_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_UART_MspInit+0x34a>
      Error_Handler();
 80039b6:	f7ff fb75 	bl	80030a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a69      	ldr	r2, [pc, #420]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 80039be:	675a      	str	r2, [r3, #116]	@ 0x74
 80039c0:	4a68      	ldr	r2, [pc, #416]	@ (8003b64 <HAL_UART_MspInit+0x4f4>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	2026      	movs	r0, #38	@ 0x26
 80039cc:	f000 fbd9 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039d0:	2026      	movs	r0, #38	@ 0x26
 80039d2:	f000 fbf2 	bl	80041ba <HAL_NVIC_EnableIRQ>
}
 80039d6:	e0bb      	b.n	8003b50 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==USART3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a63      	ldr	r2, [pc, #396]	@ (8003b6c <HAL_UART_MspInit+0x4fc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d13e      	bne.n	8003a60 <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039f2:	4618      	mov	r0, r3
 80039f4:	f002 fcc6 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_UART_MspInit+0x392>
      Error_Handler();
 80039fe:	f7ff fb51 	bl	80030a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a02:	4b56      	ldr	r3, [pc, #344]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	4a55      	ldr	r2, [pc, #340]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0e:	4b53      	ldr	r3, [pc, #332]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a1a:	4b50      	ldr	r3, [pc, #320]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	4a4f      	ldr	r2, [pc, #316]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a20:	f043 0308 	orr.w	r3, r3, #8
 8003a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a26:	4b4d      	ldr	r3, [pc, #308]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a46:	2303      	movs	r3, #3
 8003a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a4c:	2307      	movs	r3, #7
 8003a4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a52:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003a56:	4619      	mov	r1, r3
 8003a58:	4841      	ldr	r0, [pc, #260]	@ (8003b60 <HAL_UART_MspInit+0x4f0>)
 8003a5a:	f000 ffd3 	bl	8004a04 <HAL_GPIO_Init>
}
 8003a5e:	e077      	b.n	8003b50 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==USART6)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a42      	ldr	r2, [pc, #264]	@ (8003b70 <HAL_UART_MspInit+0x500>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d172      	bne.n	8003b50 <HAL_UART_MspInit+0x4e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003a6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f002 fc82 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_UART_MspInit+0x41a>
      Error_Handler();
 8003a86:	f7ff fb0d 	bl	80030a4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a8a:	4b34      	ldr	r3, [pc, #208]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	4a33      	ldr	r2, [pc, #204]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a90:	f043 0320 	orr.w	r3, r3, #32
 8003a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a96:	4b31      	ldr	r3, [pc, #196]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003aa8:	f043 0304 	orr.w	r3, r3, #4
 8003aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aae:	4b2b      	ldr	r3, [pc, #172]	@ (8003b5c <HAL_UART_MspInit+0x4ec>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aba:	23c0      	movs	r3, #192	@ 0xc0
 8003abc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003acc:	2303      	movs	r3, #3
 8003ace:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003adc:	4619      	mov	r1, r3
 8003ade:	4825      	ldr	r0, [pc, #148]	@ (8003b74 <HAL_UART_MspInit+0x504>)
 8003ae0:	f000 ff90 	bl	8004a04 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003ae4:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003ae6:	4a25      	ldr	r2, [pc, #148]	@ (8003b7c <HAL_UART_MspInit+0x50c>)
 8003ae8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003aea:	4b23      	ldr	r3, [pc, #140]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003aec:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003af0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003af2:	4b21      	ldr	r3, [pc, #132]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003afe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b04:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b06:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003b12:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b18:	4b17      	ldr	r3, [pc, #92]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b1e:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003b24:	4814      	ldr	r0, [pc, #80]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b26:	f000 fb63 	bl	80041f0 <HAL_DMA_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 8003b30:	f7ff fab8 	bl	80030a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b38:	675a      	str	r2, [r3, #116]	@ 0x74
 8003b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8003b78 <HAL_UART_MspInit+0x508>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003b40:	2200      	movs	r2, #0
 8003b42:	2100      	movs	r1, #0
 8003b44:	2047      	movs	r0, #71	@ 0x47
 8003b46:	f000 fb1c 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b4a:	2047      	movs	r0, #71	@ 0x47
 8003b4c:	f000 fb35 	bl	80041ba <HAL_NVIC_EnableIRQ>
}
 8003b50:	bf00      	nop
 8003b52:	37d0      	adds	r7, #208	@ 0xd0
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40004400 	.word	0x40004400
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	200007a4 	.word	0x200007a4
 8003b68:	40026088 	.word	0x40026088
 8003b6c:	40004800 	.word	0x40004800
 8003b70:	40011400 	.word	0x40011400
 8003b74:	40020800 	.word	0x40020800
 8003b78:	20000804 	.word	0x20000804
 8003b7c:	40026428 	.word	0x40026428

08003b80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b0ac      	sub	sp, #176	@ 0xb0
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b98:	f107 0318 	add.w	r3, r7, #24
 8003b9c:	2284      	movs	r2, #132	@ 0x84
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f007 fe61 	bl	800b868 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bae:	d159      	bne.n	8003c64 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003bb0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003bb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bbc:	f107 0318 	add.w	r3, r7, #24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f002 fbdf 	bl	8006384 <HAL_RCCEx_PeriphCLKConfig>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003bcc:	f7ff fa6a 	bl	80030a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd0:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	4a25      	ldr	r2, [pc, #148]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bdc:	4b23      	ldr	r3, [pc, #140]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003be8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c02:	230a      	movs	r3, #10
 8003c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4818      	ldr	r0, [pc, #96]	@ (8003c70 <HAL_PCD_MspInit+0xf0>)
 8003c10:	f000 fef8 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003c28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4810      	ldr	r0, [pc, #64]	@ (8003c70 <HAL_PCD_MspInit+0xf0>)
 8003c30:	f000 fee8 	bl	8004a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c34:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c38:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003c40:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4b07      	ldr	r3, [pc, #28]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c50:	4a06      	ldr	r2, [pc, #24]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003c52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c56:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c58:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <HAL_PCD_MspInit+0xec>)
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003c64:	bf00      	nop
 8003c66:	37b0      	adds	r7, #176	@ 0xb0
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020000 	.word	0x40020000

08003c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <NMI_Handler+0x4>

08003c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c80:	bf00      	nop
 8003c82:	e7fd      	b.n	8003c80 <HardFault_Handler+0x4>

08003c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <MemManage_Handler+0x4>

08003c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <BusFault_Handler+0x4>

08003c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <UsageFault_Handler+0x4>

08003c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003caa:	b480      	push	{r7}
 8003cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cca:	f000 f93b 	bl	8003f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003cd8:	4802      	ldr	r0, [pc, #8]	@ (8003ce4 <DMA1_Stream0_IRQHandler+0x10>)
 8003cda:	f000 fc29 	bl	8004530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000744 	.word	0x20000744

08003ce8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003cec:	4802      	ldr	r0, [pc, #8]	@ (8003cf8 <DMA1_Stream2_IRQHandler+0x10>)
 8003cee:	f000 fc1f 	bl	8004530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200006e4 	.word	0x200006e4

08003cfc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d00:	4802      	ldr	r0, [pc, #8]	@ (8003d0c <DMA1_Stream5_IRQHandler+0x10>)
 8003d02:	f000 fc15 	bl	8004530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200007a4 	.word	0x200007a4

08003d10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d14:	4802      	ldr	r0, [pc, #8]	@ (8003d20 <TIM1_CC_IRQHandler+0x10>)
 8003d16:	f004 fa79 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	200001dc 	.word	0x200001dc

08003d24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d28:	4802      	ldr	r0, [pc, #8]	@ (8003d34 <TIM2_IRQHandler+0x10>)
 8003d2a:	f004 fa6f 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000228 	.word	0x20000228

08003d38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d3c:	4802      	ldr	r0, [pc, #8]	@ (8003d48 <TIM3_IRQHandler+0x10>)
 8003d3e:	f004 fa65 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000274 	.word	0x20000274

08003d4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d50:	4802      	ldr	r0, [pc, #8]	@ (8003d5c <TIM4_IRQHandler+0x10>)
 8003d52:	f004 fa5b 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200002c0 	.word	0x200002c0

08003d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d64:	4802      	ldr	r0, [pc, #8]	@ (8003d70 <USART2_IRQHandler+0x10>)
 8003d66:	f005 fb6f 	bl	8009448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	2000054c 	.word	0x2000054c

08003d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003d78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003d7c:	f001 f820 	bl	8004dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d80:	bf00      	nop
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003d88:	4802      	ldr	r0, [pc, #8]	@ (8003d94 <TIM5_IRQHandler+0x10>)
 8003d8a:	f004 fa3f 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	2000030c 	.word	0x2000030c

08003d98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003d9c:	4802      	ldr	r0, [pc, #8]	@ (8003da8 <UART4_IRQHandler+0x10>)
 8003d9e:	f005 fb53 	bl	8009448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	2000043c 	.word	0x2000043c

08003dac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003db0:	4802      	ldr	r0, [pc, #8]	@ (8003dbc <UART5_IRQHandler+0x10>)
 8003db2:	f005 fb49 	bl	8009448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200004c4 	.word	0x200004c4

08003dc0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003dc4:	4802      	ldr	r0, [pc, #8]	@ (8003dd0 <DMA2_Stream1_IRQHandler+0x10>)
 8003dc6:	f000 fbb3 	bl	8004530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000804 	.word	0x20000804

08003dd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003dd8:	4802      	ldr	r0, [pc, #8]	@ (8003de4 <USART6_IRQHandler+0x10>)
 8003dda:	f005 fb35 	bl	8009448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000065c 	.word	0x2000065c

08003de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003df0:	4a14      	ldr	r2, [pc, #80]	@ (8003e44 <_sbrk+0x5c>)
 8003df2:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <_sbrk+0x60>)
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dfc:	4b13      	ldr	r3, [pc, #76]	@ (8003e4c <_sbrk+0x64>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <_sbrk+0x64>)
 8003e06:	4a12      	ldr	r2, [pc, #72]	@ (8003e50 <_sbrk+0x68>)
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e0a:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <_sbrk+0x64>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d207      	bcs.n	8003e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e18:	f007 fd2e 	bl	800b878 <__errno>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	220c      	movs	r2, #12
 8003e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	e009      	b.n	8003e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e28:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <_sbrk+0x64>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e2e:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <_sbrk+0x64>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	4a05      	ldr	r2, [pc, #20]	@ (8003e4c <_sbrk+0x64>)
 8003e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20050000 	.word	0x20050000
 8003e48:	00000400 	.word	0x00000400
 8003e4c:	20000f40 	.word	0x20000f40
 8003e50:	200010b8 	.word	0x200010b8

08003e54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e58:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <SystemInit+0x20>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	4a05      	ldr	r2, [pc, #20]	@ (8003e74 <SystemInit+0x20>)
 8003e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8003e78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003eb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e7c:	f7ff ffea 	bl	8003e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e80:	480c      	ldr	r0, [pc, #48]	@ (8003eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e82:	490d      	ldr	r1, [pc, #52]	@ (8003eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e84:	4a0d      	ldr	r2, [pc, #52]	@ (8003ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e88:	e002      	b.n	8003e90 <LoopCopyDataInit>

08003e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e8e:	3304      	adds	r3, #4

08003e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e94:	d3f9      	bcc.n	8003e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e98:	4c0a      	ldr	r4, [pc, #40]	@ (8003ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e9c:	e001      	b.n	8003ea2 <LoopFillZerobss>

08003e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ea0:	3204      	adds	r2, #4

08003ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ea4:	d3fb      	bcc.n	8003e9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003ea6:	f007 fced 	bl	800b884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eaa:	f7fe f973 	bl	8002194 <main>
  bx  lr    
 8003eae:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8003eb0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003eb8:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8003ebc:	0800c8f4 	.word	0x0800c8f4
  ldr r2, =_sbss
 8003ec0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8003ec4:	200010b4 	.word	0x200010b4

08003ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ec8:	e7fe      	b.n	8003ec8 <ADC_IRQHandler>

08003eca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ece:	2003      	movs	r0, #3
 8003ed0:	f000 f94c 	bl	800416c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f000 f805 	bl	8003ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eda:	f7ff f8e9 	bl	80030b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_InitTick+0x54>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_InitTick+0x58>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f967 	bl	80041d6 <HAL_SYSTICK_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00e      	b.n	8003f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b0f      	cmp	r3, #15
 8003f16:	d80a      	bhi.n	8003f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f000 f92f 	bl	8004182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f24:	4a06      	ldr	r2, [pc, #24]	@ (8003f40 <HAL_InitTick+0x5c>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000004c 	.word	0x2000004c
 8003f3c:	20000054 	.word	0x20000054
 8003f40:	20000050 	.word	0x20000050

08003f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <HAL_IncTick+0x20>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_IncTick+0x24>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4413      	add	r3, r2
 8003f54:	4a04      	ldr	r2, [pc, #16]	@ (8003f68 <HAL_IncTick+0x24>)
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000054 	.word	0x20000054
 8003f68:	20000f44 	.word	0x20000f44

08003f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f70:	4b03      	ldr	r3, [pc, #12]	@ (8003f80 <HAL_GetTick+0x14>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000f44 	.word	0x20000f44

08003f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f8c:	f7ff ffee 	bl	8003f6c <HAL_GetTick>
 8003f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d005      	beq.n	8003faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <HAL_Delay+0x44>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003faa:	bf00      	nop
 8003fac:	f7ff ffde 	bl	8003f6c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d8f7      	bhi.n	8003fac <HAL_Delay+0x28>
  {
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000054 	.word	0x20000054

08003fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <__NVIC_SetPriorityGrouping+0x40>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	@ (800400c <__NVIC_SetPriorityGrouping+0x40>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	60d3      	str	r3, [r2, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00
 8004010:	05fa0000 	.word	0x05fa0000

08004014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004018:	4b04      	ldr	r3, [pc, #16]	@ (800402c <__NVIC_GetPriorityGrouping+0x18>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 0307 	and.w	r3, r3, #7
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	2b00      	cmp	r3, #0
 8004040:	db0b      	blt.n	800405a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	4907      	ldr	r1, [pc, #28]	@ (8004068 <__NVIC_EnableIRQ+0x38>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2001      	movs	r0, #1
 8004052:	fa00 f202 	lsl.w	r2, r0, r2
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000e100 	.word	0xe000e100

0800406c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db0a      	blt.n	8004096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	490c      	ldr	r1, [pc, #48]	@ (80040b8 <__NVIC_SetPriority+0x4c>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	0112      	lsls	r2, r2, #4
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	440b      	add	r3, r1
 8004090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004094:	e00a      	b.n	80040ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4908      	ldr	r1, [pc, #32]	@ (80040bc <__NVIC_SetPriority+0x50>)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	3b04      	subs	r3, #4
 80040a4:	0112      	lsls	r2, r2, #4
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	440b      	add	r3, r1
 80040aa:	761a      	strb	r2, [r3, #24]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000e100 	.word	0xe000e100
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f1c3 0307 	rsb	r3, r3, #7
 80040da:	2b04      	cmp	r3, #4
 80040dc:	bf28      	it	cs
 80040de:	2304      	movcs	r3, #4
 80040e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d902      	bls.n	80040f0 <NVIC_EncodePriority+0x30>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3b03      	subs	r3, #3
 80040ee:	e000      	b.n	80040f2 <NVIC_EncodePriority+0x32>
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43da      	mvns	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	401a      	ands	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004108:	f04f 31ff 	mov.w	r1, #4294967295
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	43d9      	mvns	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004118:	4313      	orrs	r3, r2
         );
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	@ 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3b01      	subs	r3, #1
 8004134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004138:	d301      	bcc.n	800413e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800413a:	2301      	movs	r3, #1
 800413c:	e00f      	b.n	800415e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413e:	4a0a      	ldr	r2, [pc, #40]	@ (8004168 <SysTick_Config+0x40>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004146:	210f      	movs	r1, #15
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	f7ff ff8e 	bl	800406c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <SysTick_Config+0x40>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004156:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <SysTick_Config+0x40>)
 8004158:	2207      	movs	r2, #7
 800415a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	e000e010 	.word	0xe000e010

0800416c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff29 	bl	8003fcc <__NVIC_SetPriorityGrouping>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004182:	b580      	push	{r7, lr}
 8004184:	b086      	sub	sp, #24
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004194:	f7ff ff3e 	bl	8004014 <__NVIC_GetPriorityGrouping>
 8004198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	6978      	ldr	r0, [r7, #20]
 80041a0:	f7ff ff8e 	bl	80040c0 <NVIC_EncodePriority>
 80041a4:	4602      	mov	r2, r0
 80041a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff5d 	bl	800406c <__NVIC_SetPriority>
}
 80041b2:	bf00      	nop
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff31 	bl	8004030 <__NVIC_EnableIRQ>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ffa2 	bl	8004128 <SysTick_Config>
 80041e4:	4603      	mov	r3, r0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041fc:	f7ff feb6 	bl	8003f6c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e099      	b.n	8004340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800422c:	e00f      	b.n	800424e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800422e:	f7ff fe9d 	bl	8003f6c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b05      	cmp	r3, #5
 800423a:	d908      	bls.n	800424e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2203      	movs	r2, #3
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e078      	b.n	8004340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e8      	bne.n	800422e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4b38      	ldr	r3, [pc, #224]	@ (8004348 <HAL_DMA_Init+0x158>)
 8004268:	4013      	ands	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800427a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d107      	bne.n	80042b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	4313      	orrs	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d117      	bne.n	8004312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00e      	beq.n	8004312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fb09 	bl	800490c <DMA_CheckFifoParam>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2240      	movs	r2, #64	@ 0x40
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800430e:	2301      	movs	r3, #1
 8004310:	e016      	b.n	8004340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fac0 	bl	80048a0 <DMA_CalcBaseAndBitshift>
 8004320:	4603      	mov	r3, r0
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004328:	223f      	movs	r2, #63	@ 0x3f
 800432a:	409a      	lsls	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	f010803f 	.word	0xf010803f

0800434c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_DMA_Start_IT+0x26>
 800436e:	2302      	movs	r3, #2
 8004370:	e048      	b.n	8004404 <HAL_DMA_Start_IT+0xb8>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d137      	bne.n	80043f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa52 	bl	8004844 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	223f      	movs	r2, #63	@ 0x3f
 80043a6:	409a      	lsls	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0216 	orr.w	r2, r2, #22
 80043ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0208 	orr.w	r2, r2, #8
 80043e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e005      	b.n	8004402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
 8004400:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004418:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800441a:	f7ff fda7 	bl	8003f6c <HAL_GetTick>
 800441e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d008      	beq.n	800443e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2280      	movs	r2, #128	@ 0x80
 8004430:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e052      	b.n	80044e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0216 	bic.w	r2, r2, #22
 800444c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800445c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <HAL_DMA_Abort+0x62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0208 	bic.w	r2, r2, #8
 800447c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800448e:	e013      	b.n	80044b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004490:	f7ff fd6c 	bl	8003f6c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b05      	cmp	r3, #5
 800449c:	d90c      	bls.n	80044b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e015      	b.n	80044e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e4      	bne.n	8004490 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ca:	223f      	movs	r2, #63	@ 0x3f
 80044cc:	409a      	lsls	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d004      	beq.n	800450a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2280      	movs	r2, #128	@ 0x80
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e00c      	b.n	8004524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2205      	movs	r2, #5
 800450e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800453c:	4b8e      	ldr	r3, [pc, #568]	@ (8004778 <HAL_DMA_IRQHandler+0x248>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a8e      	ldr	r2, [pc, #568]	@ (800477c <HAL_DMA_IRQHandler+0x24c>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	0a9b      	lsrs	r3, r3, #10
 8004548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455a:	2208      	movs	r2, #8
 800455c:	409a      	lsls	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01a      	beq.n	800459c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0204 	bic.w	r2, r2, #4
 8004582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004588:	2208      	movs	r2, #8
 800458a:	409a      	lsls	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d012      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045be:	2201      	movs	r2, #1
 80045c0:	409a      	lsls	r2, r3
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ca:	f043 0202 	orr.w	r2, r3, #2
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d6:	2204      	movs	r2, #4
 80045d8:	409a      	lsls	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d012      	beq.n	8004608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f4:	2204      	movs	r2, #4
 80045f6:	409a      	lsls	r2, r3
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004600:	f043 0204 	orr.w	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460c:	2210      	movs	r2, #16
 800460e:	409a      	lsls	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d043      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d03c      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	2210      	movs	r2, #16
 800462c:	409a      	lsls	r2, r3
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d018      	beq.n	8004672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d108      	bne.n	8004660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d024      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	4798      	blx	r3
 800465e:	e01f      	b.n	80046a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01b      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
 8004670:	e016      	b.n	80046a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d107      	bne.n	8004690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0208 	bic.w	r2, r2, #8
 800468e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a4:	2220      	movs	r2, #32
 80046a6:	409a      	lsls	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 808f 	beq.w	80047d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8087 	beq.w	80047d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c6:	2220      	movs	r2, #32
 80046c8:	409a      	lsls	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d136      	bne.n	8004748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0216 	bic.w	r2, r2, #22
 80046e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_DMA_IRQHandler+0x1da>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0208 	bic.w	r2, r2, #8
 8004718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471e:	223f      	movs	r2, #63	@ 0x3f
 8004720:	409a      	lsls	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800473a:	2b00      	cmp	r3, #0
 800473c:	d07e      	beq.n	800483c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	4798      	blx	r3
        }
        return;
 8004746:	e079      	b.n	800483c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01d      	beq.n	8004792 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10d      	bne.n	8004780 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004768:	2b00      	cmp	r3, #0
 800476a:	d031      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
 8004774:	e02c      	b.n	80047d0 <HAL_DMA_IRQHandler+0x2a0>
 8004776:	bf00      	nop
 8004778:	2000004c 	.word	0x2000004c
 800477c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d023      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
 8004790:	e01e      	b.n	80047d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10f      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0210 	bic.w	r2, r2, #16
 80047ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d032      	beq.n	800483e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d022      	beq.n	800482a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2205      	movs	r2, #5
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3301      	adds	r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	429a      	cmp	r2, r3
 8004806:	d307      	bcc.n	8004818 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f2      	bne.n	80047fc <HAL_DMA_IRQHandler+0x2cc>
 8004816:	e000      	b.n	800481a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004818:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
 800483a:	e000      	b.n	800483e <HAL_DMA_IRQHandler+0x30e>
        return;
 800483c:	bf00      	nop
    }
  }
}
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004860:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b40      	cmp	r3, #64	@ 0x40
 8004870:	d108      	bne.n	8004884 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004882:	e007      	b.n	8004894 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	60da      	str	r2, [r3, #12]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3b10      	subs	r3, #16
 80048b0:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <DMA_CalcBaseAndBitshift+0x60>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048ba:	4a12      	ldr	r2, [pc, #72]	@ (8004904 <DMA_CalcBaseAndBitshift+0x64>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d908      	bls.n	80048e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <DMA_CalcBaseAndBitshift+0x68>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	1d1a      	adds	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80048de:	e006      	b.n	80048ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <DMA_CalcBaseAndBitshift+0x68>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	aaaaaaab 	.word	0xaaaaaaab
 8004904:	0800c8a8 	.word	0x0800c8a8
 8004908:	fffffc00 	.word	0xfffffc00

0800490c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11f      	bne.n	8004966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d856      	bhi.n	80049da <DMA_CheckFifoParam+0xce>
 800492c:	a201      	add	r2, pc, #4	@ (adr r2, 8004934 <DMA_CheckFifoParam+0x28>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004945 	.word	0x08004945
 8004938:	08004957 	.word	0x08004957
 800493c:	08004945 	.word	0x08004945
 8004940:	080049db 	.word	0x080049db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d046      	beq.n	80049de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004954:	e043      	b.n	80049de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800495e:	d140      	bne.n	80049e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004964:	e03d      	b.n	80049e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800496e:	d121      	bne.n	80049b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d837      	bhi.n	80049e6 <DMA_CheckFifoParam+0xda>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <DMA_CheckFifoParam+0x70>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	0800498d 	.word	0x0800498d
 8004980:	08004993 	.word	0x08004993
 8004984:	0800498d 	.word	0x0800498d
 8004988:	080049a5 	.word	0x080049a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
      break;
 8004990:	e030      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d025      	beq.n	80049ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a2:	e022      	b.n	80049ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049ac:	d11f      	bne.n	80049ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049b2:	e01c      	b.n	80049ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d903      	bls.n	80049c2 <DMA_CheckFifoParam+0xb6>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d003      	beq.n	80049c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049c0:	e018      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	73fb      	strb	r3, [r7, #15]
      break;
 80049c6:	e015      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00e      	beq.n	80049f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      break;
 80049d8:	e00b      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      break;
 80049da:	bf00      	nop
 80049dc:	e00a      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
      break;
 80049de:	bf00      	nop
 80049e0:	e008      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
      break;
 80049e2:	bf00      	nop
 80049e4:	e006      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
      break;
 80049e6:	bf00      	nop
 80049e8:	e004      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
      break;
 80049ea:	bf00      	nop
 80049ec:	e002      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <DMA_CheckFifoParam+0xe8>
      break;
 80049f2:	bf00      	nop
    }
  } 
  
  return status; 
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop

08004a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	@ 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	e175      	b.n	8004d10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a24:	2201      	movs	r2, #1
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4013      	ands	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	f040 8164 	bne.w	8004d0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d005      	beq.n	8004a5a <HAL_GPIO_Init+0x56>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d130      	bne.n	8004abc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	2203      	movs	r2, #3
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a90:	2201      	movs	r2, #1
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 0201 	and.w	r2, r3, #1
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d017      	beq.n	8004af8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d123      	bne.n	8004b4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	08da      	lsrs	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3208      	adds	r2, #8
 8004b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	220f      	movs	r2, #15
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	08da      	lsrs	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3208      	adds	r2, #8
 8004b46:	69b9      	ldr	r1, [r7, #24]
 8004b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	2203      	movs	r2, #3
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 0203 	and.w	r2, r3, #3
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80be 	beq.w	8004d0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b8e:	4b66      	ldr	r3, [pc, #408]	@ (8004d28 <HAL_GPIO_Init+0x324>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	4a65      	ldr	r2, [pc, #404]	@ (8004d28 <HAL_GPIO_Init+0x324>)
 8004b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b9a:	4b63      	ldr	r3, [pc, #396]	@ (8004d28 <HAL_GPIO_Init+0x324>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ba6:	4a61      	ldr	r2, [pc, #388]	@ (8004d2c <HAL_GPIO_Init+0x328>)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	3302      	adds	r3, #2
 8004bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a58      	ldr	r2, [pc, #352]	@ (8004d30 <HAL_GPIO_Init+0x32c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d037      	beq.n	8004c42 <HAL_GPIO_Init+0x23e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a57      	ldr	r2, [pc, #348]	@ (8004d34 <HAL_GPIO_Init+0x330>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d031      	beq.n	8004c3e <HAL_GPIO_Init+0x23a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a56      	ldr	r2, [pc, #344]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d02b      	beq.n	8004c3a <HAL_GPIO_Init+0x236>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a55      	ldr	r2, [pc, #340]	@ (8004d3c <HAL_GPIO_Init+0x338>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d025      	beq.n	8004c36 <HAL_GPIO_Init+0x232>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a54      	ldr	r2, [pc, #336]	@ (8004d40 <HAL_GPIO_Init+0x33c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <HAL_GPIO_Init+0x22e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a53      	ldr	r2, [pc, #332]	@ (8004d44 <HAL_GPIO_Init+0x340>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d019      	beq.n	8004c2e <HAL_GPIO_Init+0x22a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a52      	ldr	r2, [pc, #328]	@ (8004d48 <HAL_GPIO_Init+0x344>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_GPIO_Init+0x226>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a51      	ldr	r2, [pc, #324]	@ (8004d4c <HAL_GPIO_Init+0x348>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00d      	beq.n	8004c26 <HAL_GPIO_Init+0x222>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a50      	ldr	r2, [pc, #320]	@ (8004d50 <HAL_GPIO_Init+0x34c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <HAL_GPIO_Init+0x21e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a4f      	ldr	r2, [pc, #316]	@ (8004d54 <HAL_GPIO_Init+0x350>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <HAL_GPIO_Init+0x21a>
 8004c1a:	2309      	movs	r3, #9
 8004c1c:	e012      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c1e:	230a      	movs	r3, #10
 8004c20:	e010      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c22:	2308      	movs	r3, #8
 8004c24:	e00e      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c26:	2307      	movs	r3, #7
 8004c28:	e00c      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	e00a      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c2e:	2305      	movs	r3, #5
 8004c30:	e008      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c32:	2304      	movs	r3, #4
 8004c34:	e006      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c36:	2303      	movs	r3, #3
 8004c38:	e004      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e002      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_GPIO_Init+0x240>
 8004c42:	2300      	movs	r3, #0
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	f002 0203 	and.w	r2, r2, #3
 8004c4a:	0092      	lsls	r2, r2, #2
 8004c4c:	4093      	lsls	r3, r2
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c54:	4935      	ldr	r1, [pc, #212]	@ (8004d2c <HAL_GPIO_Init+0x328>)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c62:	4b3d      	ldr	r3, [pc, #244]	@ (8004d58 <HAL_GPIO_Init+0x354>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c86:	4a34      	ldr	r2, [pc, #208]	@ (8004d58 <HAL_GPIO_Init+0x354>)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c8c:	4b32      	ldr	r3, [pc, #200]	@ (8004d58 <HAL_GPIO_Init+0x354>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cb0:	4a29      	ldr	r2, [pc, #164]	@ (8004d58 <HAL_GPIO_Init+0x354>)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cb6:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <HAL_GPIO_Init+0x354>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cda:	4a1f      	ldr	r2, [pc, #124]	@ (8004d58 <HAL_GPIO_Init+0x354>)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <HAL_GPIO_Init+0x354>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d04:	4a14      	ldr	r2, [pc, #80]	@ (8004d58 <HAL_GPIO_Init+0x354>)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2b0f      	cmp	r3, #15
 8004d14:	f67f ae86 	bls.w	8004a24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	3724      	adds	r7, #36	@ 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40013800 	.word	0x40013800
 8004d30:	40020000 	.word	0x40020000
 8004d34:	40020400 	.word	0x40020400
 8004d38:	40020800 	.word	0x40020800
 8004d3c:	40020c00 	.word	0x40020c00
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40021400 	.word	0x40021400
 8004d48:	40021800 	.word	0x40021800
 8004d4c:	40021c00 	.word	0x40021c00
 8004d50:	40022000 	.word	0x40022000
 8004d54:	40022400 	.word	0x40022400
 8004d58:	40013c00 	.word	0x40013c00

08004d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	887b      	ldrh	r3, [r7, #2]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
 8004d78:	e001      	b.n	8004d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	807b      	strh	r3, [r7, #2]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d9c:	787b      	ldrb	r3, [r7, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004da8:	e003      	b.n	8004db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004daa:	887b      	ldrh	r3, [r7, #2]
 8004dac:	041a      	lsls	r2, r3, #16
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	619a      	str	r2, [r3, #24]
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004dca:	4b08      	ldr	r3, [pc, #32]	@ (8004dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dd6:	4a05      	ldr	r2, [pc, #20]	@ (8004dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd f9c4 	bl	800216c <HAL_GPIO_EXTI_Callback>
  }
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40013c00 	.word	0x40013c00

08004df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e08b      	b.n	8004f1a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fe f96e 	bl	80030f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2224      	movs	r2, #36	@ 0x24
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	e006      	b.n	8004e78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d108      	bne.n	8004e92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e8e:	605a      	str	r2, [r3, #4]
 8004e90:	e007      	b.n	8004ea2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ea0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <HAL_I2C_Init+0x134>)
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	02008000 	.word	0x02008000

08004f28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	461a      	mov	r2, r3
 8004f34:	460b      	mov	r3, r1
 8004f36:	817b      	strh	r3, [r7, #10]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	f040 80fd 	bne.w	8005144 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_I2C_Master_Transmit+0x30>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e0f6      	b.n	8005146 <HAL_I2C_Master_Transmit+0x21e>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f60:	f7ff f804 	bl	8003f6c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2319      	movs	r3, #25
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f914 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0e1      	b.n	8005146 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2221      	movs	r2, #33	@ 0x21
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	893a      	ldrh	r2, [r7, #8]
 8004fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2bff      	cmp	r3, #255	@ 0xff
 8004fb2:	d906      	bls.n	8004fc2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	22ff      	movs	r2, #255	@ 0xff
 8004fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004fba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e007      	b.n	8004fd2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004fcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fd0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d024      	beq.n	8005024 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	781a      	ldrb	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500e:	b2db      	uxtb	r3, r3
 8005010:	3301      	adds	r3, #1
 8005012:	b2da      	uxtb	r2, r3
 8005014:	8979      	ldrh	r1, [r7, #10]
 8005016:	4b4e      	ldr	r3, [pc, #312]	@ (8005150 <HAL_I2C_Master_Transmit+0x228>)
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fa83 	bl	8005528 <I2C_TransferConfig>
 8005022:	e066      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005028:	b2da      	uxtb	r2, r3
 800502a:	8979      	ldrh	r1, [r7, #10]
 800502c:	4b48      	ldr	r3, [pc, #288]	@ (8005150 <HAL_I2C_Master_Transmit+0x228>)
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fa78 	bl	8005528 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005038:	e05b      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	6a39      	ldr	r1, [r7, #32]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f907 	bl	8005252 <I2C_WaitOnTXISFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e07b      	b.n	8005146 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d034      	beq.n	80050f2 <HAL_I2C_Master_Transmit+0x1ca>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	d130      	bne.n	80050f2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	2200      	movs	r2, #0
 8005098:	2180      	movs	r1, #128	@ 0x80
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f880 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e04d      	b.n	8005146 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2bff      	cmp	r3, #255	@ 0xff
 80050b2:	d90e      	bls.n	80050d2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	22ff      	movs	r2, #255	@ 0xff
 80050b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	8979      	ldrh	r1, [r7, #10]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fa2c 	bl	8005528 <I2C_TransferConfig>
 80050d0:	e00f      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	8979      	ldrh	r1, [r7, #10]
 80050e4:	2300      	movs	r3, #0
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fa1b 	bl	8005528 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d19e      	bne.n	800503a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	6a39      	ldr	r1, [r7, #32]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f8ed 	bl	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e01a      	b.n	8005146 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2220      	movs	r2, #32
 8005116:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6859      	ldr	r1, [r3, #4]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b0c      	ldr	r3, [pc, #48]	@ (8005154 <HAL_I2C_Master_Transmit+0x22c>)
 8005124:	400b      	ands	r3, r1
 8005126:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005144:	2302      	movs	r3, #2
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	80002000 	.word	0x80002000
 8005154:	fe00e800 	.word	0xfe00e800

08005158 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d103      	bne.n	8005176 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d007      	beq.n	8005194 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	619a      	str	r2, [r3, #24]
  }
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b0:	e03b      	b.n	800522a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f8d6 	bl	8005368 <I2C_IsErrorOccurred>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e041      	b.n	800524a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d02d      	beq.n	800522a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fe fecd 	bl	8003f6c <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d122      	bne.n	800522a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d113      	bne.n	800522a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e00f      	b.n	800524a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	bf0c      	ite	eq
 800523a:	2301      	moveq	r3, #1
 800523c:	2300      	movne	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	429a      	cmp	r2, r3
 8005246:	d0b4      	beq.n	80051b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800525e:	e033      	b.n	80052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f87f 	bl	8005368 <I2C_IsErrorOccurred>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e031      	b.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d025      	beq.n	80052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527c:	f7fe fe76 	bl	8003f6c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11a      	bne.n	80052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b02      	cmp	r3, #2
 800529e:	d013      	beq.n	80052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e007      	b.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d1c4      	bne.n	8005260 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052ec:	e02f      	b.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f838 	bl	8005368 <I2C_IsErrorOccurred>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e02d      	b.n	800535e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fe fe33 	bl	8003f6c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d11a      	bne.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d013      	beq.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e007      	b.n	800535e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b20      	cmp	r3, #32
 800535a:	d1c8      	bne.n	80052ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	@ 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	d068      	beq.n	8005466 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2210      	movs	r2, #16
 800539a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800539c:	e049      	b.n	8005432 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d045      	beq.n	8005432 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fe fde1 	bl	8003f6c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <I2C_IsErrorOccurred+0x54>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d13a      	bne.n	8005432 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053de:	d121      	bne.n	8005424 <I2C_IsErrorOccurred+0xbc>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e6:	d01d      	beq.n	8005424 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d01a      	beq.n	8005424 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053fe:	f7fe fdb5 	bl	8003f6c <HAL_GetTick>
 8005402:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005404:	e00e      	b.n	8005424 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005406:	f7fe fdb1 	bl	8003f6c <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b19      	cmp	r3, #25
 8005412:	d907      	bls.n	8005424 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f043 0320 	orr.w	r3, r3, #32
 800541a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005422:	e006      	b.n	8005432 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b20      	cmp	r3, #32
 8005430:	d1e9      	bne.n	8005406 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b20      	cmp	r3, #32
 800543e:	d003      	beq.n	8005448 <I2C_IsErrorOccurred+0xe0>
 8005440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0aa      	beq.n	800539e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2220      	movs	r2, #32
 8005456:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	f043 0304 	orr.w	r3, r3, #4
 800545e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005488:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f043 0308 	orr.w	r3, r3, #8
 80054a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	f043 0302 	orr.w	r3, r3, #2
 80054c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80054d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01c      	beq.n	8005516 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff fe3b 	bl	8005158 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005524 <I2C_IsErrorOccurred+0x1bc>)
 80054ee:	400b      	ands	r3, r1
 80054f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800551a:	4618      	mov	r0, r3
 800551c:	3728      	adds	r7, #40	@ 0x28
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	fe00e800 	.word	0xfe00e800

08005528 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	817b      	strh	r3, [r7, #10]
 8005536:	4613      	mov	r3, r2
 8005538:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005540:	7a7b      	ldrb	r3, [r7, #9]
 8005542:	041b      	lsls	r3, r3, #16
 8005544:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005548:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	4313      	orrs	r3, r2
 8005552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005556:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	0d5b      	lsrs	r3, r3, #21
 8005562:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005566:	4b08      	ldr	r3, [pc, #32]	@ (8005588 <I2C_TransferConfig+0x60>)
 8005568:	430b      	orrs	r3, r1
 800556a:	43db      	mvns	r3, r3
 800556c:	ea02 0103 	and.w	r1, r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	03ff63ff 	.word	0x03ff63ff

0800558c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d138      	bne.n	8005614 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e032      	b.n	8005616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	@ 0x24
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6819      	ldr	r1, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b20      	cmp	r3, #32
 8005636:	d139      	bne.n	80056ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005642:	2302      	movs	r3, #2
 8005644:	e033      	b.n	80056ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2224      	movs	r2, #36	@ 0x24
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005674:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af02      	add	r7, sp, #8
 80056c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e108      	b.n	80058de <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fe fa4a 	bl	8003b80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2203      	movs	r2, #3
 80056f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056fa:	d102      	bne.n	8005702 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f005 f81a 	bl	800a740 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	7c1a      	ldrb	r2, [r3, #16]
 8005714:	f88d 2000 	strb.w	r2, [sp]
 8005718:	3304      	adds	r3, #4
 800571a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800571c:	f004 ffb6 	bl	800a68c <USB_CoreInit>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e0d5      	b.n	80058de <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2100      	movs	r1, #0
 8005738:	4618      	mov	r0, r3
 800573a:	f005 f812 	bl	800a762 <USB_SetCurrentMode>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0c6      	b.n	80058de <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005750:	2300      	movs	r3, #0
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	e04a      	b.n	80057ec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	3315      	adds	r3, #21
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800576a:	7bfa      	ldrb	r2, [r7, #15]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3314      	adds	r3, #20
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800577e:	7bfa      	ldrb	r2, [r7, #15]
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	b298      	uxth	r0, r3
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	332e      	adds	r3, #46	@ 0x2e
 8005792:	4602      	mov	r2, r0
 8005794:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005796:	7bfa      	ldrb	r2, [r7, #15]
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	440b      	add	r3, r1
 80057a4:	3318      	adds	r3, #24
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057aa:	7bfa      	ldrb	r2, [r7, #15]
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	331c      	adds	r3, #28
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3320      	adds	r3, #32
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057d2:	7bfa      	ldrb	r2, [r7, #15]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	3324      	adds	r3, #36	@ 0x24
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	3301      	adds	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	791b      	ldrb	r3, [r3, #4]
 80057f0:	7bfa      	ldrb	r2, [r7, #15]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d3af      	bcc.n	8005756 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
 80057fa:	e044      	b.n	8005886 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057fc:	7bfa      	ldrb	r2, [r7, #15]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005824:	7bfa      	ldrb	r2, [r7, #15]
 8005826:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005828:	7bfa      	ldrb	r2, [r7, #15]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	3301      	adds	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	791b      	ldrb	r3, [r3, #4]
 800588a:	7bfa      	ldrb	r2, [r7, #15]
 800588c:	429a      	cmp	r2, r3
 800588e:	d3b5      	bcc.n	80057fc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	7c1a      	ldrb	r2, [r3, #16]
 8005898:	f88d 2000 	strb.w	r2, [sp]
 800589c:	3304      	adds	r3, #4
 800589e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058a0:	f004 ffac 	bl	800a7fc <USB_DevInit>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e013      	b.n	80058de <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7b1b      	ldrb	r3, [r3, #12]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f80b 	bl	80058e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f005 f967 	bl	800abaa <USB_DevDisconnect>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005916:	4b05      	ldr	r3, [pc, #20]	@ (800592c <HAL_PCDEx_ActivateLPM+0x44>)
 8005918:	4313      	orrs	r3, r2
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	10000003 	.word	0x10000003

08005930 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005934:	4b05      	ldr	r3, [pc, #20]	@ (800594c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a04      	ldr	r2, [pc, #16]	@ (800594c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800593a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800593e:	6013      	str	r3, [r2, #0]
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40007000 	.word	0x40007000

08005950 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	4b23      	ldr	r3, [pc, #140]	@ (80059e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	4a22      	ldr	r2, [pc, #136]	@ (80059e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005964:	6413      	str	r3, [r2, #64]	@ 0x40
 8005966:	4b20      	ldr	r3, [pc, #128]	@ (80059e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005972:	4b1e      	ldr	r3, [pc, #120]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1d      	ldr	r2, [pc, #116]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800597e:	f7fe faf5 	bl	8003f6c <HAL_GetTick>
 8005982:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005984:	e009      	b.n	800599a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005986:	f7fe faf1 	bl	8003f6c <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005994:	d901      	bls.n	800599a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e022      	b.n	80059e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800599a:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a6:	d1ee      	bne.n	8005986 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0f      	ldr	r2, [pc, #60]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059b4:	f7fe fada 	bl	8003f6c <HAL_GetTick>
 80059b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059ba:	e009      	b.n	80059d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059bc:	f7fe fad6 	bl	8003f6c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059ca:	d901      	bls.n	80059d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e007      	b.n	80059e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059d0:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059dc:	d1ee      	bne.n	80059bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40007000 	.word	0x40007000

080059f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e291      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8087 	beq.w	8005b22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a14:	4b96      	ldr	r3, [pc, #600]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d00c      	beq.n	8005a3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a20:	4b93      	ldr	r3, [pc, #588]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d112      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62>
 8005a2c:	4b90      	ldr	r3, [pc, #576]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a38:	d10b      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d06c      	beq.n	8005b20 <HAL_RCC_OscConfig+0x130>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d168      	bne.n	8005b20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e26b      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCC_OscConfig+0x7a>
 8005a5c:	4b84      	ldr	r3, [pc, #528]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a83      	ldr	r2, [pc, #524]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e02e      	b.n	8005ac8 <HAL_RCC_OscConfig+0xd8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x9c>
 8005a72:	4b7f      	ldr	r3, [pc, #508]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a7e      	ldr	r2, [pc, #504]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a7b      	ldr	r2, [pc, #492]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e01d      	b.n	8005ac8 <HAL_RCC_OscConfig+0xd8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0xc0>
 8005a96:	4b76      	ldr	r3, [pc, #472]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a75      	ldr	r2, [pc, #468]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b73      	ldr	r3, [pc, #460]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a72      	ldr	r2, [pc, #456]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e00b      	b.n	8005ac8 <HAL_RCC_OscConfig+0xd8>
 8005ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a6e      	ldr	r2, [pc, #440]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	4b6c      	ldr	r3, [pc, #432]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a6b      	ldr	r2, [pc, #428]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fe fa4c 	bl	8003f6c <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad8:	f7fe fa48 	bl	8003f6c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b64      	cmp	r3, #100	@ 0x64
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e21f      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	4b61      	ldr	r3, [pc, #388]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0xe8>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fe fa38 	bl	8003f6c <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b00:	f7fe fa34 	bl	8003f6c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	@ 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e20b      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	4b57      	ldr	r3, [pc, #348]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x110>
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d069      	beq.n	8005c02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b2e:	4b50      	ldr	r3, [pc, #320]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d11c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x190>
 8005b46:	4b4a      	ldr	r3, [pc, #296]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d116      	bne.n	8005b80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b52:	4b47      	ldr	r3, [pc, #284]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_RCC_OscConfig+0x17a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d001      	beq.n	8005b6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e1df      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6a:	4b41      	ldr	r3, [pc, #260]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	493d      	ldr	r1, [pc, #244]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7e:	e040      	b.n	8005c02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d023      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b88:	4b39      	ldr	r3, [pc, #228]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a38      	ldr	r2, [pc, #224]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fe f9ea 	bl	8003f6c <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9c:	f7fe f9e6 	bl	8003f6c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e1bd      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b30      	ldr	r3, [pc, #192]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bba:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4929      	ldr	r1, [pc, #164]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
 8005bce:	e018      	b.n	8005c02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd0:	4b27      	ldr	r3, [pc, #156]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a26      	ldr	r2, [pc, #152]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fe f9c6 	bl	8003f6c <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be4:	f7fe f9c2 	bl	8003f6c <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e199      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d038      	beq.n	8005c80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d019      	beq.n	8005c4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c16:	4b16      	ldr	r3, [pc, #88]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1a:	4a15      	ldr	r2, [pc, #84]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c22:	f7fe f9a3 	bl	8003f6c <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c2a:	f7fe f99f 	bl	8003f6c <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e176      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x23a>
 8005c48:	e01a      	b.n	8005c80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4a:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4e:	4a08      	ldr	r2, [pc, #32]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c56:	f7fe f989 	bl	8003f6c <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c5e:	f7fe f985 	bl	8003f6c <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d903      	bls.n	8005c74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e15c      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
 8005c70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c74:	4b91      	ldr	r3, [pc, #580]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ee      	bne.n	8005c5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80a4 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9a:	4b88      	ldr	r3, [pc, #544]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	4a87      	ldr	r2, [pc, #540]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ca6:	4b85      	ldr	r3, [pc, #532]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb6:	4b82      	ldr	r3, [pc, #520]	@ (8005ec0 <HAL_RCC_OscConfig+0x4d0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d118      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec0 <HAL_RCC_OscConfig+0x4d0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ec0 <HAL_RCC_OscConfig+0x4d0>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fe f94d 	bl	8003f6c <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd6:	f7fe f949 	bl	8003f6c <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b64      	cmp	r3, #100	@ 0x64
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e120      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ce8:	4b75      	ldr	r3, [pc, #468]	@ (8005ec0 <HAL_RCC_OscConfig+0x4d0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x31a>
 8005cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	4a6e      	ldr	r2, [pc, #440]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d08:	e02d      	b.n	8005d66 <HAL_RCC_OscConfig+0x376>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x33c>
 8005d12:	4b6a      	ldr	r3, [pc, #424]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a69      	ldr	r2, [pc, #420]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1e:	4b67      	ldr	r3, [pc, #412]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	4a66      	ldr	r2, [pc, #408]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d24:	f023 0304 	bic.w	r3, r3, #4
 8005d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d2a:	e01c      	b.n	8005d66 <HAL_RCC_OscConfig+0x376>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	d10c      	bne.n	8005d4e <HAL_RCC_OscConfig+0x35e>
 8005d34:	4b61      	ldr	r3, [pc, #388]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d38:	4a60      	ldr	r2, [pc, #384]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d3a:	f043 0304 	orr.w	r3, r3, #4
 8005d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d40:	4b5e      	ldr	r3, [pc, #376]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d44:	4a5d      	ldr	r2, [pc, #372]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4c:	e00b      	b.n	8005d66 <HAL_RCC_OscConfig+0x376>
 8005d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	4a5a      	ldr	r2, [pc, #360]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d5a:	4b58      	ldr	r3, [pc, #352]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5e:	4a57      	ldr	r2, [pc, #348]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d015      	beq.n	8005d9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6e:	f7fe f8fd 	bl	8003f6c <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d74:	e00a      	b.n	8005d8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d76:	f7fe f8f9 	bl	8003f6c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e0ce      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ee      	beq.n	8005d76 <HAL_RCC_OscConfig+0x386>
 8005d98:	e014      	b.n	8005dc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9a:	f7fe f8e7 	bl	8003f6c <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da0:	e00a      	b.n	8005db8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da2:	f7fe f8e3 	bl	8003f6c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e0b8      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db8:	4b40      	ldr	r3, [pc, #256]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ee      	bne.n	8005da2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d105      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dca:	4b3c      	ldr	r3, [pc, #240]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dce:	4a3b      	ldr	r2, [pc, #236]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dd4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80a4 	beq.w	8005f28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de0:	4b36      	ldr	r3, [pc, #216]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d06b      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d149      	bne.n	8005e88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df4:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a30      	ldr	r2, [pc, #192]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fe f8b4 	bl	8003f6c <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fe f8b0 	bl	8003f6c <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e087      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	4b28      	ldr	r3, [pc, #160]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e54:	4b19      	ldr	r3, [pc, #100]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fe f884 	bl	8003f6c <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e68:	f7fe f880 	bl	8003f6c <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e057      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7a:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x478>
 8005e86:	e04f      	b.n	8005f28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e88:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fe f86a 	bl	8003f6c <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9c:	f7fe f866 	bl	8003f6c <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e03d      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eae:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4ac>
 8005eba:	e035      	b.n	8005f28 <HAL_RCC_OscConfig+0x538>
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f34 <HAL_RCC_OscConfig+0x544>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d028      	beq.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d121      	bne.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d11a      	bne.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005efa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d111      	bne.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d001      	beq.n	8005f28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40023800 	.word	0x40023800

08005f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0d0      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f50:	4b6a      	ldr	r3, [pc, #424]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d910      	bls.n	8005f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5e:	4b67      	ldr	r3, [pc, #412]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 020f 	bic.w	r2, r3, #15
 8005f66:	4965      	ldr	r1, [pc, #404]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b63      	ldr	r3, [pc, #396]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0b8      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d020      	beq.n	8005fce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f98:	4b59      	ldr	r3, [pc, #356]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a58      	ldr	r2, [pc, #352]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb0:	4b53      	ldr	r3, [pc, #332]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4a52      	ldr	r2, [pc, #328]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fbc:	4b50      	ldr	r3, [pc, #320]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	494d      	ldr	r1, [pc, #308]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d040      	beq.n	800605c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe2:	4b47      	ldr	r3, [pc, #284]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d115      	bne.n	800601a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e07f      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d107      	bne.n	800600a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ffa:	4b41      	ldr	r3, [pc, #260]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e073      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600a:	4b3d      	ldr	r3, [pc, #244]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e06b      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800601a:	4b39      	ldr	r3, [pc, #228]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f023 0203 	bic.w	r2, r3, #3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4936      	ldr	r1, [pc, #216]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8006028:	4313      	orrs	r3, r2
 800602a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800602c:	f7fd ff9e 	bl	8003f6c <HAL_GetTick>
 8006030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006032:	e00a      	b.n	800604a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006034:	f7fd ff9a 	bl	8003f6c <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e053      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604a:	4b2d      	ldr	r3, [pc, #180]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 020c 	and.w	r2, r3, #12
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	429a      	cmp	r2, r3
 800605a:	d1eb      	bne.n	8006034 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800605c:	4b27      	ldr	r3, [pc, #156]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d210      	bcs.n	800608c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606a:	4b24      	ldr	r3, [pc, #144]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 020f 	bic.w	r2, r3, #15
 8006072:	4922      	ldr	r1, [pc, #136]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4313      	orrs	r3, r2
 8006078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e032      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006098:	4b19      	ldr	r3, [pc, #100]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4916      	ldr	r1, [pc, #88]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060b6:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	490e      	ldr	r1, [pc, #56]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060ca:	f000 f821 	bl	8006110 <HAL_RCC_GetSysClockFreq>
 80060ce:	4602      	mov	r2, r0
 80060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	490a      	ldr	r1, [pc, #40]	@ (8006104 <HAL_RCC_ClockConfig+0x1cc>)
 80060dc:	5ccb      	ldrb	r3, [r1, r3]
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <HAL_RCC_ClockConfig+0x1d0>)
 80060e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060e6:	4b09      	ldr	r3, [pc, #36]	@ (800610c <HAL_RCC_ClockConfig+0x1d4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fd fefa 	bl	8003ee4 <HAL_InitTick>

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40023c00 	.word	0x40023c00
 8006100:	40023800 	.word	0x40023800
 8006104:	0800c890 	.word	0x0800c890
 8006108:	2000004c 	.word	0x2000004c
 800610c:	20000050 	.word	0x20000050

08006110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006114:	b094      	sub	sp, #80	@ 0x50
 8006116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	647b      	str	r3, [r7, #68]	@ 0x44
 800611c:	2300      	movs	r3, #0
 800611e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006120:	2300      	movs	r3, #0
 8006122:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006128:	4b79      	ldr	r3, [pc, #484]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	2b08      	cmp	r3, #8
 8006132:	d00d      	beq.n	8006150 <HAL_RCC_GetSysClockFreq+0x40>
 8006134:	2b08      	cmp	r3, #8
 8006136:	f200 80e1 	bhi.w	80062fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x34>
 800613e:	2b04      	cmp	r3, #4
 8006140:	d003      	beq.n	800614a <HAL_RCC_GetSysClockFreq+0x3a>
 8006142:	e0db      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006144:	4b73      	ldr	r3, [pc, #460]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x204>)
 8006146:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006148:	e0db      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800614a:	4b73      	ldr	r3, [pc, #460]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x208>)
 800614c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800614e:	e0d8      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006150:	4b6f      	ldr	r3, [pc, #444]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006158:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800615a:	4b6d      	ldr	r3, [pc, #436]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d063      	beq.n	800622e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006166:	4b6a      	ldr	r3, [pc, #424]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	099b      	lsrs	r3, r3, #6
 800616c:	2200      	movs	r2, #0
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006170:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30
 800617a:	2300      	movs	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
 800617e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006182:	4622      	mov	r2, r4
 8006184:	462b      	mov	r3, r5
 8006186:	f04f 0000 	mov.w	r0, #0
 800618a:	f04f 0100 	mov.w	r1, #0
 800618e:	0159      	lsls	r1, r3, #5
 8006190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006194:	0150      	lsls	r0, r2, #5
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4621      	mov	r1, r4
 800619c:	1a51      	subs	r1, r2, r1
 800619e:	6139      	str	r1, [r7, #16]
 80061a0:	4629      	mov	r1, r5
 80061a2:	eb63 0301 	sbc.w	r3, r3, r1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061b4:	4659      	mov	r1, fp
 80061b6:	018b      	lsls	r3, r1, #6
 80061b8:	4651      	mov	r1, sl
 80061ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061be:	4651      	mov	r1, sl
 80061c0:	018a      	lsls	r2, r1, #6
 80061c2:	4651      	mov	r1, sl
 80061c4:	ebb2 0801 	subs.w	r8, r2, r1
 80061c8:	4659      	mov	r1, fp
 80061ca:	eb63 0901 	sbc.w	r9, r3, r1
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061e2:	4690      	mov	r8, r2
 80061e4:	4699      	mov	r9, r3
 80061e6:	4623      	mov	r3, r4
 80061e8:	eb18 0303 	adds.w	r3, r8, r3
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	462b      	mov	r3, r5
 80061f0:	eb49 0303 	adc.w	r3, r9, r3
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006202:	4629      	mov	r1, r5
 8006204:	024b      	lsls	r3, r1, #9
 8006206:	4621      	mov	r1, r4
 8006208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800620c:	4621      	mov	r1, r4
 800620e:	024a      	lsls	r2, r1, #9
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006216:	2200      	movs	r2, #0
 8006218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800621a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800621c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006220:	f7fa f84e 	bl	80002c0 <__aeabi_uldivmod>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4613      	mov	r3, r2
 800622a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800622c:	e058      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800622e:	4b38      	ldr	r3, [pc, #224]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	099b      	lsrs	r3, r3, #6
 8006234:	2200      	movs	r2, #0
 8006236:	4618      	mov	r0, r3
 8006238:	4611      	mov	r1, r2
 800623a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800623e:	623b      	str	r3, [r7, #32]
 8006240:	2300      	movs	r3, #0
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
 8006244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006248:	4642      	mov	r2, r8
 800624a:	464b      	mov	r3, r9
 800624c:	f04f 0000 	mov.w	r0, #0
 8006250:	f04f 0100 	mov.w	r1, #0
 8006254:	0159      	lsls	r1, r3, #5
 8006256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800625a:	0150      	lsls	r0, r2, #5
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4641      	mov	r1, r8
 8006262:	ebb2 0a01 	subs.w	sl, r2, r1
 8006266:	4649      	mov	r1, r9
 8006268:	eb63 0b01 	sbc.w	fp, r3, r1
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800627c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006280:	ebb2 040a 	subs.w	r4, r2, sl
 8006284:	eb63 050b 	sbc.w	r5, r3, fp
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	00eb      	lsls	r3, r5, #3
 8006292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006296:	00e2      	lsls	r2, r4, #3
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	4643      	mov	r3, r8
 800629e:	18e3      	adds	r3, r4, r3
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	464b      	mov	r3, r9
 80062a4:	eb45 0303 	adc.w	r3, r5, r3
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062b6:	4629      	mov	r1, r5
 80062b8:	028b      	lsls	r3, r1, #10
 80062ba:	4621      	mov	r1, r4
 80062bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c0:	4621      	mov	r1, r4
 80062c2:	028a      	lsls	r2, r1, #10
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ca:	2200      	movs	r2, #0
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	61fa      	str	r2, [r7, #28]
 80062d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d4:	f7f9 fff4 	bl	80002c0 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4613      	mov	r3, r2
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80062e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	0c1b      	lsrs	r3, r3, #16
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	3301      	adds	r3, #1
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80062f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062fa:	e002      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062fc:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x204>)
 80062fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006304:	4618      	mov	r0, r3
 8006306:	3750      	adds	r7, #80	@ 0x50
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630e:	bf00      	nop
 8006310:	40023800 	.word	0x40023800
 8006314:	00f42400 	.word	0x00f42400
 8006318:	007a1200 	.word	0x007a1200

0800631c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006320:	4b03      	ldr	r3, [pc, #12]	@ (8006330 <HAL_RCC_GetHCLKFreq+0x14>)
 8006322:	681b      	ldr	r3, [r3, #0]
}
 8006324:	4618      	mov	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	2000004c 	.word	0x2000004c

08006334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006338:	f7ff fff0 	bl	800631c <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b05      	ldr	r3, [pc, #20]	@ (8006354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	0a9b      	lsrs	r3, r3, #10
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4903      	ldr	r1, [pc, #12]	@ (8006358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40023800 	.word	0x40023800
 8006358:	0800c8a0 	.word	0x0800c8a0

0800635c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006360:	f7ff ffdc 	bl	800631c <HAL_RCC_GetHCLKFreq>
 8006364:	4602      	mov	r2, r0
 8006366:	4b05      	ldr	r3, [pc, #20]	@ (800637c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	0b5b      	lsrs	r3, r3, #13
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	4903      	ldr	r1, [pc, #12]	@ (8006380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006372:	5ccb      	ldrb	r3, [r1, r3]
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40023800 	.word	0x40023800
 8006380:	0800c8a0 	.word	0x0800c8a0

08006384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d012      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063ac:	4b69      	ldr	r3, [pc, #420]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	4a68      	ldr	r2, [pc, #416]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80063b6:	6093      	str	r3, [r2, #8]
 80063b8:	4b66      	ldr	r3, [pc, #408]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c0:	4964      	ldr	r1, [pc, #400]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80063ce:	2301      	movs	r3, #1
 80063d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d017      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063de:	4b5d      	ldr	r3, [pc, #372]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ec:	4959      	ldr	r1, [pc, #356]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063fc:	d101      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80063fe:	2301      	movs	r3, #1
 8006400:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800640a:	2301      	movs	r3, #1
 800640c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d017      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800641a:	4b4e      	ldr	r3, [pc, #312]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800641c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006420:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	494a      	ldr	r1, [pc, #296]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006438:	d101      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800643a:	2301      	movs	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006456:	2301      	movs	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 808b 	beq.w	800657e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006468:	4b3a      	ldr	r3, [pc, #232]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800646a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646c:	4a39      	ldr	r2, [pc, #228]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800646e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006472:	6413      	str	r3, [r2, #64]	@ 0x40
 8006474:	4b37      	ldr	r3, [pc, #220]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006480:	4b35      	ldr	r3, [pc, #212]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a34      	ldr	r2, [pc, #208]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800648a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648c:	f7fd fd6e 	bl	8003f6c <HAL_GetTick>
 8006490:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006494:	f7fd fd6a 	bl	8003f6c <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b64      	cmp	r3, #100	@ 0x64
 80064a0:	d901      	bls.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e357      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064b2:	4b28      	ldr	r3, [pc, #160]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d035      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d02e      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064d0:	4b20      	ldr	r3, [pc, #128]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064da:	4b1e      	ldr	r3, [pc, #120]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064de:	4a1d      	ldr	r2, [pc, #116]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80064f2:	4a18      	ldr	r2, [pc, #96]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064f8:	4b16      	ldr	r3, [pc, #88]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b01      	cmp	r3, #1
 8006502:	d114      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fd fd32 	bl	8003f6c <HAL_GetTick>
 8006508:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650a:	e00a      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650c:	f7fd fd2e 	bl	8003f6c <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e319      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006522:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0ee      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006536:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800653a:	d111      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800653c:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006548:	4b04      	ldr	r3, [pc, #16]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800654a:	400b      	ands	r3, r1
 800654c:	4901      	ldr	r1, [pc, #4]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
 8006552:	e00b      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006554:	40023800 	.word	0x40023800
 8006558:	40007000 	.word	0x40007000
 800655c:	0ffffcff 	.word	0x0ffffcff
 8006560:	4baa      	ldr	r3, [pc, #680]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4aa9      	ldr	r2, [pc, #676]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006566:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800656a:	6093      	str	r3, [r2, #8]
 800656c:	4ba7      	ldr	r3, [pc, #668]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800656e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006578:	49a4      	ldr	r1, [pc, #656]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800657a:	4313      	orrs	r3, r2
 800657c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	d010      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800658a:	4ba0      	ldr	r3, [pc, #640]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800658c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006590:	4a9e      	ldr	r2, [pc, #632]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006592:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006596:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800659a:	4b9c      	ldr	r3, [pc, #624]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800659c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	4999      	ldr	r1, [pc, #612]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065b8:	4b94      	ldr	r3, [pc, #592]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c6:	4991      	ldr	r1, [pc, #580]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065da:	4b8c      	ldr	r3, [pc, #560]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065e8:	4988      	ldr	r1, [pc, #544]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065fc:	4b83      	ldr	r3, [pc, #524]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006602:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800660a:	4980      	ldr	r1, [pc, #512]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800661e:	4b7b      	ldr	r3, [pc, #492]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006624:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662c:	4977      	ldr	r1, [pc, #476]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006640:	4b72      	ldr	r3, [pc, #456]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	f023 0203 	bic.w	r2, r3, #3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664e:	496f      	ldr	r1, [pc, #444]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006662:	4b6a      	ldr	r3, [pc, #424]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006668:	f023 020c 	bic.w	r2, r3, #12
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006670:	4966      	ldr	r1, [pc, #408]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006684:	4b61      	ldr	r3, [pc, #388]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006692:	495e      	ldr	r1, [pc, #376]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066a6:	4b59      	ldr	r3, [pc, #356]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b4:	4955      	ldr	r1, [pc, #340]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066c8:	4b50      	ldr	r3, [pc, #320]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d6:	494d      	ldr	r1, [pc, #308]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80066ea:	4b48      	ldr	r3, [pc, #288]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f8:	4944      	ldr	r1, [pc, #272]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800670c:	4b3f      	ldr	r3, [pc, #252]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006712:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800671a:	493c      	ldr	r1, [pc, #240]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800672e:	4b37      	ldr	r3, [pc, #220]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006734:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800673c:	4933      	ldr	r1, [pc, #204]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006750:	4b2e      	ldr	r3, [pc, #184]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006756:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800675e:	492b      	ldr	r1, [pc, #172]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d011      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006772:	4b26      	ldr	r3, [pc, #152]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006778:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006780:	4922      	ldr	r1, [pc, #136]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800678c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006790:	d101      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006792:	2301      	movs	r3, #1
 8006794:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067a2:	2301      	movs	r3, #1
 80067a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067b2:	4b16      	ldr	r3, [pc, #88]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c0:	4912      	ldr	r1, [pc, #72]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067d4:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e4:	4909      	ldr	r1, [pc, #36]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d006      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 80d9 	beq.w	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006800:	4b02      	ldr	r3, [pc, #8]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a01      	ldr	r2, [pc, #4]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006806:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800680a:	e001      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800680c:	40023800 	.word	0x40023800
 8006810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006812:	f7fd fbab 	bl	8003f6c <HAL_GetTick>
 8006816:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006818:	e008      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800681a:	f7fd fba7 	bl	8003f6c <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b64      	cmp	r3, #100	@ 0x64
 8006826:	d901      	bls.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e194      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800682c:	4b6c      	ldr	r3, [pc, #432]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d021      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11d      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800684c:	4b64      	ldr	r3, [pc, #400]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800684e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006852:	0c1b      	lsrs	r3, r3, #16
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800685a:	4b61      	ldr	r3, [pc, #388]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800685c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006860:	0e1b      	lsrs	r3, r3, #24
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	019a      	lsls	r2, r3, #6
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	431a      	orrs	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	061b      	lsls	r3, r3, #24
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	071b      	lsls	r3, r3, #28
 8006880:	4957      	ldr	r1, [pc, #348]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d004      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800689c:	d00a      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d02e      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068b2:	d129      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068b4:	4b4a      	ldr	r3, [pc, #296]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ba:	0c1b      	lsrs	r3, r3, #16
 80068bc:	f003 0303 	and.w	r3, r3, #3
 80068c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068c2:	4b47      	ldr	r3, [pc, #284]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c8:	0f1b      	lsrs	r3, r3, #28
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	019a      	lsls	r2, r3, #6
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	041b      	lsls	r3, r3, #16
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	061b      	lsls	r3, r3, #24
 80068e2:	431a      	orrs	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	071b      	lsls	r3, r3, #28
 80068e8:	493d      	ldr	r1, [pc, #244]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80068f0:	4b3b      	ldr	r3, [pc, #236]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068f6:	f023 021f 	bic.w	r2, r3, #31
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	3b01      	subs	r3, #1
 8006900:	4937      	ldr	r1, [pc, #220]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006902:	4313      	orrs	r3, r2
 8006904:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01d      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006914:	4b32      	ldr	r3, [pc, #200]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800691a:	0e1b      	lsrs	r3, r3, #24
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006922:	4b2f      	ldr	r3, [pc, #188]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006928:	0f1b      	lsrs	r3, r3, #28
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	019a      	lsls	r2, r3, #6
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	041b      	lsls	r3, r3, #16
 800693c:	431a      	orrs	r2, r3
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	431a      	orrs	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	071b      	lsls	r3, r3, #28
 8006948:	4925      	ldr	r1, [pc, #148]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d011      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	019a      	lsls	r2, r3, #6
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	041b      	lsls	r3, r3, #16
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	061b      	lsls	r3, r3, #24
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	071b      	lsls	r3, r3, #28
 8006978:	4919      	ldr	r1, [pc, #100]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006980:	4b17      	ldr	r3, [pc, #92]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a16      	ldr	r2, [pc, #88]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006986:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800698a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800698c:	f7fd faee 	bl	8003f6c <HAL_GetTick>
 8006990:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006994:	f7fd faea 	bl	8003f6c <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b64      	cmp	r3, #100	@ 0x64
 80069a0:	d901      	bls.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e0d7      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069a6:	4b0e      	ldr	r3, [pc, #56]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	f040 80cd 	bne.w	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069ba:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a08      	ldr	r2, [pc, #32]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c6:	f7fd fad1 	bl	8003f6c <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069cc:	e00a      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069ce:	f7fd facd 	bl	8003f6c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b64      	cmp	r3, #100	@ 0x64
 80069da:	d903      	bls.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e0ba      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80069e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069f0:	d0ed      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02e      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d12a      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a1a:	4b51      	ldr	r3, [pc, #324]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a28:	4b4d      	ldr	r3, [pc, #308]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2e:	0f1b      	lsrs	r3, r3, #28
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	019a      	lsls	r2, r3, #6
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	061b      	lsls	r3, r3, #24
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	071b      	lsls	r3, r3, #28
 8006a4e:	4944      	ldr	r1, [pc, #272]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a56:	4b42      	ldr	r3, [pc, #264]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a5c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a64:	3b01      	subs	r3, #1
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	493d      	ldr	r1, [pc, #244]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d022      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a84:	d11d      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a86:	4b36      	ldr	r3, [pc, #216]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8c:	0e1b      	lsrs	r3, r3, #24
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a94:	4b32      	ldr	r3, [pc, #200]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9a:	0f1b      	lsrs	r3, r3, #28
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	019a      	lsls	r2, r3, #6
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	061b      	lsls	r3, r3, #24
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	071b      	lsls	r3, r3, #28
 8006aba:	4929      	ldr	r1, [pc, #164]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d028      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ace:	4b24      	ldr	r3, [pc, #144]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad4:	0e1b      	lsrs	r3, r3, #24
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006adc:	4b20      	ldr	r3, [pc, #128]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	019a      	lsls	r2, r3, #6
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	041b      	lsls	r3, r3, #16
 8006af4:	431a      	orrs	r2, r3
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	061b      	lsls	r3, r3, #24
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	071b      	lsls	r3, r3, #28
 8006b02:	4917      	ldr	r1, [pc, #92]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b0a:	4b15      	ldr	r3, [pc, #84]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	4911      	ldr	r1, [pc, #68]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b20:	4b0f      	ldr	r3, [pc, #60]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a0e      	ldr	r2, [pc, #56]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b2c:	f7fd fa1e 	bl	8003f6c <HAL_GetTick>
 8006b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b34:	f7fd fa1a 	bl	8003f6c <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b64      	cmp	r3, #100	@ 0x64
 8006b40:	d901      	bls.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e007      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b46:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b52:	d1ef      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40023800 	.word	0x40023800

08006b64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e09d      	b.n	8006cb2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d108      	bne.n	8006b90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b86:	d009      	beq.n	8006b9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	61da      	str	r2, [r3, #28]
 8006b8e:	e005      	b.n	8006b9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fc fafe 	bl	80031b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bdc:	d902      	bls.n	8006be4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	e002      	b.n	8006bea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006be8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006bf2:	d007      	beq.n	8006c04 <HAL_SPI_Init+0xa0>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bfc:	d002      	beq.n	8006c04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c46:	ea42 0103 	orr.w	r1, r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	0c1b      	lsrs	r3, r3, #16
 8006c60:	f003 0204 	and.w	r2, r3, #4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c80:	ea42 0103 	orr.w	r1, r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ca0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b088      	sub	sp, #32
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	603b      	str	r3, [r7, #0]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_SPI_Transmit+0x22>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e15f      	b.n	8006f9c <HAL_SPI_Transmit+0x2e2>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce4:	f7fd f942 	bl	8003f6c <HAL_GetTick>
 8006ce8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d002      	beq.n	8006d00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cfe:	e148      	b.n	8006f92 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_SPI_Transmit+0x52>
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d102      	bne.n	8006d12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d10:	e13f      	b.n	8006f92 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2203      	movs	r2, #3
 8006d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d5c:	d10f      	bne.n	8006d7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b40      	cmp	r3, #64	@ 0x40
 8006d8a:	d007      	beq.n	8006d9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006da4:	d94f      	bls.n	8006e46 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_SPI_Transmit+0xfa>
 8006dae:	8afb      	ldrh	r3, [r7, #22]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d142      	bne.n	8006e3a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db8:	881a      	ldrh	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	1c9a      	adds	r2, r3, #2
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dd8:	e02f      	b.n	8006e3a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d112      	bne.n	8006e0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	1c9a      	adds	r2, r3, #2
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e0c:	e015      	b.n	8006e3a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e0e:	f7fd f8ad 	bl	8003f6c <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d803      	bhi.n	8006e26 <HAL_SPI_Transmit+0x16c>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e24:	d102      	bne.n	8006e2c <HAL_SPI_Transmit+0x172>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006e38:	e0ab      	b.n	8006f92 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1ca      	bne.n	8006dda <HAL_SPI_Transmit+0x120>
 8006e44:	e080      	b.n	8006f48 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_SPI_Transmit+0x19a>
 8006e4e:	8afb      	ldrh	r3, [r7, #22]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d174      	bne.n	8006f3e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d912      	bls.n	8006e84 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e62:	881a      	ldrh	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6e:	1c9a      	adds	r2, r3, #2
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b02      	subs	r3, #2
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e82:	e05c      	b.n	8006f3e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	7812      	ldrb	r2, [r2, #0]
 8006e90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006eaa:	e048      	b.n	8006f3e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d12b      	bne.n	8006f12 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d912      	bls.n	8006eea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	881a      	ldrh	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed4:	1c9a      	adds	r2, r3, #2
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b02      	subs	r3, #2
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ee8:	e029      	b.n	8006f3e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	7812      	ldrb	r2, [r2, #0]
 8006ef6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f10:	e015      	b.n	8006f3e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f12:	f7fd f82b 	bl	8003f6c <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d803      	bhi.n	8006f2a <HAL_SPI_Transmit+0x270>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d102      	bne.n	8006f30 <HAL_SPI_Transmit+0x276>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f3c:	e029      	b.n	8006f92 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1b1      	bne.n	8006eac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fb69 	bl	8007624 <SPI_EndRxTxTransaction>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f66:	2300      	movs	r3, #0
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	77fb      	strb	r3, [r7, #31]
 8006f88:	e003      	b.n	8006f92 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	@ 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_SPI_TransmitReceive+0x26>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e20a      	b.n	80073e0 <HAL_SPI_TransmitReceive+0x43c>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fd2:	f7fc ffcb 	bl	8003f6c <HAL_GetTick>
 8006fd6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fde:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006fe6:	887b      	ldrh	r3, [r7, #2]
 8006fe8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006fea:	887b      	ldrh	r3, [r7, #2]
 8006fec:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fee:	7efb      	ldrb	r3, [r7, #27]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d00e      	beq.n	8007012 <HAL_SPI_TransmitReceive+0x6e>
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ffa:	d106      	bne.n	800700a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <HAL_SPI_TransmitReceive+0x66>
 8007004:	7efb      	ldrb	r3, [r7, #27]
 8007006:	2b04      	cmp	r3, #4
 8007008:	d003      	beq.n	8007012 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800700a:	2302      	movs	r3, #2
 800700c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007010:	e1e0      	b.n	80073d4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_SPI_TransmitReceive+0x80>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_SPI_TransmitReceive+0x80>
 800701e:	887b      	ldrh	r3, [r7, #2]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800702a:	e1d3      	b.n	80073d4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b04      	cmp	r3, #4
 8007036:	d003      	beq.n	8007040 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2205      	movs	r2, #5
 800703c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	887a      	ldrh	r2, [r7, #2]
 8007050:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	887a      	ldrh	r2, [r7, #2]
 8007058:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	887a      	ldrh	r2, [r7, #2]
 8007066:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	887a      	ldrh	r2, [r7, #2]
 800706c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007082:	d802      	bhi.n	800708a <HAL_SPI_TransmitReceive+0xe6>
 8007084:	8a3b      	ldrh	r3, [r7, #16]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d908      	bls.n	800709c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	e007      	b.n	80070ac <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b6:	2b40      	cmp	r3, #64	@ 0x40
 80070b8:	d007      	beq.n	80070ca <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070d2:	f240 8081 	bls.w	80071d8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x140>
 80070de:	8a7b      	ldrh	r3, [r7, #18]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d16d      	bne.n	80071c0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	881a      	ldrh	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f4:	1c9a      	adds	r2, r3, #2
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007108:	e05a      	b.n	80071c0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b02      	cmp	r3, #2
 8007116:	d11b      	bne.n	8007150 <HAL_SPI_TransmitReceive+0x1ac>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <HAL_SPI_TransmitReceive+0x1ac>
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	2b01      	cmp	r3, #1
 8007126:	d113      	bne.n	8007150 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712c:	881a      	ldrh	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007138:	1c9a      	adds	r2, r3, #2
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b01      	cmp	r3, #1
 800715c:	d11c      	bne.n	8007198 <HAL_SPI_TransmitReceive+0x1f4>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d016      	beq.n	8007198 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007174:	b292      	uxth	r2, r2
 8007176:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717c:	1c9a      	adds	r2, r3, #2
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007194:	2301      	movs	r3, #1
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007198:	f7fc fee8 	bl	8003f6c <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d80b      	bhi.n	80071c0 <HAL_SPI_TransmitReceive+0x21c>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ae:	d007      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80071be:	e109      	b.n	80073d4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d19f      	bne.n	800710a <HAL_SPI_TransmitReceive+0x166>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d199      	bne.n	800710a <HAL_SPI_TransmitReceive+0x166>
 80071d6:	e0e3      	b.n	80073a0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x244>
 80071e0:	8a7b      	ldrh	r3, [r7, #18]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	f040 80cf 	bne.w	8007386 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d912      	bls.n	8007218 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	881a      	ldrh	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007202:	1c9a      	adds	r2, r3, #2
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800720c:	b29b      	uxth	r3, r3
 800720e:	3b02      	subs	r3, #2
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007216:	e0b6      	b.n	8007386 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	330c      	adds	r3, #12
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800723e:	e0a2      	b.n	8007386 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b02      	cmp	r3, #2
 800724c:	d134      	bne.n	80072b8 <HAL_SPI_TransmitReceive+0x314>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d02f      	beq.n	80072b8 <HAL_SPI_TransmitReceive+0x314>
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	2b01      	cmp	r3, #1
 800725c:	d12c      	bne.n	80072b8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007262:	b29b      	uxth	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d912      	bls.n	800728e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726c:	881a      	ldrh	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007278:	1c9a      	adds	r2, r3, #2
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b02      	subs	r3, #2
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800728c:	e012      	b.n	80072b4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	7812      	ldrb	r2, [r2, #0]
 800729a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d148      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x3b4>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d042      	beq.n	8007358 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d923      	bls.n	8007326 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	b292      	uxth	r2, r2
 80072ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f0:	1c9a      	adds	r2, r3, #2
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b02      	subs	r3, #2
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d81f      	bhi.n	8007354 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007322:	605a      	str	r2, [r3, #4]
 8007324:	e016      	b.n	8007354 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f103 020c 	add.w	r2, r3, #12
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	7812      	ldrb	r2, [r2, #0]
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007354:	2301      	movs	r3, #1
 8007356:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007358:	f7fc fe08 	bl	8003f6c <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007364:	429a      	cmp	r2, r3
 8007366:	d803      	bhi.n	8007370 <HAL_SPI_TransmitReceive+0x3cc>
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d102      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x3d2>
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007384:	e026      	b.n	80073d4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	f47f af57 	bne.w	8007240 <HAL_SPI_TransmitReceive+0x29c>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	f47f af50 	bne.w	8007240 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f93d 	bl	8007624 <SPI_EndRxTxTransaction>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ca:	e003      	b.n	80073d4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80073dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3728      	adds	r7, #40	@ 0x28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073f8:	f7fc fdb8 	bl	8003f6c <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	4413      	add	r3, r2
 8007406:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007408:	f7fc fdb0 	bl	8003f6c <HAL_GetTick>
 800740c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800740e:	4b39      	ldr	r3, [pc, #228]	@ (80074f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	015b      	lsls	r3, r3, #5
 8007414:	0d1b      	lsrs	r3, r3, #20
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	fb02 f303 	mul.w	r3, r2, r3
 800741c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800741e:	e054      	b.n	80074ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007426:	d050      	beq.n	80074ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007428:	f7fc fda0 	bl	8003f6c <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	429a      	cmp	r2, r3
 8007436:	d902      	bls.n	800743e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d13d      	bne.n	80074ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800744c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007456:	d111      	bne.n	800747c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007460:	d004      	beq.n	800746c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800746a:	d107      	bne.n	800747c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800747a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007484:	d10f      	bne.n	80074a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e017      	b.n	80074ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4013      	ands	r3, r2
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	bf0c      	ite	eq
 80074da:	2301      	moveq	r3, #1
 80074dc:	2300      	movne	r3, #0
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d19b      	bne.n	8007420 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	2000004c 	.word	0x2000004c

080074f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	@ 0x28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800750a:	f7fc fd2f 	bl	8003f6c <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	1a9b      	subs	r3, r3, r2
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	4413      	add	r3, r2
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800751a:	f7fc fd27 	bl	8003f6c <HAL_GetTick>
 800751e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007528:	4b3d      	ldr	r3, [pc, #244]	@ (8007620 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	00da      	lsls	r2, r3, #3
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	0d1b      	lsrs	r3, r3, #20
 8007538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007540:	e060      	b.n	8007604 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007548:	d107      	bne.n	800755a <SPI_WaitFifoStateUntilTimeout+0x62>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007558:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d050      	beq.n	8007604 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007562:	f7fc fd03 	bl	8003f6c <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756e:	429a      	cmp	r2, r3
 8007570:	d902      	bls.n	8007578 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	d13d      	bne.n	80075f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007586:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007590:	d111      	bne.n	80075b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800759a:	d004      	beq.n	80075a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a4:	d107      	bne.n	80075b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075be:	d10f      	bne.n	80075e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e010      	b.n	8007616 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	3b01      	subs	r3, #1
 8007602:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4013      	ands	r3, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d196      	bne.n	8007542 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3728      	adds	r7, #40	@ 0x28
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	2000004c 	.word	0x2000004c

08007624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af02      	add	r7, sp, #8
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff ff5b 	bl	80074f8 <SPI_WaitFifoStateUntilTimeout>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d007      	beq.n	8007658 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764c:	f043 0220 	orr.w	r2, r3, #32
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e046      	b.n	80076e6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007658:	4b25      	ldr	r3, [pc, #148]	@ (80076f0 <SPI_EndRxTxTransaction+0xcc>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a25      	ldr	r2, [pc, #148]	@ (80076f4 <SPI_EndRxTxTransaction+0xd0>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	0d5b      	lsrs	r3, r3, #21
 8007664:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007668:	fb02 f303 	mul.w	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007676:	d112      	bne.n	800769e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2200      	movs	r2, #0
 8007680:	2180      	movs	r1, #128	@ 0x80
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff feb0 	bl	80073e8 <SPI_WaitFlagStateUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d016      	beq.n	80076bc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007692:	f043 0220 	orr.w	r2, r3, #32
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e023      	b.n	80076e6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b4:	2b80      	cmp	r3, #128	@ 0x80
 80076b6:	d0f2      	beq.n	800769e <SPI_EndRxTxTransaction+0x7a>
 80076b8:	e000      	b.n	80076bc <SPI_EndRxTxTransaction+0x98>
        break;
 80076ba:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff ff15 	bl	80074f8 <SPI_WaitFifoStateUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e000      	b.n	80076e6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	2000004c 	.word	0x2000004c
 80076f4:	165e9f81 	.word	0x165e9f81

080076f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e049      	b.n	800779e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fb fdac 	bl	800327c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f001 f876 	bl	8008828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d001      	beq.n	80077c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e04c      	b.n	800785a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a26      	ldr	r2, [pc, #152]	@ (8007868 <HAL_TIM_Base_Start+0xc0>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d022      	beq.n	8007818 <HAL_TIM_Base_Start+0x70>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077da:	d01d      	beq.n	8007818 <HAL_TIM_Base_Start+0x70>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a22      	ldr	r2, [pc, #136]	@ (800786c <HAL_TIM_Base_Start+0xc4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d018      	beq.n	8007818 <HAL_TIM_Base_Start+0x70>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a21      	ldr	r2, [pc, #132]	@ (8007870 <HAL_TIM_Base_Start+0xc8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d013      	beq.n	8007818 <HAL_TIM_Base_Start+0x70>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007874 <HAL_TIM_Base_Start+0xcc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00e      	beq.n	8007818 <HAL_TIM_Base_Start+0x70>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007878 <HAL_TIM_Base_Start+0xd0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d009      	beq.n	8007818 <HAL_TIM_Base_Start+0x70>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a1c      	ldr	r2, [pc, #112]	@ (800787c <HAL_TIM_Base_Start+0xd4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_TIM_Base_Start+0x70>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a1b      	ldr	r2, [pc, #108]	@ (8007880 <HAL_TIM_Base_Start+0xd8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d115      	bne.n	8007844 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	4b19      	ldr	r3, [pc, #100]	@ (8007884 <HAL_TIM_Base_Start+0xdc>)
 8007820:	4013      	ands	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b06      	cmp	r3, #6
 8007828:	d015      	beq.n	8007856 <HAL_TIM_Base_Start+0xae>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007830:	d011      	beq.n	8007856 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007842:	e008      	b.n	8007856 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e000      	b.n	8007858 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40010000 	.word	0x40010000
 800786c:	40000400 	.word	0x40000400
 8007870:	40000800 	.word	0x40000800
 8007874:	40000c00 	.word	0x40000c00
 8007878:	40010400 	.word	0x40010400
 800787c:	40014000 	.word	0x40014000
 8007880:	40001800 	.word	0x40001800
 8007884:	00010007 	.word	0x00010007

08007888 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6a1a      	ldr	r2, [r3, #32]
 8007896:	f241 1311 	movw	r3, #4369	@ 0x1111
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10f      	bne.n	80078c0 <HAL_TIM_Base_Stop+0x38>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6a1a      	ldr	r2, [r3, #32]
 80078a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d107      	bne.n	80078c0 <HAL_TIM_Base_Stop+0x38>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e049      	b.n	800797c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7fb fda1 	bl	8003444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f000 ff87 	bl	8008828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d109      	bne.n	80079a8 <HAL_TIM_PWM_Start+0x24>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b01      	cmp	r3, #1
 800799e:	bf14      	ite	ne
 80079a0:	2301      	movne	r3, #1
 80079a2:	2300      	moveq	r3, #0
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	e03c      	b.n	8007a22 <HAL_TIM_PWM_Start+0x9e>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d109      	bne.n	80079c2 <HAL_TIM_PWM_Start+0x3e>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	bf14      	ite	ne
 80079ba:	2301      	movne	r3, #1
 80079bc:	2300      	moveq	r3, #0
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	e02f      	b.n	8007a22 <HAL_TIM_PWM_Start+0x9e>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d109      	bne.n	80079dc <HAL_TIM_PWM_Start+0x58>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	bf14      	ite	ne
 80079d4:	2301      	movne	r3, #1
 80079d6:	2300      	moveq	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	e022      	b.n	8007a22 <HAL_TIM_PWM_Start+0x9e>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b0c      	cmp	r3, #12
 80079e0:	d109      	bne.n	80079f6 <HAL_TIM_PWM_Start+0x72>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	e015      	b.n	8007a22 <HAL_TIM_PWM_Start+0x9e>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b10      	cmp	r3, #16
 80079fa:	d109      	bne.n	8007a10 <HAL_TIM_PWM_Start+0x8c>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	bf14      	ite	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	2300      	moveq	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	e008      	b.n	8007a22 <HAL_TIM_PWM_Start+0x9e>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	bf14      	ite	ne
 8007a1c:	2301      	movne	r3, #1
 8007a1e:	2300      	moveq	r3, #0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e092      	b.n	8007b50 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <HAL_TIM_PWM_Start+0xb6>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a38:	e023      	b.n	8007a82 <HAL_TIM_PWM_Start+0xfe>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d104      	bne.n	8007a4a <HAL_TIM_PWM_Start+0xc6>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a48:	e01b      	b.n	8007a82 <HAL_TIM_PWM_Start+0xfe>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d104      	bne.n	8007a5a <HAL_TIM_PWM_Start+0xd6>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a58:	e013      	b.n	8007a82 <HAL_TIM_PWM_Start+0xfe>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b0c      	cmp	r3, #12
 8007a5e:	d104      	bne.n	8007a6a <HAL_TIM_PWM_Start+0xe6>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a68:	e00b      	b.n	8007a82 <HAL_TIM_PWM_Start+0xfe>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d104      	bne.n	8007a7a <HAL_TIM_PWM_Start+0xf6>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a78:	e003      	b.n	8007a82 <HAL_TIM_PWM_Start+0xfe>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2201      	movs	r2, #1
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fa70 	bl	8008f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a30      	ldr	r2, [pc, #192]	@ (8007b58 <HAL_TIM_PWM_Start+0x1d4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d004      	beq.n	8007aa4 <HAL_TIM_PWM_Start+0x120>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8007b5c <HAL_TIM_PWM_Start+0x1d8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d101      	bne.n	8007aa8 <HAL_TIM_PWM_Start+0x124>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <HAL_TIM_PWM_Start+0x126>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d007      	beq.n	8007abe <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007abc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a25      	ldr	r2, [pc, #148]	@ (8007b58 <HAL_TIM_PWM_Start+0x1d4>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d022      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x18a>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad0:	d01d      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x18a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a22      	ldr	r2, [pc, #136]	@ (8007b60 <HAL_TIM_PWM_Start+0x1dc>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d018      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x18a>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a20      	ldr	r2, [pc, #128]	@ (8007b64 <HAL_TIM_PWM_Start+0x1e0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x18a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1f      	ldr	r2, [pc, #124]	@ (8007b68 <HAL_TIM_PWM_Start+0x1e4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00e      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x18a>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a19      	ldr	r2, [pc, #100]	@ (8007b5c <HAL_TIM_PWM_Start+0x1d8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d009      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x18a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1b      	ldr	r2, [pc, #108]	@ (8007b6c <HAL_TIM_PWM_Start+0x1e8>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x18a>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a19      	ldr	r2, [pc, #100]	@ (8007b70 <HAL_TIM_PWM_Start+0x1ec>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d115      	bne.n	8007b3a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	4b17      	ldr	r3, [pc, #92]	@ (8007b74 <HAL_TIM_PWM_Start+0x1f0>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d015      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1c8>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b26:	d011      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b38:	e008      	b.n	8007b4c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f042 0201 	orr.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e000      	b.n	8007b4e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800
 8007b68:	40000c00 	.word	0x40000c00
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40001800 	.word	0x40001800
 8007b74:	00010007 	.word	0x00010007

08007b78 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <HAL_TIM_PWM_Start_IT+0x28>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	bf14      	ite	ne
 8007b98:	2301      	movne	r3, #1
 8007b9a:	2300      	moveq	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	e03c      	b.n	8007c1a <HAL_TIM_PWM_Start_IT+0xa2>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d109      	bne.n	8007bba <HAL_TIM_PWM_Start_IT+0x42>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	bf14      	ite	ne
 8007bb2:	2301      	movne	r3, #1
 8007bb4:	2300      	moveq	r3, #0
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	e02f      	b.n	8007c1a <HAL_TIM_PWM_Start_IT+0xa2>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d109      	bne.n	8007bd4 <HAL_TIM_PWM_Start_IT+0x5c>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	bf14      	ite	ne
 8007bcc:	2301      	movne	r3, #1
 8007bce:	2300      	moveq	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	e022      	b.n	8007c1a <HAL_TIM_PWM_Start_IT+0xa2>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b0c      	cmp	r3, #12
 8007bd8:	d109      	bne.n	8007bee <HAL_TIM_PWM_Start_IT+0x76>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	e015      	b.n	8007c1a <HAL_TIM_PWM_Start_IT+0xa2>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b10      	cmp	r3, #16
 8007bf2:	d109      	bne.n	8007c08 <HAL_TIM_PWM_Start_IT+0x90>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	bf14      	ite	ne
 8007c00:	2301      	movne	r3, #1
 8007c02:	2300      	moveq	r3, #0
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	e008      	b.n	8007c1a <HAL_TIM_PWM_Start_IT+0xa2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	bf14      	ite	ne
 8007c14:	2301      	movne	r3, #1
 8007c16:	2300      	moveq	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e0dd      	b.n	8007dde <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <HAL_TIM_PWM_Start_IT+0xba>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c30:	e023      	b.n	8007c7a <HAL_TIM_PWM_Start_IT+0x102>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d104      	bne.n	8007c42 <HAL_TIM_PWM_Start_IT+0xca>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c40:	e01b      	b.n	8007c7a <HAL_TIM_PWM_Start_IT+0x102>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d104      	bne.n	8007c52 <HAL_TIM_PWM_Start_IT+0xda>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c50:	e013      	b.n	8007c7a <HAL_TIM_PWM_Start_IT+0x102>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b0c      	cmp	r3, #12
 8007c56:	d104      	bne.n	8007c62 <HAL_TIM_PWM_Start_IT+0xea>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c60:	e00b      	b.n	8007c7a <HAL_TIM_PWM_Start_IT+0x102>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d104      	bne.n	8007c72 <HAL_TIM_PWM_Start_IT+0xfa>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c70:	e003      	b.n	8007c7a <HAL_TIM_PWM_Start_IT+0x102>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b0c      	cmp	r3, #12
 8007c7e:	d841      	bhi.n	8007d04 <HAL_TIM_PWM_Start_IT+0x18c>
 8007c80:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <HAL_TIM_PWM_Start_IT+0x110>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007cbd 	.word	0x08007cbd
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d05 	.word	0x08007d05
 8007c94:	08007d05 	.word	0x08007d05
 8007c98:	08007ccf 	.word	0x08007ccf
 8007c9c:	08007d05 	.word	0x08007d05
 8007ca0:	08007d05 	.word	0x08007d05
 8007ca4:	08007d05 	.word	0x08007d05
 8007ca8:	08007ce1 	.word	0x08007ce1
 8007cac:	08007d05 	.word	0x08007d05
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007cf3 	.word	0x08007cf3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0202 	orr.w	r2, r2, #2
 8007cca:	60da      	str	r2, [r3, #12]
      break;
 8007ccc:	e01d      	b.n	8007d0a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0204 	orr.w	r2, r2, #4
 8007cdc:	60da      	str	r2, [r3, #12]
      break;
 8007cde:	e014      	b.n	8007d0a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0208 	orr.w	r2, r2, #8
 8007cee:	60da      	str	r2, [r3, #12]
      break;
 8007cf0:	e00b      	b.n	8007d0a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0210 	orr.w	r2, r2, #16
 8007d00:	60da      	str	r2, [r3, #12]
      break;
 8007d02:	e002      	b.n	8007d0a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
      break;
 8007d08:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d165      	bne.n	8007ddc <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2201      	movs	r2, #1
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 f929 	bl	8008f70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a31      	ldr	r2, [pc, #196]	@ (8007de8 <HAL_TIM_PWM_Start_IT+0x270>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d004      	beq.n	8007d32 <HAL_TIM_PWM_Start_IT+0x1ba>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8007dec <HAL_TIM_PWM_Start_IT+0x274>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d101      	bne.n	8007d36 <HAL_TIM_PWM_Start_IT+0x1be>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e000      	b.n	8007d38 <HAL_TIM_PWM_Start_IT+0x1c0>
 8007d36:	2300      	movs	r3, #0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a25      	ldr	r2, [pc, #148]	@ (8007de8 <HAL_TIM_PWM_Start_IT+0x270>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d022      	beq.n	8007d9c <HAL_TIM_PWM_Start_IT+0x224>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5e:	d01d      	beq.n	8007d9c <HAL_TIM_PWM_Start_IT+0x224>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a22      	ldr	r2, [pc, #136]	@ (8007df0 <HAL_TIM_PWM_Start_IT+0x278>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d018      	beq.n	8007d9c <HAL_TIM_PWM_Start_IT+0x224>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a21      	ldr	r2, [pc, #132]	@ (8007df4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d013      	beq.n	8007d9c <HAL_TIM_PWM_Start_IT+0x224>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a1f      	ldr	r2, [pc, #124]	@ (8007df8 <HAL_TIM_PWM_Start_IT+0x280>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00e      	beq.n	8007d9c <HAL_TIM_PWM_Start_IT+0x224>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1a      	ldr	r2, [pc, #104]	@ (8007dec <HAL_TIM_PWM_Start_IT+0x274>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d009      	beq.n	8007d9c <HAL_TIM_PWM_Start_IT+0x224>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007dfc <HAL_TIM_PWM_Start_IT+0x284>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d004      	beq.n	8007d9c <HAL_TIM_PWM_Start_IT+0x224>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1a      	ldr	r2, [pc, #104]	@ (8007e00 <HAL_TIM_PWM_Start_IT+0x288>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d115      	bne.n	8007dc8 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	4b18      	ldr	r3, [pc, #96]	@ (8007e04 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b06      	cmp	r3, #6
 8007dac:	d015      	beq.n	8007dda <HAL_TIM_PWM_Start_IT+0x262>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db4:	d011      	beq.n	8007dda <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0201 	orr.w	r2, r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc6:	e008      	b.n	8007dda <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0201 	orr.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e000      	b.n	8007ddc <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dda:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40010400 	.word	0x40010400
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40001800 	.word	0x40001800
 8007e04:	00010007 	.word	0x00010007

08007e08 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b0c      	cmp	r3, #12
 8007e1a:	d841      	bhi.n	8007ea0 <HAL_TIM_PWM_Stop_IT+0x98>
 8007e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e24 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e59 	.word	0x08007e59
 8007e28:	08007ea1 	.word	0x08007ea1
 8007e2c:	08007ea1 	.word	0x08007ea1
 8007e30:	08007ea1 	.word	0x08007ea1
 8007e34:	08007e6b 	.word	0x08007e6b
 8007e38:	08007ea1 	.word	0x08007ea1
 8007e3c:	08007ea1 	.word	0x08007ea1
 8007e40:	08007ea1 	.word	0x08007ea1
 8007e44:	08007e7d 	.word	0x08007e7d
 8007e48:	08007ea1 	.word	0x08007ea1
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007ea1 	.word	0x08007ea1
 8007e54:	08007e8f 	.word	0x08007e8f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0202 	bic.w	r2, r2, #2
 8007e66:	60da      	str	r2, [r3, #12]
      break;
 8007e68:	e01d      	b.n	8007ea6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0204 	bic.w	r2, r2, #4
 8007e78:	60da      	str	r2, [r3, #12]
      break;
 8007e7a:	e014      	b.n	8007ea6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0208 	bic.w	r2, r2, #8
 8007e8a:	60da      	str	r2, [r3, #12]
      break;
 8007e8c:	e00b      	b.n	8007ea6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0210 	bic.w	r2, r2, #16
 8007e9c:	60da      	str	r2, [r3, #12]
      break;
 8007e9e:	e002      	b.n	8007ea6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d171      	bne.n	8007f90 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 f85b 	bl	8008f70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a37      	ldr	r2, [pc, #220]	@ (8007f9c <HAL_TIM_PWM_Stop_IT+0x194>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_TIM_PWM_Stop_IT+0xc6>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a35      	ldr	r2, [pc, #212]	@ (8007fa0 <HAL_TIM_PWM_Stop_IT+0x198>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d101      	bne.n	8007ed2 <HAL_TIM_PWM_Stop_IT+0xca>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <HAL_TIM_PWM_Stop_IT+0xcc>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d017      	beq.n	8007f08 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6a1a      	ldr	r2, [r3, #32]
 8007ede:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <HAL_TIM_PWM_Stop_IT+0x100>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6a1a      	ldr	r2, [r3, #32]
 8007eee:	f240 4344 	movw	r3, #1092	@ 0x444
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_PWM_Stop_IT+0x100>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f06:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a1a      	ldr	r2, [r3, #32]
 8007f0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f12:	4013      	ands	r3, r2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <HAL_TIM_PWM_Stop_IT+0x130>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f22:	4013      	ands	r3, r2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <HAL_TIM_PWM_Stop_IT+0x130>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <HAL_TIM_PWM_Stop_IT+0x140>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f46:	e023      	b.n	8007f90 <HAL_TIM_PWM_Stop_IT+0x188>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d104      	bne.n	8007f58 <HAL_TIM_PWM_Stop_IT+0x150>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f56:	e01b      	b.n	8007f90 <HAL_TIM_PWM_Stop_IT+0x188>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d104      	bne.n	8007f68 <HAL_TIM_PWM_Stop_IT+0x160>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f66:	e013      	b.n	8007f90 <HAL_TIM_PWM_Stop_IT+0x188>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b0c      	cmp	r3, #12
 8007f6c:	d104      	bne.n	8007f78 <HAL_TIM_PWM_Stop_IT+0x170>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f76:	e00b      	b.n	8007f90 <HAL_TIM_PWM_Stop_IT+0x188>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d104      	bne.n	8007f88 <HAL_TIM_PWM_Stop_IT+0x180>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f86:	e003      	b.n	8007f90 <HAL_TIM_PWM_Stop_IT+0x188>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	40010000 	.word	0x40010000
 8007fa0:	40010400 	.word	0x40010400

08007fa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e08f      	b.n	80080d8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fb f9ed 	bl	80033ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6899      	ldr	r1, [r3, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80080e0 <HAL_TIM_Encoder_Init+0x13c>)
 8007fe6:	400b      	ands	r3, r1
 8007fe8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f000 fc17 	bl	8008828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4b31      	ldr	r3, [pc, #196]	@ (80080e4 <HAL_TIM_Encoder_Init+0x140>)
 8008020:	4013      	ands	r3, r2
 8008022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	4313      	orrs	r3, r2
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4b2b      	ldr	r3, [pc, #172]	@ (80080e8 <HAL_TIM_Encoder_Init+0x144>)
 800803a:	4013      	ands	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4b2a      	ldr	r3, [pc, #168]	@ (80080ec <HAL_TIM_Encoder_Init+0x148>)
 8008042:	4013      	ands	r3, r2
 8008044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	4313      	orrs	r3, r2
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	011a      	lsls	r2, r3, #4
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	031b      	lsls	r3, r3, #12
 8008064:	4313      	orrs	r3, r2
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008072:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800807a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	4313      	orrs	r3, r2
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	fffebff8 	.word	0xfffebff8
 80080e4:	fffffcfc 	.word	0xfffffcfc
 80080e8:	fffff3f3 	.word	0xfffff3f3
 80080ec:	ffff0f0f 	.word	0xffff0f0f

080080f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008100:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008108:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008110:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008118:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d110      	bne.n	8008142 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d102      	bne.n	800812c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008126:	7b7b      	ldrb	r3, [r7, #13]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d001      	beq.n	8008130 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e069      	b.n	8008204 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008140:	e031      	b.n	80081a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b04      	cmp	r3, #4
 8008146:	d110      	bne.n	800816a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d102      	bne.n	8008154 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800814e:	7b3b      	ldrb	r3, [r7, #12]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d001      	beq.n	8008158 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e055      	b.n	8008204 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008168:	e01d      	b.n	80081a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d108      	bne.n	8008182 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d105      	bne.n	8008182 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008176:	7b7b      	ldrb	r3, [r7, #13]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d102      	bne.n	8008182 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800817c:	7b3b      	ldrb	r3, [r7, #12]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d001      	beq.n	8008186 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e03e      	b.n	8008204 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2202      	movs	r2, #2
 800818a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2202      	movs	r2, #2
 8008192:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2202      	movs	r2, #2
 800819a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_TIM_Encoder_Start+0xc4>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d008      	beq.n	80081c4 <HAL_TIM_Encoder_Start+0xd4>
 80081b2:	e00f      	b.n	80081d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2201      	movs	r2, #1
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fed7 	bl	8008f70 <TIM_CCxChannelCmd>
      break;
 80081c2:	e016      	b.n	80081f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2201      	movs	r2, #1
 80081ca:	2104      	movs	r1, #4
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 fecf 	bl	8008f70 <TIM_CCxChannelCmd>
      break;
 80081d2:	e00e      	b.n	80081f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2201      	movs	r2, #1
 80081da:	2100      	movs	r1, #0
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fec7 	bl	8008f70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2201      	movs	r2, #1
 80081e8:	2104      	movs	r1, #4
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fec0 	bl	8008f70 <TIM_CCxChannelCmd>
      break;
 80081f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0201 	orr.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d020      	beq.n	8008270 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01b      	beq.n	8008270 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0202 	mvn.w	r2, #2
 8008240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fad2 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 800825c:	e005      	b.n	800826a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fac4 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7f8 fb59 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	d020      	beq.n	80082bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01b      	beq.n	80082bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0204 	mvn.w	r2, #4
 800828c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 faac 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 80082a8:	e005      	b.n	80082b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fa9e 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7f8 fb33 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d020      	beq.n	8008308 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f003 0308 	and.w	r3, r3, #8
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01b      	beq.n	8008308 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f06f 0208 	mvn.w	r2, #8
 80082d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2204      	movs	r2, #4
 80082de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa86 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 80082f4:	e005      	b.n	8008302 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa78 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7f8 fb0d 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f003 0310 	and.w	r3, r3, #16
 800830e:	2b00      	cmp	r3, #0
 8008310:	d020      	beq.n	8008354 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01b      	beq.n	8008354 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0210 	mvn.w	r2, #16
 8008324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2208      	movs	r2, #8
 800832a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa60 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa52 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7f8 fae7 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00c      	beq.n	8008378 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0201 	mvn.w	r2, #1
 8008370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa30 	bl	80087d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d104      	bne.n	800838c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00c      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800839e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 ff21 	bl	80091e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 ff19 	bl	80091fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00c      	beq.n	80083ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d007      	beq.n	80083ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa13 	bl	8008814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00c      	beq.n	8008412 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f06f 0220 	mvn.w	r2, #32
 800840a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fee1 	bl	80091d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008412:	bf00      	nop
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d101      	bne.n	800843a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008436:	2302      	movs	r3, #2
 8008438:	e0ff      	b.n	800863a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b14      	cmp	r3, #20
 8008446:	f200 80f0 	bhi.w	800862a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800844a:	a201      	add	r2, pc, #4	@ (adr r2, 8008450 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	080084a5 	.word	0x080084a5
 8008454:	0800862b 	.word	0x0800862b
 8008458:	0800862b 	.word	0x0800862b
 800845c:	0800862b 	.word	0x0800862b
 8008460:	080084e5 	.word	0x080084e5
 8008464:	0800862b 	.word	0x0800862b
 8008468:	0800862b 	.word	0x0800862b
 800846c:	0800862b 	.word	0x0800862b
 8008470:	08008527 	.word	0x08008527
 8008474:	0800862b 	.word	0x0800862b
 8008478:	0800862b 	.word	0x0800862b
 800847c:	0800862b 	.word	0x0800862b
 8008480:	08008567 	.word	0x08008567
 8008484:	0800862b 	.word	0x0800862b
 8008488:	0800862b 	.word	0x0800862b
 800848c:	0800862b 	.word	0x0800862b
 8008490:	080085a9 	.word	0x080085a9
 8008494:	0800862b 	.word	0x0800862b
 8008498:	0800862b 	.word	0x0800862b
 800849c:	0800862b 	.word	0x0800862b
 80084a0:	080085e9 	.word	0x080085e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fa68 	bl	8008980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0204 	bic.w	r2, r2, #4
 80084ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6999      	ldr	r1, [r3, #24]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	691a      	ldr	r2, [r3, #16]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	619a      	str	r2, [r3, #24]
      break;
 80084e2:	e0a5      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 faba 	bl	8008a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800850e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6999      	ldr	r1, [r3, #24]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	021a      	lsls	r2, r3, #8
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	619a      	str	r2, [r3, #24]
      break;
 8008524:	e084      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fb11 	bl	8008b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	69da      	ldr	r2, [r3, #28]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0208 	orr.w	r2, r2, #8
 8008540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0204 	bic.w	r2, r2, #4
 8008550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69d9      	ldr	r1, [r3, #28]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	61da      	str	r2, [r3, #28]
      break;
 8008564:	e064      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68b9      	ldr	r1, [r7, #8]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fb67 	bl	8008c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69da      	ldr	r2, [r3, #28]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69d9      	ldr	r1, [r3, #28]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	021a      	lsls	r2, r3, #8
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	61da      	str	r2, [r3, #28]
      break;
 80085a6:	e043      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fb9e 	bl	8008cf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0208 	orr.w	r2, r2, #8
 80085c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0204 	bic.w	r2, r2, #4
 80085d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80085e6:	e023      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fbd0 	bl	8008d94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008602:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008612:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	021a      	lsls	r2, r3, #8
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008628:	e002      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	75fb      	strb	r3, [r7, #23]
      break;
 800862e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop

08008644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_TIM_ConfigClockSource+0x1c>
 800865c:	2302      	movs	r3, #2
 800865e:	e0b4      	b.n	80087ca <HAL_TIM_ConfigClockSource+0x186>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	4b56      	ldr	r3, [pc, #344]	@ (80087d4 <HAL_TIM_ConfigClockSource+0x190>)
 800867c:	4013      	ands	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008698:	d03e      	beq.n	8008718 <HAL_TIM_ConfigClockSource+0xd4>
 800869a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800869e:	f200 8087 	bhi.w	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
 80086a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086a6:	f000 8086 	beq.w	80087b6 <HAL_TIM_ConfigClockSource+0x172>
 80086aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ae:	d87f      	bhi.n	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
 80086b0:	2b70      	cmp	r3, #112	@ 0x70
 80086b2:	d01a      	beq.n	80086ea <HAL_TIM_ConfigClockSource+0xa6>
 80086b4:	2b70      	cmp	r3, #112	@ 0x70
 80086b6:	d87b      	bhi.n	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
 80086b8:	2b60      	cmp	r3, #96	@ 0x60
 80086ba:	d050      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x11a>
 80086bc:	2b60      	cmp	r3, #96	@ 0x60
 80086be:	d877      	bhi.n	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
 80086c0:	2b50      	cmp	r3, #80	@ 0x50
 80086c2:	d03c      	beq.n	800873e <HAL_TIM_ConfigClockSource+0xfa>
 80086c4:	2b50      	cmp	r3, #80	@ 0x50
 80086c6:	d873      	bhi.n	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
 80086c8:	2b40      	cmp	r3, #64	@ 0x40
 80086ca:	d058      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x13a>
 80086cc:	2b40      	cmp	r3, #64	@ 0x40
 80086ce:	d86f      	bhi.n	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
 80086d0:	2b30      	cmp	r3, #48	@ 0x30
 80086d2:	d064      	beq.n	800879e <HAL_TIM_ConfigClockSource+0x15a>
 80086d4:	2b30      	cmp	r3, #48	@ 0x30
 80086d6:	d86b      	bhi.n	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d060      	beq.n	800879e <HAL_TIM_ConfigClockSource+0x15a>
 80086dc:	2b20      	cmp	r3, #32
 80086de:	d867      	bhi.n	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d05c      	beq.n	800879e <HAL_TIM_ConfigClockSource+0x15a>
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	d05a      	beq.n	800879e <HAL_TIM_ConfigClockSource+0x15a>
 80086e8:	e062      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086fa:	f000 fc19 	bl	8008f30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800870c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	609a      	str	r2, [r3, #8]
      break;
 8008716:	e04f      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008728:	f000 fc02 	bl	8008f30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800873a:	609a      	str	r2, [r3, #8]
      break;
 800873c:	e03c      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800874a:	461a      	mov	r2, r3
 800874c:	f000 fb76 	bl	8008e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2150      	movs	r1, #80	@ 0x50
 8008756:	4618      	mov	r0, r3
 8008758:	f000 fbcf 	bl	8008efa <TIM_ITRx_SetConfig>
      break;
 800875c:	e02c      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800876a:	461a      	mov	r2, r3
 800876c:	f000 fb95 	bl	8008e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2160      	movs	r1, #96	@ 0x60
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fbbf 	bl	8008efa <TIM_ITRx_SetConfig>
      break;
 800877c:	e01c      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800878a:	461a      	mov	r2, r3
 800878c:	f000 fb56 	bl	8008e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2140      	movs	r1, #64	@ 0x40
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fbaf 	bl	8008efa <TIM_ITRx_SetConfig>
      break;
 800879c:	e00c      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4619      	mov	r1, r3
 80087a8:	4610      	mov	r0, r2
 80087aa:	f000 fba6 	bl	8008efa <TIM_ITRx_SetConfig>
      break;
 80087ae:	e003      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	73fb      	strb	r3, [r7, #15]
      break;
 80087b4:	e000      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	fffeff88 	.word	0xfffeff88

080087d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a46      	ldr	r2, [pc, #280]	@ (8008954 <TIM_Base_SetConfig+0x12c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d013      	beq.n	8008868 <TIM_Base_SetConfig+0x40>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008846:	d00f      	beq.n	8008868 <TIM_Base_SetConfig+0x40>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a43      	ldr	r2, [pc, #268]	@ (8008958 <TIM_Base_SetConfig+0x130>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00b      	beq.n	8008868 <TIM_Base_SetConfig+0x40>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a42      	ldr	r2, [pc, #264]	@ (800895c <TIM_Base_SetConfig+0x134>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d007      	beq.n	8008868 <TIM_Base_SetConfig+0x40>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a41      	ldr	r2, [pc, #260]	@ (8008960 <TIM_Base_SetConfig+0x138>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d003      	beq.n	8008868 <TIM_Base_SetConfig+0x40>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a40      	ldr	r2, [pc, #256]	@ (8008964 <TIM_Base_SetConfig+0x13c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d108      	bne.n	800887a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800886e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4313      	orrs	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a35      	ldr	r2, [pc, #212]	@ (8008954 <TIM_Base_SetConfig+0x12c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d02b      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008888:	d027      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a32      	ldr	r2, [pc, #200]	@ (8008958 <TIM_Base_SetConfig+0x130>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d023      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a31      	ldr	r2, [pc, #196]	@ (800895c <TIM_Base_SetConfig+0x134>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d01f      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a30      	ldr	r2, [pc, #192]	@ (8008960 <TIM_Base_SetConfig+0x138>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d01b      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a2f      	ldr	r2, [pc, #188]	@ (8008964 <TIM_Base_SetConfig+0x13c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d017      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a2e      	ldr	r2, [pc, #184]	@ (8008968 <TIM_Base_SetConfig+0x140>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d013      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a2d      	ldr	r2, [pc, #180]	@ (800896c <TIM_Base_SetConfig+0x144>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00f      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a2c      	ldr	r2, [pc, #176]	@ (8008970 <TIM_Base_SetConfig+0x148>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00b      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a2b      	ldr	r2, [pc, #172]	@ (8008974 <TIM_Base_SetConfig+0x14c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d007      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a2a      	ldr	r2, [pc, #168]	@ (8008978 <TIM_Base_SetConfig+0x150>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d003      	beq.n	80088da <TIM_Base_SetConfig+0xb2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a29      	ldr	r2, [pc, #164]	@ (800897c <TIM_Base_SetConfig+0x154>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d108      	bne.n	80088ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a10      	ldr	r2, [pc, #64]	@ (8008954 <TIM_Base_SetConfig+0x12c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d003      	beq.n	8008920 <TIM_Base_SetConfig+0xf8>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a12      	ldr	r2, [pc, #72]	@ (8008964 <TIM_Base_SetConfig+0x13c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d103      	bne.n	8008928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b01      	cmp	r3, #1
 8008938:	d105      	bne.n	8008946 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f023 0201 	bic.w	r2, r3, #1
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	611a      	str	r2, [r3, #16]
  }
}
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	40010000 	.word	0x40010000
 8008958:	40000400 	.word	0x40000400
 800895c:	40000800 	.word	0x40000800
 8008960:	40000c00 	.word	0x40000c00
 8008964:	40010400 	.word	0x40010400
 8008968:	40014000 	.word	0x40014000
 800896c:	40014400 	.word	0x40014400
 8008970:	40014800 	.word	0x40014800
 8008974:	40001800 	.word	0x40001800
 8008978:	40001c00 	.word	0x40001c00
 800897c:	40002000 	.word	0x40002000

08008980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	f023 0201 	bic.w	r2, r3, #1
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008a58 <TIM_OC1_SetConfig+0xd8>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0303 	bic.w	r3, r3, #3
 80089b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f023 0302 	bic.w	r3, r3, #2
 80089c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a21      	ldr	r2, [pc, #132]	@ (8008a5c <TIM_OC1_SetConfig+0xdc>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d003      	beq.n	80089e4 <TIM_OC1_SetConfig+0x64>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a20      	ldr	r2, [pc, #128]	@ (8008a60 <TIM_OC1_SetConfig+0xe0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d10c      	bne.n	80089fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f023 0308 	bic.w	r3, r3, #8
 80089ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f023 0304 	bic.w	r3, r3, #4
 80089fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a16      	ldr	r2, [pc, #88]	@ (8008a5c <TIM_OC1_SetConfig+0xdc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d003      	beq.n	8008a0e <TIM_OC1_SetConfig+0x8e>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a15      	ldr	r2, [pc, #84]	@ (8008a60 <TIM_OC1_SetConfig+0xe0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d111      	bne.n	8008a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	621a      	str	r2, [r3, #32]
}
 8008a4c:	bf00      	nop
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	fffeff8f 	.word	0xfffeff8f
 8008a5c:	40010000 	.word	0x40010000
 8008a60:	40010400 	.word	0x40010400

08008a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	f023 0210 	bic.w	r2, r3, #16
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008b48 <TIM_OC2_SetConfig+0xe4>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	021b      	lsls	r3, r3, #8
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f023 0320 	bic.w	r3, r3, #32
 8008aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a23      	ldr	r2, [pc, #140]	@ (8008b4c <TIM_OC2_SetConfig+0xe8>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_OC2_SetConfig+0x68>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a22      	ldr	r2, [pc, #136]	@ (8008b50 <TIM_OC2_SetConfig+0xec>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d10d      	bne.n	8008ae8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ae6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a18      	ldr	r2, [pc, #96]	@ (8008b4c <TIM_OC2_SetConfig+0xe8>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d003      	beq.n	8008af8 <TIM_OC2_SetConfig+0x94>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a17      	ldr	r2, [pc, #92]	@ (8008b50 <TIM_OC2_SetConfig+0xec>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d113      	bne.n	8008b20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	621a      	str	r2, [r3, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	feff8fff 	.word	0xfeff8fff
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40010400 	.word	0x40010400

08008b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8008c34 <TIM_OC3_SetConfig+0xe0>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a22      	ldr	r2, [pc, #136]	@ (8008c38 <TIM_OC3_SetConfig+0xe4>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d003      	beq.n	8008bba <TIM_OC3_SetConfig+0x66>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a21      	ldr	r2, [pc, #132]	@ (8008c3c <TIM_OC3_SetConfig+0xe8>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d10d      	bne.n	8008bd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	021b      	lsls	r3, r3, #8
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a17      	ldr	r2, [pc, #92]	@ (8008c38 <TIM_OC3_SetConfig+0xe4>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <TIM_OC3_SetConfig+0x92>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a16      	ldr	r2, [pc, #88]	@ (8008c3c <TIM_OC3_SetConfig+0xe8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d113      	bne.n	8008c0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	621a      	str	r2, [r3, #32]
}
 8008c28:	bf00      	nop
 8008c2a:	371c      	adds	r7, #28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	fffeff8f 	.word	0xfffeff8f
 8008c38:	40010000 	.word	0x40010000
 8008c3c:	40010400 	.word	0x40010400

08008c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ce4 <TIM_OC4_SetConfig+0xa4>)
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	031b      	lsls	r3, r3, #12
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a13      	ldr	r2, [pc, #76]	@ (8008ce8 <TIM_OC4_SetConfig+0xa8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d003      	beq.n	8008ca8 <TIM_OC4_SetConfig+0x68>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a12      	ldr	r2, [pc, #72]	@ (8008cec <TIM_OC4_SetConfig+0xac>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d109      	bne.n	8008cbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	019b      	lsls	r3, r3, #6
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	621a      	str	r2, [r3, #32]
}
 8008cd6:	bf00      	nop
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	feff8fff 	.word	0xfeff8fff
 8008ce8:	40010000 	.word	0x40010000
 8008cec:	40010400 	.word	0x40010400

08008cf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008d88 <TIM_OC5_SetConfig+0x98>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008d30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	041b      	lsls	r3, r3, #16
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a12      	ldr	r2, [pc, #72]	@ (8008d8c <TIM_OC5_SetConfig+0x9c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d003      	beq.n	8008d4e <TIM_OC5_SetConfig+0x5e>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a11      	ldr	r2, [pc, #68]	@ (8008d90 <TIM_OC5_SetConfig+0xa0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d109      	bne.n	8008d62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	621a      	str	r2, [r3, #32]
}
 8008d7c:	bf00      	nop
 8008d7e:	371c      	adds	r7, #28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	fffeff8f 	.word	0xfffeff8f
 8008d8c:	40010000 	.word	0x40010000
 8008d90:	40010400 	.word	0x40010400

08008d94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8008e30 <TIM_OC6_SetConfig+0x9c>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	051b      	lsls	r3, r3, #20
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a13      	ldr	r2, [pc, #76]	@ (8008e34 <TIM_OC6_SetConfig+0xa0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d003      	beq.n	8008df4 <TIM_OC6_SetConfig+0x60>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a12      	ldr	r2, [pc, #72]	@ (8008e38 <TIM_OC6_SetConfig+0xa4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d109      	bne.n	8008e08 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	029b      	lsls	r3, r3, #10
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	feff8fff 	.word	0xfeff8fff
 8008e34:	40010000 	.word	0x40010000
 8008e38:	40010400 	.word	0x40010400

08008e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f023 0201 	bic.w	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f023 030a 	bic.w	r3, r3, #10
 8008e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	621a      	str	r2, [r3, #32]
}
 8008e8e:	bf00      	nop
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b087      	sub	sp, #28
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	f023 0210 	bic.w	r2, r3, #16
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	031b      	lsls	r3, r3, #12
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	f043 0307 	orr.w	r3, r3, #7
 8008f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	609a      	str	r2, [r3, #8]
}
 8008f24:	bf00      	nop
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	021a      	lsls	r2, r3, #8
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	609a      	str	r2, [r3, #8]
}
 8008f64:	bf00      	nop
 8008f66:	371c      	adds	r7, #28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f003 031f 	and.w	r3, r3, #31
 8008f82:	2201      	movs	r2, #1
 8008f84:	fa02 f303 	lsl.w	r3, r2, r3
 8008f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1a      	ldr	r2, [r3, #32]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	401a      	ands	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a1a      	ldr	r2, [r3, #32]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f003 031f 	and.w	r3, r3, #31
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	621a      	str	r2, [r3, #32]
}
 8008fae:	bf00      	nop
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
	...

08008fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e06d      	b.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a30      	ldr	r2, [pc, #192]	@ (80090bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d004      	beq.n	8009008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a2f      	ldr	r2, [pc, #188]	@ (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d108      	bne.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800900e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	4313      	orrs	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a20      	ldr	r2, [pc, #128]	@ (80090bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d022      	beq.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009046:	d01d      	beq.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1d      	ldr	r2, [pc, #116]	@ (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d018      	beq.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1c      	ldr	r2, [pc, #112]	@ (80090c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d013      	beq.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1a      	ldr	r2, [pc, #104]	@ (80090cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d00e      	beq.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a15      	ldr	r2, [pc, #84]	@ (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d009      	beq.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a16      	ldr	r2, [pc, #88]	@ (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d004      	beq.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a15      	ldr	r2, [pc, #84]	@ (80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d10c      	bne.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800908a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	4313      	orrs	r3, r2
 8009094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	40010000 	.word	0x40010000
 80090c0:	40010400 	.word	0x40010400
 80090c4:	40000400 	.word	0x40000400
 80090c8:	40000800 	.word	0x40000800
 80090cc:	40000c00 	.word	0x40000c00
 80090d0:	40014000 	.word	0x40014000
 80090d4:	40001800 	.word	0x40001800

080090d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e065      	b.n	80091c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	4313      	orrs	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4313      	orrs	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	041b      	lsls	r3, r3, #16
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a16      	ldr	r2, [pc, #88]	@ (80091cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d004      	beq.n	8009182 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a14      	ldr	r2, [pc, #80]	@ (80091d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d115      	bne.n	80091ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918c:	051b      	lsls	r3, r3, #20
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	4313      	orrs	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	40010000 	.word	0x40010000
 80091d0:	40010400 	.word	0x40010400

080091d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e040      	b.n	80092a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d106      	bne.n	8009238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7fa fa1c 	bl	8003670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2224      	movs	r2, #36	@ 0x24
 800923c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 0201 	bic.w	r2, r2, #1
 800924c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fe56 	bl	8009f08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fbef 	bl	8009a40 <UART_SetConfig>
 8009262:	4603      	mov	r3, r0
 8009264:	2b01      	cmp	r3, #1
 8009266:	d101      	bne.n	800926c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e01b      	b.n	80092a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800927a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800928a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fed5 	bl	800a04c <UART_CheckIdleState>
 80092a2:	4603      	mov	r3, r0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	@ 0x28
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	4613      	mov	r3, r2
 80092ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092c0:	2b20      	cmp	r3, #32
 80092c2:	d177      	bne.n	80093b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <HAL_UART_Transmit+0x24>
 80092ca:	88fb      	ldrh	r3, [r7, #6]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e070      	b.n	80093b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2221      	movs	r2, #33	@ 0x21
 80092e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092e2:	f7fa fe43 	bl	8003f6c <HAL_GetTick>
 80092e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	88fa      	ldrh	r2, [r7, #6]
 80092ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	88fa      	ldrh	r2, [r7, #6]
 80092f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009300:	d108      	bne.n	8009314 <HAL_UART_Transmit+0x68>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	e003      	b.n	800931c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009318:	2300      	movs	r3, #0
 800931a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800931c:	e02f      	b.n	800937e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2200      	movs	r2, #0
 8009326:	2180      	movs	r1, #128	@ 0x80
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fee6 	bl	800a0fa <UART_WaitOnFlagUntilTimeout>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2220      	movs	r2, #32
 8009338:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e03b      	b.n	80093b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10b      	bne.n	800935c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009352:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	3302      	adds	r3, #2
 8009358:	61bb      	str	r3, [r7, #24]
 800935a:	e007      	b.n	800936c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	781a      	ldrb	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	3301      	adds	r3, #1
 800936a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009384:	b29b      	uxth	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1c9      	bne.n	800931e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2200      	movs	r2, #0
 8009392:	2140      	movs	r1, #64	@ 0x40
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 feb0 	bl	800a0fa <UART_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e005      	b.n	80093b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2220      	movs	r2, #32
 80093ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	e000      	b.n	80093b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80093b4:	2302      	movs	r3, #2
  }
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3720      	adds	r7, #32
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b08a      	sub	sp, #40	@ 0x28
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	4613      	mov	r3, r2
 80093ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	d132      	bne.n	800943c <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <HAL_UART_Receive_DMA+0x24>
 80093dc:	88fb      	ldrh	r3, [r7, #6]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e02b      	b.n	800943e <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d018      	beq.n	800942c <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	613b      	str	r3, [r7, #16]
   return(result);
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	623b      	str	r3, [r7, #32]
 800941a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	69f9      	ldr	r1, [r7, #28]
 800941e:	6a3a      	ldr	r2, [r7, #32]
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	61bb      	str	r3, [r7, #24]
   return(result);
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e6      	bne.n	80093fa <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800942c:	88fb      	ldrh	r3, [r7, #6]
 800942e:	461a      	mov	r2, r3
 8009430:	68b9      	ldr	r1, [r7, #8]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fece 	bl	800a1d4 <UART_Start_Receive_DMA>
 8009438:	4603      	mov	r3, r0
 800943a:	e000      	b.n	800943e <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800943c:	2302      	movs	r3, #2
  }
}
 800943e:	4618      	mov	r0, r3
 8009440:	3728      	adds	r7, #40	@ 0x28
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b0ba      	sub	sp, #232	@ 0xe8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800946e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009472:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009476:	4013      	ands	r3, r2
 8009478:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800947c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009480:	2b00      	cmp	r3, #0
 8009482:	d115      	bne.n	80094b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009488:	f003 0320 	and.w	r3, r3, #32
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00f      	beq.n	80094b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009494:	f003 0320 	and.w	r3, r3, #32
 8009498:	2b00      	cmp	r3, #0
 800949a:	d009      	beq.n	80094b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 8297 	beq.w	80099d4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
      }
      return;
 80094ae:	e291      	b.n	80099d4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 8117 	beq.w	80096e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80094ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80094c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80094ca:	4b85      	ldr	r3, [pc, #532]	@ (80096e0 <HAL_UART_IRQHandler+0x298>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f000 810a 	beq.w	80096e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d011      	beq.n	8009504 <HAL_UART_IRQHandler+0xbc>
 80094e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2201      	movs	r2, #1
 80094f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094fa:	f043 0201 	orr.w	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d011      	beq.n	8009534 <HAL_UART_IRQHandler+0xec>
 8009510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2202      	movs	r2, #2
 8009522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800952a:	f043 0204 	orr.w	r2, r3, #4
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b00      	cmp	r3, #0
 800953e:	d011      	beq.n	8009564 <HAL_UART_IRQHandler+0x11c>
 8009540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00b      	beq.n	8009564 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2204      	movs	r2, #4
 8009552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800955a:	f043 0202 	orr.w	r2, r3, #2
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b00      	cmp	r3, #0
 800956e:	d017      	beq.n	80095a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009574:	f003 0320 	and.w	r3, r3, #32
 8009578:	2b00      	cmp	r3, #0
 800957a:	d105      	bne.n	8009588 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800957c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009580:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2208      	movs	r2, #8
 800958e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009596:	f043 0208 	orr.w	r2, r3, #8
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d012      	beq.n	80095d2 <HAL_UART_IRQHandler+0x18a>
 80095ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00c      	beq.n	80095d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095c8:	f043 0220 	orr.w	r2, r3, #32
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f000 81fd 	beq.w	80099d8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80095de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e2:	f003 0320 	and.w	r3, r3, #32
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00d      	beq.n	8009606 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d007      	beq.n	8009606 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800960c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961a:	2b40      	cmp	r3, #64	@ 0x40
 800961c:	d005      	beq.n	800962a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800961e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009626:	2b00      	cmp	r3, #0
 8009628:	d04f      	beq.n	80096ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fe98 	bl	800a360 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800963a:	2b40      	cmp	r3, #64	@ 0x40
 800963c:	d141      	bne.n	80096c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3308      	adds	r3, #8
 8009644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800965c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3308      	adds	r3, #8
 8009666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800966a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800966e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1d9      	bne.n	800963e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800968e:	2b00      	cmp	r3, #0
 8009690:	d013      	beq.n	80096ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009696:	4a13      	ldr	r2, [pc, #76]	@ (80096e4 <HAL_UART_IRQHandler+0x29c>)
 8009698:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fa ff24 	bl	80044ec <HAL_DMA_Abort_IT>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d017      	beq.n	80096da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b8:	e00f      	b.n	80096da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f9aa 	bl	8009a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	e00b      	b.n	80096da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f9a6 	bl	8009a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c8:	e007      	b.n	80096da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f9a2 	bl	8009a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80096d8:	e17e      	b.n	80099d8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096da:	bf00      	nop
    return;
 80096dc:	e17c      	b.n	80099d8 <HAL_UART_IRQHandler+0x590>
 80096de:	bf00      	nop
 80096e0:	04000120 	.word	0x04000120
 80096e4:	0800a60d 	.word	0x0800a60d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	f040 814c 	bne.w	800998a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 8145 	beq.w	800998a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 813e 	beq.w	800998a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2210      	movs	r2, #16
 8009714:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009720:	2b40      	cmp	r3, #64	@ 0x40
 8009722:	f040 80b6 	bne.w	8009892 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009732:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 8150 	beq.w	80099dc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009746:	429a      	cmp	r2, r3
 8009748:	f080 8148 	bcs.w	80099dc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009752:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009760:	f000 8086 	beq.w	8009870 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009770:	e853 3f00 	ldrex	r3, [r3]
 8009774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800977c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	461a      	mov	r2, r3
 800978a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800978e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009792:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800979a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80097a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1da      	bne.n	8009764 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3308      	adds	r3, #8
 80097b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80097be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097c0:	f023 0301 	bic.w	r3, r3, #1
 80097c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80097d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80097d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80097da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80097e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e1      	bne.n	80097ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3308      	adds	r3, #8
 80097f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800980e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009810:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009814:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800981c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e3      	bne.n	80097ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2220      	movs	r2, #32
 8009826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800983e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009840:	f023 0310 	bic.w	r3, r3, #16
 8009844:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009852:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009854:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009858:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e4      	bne.n	8009830 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800986a:	4618      	mov	r0, r3
 800986c:	f7fa fdce 	bl	800440c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009882:	b29b      	uxth	r3, r3
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	b29b      	uxth	r3, r3
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f8cc 	bl	8009a28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009890:	e0a4      	b.n	80099dc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800989e:	b29b      	uxth	r3, r3
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8096 	beq.w	80099e0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80098b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 8091 	beq.w	80099e0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098e8:	e841 2300 	strex	r3, r2, [r1]
 80098ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e4      	bne.n	80098be <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3308      	adds	r3, #8
 80098fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fe:	e853 3f00 	ldrex	r3, [r3]
 8009902:	623b      	str	r3, [r7, #32]
   return(result);
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	f023 0301 	bic.w	r3, r3, #1
 800990a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3308      	adds	r3, #8
 8009914:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009918:	633a      	str	r2, [r7, #48]	@ 0x30
 800991a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800991e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009920:	e841 2300 	strex	r3, r2, [r1]
 8009924:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1e3      	bne.n	80098f4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2220      	movs	r2, #32
 8009930:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	60fb      	str	r3, [r7, #12]
   return(result);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f023 0310 	bic.w	r3, r3, #16
 8009954:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009962:	61fb      	str	r3, [r7, #28]
 8009964:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	69b9      	ldr	r1, [r7, #24]
 8009968:	69fa      	ldr	r2, [r7, #28]
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	617b      	str	r3, [r7, #20]
   return(result);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e4      	bne.n	8009940 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800997c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f850 	bl	8009a28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009988:	e02a      	b.n	80099e0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800998a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800998e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00e      	beq.n	80099b4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800999a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d008      	beq.n	80099b4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01c      	beq.n	80099e4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	4798      	blx	r3
    }
    return;
 80099b2:	e017      	b.n	80099e4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d012      	beq.n	80099e6 <HAL_UART_IRQHandler+0x59e>
 80099c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00c      	beq.n	80099e6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fe33 	bl	800a638 <UART_EndTransmit_IT>
    return;
 80099d2:	e008      	b.n	80099e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80099d4:	bf00      	nop
 80099d6:	e006      	b.n	80099e6 <HAL_UART_IRQHandler+0x59e>
    return;
 80099d8:	bf00      	nop
 80099da:	e004      	b.n	80099e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80099dc:	bf00      	nop
 80099de:	e002      	b.n	80099e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80099e0:	bf00      	nop
 80099e2:	e000      	b.n	80099e6 <HAL_UART_IRQHandler+0x59e>
    return;
 80099e4:	bf00      	nop
  }

}
 80099e6:	37e8      	adds	r7, #232	@ 0xe8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	431a      	orrs	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4ba6      	ldr	r3, [pc, #664]	@ (8009d04 <UART_SetConfig+0x2c4>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	6979      	ldr	r1, [r7, #20]
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a94      	ldr	r2, [pc, #592]	@ (8009d08 <UART_SetConfig+0x2c8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d120      	bne.n	8009afe <UART_SetConfig+0xbe>
 8009abc:	4b93      	ldr	r3, [pc, #588]	@ (8009d0c <UART_SetConfig+0x2cc>)
 8009abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d816      	bhi.n	8009af8 <UART_SetConfig+0xb8>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <UART_SetConfig+0x90>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae1 	.word	0x08009ae1
 8009ad4:	08009aed 	.word	0x08009aed
 8009ad8:	08009ae7 	.word	0x08009ae7
 8009adc:	08009af3 	.word	0x08009af3
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	77fb      	strb	r3, [r7, #31]
 8009ae4:	e150      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	77fb      	strb	r3, [r7, #31]
 8009aea:	e14d      	b.n	8009d88 <UART_SetConfig+0x348>
 8009aec:	2304      	movs	r3, #4
 8009aee:	77fb      	strb	r3, [r7, #31]
 8009af0:	e14a      	b.n	8009d88 <UART_SetConfig+0x348>
 8009af2:	2308      	movs	r3, #8
 8009af4:	77fb      	strb	r3, [r7, #31]
 8009af6:	e147      	b.n	8009d88 <UART_SetConfig+0x348>
 8009af8:	2310      	movs	r3, #16
 8009afa:	77fb      	strb	r3, [r7, #31]
 8009afc:	e144      	b.n	8009d88 <UART_SetConfig+0x348>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a83      	ldr	r2, [pc, #524]	@ (8009d10 <UART_SetConfig+0x2d0>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d132      	bne.n	8009b6e <UART_SetConfig+0x12e>
 8009b08:	4b80      	ldr	r3, [pc, #512]	@ (8009d0c <UART_SetConfig+0x2cc>)
 8009b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0e:	f003 030c 	and.w	r3, r3, #12
 8009b12:	2b0c      	cmp	r3, #12
 8009b14:	d828      	bhi.n	8009b68 <UART_SetConfig+0x128>
 8009b16:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <UART_SetConfig+0xdc>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b51 	.word	0x08009b51
 8009b20:	08009b69 	.word	0x08009b69
 8009b24:	08009b69 	.word	0x08009b69
 8009b28:	08009b69 	.word	0x08009b69
 8009b2c:	08009b5d 	.word	0x08009b5d
 8009b30:	08009b69 	.word	0x08009b69
 8009b34:	08009b69 	.word	0x08009b69
 8009b38:	08009b69 	.word	0x08009b69
 8009b3c:	08009b57 	.word	0x08009b57
 8009b40:	08009b69 	.word	0x08009b69
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b69 	.word	0x08009b69
 8009b4c:	08009b63 	.word	0x08009b63
 8009b50:	2300      	movs	r3, #0
 8009b52:	77fb      	strb	r3, [r7, #31]
 8009b54:	e118      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b56:	2302      	movs	r3, #2
 8009b58:	77fb      	strb	r3, [r7, #31]
 8009b5a:	e115      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	77fb      	strb	r3, [r7, #31]
 8009b60:	e112      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b62:	2308      	movs	r3, #8
 8009b64:	77fb      	strb	r3, [r7, #31]
 8009b66:	e10f      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	77fb      	strb	r3, [r7, #31]
 8009b6c:	e10c      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a68      	ldr	r2, [pc, #416]	@ (8009d14 <UART_SetConfig+0x2d4>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d120      	bne.n	8009bba <UART_SetConfig+0x17a>
 8009b78:	4b64      	ldr	r3, [pc, #400]	@ (8009d0c <UART_SetConfig+0x2cc>)
 8009b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b82:	2b30      	cmp	r3, #48	@ 0x30
 8009b84:	d013      	beq.n	8009bae <UART_SetConfig+0x16e>
 8009b86:	2b30      	cmp	r3, #48	@ 0x30
 8009b88:	d814      	bhi.n	8009bb4 <UART_SetConfig+0x174>
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d009      	beq.n	8009ba2 <UART_SetConfig+0x162>
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	d810      	bhi.n	8009bb4 <UART_SetConfig+0x174>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <UART_SetConfig+0x15c>
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d006      	beq.n	8009ba8 <UART_SetConfig+0x168>
 8009b9a:	e00b      	b.n	8009bb4 <UART_SetConfig+0x174>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	77fb      	strb	r3, [r7, #31]
 8009ba0:	e0f2      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	77fb      	strb	r3, [r7, #31]
 8009ba6:	e0ef      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ba8:	2304      	movs	r3, #4
 8009baa:	77fb      	strb	r3, [r7, #31]
 8009bac:	e0ec      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bae:	2308      	movs	r3, #8
 8009bb0:	77fb      	strb	r3, [r7, #31]
 8009bb2:	e0e9      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bb4:	2310      	movs	r3, #16
 8009bb6:	77fb      	strb	r3, [r7, #31]
 8009bb8:	e0e6      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a56      	ldr	r2, [pc, #344]	@ (8009d18 <UART_SetConfig+0x2d8>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d120      	bne.n	8009c06 <UART_SetConfig+0x1c6>
 8009bc4:	4b51      	ldr	r3, [pc, #324]	@ (8009d0c <UART_SetConfig+0x2cc>)
 8009bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bd0:	d013      	beq.n	8009bfa <UART_SetConfig+0x1ba>
 8009bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bd4:	d814      	bhi.n	8009c00 <UART_SetConfig+0x1c0>
 8009bd6:	2b80      	cmp	r3, #128	@ 0x80
 8009bd8:	d009      	beq.n	8009bee <UART_SetConfig+0x1ae>
 8009bda:	2b80      	cmp	r3, #128	@ 0x80
 8009bdc:	d810      	bhi.n	8009c00 <UART_SetConfig+0x1c0>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <UART_SetConfig+0x1a8>
 8009be2:	2b40      	cmp	r3, #64	@ 0x40
 8009be4:	d006      	beq.n	8009bf4 <UART_SetConfig+0x1b4>
 8009be6:	e00b      	b.n	8009c00 <UART_SetConfig+0x1c0>
 8009be8:	2300      	movs	r3, #0
 8009bea:	77fb      	strb	r3, [r7, #31]
 8009bec:	e0cc      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bee:	2302      	movs	r3, #2
 8009bf0:	77fb      	strb	r3, [r7, #31]
 8009bf2:	e0c9      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	77fb      	strb	r3, [r7, #31]
 8009bf8:	e0c6      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bfa:	2308      	movs	r3, #8
 8009bfc:	77fb      	strb	r3, [r7, #31]
 8009bfe:	e0c3      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c00:	2310      	movs	r3, #16
 8009c02:	77fb      	strb	r3, [r7, #31]
 8009c04:	e0c0      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a44      	ldr	r2, [pc, #272]	@ (8009d1c <UART_SetConfig+0x2dc>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d125      	bne.n	8009c5c <UART_SetConfig+0x21c>
 8009c10:	4b3e      	ldr	r3, [pc, #248]	@ (8009d0c <UART_SetConfig+0x2cc>)
 8009c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c1e:	d017      	beq.n	8009c50 <UART_SetConfig+0x210>
 8009c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c24:	d817      	bhi.n	8009c56 <UART_SetConfig+0x216>
 8009c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c2a:	d00b      	beq.n	8009c44 <UART_SetConfig+0x204>
 8009c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c30:	d811      	bhi.n	8009c56 <UART_SetConfig+0x216>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <UART_SetConfig+0x1fe>
 8009c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c3a:	d006      	beq.n	8009c4a <UART_SetConfig+0x20a>
 8009c3c:	e00b      	b.n	8009c56 <UART_SetConfig+0x216>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	77fb      	strb	r3, [r7, #31]
 8009c42:	e0a1      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c44:	2302      	movs	r3, #2
 8009c46:	77fb      	strb	r3, [r7, #31]
 8009c48:	e09e      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	77fb      	strb	r3, [r7, #31]
 8009c4e:	e09b      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c50:	2308      	movs	r3, #8
 8009c52:	77fb      	strb	r3, [r7, #31]
 8009c54:	e098      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c56:	2310      	movs	r3, #16
 8009c58:	77fb      	strb	r3, [r7, #31]
 8009c5a:	e095      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a2f      	ldr	r2, [pc, #188]	@ (8009d20 <UART_SetConfig+0x2e0>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d125      	bne.n	8009cb2 <UART_SetConfig+0x272>
 8009c66:	4b29      	ldr	r3, [pc, #164]	@ (8009d0c <UART_SetConfig+0x2cc>)
 8009c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c74:	d017      	beq.n	8009ca6 <UART_SetConfig+0x266>
 8009c76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c7a:	d817      	bhi.n	8009cac <UART_SetConfig+0x26c>
 8009c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c80:	d00b      	beq.n	8009c9a <UART_SetConfig+0x25a>
 8009c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c86:	d811      	bhi.n	8009cac <UART_SetConfig+0x26c>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <UART_SetConfig+0x254>
 8009c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c90:	d006      	beq.n	8009ca0 <UART_SetConfig+0x260>
 8009c92:	e00b      	b.n	8009cac <UART_SetConfig+0x26c>
 8009c94:	2301      	movs	r3, #1
 8009c96:	77fb      	strb	r3, [r7, #31]
 8009c98:	e076      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	77fb      	strb	r3, [r7, #31]
 8009c9e:	e073      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	77fb      	strb	r3, [r7, #31]
 8009ca4:	e070      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	77fb      	strb	r3, [r7, #31]
 8009caa:	e06d      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cac:	2310      	movs	r3, #16
 8009cae:	77fb      	strb	r3, [r7, #31]
 8009cb0:	e06a      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8009d24 <UART_SetConfig+0x2e4>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d138      	bne.n	8009d2e <UART_SetConfig+0x2ee>
 8009cbc:	4b13      	ldr	r3, [pc, #76]	@ (8009d0c <UART_SetConfig+0x2cc>)
 8009cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cc2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009cc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cca:	d017      	beq.n	8009cfc <UART_SetConfig+0x2bc>
 8009ccc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cd0:	d82a      	bhi.n	8009d28 <UART_SetConfig+0x2e8>
 8009cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd6:	d00b      	beq.n	8009cf0 <UART_SetConfig+0x2b0>
 8009cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cdc:	d824      	bhi.n	8009d28 <UART_SetConfig+0x2e8>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <UART_SetConfig+0x2aa>
 8009ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce6:	d006      	beq.n	8009cf6 <UART_SetConfig+0x2b6>
 8009ce8:	e01e      	b.n	8009d28 <UART_SetConfig+0x2e8>
 8009cea:	2300      	movs	r3, #0
 8009cec:	77fb      	strb	r3, [r7, #31]
 8009cee:	e04b      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	77fb      	strb	r3, [r7, #31]
 8009cf4:	e048      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cf6:	2304      	movs	r3, #4
 8009cf8:	77fb      	strb	r3, [r7, #31]
 8009cfa:	e045      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	77fb      	strb	r3, [r7, #31]
 8009d00:	e042      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d02:	bf00      	nop
 8009d04:	efff69f3 	.word	0xefff69f3
 8009d08:	40011000 	.word	0x40011000
 8009d0c:	40023800 	.word	0x40023800
 8009d10:	40004400 	.word	0x40004400
 8009d14:	40004800 	.word	0x40004800
 8009d18:	40004c00 	.word	0x40004c00
 8009d1c:	40005000 	.word	0x40005000
 8009d20:	40011400 	.word	0x40011400
 8009d24:	40007800 	.word	0x40007800
 8009d28:	2310      	movs	r3, #16
 8009d2a:	77fb      	strb	r3, [r7, #31]
 8009d2c:	e02c      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a72      	ldr	r2, [pc, #456]	@ (8009efc <UART_SetConfig+0x4bc>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d125      	bne.n	8009d84 <UART_SetConfig+0x344>
 8009d38:	4b71      	ldr	r3, [pc, #452]	@ (8009f00 <UART_SetConfig+0x4c0>)
 8009d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009d42:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d46:	d017      	beq.n	8009d78 <UART_SetConfig+0x338>
 8009d48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d4c:	d817      	bhi.n	8009d7e <UART_SetConfig+0x33e>
 8009d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d52:	d00b      	beq.n	8009d6c <UART_SetConfig+0x32c>
 8009d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d58:	d811      	bhi.n	8009d7e <UART_SetConfig+0x33e>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <UART_SetConfig+0x326>
 8009d5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d62:	d006      	beq.n	8009d72 <UART_SetConfig+0x332>
 8009d64:	e00b      	b.n	8009d7e <UART_SetConfig+0x33e>
 8009d66:	2300      	movs	r3, #0
 8009d68:	77fb      	strb	r3, [r7, #31]
 8009d6a:	e00d      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	77fb      	strb	r3, [r7, #31]
 8009d70:	e00a      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d72:	2304      	movs	r3, #4
 8009d74:	77fb      	strb	r3, [r7, #31]
 8009d76:	e007      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	77fb      	strb	r3, [r7, #31]
 8009d7c:	e004      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d7e:	2310      	movs	r3, #16
 8009d80:	77fb      	strb	r3, [r7, #31]
 8009d82:	e001      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d84:	2310      	movs	r3, #16
 8009d86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d90:	d15b      	bne.n	8009e4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d92:	7ffb      	ldrb	r3, [r7, #31]
 8009d94:	2b08      	cmp	r3, #8
 8009d96:	d828      	bhi.n	8009dea <UART_SetConfig+0x3aa>
 8009d98:	a201      	add	r2, pc, #4	@ (adr r2, 8009da0 <UART_SetConfig+0x360>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009dc5 	.word	0x08009dc5
 8009da4:	08009dcd 	.word	0x08009dcd
 8009da8:	08009dd5 	.word	0x08009dd5
 8009dac:	08009deb 	.word	0x08009deb
 8009db0:	08009ddb 	.word	0x08009ddb
 8009db4:	08009deb 	.word	0x08009deb
 8009db8:	08009deb 	.word	0x08009deb
 8009dbc:	08009deb 	.word	0x08009deb
 8009dc0:	08009de3 	.word	0x08009de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dc4:	f7fc fab6 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 8009dc8:	61b8      	str	r0, [r7, #24]
        break;
 8009dca:	e013      	b.n	8009df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dcc:	f7fc fac6 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 8009dd0:	61b8      	str	r0, [r7, #24]
        break;
 8009dd2:	e00f      	b.n	8009df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8009f04 <UART_SetConfig+0x4c4>)
 8009dd6:	61bb      	str	r3, [r7, #24]
        break;
 8009dd8:	e00c      	b.n	8009df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dda:	f7fc f999 	bl	8006110 <HAL_RCC_GetSysClockFreq>
 8009dde:	61b8      	str	r0, [r7, #24]
        break;
 8009de0:	e008      	b.n	8009df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009de6:	61bb      	str	r3, [r7, #24]
        break;
 8009de8:	e004      	b.n	8009df4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	77bb      	strb	r3, [r7, #30]
        break;
 8009df2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d074      	beq.n	8009ee4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	005a      	lsls	r2, r3, #1
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	085b      	lsrs	r3, r3, #1
 8009e04:	441a      	add	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	2b0f      	cmp	r3, #15
 8009e14:	d916      	bls.n	8009e44 <UART_SetConfig+0x404>
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e1c:	d212      	bcs.n	8009e44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	f023 030f 	bic.w	r3, r3, #15
 8009e26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f003 0307 	and.w	r3, r3, #7
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	89fb      	ldrh	r3, [r7, #14]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	89fa      	ldrh	r2, [r7, #14]
 8009e40:	60da      	str	r2, [r3, #12]
 8009e42:	e04f      	b.n	8009ee4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	77bb      	strb	r3, [r7, #30]
 8009e48:	e04c      	b.n	8009ee4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e4a:	7ffb      	ldrb	r3, [r7, #31]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d828      	bhi.n	8009ea2 <UART_SetConfig+0x462>
 8009e50:	a201      	add	r2, pc, #4	@ (adr r2, 8009e58 <UART_SetConfig+0x418>)
 8009e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e56:	bf00      	nop
 8009e58:	08009e7d 	.word	0x08009e7d
 8009e5c:	08009e85 	.word	0x08009e85
 8009e60:	08009e8d 	.word	0x08009e8d
 8009e64:	08009ea3 	.word	0x08009ea3
 8009e68:	08009e93 	.word	0x08009e93
 8009e6c:	08009ea3 	.word	0x08009ea3
 8009e70:	08009ea3 	.word	0x08009ea3
 8009e74:	08009ea3 	.word	0x08009ea3
 8009e78:	08009e9b 	.word	0x08009e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e7c:	f7fc fa5a 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 8009e80:	61b8      	str	r0, [r7, #24]
        break;
 8009e82:	e013      	b.n	8009eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e84:	f7fc fa6a 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 8009e88:	61b8      	str	r0, [r7, #24]
        break;
 8009e8a:	e00f      	b.n	8009eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009f04 <UART_SetConfig+0x4c4>)
 8009e8e:	61bb      	str	r3, [r7, #24]
        break;
 8009e90:	e00c      	b.n	8009eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e92:	f7fc f93d 	bl	8006110 <HAL_RCC_GetSysClockFreq>
 8009e96:	61b8      	str	r0, [r7, #24]
        break;
 8009e98:	e008      	b.n	8009eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e9e:	61bb      	str	r3, [r7, #24]
        break;
 8009ea0:	e004      	b.n	8009eac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8009eaa:	bf00      	nop
    }

    if (pclk != 0U)
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d018      	beq.n	8009ee4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	085a      	lsrs	r2, r3, #1
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	441a      	add	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b0f      	cmp	r3, #15
 8009eca:	d909      	bls.n	8009ee0 <UART_SetConfig+0x4a0>
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ed2:	d205      	bcs.n	8009ee0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60da      	str	r2, [r3, #12]
 8009ede:	e001      	b.n	8009ee4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009ef0:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	40007c00 	.word	0x40007c00
 8009f00:	40023800 	.word	0x40023800
 8009f04:	00f42400 	.word	0x00f42400

08009f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00a      	beq.n	8009f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f58:	f003 0302 	and.w	r3, r3, #2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00a      	beq.n	8009f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00a      	beq.n	8009f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9c:	f003 0310 	and.w	r3, r3, #16
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00a      	beq.n	8009fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbe:	f003 0320 	and.w	r3, r3, #32
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01a      	beq.n	800a01e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a006:	d10a      	bne.n	800a01e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	430a      	orrs	r2, r1
 800a01c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	605a      	str	r2, [r3, #4]
  }
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b08c      	sub	sp, #48	@ 0x30
 800a050:	af02      	add	r7, sp, #8
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a05c:	f7f9 ff86 	bl	8003f6c <HAL_GetTick>
 800a060:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0308 	and.w	r3, r3, #8
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	d12e      	bne.n	800a0ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a070:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	2200      	movs	r2, #0
 800a07a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f83b 	bl	800a0fa <UART_WaitOnFlagUntilTimeout>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d021      	beq.n	800a0ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	e853 3f00 	ldrex	r3, [r3]
 800a096:	60fb      	str	r3, [r7, #12]
   return(result);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a09e:	623b      	str	r3, [r7, #32]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	61fb      	str	r3, [r7, #28]
 800a0aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ac:	69b9      	ldr	r1, [r7, #24]
 800a0ae:	69fa      	ldr	r2, [r7, #28]
 800a0b0:	e841 2300 	strex	r3, r2, [r1]
 800a0b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1e6      	bne.n	800a08a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e011      	b.n	800a0f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3728      	adds	r7, #40	@ 0x28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	603b      	str	r3, [r7, #0]
 800a106:	4613      	mov	r3, r2
 800a108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a10a:	e04f      	b.n	800a1ac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a112:	d04b      	beq.n	800a1ac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a114:	f7f9 ff2a 	bl	8003f6c <HAL_GetTick>
 800a118:	4602      	mov	r2, r0
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	429a      	cmp	r2, r3
 800a122:	d302      	bcc.n	800a12a <UART_WaitOnFlagUntilTimeout+0x30>
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e04e      	b.n	800a1cc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d037      	beq.n	800a1ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b80      	cmp	r3, #128	@ 0x80
 800a140:	d034      	beq.n	800a1ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b40      	cmp	r3, #64	@ 0x40
 800a146:	d031      	beq.n	800a1ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b08      	cmp	r3, #8
 800a154:	d110      	bne.n	800a178 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2208      	movs	r2, #8
 800a15c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f8fe 	bl	800a360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2208      	movs	r2, #8
 800a168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e029      	b.n	800a1cc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a186:	d111      	bne.n	800a1ac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a190:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 f8e4 	bl	800a360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e00f      	b.n	800a1cc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69da      	ldr	r2, [r3, #28]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	bf0c      	ite	eq
 800a1bc:	2301      	moveq	r3, #1
 800a1be:	2300      	movne	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d0a0      	beq.n	800a10c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b096      	sub	sp, #88	@ 0x58
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	88fa      	ldrh	r2, [r7, #6]
 800a1ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2222      	movs	r2, #34	@ 0x22
 800a1fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a204:	2b00      	cmp	r3, #0
 800a206:	d028      	beq.n	800a25a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a20c:	4a3e      	ldr	r2, [pc, #248]	@ (800a308 <UART_Start_Receive_DMA+0x134>)
 800a20e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a214:	4a3d      	ldr	r2, [pc, #244]	@ (800a30c <UART_Start_Receive_DMA+0x138>)
 800a216:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a21c:	4a3c      	ldr	r2, [pc, #240]	@ (800a310 <UART_Start_Receive_DMA+0x13c>)
 800a21e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a224:	2200      	movs	r2, #0
 800a226:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3324      	adds	r3, #36	@ 0x24
 800a232:	4619      	mov	r1, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a238:	461a      	mov	r2, r3
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	f7fa f886 	bl	800434c <HAL_DMA_Start_IT>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d009      	beq.n	800a25a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2210      	movs	r2, #16
 800a24a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2220      	movs	r2, #32
 800a252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e051      	b.n	800a2fe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d018      	beq.n	800a294 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a26a:	e853 3f00 	ldrex	r3, [r3]
 800a26e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a276:	657b      	str	r3, [r7, #84]	@ 0x54
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	461a      	mov	r2, r3
 800a27e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a280:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a282:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a288:	e841 2300 	strex	r3, r2, [r1]
 800a28c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a28e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e6      	bne.n	800a262 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3308      	adds	r3, #8
 800a29a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	f043 0301 	orr.w	r3, r3, #1
 800a2aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2b4:	637a      	str	r2, [r7, #52]	@ 0x34
 800a2b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e5      	bne.n	800a294 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2e8:	623a      	str	r2, [r7, #32]
 800a2ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ec:	69f9      	ldr	r1, [r7, #28]
 800a2ee:	6a3a      	ldr	r2, [r7, #32]
 800a2f0:	e841 2300 	strex	r3, r2, [r1]
 800a2f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e5      	bne.n	800a2c8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3758      	adds	r7, #88	@ 0x58
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	0800a429 	.word	0x0800a429
 800a30c:	0800a551 	.word	0x0800a551
 800a310:	0800a58f 	.word	0x0800a58f

0800a314 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a314:	b480      	push	{r7}
 800a316:	b089      	sub	sp, #36	@ 0x24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	60bb      	str	r3, [r7, #8]
   return(result);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a330:	61fb      	str	r3, [r7, #28]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	61bb      	str	r3, [r7, #24]
 800a33c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	6979      	ldr	r1, [r7, #20]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	613b      	str	r3, [r7, #16]
   return(result);
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e6      	bne.n	800a31c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2220      	movs	r2, #32
 800a352:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a354:	bf00      	nop
 800a356:	3724      	adds	r7, #36	@ 0x24
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b095      	sub	sp, #84	@ 0x54
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a370:	e853 3f00 	ldrex	r3, [r3]
 800a374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a37c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a386:	643b      	str	r3, [r7, #64]	@ 0x40
 800a388:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a38c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a38e:	e841 2300 	strex	r3, r2, [r1]
 800a392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1e6      	bne.n	800a368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3308      	adds	r3, #8
 800a3a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	f023 0301 	bic.w	r3, r3, #1
 800a3b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3c2:	e841 2300 	strex	r3, r2, [r1]
 800a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1e5      	bne.n	800a39a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d118      	bne.n	800a408 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	e853 3f00 	ldrex	r3, [r3]
 800a3e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f023 0310 	bic.w	r3, r3, #16
 800a3ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f8:	6979      	ldr	r1, [r7, #20]
 800a3fa:	69ba      	ldr	r2, [r7, #24]
 800a3fc:	e841 2300 	strex	r3, r2, [r1]
 800a400:	613b      	str	r3, [r7, #16]
   return(result);
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1e6      	bne.n	800a3d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2220      	movs	r2, #32
 800a40c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a41c:	bf00      	nop
 800a41e:	3754      	adds	r7, #84	@ 0x54
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b09c      	sub	sp, #112	@ 0x70
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a434:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43e:	d071      	beq.n	800a524 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a442:	2200      	movs	r2, #0
 800a444:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a45c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a45e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a466:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a468:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a46c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e6      	bne.n	800a448 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a47a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3308      	adds	r3, #8
 800a480:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48c:	f023 0301 	bic.w	r3, r3, #1
 800a490:	667b      	str	r3, [r7, #100]	@ 0x64
 800a492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3308      	adds	r3, #8
 800a498:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a49a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a49c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4a2:	e841 2300 	strex	r3, r2, [r1]
 800a4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e5      	bne.n	800a47a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e5      	bne.n	800a4ae <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d118      	bne.n	800a524 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f023 0310 	bic.w	r3, r3, #16
 800a506:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	461a      	mov	r2, r3
 800a50e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	69b9      	ldr	r1, [r7, #24]
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	617b      	str	r3, [r7, #20]
   return(result);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e6      	bne.n	800a4f2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a526:	2200      	movs	r2, #0
 800a528:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a52a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a52c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d107      	bne.n	800a542 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a534:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a538:	4619      	mov	r1, r3
 800a53a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a53c:	f7ff fa74 	bl	8009a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a540:	e002      	b.n	800a548 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a542:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a544:	f7f7 faa4 	bl	8001a90 <HAL_UART_RxCpltCallback>
}
 800a548:	bf00      	nop
 800a54a:	3770      	adds	r7, #112	@ 0x70
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d109      	bne.n	800a580 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a572:	085b      	lsrs	r3, r3, #1
 800a574:	b29b      	uxth	r3, r3
 800a576:	4619      	mov	r1, r3
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f7ff fa55 	bl	8009a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a57e:	e002      	b.n	800a586 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f7ff fa3d 	bl	8009a00 <HAL_UART_RxHalfCpltCallback>
}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a59a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b4:	2b80      	cmp	r3, #128	@ 0x80
 800a5b6:	d109      	bne.n	800a5cc <UART_DMAError+0x3e>
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2b21      	cmp	r3, #33	@ 0x21
 800a5bc:	d106      	bne.n	800a5cc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a5c6:	6978      	ldr	r0, [r7, #20]
 800a5c8:	f7ff fea4 	bl	800a314 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d6:	2b40      	cmp	r3, #64	@ 0x40
 800a5d8:	d109      	bne.n	800a5ee <UART_DMAError+0x60>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b22      	cmp	r3, #34	@ 0x22
 800a5de:	d106      	bne.n	800a5ee <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a5e8:	6978      	ldr	r0, [r7, #20]
 800a5ea:	f7ff feb9 	bl	800a360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5f4:	f043 0210 	orr.w	r2, r3, #16
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5fe:	6978      	ldr	r0, [r7, #20]
 800a600:	f7ff fa08 	bl	8009a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a604:	bf00      	nop
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a618:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7ff f9f2 	bl	8009a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a654:	61fb      	str	r3, [r7, #28]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	61bb      	str	r3, [r7, #24]
 800a660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	6979      	ldr	r1, [r7, #20]
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	613b      	str	r3, [r7, #16]
   return(result);
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e6      	bne.n	800a640 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2220      	movs	r2, #32
 800a676:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff f9b4 	bl	80099ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a684:	bf00      	nop
 800a686:	3720      	adds	r7, #32
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a68c:	b084      	sub	sp, #16
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	f107 001c 	add.w	r0, r7, #28
 800a69a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a69e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d121      	bne.n	800a6ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68da      	ldr	r2, [r3, #12]
 800a6b6:	4b21      	ldr	r3, [pc, #132]	@ (800a73c <USB_CoreInit+0xb0>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a6ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d105      	bne.n	800a6de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fa92 	bl	800ac08 <USB_CoreReset>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73fb      	strb	r3, [r7, #15]
 800a6e8:	e010      	b.n	800a70c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fa86 	bl	800ac08 <USB_CoreReset>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a704:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a70c:	7fbb      	ldrb	r3, [r7, #30]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d10b      	bne.n	800a72a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f043 0206 	orr.w	r2, r3, #6
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f043 0220 	orr.w	r2, r3, #32
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a736:	b004      	add	sp, #16
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	ffbdffbf 	.word	0xffbdffbf

0800a740 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f023 0201 	bic.w	r2, r3, #1
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b084      	sub	sp, #16
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	460b      	mov	r3, r1
 800a76c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d115      	bne.n	800a7b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a790:	200a      	movs	r0, #10
 800a792:	f7f9 fbf7 	bl	8003f84 <HAL_Delay>
      ms += 10U;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	330a      	adds	r3, #10
 800a79a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fa25 	bl	800abec <USB_GetMode>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d01e      	beq.n	800a7e6 <USB_SetCurrentMode+0x84>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2bc7      	cmp	r3, #199	@ 0xc7
 800a7ac:	d9f0      	bls.n	800a790 <USB_SetCurrentMode+0x2e>
 800a7ae:	e01a      	b.n	800a7e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d115      	bne.n	800a7e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a7c2:	200a      	movs	r0, #10
 800a7c4:	f7f9 fbde 	bl	8003f84 <HAL_Delay>
      ms += 10U;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	330a      	adds	r3, #10
 800a7cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fa0c 	bl	800abec <USB_GetMode>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d005      	beq.n	800a7e6 <USB_SetCurrentMode+0x84>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2bc7      	cmp	r3, #199	@ 0xc7
 800a7de:	d9f0      	bls.n	800a7c2 <USB_SetCurrentMode+0x60>
 800a7e0:	e001      	b.n	800a7e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e005      	b.n	800a7f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2bc8      	cmp	r3, #200	@ 0xc8
 800a7ea:	d101      	bne.n	800a7f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e000      	b.n	800a7f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a80a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a816:	2300      	movs	r3, #0
 800a818:	613b      	str	r3, [r7, #16]
 800a81a:	e009      	b.n	800a830 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	3340      	adds	r3, #64	@ 0x40
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4413      	add	r3, r2
 800a826:	2200      	movs	r2, #0
 800a828:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	3301      	adds	r3, #1
 800a82e:	613b      	str	r3, [r7, #16]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2b0e      	cmp	r3, #14
 800a834:	d9f2      	bls.n	800a81c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a836:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d11c      	bne.n	800a878 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a84c:	f043 0302 	orr.w	r3, r3, #2
 800a850:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a856:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	e005      	b.n	800a884 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a88a:	461a      	mov	r2, r3
 800a88c:	2300      	movs	r3, #0
 800a88e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a890:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a894:	2b01      	cmp	r3, #1
 800a896:	d10d      	bne.n	800a8b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d104      	bne.n	800a8aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f968 	bl	800ab78 <USB_SetDevSpeed>
 800a8a8:	e008      	b.n	800a8bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8aa:	2101      	movs	r1, #1
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f963 	bl	800ab78 <USB_SetDevSpeed>
 800a8b2:	e003      	b.n	800a8bc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a8b4:	2103      	movs	r1, #3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f95e 	bl	800ab78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8bc:	2110      	movs	r1, #16
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f8fa 	bl	800aab8 <USB_FlushTxFifo>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f924 	bl	800ab1c <USB_FlushRxFifo>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	2300      	movs	r3, #0
 800a900:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a902:	2300      	movs	r3, #0
 800a904:	613b      	str	r3, [r7, #16]
 800a906:	e043      	b.n	800a990 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a91a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a91e:	d118      	bne.n	800a952 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10a      	bne.n	800a93c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	015a      	lsls	r2, r3, #5
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	4413      	add	r3, r2
 800a92e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a932:	461a      	mov	r2, r3
 800a934:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	e013      	b.n	800a964 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a948:	461a      	mov	r2, r3
 800a94a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	e008      	b.n	800a964 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	015a      	lsls	r2, r3, #5
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4413      	add	r3, r2
 800a95a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a95e:	461a      	mov	r2, r3
 800a960:	2300      	movs	r3, #0
 800a962:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	015a      	lsls	r2, r3, #5
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a970:	461a      	mov	r2, r3
 800a972:	2300      	movs	r3, #0
 800a974:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	015a      	lsls	r2, r3, #5
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4413      	add	r3, r2
 800a97e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a982:	461a      	mov	r2, r3
 800a984:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a988:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	3301      	adds	r3, #1
 800a98e:	613b      	str	r3, [r7, #16]
 800a990:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a994:	461a      	mov	r2, r3
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	4293      	cmp	r3, r2
 800a99a:	d3b5      	bcc.n	800a908 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a99c:	2300      	movs	r3, #0
 800a99e:	613b      	str	r3, [r7, #16]
 800a9a0:	e043      	b.n	800aa2a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9b8:	d118      	bne.n	800a9ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	e013      	b.n	800a9fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	e008      	b.n	800a9fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	015a      	lsls	r2, r3, #5
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4413      	add	r3, r2
 800aa06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aa22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	3301      	adds	r3, #1
 800aa28:	613b      	str	r3, [r7, #16]
 800aa2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa2e:	461a      	mov	r2, r3
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d3b5      	bcc.n	800a9a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800aa56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d105      	bne.n	800aa6c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	f043 0210 	orr.w	r2, r3, #16
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699a      	ldr	r2, [r3, #24]
 800aa70:	4b0f      	ldr	r3, [pc, #60]	@ (800aab0 <USB_DevInit+0x2b4>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	f043 0208 	orr.w	r2, r3, #8
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d105      	bne.n	800aaa0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	699a      	ldr	r2, [r3, #24]
 800aa98:	4b06      	ldr	r3, [pc, #24]	@ (800aab4 <USB_DevInit+0x2b8>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aaac:	b004      	add	sp, #16
 800aaae:	4770      	bx	lr
 800aab0:	803c3800 	.word	0x803c3800
 800aab4:	40000004 	.word	0x40000004

0800aab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aad2:	d901      	bls.n	800aad8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e01b      	b.n	800ab10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	daf2      	bge.n	800aac6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	019b      	lsls	r3, r3, #6
 800aae8:	f043 0220 	orr.w	r2, r3, #32
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aafc:	d901      	bls.n	800ab02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e006      	b.n	800ab10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	f003 0320 	and.w	r3, r3, #32
 800ab0a:	2b20      	cmp	r3, #32
 800ab0c:	d0f0      	beq.n	800aaf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab34:	d901      	bls.n	800ab3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e018      	b.n	800ab6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	daf2      	bge.n	800ab28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2210      	movs	r2, #16
 800ab4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab58:	d901      	bls.n	800ab5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	e006      	b.n	800ab6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	f003 0310 	and.w	r3, r3, #16
 800ab66:	2b10      	cmp	r3, #16
 800ab68:	d0f0      	beq.n	800ab4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	68f9      	ldr	r1, [r7, #12]
 800ab94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3714      	adds	r7, #20
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800abaa:	b480      	push	{r7}
 800abac:	b085      	sub	sp, #20
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abc4:	f023 0303 	bic.w	r3, r3, #3
 800abc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abd8:	f043 0302 	orr.w	r3, r3, #2
 800abdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	f003 0301 	and.w	r3, r3, #1
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	3301      	adds	r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac20:	d901      	bls.n	800ac26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e01b      	b.n	800ac5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	daf2      	bge.n	800ac14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f043 0201 	orr.w	r2, r3, #1
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3301      	adds	r3, #1
 800ac42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac4a:	d901      	bls.n	800ac50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e006      	b.n	800ac5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	f003 0301 	and.w	r3, r3, #1
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d0f0      	beq.n	800ac3e <USB_CoreReset+0x36>

  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
	...

0800ac6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ac70:	4904      	ldr	r1, [pc, #16]	@ (800ac84 <MX_FATFS_Init+0x18>)
 800ac72:	4805      	ldr	r0, [pc, #20]	@ (800ac88 <MX_FATFS_Init+0x1c>)
 800ac74:	f000 fd94 	bl	800b7a0 <FATFS_LinkDriver>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	4b03      	ldr	r3, [pc, #12]	@ (800ac8c <MX_FATFS_Init+0x20>)
 800ac7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ac80:	bf00      	nop
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20000f4c 	.word	0x20000f4c
 800ac88:	20000058 	.word	0x20000058
 800ac8c:	20000f48 	.word	0x20000f48

0800ac90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 f9d7 	bl	800b050 <USER_SPI_initialize>
 800aca2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fabd 	bl	800b238 <USER_SPI_status>
 800acbe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	603b      	str	r3, [r7, #0]
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800acd8:	7bf8      	ldrb	r0, [r7, #15]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	f000 fac0 	bl	800b264 <USER_SPI_read>
 800ace4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
 800acfa:	4603      	mov	r3, r0
 800acfc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800acfe:	7bf8      	ldrb	r0, [r7, #15]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	68b9      	ldr	r1, [r7, #8]
 800ad06:	f000 fb13 	bl	800b330 <USER_SPI_write>
 800ad0a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	603a      	str	r2, [r7, #0]
 800ad1e:	71fb      	strb	r3, [r7, #7]
 800ad20:	460b      	mov	r3, r1
 800ad22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800ad24:	79b9      	ldrb	r1, [r7, #6]
 800ad26:	79fb      	ldrb	r3, [r7, #7]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 fb7c 	bl	800b428 <USER_SPI_ioctl>
 800ad30:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800ad44:	f7f9 f912 	bl	8003f6c <HAL_GetTick>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	4a04      	ldr	r2, [pc, #16]	@ (800ad5c <SPI_Timer_On+0x20>)
 800ad4c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800ad4e:	4a04      	ldr	r2, [pc, #16]	@ (800ad60 <SPI_Timer_On+0x24>)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6013      	str	r3, [r2, #0]
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20000f58 	.word	0x20000f58
 800ad60:	20000f5c 	.word	0x20000f5c

0800ad64 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800ad68:	f7f9 f900 	bl	8003f6c <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	4b06      	ldr	r3, [pc, #24]	@ (800ad88 <SPI_Timer_Status+0x24>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	1ad2      	subs	r2, r2, r3
 800ad74:	4b05      	ldr	r3, [pc, #20]	@ (800ad8c <SPI_Timer_Status+0x28>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	bf34      	ite	cc
 800ad7c:	2301      	movcc	r3, #1
 800ad7e:	2300      	movcs	r3, #0
 800ad80:	b2db      	uxtb	r3, r3
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20000f58 	.word	0x20000f58
 800ad8c:	20000f5c 	.word	0x20000f5c

0800ad90 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af02      	add	r7, sp, #8
 800ad96:	4603      	mov	r3, r0
 800ad98:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800ad9a:	f107 020f 	add.w	r2, r7, #15
 800ad9e:	1df9      	adds	r1, r7, #7
 800ada0:	2332      	movs	r3, #50	@ 0x32
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	2301      	movs	r3, #1
 800ada6:	4804      	ldr	r0, [pc, #16]	@ (800adb8 <xchg_spi+0x28>)
 800ada8:	f7fc f8fc 	bl	8006fa4 <HAL_SPI_TransmitReceive>
    return rxDat;
 800adac:	7bfb      	ldrb	r3, [r7, #15]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20000178 	.word	0x20000178

0800adbc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800adbc:	b590      	push	{r4, r7, lr}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800adc6:	2300      	movs	r3, #0
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	e00a      	b.n	800ade2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	18d4      	adds	r4, r2, r3
 800add2:	20ff      	movs	r0, #255	@ 0xff
 800add4:	f7ff ffdc 	bl	800ad90 <xchg_spi>
 800add8:	4603      	mov	r3, r0
 800adda:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3301      	adds	r3, #1
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d3f0      	bcc.n	800adcc <rcvr_spi_multi+0x10>
	}
}
 800adea:	bf00      	nop
 800adec:	bf00      	nop
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd90      	pop	{r4, r7, pc}

0800adf4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	f04f 33ff 	mov.w	r3, #4294967295
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	4803      	ldr	r0, [pc, #12]	@ (800ae18 <xmit_spi_multi+0x24>)
 800ae0a:	f7fb ff56 	bl	8006cba <HAL_SPI_Transmit>
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20000178 	.word	0x20000178

0800ae1c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800ae24:	f7f9 f8a2 	bl	8003f6c <HAL_GetTick>
 800ae28:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800ae2e:	20ff      	movs	r0, #255	@ 0xff
 800ae30:	f7ff ffae 	bl	800ad90 <xchg_spi>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	2bff      	cmp	r3, #255	@ 0xff
 800ae3c:	d007      	beq.n	800ae4e <wait_ready+0x32>
 800ae3e:	f7f9 f895 	bl	8003f6c <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d8ef      	bhi.n	800ae2e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	2bff      	cmp	r3, #255	@ 0xff
 800ae52:	bf0c      	ite	eq
 800ae54:	2301      	moveq	r3, #1
 800ae56:	2300      	movne	r3, #0
 800ae58:	b2db      	uxtb	r3, r3
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ae6e:	4804      	ldr	r0, [pc, #16]	@ (800ae80 <despiselect+0x1c>)
 800ae70:	f7f9 ff8c 	bl	8004d8c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800ae74:	20ff      	movs	r0, #255	@ 0xff
 800ae76:	f7ff ff8b 	bl	800ad90 <xchg_spi>

}
 800ae7a:	bf00      	nop
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	40020400 	.word	0x40020400

0800ae84 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ae8e:	480a      	ldr	r0, [pc, #40]	@ (800aeb8 <spiselect+0x34>)
 800ae90:	f7f9 ff7c 	bl	8004d8c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800ae94:	20ff      	movs	r0, #255	@ 0xff
 800ae96:	f7ff ff7b 	bl	800ad90 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800ae9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ae9e:	f7ff ffbd 	bl	800ae1c <wait_ready>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <spiselect+0x28>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e002      	b.n	800aeb2 <spiselect+0x2e>

	despiselect();
 800aeac:	f7ff ffda 	bl	800ae64 <despiselect>
	return 0;	/* Timeout */
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	40020400 	.word	0x40020400

0800aebc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800aec6:	20c8      	movs	r0, #200	@ 0xc8
 800aec8:	f7ff ff38 	bl	800ad3c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800aecc:	20ff      	movs	r0, #255	@ 0xff
 800aece:	f7ff ff5f 	bl	800ad90 <xchg_spi>
 800aed2:	4603      	mov	r3, r0
 800aed4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
 800aed8:	2bff      	cmp	r3, #255	@ 0xff
 800aeda:	d104      	bne.n	800aee6 <rcvr_datablock+0x2a>
 800aedc:	f7ff ff42 	bl	800ad64 <SPI_Timer_Status>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1f2      	bne.n	800aecc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800aee6:	7bfb      	ldrb	r3, [r7, #15]
 800aee8:	2bfe      	cmp	r3, #254	@ 0xfe
 800aeea:	d001      	beq.n	800aef0 <rcvr_datablock+0x34>
 800aeec:	2300      	movs	r3, #0
 800aeee:	e00a      	b.n	800af06 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff ff62 	bl	800adbc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800aef8:	20ff      	movs	r0, #255	@ 0xff
 800aefa:	f7ff ff49 	bl	800ad90 <xchg_spi>
 800aefe:	20ff      	movs	r0, #255	@ 0xff
 800af00:	f7ff ff46 	bl	800ad90 <xchg_spi>

	return 1;						/* Function succeeded */
 800af04:	2301      	movs	r3, #1
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800af1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800af1e:	f7ff ff7d 	bl	800ae1c <wait_ready>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <xmit_datablock+0x1e>
 800af28:	2300      	movs	r3, #0
 800af2a:	e01e      	b.n	800af6a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800af2c:	78fb      	ldrb	r3, [r7, #3]
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff ff2e 	bl	800ad90 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	2bfd      	cmp	r3, #253	@ 0xfd
 800af38:	d016      	beq.n	800af68 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800af3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff ff58 	bl	800adf4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800af44:	20ff      	movs	r0, #255	@ 0xff
 800af46:	f7ff ff23 	bl	800ad90 <xchg_spi>
 800af4a:	20ff      	movs	r0, #255	@ 0xff
 800af4c:	f7ff ff20 	bl	800ad90 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800af50:	20ff      	movs	r0, #255	@ 0xff
 800af52:	f7ff ff1d 	bl	800ad90 <xchg_spi>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	f003 031f 	and.w	r3, r3, #31
 800af60:	2b05      	cmp	r3, #5
 800af62:	d001      	beq.n	800af68 <xmit_datablock+0x5a>
 800af64:	2300      	movs	r3, #0
 800af66:	e000      	b.n	800af6a <xmit_datablock+0x5c>
	}
	return 1;
 800af68:	2301      	movs	r3, #1
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	4603      	mov	r3, r0
 800af7a:	6039      	str	r1, [r7, #0]
 800af7c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800af7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af82:	2b00      	cmp	r3, #0
 800af84:	da0e      	bge.n	800afa4 <send_cmd+0x32>
		cmd &= 0x7F;
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af8c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800af8e:	2100      	movs	r1, #0
 800af90:	2037      	movs	r0, #55	@ 0x37
 800af92:	f7ff ffee 	bl	800af72 <send_cmd>
 800af96:	4603      	mov	r3, r0
 800af98:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d901      	bls.n	800afa4 <send_cmd+0x32>
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	e051      	b.n	800b048 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	2b0c      	cmp	r3, #12
 800afa8:	d008      	beq.n	800afbc <send_cmd+0x4a>
		despiselect();
 800afaa:	f7ff ff5b 	bl	800ae64 <despiselect>
		if (!spiselect()) return 0xFF;
 800afae:	f7ff ff69 	bl	800ae84 <spiselect>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <send_cmd+0x4a>
 800afb8:	23ff      	movs	r3, #255	@ 0xff
 800afba:	e045      	b.n	800b048 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff fee3 	bl	800ad90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	0e1b      	lsrs	r3, r3, #24
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff fedd 	bl	800ad90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	0c1b      	lsrs	r3, r3, #16
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff fed7 	bl	800ad90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	0a1b      	lsrs	r3, r3, #8
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff fed1 	bl	800ad90 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7ff fecc 	bl	800ad90 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <send_cmd+0x94>
 800b002:	2395      	movs	r3, #149	@ 0x95
 800b004:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d101      	bne.n	800b010 <send_cmd+0x9e>
 800b00c:	2387      	movs	r3, #135	@ 0x87
 800b00e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	4618      	mov	r0, r3
 800b014:	f7ff febc 	bl	800ad90 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	2b0c      	cmp	r3, #12
 800b01c:	d102      	bne.n	800b024 <send_cmd+0xb2>
 800b01e:	20ff      	movs	r0, #255	@ 0xff
 800b020:	f7ff feb6 	bl	800ad90 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b024:	230a      	movs	r3, #10
 800b026:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b028:	20ff      	movs	r0, #255	@ 0xff
 800b02a:	f7ff feb1 	bl	800ad90 <xchg_spi>
 800b02e:	4603      	mov	r3, r0
 800b030:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b036:	2b00      	cmp	r3, #0
 800b038:	da05      	bge.n	800b046 <send_cmd+0xd4>
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	73fb      	strb	r3, [r7, #15]
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1f0      	bne.n	800b028 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b046:	7bbb      	ldrb	r3, [r7, #14]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b050:	b590      	push	{r4, r7, lr}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <USER_SPI_initialize+0x14>
 800b060:	2301      	movs	r3, #1
 800b062:	e0dc      	b.n	800b21e <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b064:	4b70      	ldr	r3, [pc, #448]	@ (800b228 <USER_SPI_initialize+0x1d8>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	f003 0302 	and.w	r3, r3, #2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <USER_SPI_initialize+0x2a>
 800b072:	4b6d      	ldr	r3, [pc, #436]	@ (800b228 <USER_SPI_initialize+0x1d8>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	b2db      	uxtb	r3, r3
 800b078:	e0d1      	b.n	800b21e <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800b07a:	4b6b      	ldr	r3, [pc, #428]	@ (800b228 <USER_SPI_initialize+0x1d8>)
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	461a      	mov	r2, r3
 800b082:	4b6a      	ldr	r3, [pc, #424]	@ (800b22c <USER_SPI_initialize+0x1dc>)
 800b084:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800b086:	4b6a      	ldr	r3, [pc, #424]	@ (800b230 <USER_SPI_initialize+0x1e0>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b090:	4b67      	ldr	r3, [pc, #412]	@ (800b230 <USER_SPI_initialize+0x1e0>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800b098:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b09a:	230a      	movs	r3, #10
 800b09c:	73fb      	strb	r3, [r7, #15]
 800b09e:	e005      	b.n	800b0ac <USER_SPI_initialize+0x5c>
 800b0a0:	20ff      	movs	r0, #255	@ 0xff
 800b0a2:	f7ff fe75 	bl	800ad90 <xchg_spi>
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	73fb      	strb	r3, [r7, #15]
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1f6      	bne.n	800b0a0 <USER_SPI_initialize+0x50>

	ty = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	f7ff ff5a 	bl	800af72 <send_cmd>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	f040 808b 	bne.w	800b1dc <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b0c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b0ca:	f7ff fe37 	bl	800ad3c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b0ce:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b0d2:	2008      	movs	r0, #8
 800b0d4:	f7ff ff4d 	bl	800af72 <send_cmd>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d151      	bne.n	800b182 <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
 800b0e2:	e00d      	b.n	800b100 <USER_SPI_initialize+0xb0>
 800b0e4:	7bfc      	ldrb	r4, [r7, #15]
 800b0e6:	20ff      	movs	r0, #255	@ 0xff
 800b0e8:	f7ff fe52 	bl	800ad90 <xchg_spi>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f104 0310 	add.w	r3, r4, #16
 800b0f4:	443b      	add	r3, r7
 800b0f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	73fb      	strb	r3, [r7, #15]
 800b100:	7bfb      	ldrb	r3, [r7, #15]
 800b102:	2b03      	cmp	r3, #3
 800b104:	d9ee      	bls.n	800b0e4 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b106:	7abb      	ldrb	r3, [r7, #10]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d167      	bne.n	800b1dc <USER_SPI_initialize+0x18c>
 800b10c:	7afb      	ldrb	r3, [r7, #11]
 800b10e:	2baa      	cmp	r3, #170	@ 0xaa
 800b110:	d164      	bne.n	800b1dc <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b112:	bf00      	nop
 800b114:	f7ff fe26 	bl	800ad64 <SPI_Timer_Status>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d007      	beq.n	800b12e <USER_SPI_initialize+0xde>
 800b11e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b122:	20a9      	movs	r0, #169	@ 0xa9
 800b124:	f7ff ff25 	bl	800af72 <send_cmd>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1f2      	bne.n	800b114 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b12e:	f7ff fe19 	bl	800ad64 <SPI_Timer_Status>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d051      	beq.n	800b1dc <USER_SPI_initialize+0x18c>
 800b138:	2100      	movs	r1, #0
 800b13a:	203a      	movs	r0, #58	@ 0x3a
 800b13c:	f7ff ff19 	bl	800af72 <send_cmd>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d14a      	bne.n	800b1dc <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b146:	2300      	movs	r3, #0
 800b148:	73fb      	strb	r3, [r7, #15]
 800b14a:	e00d      	b.n	800b168 <USER_SPI_initialize+0x118>
 800b14c:	7bfc      	ldrb	r4, [r7, #15]
 800b14e:	20ff      	movs	r0, #255	@ 0xff
 800b150:	f7ff fe1e 	bl	800ad90 <xchg_spi>
 800b154:	4603      	mov	r3, r0
 800b156:	461a      	mov	r2, r3
 800b158:	f104 0310 	add.w	r3, r4, #16
 800b15c:	443b      	add	r3, r7
 800b15e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	3301      	adds	r3, #1
 800b166:	73fb      	strb	r3, [r7, #15]
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d9ee      	bls.n	800b14c <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b16e:	7a3b      	ldrb	r3, [r7, #8]
 800b170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <USER_SPI_initialize+0x12c>
 800b178:	230c      	movs	r3, #12
 800b17a:	e000      	b.n	800b17e <USER_SPI_initialize+0x12e>
 800b17c:	2304      	movs	r3, #4
 800b17e:	737b      	strb	r3, [r7, #13]
 800b180:	e02c      	b.n	800b1dc <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b182:	2100      	movs	r1, #0
 800b184:	20a9      	movs	r0, #169	@ 0xa9
 800b186:	f7ff fef4 	bl	800af72 <send_cmd>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d804      	bhi.n	800b19a <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b190:	2302      	movs	r3, #2
 800b192:	737b      	strb	r3, [r7, #13]
 800b194:	23a9      	movs	r3, #169	@ 0xa9
 800b196:	73bb      	strb	r3, [r7, #14]
 800b198:	e003      	b.n	800b1a2 <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b19a:	2301      	movs	r3, #1
 800b19c:	737b      	strb	r3, [r7, #13]
 800b19e:	2301      	movs	r3, #1
 800b1a0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b1a2:	bf00      	nop
 800b1a4:	f7ff fdde 	bl	800ad64 <SPI_Timer_Status>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d007      	beq.n	800b1be <USER_SPI_initialize+0x16e>
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fedd 	bl	800af72 <send_cmd>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1f2      	bne.n	800b1a4 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b1be:	f7ff fdd1 	bl	800ad64 <SPI_Timer_Status>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d007      	beq.n	800b1d8 <USER_SPI_initialize+0x188>
 800b1c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b1cc:	2010      	movs	r0, #16
 800b1ce:	f7ff fed0 	bl	800af72 <send_cmd>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <USER_SPI_initialize+0x18c>
				ty = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b1dc:	4a15      	ldr	r2, [pc, #84]	@ (800b234 <USER_SPI_initialize+0x1e4>)
 800b1de:	7b7b      	ldrb	r3, [r7, #13]
 800b1e0:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b1e2:	f7ff fe3f 	bl	800ae64 <despiselect>

	if (ty) {			/* OK */
 800b1e6:	7b7b      	ldrb	r3, [r7, #13]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d012      	beq.n	800b212 <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800b1ec:	4b10      	ldr	r3, [pc, #64]	@ (800b230 <USER_SPI_initialize+0x1e0>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b230 <USER_SPI_initialize+0x1e0>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f042 0210 	orr.w	r2, r2, #16
 800b1fe:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b200:	4b09      	ldr	r3, [pc, #36]	@ (800b228 <USER_SPI_initialize+0x1d8>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	b2db      	uxtb	r3, r3
 800b206:	f023 0301 	bic.w	r3, r3, #1
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	4b06      	ldr	r3, [pc, #24]	@ (800b228 <USER_SPI_initialize+0x1d8>)
 800b20e:	701a      	strb	r2, [r3, #0]
 800b210:	e002      	b.n	800b218 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b212:	4b05      	ldr	r3, [pc, #20]	@ (800b228 <USER_SPI_initialize+0x1d8>)
 800b214:	2201      	movs	r2, #1
 800b216:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b218:	4b03      	ldr	r3, [pc, #12]	@ (800b228 <USER_SPI_initialize+0x1d8>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	b2db      	uxtb	r3, r3
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	bd90      	pop	{r4, r7, pc}
 800b226:	bf00      	nop
 800b228:	2000006c 	.word	0x2000006c
 800b22c:	20000f50 	.word	0x20000f50
 800b230:	20000178 	.word	0x20000178
 800b234:	20000f54 	.word	0x20000f54

0800b238 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	4603      	mov	r3, r0
 800b240:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b242:	79fb      	ldrb	r3, [r7, #7]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <USER_SPI_status+0x14>
 800b248:	2301      	movs	r3, #1
 800b24a:	e002      	b.n	800b252 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b24c:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <USER_SPI_status+0x28>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	b2db      	uxtb	r3, r3
}
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	2000006c 	.word	0x2000006c

0800b264 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	4603      	mov	r3, r0
 800b272:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <USER_SPI_read+0x1c>
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <USER_SPI_read+0x20>
 800b280:	2304      	movs	r3, #4
 800b282:	e04d      	b.n	800b320 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b284:	4b28      	ldr	r3, [pc, #160]	@ (800b328 <USER_SPI_read+0xc4>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <USER_SPI_read+0x32>
 800b292:	2303      	movs	r3, #3
 800b294:	e044      	b.n	800b320 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b296:	4b25      	ldr	r3, [pc, #148]	@ (800b32c <USER_SPI_read+0xc8>)
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	f003 0308 	and.w	r3, r3, #8
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d102      	bne.n	800b2a8 <USER_SPI_read+0x44>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	025b      	lsls	r3, r3, #9
 800b2a6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d111      	bne.n	800b2d2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	2011      	movs	r0, #17
 800b2b2:	f7ff fe5e 	bl	800af72 <send_cmd>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d129      	bne.n	800b310 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b2bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b2c0:	68b8      	ldr	r0, [r7, #8]
 800b2c2:	f7ff fdfb 	bl	800aebc <rcvr_datablock>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d021      	beq.n	800b310 <USER_SPI_read+0xac>
			count = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	603b      	str	r3, [r7, #0]
 800b2d0:	e01e      	b.n	800b310 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b2d2:	6879      	ldr	r1, [r7, #4]
 800b2d4:	2012      	movs	r0, #18
 800b2d6:	f7ff fe4c 	bl	800af72 <send_cmd>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d117      	bne.n	800b310 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b2e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b2e4:	68b8      	ldr	r0, [r7, #8]
 800b2e6:	f7ff fde9 	bl	800aebc <rcvr_datablock>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <USER_SPI_read+0xa2>
				buff += 512;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b2f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	603b      	str	r3, [r7, #0]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1ed      	bne.n	800b2e0 <USER_SPI_read+0x7c>
 800b304:	e000      	b.n	800b308 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b306:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b308:	2100      	movs	r1, #0
 800b30a:	200c      	movs	r0, #12
 800b30c:	f7ff fe31 	bl	800af72 <send_cmd>
		}
	}
	despiselect();
 800b310:	f7ff fda8 	bl	800ae64 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	bf14      	ite	ne
 800b31a:	2301      	movne	r3, #1
 800b31c:	2300      	moveq	r3, #0
 800b31e:	b2db      	uxtb	r3, r3
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	2000006c 	.word	0x2000006c
 800b32c:	20000f54 	.word	0x20000f54

0800b330 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	607a      	str	r2, [r7, #4]
 800b33a:	603b      	str	r3, [r7, #0]
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d102      	bne.n	800b34c <USER_SPI_write+0x1c>
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <USER_SPI_write+0x20>
 800b34c:	2304      	movs	r3, #4
 800b34e:	e063      	b.n	800b418 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b350:	4b33      	ldr	r3, [pc, #204]	@ (800b420 <USER_SPI_write+0xf0>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	b2db      	uxtb	r3, r3
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <USER_SPI_write+0x32>
 800b35e:	2303      	movs	r3, #3
 800b360:	e05a      	b.n	800b418 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b362:	4b2f      	ldr	r3, [pc, #188]	@ (800b420 <USER_SPI_write+0xf0>)
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	f003 0304 	and.w	r3, r3, #4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <USER_SPI_write+0x44>
 800b370:	2302      	movs	r3, #2
 800b372:	e051      	b.n	800b418 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b374:	4b2b      	ldr	r3, [pc, #172]	@ (800b424 <USER_SPI_write+0xf4>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	f003 0308 	and.w	r3, r3, #8
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d102      	bne.n	800b386 <USER_SPI_write+0x56>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	025b      	lsls	r3, r3, #9
 800b384:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d110      	bne.n	800b3ae <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b38c:	6879      	ldr	r1, [r7, #4]
 800b38e:	2018      	movs	r0, #24
 800b390:	f7ff fdef 	bl	800af72 <send_cmd>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d136      	bne.n	800b408 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b39a:	21fe      	movs	r1, #254	@ 0xfe
 800b39c:	68b8      	ldr	r0, [r7, #8]
 800b39e:	f7ff fdb6 	bl	800af0e <xmit_datablock>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d02f      	beq.n	800b408 <USER_SPI_write+0xd8>
			count = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	e02c      	b.n	800b408 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b3ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b424 <USER_SPI_write+0xf4>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	f003 0306 	and.w	r3, r3, #6
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <USER_SPI_write+0x92>
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	2097      	movs	r0, #151	@ 0x97
 800b3be:	f7ff fdd8 	bl	800af72 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b3c2:	6879      	ldr	r1, [r7, #4]
 800b3c4:	2019      	movs	r0, #25
 800b3c6:	f7ff fdd4 	bl	800af72 <send_cmd>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d11b      	bne.n	800b408 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b3d0:	21fc      	movs	r1, #252	@ 0xfc
 800b3d2:	68b8      	ldr	r0, [r7, #8]
 800b3d4:	f7ff fd9b 	bl	800af0e <xmit_datablock>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <USER_SPI_write+0xc4>
				buff += 512;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b3e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	603b      	str	r3, [r7, #0]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1ee      	bne.n	800b3d0 <USER_SPI_write+0xa0>
 800b3f2:	e000      	b.n	800b3f6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b3f4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b3f6:	21fd      	movs	r1, #253	@ 0xfd
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	f7ff fd88 	bl	800af0e <xmit_datablock>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <USER_SPI_write+0xd8>
 800b404:	2301      	movs	r3, #1
 800b406:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b408:	f7ff fd2c 	bl	800ae64 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	bf14      	ite	ne
 800b412:	2301      	movne	r3, #1
 800b414:	2300      	moveq	r3, #0
 800b416:	b2db      	uxtb	r3, r3
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	2000006c 	.word	0x2000006c
 800b424:	20000f54 	.word	0x20000f54

0800b428 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08c      	sub	sp, #48	@ 0x30
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	603a      	str	r2, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
 800b434:	460b      	mov	r3, r1
 800b436:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b438:	79fb      	ldrb	r3, [r7, #7]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <USER_SPI_ioctl+0x1a>
 800b43e:	2304      	movs	r3, #4
 800b440:	e15a      	b.n	800b6f8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b442:	4baf      	ldr	r3, [pc, #700]	@ (800b700 <USER_SPI_ioctl+0x2d8>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <USER_SPI_ioctl+0x2c>
 800b450:	2303      	movs	r3, #3
 800b452:	e151      	b.n	800b6f8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800b45a:	79bb      	ldrb	r3, [r7, #6]
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	f200 8136 	bhi.w	800b6ce <USER_SPI_ioctl+0x2a6>
 800b462:	a201      	add	r2, pc, #4	@ (adr r2, 800b468 <USER_SPI_ioctl+0x40>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b47d 	.word	0x0800b47d
 800b46c:	0800b491 	.word	0x0800b491
 800b470:	0800b6cf 	.word	0x0800b6cf
 800b474:	0800b53d 	.word	0x0800b53d
 800b478:	0800b633 	.word	0x0800b633
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b47c:	f7ff fd02 	bl	800ae84 <spiselect>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 8127 	beq.w	800b6d6 <USER_SPI_ioctl+0x2ae>
 800b488:	2300      	movs	r3, #0
 800b48a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b48e:	e122      	b.n	800b6d6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b490:	2100      	movs	r1, #0
 800b492:	2009      	movs	r0, #9
 800b494:	f7ff fd6d 	bl	800af72 <send_cmd>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f040 811d 	bne.w	800b6da <USER_SPI_ioctl+0x2b2>
 800b4a0:	f107 030c 	add.w	r3, r7, #12
 800b4a4:	2110      	movs	r1, #16
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff fd08 	bl	800aebc <rcvr_datablock>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 8113 	beq.w	800b6da <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b4b4:	7b3b      	ldrb	r3, [r7, #12]
 800b4b6:	099b      	lsrs	r3, r3, #6
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d111      	bne.n	800b4e2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b4be:	7d7b      	ldrb	r3, [r7, #21]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	7d3b      	ldrb	r3, [r7, #20]
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	4413      	add	r3, r2
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	7cfb      	ldrb	r3, [r7, #19]
 800b4cc:	041b      	lsls	r3, r3, #16
 800b4ce:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b4d2:	4413      	add	r3, r2
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	029a      	lsls	r2, r3, #10
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	e028      	b.n	800b534 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b4e2:	7c7b      	ldrb	r3, [r7, #17]
 800b4e4:	f003 030f 	and.w	r3, r3, #15
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	7dbb      	ldrb	r3, [r7, #22]
 800b4ec:	09db      	lsrs	r3, r3, #7
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	4413      	add	r3, r2
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	7d7b      	ldrb	r3, [r7, #21]
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	f003 0306 	and.w	r3, r3, #6
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	4413      	add	r3, r2
 800b502:	b2db      	uxtb	r3, r3
 800b504:	3302      	adds	r3, #2
 800b506:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b50a:	7d3b      	ldrb	r3, [r7, #20]
 800b50c:	099b      	lsrs	r3, r3, #6
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	461a      	mov	r2, r3
 800b512:	7cfb      	ldrb	r3, [r7, #19]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	441a      	add	r2, r3
 800b518:	7cbb      	ldrb	r3, [r7, #18]
 800b51a:	029b      	lsls	r3, r3, #10
 800b51c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b520:	4413      	add	r3, r2
 800b522:	3301      	adds	r3, #1
 800b524:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b526:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b52a:	3b09      	subs	r3, #9
 800b52c:	69fa      	ldr	r2, [r7, #28]
 800b52e:	409a      	lsls	r2, r3
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b53a:	e0ce      	b.n	800b6da <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b53c:	4b71      	ldr	r3, [pc, #452]	@ (800b704 <USER_SPI_ioctl+0x2dc>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d031      	beq.n	800b5ac <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b548:	2100      	movs	r1, #0
 800b54a:	208d      	movs	r0, #141	@ 0x8d
 800b54c:	f7ff fd11 	bl	800af72 <send_cmd>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	f040 80c3 	bne.w	800b6de <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b558:	20ff      	movs	r0, #255	@ 0xff
 800b55a:	f7ff fc19 	bl	800ad90 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b55e:	f107 030c 	add.w	r3, r7, #12
 800b562:	2110      	movs	r1, #16
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fca9 	bl	800aebc <rcvr_datablock>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 80b6 	beq.w	800b6de <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b572:	2330      	movs	r3, #48	@ 0x30
 800b574:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b578:	e007      	b.n	800b58a <USER_SPI_ioctl+0x162>
 800b57a:	20ff      	movs	r0, #255	@ 0xff
 800b57c:	f7ff fc08 	bl	800ad90 <xchg_spi>
 800b580:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b584:	3b01      	subs	r3, #1
 800b586:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b58a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1f3      	bne.n	800b57a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b592:	7dbb      	ldrb	r3, [r7, #22]
 800b594:	091b      	lsrs	r3, r3, #4
 800b596:	b2db      	uxtb	r3, r3
 800b598:	461a      	mov	r2, r3
 800b59a:	2310      	movs	r3, #16
 800b59c:	fa03 f202 	lsl.w	r2, r3, r2
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b5aa:	e098      	b.n	800b6de <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	2009      	movs	r0, #9
 800b5b0:	f7ff fcdf 	bl	800af72 <send_cmd>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f040 8091 	bne.w	800b6de <USER_SPI_ioctl+0x2b6>
 800b5bc:	f107 030c 	add.w	r3, r7, #12
 800b5c0:	2110      	movs	r1, #16
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff fc7a 	bl	800aebc <rcvr_datablock>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 8087 	beq.w	800b6de <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b5d0:	4b4c      	ldr	r3, [pc, #304]	@ (800b704 <USER_SPI_ioctl+0x2dc>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d012      	beq.n	800b602 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b5dc:	7dbb      	ldrb	r3, [r7, #22]
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b5e4:	7dfa      	ldrb	r2, [r7, #23]
 800b5e6:	09d2      	lsrs	r2, r2, #7
 800b5e8:	b2d2      	uxtb	r2, r2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	7e7b      	ldrb	r3, [r7, #25]
 800b5f0:	099b      	lsrs	r3, r3, #6
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	e013      	b.n	800b62a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b602:	7dbb      	ldrb	r3, [r7, #22]
 800b604:	109b      	asrs	r3, r3, #2
 800b606:	b29b      	uxth	r3, r3
 800b608:	f003 031f 	and.w	r3, r3, #31
 800b60c:	3301      	adds	r3, #1
 800b60e:	7dfa      	ldrb	r2, [r7, #23]
 800b610:	00d2      	lsls	r2, r2, #3
 800b612:	f002 0218 	and.w	r2, r2, #24
 800b616:	7df9      	ldrb	r1, [r7, #23]
 800b618:	0949      	lsrs	r1, r1, #5
 800b61a:	b2c9      	uxtb	r1, r1
 800b61c:	440a      	add	r2, r1
 800b61e:	3201      	adds	r2, #1
 800b620:	fb02 f303 	mul.w	r3, r2, r3
 800b624:	461a      	mov	r2, r3
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b630:	e055      	b.n	800b6de <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b632:	4b34      	ldr	r3, [pc, #208]	@ (800b704 <USER_SPI_ioctl+0x2dc>)
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	f003 0306 	and.w	r3, r3, #6
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d051      	beq.n	800b6e2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b63e:	f107 020c 	add.w	r2, r7, #12
 800b642:	79fb      	ldrb	r3, [r7, #7]
 800b644:	210b      	movs	r1, #11
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff feee 	bl	800b428 <USER_SPI_ioctl>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d149      	bne.n	800b6e6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b652:	7b3b      	ldrb	r3, [r7, #12]
 800b654:	099b      	lsrs	r3, r3, #6
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d104      	bne.n	800b666 <USER_SPI_ioctl+0x23e>
 800b65c:	7dbb      	ldrb	r3, [r7, #22]
 800b65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b662:	2b00      	cmp	r3, #0
 800b664:	d041      	beq.n	800b6ea <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	623b      	str	r3, [r7, #32]
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800b676:	4b23      	ldr	r3, [pc, #140]	@ (800b704 <USER_SPI_ioctl+0x2dc>)
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	f003 0308 	and.w	r3, r3, #8
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d105      	bne.n	800b68e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b684:	025b      	lsls	r3, r3, #9
 800b686:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68a:	025b      	lsls	r3, r3, #9
 800b68c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b68e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b690:	2020      	movs	r0, #32
 800b692:	f7ff fc6e 	bl	800af72 <send_cmd>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d128      	bne.n	800b6ee <USER_SPI_ioctl+0x2c6>
 800b69c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b69e:	2021      	movs	r0, #33	@ 0x21
 800b6a0:	f7ff fc67 	bl	800af72 <send_cmd>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d121      	bne.n	800b6ee <USER_SPI_ioctl+0x2c6>
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	2026      	movs	r0, #38	@ 0x26
 800b6ae:	f7ff fc60 	bl	800af72 <send_cmd>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d11a      	bne.n	800b6ee <USER_SPI_ioctl+0x2c6>
 800b6b8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b6bc:	f7ff fbae 	bl	800ae1c <wait_ready>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d013      	beq.n	800b6ee <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b6cc:	e00f      	b.n	800b6ee <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b6ce:	2304      	movs	r3, #4
 800b6d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b6d4:	e00c      	b.n	800b6f0 <USER_SPI_ioctl+0x2c8>
		break;
 800b6d6:	bf00      	nop
 800b6d8:	e00a      	b.n	800b6f0 <USER_SPI_ioctl+0x2c8>
		break;
 800b6da:	bf00      	nop
 800b6dc:	e008      	b.n	800b6f0 <USER_SPI_ioctl+0x2c8>
		break;
 800b6de:	bf00      	nop
 800b6e0:	e006      	b.n	800b6f0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b6e2:	bf00      	nop
 800b6e4:	e004      	b.n	800b6f0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b6e6:	bf00      	nop
 800b6e8:	e002      	b.n	800b6f0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b6ea:	bf00      	nop
 800b6ec:	e000      	b.n	800b6f0 <USER_SPI_ioctl+0x2c8>
		break;
 800b6ee:	bf00      	nop
	}

	despiselect();
 800b6f0:	f7ff fbb8 	bl	800ae64 <despiselect>

	return res;
 800b6f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3730      	adds	r7, #48	@ 0x30
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	2000006c 	.word	0x2000006c
 800b704:	20000f54 	.word	0x20000f54

0800b708 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	4613      	mov	r3, r2
 800b714:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b716:	2301      	movs	r3, #1
 800b718:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b71e:	4b1f      	ldr	r3, [pc, #124]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b720:	7a5b      	ldrb	r3, [r3, #9]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b00      	cmp	r3, #0
 800b726:	d131      	bne.n	800b78c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b728:	4b1c      	ldr	r3, [pc, #112]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b72a:	7a5b      	ldrb	r3, [r3, #9]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	461a      	mov	r2, r3
 800b730:	4b1a      	ldr	r3, [pc, #104]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b732:	2100      	movs	r1, #0
 800b734:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b736:	4b19      	ldr	r3, [pc, #100]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b738:	7a5b      	ldrb	r3, [r3, #9]
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	4a17      	ldr	r2, [pc, #92]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	4413      	add	r3, r2
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b746:	4b15      	ldr	r3, [pc, #84]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b748:	7a5b      	ldrb	r3, [r3, #9]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	461a      	mov	r2, r3
 800b74e:	4b13      	ldr	r3, [pc, #76]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b750:	4413      	add	r3, r2
 800b752:	79fa      	ldrb	r2, [r7, #7]
 800b754:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b756:	4b11      	ldr	r3, [pc, #68]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b758:	7a5b      	ldrb	r3, [r3, #9]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	b2d1      	uxtb	r1, r2
 800b760:	4a0e      	ldr	r2, [pc, #56]	@ (800b79c <FATFS_LinkDriverEx+0x94>)
 800b762:	7251      	strb	r1, [r2, #9]
 800b764:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b766:	7dbb      	ldrb	r3, [r7, #22]
 800b768:	3330      	adds	r3, #48	@ 0x30
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	3301      	adds	r3, #1
 800b774:	223a      	movs	r2, #58	@ 0x3a
 800b776:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	3302      	adds	r3, #2
 800b77c:	222f      	movs	r2, #47	@ 0x2f
 800b77e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	3303      	adds	r3, #3
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	371c      	adds	r7, #28
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	20000f60 	.word	0x20000f60

0800b7a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff ffaa 	bl	800b708 <FATFS_LinkDriverEx>
 800b7b4:	4603      	mov	r3, r0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <sniprintf>:
 800b7c0:	b40c      	push	{r2, r3}
 800b7c2:	b530      	push	{r4, r5, lr}
 800b7c4:	4b17      	ldr	r3, [pc, #92]	@ (800b824 <sniprintf+0x64>)
 800b7c6:	1e0c      	subs	r4, r1, #0
 800b7c8:	681d      	ldr	r5, [r3, #0]
 800b7ca:	b09d      	sub	sp, #116	@ 0x74
 800b7cc:	da08      	bge.n	800b7e0 <sniprintf+0x20>
 800b7ce:	238b      	movs	r3, #139	@ 0x8b
 800b7d0:	602b      	str	r3, [r5, #0]
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d6:	b01d      	add	sp, #116	@ 0x74
 800b7d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7dc:	b002      	add	sp, #8
 800b7de:	4770      	bx	lr
 800b7e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b7e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7e8:	bf14      	ite	ne
 800b7ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7ee:	4623      	moveq	r3, r4
 800b7f0:	9304      	str	r3, [sp, #16]
 800b7f2:	9307      	str	r3, [sp, #28]
 800b7f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b7f8:	9002      	str	r0, [sp, #8]
 800b7fa:	9006      	str	r0, [sp, #24]
 800b7fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b800:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b802:	ab21      	add	r3, sp, #132	@ 0x84
 800b804:	a902      	add	r1, sp, #8
 800b806:	4628      	mov	r0, r5
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	f000 f9c3 	bl	800bb94 <_svfiprintf_r>
 800b80e:	1c43      	adds	r3, r0, #1
 800b810:	bfbc      	itt	lt
 800b812:	238b      	movlt	r3, #139	@ 0x8b
 800b814:	602b      	strlt	r3, [r5, #0]
 800b816:	2c00      	cmp	r4, #0
 800b818:	d0dd      	beq.n	800b7d6 <sniprintf+0x16>
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	2200      	movs	r2, #0
 800b81e:	701a      	strb	r2, [r3, #0]
 800b820:	e7d9      	b.n	800b7d6 <sniprintf+0x16>
 800b822:	bf00      	nop
 800b824:	20000070 	.word	0x20000070

0800b828 <siprintf>:
 800b828:	b40e      	push	{r1, r2, r3}
 800b82a:	b500      	push	{lr}
 800b82c:	b09c      	sub	sp, #112	@ 0x70
 800b82e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b830:	9002      	str	r0, [sp, #8]
 800b832:	9006      	str	r0, [sp, #24]
 800b834:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b838:	4809      	ldr	r0, [pc, #36]	@ (800b860 <siprintf+0x38>)
 800b83a:	9107      	str	r1, [sp, #28]
 800b83c:	9104      	str	r1, [sp, #16]
 800b83e:	4909      	ldr	r1, [pc, #36]	@ (800b864 <siprintf+0x3c>)
 800b840:	f853 2b04 	ldr.w	r2, [r3], #4
 800b844:	9105      	str	r1, [sp, #20]
 800b846:	6800      	ldr	r0, [r0, #0]
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	a902      	add	r1, sp, #8
 800b84c:	f000 f9a2 	bl	800bb94 <_svfiprintf_r>
 800b850:	9b02      	ldr	r3, [sp, #8]
 800b852:	2200      	movs	r2, #0
 800b854:	701a      	strb	r2, [r3, #0]
 800b856:	b01c      	add	sp, #112	@ 0x70
 800b858:	f85d eb04 	ldr.w	lr, [sp], #4
 800b85c:	b003      	add	sp, #12
 800b85e:	4770      	bx	lr
 800b860:	20000070 	.word	0x20000070
 800b864:	ffff0208 	.word	0xffff0208

0800b868 <memset>:
 800b868:	4402      	add	r2, r0
 800b86a:	4603      	mov	r3, r0
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d100      	bne.n	800b872 <memset+0xa>
 800b870:	4770      	bx	lr
 800b872:	f803 1b01 	strb.w	r1, [r3], #1
 800b876:	e7f9      	b.n	800b86c <memset+0x4>

0800b878 <__errno>:
 800b878:	4b01      	ldr	r3, [pc, #4]	@ (800b880 <__errno+0x8>)
 800b87a:	6818      	ldr	r0, [r3, #0]
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20000070 	.word	0x20000070

0800b884 <__libc_init_array>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	4d0d      	ldr	r5, [pc, #52]	@ (800b8bc <__libc_init_array+0x38>)
 800b888:	4c0d      	ldr	r4, [pc, #52]	@ (800b8c0 <__libc_init_array+0x3c>)
 800b88a:	1b64      	subs	r4, r4, r5
 800b88c:	10a4      	asrs	r4, r4, #2
 800b88e:	2600      	movs	r6, #0
 800b890:	42a6      	cmp	r6, r4
 800b892:	d109      	bne.n	800b8a8 <__libc_init_array+0x24>
 800b894:	4d0b      	ldr	r5, [pc, #44]	@ (800b8c4 <__libc_init_array+0x40>)
 800b896:	4c0c      	ldr	r4, [pc, #48]	@ (800b8c8 <__libc_init_array+0x44>)
 800b898:	f000 fcbc 	bl	800c214 <_init>
 800b89c:	1b64      	subs	r4, r4, r5
 800b89e:	10a4      	asrs	r4, r4, #2
 800b8a0:	2600      	movs	r6, #0
 800b8a2:	42a6      	cmp	r6, r4
 800b8a4:	d105      	bne.n	800b8b2 <__libc_init_array+0x2e>
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}
 800b8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ac:	4798      	blx	r3
 800b8ae:	3601      	adds	r6, #1
 800b8b0:	e7ee      	b.n	800b890 <__libc_init_array+0xc>
 800b8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b6:	4798      	blx	r3
 800b8b8:	3601      	adds	r6, #1
 800b8ba:	e7f2      	b.n	800b8a2 <__libc_init_array+0x1e>
 800b8bc:	0800c8ec 	.word	0x0800c8ec
 800b8c0:	0800c8ec 	.word	0x0800c8ec
 800b8c4:	0800c8ec 	.word	0x0800c8ec
 800b8c8:	0800c8f0 	.word	0x0800c8f0

0800b8cc <__retarget_lock_acquire_recursive>:
 800b8cc:	4770      	bx	lr

0800b8ce <__retarget_lock_release_recursive>:
 800b8ce:	4770      	bx	lr

0800b8d0 <memcpy>:
 800b8d0:	440a      	add	r2, r1
 800b8d2:	4291      	cmp	r1, r2
 800b8d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8d8:	d100      	bne.n	800b8dc <memcpy+0xc>
 800b8da:	4770      	bx	lr
 800b8dc:	b510      	push	{r4, lr}
 800b8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8e6:	4291      	cmp	r1, r2
 800b8e8:	d1f9      	bne.n	800b8de <memcpy+0xe>
 800b8ea:	bd10      	pop	{r4, pc}

0800b8ec <_free_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	2900      	cmp	r1, #0
 800b8f2:	d041      	beq.n	800b978 <_free_r+0x8c>
 800b8f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8f8:	1f0c      	subs	r4, r1, #4
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	bfb8      	it	lt
 800b8fe:	18e4      	addlt	r4, r4, r3
 800b900:	f000 f8e0 	bl	800bac4 <__malloc_lock>
 800b904:	4a1d      	ldr	r2, [pc, #116]	@ (800b97c <_free_r+0x90>)
 800b906:	6813      	ldr	r3, [r2, #0]
 800b908:	b933      	cbnz	r3, 800b918 <_free_r+0x2c>
 800b90a:	6063      	str	r3, [r4, #4]
 800b90c:	6014      	str	r4, [r2, #0]
 800b90e:	4628      	mov	r0, r5
 800b910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b914:	f000 b8dc 	b.w	800bad0 <__malloc_unlock>
 800b918:	42a3      	cmp	r3, r4
 800b91a:	d908      	bls.n	800b92e <_free_r+0x42>
 800b91c:	6820      	ldr	r0, [r4, #0]
 800b91e:	1821      	adds	r1, r4, r0
 800b920:	428b      	cmp	r3, r1
 800b922:	bf01      	itttt	eq
 800b924:	6819      	ldreq	r1, [r3, #0]
 800b926:	685b      	ldreq	r3, [r3, #4]
 800b928:	1809      	addeq	r1, r1, r0
 800b92a:	6021      	streq	r1, [r4, #0]
 800b92c:	e7ed      	b.n	800b90a <_free_r+0x1e>
 800b92e:	461a      	mov	r2, r3
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	b10b      	cbz	r3, 800b938 <_free_r+0x4c>
 800b934:	42a3      	cmp	r3, r4
 800b936:	d9fa      	bls.n	800b92e <_free_r+0x42>
 800b938:	6811      	ldr	r1, [r2, #0]
 800b93a:	1850      	adds	r0, r2, r1
 800b93c:	42a0      	cmp	r0, r4
 800b93e:	d10b      	bne.n	800b958 <_free_r+0x6c>
 800b940:	6820      	ldr	r0, [r4, #0]
 800b942:	4401      	add	r1, r0
 800b944:	1850      	adds	r0, r2, r1
 800b946:	4283      	cmp	r3, r0
 800b948:	6011      	str	r1, [r2, #0]
 800b94a:	d1e0      	bne.n	800b90e <_free_r+0x22>
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	6053      	str	r3, [r2, #4]
 800b952:	4408      	add	r0, r1
 800b954:	6010      	str	r0, [r2, #0]
 800b956:	e7da      	b.n	800b90e <_free_r+0x22>
 800b958:	d902      	bls.n	800b960 <_free_r+0x74>
 800b95a:	230c      	movs	r3, #12
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	e7d6      	b.n	800b90e <_free_r+0x22>
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	1821      	adds	r1, r4, r0
 800b964:	428b      	cmp	r3, r1
 800b966:	bf04      	itt	eq
 800b968:	6819      	ldreq	r1, [r3, #0]
 800b96a:	685b      	ldreq	r3, [r3, #4]
 800b96c:	6063      	str	r3, [r4, #4]
 800b96e:	bf04      	itt	eq
 800b970:	1809      	addeq	r1, r1, r0
 800b972:	6021      	streq	r1, [r4, #0]
 800b974:	6054      	str	r4, [r2, #4]
 800b976:	e7ca      	b.n	800b90e <_free_r+0x22>
 800b978:	bd38      	pop	{r3, r4, r5, pc}
 800b97a:	bf00      	nop
 800b97c:	200010b0 	.word	0x200010b0

0800b980 <sbrk_aligned>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	4e0f      	ldr	r6, [pc, #60]	@ (800b9c0 <sbrk_aligned+0x40>)
 800b984:	460c      	mov	r4, r1
 800b986:	6831      	ldr	r1, [r6, #0]
 800b988:	4605      	mov	r5, r0
 800b98a:	b911      	cbnz	r1, 800b992 <sbrk_aligned+0x12>
 800b98c:	f000 fba6 	bl	800c0dc <_sbrk_r>
 800b990:	6030      	str	r0, [r6, #0]
 800b992:	4621      	mov	r1, r4
 800b994:	4628      	mov	r0, r5
 800b996:	f000 fba1 	bl	800c0dc <_sbrk_r>
 800b99a:	1c43      	adds	r3, r0, #1
 800b99c:	d103      	bne.n	800b9a6 <sbrk_aligned+0x26>
 800b99e:	f04f 34ff 	mov.w	r4, #4294967295
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	bd70      	pop	{r4, r5, r6, pc}
 800b9a6:	1cc4      	adds	r4, r0, #3
 800b9a8:	f024 0403 	bic.w	r4, r4, #3
 800b9ac:	42a0      	cmp	r0, r4
 800b9ae:	d0f8      	beq.n	800b9a2 <sbrk_aligned+0x22>
 800b9b0:	1a21      	subs	r1, r4, r0
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f000 fb92 	bl	800c0dc <_sbrk_r>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d1f2      	bne.n	800b9a2 <sbrk_aligned+0x22>
 800b9bc:	e7ef      	b.n	800b99e <sbrk_aligned+0x1e>
 800b9be:	bf00      	nop
 800b9c0:	200010ac 	.word	0x200010ac

0800b9c4 <_malloc_r>:
 800b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	1ccd      	adds	r5, r1, #3
 800b9ca:	f025 0503 	bic.w	r5, r5, #3
 800b9ce:	3508      	adds	r5, #8
 800b9d0:	2d0c      	cmp	r5, #12
 800b9d2:	bf38      	it	cc
 800b9d4:	250c      	movcc	r5, #12
 800b9d6:	2d00      	cmp	r5, #0
 800b9d8:	4606      	mov	r6, r0
 800b9da:	db01      	blt.n	800b9e0 <_malloc_r+0x1c>
 800b9dc:	42a9      	cmp	r1, r5
 800b9de:	d904      	bls.n	800b9ea <_malloc_r+0x26>
 800b9e0:	230c      	movs	r3, #12
 800b9e2:	6033      	str	r3, [r6, #0]
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bac0 <_malloc_r+0xfc>
 800b9ee:	f000 f869 	bl	800bac4 <__malloc_lock>
 800b9f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f6:	461c      	mov	r4, r3
 800b9f8:	bb44      	cbnz	r4, 800ba4c <_malloc_r+0x88>
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f7ff ffbf 	bl	800b980 <sbrk_aligned>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	4604      	mov	r4, r0
 800ba06:	d158      	bne.n	800baba <_malloc_r+0xf6>
 800ba08:	f8d8 4000 	ldr.w	r4, [r8]
 800ba0c:	4627      	mov	r7, r4
 800ba0e:	2f00      	cmp	r7, #0
 800ba10:	d143      	bne.n	800ba9a <_malloc_r+0xd6>
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	d04b      	beq.n	800baae <_malloc_r+0xea>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	4639      	mov	r1, r7
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	eb04 0903 	add.w	r9, r4, r3
 800ba20:	f000 fb5c 	bl	800c0dc <_sbrk_r>
 800ba24:	4581      	cmp	r9, r0
 800ba26:	d142      	bne.n	800baae <_malloc_r+0xea>
 800ba28:	6821      	ldr	r1, [r4, #0]
 800ba2a:	1a6d      	subs	r5, r5, r1
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7ff ffa6 	bl	800b980 <sbrk_aligned>
 800ba34:	3001      	adds	r0, #1
 800ba36:	d03a      	beq.n	800baae <_malloc_r+0xea>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	442b      	add	r3, r5
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	bb62      	cbnz	r2, 800baa0 <_malloc_r+0xdc>
 800ba46:	f8c8 7000 	str.w	r7, [r8]
 800ba4a:	e00f      	b.n	800ba6c <_malloc_r+0xa8>
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	1b52      	subs	r2, r2, r5
 800ba50:	d420      	bmi.n	800ba94 <_malloc_r+0xd0>
 800ba52:	2a0b      	cmp	r2, #11
 800ba54:	d917      	bls.n	800ba86 <_malloc_r+0xc2>
 800ba56:	1961      	adds	r1, r4, r5
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	6025      	str	r5, [r4, #0]
 800ba5c:	bf18      	it	ne
 800ba5e:	6059      	strne	r1, [r3, #4]
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	bf08      	it	eq
 800ba64:	f8c8 1000 	streq.w	r1, [r8]
 800ba68:	5162      	str	r2, [r4, r5]
 800ba6a:	604b      	str	r3, [r1, #4]
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 f82f 	bl	800bad0 <__malloc_unlock>
 800ba72:	f104 000b 	add.w	r0, r4, #11
 800ba76:	1d23      	adds	r3, r4, #4
 800ba78:	f020 0007 	bic.w	r0, r0, #7
 800ba7c:	1ac2      	subs	r2, r0, r3
 800ba7e:	bf1c      	itt	ne
 800ba80:	1a1b      	subne	r3, r3, r0
 800ba82:	50a3      	strne	r3, [r4, r2]
 800ba84:	e7af      	b.n	800b9e6 <_malloc_r+0x22>
 800ba86:	6862      	ldr	r2, [r4, #4]
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	bf0c      	ite	eq
 800ba8c:	f8c8 2000 	streq.w	r2, [r8]
 800ba90:	605a      	strne	r2, [r3, #4]
 800ba92:	e7eb      	b.n	800ba6c <_malloc_r+0xa8>
 800ba94:	4623      	mov	r3, r4
 800ba96:	6864      	ldr	r4, [r4, #4]
 800ba98:	e7ae      	b.n	800b9f8 <_malloc_r+0x34>
 800ba9a:	463c      	mov	r4, r7
 800ba9c:	687f      	ldr	r7, [r7, #4]
 800ba9e:	e7b6      	b.n	800ba0e <_malloc_r+0x4a>
 800baa0:	461a      	mov	r2, r3
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	d1fb      	bne.n	800baa0 <_malloc_r+0xdc>
 800baa8:	2300      	movs	r3, #0
 800baaa:	6053      	str	r3, [r2, #4]
 800baac:	e7de      	b.n	800ba6c <_malloc_r+0xa8>
 800baae:	230c      	movs	r3, #12
 800bab0:	6033      	str	r3, [r6, #0]
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 f80c 	bl	800bad0 <__malloc_unlock>
 800bab8:	e794      	b.n	800b9e4 <_malloc_r+0x20>
 800baba:	6005      	str	r5, [r0, #0]
 800babc:	e7d6      	b.n	800ba6c <_malloc_r+0xa8>
 800babe:	bf00      	nop
 800bac0:	200010b0 	.word	0x200010b0

0800bac4 <__malloc_lock>:
 800bac4:	4801      	ldr	r0, [pc, #4]	@ (800bacc <__malloc_lock+0x8>)
 800bac6:	f7ff bf01 	b.w	800b8cc <__retarget_lock_acquire_recursive>
 800baca:	bf00      	nop
 800bacc:	200010a8 	.word	0x200010a8

0800bad0 <__malloc_unlock>:
 800bad0:	4801      	ldr	r0, [pc, #4]	@ (800bad8 <__malloc_unlock+0x8>)
 800bad2:	f7ff befc 	b.w	800b8ce <__retarget_lock_release_recursive>
 800bad6:	bf00      	nop
 800bad8:	200010a8 	.word	0x200010a8

0800badc <__ssputs_r>:
 800badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	688e      	ldr	r6, [r1, #8]
 800bae2:	461f      	mov	r7, r3
 800bae4:	42be      	cmp	r6, r7
 800bae6:	680b      	ldr	r3, [r1, #0]
 800bae8:	4682      	mov	sl, r0
 800baea:	460c      	mov	r4, r1
 800baec:	4690      	mov	r8, r2
 800baee:	d82d      	bhi.n	800bb4c <__ssputs_r+0x70>
 800baf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800baf8:	d026      	beq.n	800bb48 <__ssputs_r+0x6c>
 800bafa:	6965      	ldr	r5, [r4, #20]
 800bafc:	6909      	ldr	r1, [r1, #16]
 800bafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb02:	eba3 0901 	sub.w	r9, r3, r1
 800bb06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb0a:	1c7b      	adds	r3, r7, #1
 800bb0c:	444b      	add	r3, r9
 800bb0e:	106d      	asrs	r5, r5, #1
 800bb10:	429d      	cmp	r5, r3
 800bb12:	bf38      	it	cc
 800bb14:	461d      	movcc	r5, r3
 800bb16:	0553      	lsls	r3, r2, #21
 800bb18:	d527      	bpl.n	800bb6a <__ssputs_r+0x8e>
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7ff ff52 	bl	800b9c4 <_malloc_r>
 800bb20:	4606      	mov	r6, r0
 800bb22:	b360      	cbz	r0, 800bb7e <__ssputs_r+0xa2>
 800bb24:	6921      	ldr	r1, [r4, #16]
 800bb26:	464a      	mov	r2, r9
 800bb28:	f7ff fed2 	bl	800b8d0 <memcpy>
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb36:	81a3      	strh	r3, [r4, #12]
 800bb38:	6126      	str	r6, [r4, #16]
 800bb3a:	6165      	str	r5, [r4, #20]
 800bb3c:	444e      	add	r6, r9
 800bb3e:	eba5 0509 	sub.w	r5, r5, r9
 800bb42:	6026      	str	r6, [r4, #0]
 800bb44:	60a5      	str	r5, [r4, #8]
 800bb46:	463e      	mov	r6, r7
 800bb48:	42be      	cmp	r6, r7
 800bb4a:	d900      	bls.n	800bb4e <__ssputs_r+0x72>
 800bb4c:	463e      	mov	r6, r7
 800bb4e:	6820      	ldr	r0, [r4, #0]
 800bb50:	4632      	mov	r2, r6
 800bb52:	4641      	mov	r1, r8
 800bb54:	f000 faa8 	bl	800c0a8 <memmove>
 800bb58:	68a3      	ldr	r3, [r4, #8]
 800bb5a:	1b9b      	subs	r3, r3, r6
 800bb5c:	60a3      	str	r3, [r4, #8]
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	4433      	add	r3, r6
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	2000      	movs	r0, #0
 800bb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	f000 fac6 	bl	800c0fc <_realloc_r>
 800bb70:	4606      	mov	r6, r0
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d1e0      	bne.n	800bb38 <__ssputs_r+0x5c>
 800bb76:	6921      	ldr	r1, [r4, #16]
 800bb78:	4650      	mov	r0, sl
 800bb7a:	f7ff feb7 	bl	800b8ec <_free_r>
 800bb7e:	230c      	movs	r3, #12
 800bb80:	f8ca 3000 	str.w	r3, [sl]
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb90:	e7e9      	b.n	800bb66 <__ssputs_r+0x8a>
	...

0800bb94 <_svfiprintf_r>:
 800bb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb98:	4698      	mov	r8, r3
 800bb9a:	898b      	ldrh	r3, [r1, #12]
 800bb9c:	061b      	lsls	r3, r3, #24
 800bb9e:	b09d      	sub	sp, #116	@ 0x74
 800bba0:	4607      	mov	r7, r0
 800bba2:	460d      	mov	r5, r1
 800bba4:	4614      	mov	r4, r2
 800bba6:	d510      	bpl.n	800bbca <_svfiprintf_r+0x36>
 800bba8:	690b      	ldr	r3, [r1, #16]
 800bbaa:	b973      	cbnz	r3, 800bbca <_svfiprintf_r+0x36>
 800bbac:	2140      	movs	r1, #64	@ 0x40
 800bbae:	f7ff ff09 	bl	800b9c4 <_malloc_r>
 800bbb2:	6028      	str	r0, [r5, #0]
 800bbb4:	6128      	str	r0, [r5, #16]
 800bbb6:	b930      	cbnz	r0, 800bbc6 <_svfiprintf_r+0x32>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	b01d      	add	sp, #116	@ 0x74
 800bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc6:	2340      	movs	r3, #64	@ 0x40
 800bbc8:	616b      	str	r3, [r5, #20]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbce:	2320      	movs	r3, #32
 800bbd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd8:	2330      	movs	r3, #48	@ 0x30
 800bbda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd78 <_svfiprintf_r+0x1e4>
 800bbde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbe2:	f04f 0901 	mov.w	r9, #1
 800bbe6:	4623      	mov	r3, r4
 800bbe8:	469a      	mov	sl, r3
 800bbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbee:	b10a      	cbz	r2, 800bbf4 <_svfiprintf_r+0x60>
 800bbf0:	2a25      	cmp	r2, #37	@ 0x25
 800bbf2:	d1f9      	bne.n	800bbe8 <_svfiprintf_r+0x54>
 800bbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf8:	d00b      	beq.n	800bc12 <_svfiprintf_r+0x7e>
 800bbfa:	465b      	mov	r3, fp
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7ff ff6b 	bl	800badc <__ssputs_r>
 800bc06:	3001      	adds	r0, #1
 800bc08:	f000 80a7 	beq.w	800bd5a <_svfiprintf_r+0x1c6>
 800bc0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc0e:	445a      	add	r2, fp
 800bc10:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc12:	f89a 3000 	ldrb.w	r3, [sl]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f000 809f 	beq.w	800bd5a <_svfiprintf_r+0x1c6>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc26:	f10a 0a01 	add.w	sl, sl, #1
 800bc2a:	9304      	str	r3, [sp, #16]
 800bc2c:	9307      	str	r3, [sp, #28]
 800bc2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc32:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc34:	4654      	mov	r4, sl
 800bc36:	2205      	movs	r2, #5
 800bc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3c:	484e      	ldr	r0, [pc, #312]	@ (800bd78 <_svfiprintf_r+0x1e4>)
 800bc3e:	f7f4 faef 	bl	8000220 <memchr>
 800bc42:	9a04      	ldr	r2, [sp, #16]
 800bc44:	b9d8      	cbnz	r0, 800bc7e <_svfiprintf_r+0xea>
 800bc46:	06d0      	lsls	r0, r2, #27
 800bc48:	bf44      	itt	mi
 800bc4a:	2320      	movmi	r3, #32
 800bc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc50:	0711      	lsls	r1, r2, #28
 800bc52:	bf44      	itt	mi
 800bc54:	232b      	movmi	r3, #43	@ 0x2b
 800bc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc60:	d015      	beq.n	800bc8e <_svfiprintf_r+0xfa>
 800bc62:	9a07      	ldr	r2, [sp, #28]
 800bc64:	4654      	mov	r4, sl
 800bc66:	2000      	movs	r0, #0
 800bc68:	f04f 0c0a 	mov.w	ip, #10
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc72:	3b30      	subs	r3, #48	@ 0x30
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	d94b      	bls.n	800bd10 <_svfiprintf_r+0x17c>
 800bc78:	b1b0      	cbz	r0, 800bca8 <_svfiprintf_r+0x114>
 800bc7a:	9207      	str	r2, [sp, #28]
 800bc7c:	e014      	b.n	800bca8 <_svfiprintf_r+0x114>
 800bc7e:	eba0 0308 	sub.w	r3, r0, r8
 800bc82:	fa09 f303 	lsl.w	r3, r9, r3
 800bc86:	4313      	orrs	r3, r2
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	46a2      	mov	sl, r4
 800bc8c:	e7d2      	b.n	800bc34 <_svfiprintf_r+0xa0>
 800bc8e:	9b03      	ldr	r3, [sp, #12]
 800bc90:	1d19      	adds	r1, r3, #4
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	9103      	str	r1, [sp, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	bfbb      	ittet	lt
 800bc9a:	425b      	neglt	r3, r3
 800bc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800bca0:	9307      	strge	r3, [sp, #28]
 800bca2:	9307      	strlt	r3, [sp, #28]
 800bca4:	bfb8      	it	lt
 800bca6:	9204      	strlt	r2, [sp, #16]
 800bca8:	7823      	ldrb	r3, [r4, #0]
 800bcaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcac:	d10a      	bne.n	800bcc4 <_svfiprintf_r+0x130>
 800bcae:	7863      	ldrb	r3, [r4, #1]
 800bcb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcb2:	d132      	bne.n	800bd1a <_svfiprintf_r+0x186>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	1d1a      	adds	r2, r3, #4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	9203      	str	r2, [sp, #12]
 800bcbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcc0:	3402      	adds	r4, #2
 800bcc2:	9305      	str	r3, [sp, #20]
 800bcc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd88 <_svfiprintf_r+0x1f4>
 800bcc8:	7821      	ldrb	r1, [r4, #0]
 800bcca:	2203      	movs	r2, #3
 800bccc:	4650      	mov	r0, sl
 800bcce:	f7f4 faa7 	bl	8000220 <memchr>
 800bcd2:	b138      	cbz	r0, 800bce4 <_svfiprintf_r+0x150>
 800bcd4:	9b04      	ldr	r3, [sp, #16]
 800bcd6:	eba0 000a 	sub.w	r0, r0, sl
 800bcda:	2240      	movs	r2, #64	@ 0x40
 800bcdc:	4082      	lsls	r2, r0
 800bcde:	4313      	orrs	r3, r2
 800bce0:	3401      	adds	r4, #1
 800bce2:	9304      	str	r3, [sp, #16]
 800bce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce8:	4824      	ldr	r0, [pc, #144]	@ (800bd7c <_svfiprintf_r+0x1e8>)
 800bcea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcee:	2206      	movs	r2, #6
 800bcf0:	f7f4 fa96 	bl	8000220 <memchr>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d036      	beq.n	800bd66 <_svfiprintf_r+0x1d2>
 800bcf8:	4b21      	ldr	r3, [pc, #132]	@ (800bd80 <_svfiprintf_r+0x1ec>)
 800bcfa:	bb1b      	cbnz	r3, 800bd44 <_svfiprintf_r+0x1b0>
 800bcfc:	9b03      	ldr	r3, [sp, #12]
 800bcfe:	3307      	adds	r3, #7
 800bd00:	f023 0307 	bic.w	r3, r3, #7
 800bd04:	3308      	adds	r3, #8
 800bd06:	9303      	str	r3, [sp, #12]
 800bd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0a:	4433      	add	r3, r6
 800bd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd0e:	e76a      	b.n	800bbe6 <_svfiprintf_r+0x52>
 800bd10:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd14:	460c      	mov	r4, r1
 800bd16:	2001      	movs	r0, #1
 800bd18:	e7a8      	b.n	800bc6c <_svfiprintf_r+0xd8>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	3401      	adds	r4, #1
 800bd1e:	9305      	str	r3, [sp, #20]
 800bd20:	4619      	mov	r1, r3
 800bd22:	f04f 0c0a 	mov.w	ip, #10
 800bd26:	4620      	mov	r0, r4
 800bd28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2c:	3a30      	subs	r2, #48	@ 0x30
 800bd2e:	2a09      	cmp	r2, #9
 800bd30:	d903      	bls.n	800bd3a <_svfiprintf_r+0x1a6>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0c6      	beq.n	800bcc4 <_svfiprintf_r+0x130>
 800bd36:	9105      	str	r1, [sp, #20]
 800bd38:	e7c4      	b.n	800bcc4 <_svfiprintf_r+0x130>
 800bd3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd3e:	4604      	mov	r4, r0
 800bd40:	2301      	movs	r3, #1
 800bd42:	e7f0      	b.n	800bd26 <_svfiprintf_r+0x192>
 800bd44:	ab03      	add	r3, sp, #12
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4b0e      	ldr	r3, [pc, #56]	@ (800bd84 <_svfiprintf_r+0x1f0>)
 800bd4c:	a904      	add	r1, sp, #16
 800bd4e:	4638      	mov	r0, r7
 800bd50:	f3af 8000 	nop.w
 800bd54:	1c42      	adds	r2, r0, #1
 800bd56:	4606      	mov	r6, r0
 800bd58:	d1d6      	bne.n	800bd08 <_svfiprintf_r+0x174>
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	065b      	lsls	r3, r3, #25
 800bd5e:	f53f af2d 	bmi.w	800bbbc <_svfiprintf_r+0x28>
 800bd62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd64:	e72c      	b.n	800bbc0 <_svfiprintf_r+0x2c>
 800bd66:	ab03      	add	r3, sp, #12
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	4b05      	ldr	r3, [pc, #20]	@ (800bd84 <_svfiprintf_r+0x1f0>)
 800bd6e:	a904      	add	r1, sp, #16
 800bd70:	4638      	mov	r0, r7
 800bd72:	f000 f879 	bl	800be68 <_printf_i>
 800bd76:	e7ed      	b.n	800bd54 <_svfiprintf_r+0x1c0>
 800bd78:	0800c8b0 	.word	0x0800c8b0
 800bd7c:	0800c8ba 	.word	0x0800c8ba
 800bd80:	00000000 	.word	0x00000000
 800bd84:	0800badd 	.word	0x0800badd
 800bd88:	0800c8b6 	.word	0x0800c8b6

0800bd8c <_printf_common>:
 800bd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd90:	4616      	mov	r6, r2
 800bd92:	4698      	mov	r8, r3
 800bd94:	688a      	ldr	r2, [r1, #8]
 800bd96:	690b      	ldr	r3, [r1, #16]
 800bd98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	bfb8      	it	lt
 800bda0:	4613      	movlt	r3, r2
 800bda2:	6033      	str	r3, [r6, #0]
 800bda4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bda8:	4607      	mov	r7, r0
 800bdaa:	460c      	mov	r4, r1
 800bdac:	b10a      	cbz	r2, 800bdb2 <_printf_common+0x26>
 800bdae:	3301      	adds	r3, #1
 800bdb0:	6033      	str	r3, [r6, #0]
 800bdb2:	6823      	ldr	r3, [r4, #0]
 800bdb4:	0699      	lsls	r1, r3, #26
 800bdb6:	bf42      	ittt	mi
 800bdb8:	6833      	ldrmi	r3, [r6, #0]
 800bdba:	3302      	addmi	r3, #2
 800bdbc:	6033      	strmi	r3, [r6, #0]
 800bdbe:	6825      	ldr	r5, [r4, #0]
 800bdc0:	f015 0506 	ands.w	r5, r5, #6
 800bdc4:	d106      	bne.n	800bdd4 <_printf_common+0x48>
 800bdc6:	f104 0a19 	add.w	sl, r4, #25
 800bdca:	68e3      	ldr	r3, [r4, #12]
 800bdcc:	6832      	ldr	r2, [r6, #0]
 800bdce:	1a9b      	subs	r3, r3, r2
 800bdd0:	42ab      	cmp	r3, r5
 800bdd2:	dc26      	bgt.n	800be22 <_printf_common+0x96>
 800bdd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bdd8:	6822      	ldr	r2, [r4, #0]
 800bdda:	3b00      	subs	r3, #0
 800bddc:	bf18      	it	ne
 800bdde:	2301      	movne	r3, #1
 800bde0:	0692      	lsls	r2, r2, #26
 800bde2:	d42b      	bmi.n	800be3c <_printf_common+0xb0>
 800bde4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bde8:	4641      	mov	r1, r8
 800bdea:	4638      	mov	r0, r7
 800bdec:	47c8      	blx	r9
 800bdee:	3001      	adds	r0, #1
 800bdf0:	d01e      	beq.n	800be30 <_printf_common+0xa4>
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	6922      	ldr	r2, [r4, #16]
 800bdf6:	f003 0306 	and.w	r3, r3, #6
 800bdfa:	2b04      	cmp	r3, #4
 800bdfc:	bf02      	ittt	eq
 800bdfe:	68e5      	ldreq	r5, [r4, #12]
 800be00:	6833      	ldreq	r3, [r6, #0]
 800be02:	1aed      	subeq	r5, r5, r3
 800be04:	68a3      	ldr	r3, [r4, #8]
 800be06:	bf0c      	ite	eq
 800be08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be0c:	2500      	movne	r5, #0
 800be0e:	4293      	cmp	r3, r2
 800be10:	bfc4      	itt	gt
 800be12:	1a9b      	subgt	r3, r3, r2
 800be14:	18ed      	addgt	r5, r5, r3
 800be16:	2600      	movs	r6, #0
 800be18:	341a      	adds	r4, #26
 800be1a:	42b5      	cmp	r5, r6
 800be1c:	d11a      	bne.n	800be54 <_printf_common+0xc8>
 800be1e:	2000      	movs	r0, #0
 800be20:	e008      	b.n	800be34 <_printf_common+0xa8>
 800be22:	2301      	movs	r3, #1
 800be24:	4652      	mov	r2, sl
 800be26:	4641      	mov	r1, r8
 800be28:	4638      	mov	r0, r7
 800be2a:	47c8      	blx	r9
 800be2c:	3001      	adds	r0, #1
 800be2e:	d103      	bne.n	800be38 <_printf_common+0xac>
 800be30:	f04f 30ff 	mov.w	r0, #4294967295
 800be34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be38:	3501      	adds	r5, #1
 800be3a:	e7c6      	b.n	800bdca <_printf_common+0x3e>
 800be3c:	18e1      	adds	r1, r4, r3
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	2030      	movs	r0, #48	@ 0x30
 800be42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be46:	4422      	add	r2, r4
 800be48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be50:	3302      	adds	r3, #2
 800be52:	e7c7      	b.n	800bde4 <_printf_common+0x58>
 800be54:	2301      	movs	r3, #1
 800be56:	4622      	mov	r2, r4
 800be58:	4641      	mov	r1, r8
 800be5a:	4638      	mov	r0, r7
 800be5c:	47c8      	blx	r9
 800be5e:	3001      	adds	r0, #1
 800be60:	d0e6      	beq.n	800be30 <_printf_common+0xa4>
 800be62:	3601      	adds	r6, #1
 800be64:	e7d9      	b.n	800be1a <_printf_common+0x8e>
	...

0800be68 <_printf_i>:
 800be68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be6c:	7e0f      	ldrb	r7, [r1, #24]
 800be6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be70:	2f78      	cmp	r7, #120	@ 0x78
 800be72:	4691      	mov	r9, r2
 800be74:	4680      	mov	r8, r0
 800be76:	460c      	mov	r4, r1
 800be78:	469a      	mov	sl, r3
 800be7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be7e:	d807      	bhi.n	800be90 <_printf_i+0x28>
 800be80:	2f62      	cmp	r7, #98	@ 0x62
 800be82:	d80a      	bhi.n	800be9a <_printf_i+0x32>
 800be84:	2f00      	cmp	r7, #0
 800be86:	f000 80d2 	beq.w	800c02e <_printf_i+0x1c6>
 800be8a:	2f58      	cmp	r7, #88	@ 0x58
 800be8c:	f000 80b9 	beq.w	800c002 <_printf_i+0x19a>
 800be90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be98:	e03a      	b.n	800bf10 <_printf_i+0xa8>
 800be9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be9e:	2b15      	cmp	r3, #21
 800bea0:	d8f6      	bhi.n	800be90 <_printf_i+0x28>
 800bea2:	a101      	add	r1, pc, #4	@ (adr r1, 800bea8 <_printf_i+0x40>)
 800bea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bea8:	0800bf01 	.word	0x0800bf01
 800beac:	0800bf15 	.word	0x0800bf15
 800beb0:	0800be91 	.word	0x0800be91
 800beb4:	0800be91 	.word	0x0800be91
 800beb8:	0800be91 	.word	0x0800be91
 800bebc:	0800be91 	.word	0x0800be91
 800bec0:	0800bf15 	.word	0x0800bf15
 800bec4:	0800be91 	.word	0x0800be91
 800bec8:	0800be91 	.word	0x0800be91
 800becc:	0800be91 	.word	0x0800be91
 800bed0:	0800be91 	.word	0x0800be91
 800bed4:	0800c015 	.word	0x0800c015
 800bed8:	0800bf3f 	.word	0x0800bf3f
 800bedc:	0800bfcf 	.word	0x0800bfcf
 800bee0:	0800be91 	.word	0x0800be91
 800bee4:	0800be91 	.word	0x0800be91
 800bee8:	0800c037 	.word	0x0800c037
 800beec:	0800be91 	.word	0x0800be91
 800bef0:	0800bf3f 	.word	0x0800bf3f
 800bef4:	0800be91 	.word	0x0800be91
 800bef8:	0800be91 	.word	0x0800be91
 800befc:	0800bfd7 	.word	0x0800bfd7
 800bf00:	6833      	ldr	r3, [r6, #0]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6032      	str	r2, [r6, #0]
 800bf08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf10:	2301      	movs	r3, #1
 800bf12:	e09d      	b.n	800c050 <_printf_i+0x1e8>
 800bf14:	6833      	ldr	r3, [r6, #0]
 800bf16:	6820      	ldr	r0, [r4, #0]
 800bf18:	1d19      	adds	r1, r3, #4
 800bf1a:	6031      	str	r1, [r6, #0]
 800bf1c:	0606      	lsls	r6, r0, #24
 800bf1e:	d501      	bpl.n	800bf24 <_printf_i+0xbc>
 800bf20:	681d      	ldr	r5, [r3, #0]
 800bf22:	e003      	b.n	800bf2c <_printf_i+0xc4>
 800bf24:	0645      	lsls	r5, r0, #25
 800bf26:	d5fb      	bpl.n	800bf20 <_printf_i+0xb8>
 800bf28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf2c:	2d00      	cmp	r5, #0
 800bf2e:	da03      	bge.n	800bf38 <_printf_i+0xd0>
 800bf30:	232d      	movs	r3, #45	@ 0x2d
 800bf32:	426d      	negs	r5, r5
 800bf34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf38:	4859      	ldr	r0, [pc, #356]	@ (800c0a0 <_printf_i+0x238>)
 800bf3a:	230a      	movs	r3, #10
 800bf3c:	e011      	b.n	800bf62 <_printf_i+0xfa>
 800bf3e:	6821      	ldr	r1, [r4, #0]
 800bf40:	6833      	ldr	r3, [r6, #0]
 800bf42:	0608      	lsls	r0, r1, #24
 800bf44:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf48:	d402      	bmi.n	800bf50 <_printf_i+0xe8>
 800bf4a:	0649      	lsls	r1, r1, #25
 800bf4c:	bf48      	it	mi
 800bf4e:	b2ad      	uxthmi	r5, r5
 800bf50:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf52:	4853      	ldr	r0, [pc, #332]	@ (800c0a0 <_printf_i+0x238>)
 800bf54:	6033      	str	r3, [r6, #0]
 800bf56:	bf14      	ite	ne
 800bf58:	230a      	movne	r3, #10
 800bf5a:	2308      	moveq	r3, #8
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf62:	6866      	ldr	r6, [r4, #4]
 800bf64:	60a6      	str	r6, [r4, #8]
 800bf66:	2e00      	cmp	r6, #0
 800bf68:	bfa2      	ittt	ge
 800bf6a:	6821      	ldrge	r1, [r4, #0]
 800bf6c:	f021 0104 	bicge.w	r1, r1, #4
 800bf70:	6021      	strge	r1, [r4, #0]
 800bf72:	b90d      	cbnz	r5, 800bf78 <_printf_i+0x110>
 800bf74:	2e00      	cmp	r6, #0
 800bf76:	d04b      	beq.n	800c010 <_printf_i+0x1a8>
 800bf78:	4616      	mov	r6, r2
 800bf7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf7e:	fb03 5711 	mls	r7, r3, r1, r5
 800bf82:	5dc7      	ldrb	r7, [r0, r7]
 800bf84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf88:	462f      	mov	r7, r5
 800bf8a:	42bb      	cmp	r3, r7
 800bf8c:	460d      	mov	r5, r1
 800bf8e:	d9f4      	bls.n	800bf7a <_printf_i+0x112>
 800bf90:	2b08      	cmp	r3, #8
 800bf92:	d10b      	bne.n	800bfac <_printf_i+0x144>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	07df      	lsls	r7, r3, #31
 800bf98:	d508      	bpl.n	800bfac <_printf_i+0x144>
 800bf9a:	6923      	ldr	r3, [r4, #16]
 800bf9c:	6861      	ldr	r1, [r4, #4]
 800bf9e:	4299      	cmp	r1, r3
 800bfa0:	bfde      	ittt	le
 800bfa2:	2330      	movle	r3, #48	@ 0x30
 800bfa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bfac:	1b92      	subs	r2, r2, r6
 800bfae:	6122      	str	r2, [r4, #16]
 800bfb0:	f8cd a000 	str.w	sl, [sp]
 800bfb4:	464b      	mov	r3, r9
 800bfb6:	aa03      	add	r2, sp, #12
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4640      	mov	r0, r8
 800bfbc:	f7ff fee6 	bl	800bd8c <_printf_common>
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	d14a      	bne.n	800c05a <_printf_i+0x1f2>
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc8:	b004      	add	sp, #16
 800bfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	f043 0320 	orr.w	r3, r3, #32
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	4833      	ldr	r0, [pc, #204]	@ (800c0a4 <_printf_i+0x23c>)
 800bfd8:	2778      	movs	r7, #120	@ 0x78
 800bfda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	6831      	ldr	r1, [r6, #0]
 800bfe2:	061f      	lsls	r7, r3, #24
 800bfe4:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfe8:	d402      	bmi.n	800bff0 <_printf_i+0x188>
 800bfea:	065f      	lsls	r7, r3, #25
 800bfec:	bf48      	it	mi
 800bfee:	b2ad      	uxthmi	r5, r5
 800bff0:	6031      	str	r1, [r6, #0]
 800bff2:	07d9      	lsls	r1, r3, #31
 800bff4:	bf44      	itt	mi
 800bff6:	f043 0320 	orrmi.w	r3, r3, #32
 800bffa:	6023      	strmi	r3, [r4, #0]
 800bffc:	b11d      	cbz	r5, 800c006 <_printf_i+0x19e>
 800bffe:	2310      	movs	r3, #16
 800c000:	e7ac      	b.n	800bf5c <_printf_i+0xf4>
 800c002:	4827      	ldr	r0, [pc, #156]	@ (800c0a0 <_printf_i+0x238>)
 800c004:	e7e9      	b.n	800bfda <_printf_i+0x172>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	f023 0320 	bic.w	r3, r3, #32
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	e7f6      	b.n	800bffe <_printf_i+0x196>
 800c010:	4616      	mov	r6, r2
 800c012:	e7bd      	b.n	800bf90 <_printf_i+0x128>
 800c014:	6833      	ldr	r3, [r6, #0]
 800c016:	6825      	ldr	r5, [r4, #0]
 800c018:	6961      	ldr	r1, [r4, #20]
 800c01a:	1d18      	adds	r0, r3, #4
 800c01c:	6030      	str	r0, [r6, #0]
 800c01e:	062e      	lsls	r6, r5, #24
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	d501      	bpl.n	800c028 <_printf_i+0x1c0>
 800c024:	6019      	str	r1, [r3, #0]
 800c026:	e002      	b.n	800c02e <_printf_i+0x1c6>
 800c028:	0668      	lsls	r0, r5, #25
 800c02a:	d5fb      	bpl.n	800c024 <_printf_i+0x1bc>
 800c02c:	8019      	strh	r1, [r3, #0]
 800c02e:	2300      	movs	r3, #0
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	4616      	mov	r6, r2
 800c034:	e7bc      	b.n	800bfb0 <_printf_i+0x148>
 800c036:	6833      	ldr	r3, [r6, #0]
 800c038:	1d1a      	adds	r2, r3, #4
 800c03a:	6032      	str	r2, [r6, #0]
 800c03c:	681e      	ldr	r6, [r3, #0]
 800c03e:	6862      	ldr	r2, [r4, #4]
 800c040:	2100      	movs	r1, #0
 800c042:	4630      	mov	r0, r6
 800c044:	f7f4 f8ec 	bl	8000220 <memchr>
 800c048:	b108      	cbz	r0, 800c04e <_printf_i+0x1e6>
 800c04a:	1b80      	subs	r0, r0, r6
 800c04c:	6060      	str	r0, [r4, #4]
 800c04e:	6863      	ldr	r3, [r4, #4]
 800c050:	6123      	str	r3, [r4, #16]
 800c052:	2300      	movs	r3, #0
 800c054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c058:	e7aa      	b.n	800bfb0 <_printf_i+0x148>
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	4632      	mov	r2, r6
 800c05e:	4649      	mov	r1, r9
 800c060:	4640      	mov	r0, r8
 800c062:	47d0      	blx	sl
 800c064:	3001      	adds	r0, #1
 800c066:	d0ad      	beq.n	800bfc4 <_printf_i+0x15c>
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	079b      	lsls	r3, r3, #30
 800c06c:	d413      	bmi.n	800c096 <_printf_i+0x22e>
 800c06e:	68e0      	ldr	r0, [r4, #12]
 800c070:	9b03      	ldr	r3, [sp, #12]
 800c072:	4298      	cmp	r0, r3
 800c074:	bfb8      	it	lt
 800c076:	4618      	movlt	r0, r3
 800c078:	e7a6      	b.n	800bfc8 <_printf_i+0x160>
 800c07a:	2301      	movs	r3, #1
 800c07c:	4632      	mov	r2, r6
 800c07e:	4649      	mov	r1, r9
 800c080:	4640      	mov	r0, r8
 800c082:	47d0      	blx	sl
 800c084:	3001      	adds	r0, #1
 800c086:	d09d      	beq.n	800bfc4 <_printf_i+0x15c>
 800c088:	3501      	adds	r5, #1
 800c08a:	68e3      	ldr	r3, [r4, #12]
 800c08c:	9903      	ldr	r1, [sp, #12]
 800c08e:	1a5b      	subs	r3, r3, r1
 800c090:	42ab      	cmp	r3, r5
 800c092:	dcf2      	bgt.n	800c07a <_printf_i+0x212>
 800c094:	e7eb      	b.n	800c06e <_printf_i+0x206>
 800c096:	2500      	movs	r5, #0
 800c098:	f104 0619 	add.w	r6, r4, #25
 800c09c:	e7f5      	b.n	800c08a <_printf_i+0x222>
 800c09e:	bf00      	nop
 800c0a0:	0800c8c1 	.word	0x0800c8c1
 800c0a4:	0800c8d2 	.word	0x0800c8d2

0800c0a8 <memmove>:
 800c0a8:	4288      	cmp	r0, r1
 800c0aa:	b510      	push	{r4, lr}
 800c0ac:	eb01 0402 	add.w	r4, r1, r2
 800c0b0:	d902      	bls.n	800c0b8 <memmove+0x10>
 800c0b2:	4284      	cmp	r4, r0
 800c0b4:	4623      	mov	r3, r4
 800c0b6:	d807      	bhi.n	800c0c8 <memmove+0x20>
 800c0b8:	1e43      	subs	r3, r0, #1
 800c0ba:	42a1      	cmp	r1, r4
 800c0bc:	d008      	beq.n	800c0d0 <memmove+0x28>
 800c0be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0c6:	e7f8      	b.n	800c0ba <memmove+0x12>
 800c0c8:	4402      	add	r2, r0
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	428a      	cmp	r2, r1
 800c0ce:	d100      	bne.n	800c0d2 <memmove+0x2a>
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0da:	e7f7      	b.n	800c0cc <memmove+0x24>

0800c0dc <_sbrk_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d06      	ldr	r5, [pc, #24]	@ (800c0f8 <_sbrk_r+0x1c>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	602b      	str	r3, [r5, #0]
 800c0e8:	f7f7 fe7e 	bl	8003de8 <_sbrk>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_sbrk_r+0x1a>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_sbrk_r+0x1a>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	200010a4 	.word	0x200010a4

0800c0fc <_realloc_r>:
 800c0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c100:	4680      	mov	r8, r0
 800c102:	4615      	mov	r5, r2
 800c104:	460c      	mov	r4, r1
 800c106:	b921      	cbnz	r1, 800c112 <_realloc_r+0x16>
 800c108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c10c:	4611      	mov	r1, r2
 800c10e:	f7ff bc59 	b.w	800b9c4 <_malloc_r>
 800c112:	b92a      	cbnz	r2, 800c120 <_realloc_r+0x24>
 800c114:	f7ff fbea 	bl	800b8ec <_free_r>
 800c118:	2400      	movs	r4, #0
 800c11a:	4620      	mov	r0, r4
 800c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c120:	f000 f81a 	bl	800c158 <_malloc_usable_size_r>
 800c124:	4285      	cmp	r5, r0
 800c126:	4606      	mov	r6, r0
 800c128:	d802      	bhi.n	800c130 <_realloc_r+0x34>
 800c12a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c12e:	d8f4      	bhi.n	800c11a <_realloc_r+0x1e>
 800c130:	4629      	mov	r1, r5
 800c132:	4640      	mov	r0, r8
 800c134:	f7ff fc46 	bl	800b9c4 <_malloc_r>
 800c138:	4607      	mov	r7, r0
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d0ec      	beq.n	800c118 <_realloc_r+0x1c>
 800c13e:	42b5      	cmp	r5, r6
 800c140:	462a      	mov	r2, r5
 800c142:	4621      	mov	r1, r4
 800c144:	bf28      	it	cs
 800c146:	4632      	movcs	r2, r6
 800c148:	f7ff fbc2 	bl	800b8d0 <memcpy>
 800c14c:	4621      	mov	r1, r4
 800c14e:	4640      	mov	r0, r8
 800c150:	f7ff fbcc 	bl	800b8ec <_free_r>
 800c154:	463c      	mov	r4, r7
 800c156:	e7e0      	b.n	800c11a <_realloc_r+0x1e>

0800c158 <_malloc_usable_size_r>:
 800c158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c15c:	1f18      	subs	r0, r3, #4
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bfbc      	itt	lt
 800c162:	580b      	ldrlt	r3, [r1, r0]
 800c164:	18c0      	addlt	r0, r0, r3
 800c166:	4770      	bx	lr

0800c168 <fmaxf>:
 800c168:	b508      	push	{r3, lr}
 800c16a:	ed2d 8b02 	vpush	{d8}
 800c16e:	eeb0 8a40 	vmov.f32	s16, s0
 800c172:	eef0 8a60 	vmov.f32	s17, s1
 800c176:	f000 f831 	bl	800c1dc <__fpclassifyf>
 800c17a:	b930      	cbnz	r0, 800c18a <fmaxf+0x22>
 800c17c:	eeb0 8a68 	vmov.f32	s16, s17
 800c180:	eeb0 0a48 	vmov.f32	s0, s16
 800c184:	ecbd 8b02 	vpop	{d8}
 800c188:	bd08      	pop	{r3, pc}
 800c18a:	eeb0 0a68 	vmov.f32	s0, s17
 800c18e:	f000 f825 	bl	800c1dc <__fpclassifyf>
 800c192:	2800      	cmp	r0, #0
 800c194:	d0f4      	beq.n	800c180 <fmaxf+0x18>
 800c196:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c19e:	dded      	ble.n	800c17c <fmaxf+0x14>
 800c1a0:	e7ee      	b.n	800c180 <fmaxf+0x18>

0800c1a2 <fminf>:
 800c1a2:	b508      	push	{r3, lr}
 800c1a4:	ed2d 8b02 	vpush	{d8}
 800c1a8:	eeb0 8a40 	vmov.f32	s16, s0
 800c1ac:	eef0 8a60 	vmov.f32	s17, s1
 800c1b0:	f000 f814 	bl	800c1dc <__fpclassifyf>
 800c1b4:	b930      	cbnz	r0, 800c1c4 <fminf+0x22>
 800c1b6:	eeb0 8a68 	vmov.f32	s16, s17
 800c1ba:	eeb0 0a48 	vmov.f32	s0, s16
 800c1be:	ecbd 8b02 	vpop	{d8}
 800c1c2:	bd08      	pop	{r3, pc}
 800c1c4:	eeb0 0a68 	vmov.f32	s0, s17
 800c1c8:	f000 f808 	bl	800c1dc <__fpclassifyf>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d0f4      	beq.n	800c1ba <fminf+0x18>
 800c1d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d8:	d5ed      	bpl.n	800c1b6 <fminf+0x14>
 800c1da:	e7ee      	b.n	800c1ba <fminf+0x18>

0800c1dc <__fpclassifyf>:
 800c1dc:	ee10 3a10 	vmov	r3, s0
 800c1e0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c1e4:	d00d      	beq.n	800c202 <__fpclassifyf+0x26>
 800c1e6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c1ea:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c1ee:	d30a      	bcc.n	800c206 <__fpclassifyf+0x2a>
 800c1f0:	4b07      	ldr	r3, [pc, #28]	@ (800c210 <__fpclassifyf+0x34>)
 800c1f2:	1e42      	subs	r2, r0, #1
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d908      	bls.n	800c20a <__fpclassifyf+0x2e>
 800c1f8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c1fc:	4258      	negs	r0, r3
 800c1fe:	4158      	adcs	r0, r3
 800c200:	4770      	bx	lr
 800c202:	2002      	movs	r0, #2
 800c204:	4770      	bx	lr
 800c206:	2004      	movs	r0, #4
 800c208:	4770      	bx	lr
 800c20a:	2003      	movs	r0, #3
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	007ffffe 	.word	0x007ffffe

0800c214 <_init>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	bf00      	nop
 800c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21a:	bc08      	pop	{r3}
 800c21c:	469e      	mov	lr, r3
 800c21e:	4770      	bx	lr

0800c220 <_fini>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr
