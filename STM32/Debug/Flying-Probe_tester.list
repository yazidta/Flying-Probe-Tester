
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018408  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  080185d8  080185d8  000195d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019370  08019370  0001b244  2**0
                  CONTENTS
  4 .ARM          00000008  08019370  08019370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019378  08019378  0001b244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019378  08019378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801937c  0801937c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  08019380  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b7c  20000244  080195c4  0001b244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014dc0  080195c4  0001bdc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032884  00000000  00000000  0001b274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f83  00000000  00000000  0004daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002660  00000000  00000000  00054a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001df1  00000000  00000000  000570e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe45  00000000  00000000  00058ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a8e1  00000000  00000000  00088d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001062cb  00000000  00000000  000c35f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c98c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b370  00000000  00000000  001c9908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001d4c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080185c0 	.word	0x080185c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	080185c0 	.word	0x080185c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f009 fc33 	bl	800a828 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000fc2:	bf00      	nop
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d3f9      	bcc.n	8000fc4 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f009 fc99 	bl	800a908 <HAL_TIM_Base_Stop>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
 8000fec:	4613      	mov	r3, r2
 8000fee:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000ff0:	78bb      	ldrb	r3, [r7, #2]
 8000ff2:	f023 030f 	bic.w	r3, r3, #15
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f043 030c 	orr.w	r3, r3, #12
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <__lcd_i2c_write+0xac>)
 8001006:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <__lcd_i2c_write+0xac>)
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <__lcd_i2c_write+0xac>)
 800100e:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	f023 030f 	bic.w	r3, r3, #15
 8001016:	b2da      	uxtb	r2, r3
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	4313      	orrs	r3, r2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <__lcd_i2c_write+0xac>)
 8001026:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	b2da      	uxtb	r2, r3
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	4313      	orrs	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f043 030c 	orr.w	r3, r3, #12
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <__lcd_i2c_write+0xac>)
 800103c:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <__lcd_i2c_write+0xac>)
 8001040:	78da      	ldrb	r2, [r3, #3]
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <__lcd_i2c_write+0xac>)
 8001044:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001046:	78bb      	ldrb	r3, [r7, #2]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b2da      	uxtb	r2, r3
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	4313      	orrs	r3, r2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__lcd_i2c_write+0xac>)
 800105a:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	889b      	ldrh	r3, [r3, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b299      	uxth	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2306      	movs	r3, #6
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <__lcd_i2c_write+0xac>)
 8001072:	f006 ff77 	bl	8007f64 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2132      	movs	r1, #50	@ 0x32
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff93 	bl	8000fa8 <__lcd_delay_us>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000260 	.word	0x20000260

08001090 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff9c 	bl	8000fe0 <__lcd_i2c_write>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	461a      	mov	r2, r3
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff8c 	bl	8000fe0 <__lcd_i2c_write>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff61 	bl	8000fa8 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80010e6:	2103      	movs	r1, #3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ffd1 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff56 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80010fc:	2103      	movs	r1, #3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffc6 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff4b 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8001112:	2103      	movs	r1, #3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffbb 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff40 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8001128:	2102      	movs	r1, #2
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff35 	bl	8000fa8 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 800113e:	2128      	movs	r1, #40	@ 0x28
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffa5 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 8001146:	210c      	movs	r1, #12
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffa1 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 800114e:	2101      	movs	r1, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff9d 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff22 	bl	8000fa8 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 8001164:	2106      	movs	r1, #6
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff92 	bl	8001090 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	741a      	strb	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff90 	bl	80010b0 <__lcd_i2c_write_data>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e00a      	b.n	80011be <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff7c 	bl	80010b0 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfc      	ldrb	r4, [r7, #15]
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff f825 	bl	8000210 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d3ed      	bcc.n	80011a8 <LCD_I2C_printStr+0x10>
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
	...

080011d8 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
 80011e4:	4613      	mov	r3, r2
 80011e6:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <LCD_I2C_Cursor+0x30>)
 80011ec:	5cd2      	ldrb	r2, [r2, r3]
 80011ee:	78bb      	ldrb	r3, [r7, #2]
 80011f0:	4413      	add	r3, r2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3b80      	subs	r3, #128	@ 0x80
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff48 	bl	8001090 <__lcd_i2c_write_command>
  #endif
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	08018b54 	.word	0x08018b54

0800120c <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
 8001218:	4613      	mov	r3, r2
 800121a:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d90a      	bls.n	8001238 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	3b02      	subs	r3, #2
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	3314      	adds	r3, #20
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ffd1 	bl	80011d8 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 8001236:	e005      	b.n	8001244 <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8001238:	78ba      	ldrb	r2, [r7, #2]
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffca 	bl	80011d8 <LCD_I2C_Cursor>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff1a 	bl	8001090 <__lcd_i2c_write_command>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <LCD_I2C_ClearAllLines>:
void LCD_I2C_ClearAllLines(LCD_I2C_HandleTypeDef * hlcd){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e00d      	b.n	800128e <LCD_I2C_ClearAllLines+0x2a>
        LCD_I2C_SetCursor(hlcd, i, 0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffc6 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // 20 spaces
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <LCD_I2C_ClearAllLines+0x3c>)
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff88 	bl	8001198 <LCD_I2C_printStr>
    for (int i = 0; i < 4; i++) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b03      	cmp	r3, #3
 8001292:	ddee      	ble.n	8001272 <LCD_I2C_ClearAllLines+0xe>
   }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	080185e4 	.word	0x080185e4

080012a4 <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	460b      	mov	r3, r1
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3340      	adds	r3, #64	@ 0x40
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff fee6 	bl	8001090 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]
 80012c8:	e00a      	b.n	80012e0 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff feeb 	bl	80010b0 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	3301      	adds	r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b07      	cmp	r3, #7
 80012e4:	d9f1      	bls.n	80012ca <LCD_I2C_DefineChar+0x26>
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 80012fe:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8001300:	69b8      	ldr	r0, [r7, #24]
 8001302:	f7fe ff85 	bl	8000210 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 800130a:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001314:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	461a      	mov	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffbf 	bl	80012a4 <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	77fb      	strb	r3, [r7, #31]
 800132a:	e025      	b.n	8001378 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	3303      	adds	r3, #3
 8001330:	b2da      	uxtb	r2, r3
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff68 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 800133c:	2100      	movs	r1, #0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff1b 	bl	800117a <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe2b 	bl	8000fa8 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 8001352:	7ffb      	ldrb	r3, [r7, #31]
 8001354:	3303      	adds	r3, #3
 8001356:	b2da      	uxtb	r2, r3
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff55 	bl	800120c <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fe9f 	bl	80010b0 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	3301      	adds	r3, #1
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	7ffa      	ldrb	r2, [r7, #31]
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3d5      	bcc.n	800132c <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	080185fc 	.word	0x080185fc
 8001390:	08018608 	.word	0x08018608

08001394 <LCD_I2C_menuTemplate>:
uint8_t LCD_I2C_menuTemplate(LCD_I2C_HandleTypeDef* hlcd,
                             ENC_Handle_TypeDef* henc,
                             const char* displayItems[],
                             uint8_t numItems,
                             bool backOption)
{
 8001394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001398:	b091      	sub	sp, #68	@ 0x44
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	70fb      	strb	r3, [r7, #3]
 80013a4:	466b      	mov	r3, sp
 80013a6:	461e      	mov	r6, r3
    LCD_I2C_ClearAllLines(hlcd);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ff5b 	bl	8001264 <LCD_I2C_ClearAllLines>

    // Determine total options based on whether a back option is added
    uint8_t totalOptions = backOption ? numItems + 1 : numItems;
 80013ae:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <LCD_I2C_menuTemplate+0x2a>
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	e000      	b.n	80013c0 <LCD_I2C_menuTemplate+0x2c>
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Create a local array to hold the menu items
    const char* menuItems[totalOptions];
 80013c4:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 80013c8:	460b      	mov	r3, r1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80013ce:	b2cb      	uxtb	r3, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	4698      	mov	r8, r3
 80013d4:	4691      	mov	r9, r2
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80013e2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80013e6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80013ea:	b2cb      	uxtb	r3, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	461c      	mov	r4, r3
 80013f0:	4615      	mov	r5, r2
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	016b      	lsls	r3, r5, #5
 80013fc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001400:	0162      	lsls	r2, r4, #5
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3307      	adds	r3, #7
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	ebad 0d03 	sub.w	sp, sp, r3
 8001410:	466b      	mov	r3, sp
 8001412:	3303      	adds	r3, #3
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30

    // Populate the menu items array, inserting "Back" at index 0 if needed.
    if (backOption) {
 800141a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01e      	beq.n	8001460 <LCD_I2C_menuTemplate+0xcc>
        menuItems[0] = "Back";
 8001422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001424:	4a5e      	ldr	r2, [pc, #376]	@ (80015a0 <LCD_I2C_menuTemplate+0x20c>)
 8001426:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800142e:	e010      	b.n	8001452 <LCD_I2C_menuTemplate+0xbe>
            menuItems[i+1] = displayItems[i];
 8001430:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800143e:	3201      	adds	r2, #1
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001448:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800144c:	3301      	adds	r3, #1
 800144e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001452:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001456:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800145a:	429a      	cmp	r2, r3
 800145c:	d3e8      	bcc.n	8001430 <LCD_I2C_menuTemplate+0x9c>
 800145e:	e019      	b.n	8001494 <LCD_I2C_menuTemplate+0x100>
        }
    } else {
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001460:	2300      	movs	r3, #0
 8001462:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001466:	e00f      	b.n	8001488 <LCD_I2C_menuTemplate+0xf4>
            menuItems[i] = displayItems[i];
 8001468:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 800147e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001482:	3301      	adds	r3, #1
 8001484:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001488:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800148c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001490:	429a      	cmp	r2, r3
 8001492:	d3e9      	bcc.n	8001468 <LCD_I2C_menuTemplate+0xd4>
        }
    }

    uint8_t selectedOption = 0;       // Current selected menu item
 8001494:	2300      	movs	r3, #0
 8001496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t previousOption = 255;     // Set to an invalid option to force the first update
 800149a:	23ff      	movs	r3, #255	@ 0xff
 800149c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
//        AddBackOption(menuItems, totalOptions);
//    }

    while (1) {
        // Get the current encoder step count (assuming ENC_GetCounter returns a signed value if needed)
        uint32_t encoderStep = ENC_GetCounter(henc);
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f002 f84b 	bl	800353c <ENC_GetCounter>
 80014a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        // Normalize encoder steps to the range of [0, totalOptions-1]
        selectedOption = encoderStep % totalOptions;
 80014a8:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80014b2:	fb01 f202 	mul.w	r2, r1, r2
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        // (Since selectedOption is unsigned, the check for negative values is unnecessary.)

        // Update the display only if the selection has changed
        if (selectedOption != previousOption) {
 80014bc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014c0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d042      	beq.n	800154e <LCD_I2C_menuTemplate+0x1ba>
            previousOption = selectedOption;
 80014c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

            // Clear the display lines
            LCD_I2C_ClearAllLines(hlcd);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fec7 	bl	8001264 <LCD_I2C_ClearAllLines>

            // Update menu display with the current menu items
            for (uint8_t i = 0; i < totalOptions; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80014dc:	e031      	b.n	8001542 <LCD_I2C_menuTemplate+0x1ae>
                LCD_I2C_SetCursor(hlcd, i, 0);
 80014de:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80014e2:	2200      	movs	r2, #0
 80014e4:	4619      	mov	r1, r3
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fe90 	bl	800120c <LCD_I2C_SetCursor>

                char formattedLine[21];
                if (i == selectedOption) {
 80014ec:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10b      	bne.n	8001510 <LCD_I2C_menuTemplate+0x17c>
                    // Highlight the selected item
                    snprintf(formattedLine, sizeof(formattedLine), ">%-19s", menuItems[i]);
 80014f8:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	f107 0010 	add.w	r0, r7, #16
 8001506:	4a27      	ldr	r2, [pc, #156]	@ (80015a4 <LCD_I2C_menuTemplate+0x210>)
 8001508:	2115      	movs	r1, #21
 800150a:	f014 febb 	bl	8016284 <sniprintf>
 800150e:	e00a      	b.n	8001526 <LCD_I2C_menuTemplate+0x192>
                } else {
                    snprintf(formattedLine, sizeof(formattedLine), " %-19s", menuItems[i]);
 8001510:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	f107 0010 	add.w	r0, r7, #16
 800151e:	4a22      	ldr	r2, [pc, #136]	@ (80015a8 <LCD_I2C_menuTemplate+0x214>)
 8001520:	2115      	movs	r1, #21
 8001522:	f014 feaf 	bl	8016284 <sniprintf>
                }
                LCD_I2C_printStr(hlcd, formattedLine);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fe33 	bl	8001198 <LCD_I2C_printStr>
                osDelay(1);
 8001532:	2001      	movs	r0, #1
 8001534:	f010 ffe5 	bl	8012502 <osDelay>
            for (uint8_t i = 0; i < totalOptions; i++) {
 8001538:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800153c:	3301      	adds	r3, #1
 800153e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001542:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001546:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800154a:	429a      	cmp	r2, r3
 800154c:	d3c7      	bcc.n	80014de <LCD_I2C_menuTemplate+0x14a>
            }
        }

        // Check for the selection button press
        bool buttonInput = read_buttons();
 800154e:	f000 f82f 	bl	80015b0 <read_buttons>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (buttonInput == 0) {
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d013      	beq.n	800158e <LCD_I2C_menuTemplate+0x1fa>
            osDelay(200); // Debounce delay
 8001566:	20c8      	movs	r0, #200	@ 0xc8
 8001568:	f010 ffcb 	bl	8012502 <osDelay>
            if (selectedOption == 0 && backOption) {
 800156c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001570:	2b00      	cmp	r3, #0
 8001572:	d108      	bne.n	8001586 <LCD_I2C_menuTemplate+0x1f2>
 8001574:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <LCD_I2C_menuTemplate+0x1f2>
                currentState = MENU_STATE_PREPARE_MACHINE;
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <LCD_I2C_menuTemplate+0x218>)
 800157e:	2206      	movs	r2, #6
 8001580:	701a      	strb	r2, [r3, #0]

                return ;
 8001582:	46b5      	mov	sp, r6
 8001584:	e007      	b.n	8001596 <LCD_I2C_menuTemplate+0x202>
            } else {
                return selectedOption;
 8001586:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158a:	46b5      	mov	sp, r6
 800158c:	e003      	b.n	8001596 <LCD_I2C_menuTemplate+0x202>
            }
        }

        // Delay for smoother updates
        osDelay(100);
 800158e:	2064      	movs	r0, #100	@ 0x64
 8001590:	f010 ffb7 	bl	8012502 <osDelay>
    while (1) {
 8001594:	e784      	b.n	80014a0 <LCD_I2C_menuTemplate+0x10c>
    }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3744      	adds	r7, #68	@ 0x44
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	0801867c 	.word	0x0801867c
 80015a4:	08018684 	.word	0x08018684
 80015a8:	0801868c 	.word	0x0801868c
 80015ac:	20008a50 	.word	0x20008a50

080015b0 <read_buttons>:
//}



bool read_buttons(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin) == GPIO_PIN_SET) return 1; // Down
 80015b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <read_buttons+0x20>)
 80015ba:	f006 fbed 	bl	8007d98 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <read_buttons+0x18>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <read_buttons+0x1a>
    else return 0;
 80015c8:	2300      	movs	r3, #0

}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <MountSDCard>:


FRESULT MountSDCard(FATFS* FatFs) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    return f_mount(FatFs, "", 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	4904      	ldr	r1, [pc, #16]	@ (80015f0 <MountSDCard+0x1c>)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f00f fd75 	bl	80110d0 <f_mount>
 80015e6:	4603      	mov	r3, r0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08018694 	.word	0x08018694

080015f4 <OpenRootDir>:

FRESULT OpenRootDir(DIR* dir) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    return f_opendir(dir, "/");
 80015fc:	4904      	ldr	r1, [pc, #16]	@ (8001610 <OpenRootDir+0x1c>)
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f010 fc4f 	bl	8011ea2 <f_opendir>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	08018698 	.word	0x08018698

08001614 <ReadFiles>:

uint8_t ReadFiles(DIR* dir, char fileList[][20 + 1], uint8_t maxFiles) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b0cc      	sub	sp, #304	@ 0x130
 8001618:	af00      	add	r7, sp, #0
 800161a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800161e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001628:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800162c:	6019      	str	r1, [r3, #0]
 800162e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001632:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8001636:	701a      	strb	r2, [r3, #0]
    FILINFO fno;
    uint8_t count = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    FRESULT fres;

    while (count < maxFiles) {
 800163e:	e039      	b.n	80016b4 <ReadFiles+0xa0>
        fres = f_readdir(dir, &fno);
 8001640:	f107 0214 	add.w	r2, r7, #20
 8001644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001648:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800164c:	4611      	mov	r1, r2
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f010 fd17 	bl	8012082 <f_readdir>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
        if (fres != FR_OK || fno.fname[0] == '\0') break;
 800165a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800165e:	2b00      	cmp	r3, #0
 8001660:	d131      	bne.n	80016c6 <ReadFiles+0xb2>
 8001662:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001666:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800166a:	7d9b      	ldrb	r3, [r3, #22]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02a      	beq.n	80016c6 <ReadFiles+0xb2>
        if (!(fno.fattrib & AM_DIR)) {
 8001670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001674:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001678:	7a1b      	ldrb	r3, [r3, #8]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <ReadFiles+0xa0>
            snprintf(fileList[count], 20 + 1, "%-20s", fno.fname);
 8001682:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	00da      	lsls	r2, r3, #3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001694:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	18d0      	adds	r0, r2, r3
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	3316      	adds	r3, #22
 80016a2:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <ReadFiles+0xc0>)
 80016a4:	2115      	movs	r1, #21
 80016a6:	f014 fded 	bl	8016284 <sniprintf>
            count++;
 80016aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80016ae:	3301      	adds	r3, #1
 80016b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    while (count < maxFiles) {
 80016b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80016bc:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3bc      	bcc.n	8001640 <ReadFiles+0x2c>
        }
    }

    return count;
 80016c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	0801869c 	.word	0x0801869c

080016d8 <DisplayMenu>:

void AddBackOption(char menuItems[][20 + 1], uint8_t index) {
    snprintf(menuItems[index], 20 + 1, "%-20s", "Back");
}

void DisplayMenu(LCD_I2C_HandleTypeDef* hlcd, char fileList[][20 + 1], uint8_t fileCount, uint8_t selectedIndex) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4611      	mov	r1, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	4613      	mov	r3, r2
 80016ec:	71bb      	strb	r3, [r7, #6]
    // Clear the LCD
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80016f4:	e00f      	b.n	8001716 <DisplayMenu+0x3e>
        LCD_I2C_SetCursor(hlcd, i, 0);
 80016f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fd84 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001704:	493d      	ldr	r1, [pc, #244]	@ (80017fc <DisplayMenu+0x124>)
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff fd46 	bl	8001198 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 800170c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001710:	3301      	adds	r3, #1
 8001712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800171a:	2b03      	cmp	r3, #3
 800171c:	d9eb      	bls.n	80016f6 <DisplayMenu+0x1e>
    }

    // Determine the window of files to display
    uint8_t startIdx = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    if (selectedIndex >= LCD_ROWS) {
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d903      	bls.n	8001732 <DisplayMenu+0x5a>
        startIdx = selectedIndex - (LCD_ROWS - 1);
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	3b03      	subs	r3, #3
 800172e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001732:	2300      	movs	r3, #0
 8001734:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001738:	e057      	b.n	80017ea <DisplayMenu+0x112>
        uint8_t displayIdx = startIdx + i;
 800173a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800173e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001742:	4413      	add	r3, r2
 8001744:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        if (displayIdx >= fileCount) {
 8001748:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	429a      	cmp	r2, r3
 8001750:	d30b      	bcc.n	800176a <DisplayMenu+0x92>
            // Clear remaining lines if any
            LCD_I2C_SetCursor(hlcd, i, 0);
 8001752:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fd56 	bl	800120c <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "                    ");
 8001760:	4926      	ldr	r1, [pc, #152]	@ (80017fc <DisplayMenu+0x124>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fd18 	bl	8001198 <LCD_I2C_printStr>
 8001768:	e03a      	b.n	80017e0 <DisplayMenu+0x108>
            continue;
        }

        // Prepare the formatted line with cursor
        char formattedLine[20 + 1] = {0};
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	741a      	strb	r2, [r3, #16]
        if (displayIdx == selectedIndex) {
 800177e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	429a      	cmp	r2, r3
 8001786:	d10f      	bne.n	80017a8 <DisplayMenu+0xd0>
            snprintf(formattedLine, sizeof(formattedLine), "> %-19s", fileList[displayIdx]);
 8001788:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00da      	lsls	r2, r3, #3
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4413      	add	r3, r2
 800179a:	f107 0014 	add.w	r0, r7, #20
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <DisplayMenu+0x128>)
 80017a0:	2115      	movs	r1, #21
 80017a2:	f014 fd6f 	bl	8016284 <sniprintf>
 80017a6:	e00e      	b.n	80017c6 <DisplayMenu+0xee>
        } else {
            snprintf(formattedLine, sizeof(formattedLine), "  %-19s", fileList[displayIdx]);
 80017a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	f107 0014 	add.w	r0, r7, #20
 80017be:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <DisplayMenu+0x12c>)
 80017c0:	2115      	movs	r1, #21
 80017c2:	f014 fd5f 	bl	8016284 <sniprintf>
        }

        // Write to the LCD
        LCD_I2C_SetCursor(hlcd, i, 0);
 80017c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff fd1c 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, formattedLine);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fcdc 	bl	8001198 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80017e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017e4:	3301      	adds	r3, #1
 80017e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80017ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d9a3      	bls.n	800173a <DisplayMenu+0x62>
    }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	@ 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	080185e4 	.word	0x080185e4
 8001800:	080186a4 	.word	0x080186a4
 8001804:	080186ac 	.word	0x080186ac

08001808 <LCD_I2C_DisplaySDMenu>:

void LCD_I2C_DisplaySDMenu(LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	f2ad 4d64 	subw	sp, sp, #1124	@ 0x464
 800180e:	af00      	add	r7, sp, #0
 8001810:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001814:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001818:	6018      	str	r0, [r3, #0]
 800181a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800181e:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001822:	6019      	str	r1, [r3, #0]
    FATFS FatFs;
    FRESULT fres;
    DIR dir;
    char fileList[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    char fileListBackoption[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    uint8_t fileCount = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3453 	strb.w	r3, [r7, #1107]	@ 0x453

    fres = MountSDCard(&FatFs);
 800182a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fed0 	bl	80015d4 <MountSDCard>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3452 	strb.w	r3, [r7, #1106]	@ 0x452
    if (fres != FR_OK) {
 800183a:	f897 3452 	ldrb.w	r3, [r7, #1106]	@ 0x452
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01f      	beq.n	8001882 <LCD_I2C_DisplaySDMenu+0x7a>
    	LCD_I2C_ClearAllLines(hlcd);
 8001842:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001846:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	f7ff fd0a 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001850:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001854:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f7ff fcd5 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Failed to mount");
 8001862:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001866:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800186a:	49a8      	ldr	r1, [pc, #672]	@ (8001b0c <LCD_I2C_DisplaySDMenu+0x304>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f7ff fc93 	bl	8001198 <LCD_I2C_printStr>

        HAL_Delay(2000);
 8001872:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001876:	f005 fbd3 	bl	8007020 <HAL_Delay>
        currentState = MENU_STATE_MAIN;
 800187a:	4ba5      	ldr	r3, [pc, #660]	@ (8001b10 <LCD_I2C_DisplaySDMenu+0x308>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]

        return;
 8001880:	e1c0      	b.n	8001c04 <LCD_I2C_DisplaySDMenu+0x3fc>
    }
    else{
    fres = OpenRootDir(&dir);
 8001882:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff feb4 	bl	80015f4 <OpenRootDir>
 800188c:	4603      	mov	r3, r0
 800188e:	f887 3452 	strb.w	r3, [r7, #1106]	@ 0x452
    if (fres != FR_OK) {
 8001892:	f897 3452 	ldrb.w	r3, [r7, #1106]	@ 0x452
 8001896:	2b00      	cmp	r3, #0
 8001898:	d021      	beq.n	80018de <LCD_I2C_DisplaySDMenu+0xd6>
    	LCD_I2C_ClearAllLines(hlcd);
 800189a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800189e:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	f7ff fcde 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 80018a8:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80018ac:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f7ff fca9 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open dir failed");
 80018ba:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80018be:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80018c2:	4994      	ldr	r1, [pc, #592]	@ (8001b14 <LCD_I2C_DisplaySDMenu+0x30c>)
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	f7ff fc67 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	4992      	ldr	r1, [pc, #584]	@ (8001b18 <LCD_I2C_DisplaySDMenu+0x310>)
 80018ce:	2000      	movs	r0, #0
 80018d0:	f00f fbfe 	bl	80110d0 <f_mount>
        HAL_Delay(2000);
 80018d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018d8:	f005 fba2 	bl	8007020 <HAL_Delay>
        return;
 80018dc:	e192      	b.n	8001c04 <LCD_I2C_DisplaySDMenu+0x3fc>
    }

    fileCount = ReadFiles(&dir, fileList, MAX_FILES);
 80018de:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 80018e2:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 80018e6:	220a      	movs	r2, #10
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fe93 	bl	8001614 <ReadFiles>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 3453 	strb.w	r3, [r7, #1107]	@ 0x453
    f_closedir(&dir);
 80018f4:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 80018f8:	4618      	mov	r0, r3
 80018fa:	f010 fb97 	bl	801202c <f_closedir>
    f_mount(NULL, "", 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	4985      	ldr	r1, [pc, #532]	@ (8001b18 <LCD_I2C_DisplaySDMenu+0x310>)
 8001902:	2000      	movs	r0, #0
 8001904:	f00f fbe4 	bl	80110d0 <f_mount>

    // Add "Back" option

    strncpy(fileListBackoption[0], "Back", 20);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2214      	movs	r2, #20
 800190e:	4983      	ldr	r1, [pc, #524]	@ (8001b1c <LCD_I2C_DisplaySDMenu+0x314>)
 8001910:	4618      	mov	r0, r3
 8001912:	f014 fd80 	bl	8016416 <strncpy>
    for (uint8_t i = 0; i < fileCount; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	f887 345f 	strb.w	r3, [r7, #1119]	@ 0x45f
 800191c:	e02d      	b.n	800197a <LCD_I2C_DisplaySDMenu+0x172>
    	strncpy(fileListBackoption[i + 1], fileList[i], 20);
 800191e:	f897 345f 	ldrb.w	r3, [r7, #1119]	@ 0x45f
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	f107 010c 	add.w	r1, r7, #12
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00da      	lsls	r2, r3, #3
 8001930:	1ad2      	subs	r2, r2, r3
 8001932:	1888      	adds	r0, r1, r2
 8001934:	f897 245f 	ldrb.w	r2, [r7, #1119]	@ 0x45f
 8001938:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	00da      	lsls	r2, r3, #3
 8001944:	1ad2      	subs	r2, r2, r3
 8001946:	188b      	adds	r3, r1, r2
 8001948:	2214      	movs	r2, #20
 800194a:	4619      	mov	r1, r3
 800194c:	f014 fd63 	bl	8016416 <strncpy>
    	fileListBackoption[i + 1][20] = '\0'; // Explicitly null-terminate
 8001950:	f897 345f 	ldrb.w	r3, [r7, #1119]	@ 0x45f
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800195a:	f2a3 4154 	subw	r1, r3, #1108	@ 0x454
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	00da      	lsls	r2, r3, #3
 8001966:	1ad2      	subs	r2, r2, r3
 8001968:	188b      	adds	r3, r1, r2
 800196a:	3314      	adds	r3, #20
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < fileCount; i++) {
 8001970:	f897 345f 	ldrb.w	r3, [r7, #1119]	@ 0x45f
 8001974:	3301      	adds	r3, #1
 8001976:	f887 345f 	strb.w	r3, [r7, #1119]	@ 0x45f
 800197a:	f897 245f 	ldrb.w	r2, [r7, #1119]	@ 0x45f
 800197e:	f897 3453 	ldrb.w	r3, [r7, #1107]	@ 0x453
 8001982:	429a      	cmp	r2, r3
 8001984:	d3cb      	bcc.n	800191e <LCD_I2C_DisplaySDMenu+0x116>
        }
    fileCount++;
 8001986:	f897 3453 	ldrb.w	r3, [r7, #1107]	@ 0x453
 800198a:	3301      	adds	r3, #1
 800198c:	f887 3453 	strb.w	r3, [r7, #1107]	@ 0x453
   // AddBackOption(fileList, 0);

    if (fileCount == 1) { // Only "Back" is available
 8001990:	f897 3453 	ldrb.w	r3, [r7, #1107]	@ 0x453
 8001994:	2b01      	cmp	r3, #1
 8001996:	d115      	bne.n	80019c4 <LCD_I2C_DisplaySDMenu+0x1bc>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001998:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800199c:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	f7ff fc31 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "No files found");
 80019aa:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80019ae:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80019b2:	495b      	ldr	r1, [pc, #364]	@ (8001b20 <LCD_I2C_DisplaySDMenu+0x318>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	f7ff fbef 	bl	8001198 <LCD_I2C_printStr>
        HAL_Delay(2000);
 80019ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019be:	f005 fb2f 	bl	8007020 <HAL_Delay>
        return;
 80019c2:	e11f      	b.n	8001c04 <LCD_I2C_DisplaySDMenu+0x3fc>
    }

    uint8_t selectedIndex = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3451 	strb.w	r3, [r7, #1105]	@ 0x451
    uint8_t previousIndex = 255;
 80019ca:	23ff      	movs	r3, #255	@ 0xff
 80019cc:	f887 345e 	strb.w	r3, [r7, #1118]	@ 0x45e

    while (1) {
        uint32_t encoderStep = ENC_GetCounter(henc);
 80019d0:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80019d4:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	f001 fdaf 	bl	800353c <ENC_GetCounter>
 80019de:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
        selectedIndex = encoderStep % fileCount;
 80019e2:	f897 2453 	ldrb.w	r2, [r7, #1107]	@ 0x453
 80019e6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80019ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80019ee:	fb01 f202 	mul.w	r2, r1, r2
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	f887 3451 	strb.w	r3, [r7, #1105]	@ 0x451

        if (selectedIndex != previousIndex) {
 80019f8:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 80019fc:	f897 345e 	ldrb.w	r3, [r7, #1118]	@ 0x45e
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d010      	beq.n	8001a26 <LCD_I2C_DisplaySDMenu+0x21e>
            previousIndex = selectedIndex;
 8001a04:	f897 3451 	ldrb.w	r3, [r7, #1105]	@ 0x451
 8001a08:	f887 345e 	strb.w	r3, [r7, #1118]	@ 0x45e
            DisplayMenu(hlcd, fileListBackoption, fileCount, selectedIndex);
 8001a0c:	f897 3451 	ldrb.w	r3, [r7, #1105]	@ 0x451
 8001a10:	f897 2453 	ldrb.w	r2, [r7, #1107]	@ 0x453
 8001a14:	f107 010c 	add.w	r1, r7, #12
 8001a18:	f507 608c 	add.w	r0, r7, #1120	@ 0x460
 8001a1c:	f2a0 405c 	subw	r0, r0, #1116	@ 0x45c
 8001a20:	6800      	ldr	r0, [r0, #0]
 8001a22:	f7ff fe59 	bl	80016d8 <DisplayMenu>
        }

        // Handle button press for selection
        if (read_buttons() == 0) {
 8001a26:	f7ff fdc3 	bl	80015b0 <read_buttons>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f083 0301 	eor.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80e1 	beq.w	8001bfa <LCD_I2C_DisplaySDMenu+0x3f2>
            HAL_Delay(200); // Debounce
 8001a38:	20c8      	movs	r0, #200	@ 0xc8
 8001a3a:	f005 faf1 	bl	8007020 <HAL_Delay>
            // Clear the LCD
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 345d 	strb.w	r3, [r7, #1117]	@ 0x45d
 8001a44:	e016      	b.n	8001a74 <LCD_I2C_DisplaySDMenu+0x26c>
                LCD_I2C_SetCursor(hlcd, i, 0);
 8001a46:	f897 145d 	ldrb.w	r1, [r7, #1117]	@ 0x45d
 8001a4a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001a4e:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001a52:	2200      	movs	r2, #0
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	f7ff fbd9 	bl	800120c <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001a5a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001a5e:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001a62:	4930      	ldr	r1, [pc, #192]	@ (8001b24 <LCD_I2C_DisplaySDMenu+0x31c>)
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	f7ff fb97 	bl	8001198 <LCD_I2C_printStr>
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001a6a:	f897 345d 	ldrb.w	r3, [r7, #1117]	@ 0x45d
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f887 345d 	strb.w	r3, [r7, #1117]	@ 0x45d
 8001a74:	f897 345d 	ldrb.w	r3, [r7, #1117]	@ 0x45d
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d9e4      	bls.n	8001a46 <LCD_I2C_DisplaySDMenu+0x23e>
            }

            if (selectedIndex == 0 ) {
 8001a7c:	f897 3451 	ldrb.w	r3, [r7, #1105]	@ 0x451
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80be 	beq.w	8001c02 <LCD_I2C_DisplaySDMenu+0x3fa>
                // "Back" selected
                return; // Exit the menu to go back to the previous menu
            } else {
                // "Loading..." selected
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8001a86:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001a8a:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	f7ff fbba 	bl	800120c <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Loading...");
 8001a98:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001a9c:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001aa0:	4921      	ldr	r1, [pc, #132]	@ (8001b28 <LCD_I2C_DisplaySDMenu+0x320>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	f7ff fb78 	bl	8001198 <LCD_I2C_printStr>
                char* start = fileListBackoption[selectedIndex];
 8001aa8:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 8001aac:	f107 010c 	add.w	r1, r7, #12
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00da      	lsls	r2, r3, #3
 8001ab8:	1ad2      	subs	r2, r2, r3
 8001aba:	188b      	adds	r3, r1, r2
 8001abc:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
                while (*start == ' ' || *start == '\t' || *start == '\n' || *start == '\r') {
 8001ac0:	e004      	b.n	8001acc <LCD_I2C_DisplaySDMenu+0x2c4>
                    start++; // Skip leading spaces/tabs/newlines
 8001ac2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
                while (*start == ' ' || *start == '\t' || *start == '\n' || *start == '\r') {
 8001acc:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d0f5      	beq.n	8001ac2 <LCD_I2C_DisplaySDMenu+0x2ba>
 8001ad6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	d0f0      	beq.n	8001ac2 <LCD_I2C_DisplaySDMenu+0x2ba>
 8001ae0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d0eb      	beq.n	8001ac2 <LCD_I2C_DisplaySDMenu+0x2ba>
 8001aea:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b0d      	cmp	r3, #13
 8001af2:	d0e6      	beq.n	8001ac2 <LCD_I2C_DisplaySDMenu+0x2ba>
                }

                char* end = start + strlen(start) - 1;
 8001af4:	f8d7 0458 	ldr.w	r0, [r7, #1112]	@ 0x458
 8001af8:	f7fe fb8a 	bl	8000210 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 8001b04:	4413      	add	r3, r2
 8001b06:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
                while (end >= start && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
 8001b0a:	e018      	b.n	8001b3e <LCD_I2C_DisplaySDMenu+0x336>
 8001b0c:	080186b4 	.word	0x080186b4
 8001b10:	20008a50 	.word	0x20008a50
 8001b14:	080186c4 	.word	0x080186c4
 8001b18:	08018694 	.word	0x08018694
 8001b1c:	0801867c 	.word	0x0801867c
 8001b20:	080186d4 	.word	0x080186d4
 8001b24:	080185e4 	.word	0x080185e4
 8001b28:	080186e4 	.word	0x080186e4
                    *end = '\0'; // Remove trailing spaces/tabs/newlines
 8001b2c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
                    end--;
 8001b34:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
                while (end >= start && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
 8001b3e:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8001b42:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d313      	bcc.n	8001b72 <LCD_I2C_DisplaySDMenu+0x36a>
 8001b4a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d0eb      	beq.n	8001b2c <LCD_I2C_DisplaySDMenu+0x324>
 8001b54:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b09      	cmp	r3, #9
 8001b5c:	d0e6      	beq.n	8001b2c <LCD_I2C_DisplaySDMenu+0x324>
 8001b5e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b0a      	cmp	r3, #10
 8001b66:	d0e1      	beq.n	8001b2c <LCD_I2C_DisplaySDMenu+0x324>
 8001b68:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b0d      	cmp	r3, #13
 8001b70:	d0dc      	beq.n	8001b2c <LCD_I2C_DisplaySDMenu+0x324>
                }

                // Move the trimmed string into the original buffer
                if (start != fileListBackoption[selectedIndex]) {
 8001b72:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 8001b76:	f107 010c 	add.w	r1, r7, #12
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	00da      	lsls	r2, r3, #3
 8001b82:	1ad2      	subs	r2, r2, r3
 8001b84:	188b      	adds	r3, r1, r2
 8001b86:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d015      	beq.n	8001bba <LCD_I2C_DisplaySDMenu+0x3b2>
                    memmove(fileListBackoption[selectedIndex], start, strlen(start) + 1);
 8001b8e:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 8001b92:	f107 010c 	add.w	r1, r7, #12
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00da      	lsls	r2, r3, #3
 8001b9e:	1ad2      	subs	r2, r2, r3
 8001ba0:	188c      	adds	r4, r1, r2
 8001ba2:	f8d7 0458 	ldr.w	r0, [r7, #1112]	@ 0x458
 8001ba6:	f7fe fb33 	bl	8000210 <strlen>
 8001baa:	4603      	mov	r3, r0
 8001bac:	3301      	adds	r3, #1
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f8d7 1458 	ldr.w	r1, [r7, #1112]	@ 0x458
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f014 fbdc 	bl	8016372 <memmove>
                }
                process_file(hlcd, fileListBackoption[selectedIndex]);
 8001bba:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 8001bbe:	f107 010c 	add.w	r1, r7, #12
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00da      	lsls	r2, r3, #3
 8001bca:	1ad2      	subs	r2, r2, r3
 8001bcc:	440a      	add	r2, r1
 8001bce:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001bd2:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	f000 f81d 	bl	8001c18 <process_file>
                size_t numLines = sizeof(lines);
 8001bde:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8001be2:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
                ProcessGcode(&axes, &lines, numLines);
 8001be6:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8001bea:	4908      	ldr	r1, [pc, #32]	@ (8001c0c <LCD_I2C_DisplaySDMenu+0x404>)
 8001bec:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <LCD_I2C_DisplaySDMenu+0x408>)
 8001bee:	f002 f9cd 	bl	8003f8c <ProcessGcode>

           	    currentState = MENU_STATE_CALIBRATION;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <LCD_I2C_DisplaySDMenu+0x40c>)
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	701a      	strb	r2, [r3, #0]

                // Add your file processing logic here
                return;
 8001bf8:	e004      	b.n	8001c04 <LCD_I2C_DisplaySDMenu+0x3fc>
            }
        }

        HAL_Delay(100);
 8001bfa:	2064      	movs	r0, #100	@ 0x64
 8001bfc:	f005 fa10 	bl	8007020 <HAL_Delay>
    while (1) {
 8001c00:	e6e6      	b.n	80019d0 <LCD_I2C_DisplaySDMenu+0x1c8>
                return; // Exit the menu to go back to the previous menu
 8001c02:	bf00      	nop
    }
    }
}
 8001c04:	f207 4764 	addw	r7, r7, #1124	@ 0x464
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd90      	pop	{r4, r7, pc}
 8001c0c:	20000268 	.word	0x20000268
 8001c10:	2000c1d0 	.word	0x2000c1d0
 8001c14:	20008a50 	.word	0x20008a50

08001c18 <process_file>:
void process_file(LCD_I2C_HandleTypeDef* hlcd, const char *filename) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	f5ad 6d90 	sub.w	sp, sp, #1152	@ 0x480
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c24:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c28:	6018      	str	r0, [r3, #0]
 8001c2a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c2e:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8001c32:	6019      	str	r1, [r3, #0]
    FATFS FatFs;

    FRESULT fres;
    uint8_t numLines = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f

    // Mount the SD card
    fres = f_mount(&FatFs, "", 1);
 8001c3a:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001c3e:	2201      	movs	r2, #1
 8001c40:	495c      	ldr	r1, [pc, #368]	@ (8001db4 <process_file+0x19c>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00f fa44 	bl	80110d0 <f_mount>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 8001c4e:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d018      	beq.n	8001c88 <process_file+0x70>
    	LCD_I2C_ClearAllLines(hlcd);
 8001c56:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c5a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	f7ff fb00 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001c64:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c68:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	f7ff facb 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "SD mount failed");
 8001c76:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c7a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c7e:	494e      	ldr	r1, [pc, #312]	@ (8001db8 <process_file+0x1a0>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	f7ff fa89 	bl	8001198 <LCD_I2C_printStr>
       // HAL_Delay(2000);
        return;
 8001c86:	e090      	b.n	8001daa <process_file+0x192>
    }
    else{
    // Open the file for reading
    FIL file;
    fres = f_open(&file, filename, FA_READ);
 8001c88:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c8c:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8001c90:	f107 000c 	add.w	r0, r7, #12
 8001c94:	2201      	movs	r2, #1
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	f00f fa7e 	bl	8011198 <f_open>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 8001ca2:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d067      	beq.n	8001d7a <process_file+0x162>
    	LCD_I2C_ClearAllLines(hlcd);
 8001caa:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001cae:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	f7ff fad6 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001cb8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001cbc:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	f7ff faa1 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open file failed");
 8001cca:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001cce:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001cd2:	493a      	ldr	r1, [pc, #232]	@ (8001dbc <process_file+0x1a4>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	f7ff fa5f 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 1);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4935      	ldr	r1, [pc, #212]	@ (8001db4 <process_file+0x19c>)
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f00f f9f6 	bl	80110d0 <f_mount>
 8001ce4:	e061      	b.n	8001daa <process_file+0x192>
    }

    // Read the file line by line and store in the array
    while ((numLines < MAX_LINES) && (f_gets(lines[numLines], MAX_LINE_LENGTH, &file) != NULL)) {
        // Remove trailing newline characters (both '\n' and '\r' if present)
        size_t len = strlen(lines[numLines]);
 8001ce6:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001cea:	019b      	lsls	r3, r3, #6
 8001cec:	4a34      	ldr	r2, [pc, #208]	@ (8001dc0 <process_file+0x1a8>)
 8001cee:	4413      	add	r3, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fa8d 	bl	8000210 <strlen>
 8001cf6:	f8c7 0478 	str.w	r0, [r7, #1144]	@ 0x478
        if (len > 0 && lines[numLines][len - 1] == '\n') {
 8001cfa:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d01b      	beq.n	8001d3a <process_file+0x122>
 8001d02:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d06:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	492c      	ldr	r1, [pc, #176]	@ (8001dc0 <process_file+0x1a8>)
 8001d0e:	0192      	lsls	r2, r2, #6
 8001d10:	440a      	add	r2, r1
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	d10f      	bne.n	8001d3a <process_file+0x122>
            lines[numLines][len - 1] = '\0';
 8001d1a:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d1e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d22:	3b01      	subs	r3, #1
 8001d24:	4926      	ldr	r1, [pc, #152]	@ (8001dc0 <process_file+0x1a8>)
 8001d26:	0192      	lsls	r2, r2, #6
 8001d28:	440a      	add	r2, r1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
            len--;
 8001d30:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d34:	3b01      	subs	r3, #1
 8001d36:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
        }
        if (len > 0 && lines[numLines][len - 1] == '\r') {
 8001d3a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d016      	beq.n	8001d70 <process_file+0x158>
 8001d42:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d46:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	491c      	ldr	r1, [pc, #112]	@ (8001dc0 <process_file+0x1a8>)
 8001d4e:	0192      	lsls	r2, r2, #6
 8001d50:	440a      	add	r2, r1
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b0d      	cmp	r3, #13
 8001d58:	d10a      	bne.n	8001d70 <process_file+0x158>
            lines[numLines][len - 1]= '\0';
 8001d5a:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d5e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d62:	3b01      	subs	r3, #1
 8001d64:	4916      	ldr	r1, [pc, #88]	@ (8001dc0 <process_file+0x1a8>)
 8001d66:	0192      	lsls	r2, r2, #6
 8001d68:	440a      	add	r2, r1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
        }
        numLines++;
 8001d70:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d74:	3301      	adds	r3, #1
 8001d76:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f
    while ((numLines < MAX_LINES) && (f_gets(lines[numLines], MAX_LINE_LENGTH, &file) != NULL)) {
 8001d7a:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d7e:	019b      	lsls	r3, r3, #6
 8001d80:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc0 <process_file+0x1a8>)
 8001d82:	4413      	add	r3, r2
 8001d84:	f107 020c 	add.w	r2, r7, #12
 8001d88:	2140      	movs	r1, #64	@ 0x40
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f010 f9f4 	bl	8012178 <f_gets>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1a7      	bne.n	8001ce6 <process_file+0xce>
    }
    f_close(&file);
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f010 f852 	bl	8011e44 <f_close>
    f_mount(NULL, "", 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <process_file+0x19c>)
 8001da4:	2000      	movs	r0, #0
 8001da6:	f00f f993 	bl	80110d0 <f_mount>
    }
}
 8001daa:	f507 6790 	add.w	r7, r7, #1152	@ 0x480
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	08018694 	.word	0x08018694
 8001db8:	080186f0 	.word	0x080186f0
 8001dbc:	08018700 	.word	0x08018700
 8001dc0:	20000268 	.word	0x20000268

08001dc4 <generate_report>:

void generate_report(LCD_I2C_HandleTypeDef* hlcd)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	f2ad 4dcc 	subw	sp, sp, #1228	@ 0x4cc
 8001dca:	af02      	add	r7, sp, #8
 8001dcc:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001dd0:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001dd4:	6018      	str	r0, [r3, #0]
    // Mount the SD card

	FATFS FatFs;
	FRESULT fres;
	DIR dir;
    fres = MountSDCard(&FatFs);
 8001dd6:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fbfa 	bl	80015d4 <MountSDCard>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
    if (fres != FR_OK) {
 8001de6:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01b      	beq.n	8001e26 <generate_report+0x62>
    	LCD_I2C_ClearAllLines(hlcd);
 8001dee:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001df2:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	f7ff fa34 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001dfc:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e00:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f7ff f9ff 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "SD mount failed");
 8001e0e:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e12:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e16:	496e      	ldr	r1, [pc, #440]	@ (8001fd0 <generate_report+0x20c>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f7ff f9bd 	bl	8001198 <LCD_I2C_printStr>
        currentState = MENU_STATE_MAIN;
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fd4 <generate_report+0x210>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
        return;
 8001e24:	e0cf      	b.n	8001fc6 <generate_report+0x202>
    }
    else{
    const char *reportFilename = "test13.txt";
 8001e26:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd8 <generate_report+0x214>)
 8001e28:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
	FIL file;

    // Open (or create) the report file for writing
    fres = f_open(&file, reportFilename, FA_WRITE | FA_CREATE_ALWAYS);
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	220a      	movs	r2, #10
 8001e32:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	@ 0x4b4
 8001e36:	4618      	mov	r0, r3
 8001e38:	f00f f9ae 	bl	8011198 <f_open>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
    if (fres != FR_OK) {
 8001e42:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01d      	beq.n	8001e86 <generate_report+0xc2>
    	LCD_I2C_ClearAllLines(hlcd);
 8001e4a:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e4e:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	f7ff fa06 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001e58:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e5c:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	f7ff f9d1 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Report file open failed");
 8001e6a:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e6e:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e72:	495a      	ldr	r1, [pc, #360]	@ (8001fdc <generate_report+0x218>)
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	f7ff f98f 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 1);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4958      	ldr	r1, [pc, #352]	@ (8001fe0 <generate_report+0x21c>)
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f00f f926 	bl	80110d0 <f_mount>
 8001e84:	e09f      	b.n	8001fc6 <generate_report+0x202>
        return;
    }
    UINT bw;
    // Write the header line
    const char *header = "  Net           Test Points           Test result\r\n";
 8001e86:	4b57      	ldr	r3, [pc, #348]	@ (8001fe4 <generate_report+0x220>)
 8001e88:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
    f_write(&file, header, strlen(header), &bw);
 8001e8c:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	@ 0x4b0
 8001e90:	f7fe f9be 	bl	8000210 <strlen>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001e9a:	f107 000c 	add.w	r0, r7, #12
 8001e9e:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 8001ea2:	f00f fda2 	bl	80119ea <f_write>

            for(int i =0 ; i < commandsGcode;i++){
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001eac:	e07a      	b.n	8001fa4 <generate_report+0x1e0>
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d",
 8001eae:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4a4b      	ldr	r2, [pc, #300]	@ (8001fe8 <generate_report+0x224>)
 8001ebc:	1898      	adds	r0, r3, r2
                         (int)coordinates[i].x, (int)coordinates[i].y);
 8001ebe:	4a4b      	ldr	r2, [pc, #300]	@ (8001fec <generate_report+0x228>)
 8001ec0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001ec4:	015b      	lsls	r3, r3, #5
 8001ec6:	4413      	add	r3, r2
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d",
 8001ecc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
                         (int)coordinates[i].x, (int)coordinates[i].y);
 8001ed0:	4a46      	ldr	r2, [pc, #280]	@ (8001fec <generate_report+0x228>)
 8001ed2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001ed6:	015b      	lsls	r3, r3, #5
 8001ed8:	4413      	add	r3, r2
 8001eda:	3304      	adds	r3, #4
 8001edc:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d",
 8001ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee4:	ee17 3a90 	vmov	r3, s15
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	ee17 3a10 	vmov	r3, s14
 8001eee:	4a40      	ldr	r2, [pc, #256]	@ (8001ff0 <generate_report+0x22c>)
 8001ef0:	210a      	movs	r1, #10
 8001ef2:	f014 f9c7 	bl	8016284 <sniprintf>


            		const char *result = coordinates[i].testResult ? "PASS" : "FAIL";
 8001ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8001fec <generate_report+0x228>)
 8001ef8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	4413      	add	r3, r2
 8001f00:	3308      	adds	r3, #8
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <generate_report+0x148>
 8001f08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff4 <generate_report+0x230>)
 8001f0a:	e000      	b.n	8001f0e <generate_report+0x14a>
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff8 <generate_report+0x234>)
 8001f0e:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
            		        snprintf(resultStr[i], sizeof(resultStr[i]), "%-4s", result);
 8001f12:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a37      	ldr	r2, [pc, #220]	@ (8001ffc <generate_report+0x238>)
 8001f1e:	1898      	adds	r0, r3, r2
 8001f20:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 8001f24:	4a36      	ldr	r2, [pc, #216]	@ (8002000 <generate_report+0x23c>)
 8001f26:	2105      	movs	r1, #5
 8001f28:	f014 f9ac 	bl	8016284 <sniprintf>



            	snprintf(reportLine[i], sizeof(reportLine[i]),
 8001f2c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f30:	2236      	movs	r2, #54	@ 0x36
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	4a33      	ldr	r2, [pc, #204]	@ (8002004 <generate_report+0x240>)
 8001f38:	1898      	adds	r0, r3, r2
            			 "%-15s %-30s %-5s\n",
            			 coordinates[i].netName, testPointsStr[i], resultStr);
 8001f3a:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f3e:	015b      	lsls	r3, r3, #5
 8001f40:	3308      	adds	r3, #8
 8001f42:	4a2a      	ldr	r2, [pc, #168]	@ (8001fec <generate_report+0x228>)
 8001f44:	4413      	add	r3, r2
 8001f46:	1c59      	adds	r1, r3, #1
 8001f48:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <generate_report+0x224>)
 8001f56:	4413      	add	r3, r2
            	snprintf(reportLine[i], sizeof(reportLine[i]),
 8001f58:	4a28      	ldr	r2, [pc, #160]	@ (8001ffc <generate_report+0x238>)
 8001f5a:	9201      	str	r2, [sp, #4]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4a29      	ldr	r2, [pc, #164]	@ (8002008 <generate_report+0x244>)
 8001f62:	2136      	movs	r1, #54	@ 0x36
 8001f64:	f014 f98e 	bl	8016284 <sniprintf>
                f_write(&file, reportLine[i], strlen(reportLine[i]), &bw);
 8001f68:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f6c:	2236      	movs	r2, #54	@ 0x36
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <generate_report+0x240>)
 8001f74:	189c      	adds	r4, r3, r2
 8001f76:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f7a:	2236      	movs	r2, #54	@ 0x36
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	4a20      	ldr	r2, [pc, #128]	@ (8002004 <generate_report+0x240>)
 8001f82:	4413      	add	r3, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe f943 	bl	8000210 <strlen>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001f90:	f107 000c 	add.w	r0, r7, #12
 8001f94:	4621      	mov	r1, r4
 8001f96:	f00f fd28 	bl	80119ea <f_write>
            for(int i =0 ; i < commandsGcode;i++){
 8001f9a:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001fa4:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8001fa8:	4b18      	ldr	r3, [pc, #96]	@ (800200c <generate_report+0x248>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f4ff af7e 	bcc.w	8001eae <generate_report+0xea>


            }
    //f_write(&file, reportLine, strlen(reportLine), &bw);
    f_close(&file);
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00f ff44 	bl	8011e44 <f_close>
    f_mount(NULL, "", 1);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4908      	ldr	r1, [pc, #32]	@ (8001fe0 <generate_report+0x21c>)
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f00f f885 	bl	80110d0 <f_mount>
}
}
 8001fc6:	f207 47c4 	addw	r7, r7, #1220	@ 0x4c4
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	080186f0 	.word	0x080186f0
 8001fd4:	20008a50 	.word	0x20008a50
 8001fd8:	08018714 	.word	0x08018714
 8001fdc:	08018720 	.word	0x08018720
 8001fe0:	08018694 	.word	0x08018694
 8001fe4:	08018738 	.word	0x08018738
 8001fe8:	200087d8 	.word	0x200087d8
 8001fec:	20008a70 	.word	0x20008a70
 8001ff0:	0801876c 	.word	0x0801876c
 8001ff4:	08018778 	.word	0x08018778
 8001ff8:	08018780 	.word	0x08018780
 8001ffc:	20008968 	.word	0x20008968
 8002000:	08018788 	.word	0x08018788
 8002004:	20007f68 	.word	0x20007f68
 8002008:	08018790 	.word	0x08018790
 800200c:	2000aff0 	.word	0x2000aff0

08002010 <HAL_TIM_PWM_PulseFinishedCallback>:

////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e089      	b.n	8002132 <HAL_TIM_PWM_PulseFinishedCallback+0x122>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4949      	ldr	r1, [pc, #292]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	20a4      	movs	r0, #164	@ 0xa4
 8002028:	fb00 f303 	mul.w	r3, r0, r3
 800202c:	440b      	add	r3, r1
 800202e:	3310      	adds	r3, #16
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d179      	bne.n	800212c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
		  motors[i].stepsTaken++;
 8002038:	4a43      	ldr	r2, [pc, #268]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	21a4      	movs	r1, #164	@ 0xa4
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3370      	adds	r3, #112	@ 0x70
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	493f      	ldr	r1, [pc, #252]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	20a4      	movs	r0, #164	@ 0xa4
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	440b      	add	r3, r1
 8002056:	3370      	adds	r3, #112	@ 0x70
 8002058:	601a      	str	r2, [r3, #0]
		  //TMC2209_CountDistance(&motors[i]);
		  if(motors[i].direction == GPIO_PIN_SET){
 800205a:	4a3b      	ldr	r2, [pc, #236]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	21a4      	movs	r1, #164	@ 0xa4
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	337c      	adds	r3, #124	@ 0x7c
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d111      	bne.n	8002092 <HAL_TIM_PWM_PulseFinishedCallback+0x82>
		  		  motors[i].StepsFront++;
 800206e:	4a36      	ldr	r2, [pc, #216]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	21a4      	movs	r1, #164	@ 0xa4
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3390      	adds	r3, #144	@ 0x90
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	4931      	ldr	r1, [pc, #196]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	20a4      	movs	r0, #164	@ 0xa4
 8002086:	fb00 f303 	mul.w	r3, r0, r3
 800208a:	440b      	add	r3, r1
 800208c:	3390      	adds	r3, #144	@ 0x90
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e01a      	b.n	80020c8 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>

		  }

		  else if(motors[i].direction == GPIO_PIN_RESET){
 8002092:	4a2d      	ldr	r2, [pc, #180]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	21a4      	movs	r1, #164	@ 0xa4
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	337c      	adds	r3, #124	@ 0x7c
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d110      	bne.n	80020c8 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>
			  	  motors[i].StepsBack++;
 80020a6:	4a28      	ldr	r2, [pc, #160]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	21a4      	movs	r1, #164	@ 0xa4
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3394      	adds	r3, #148	@ 0x94
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	4923      	ldr	r1, [pc, #140]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	20a4      	movs	r0, #164	@ 0xa4
 80020be:	fb00 f303 	mul.w	r3, r0, r3
 80020c2:	440b      	add	r3, r1
 80020c4:	3394      	adds	r3, #148	@ 0x94
 80020c6:	601a      	str	r2, [r3, #0]

		  }
          if (motors[i].stepsTaken % motors[i].stepsPerRevolution == 0){ // Count Full steps
 80020c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	21a4      	movs	r1, #164	@ 0xa4
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3370      	adds	r3, #112	@ 0x70
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	491b      	ldr	r1, [pc, #108]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	20a4      	movs	r0, #164	@ 0xa4
 80020e0:	fb00 f303 	mul.w	r3, r0, r3
 80020e4:	440b      	add	r3, r1
 80020e6:	3364      	adds	r3, #100	@ 0x64
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d119      	bne.n	800212c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
              motors[i].driver.checkSG_RESULT = 1;
 80020f8:	4a13      	ldr	r2, [pc, #76]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	21a4      	movs	r1, #164	@ 0xa4
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3330      	adds	r3, #48	@ 0x30
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
              motors[i].fullSteps++;
 800210a:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	21a4      	movs	r1, #164	@ 0xa4
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3374      	adds	r3, #116	@ 0x74
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	490a      	ldr	r1, [pc, #40]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	20a4      	movs	r0, #164	@ 0xa4
 8002122:	fb00 f303 	mul.w	r3, r0, r3
 8002126:	440b      	add	r3, r1
 8002128:	3374      	adds	r3, #116	@ 0x74
 800212a:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3301      	adds	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b03      	cmp	r3, #3
 8002136:	f77f af72 	ble.w	800201e <HAL_TIM_PWM_PulseFinishedCallback+0xe>
          }
      }

    }
  }
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	2000bf40 	.word	0x2000bf40

0800214c <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	4619      	mov	r1, r3
 8002166:	f005 fe2f 	bl	8007dc8 <HAL_GPIO_WritePin>
    motor->direction = state;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4619      	mov	r1, r3
 8002192:	f005 fe19 	bl	8007dc8 <HAL_GPIO_WritePin>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	617b      	str	r3, [r7, #20]
//		StepFrequency = StepFrequency / 3;
//		motor->driver.htim->Init.Prescaler = prescaler / 3; // Update prescaler
//		HAL_TIM_Base_Init(motor->driver.htim);
//		HAL_TIM_PWM_Init(motor->driver.htim);
//	};
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 80021b0:	f007 f8c2 	bl	8009338 <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <TMC2209_SetSpeed+0x54>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	0852      	lsrs	r2, r2, #1
 80021ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80021f0:	e031      	b.n	8002256 <TMC2209_SetSpeed+0xb8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d106      	bne.n	8002208 <TMC2209_SetSpeed+0x6a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	085b      	lsrs	r3, r3, #1
 8002204:	6393      	str	r3, [r2, #56]	@ 0x38
 8002206:	e026      	b.n	8002256 <TMC2209_SetSpeed+0xb8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d106      	bne.n	800221e <TMC2209_SetSpeed+0x80>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800221c:	e01b      	b.n	8002256 <TMC2209_SetSpeed+0xb8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d106      	bne.n	8002234 <TMC2209_SetSpeed+0x96>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	e010      	b.n	8002256 <TMC2209_SetSpeed+0xb8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	2b10      	cmp	r3, #16
 800223a:	d106      	bne.n	800224a <TMC2209_SetSpeed+0xac>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	6593      	str	r3, [r2, #88]	@ 0x58
 8002248:	e005      	b.n	8002256 <TMC2209_SetSpeed+0xb8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	65d3      	str	r3, [r2, #92]	@ 0x5c
    motor->driver.stepFrequency = StepFrequency;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	619a      	str	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8002278:	2101      	movs	r1, #1
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff7c 	bl	8002178 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f008 fe7a 	bl	800af7c <HAL_TIM_PWM_Stop_IT>
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 80022a4:	2100      	movs	r1, #0
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff66 	bl	8002178 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f008 fd1c 	bl	800acec <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <TMC2209_CountSteps>:


static void TMC2209_CountSteps(Motor *motor, uint32_t totalSteps){ // Static for now unless we need to expose it later
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
	motor->nextTotalSteps = totalSteps;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	679a      	str	r2, [r3, #120]	@ 0x78
	motor->stepsTaken = 0;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	671a      	str	r2, [r3, #112]	@ 0x70

	while (motor->stepsTaken <= motor->nextTotalSteps) {// Wait until we reach required steps and increment position on every step
 80022da:	bf00      	nop
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d9f8      	bls.n	80022dc <TMC2209_CountSteps+0x18>
    // vTaskDelay(10);
	}
	//HAL_Delay(1); // To not fad the cpu --NOTE: CHECK IF THERE SHOULD BE A DELAY

	motor->nextTotalSteps = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	679a      	str	r2, [r3, #120]	@ 0x78
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <TMC2209_MoveTo>:

void TMC2209_checkStatus(Motor *motor, bool *isStepping, uint32_t *nextTotalSteps){
	 *isStepping = motor->isStepping;
     *nextTotalSteps = motor->nextTotalSteps;
}
void TMC2209_MoveTo(Axis *axis, uint8_t motorIndex, float targetPositionMM) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	460b      	mov	r3, r1
 8002306:	ed87 0a01 	vstr	s0, [r7, #4]
 800230a:	72fb      	strb	r3, [r7, #11]
    // Validate the motor index

    if (motorIndex >= MAX_MOTORS_PER_AXIS) {
 800230c:	7afb      	ldrb	r3, [r7, #11]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d903      	bls.n	800231a <TMC2209_MoveTo+0x1e>
        debug_print("Invalid motor index.\r\n");
 8002312:	4830      	ldr	r0, [pc, #192]	@ (80023d4 <TMC2209_MoveTo+0xd8>)
 8002314:	f000 f944 	bl	80025a0 <debug_print>
        return;
 8002318:	e059      	b.n	80023ce <TMC2209_MoveTo+0xd2>
//    }

    // Calculate the distance to move in millimeters
    //motor->currentPositionMM =0;

    float distanceToMoveMM = targetPositionMM - axis->motors[motorIndex]->currentPositionMM;
 800231a:	7afa      	ldrb	r2, [r7, #11]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002322:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002326:	ed97 7a01 	vldr	s14, [r7, #4]
 800232a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Convert the distance to move into steps
    int32_t stepsToMove = (int32_t)(distanceToMoveMM * axis->stepPerUnit);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	ed93 7a04 	vldr	s14, [r3, #16]
 8002338:	edd7 7a04 	vldr	s15, [r7, #16]
 800233c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002344:	ee17 3a90 	vmov	r3, s15
 8002348:	617b      	str	r3, [r7, #20]

    // Update the target position in the motor structure
    axis->motors[motorIndex]->nextPositionMM = targetPositionMM;
 800234a:	7afa      	ldrb	r2, [r7, #11]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Decide the direction based on the sign of the steps
    if (stepsToMove > 0) {
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	dd08      	ble.n	8002370 <TMC2209_MoveTo+0x74>
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_RESET); // Forward direction
 800235e:	7afa      	ldrb	r2, [r7, #11]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff feef 	bl	800214c <TMC2209_SetDirection>
 800236e:	e00a      	b.n	8002386 <TMC2209_MoveTo+0x8a>
    } else {
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_SET); // Reverse direction
 8002370:	7afa      	ldrb	r2, [r7, #11]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fee6 	bl	800214c <TMC2209_SetDirection>
        stepsToMove = -stepsToMove; // Convert to positive for step count
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	425b      	negs	r3, r3
 8002384:	617b      	str	r3, [r7, #20]
    }

    // Start the motor

    TMC2209_Start(axis->motors[motorIndex]);
 8002386:	7afa      	ldrb	r2, [r7, #11]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff7e 	bl	8002290 <TMC2209_Start>

    // Set the total steps to move
    axis->motors[motorIndex]->nextTotalSteps = stepsToMove;
 8002394:	7afa      	ldrb	r2, [r7, #11]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	679a      	str	r2, [r3, #120]	@ 0x78
	TMC2209_CountSteps(axis->motors[motorIndex], stepsToMove);
 80023a0:	7afa      	ldrb	r2, [r7, #11]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff89 	bl	80022c4 <TMC2209_CountSteps>

    // Stop the motor
    TMC2209_Stop(axis->motors[motorIndex]);
 80023b2:	7afa      	ldrb	r2, [r7, #11]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff52 	bl	8002264 <TMC2209_Stop>

    // Update the current position in the motor structure
    axis->motors[motorIndex]->currentPositionMM = targetPositionMM;
 80023c0:	7afa      	ldrb	r2, [r7, #11]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

}
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	080187a8 	.word	0x080187a8

080023d8 <TMC2209_MoveAllMotorsTo>:
// Function to move all motors concurrently to their target positions.
// The targetPositionsMM array should have one target position (in millimeters)
// for each motor in the axis. We assume that MAX_MOTORS_PER_AXIS is defined.
void TMC2209_MoveAllMotorsTo(Axis axes[2], float targetPositions[4]) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
    uint8_t axisIndex, motorIndex;
    TMC2209_SetSpeed(&motors[0], 80000);
 80023e2:	496a      	ldr	r1, [pc, #424]	@ (800258c <TMC2209_MoveAllMotorsTo+0x1b4>)
 80023e4:	486a      	ldr	r0, [pc, #424]	@ (8002590 <TMC2209_MoveAllMotorsTo+0x1b8>)
 80023e6:	f7ff feda 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 80000);
 80023ea:	4968      	ldr	r1, [pc, #416]	@ (800258c <TMC2209_MoveAllMotorsTo+0x1b4>)
 80023ec:	4869      	ldr	r0, [pc, #420]	@ (8002594 <TMC2209_MoveAllMotorsTo+0x1bc>)
 80023ee:	f7ff fed6 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 80000);
 80023f2:	4966      	ldr	r1, [pc, #408]	@ (800258c <TMC2209_MoveAllMotorsTo+0x1b4>)
 80023f4:	4868      	ldr	r0, [pc, #416]	@ (8002598 <TMC2209_MoveAllMotorsTo+0x1c0>)
 80023f6:	f7ff fed2 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 80000);
 80023fa:	4964      	ldr	r1, [pc, #400]	@ (800258c <TMC2209_MoveAllMotorsTo+0x1b4>)
 80023fc:	4867      	ldr	r0, [pc, #412]	@ (800259c <TMC2209_MoveAllMotorsTo+0x1c4>)
 80023fe:	f7ff fece 	bl	800219e <TMC2209_SetSpeed>
    // Initialize each motor on both axes.
    // The mapping is:
    //   targetPositions[ axisIndex * MAX_MOTORS_PER_AXIS + motorIndex ]
    for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 8002402:	2300      	movs	r3, #0
 8002404:	77fb      	strb	r3, [r7, #31]
 8002406:	e06d      	b.n	80024e4 <TMC2209_MoveAllMotorsTo+0x10c>
        for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 8002408:	2300      	movs	r3, #0
 800240a:	77bb      	strb	r3, [r7, #30]
 800240c:	e064      	b.n	80024d8 <TMC2209_MoveAllMotorsTo+0x100>
            int targetIndex = axisIndex * MAX_MOTORS_PER_AXIS + motorIndex;
 800240e:	7ffb      	ldrb	r3, [r7, #31]
 8002410:	005a      	lsls	r2, r3, #1
 8002412:	7fbb      	ldrb	r3, [r7, #30]
 8002414:	4413      	add	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
            Motor *motor = axes[axisIndex].motors[motorIndex];
 8002418:	7ffa      	ldrb	r2, [r7, #31]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	461a      	mov	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	7fba      	ldrb	r2, [r7, #30]
 800242a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242e:	613b      	str	r3, [r7, #16]
            if (motor == NULL) {
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d04c      	beq.n	80024d0 <TMC2209_MoveAllMotorsTo+0xf8>
                continue;
            }

            // Calculate the distance (in mm) and convert to steps.
            float distanceToMoveMM = targetPositions[targetIndex] - motor->currentPositionMM;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	4413      	add	r3, r2
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244c:	edc7 7a03 	vstr	s15, [r7, #12]
            int32_t stepsToMove = (int32_t)(distanceToMoveMM * axes[axisIndex].stepPerUnit);
 8002450:	7ffa      	ldrb	r2, [r7, #31]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	461a      	mov	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	ed93 7a04 	vldr	s14, [r3, #16]
 8002464:	edd7 7a03 	vldr	s15, [r7, #12]
 8002468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002470:	ee17 3a90 	vmov	r3, s15
 8002474:	60bb      	str	r3, [r7, #8]

            // Save the absolute number of steps required.
            motor->nextTotalSteps = (stepsToMove >= 0) ? stepsToMove : -stepsToMove;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	bfb8      	it	lt
 800247c:	425b      	neglt	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	679a      	str	r2, [r3, #120]	@ 0x78
            // Reset the steps counter.
            motor->stepsTaken = 0;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2200      	movs	r2, #0
 8002488:	671a      	str	r2, [r3, #112]	@ 0x70
            // Store the target position.
            motor->nextPositionMM = targetPositions[targetIndex];
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	4413      	add	r3, r2
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            // Set the motor direction.
            if (stepsToMove >= 0) {
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db04      	blt.n	80024aa <TMC2209_MoveAllMotorsTo+0xd2>
                TMC2209_SetDirection(motor, GPIO_PIN_RESET);  // Forward
 80024a0:	2100      	movs	r1, #0
 80024a2:	6938      	ldr	r0, [r7, #16]
 80024a4:	f7ff fe52 	bl	800214c <TMC2209_SetDirection>
 80024a8:	e003      	b.n	80024b2 <TMC2209_MoveAllMotorsTo+0xda>
            } else {
                TMC2209_SetDirection(motor, GPIO_PIN_SET);      // Reverse
 80024aa:	2101      	movs	r1, #1
 80024ac:	6938      	ldr	r0, [r7, #16]
 80024ae:	f7ff fe4d 	bl	800214c <TMC2209_SetDirection>
            }

            // Start the motor.
            if(motor->currentPositionMM != motor->nextPositionMM)	TMC2209_Start(motor);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 80024be:	eeb4 7a67 	vcmp.f32	s14, s15
 80024c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c6:	d004      	beq.n	80024d2 <TMC2209_MoveAllMotorsTo+0xfa>
 80024c8:	6938      	ldr	r0, [r7, #16]
 80024ca:	f7ff fee1 	bl	8002290 <TMC2209_Start>
 80024ce:	e000      	b.n	80024d2 <TMC2209_MoveAllMotorsTo+0xfa>
                continue;
 80024d0:	bf00      	nop
        for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 80024d2:	7fbb      	ldrb	r3, [r7, #30]
 80024d4:	3301      	adds	r3, #1
 80024d6:	77bb      	strb	r3, [r7, #30]
 80024d8:	7fbb      	ldrb	r3, [r7, #30]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d997      	bls.n	800240e <TMC2209_MoveAllMotorsTo+0x36>
    for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 80024de:	7ffb      	ldrb	r3, [r7, #31]
 80024e0:	3301      	adds	r3, #1
 80024e2:	77fb      	strb	r3, [r7, #31]
 80024e4:	7ffb      	ldrb	r3, [r7, #31]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d98e      	bls.n	8002408 <TMC2209_MoveAllMotorsTo+0x30>

        }
    }

    // Poll all motors concurrently. Each motor will be stopped as soon as it finishes.
    bool motorsStillRunning = true;
 80024ea:	2301      	movs	r3, #1
 80024ec:	777b      	strb	r3, [r7, #29]
    while (motorsStillRunning) {
 80024ee:	e044      	b.n	800257a <TMC2209_MoveAllMotorsTo+0x1a2>
        motorsStillRunning = false;  // Assume all motors are finished unless one is still moving.
 80024f0:	2300      	movs	r3, #0
 80024f2:	777b      	strb	r3, [r7, #29]

        for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
 80024f8:	e03c      	b.n	8002574 <TMC2209_MoveAllMotorsTo+0x19c>
            for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	77bb      	strb	r3, [r7, #30]
 80024fe:	e033      	b.n	8002568 <TMC2209_MoveAllMotorsTo+0x190>
                Motor *motor = axes[axisIndex].motors[motorIndex];
 8002500:	7ffa      	ldrb	r2, [r7, #31]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	7fba      	ldrb	r2, [r7, #30]
 8002512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002516:	61bb      	str	r3, [r7, #24]
                if (motor == NULL) {
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d020      	beq.n	8002560 <TMC2209_MoveAllMotorsTo+0x188>
                    continue;
                }
                // If this motor still has steps to take...
                if (motor->nextTotalSteps > 0) {
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01d      	beq.n	8002562 <TMC2209_MoveAllMotorsTo+0x18a>
                    if (motor->stepsTaken >= motor->nextTotalSteps) {
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252a:	461a      	mov	r2, r3
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002530:	429a      	cmp	r2, r3
 8002532:	d312      	bcc.n	800255a <TMC2209_MoveAllMotorsTo+0x182>
                        // This motor has reached its target: stop it and update its current position.
                        TMC2209_Stop(motor);
 8002534:	69b8      	ldr	r0, [r7, #24]
 8002536:	f7ff fe95 	bl	8002264 <TMC2209_Stop>
                        motor->prevPositionMM = motor->currentPositionMM;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                        motor->currentPositionMM = motor->nextPositionMM;
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                        // Mark this motor as finished.
                        motor->nextTotalSteps = 0;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2200      	movs	r2, #0
 8002556:	679a      	str	r2, [r3, #120]	@ 0x78
 8002558:	e003      	b.n	8002562 <TMC2209_MoveAllMotorsTo+0x18a>
                    } else {
                        // At least one motor is still moving.
                        motorsStillRunning = true;
 800255a:	2301      	movs	r3, #1
 800255c:	777b      	strb	r3, [r7, #29]
 800255e:	e000      	b.n	8002562 <TMC2209_MoveAllMotorsTo+0x18a>
                    continue;
 8002560:	bf00      	nop
            for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 8002562:	7fbb      	ldrb	r3, [r7, #30]
 8002564:	3301      	adds	r3, #1
 8002566:	77bb      	strb	r3, [r7, #30]
 8002568:	7fbb      	ldrb	r3, [r7, #30]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d9c8      	bls.n	8002500 <TMC2209_MoveAllMotorsTo+0x128>
        for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 800256e:	7ffb      	ldrb	r3, [r7, #31]
 8002570:	3301      	adds	r3, #1
 8002572:	77fb      	strb	r3, [r7, #31]
 8002574:	7ffb      	ldrb	r3, [r7, #31]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d9bf      	bls.n	80024fa <TMC2209_MoveAllMotorsTo+0x122>
    while (motorsStillRunning) {
 800257a:	7f7b      	ldrb	r3, [r7, #29]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1b7      	bne.n	80024f0 <TMC2209_MoveAllMotorsTo+0x118>
        }
        // Delay briefly to avoid hogging the CPU.
        // If you're not using an RTOS, replace vTaskDelay(1) with a suitable delay function (e.g., HAL_Delay(1)).
        //vTaskDelay(1);
    }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	00013880 	.word	0x00013880
 8002590:	2000bf40 	.word	0x2000bf40
 8002594:	2000bfe4 	.word	0x2000bfe4
 8002598:	2000c088 	.word	0x2000c088
 800259c:	2000c12c 	.word	0x2000c12c

080025a0 <debug_print>:
    }
    (void)dummy;
}


void debug_print(const char* msg) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fd fe31 	bl	8000210 <strlen>
 80025ae:	4603      	mov	r3, r0
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4803      	ldr	r0, [pc, #12]	@ (80025c4 <debug_print+0x24>)
 80025b8:	f009 ffb2 	bl	800c520 <HAL_UART_Transmit_DMA>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000b710 	.word	0x2000b710

080025c8 <calculate_CRC>:
    ptr += sprintf(ptr, "]\r\n");

    debug_print(buffer);
}

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 80025d8:	2300      	movs	r3, #0
 80025da:	73bb      	strb	r3, [r7, #14]
 80025dc:	e027      	b.n	800262e <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 80025de:	7bbb      	ldrb	r3, [r7, #14]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	733b      	strb	r3, [r7, #12]
 80025ec:	e019      	b.n	8002622 <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	09db      	lsrs	r3, r3, #7
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	7b7b      	ldrb	r3, [r7, #13]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d007      	beq.n	8002610 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	b25b      	sxtb	r3, r3
 8002606:	f083 0307 	eor.w	r3, r3, #7
 800260a:	b25b      	sxtb	r3, r3
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e002      	b.n	8002616 <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8002616:	7b7b      	ldrb	r3, [r7, #13]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 800261c:	7b3b      	ldrb	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	733b      	strb	r3, [r7, #12]
 8002622:	7b3b      	ldrb	r3, [r7, #12]
 8002624:	2b07      	cmp	r3, #7
 8002626:	d9e2      	bls.n	80025ee <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8002628:	7bbb      	ldrb	r3, [r7, #14]
 800262a:	3301      	adds	r3, #1
 800262c:	73bb      	strb	r3, [r7, #14]
 800262e:	7bba      	ldrb	r2, [r7, #14]
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	429a      	cmp	r2, r3
 8002634:	d3d3      	bcc.n	80025de <calculate_CRC+0x16>
        }
    }
    return crc;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <TMC2209_WaitForReply>:




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 800264c:	f004 fcdc 	bl	8007008 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 8002652:	e00c      	b.n	800266e <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 8002654:	f004 fcd8 	bl	8007008 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d204      	bcs.n	800266e <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 8002664:	4808      	ldr	r0, [pc, #32]	@ (8002688 <TMC2209_WaitForReply+0x44>)
 8002666:	f7ff ff9b 	bl	80025a0 <debug_print>
             return 0; // Timeout
 800266a:	2300      	movs	r3, #0
 800266c:	e008      	b.n	8002680 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <TMC2209_WaitForReply+0x48>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ed      	beq.n	8002654 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8002678:	4b04      	ldr	r3, [pc, #16]	@ (800268c <TMC2209_WaitForReply+0x48>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 800267e:	2301      	movs	r3, #1
 }
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	080187ec 	.word	0x080187ec
 800268c:	20008a48 	.word	0x20008a48

08002690 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6858      	ldr	r0, [r3, #4]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	68f9      	ldr	r1, [r7, #12]
 80026ac:	f009 feae 	bl	800c40c <HAL_UART_Transmit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <TMC2209_sendCommand+0x30>
         if(ENABLE_DEBUG) debug_print("Failed to send command to driver.\r\n");
         tmc2209->driver.STATUS = TMC_SEND_ERROR;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2214      	movs	r2, #20
 80026ba:	60da      	str	r2, [r3, #12]
         return	NULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	e01e      	b.n	80026fe <TMC2209_sendCommand+0x6e>
     }

     if(readLength && (tmc2209->driver.STATUS == TMC_OK)){
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01a      	beq.n	80026fc <TMC2209_sendCommand+0x6c>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d116      	bne.n	80026fc <TMC2209_sendCommand+0x6c>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6858      	ldr	r0, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	490a      	ldr	r1, [pc, #40]	@ (8002708 <TMC2209_sendCommand+0x78>)
 80026de:	f009 ff9b 	bl	800c618 <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 80026e2:	20c8      	movs	r0, #200	@ 0xc8
 80026e4:	f7ff ffae 	bl	8002644 <TMC2209_WaitForReply>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d104      	bne.n	80026f8 <TMC2209_sendCommand+0x68>
    	 if(ENABLE_DEBUG) debug_print("No reply received from driver.\r\n");
    	 tmc2209->driver.STATUS = TMC_NOREPLY_ERROR;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	221e      	movs	r2, #30
 80026f2:	60da      	str	r2, [r3, #12]
         return NULL; // command failed
 80026f4:	2300      	movs	r3, #0
 80026f6:	e002      	b.n	80026fe <TMC2209_sendCommand+0x6e>
     debug_print_hex(command, writeLength);
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
     }
     return rxBuffer; // Success
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <TMC2209_sendCommand+0x7c>)
 80026fa:	e000      	b.n	80026fe <TMC2209_sendCommand+0x6e>
     }
     return NULL;
 80026fc:	2300      	movs	r3, #0
 }
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20008a34 	.word	0x20008a34
 800270c:	20008a40 	.word	0x20008a40

08002710 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	460b      	mov	r3, r1
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 800271e:	2305      	movs	r3, #5
 8002720:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	7a1b      	ldrb	r3, [r3, #8]
 8002726:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800272e:	b2db      	uxtb	r3, r3
 8002730:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0e1b      	lsrs	r3, r3, #24
 8002736:	b2db      	uxtb	r3, r3
 8002738:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	141b      	asrs	r3, r3, #16
 800273e:	b2db      	uxtb	r3, r3
 8002740:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	121b      	asrs	r3, r3, #8
 8002746:	b2db      	uxtb	r3, r3
 8002748:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	2107      	movs	r1, #7
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff36 	bl	80025c8 <calculate_CRC>
 800275c:	4603      	mov	r3, r0
 800275e:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8002760:	f107 0010 	add.w	r0, r7, #16
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	2108      	movs	r1, #8
 800276a:	f7ff ff91 	bl	8002690 <TMC2209_sendCommand>

 }
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 8002776:	b590      	push	{r4, r7, lr}
 8002778:	b087      	sub	sp, #28
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	70fb      	strb	r3, [r7, #3]
	if(tmc2209->driver.STATUS != TMC_OK) return tmc2209->driver.STATUS;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <TMC2209_readInit+0x1a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	e059      	b.n	8002844 <TMC2209_readInit+0xce>
 	uint8_t read_request_command[8] = { 0 };
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
 	read_request_command[0] = SYNC;
 8002798:	2305      	movs	r3, #5
 800279a:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7a1b      	ldrb	r3, [r3, #8]
 80027a0:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	2103      	movs	r1, #3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff0b 	bl	80025c8 <calculate_CRC>
 80027b2:	4603      	mov	r3, r0
 80027b4:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 80027b6:	f107 000c 	add.w	r0, r7, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2208      	movs	r2, #8
 80027be:	2104      	movs	r1, #4
 80027c0:	f7ff ff66 	bl	8002690 <TMC2209_sendCommand>
 80027c4:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d004      	beq.n	80027d8 <TMC2209_readInit+0x62>
 		// If first byte equals 0 then it means no reply so return
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(SYNC Byte)\r\n");
 		return tmc2209->driver.STATUS = TMC_SYNC_REPLY_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2228      	movs	r2, #40	@ 0x28
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	2328      	movs	r3, #40	@ 0x28
 80027d6:	e035      	b.n	8002844 <TMC2209_readInit+0xce>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2bff      	cmp	r3, #255	@ 0xff
 80027e0:	d004      	beq.n	80027ec <TMC2209_readInit+0x76>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(MCU Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_MCU_REPLY_ERROR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2232      	movs	r2, #50	@ 0x32
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	2332      	movs	r3, #50	@ 0x32
 80027ea:	e02b      	b.n	8002844 <TMC2209_readInit+0xce>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3302      	adds	r3, #2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d004      	beq.n	8002802 <TMC2209_readInit+0x8c>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(Register Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_REG_REPLY_ERROR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	223c      	movs	r2, #60	@ 0x3c
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	233c      	movs	r3, #60	@ 0x3c
 8002800:	e020      	b.n	8002844 <TMC2209_readInit+0xce>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3307      	adds	r3, #7
 8002806:	781c      	ldrb	r4, [r3, #0]
 8002808:	2107      	movs	r1, #7
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff fedc 	bl	80025c8 <calculate_CRC>
 8002810:	4603      	mov	r3, r0
 8002812:	429c      	cmp	r4, r3
 8002814:	d004      	beq.n	8002820 <TMC2209_readInit+0xaa>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(CRC)\r\n");
 		return tmc2209->driver.STATUS = TMC_CRC_REPLY_ERROR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2246      	movs	r2, #70	@ 0x46
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	2346      	movs	r3, #70	@ 0x46
 800281e:	e011      	b.n	8002844 <TMC2209_readInit+0xce>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3303      	adds	r3, #3
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	061a      	lsls	r2, r3, #24
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3304      	adds	r3, #4
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	431a      	orrs	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3305      	adds	r3, #5
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	4313      	orrs	r3, r2
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	3206      	adds	r2, #6
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	4313      	orrs	r3, r2
 }
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <TMC2209_setPDNuart>:

bool TMC2209_setPDNuart(Motor *tmc2209, bool enable) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b0aa      	sub	sp, #168	@ 0xa8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
    // Read current GCONF register value from TMC2209_REG_GCONF
    uint32_t currentGCONF = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002858:	2100      	movs	r1, #0
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ff8b 	bl	8002776 <TMC2209_readInit>
 8002860:	4603      	mov	r3, r0
 8002862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        debug_print(debug_msg);
    }

    // Modify the pdn_disable bit (bit 6). When set to 1, pdn_disable is enabled (UART controls the driver).
    // When cleared (0), PDN function is active.
    if (enable) {
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <TMC2209_setPDNuart+0x2e>
        currentGCONF |= 0x00000040; // Set bit 6 to enable PDN_UART
 800286c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002878:	e005      	b.n	8002886 <TMC2209_setPDNuart+0x3a>
        if (ENABLE_DEBUG) {
            debug_print("Enabling PDN_UART (pdn_disable=1).\r\n");
        }
    } else {
        currentGCONF &= ~(0x00000040); // Clear bit 6 to disable PDN_UART
 800287a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800287e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            debug_print("Disabling PDN_UART (pdn_disable=0).\r\n");
        }
    }

    // Write back the updated GCONF register value
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, currentGCONF);
 8002886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800288a:	461a      	mov	r2, r3
 800288c:	2100      	movs	r1, #0
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff3e 	bl	8002710 <TMC2209_writeInit>
    HAL_Delay(3); // Allow time for the write to complete
 8002894:	2003      	movs	r0, #3
 8002896:	f004 fbc3 	bl	8007020 <HAL_Delay>

    // Optionally, check if the write was successful by re-reading the register
    uint32_t updatedGCONF = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 800289a:	2100      	movs	r1, #0
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff6a 	bl	8002776 <TMC2209_readInit>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    HAL_Delay(3);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f004 fbb9 	bl	8007020 <HAL_Delay>
        sprintf(verify_msg, sizeof(verify_msg), "Updated GCONF = 0x%08lX\r\n", updatedGCONF);
        debug_print(verify_msg);
    }

    // Verify that the pdn_disable bit matches the intended configuration
    bool bitSet = (updatedGCONF & 0x00000040) ? true : false;
 80028ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bitSet == enable) {
 80028c4:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d105      	bne.n	80028da <TMC2209_setPDNuart+0x8e>
        return tmc2209->driver.pdn_disable = 1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028d6:	2301      	movs	r3, #1
 80028d8:	e004      	b.n	80028e4 <TMC2209_setPDNuart+0x98>
    } else {
        if (ENABLE_DEBUG) {
            debug_print("PDN_UART configuration failed to update correctly!\r\n");
        }
        return tmc2209->driver.pdn_disable = 0;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028e2:	2300      	movs	r3, #0
    }
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	37a8      	adds	r7, #168	@ 0xa8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <TMC2209_read_ifcnt>:



void TMC2209_read_ifcnt(Motor *tmc2209) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b09c      	sub	sp, #112	@ 0x70
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
     int32_t ifcnt_value = TMC2209_readInit(tmc2209, TMC2209_REG_IFCNT); // IFCNT register address is 0x02
 80028f4:	2102      	movs	r1, #2
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ff3d 	bl	8002776 <TMC2209_readInit>
 80028fc:	66f8      	str	r0, [r7, #108]	@ 0x6c
     if (ifcnt_value >= 0) { // This value gets incremented with every sucessful UART write access 0 to 255 then wraps around.
 80028fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002900:	2b00      	cmp	r3, #0
 8002902:	db03      	blt.n	800290c <TMC2209_read_ifcnt+0x20>
    	 if(ENABLE_DEBUG){
         char debug_msg[100];
         sprintf(debug_msg, "IFCNT Value: %d\r\n",  (int)ifcnt_value);
         debug_print(debug_msg);
    	 }
         tmc2209->driver.IFCNT = ifcnt_value;
 8002904:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	621a      	str	r2, [r3, #32]
    	 if (ENABLE_DEBUG)
         debug_print("Failed to read IFCNT register!\r\n");
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
     }

 }
 800290a:	e003      	b.n	8002914 <TMC2209_read_ifcnt+0x28>
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 8002912:	621a      	str	r2, [r3, #32]
 }
 8002914:	bf00      	nop
 8002916:	3770      	adds	r7, #112	@ 0x70
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <TMC2209_setSpreadCycle>:
    }
    return (tmc2209->driver.GCONF = true);
}


uint16_t TMC2209_setSpreadCycle(Motor *tmc2209, uint8_t enable) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b0ac      	sub	sp, #176	@ 0xb0
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
	uint32_t gconf;
	uint32_t check_gconf;
	uint8_t driverID = tmc2209->driver.id;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	char debug_msg[150];
	snprintf(debug_msg, sizeof(debug_msg), "Setting SpreadCycle Mode for Driver: %u\r\n", driverID);
	debug_print(debug_msg);
	}

	gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002938:	2100      	movs	r1, #0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff1b 	bl	8002776 <TMC2209_readInit>
 8002940:	4603      	mov	r3, r0
 8002942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    if(tmc2209->driver.STATUS != TMC_OK){
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <TMC2209_setSpreadCycle+0x3a>
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!(Invalid Reply 1)\r\n");
    	return gconf;
 800294e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002952:	b29b      	uxth	r3, r3
 8002954:	e03c      	b.n	80029d0 <TMC2209_setSpreadCycle+0xb4>
    }

    check_gconf = gconf;
 8002956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800295a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if(enable) {
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <TMC2209_setSpreadCycle+0x56>
    	gconf |= (1 << TMC2209_EN_SPREADCYCLE_POS);
 8002964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002970:	e005      	b.n	800297e <TMC2209_setSpreadCycle+0x62>
    } else {
    	gconf &= ~(1 << TMC2209_EN_SPREADCYCLE_POS);
 8002972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002976:	f023 0304 	bic.w	r3, r3, #4
 800297a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    if(gconf == check_gconf){ //Setpread is already EN/DIS ABLED so skip and return
 800297e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002986:	429a      	cmp	r2, r3
 8002988:	d102      	bne.n	8002990 <TMC2209_setSpreadCycle+0x74>
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode! (Spread is already on that Mode!)\r\n");
    	return enable;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	b29b      	uxth	r3, r3
 800298e:	e01f      	b.n	80029d0 <TMC2209_setSpreadCycle+0xb4>
    }

    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8002990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002994:	461a      	mov	r2, r3
 8002996:	2100      	movs	r1, #0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff feb9 	bl	8002710 <TMC2209_writeInit>
    TMC2209_read_ifcnt(tmc2209);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ffa4 	bl	80028ec <TMC2209_read_ifcnt>
    if(tmc2209->driver.IFCNT <= IFCNT){
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1a      	ldr	r2, [r3, #32]
 80029a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d804      	bhi.n	80029ba <TMC2209_setSpreadCycle+0x9e>
    	tmc2209->driver.chopperMode = 0;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	779a      	strb	r2, [r3, #30]
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!\r\n");
    	return TMC_SET_SPREADCYCLE_ERROR;
 80029b6:	2369      	movs	r3, #105	@ 0x69
 80029b8:	e00a      	b.n	80029d0 <TMC2209_setSpreadCycle+0xb4>
    }

    check_gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 80029ba:	2100      	movs	r1, #0
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff feda 	bl	8002776 <TMC2209_readInit>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if(check_gconf != gconf){
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!(invalid Reply 2)\r\n");
    }

    tmc2209->driver.chopperMode = 1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	779a      	strb	r2, [r3, #30]
    return TMC_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	37b0      	adds	r7, #176	@ 0xb0
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <TMC2209_setMicrosteppingResolution>:
    tmc2209->driver.chopperMode = spreadCycleEnabled; // Return 1 if SpreadCycle is enabled, 0 otherwise
}


// Function to set the microstepping resolution through UART
uint32_t TMC2209_setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b0ae      	sub	sp, #184	@ 0xb8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
    uint8_t driverID = tmc2209->driver.id;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    int32_t IFCNT = tmc2209->driver.IFCNT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    snprintf(debug_msg, sizeof(debug_msg), "Setting Microstepping For Driver ID: %u \r\n", driverID);
    debug_print(debug_msg);
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
    }
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint32_t gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 80029f4:	2100      	movs	r1, #0
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff febd 	bl	8002776 <TMC2209_readInit>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    gconf |= 0x80;  // / Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8002a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_Delay(3);
 8002a0e:	2003      	movs	r0, #3
 8002a10:	f004 fb06 	bl	8007020 <HAL_Delay>
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8002a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fe77 	bl	8002710 <TMC2209_writeInit>

    HAL_Delay(3);
 8002a22:	2003      	movs	r0, #3
 8002a24:	f004 fafc 	bl	8007020 <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8002a28:	216c      	movs	r1, #108	@ 0x6c
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fea3 	bl	8002776 <TMC2209_readInit>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    HAL_Delay(3);
 8002a36:	2003      	movs	r0, #3
 8002a38:	f004 faf2 	bl	8007020 <HAL_Delay>

    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8002a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a40:	0e1b      	lsrs	r3, r3, #24
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a52:	d054      	beq.n	8002afe <TMC2209_setMicrosteppingResolution+0x126>
 8002a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a58:	dc75      	bgt.n	8002b46 <TMC2209_setMicrosteppingResolution+0x16e>
 8002a5a:	2b80      	cmp	r3, #128	@ 0x80
 8002a5c:	d053      	beq.n	8002b06 <TMC2209_setMicrosteppingResolution+0x12e>
 8002a5e:	2b80      	cmp	r3, #128	@ 0x80
 8002a60:	dc71      	bgt.n	8002b46 <TMC2209_setMicrosteppingResolution+0x16e>
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	dc48      	bgt.n	8002af8 <TMC2209_setMicrosteppingResolution+0x120>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	dd6d      	ble.n	8002b46 <TMC2209_setMicrosteppingResolution+0x16e>
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	2b1f      	cmp	r3, #31
 8002a6e:	d86a      	bhi.n	8002b46 <TMC2209_setMicrosteppingResolution+0x16e>
 8002a70:	a201      	add	r2, pc, #4	@ (adr r2, 8002a78 <TMC2209_setMicrosteppingResolution+0xa0>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002b3f 	.word	0x08002b3f
 8002a7c:	08002b37 	.word	0x08002b37
 8002a80:	08002b47 	.word	0x08002b47
 8002a84:	08002b2f 	.word	0x08002b2f
 8002a88:	08002b47 	.word	0x08002b47
 8002a8c:	08002b47 	.word	0x08002b47
 8002a90:	08002b47 	.word	0x08002b47
 8002a94:	08002b27 	.word	0x08002b27
 8002a98:	08002b47 	.word	0x08002b47
 8002a9c:	08002b47 	.word	0x08002b47
 8002aa0:	08002b47 	.word	0x08002b47
 8002aa4:	08002b47 	.word	0x08002b47
 8002aa8:	08002b47 	.word	0x08002b47
 8002aac:	08002b47 	.word	0x08002b47
 8002ab0:	08002b47 	.word	0x08002b47
 8002ab4:	08002b1f 	.word	0x08002b1f
 8002ab8:	08002b47 	.word	0x08002b47
 8002abc:	08002b47 	.word	0x08002b47
 8002ac0:	08002b47 	.word	0x08002b47
 8002ac4:	08002b47 	.word	0x08002b47
 8002ac8:	08002b47 	.word	0x08002b47
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b47 	.word	0x08002b47
 8002ad4:	08002b47 	.word	0x08002b47
 8002ad8:	08002b47 	.word	0x08002b47
 8002adc:	08002b47 	.word	0x08002b47
 8002ae0:	08002b47 	.word	0x08002b47
 8002ae4:	08002b47 	.word	0x08002b47
 8002ae8:	08002b47 	.word	0x08002b47
 8002aec:	08002b47 	.word	0x08002b47
 8002af0:	08002b47 	.word	0x08002b47
 8002af4:	08002b17 	.word	0x08002b17
 8002af8:	2b40      	cmp	r3, #64	@ 0x40
 8002afa:	d008      	beq.n	8002b0e <TMC2209_setMicrosteppingResolution+0x136>
 8002afc:	e023      	b.n	8002b46 <TMC2209_setMicrosteppingResolution+0x16e>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b04:	e024      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b0c:	e020      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 8002b0e:	2302      	movs	r3, #2
 8002b10:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b14:	e01c      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 8002b16:	2303      	movs	r3, #3
 8002b18:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b1c:	e018      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 8002b1e:	2304      	movs	r3, #4
 8002b20:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b24:	e014      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 8002b26:	2305      	movs	r3, #5
 8002b28:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b2c:	e010      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 8002b2e:	2306      	movs	r3, #6
 8002b30:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b34:	e00c      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 8002b36:	2307      	movs	r3, #7
 8002b38:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b3c:	e008      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 8002b3e:	2308      	movs	r3, #8
 8002b40:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b44:	e004      	b.n	8002b50 <TMC2209_setMicrosteppingResolution+0x178>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 8002b46:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002b4a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b4e:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 8002b50:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8002b54:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d105      	bne.n	8002b68 <TMC2209_setMicrosteppingResolution+0x190>
    	if (ENABLE_DEBUG) debug_print("Resolution unchanged, no update needed.\r\n");
        return tmc2209->driver.mstep = resolution;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	839a      	strh	r2, [r3, #28]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8b9b      	ldrh	r3, [r3, #28]
 8002b66:	e025      	b.n	8002bb4 <TMC2209_setMicrosteppingResolution+0x1dc>
    }
   // HAL_Delay(2);
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8002b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b6c:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002b70:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8002b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b80:	461a      	mov	r2, r3
 8002b82:	216c      	movs	r1, #108	@ 0x6c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fdc3 	bl	8002710 <TMC2209_writeInit>
    HAL_Delay(3);
 8002b8a:	2003      	movs	r0, #3
 8002b8c:	f004 fa48 	bl	8007020 <HAL_Delay>

    TMC2209_read_ifcnt(tmc2209);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff feab 	bl	80028ec <TMC2209_read_ifcnt>

    if(tmc2209->driver.IFCNT <= IFCNT){
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d804      	bhi.n	8002bac <TMC2209_setMicrosteppingResolution+0x1d4>
    	if (ENABLE_DEBUG) debug_print("Failed to set microstepping.\r\n");
    	return tmc2209->driver.mstep = TMC_SET_MSTEP_ERROR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	226e      	movs	r2, #110	@ 0x6e
 8002ba6:	839a      	strh	r2, [r3, #28]
 8002ba8:	236e      	movs	r3, #110	@ 0x6e
 8002baa:	e003      	b.n	8002bb4 <TMC2209_setMicrosteppingResolution+0x1dc>
    }
    else{
        tmc2209->driver.mstep = resolution;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	839a      	strh	r2, [r3, #28]

    if (ENABLE_DEBUG) {
    	sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
    	debug_print(debug_msg);
    }
    return TMC_OK;
 8002bb2:	2300      	movs	r3, #0

}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	37b8      	adds	r7, #184	@ 0xb8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <TMC2209_configureCurrent>:





void TMC2209_configureCurrent(Motor *tmc2209, uint8_t ihold, uint8_t irun, uint8_t iholddelay) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	70fb      	strb	r3, [r7, #3]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70bb      	strb	r3, [r7, #2]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	707b      	strb	r3, [r7, #1]
	//  Bits 0-4  : IHOLD (0-31)
	//  Bits 8-12 : IRUN (0-31)
	//  Bits 16-19: IHOLDDELAY (0-15)

    // Clamp values to allowed ranges
    if (ihold > 31) {
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	2b1f      	cmp	r3, #31
 8002bda:	d901      	bls.n	8002be0 <TMC2209_configureCurrent+0x24>
        ihold = 31;
 8002bdc:	231f      	movs	r3, #31
 8002bde:	70fb      	strb	r3, [r7, #3]
    }
    if (irun > 31) {
 8002be0:	78bb      	ldrb	r3, [r7, #2]
 8002be2:	2b1f      	cmp	r3, #31
 8002be4:	d901      	bls.n	8002bea <TMC2209_configureCurrent+0x2e>
        irun = 31;
 8002be6:	231f      	movs	r3, #31
 8002be8:	70bb      	strb	r3, [r7, #2]
    }
    if (iholddelay > 15) {
 8002bea:	787b      	ldrb	r3, [r7, #1]
 8002bec:	2b0f      	cmp	r3, #15
 8002bee:	d901      	bls.n	8002bf4 <TMC2209_configureCurrent+0x38>
        iholddelay = 15;
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	707b      	strb	r3, [r7, #1]
    }
    uint32_t registerValue;
   // Clear the relevant bits for IHOLD (0-4), IRUN (8-12), and IHOLDDELAY (16-19)
    registerValue &= ~((0x1F) | (0x1F << 8) | (0x0F << 16));
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <TMC2209_configureCurrent+0xa0>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

    //   Set bits 0-4 with IHOLD, bits 8-12 with IRUN, and bits 16-19 with IHOLDDELAY.
    registerValue |= ((iholddelay & 0x0F) << 16) | ((irun & 0x1F) << 8) | (ihold & 0x1F);
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8002c04:	78bb      	ldrb	r3, [r7, #2]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	4313      	orrs	r3, r2
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    uint32_t IFCNT = tmc2209->driver.IFCNT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	60bb      	str	r3, [r7, #8]
    TMC2209_writeInit(tmc2209, TMC2209_REG_IHOLD_IRUN, registerValue);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	2110      	movs	r1, #16
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fd70 	bl	8002710 <TMC2209_writeInit>
    if(tmc2209->driver.IFCNT < IFCNT){
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d90b      	bls.n	8002c52 <TMC2209_configureCurrent+0x96>
    	tmc2209->driver.IHOLD = TMC_IHOLD_ERROR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	225b      	movs	r2, #91	@ 0x5b
 8002c3e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    	tmc2209->driver.IRUN = TMC_IRUN_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	225c      	movs	r2, #92	@ 0x5c
 8002c46:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	tmc2209->driver.IDELAY = TMC_IDELAY_ERROR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	225d      	movs	r2, #93	@ 0x5d
 8002c4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	fff0e0e0 	.word	0xfff0e0e0

08002c60 <TMC2209_enableStallDetection>:

    return 25.0f;
}


uint8_t TMC2209_enableStallDetection(Motor *tmc2209, uint8_t sgthrs) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	60fb      	str	r3, [r7, #12]

    TMC2209_writeInit(tmc2209, TMC2209_REG_SGTHRS, sgthrs);    // Set StallGuard threshold (SGTHRS)
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	461a      	mov	r2, r3
 8002c76:	2140      	movs	r1, #64	@ 0x40
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fd49 	bl	8002710 <TMC2209_writeInit>

    TMC2209_read_ifcnt(tmc2209);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff fe34 	bl	80028ec <TMC2209_read_ifcnt>
    if (tmc2209->driver.IFCNT <= IFCNT){
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d807      	bhi.n	8002c9e <TMC2209_enableStallDetection+0x3e>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	return tmc2209->driver.stallEnabled = TMC_ENABLESTALL_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	220a      	movs	r2, #10
 8002c92:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c9c:	e006      	b.n	8002cac <TMC2209_enableStallDetection+0x4c>
    }


    return tmc2209->driver.stallEnabled = 1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29

}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <TMC2209_SetTCoolThrs>:

void TMC2209_SetTCoolThrs(Motor *tmc2209, uint32_t stepFrequency) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
    const uint32_t fCLK = 12000000; // TMC2209 Internal clock frequency: 12 MHz
 8002cbe:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <TMC2209_SetTCoolThrs+0x58>)
 8002cc0:	613b      	str	r3, [r7, #16]
    uint32_t tStep = fCLK / stepFrequency; // The internal clokc trims step frequency that's why we divied it.
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	617b      	str	r3, [r7, #20]

    // Ensure tStep doesn't exceed 20 bits (valid for TCOOLTHRS register)
    if (tStep > 0xFFFFF) {
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cd2:	d301      	bcc.n	8002cd8 <TMC2209_SetTCoolThrs+0x24>
        tStep = 0xFFFFF;
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <TMC2209_SetTCoolThrs+0x5c>)
 8002cd6:	617b      	str	r3, [r7, #20]
    }

    int32_t IFCNT = tmc2209->driver.IFCNT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	60fb      	str	r3, [r7, #12]

    if (tmc2209->driver.IFCNT <= IFCNT){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d803      	bhi.n	8002cf0 <TMC2209_SetTCoolThrs+0x3c>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	tmc2209->driver.TCoolThrs = TMC2209_TCOOLTHRS_ERROR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f06f 0209 	mvn.w	r2, #9
 8002cee:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    TMC2209_writeInit(tmc2209, TMC2209_REG_TCOOLTHRS, tStep);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2114      	movs	r1, #20
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fd0a 	bl	8002710 <TMC2209_writeInit>
    tmc2209->driver.TCoolThrs = tStep;
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	00b71b00 	.word	0x00b71b00
 8002d10:	000fffff 	.word	0x000fffff

08002d14 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	e2ad      	b.n	800327c <initializeMotors+0x568>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x02; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2 // All drivers address 3 since they're on different uarts. If uart failed MSTEP 16 by default.
 8002d20:	4abd      	ldr	r2, [pc, #756]	@ (8003018 <initializeMotors+0x304>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	21a4      	movs	r1, #164	@ 0xa4
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	2202      	movs	r2, #2
 8002d30:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	b2d8      	uxtb	r0, r3
 8002d36:	4ab8      	ldr	r2, [pc, #736]	@ (8003018 <initializeMotors+0x304>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	21a4      	movs	r1, #164	@ 0xa4
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	4602      	mov	r2, r0
 8002d44:	701a      	strb	r2, [r3, #0]
    	motors[i].driver.STATUS = TMC_OK;
 8002d46:	4ab4      	ldr	r2, [pc, #720]	@ (8003018 <initializeMotors+0x304>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	21a4      	movs	r1, #164	@ 0xa4
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	330c      	adds	r3, #12
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
        motors[i].driver.GCONF = 0;
 8002d58:	4aaf      	ldr	r2, [pc, #700]	@ (8003018 <initializeMotors+0x304>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	21a4      	movs	r1, #164	@ 0xa4
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3325      	adds	r3, #37	@ 0x25
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IFCNT = 0;
 8002d6a:	4aab      	ldr	r2, [pc, #684]	@ (8003018 <initializeMotors+0x304>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	21a4      	movs	r1, #164	@ 0xa4
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3320      	adds	r3, #32
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
        motors[i].driver.chopperMode = 0;
 8002d7c:	4aa6      	ldr	r2, [pc, #664]	@ (8003018 <initializeMotors+0x304>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	21a4      	movs	r1, #164	@ 0xa4
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	331e      	adds	r3, #30
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
        motors[i].driver.SG_RESULT = 0;
 8002d8e:	4aa2      	ldr	r2, [pc, #648]	@ (8003018 <initializeMotors+0x304>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	21a4      	movs	r1, #164	@ 0xa4
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	332c      	adds	r3, #44	@ 0x2c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
        motors[i].driver.checkSG_RESULT = 0;
 8002da0:	4a9d      	ldr	r2, [pc, #628]	@ (8003018 <initializeMotors+0x304>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	21a4      	movs	r1, #164	@ 0xa4
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3330      	adds	r3, #48	@ 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
        motors[i].driver.TCoolThrs = 0;
 8002db2:	4a99      	ldr	r2, [pc, #612]	@ (8003018 <initializeMotors+0x304>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	21a4      	movs	r1, #164	@ 0xa4
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3334      	adds	r3, #52	@ 0x34
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
        motors[i].driver.stepFrequency = 0;
 8002dc4:	4a94      	ldr	r2, [pc, #592]	@ (8003018 <initializeMotors+0x304>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	21a4      	movs	r1, #164	@ 0xa4
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
        motors[i].driver.IRUN = 0;
 8002dd6:	4a90      	ldr	r2, [pc, #576]	@ (8003018 <initializeMotors+0x304>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	21a4      	movs	r1, #164	@ 0xa4
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3326      	adds	r3, #38	@ 0x26
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IHOLD = 0;
 8002de8:	4a8b      	ldr	r2, [pc, #556]	@ (8003018 <initializeMotors+0x304>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	21a4      	movs	r1, #164	@ 0xa4
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3327      	adds	r3, #39	@ 0x27
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]


        motors[i].fullSteps = 0;
 8002dfa:	4a87      	ldr	r2, [pc, #540]	@ (8003018 <initializeMotors+0x304>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	21a4      	movs	r1, #164	@ 0xa4
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3374      	adds	r3, #116	@ 0x74
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
        motors[i].stepsTaken = 0;
 8002e0c:	4a82      	ldr	r2, [pc, #520]	@ (8003018 <initializeMotors+0x304>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	21a4      	movs	r1, #164	@ 0xa4
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3370      	adds	r3, #112	@ 0x70
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 8002e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003018 <initializeMotors+0x304>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	21a4      	movs	r1, #164	@ 0xa4
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3378      	adds	r3, #120	@ 0x78
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8002e30:	4a79      	ldr	r2, [pc, #484]	@ (8003018 <initializeMotors+0x304>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	21a4      	movs	r1, #164	@ 0xa4
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3384      	adds	r3, #132	@ 0x84
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 8002e44:	4a74      	ldr	r2, [pc, #464]	@ (8003018 <initializeMotors+0x304>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	21a4      	movs	r1, #164	@ 0xa4
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3388      	adds	r3, #136	@ 0x88
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 8002e58:	4a6f      	ldr	r2, [pc, #444]	@ (8003018 <initializeMotors+0x304>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	21a4      	movs	r1, #164	@ 0xa4
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	338c      	adds	r3, #140	@ 0x8c
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
        motors[i].STALL = 0;
 8002e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <initializeMotors+0x304>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	21a4      	movs	r1, #164	@ 0xa4
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	33a0      	adds	r3, #160	@ 0xa0
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]


        if(i == 0){
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d178      	bne.n	8002f74 <initializeMotors+0x260>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.huart = &huart2;
 8002e82:	4a65      	ldr	r2, [pc, #404]	@ (8003018 <initializeMotors+0x304>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	21a4      	movs	r1, #164	@ 0xa4
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4a62      	ldr	r2, [pc, #392]	@ (800301c <initializeMotors+0x308>)
 8002e92:	601a      	str	r2, [r3, #0]
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8002e94:	4a60      	ldr	r2, [pc, #384]	@ (8003018 <initializeMotors+0x304>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	21a4      	movs	r1, #164	@ 0xa4
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	4a5f      	ldr	r2, [pc, #380]	@ (8003020 <initializeMotors+0x30c>)
 8002ea4:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8002ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8003018 <initializeMotors+0x304>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	21a4      	movs	r1, #164	@ 0xa4
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3314      	adds	r3, #20
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 0;
 8002eb8:	4a57      	ldr	r2, [pc, #348]	@ (8003018 <initializeMotors+0x304>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	21a4      	movs	r1, #164	@ 0xa4
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	331c      	adds	r3, #28
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	801a      	strh	r2, [r3, #0]

        motors[i].stepsPerRevolution = 200;
 8002eca:	4a53      	ldr	r2, [pc, #332]	@ (8003018 <initializeMotors+0x304>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	21a4      	movs	r1, #164	@ 0xa4
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3364      	adds	r3, #100	@ 0x64
 8002ed8:	22c8      	movs	r2, #200	@ 0xc8
 8002eda:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = STEP1_GPIO_Port;
 8002edc:	4a4e      	ldr	r2, [pc, #312]	@ (8003018 <initializeMotors+0x304>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	21a4      	movs	r1, #164	@ 0xa4
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	333c      	adds	r3, #60	@ 0x3c
 8002eea:	4a4e      	ldr	r2, [pc, #312]	@ (8003024 <initializeMotors+0x310>)
 8002eec:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = STEP1_Pin;
 8002eee:	4a4a      	ldr	r2, [pc, #296]	@ (8003018 <initializeMotors+0x304>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	21a4      	movs	r1, #164	@ 0xa4
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3340      	adds	r3, #64	@ 0x40
 8002efc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f00:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = DIR1_GPIO_Port;
 8002f02:	4a45      	ldr	r2, [pc, #276]	@ (8003018 <initializeMotors+0x304>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	21a4      	movs	r1, #164	@ 0xa4
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3344      	adds	r3, #68	@ 0x44
 8002f10:	4a45      	ldr	r2, [pc, #276]	@ (8003028 <initializeMotors+0x314>)
 8002f12:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = DIR1_Pin;
 8002f14:	4a40      	ldr	r2, [pc, #256]	@ (8003018 <initializeMotors+0x304>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	21a4      	movs	r1, #164	@ 0xa4
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3348      	adds	r3, #72	@ 0x48
 8002f22:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f26:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = ENN1_GPIO_Port;
 8002f28:	4a3b      	ldr	r2, [pc, #236]	@ (8003018 <initializeMotors+0x304>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	21a4      	movs	r1, #164	@ 0xa4
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	334c      	adds	r3, #76	@ 0x4c
 8002f36:	4a3b      	ldr	r2, [pc, #236]	@ (8003024 <initializeMotors+0x310>)
 8002f38:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = ENN1_Pin;
 8002f3a:	4a37      	ldr	r2, [pc, #220]	@ (8003018 <initializeMotors+0x304>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	21a4      	movs	r1, #164	@ 0xa4
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3350      	adds	r3, #80	@ 0x50
 8002f48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f4c:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = DIAG1_GPIO_Port;
 8002f4e:	4a32      	ldr	r2, [pc, #200]	@ (8003018 <initializeMotors+0x304>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	21a4      	movs	r1, #164	@ 0xa4
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3354      	adds	r3, #84	@ 0x54
 8002f5c:	4a33      	ldr	r2, [pc, #204]	@ (800302c <initializeMotors+0x318>)
 8002f5e:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = DIAG1_Pin;
 8002f60:	4a2d      	ldr	r2, [pc, #180]	@ (8003018 <initializeMotors+0x304>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	21a4      	movs	r1, #164	@ 0xa4
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3358      	adds	r3, #88	@ 0x58
 8002f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f72:	801a      	strh	r2, [r3, #0]


        }


        if(i == 1){
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	f040 808a 	bne.w	8003090 <initializeMotors+0x37c>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim1;				 // TIMER HANDLER
 8002f7c:	4a26      	ldr	r2, [pc, #152]	@ (8003018 <initializeMotors+0x304>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	21a4      	movs	r1, #164	@ 0xa4
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3310      	adds	r3, #16
 8002f8a:	4a29      	ldr	r2, [pc, #164]	@ (8003030 <initializeMotors+0x31c>)
 8002f8c:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_4; // PWM channel for motor 1
 8002f8e:	4a22      	ldr	r2, [pc, #136]	@ (8003018 <initializeMotors+0x304>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	21a4      	movs	r1, #164	@ 0xa4
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	220c      	movs	r2, #12
 8002f9e:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8003018 <initializeMotors+0x304>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	21a4      	movs	r1, #164	@ 0xa4
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	331c      	adds	r3, #28
 8002fae:	2200      	movs	r2, #0
 8002fb0:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart4;
 8002fb2:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <initializeMotors+0x304>)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	21a4      	movs	r1, #164	@ 0xa4
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <initializeMotors+0x320>)
 8002fc2:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <initializeMotors+0x304>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	21a4      	movs	r1, #164	@ 0xa4
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3364      	adds	r3, #100	@ 0x64
 8002fd2:	22c8      	movs	r2, #200	@ 0xc8
 8002fd4:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP2_GPIO_Port;
 8002fd6:	4a10      	ldr	r2, [pc, #64]	@ (8003018 <initializeMotors+0x304>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	21a4      	movs	r1, #164	@ 0xa4
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	333c      	adds	r3, #60	@ 0x3c
 8002fe4:	4a10      	ldr	r2, [pc, #64]	@ (8003028 <initializeMotors+0x314>)
 8002fe6:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP2_Pin;
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8003018 <initializeMotors+0x304>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	21a4      	movs	r1, #164	@ 0xa4
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3340      	adds	r3, #64	@ 0x40
 8002ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ffa:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR2_GPIO_Port;
 8002ffc:	4a06      	ldr	r2, [pc, #24]	@ (8003018 <initializeMotors+0x304>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	21a4      	movs	r1, #164	@ 0xa4
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3344      	adds	r3, #68	@ 0x44
 800300a:	4a07      	ldr	r2, [pc, #28]	@ (8003028 <initializeMotors+0x314>)
 800300c:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR2_Pin;
 800300e:	4a02      	ldr	r2, [pc, #8]	@ (8003018 <initializeMotors+0x304>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	21a4      	movs	r1, #164	@ 0xa4
 8003014:	e010      	b.n	8003038 <initializeMotors+0x324>
 8003016:	bf00      	nop
 8003018:	2000bf40 	.word	0x2000bf40
 800301c:	2000b688 	.word	0x2000b688
 8003020:	2000b364 	.word	0x2000b364
 8003024:	40020400 	.word	0x40020400
 8003028:	40021000 	.word	0x40021000
 800302c:	40021800 	.word	0x40021800
 8003030:	2000b318 	.word	0x2000b318
 8003034:	2000b578 	.word	0x2000b578
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3348      	adds	r3, #72	@ 0x48
 8003040:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003044:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN2_GPIO_Port;
 8003046:	4a93      	ldr	r2, [pc, #588]	@ (8003294 <initializeMotors+0x580>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	21a4      	movs	r1, #164	@ 0xa4
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	334c      	adds	r3, #76	@ 0x4c
 8003054:	4a90      	ldr	r2, [pc, #576]	@ (8003298 <initializeMotors+0x584>)
 8003056:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN2_Pin;
 8003058:	4a8e      	ldr	r2, [pc, #568]	@ (8003294 <initializeMotors+0x580>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	21a4      	movs	r1, #164	@ 0xa4
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	3350      	adds	r3, #80	@ 0x50
 8003066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800306a:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG2_GPIO_Port;
 800306c:	4a89      	ldr	r2, [pc, #548]	@ (8003294 <initializeMotors+0x580>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	21a4      	movs	r1, #164	@ 0xa4
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	3354      	adds	r3, #84	@ 0x54
 800307a:	4a88      	ldr	r2, [pc, #544]	@ (800329c <initializeMotors+0x588>)
 800307c:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG2_Pin;
 800307e:	4a85      	ldr	r2, [pc, #532]	@ (8003294 <initializeMotors+0x580>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	21a4      	movs	r1, #164	@ 0xa4
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3358      	adds	r3, #88	@ 0x58
 800308c:	2204      	movs	r2, #4
 800308e:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d175      	bne.n	8003182 <initializeMotors+0x46e>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim5;				 // TIMER HANDLER
 8003096:	4a7f      	ldr	r2, [pc, #508]	@ (8003294 <initializeMotors+0x580>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	21a4      	movs	r1, #164	@ 0xa4
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3310      	adds	r3, #16
 80030a4:	4a7e      	ldr	r2, [pc, #504]	@ (80032a0 <initializeMotors+0x58c>)
 80030a6:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 80030a8:	4a7a      	ldr	r2, [pc, #488]	@ (8003294 <initializeMotors+0x580>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	21a4      	movs	r1, #164	@ 0xa4
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3314      	adds	r3, #20
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 80030ba:	4a76      	ldr	r2, [pc, #472]	@ (8003294 <initializeMotors+0x580>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	21a4      	movs	r1, #164	@ 0xa4
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	331c      	adds	r3, #28
 80030c8:	2200      	movs	r2, #0
 80030ca:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 80030cc:	4a71      	ldr	r2, [pc, #452]	@ (8003294 <initializeMotors+0x580>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	21a4      	movs	r1, #164	@ 0xa4
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	4a72      	ldr	r2, [pc, #456]	@ (80032a4 <initializeMotors+0x590>)
 80030dc:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 80030de:	4a6d      	ldr	r2, [pc, #436]	@ (8003294 <initializeMotors+0x580>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	21a4      	movs	r1, #164	@ 0xa4
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3364      	adds	r3, #100	@ 0x64
 80030ec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80030f0:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = STEP3_GPIO_Port;
 80030f2:	4a68      	ldr	r2, [pc, #416]	@ (8003294 <initializeMotors+0x580>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	21a4      	movs	r1, #164	@ 0xa4
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	333c      	adds	r3, #60	@ 0x3c
 8003100:	4a69      	ldr	r2, [pc, #420]	@ (80032a8 <initializeMotors+0x594>)
 8003102:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP3_Pin;
 8003104:	4a63      	ldr	r2, [pc, #396]	@ (8003294 <initializeMotors+0x580>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	21a4      	movs	r1, #164	@ 0xa4
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3340      	adds	r3, #64	@ 0x40
 8003112:	2201      	movs	r2, #1
 8003114:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR3_GPIO_Port;
 8003116:	4a5f      	ldr	r2, [pc, #380]	@ (8003294 <initializeMotors+0x580>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	21a4      	movs	r1, #164	@ 0xa4
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3344      	adds	r3, #68	@ 0x44
 8003124:	4a5c      	ldr	r2, [pc, #368]	@ (8003298 <initializeMotors+0x584>)
 8003126:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR3_Pin;
 8003128:	4a5a      	ldr	r2, [pc, #360]	@ (8003294 <initializeMotors+0x580>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	21a4      	movs	r1, #164	@ 0xa4
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3348      	adds	r3, #72	@ 0x48
 8003136:	2204      	movs	r2, #4
 8003138:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN3_GPIO_Port;
 800313a:	4a56      	ldr	r2, [pc, #344]	@ (8003294 <initializeMotors+0x580>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	21a4      	movs	r1, #164	@ 0xa4
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	334c      	adds	r3, #76	@ 0x4c
 8003148:	4a53      	ldr	r2, [pc, #332]	@ (8003298 <initializeMotors+0x584>)
 800314a:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN3_Pin;
 800314c:	4a51      	ldr	r2, [pc, #324]	@ (8003294 <initializeMotors+0x580>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	21a4      	movs	r1, #164	@ 0xa4
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3350      	adds	r3, #80	@ 0x50
 800315a:	2280      	movs	r2, #128	@ 0x80
 800315c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG3_GPIO_Port;
 800315e:	4a4d      	ldr	r2, [pc, #308]	@ (8003294 <initializeMotors+0x580>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	21a4      	movs	r1, #164	@ 0xa4
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3354      	adds	r3, #84	@ 0x54
 800316c:	4a4b      	ldr	r2, [pc, #300]	@ (800329c <initializeMotors+0x588>)
 800316e:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG3_Pin;
 8003170:	4a48      	ldr	r2, [pc, #288]	@ (8003294 <initializeMotors+0x580>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	21a4      	movs	r1, #164	@ 0xa4
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3358      	adds	r3, #88	@ 0x58
 800317e:	2240      	movs	r2, #64	@ 0x40
 8003180:	801a      	strh	r2, [r3, #0]


        }

        if(i == 3){
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d176      	bne.n	8003276 <initializeMotors+0x562>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 8003188:	4a42      	ldr	r2, [pc, #264]	@ (8003294 <initializeMotors+0x580>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	21a4      	movs	r1, #164	@ 0xa4
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3310      	adds	r3, #16
 8003196:	4a45      	ldr	r2, [pc, #276]	@ (80032ac <initializeMotors+0x598>)
 8003198:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 800319a:	4a3e      	ldr	r2, [pc, #248]	@ (8003294 <initializeMotors+0x580>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	21a4      	movs	r1, #164	@ 0xa4
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3314      	adds	r3, #20
 80031a8:	2208      	movs	r2, #8
 80031aa:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 80031ac:	4a39      	ldr	r2, [pc, #228]	@ (8003294 <initializeMotors+0x580>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	21a4      	movs	r1, #164	@ 0xa4
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	331c      	adds	r3, #28
 80031ba:	2200      	movs	r2, #0
 80031bc:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 80031be:	4a35      	ldr	r2, [pc, #212]	@ (8003294 <initializeMotors+0x580>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	21a4      	movs	r1, #164	@ 0xa4
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	4a38      	ldr	r2, [pc, #224]	@ (80032b0 <initializeMotors+0x59c>)
 80031ce:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 80031d0:	4a30      	ldr	r2, [pc, #192]	@ (8003294 <initializeMotors+0x580>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	21a4      	movs	r1, #164	@ 0xa4
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3364      	adds	r3, #100	@ 0x64
 80031de:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80031e2:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP4_GPIO_Port;
 80031e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003294 <initializeMotors+0x580>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	21a4      	movs	r1, #164	@ 0xa4
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	333c      	adds	r3, #60	@ 0x3c
 80031f2:	4a2a      	ldr	r2, [pc, #168]	@ (800329c <initializeMotors+0x588>)
 80031f4:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP4_Pin;
 80031f6:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <initializeMotors+0x580>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	21a4      	movs	r1, #164	@ 0xa4
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3340      	adds	r3, #64	@ 0x40
 8003204:	2201      	movs	r2, #1
 8003206:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR4_GPIO_Port;
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <initializeMotors+0x580>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	21a4      	movs	r1, #164	@ 0xa4
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3344      	adds	r3, #68	@ 0x44
 8003216:	4a20      	ldr	r2, [pc, #128]	@ (8003298 <initializeMotors+0x584>)
 8003218:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR4_Pin;
 800321a:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <initializeMotors+0x580>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	21a4      	movs	r1, #164	@ 0xa4
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3348      	adds	r3, #72	@ 0x48
 8003228:	2201      	movs	r2, #1
 800322a:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN4_GPIO_Port;
 800322c:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <initializeMotors+0x580>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	21a4      	movs	r1, #164	@ 0xa4
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	334c      	adds	r3, #76	@ 0x4c
 800323a:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <initializeMotors+0x584>)
 800323c:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN4_Pin;
 800323e:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <initializeMotors+0x580>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	21a4      	movs	r1, #164	@ 0xa4
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	3350      	adds	r3, #80	@ 0x50
 800324c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003250:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG4_GPIO_Port;
 8003252:	4a10      	ldr	r2, [pc, #64]	@ (8003294 <initializeMotors+0x580>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	21a4      	movs	r1, #164	@ 0xa4
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	3354      	adds	r3, #84	@ 0x54
 8003260:	4a14      	ldr	r2, [pc, #80]	@ (80032b4 <initializeMotors+0x5a0>)
 8003262:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG4_Pin;
 8003264:	4a0b      	ldr	r2, [pc, #44]	@ (8003294 <initializeMotors+0x580>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	21a4      	movs	r1, #164	@ 0xa4
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3358      	adds	r3, #88	@ 0x58
 8003272:	2210      	movs	r2, #16
 8003274:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3301      	adds	r3, #1
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b03      	cmp	r3, #3
 8003280:	f77f ad4e 	ble.w	8002d20 <initializeMotors+0xc>


    }


}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	2000bf40 	.word	0x2000bf40
 8003298:	40021000 	.word	0x40021000
 800329c:	40020400 	.word	0x40020400
 80032a0:	2000b448 	.word	0x2000b448
 80032a4:	2000b600 	.word	0x2000b600
 80032a8:	40020000 	.word	0x40020000
 80032ac:	2000b3b0 	.word	0x2000b3b0
 80032b0:	2000b798 	.word	0x2000b798
 80032b4:	40021400 	.word	0x40021400

080032b8 <TMC2209_setMotorsConfiguration>:

void TMC2209_setMotorsConfiguration(Motor *motors){	// Set all motor configurations based on their variables set from init function
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
 80032c4:	e06d      	b.n	80033a2 <TMC2209_setMotorsConfiguration+0xea>
    	// DEFAULT VALUES
    	uint16_t mstep = 256;
 80032c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032ca:	82bb      	strh	r3, [r7, #20]
    	uint8_t IHOLD = 15;
 80032cc:	230f      	movs	r3, #15
 80032ce:	74fb      	strb	r3, [r7, #19]
    	uint8_t IRUN = 25;
 80032d0:	2319      	movs	r3, #25
 80032d2:	74bb      	strb	r3, [r7, #18]
    	uint8_t IDELAY = 8;
 80032d4:	2308      	movs	r3, #8
 80032d6:	747b      	strb	r3, [r7, #17]
    	uint8_t sgthrs = 1;
 80032d8:	2301      	movs	r3, #1
 80032da:	743b      	strb	r3, [r7, #16]
    	uint32_t coolThrs = 7000;
 80032dc:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80032e0:	60fb      	str	r3, [r7, #12]

    	TMC2209_EnableDriver(&motors[i], 1);
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	22a4      	movs	r2, #164	@ 0xa4
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe ff41 	bl	8002178 <TMC2209_EnableDriver>
    	HAL_Delay(10);
 80032f6:	200a      	movs	r0, #10
 80032f8:	f003 fe92 	bl	8007020 <HAL_Delay>
    	TMC2209_setPDNuart(&motors[i], 1);
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	22a4      	movs	r2, #164	@ 0xa4
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fa9e 	bl	800284c <TMC2209_setPDNuart>
    	HAL_Delay(100);
 8003310:	2064      	movs	r0, #100	@ 0x64
 8003312:	f003 fe85 	bl	8007020 <HAL_Delay>
    	TMC2209_configureCurrent(&motors[i], IHOLD, IRUN, IDELAY);
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	22a4      	movs	r2, #164	@ 0xa4
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	18d0      	adds	r0, r2, r3
 8003322:	7c7b      	ldrb	r3, [r7, #17]
 8003324:	7cba      	ldrb	r2, [r7, #18]
 8003326:	7cf9      	ldrb	r1, [r7, #19]
 8003328:	f7ff fc48 	bl	8002bbc <TMC2209_configureCurrent>
    	HAL_Delay(500);
 800332c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003330:	f003 fe76 	bl	8007020 <HAL_Delay>
    	TMC2209_setMicrosteppingResolution(&motors[i], mstep);
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	22a4      	movs	r2, #164	@ 0xa4
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	8aba      	ldrh	r2, [r7, #20]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fb47 	bl	80029d8 <TMC2209_setMicrosteppingResolution>
    	HAL_Delay(500);
 800334a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800334e:	f003 fe67 	bl	8007020 <HAL_Delay>
    	TMC2209_enableStallDetection(&motors[i], sgthrs);
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	22a4      	movs	r2, #164	@ 0xa4
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	7c3a      	ldrb	r2, [r7, #16]
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fc7c 	bl	8002c60 <TMC2209_enableStallDetection>
    	HAL_Delay(10);
 8003368:	200a      	movs	r0, #10
 800336a:	f003 fe59 	bl	8007020 <HAL_Delay>
    	TMC2209_SetTCoolThrs(&motors[i], coolThrs);
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	22a4      	movs	r2, #164	@ 0xa4
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fc99 	bl	8002cb4 <TMC2209_SetTCoolThrs>
    	HAL_Delay(10);
 8003382:	200a      	movs	r0, #10
 8003384:	f003 fe4c 	bl	8007020 <HAL_Delay>
    	//TMC2209_readStandstillIndicator(&motors[i]);
    	TMC2209_EnableDriver(&motors[i], 0);
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	22a4      	movs	r2, #164	@ 0xa4
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe feee 	bl	8002178 <TMC2209_EnableDriver>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	3301      	adds	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d98e      	bls.n	80032c6 <TMC2209_setMotorsConfiguration+0xe>
    }
    TMC2209_SetSpeed(&motors[0], 8000);
 80033a8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fe fef6 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	33a4      	adds	r3, #164	@ 0xa4
 80033b6:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe feef 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80033c6:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fee7 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80033d6:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fedf 	bl	800219e <TMC2209_SetSpeed>
}
 80033e0:	bf00      	nop
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    axis->motors[1]->currentPositionMM = 0;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    axis->motors[0]->prevPositionMM = 0;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[1]->prevPositionMM = 0;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[0]->nextPositionMM = 0;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    axis->motors[1]->nextPositionMM = 0;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	8b92      	ldrh	r2, [r2, #28]
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	669a      	str	r2, [r3, #104]	@ 0x68
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	669a      	str	r2, [r3, #104]	@ 0x68
    axis->stepPerUnit =  totalStepsPerRevolution / circumference;
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f103 0014 	add.w	r0, r3, #20
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	4a0a      	ldr	r2, [pc, #40]	@ (80034b4 <initializeAxis+0xcc>)
 800348a:	210a      	movs	r1, #10
 800348c:	f012 fefa 	bl	8016284 <sniprintf>
    if (motor2 != NULL) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <initializeAxis+0xc4>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f103 001e 	add.w	r0, r3, #30
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	4a03      	ldr	r2, [pc, #12]	@ (80034b4 <initializeAxis+0xcc>)
 80034a6:	210a      	movs	r1, #10
 80034a8:	f012 feec 	bl	8016284 <sniprintf>
    }
}
 80034ac:	bf00      	nop
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	0801880c 	.word	0x0801880c

080034b8 <initializeSystem>:

void initializeSystem(){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af02      	add	r7, sp, #8
	// motors
	 initializeMotors();
 80034be:	f7ff fc29 	bl	8002d14 <initializeMotors>
    // motor configurations
	TMC2209_setMotorsConfiguration(&motors);
 80034c2:	480e      	ldr	r0, [pc, #56]	@ (80034fc <initializeSystem+0x44>)
 80034c4:	f7ff fef8 	bl	80032b8 <TMC2209_setMotorsConfiguration>
    // axis
	initializeAxis(&axes[0], &motors[0],&motors[1], 8, "Y");
 80034c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003500 <initializeSystem+0x48>)
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2308      	movs	r3, #8
 80034ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003504 <initializeSystem+0x4c>)
 80034d0:	490a      	ldr	r1, [pc, #40]	@ (80034fc <initializeSystem+0x44>)
 80034d2:	480d      	ldr	r0, [pc, #52]	@ (8003508 <initializeSystem+0x50>)
 80034d4:	f7ff ff88 	bl	80033e8 <initializeAxis>
	initializeAxis(&axes[1], &motors[2],&motors[3], 40, "X");
 80034d8:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <initializeSystem+0x54>)
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2328      	movs	r3, #40	@ 0x28
 80034de:	4a0c      	ldr	r2, [pc, #48]	@ (8003510 <initializeSystem+0x58>)
 80034e0:	490c      	ldr	r1, [pc, #48]	@ (8003514 <initializeSystem+0x5c>)
 80034e2:	480d      	ldr	r0, [pc, #52]	@ (8003518 <initializeSystem+0x60>)
 80034e4:	f7ff ff80 	bl	80033e8 <initializeAxis>



		xSemaphoreGive(xInitSemaphore); // signal welcome menu state to proceed with next state
 80034e8:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <initializeSystem+0x64>)
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	2300      	movs	r3, #0
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	f00f fccb 	bl	8012e8c <xQueueGenericSend>

}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	2000bf40 	.word	0x2000bf40
 8003500:	08018814 	.word	0x08018814
 8003504:	2000bfe4 	.word	0x2000bfe4
 8003508:	2000c1d0 	.word	0x2000c1d0
 800350c:	08018818 	.word	0x08018818
 8003510:	2000c12c 	.word	0x2000c12c
 8003514:	2000c088 	.word	0x2000c088
 8003518:	2000c1f8 	.word	0x2000c1f8
 800351c:	20008a60 	.word	0x20008a60

08003520 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	213c      	movs	r1, #60	@ 0x3c
 800352e:	4618      	mov	r0, r3
 8003530:	f007 fe98 	bl	800b264 <HAL_TIM_Encoder_Start>
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] henc : Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_Handle_TypeDef* henc)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
  henc->Counter = __HAL_TIM_GET_COUNTER(henc->Timer);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	bf34      	ite	cc
 8003560:	2301      	movcc	r3, #1
 8003562:	2300      	movcs	r3, #0
 8003564:	b2da      	uxtb	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	bf8c      	ite	hi
 8003574:	2301      	movhi	r3, #1
 8003576:	2300      	movls	r3, #0
 8003578:	b2da      	uxtb	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	745a      	strb	r2, [r3, #17]
  return henc->Counter / henc->TicksPerStep;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <CheckConnection>:


#include "extras.h"
bool probe = 0;

bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo2){
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, SERVO1_CHECK_POS);
 80035a2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80035f8 <CheckConnection+0x60>
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8f8 	bl	800379c <SERVO_WritePosition>
	SERVO_WritePosition(hservo2, SERVO2_CHECK_POS);
 80035ac:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80035fc <CheckConnection+0x64>
 80035b0:	6838      	ldr	r0, [r7, #0]
 80035b2:	f000 f8f3 	bl	800379c <SERVO_WritePosition>
	HAL_Delay(100);
 80035b6:	2064      	movs	r0, #100	@ 0x64
 80035b8:	f003 fd32 	bl	8007020 <HAL_Delay>
	probe = HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin);
 80035bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035c0:	480f      	ldr	r0, [pc, #60]	@ (8003600 <CheckConnection+0x68>)
 80035c2:	f004 fbe9 	bl	8007d98 <HAL_GPIO_ReadPin>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <CheckConnection+0x6c>)
 80035d4:	701a      	strb	r2, [r3, #0]
	SERVO_WritePosition(hservo, SERVO1_HOME_POS);
 80035d6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003608 <CheckConnection+0x70>
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8de 	bl	800379c <SERVO_WritePosition>
	SERVO_WritePosition(hservo2, SERVO2_HOME_POS);
 80035e0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800360c <CheckConnection+0x74>
 80035e4:	6838      	ldr	r0, [r7, #0]
 80035e6:	f000 f8d9 	bl	800379c <SERVO_WritePosition>
//	HAL_Delay(1000);
	return probe;
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <CheckConnection+0x6c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	428b0000 	.word	0x428b0000
 80035fc:	421c0000 	.word	0x421c0000
 8003600:	40021000 	.word	0x40021000
 8003604:	20008a30 	.word	0x20008a30
 8003608:	42b20000 	.word	0x42b20000
 800360c:	42700000 	.word	0x42700000

08003610 <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 800361c:	887b      	ldrh	r3, [r7, #2]
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f004 fbb9 	bl	8007d98 <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <IsSensorTriggered+0x24>
    	return false;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 8003634:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	edd3 7a02 	vldr	s15, [r3, #8]
 800364c:	eeb0 0a67 	vmov.f32	s0, s15
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f80d 	bl	8003670 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f007 fa49 	bl	800aaf8 <HAL_TIM_PWM_Start>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 800367c:	edd7 7a00 	vldr	s15, [r7]
 8003680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d503      	bpl.n	8003692 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	e00a      	b.n	80036a8 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8003692:	edd7 7a00 	vldr	s15, [r7]
 8003696:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003754 <PWM_WriteDuty+0xe4>
 800369a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	dd01      	ble.n	80036a8 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 80036a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003758 <PWM_WriteDuty+0xe8>)
 80036a6:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	3301      	adds	r3, #1
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036c0:	edd7 7a00 	vldr	s15, [r7]
 80036c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003754 <PWM_WriteDuty+0xe4>
 80036cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d4:	ee17 3a90 	vmov	r3, s15
 80036d8:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <PWM_WriteDuty+0x7e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80036ec:	e02c      	b.n	8003748 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d105      	bne.n	8003702 <PWM_WriteDuty+0x92>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003700:	e022      	b.n	8003748 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b08      	cmp	r3, #8
 8003708:	d105      	bne.n	8003716 <PWM_WriteDuty+0xa6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003714:	e018      	b.n	8003748 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d105      	bne.n	800372a <PWM_WriteDuty+0xba>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003728:	e00e      	b.n	8003748 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b10      	cmp	r3, #16
 8003730:	d105      	bne.n	800373e <PWM_WriteDuty+0xce>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800373c:	e004      	b.n	8003748 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	42c80000 	.word	0x42c80000
 8003758:	42c80000 	.word	0x42c80000

0800375c <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	if(hservo->ID == 1 ){
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7c1b      	ldrb	r3, [r3, #16]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <SERVO_Init+0x1c>
	SERVO_WritePosition(hservo, SERVO1_HOME_POS); // Home position is 90 deg, Down is 72 deg.
 800376c:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8003794 <SERVO_Init+0x38>
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f813 	bl	800379c <SERVO_WritePosition>
 8003776:	e004      	b.n	8003782 <SERVO_Init+0x26>
	}
	else{
	SERVO_WritePosition(hservo, SERVO2_HOME_POS); // Home position is 50 deg, down is 40.
 8003778:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003798 <SERVO_Init+0x3c>
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f80d 	bl	800379c <SERVO_WritePosition>
	}

	PWM_Init(&(hservo->PwmOut));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ff5a 	bl	800363e <PWM_Init>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	42b20000 	.word	0x42b20000
 8003798:	42700000 	.word	0x42700000

0800379c <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 80037a8:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8003804 <SERVO_WritePosition+0x68>
 80037ac:	ed97 0a00 	vldr	s0, [r7]
 80037b0:	f014 fecd 	bl	801854e <fminf>
 80037b4:	eef0 7a40 	vmov.f32	s15, s0
 80037b8:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8003808 <SERVO_WritePosition+0x6c>
 80037bc:	eeb0 0a67 	vmov.f32	s0, s15
 80037c0:	f014 fea8 	bl	8018514 <fmaxf>
 80037c4:	eef0 7a40 	vmov.f32	s15, s0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80037d4:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003804 <SERVO_WritePosition+0x68>
 80037d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037dc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80037e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e4:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80037e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ec:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ff3a 	bl	8003670 <PWM_WriteDuty>
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	43340000 	.word	0x43340000
 8003808:	00000000 	.word	0x00000000

0800380c <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <HAL_UART_RxCpltCallback+0x4c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_UART_RxCpltCallback+0x30>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a0e      	ldr	r2, [pc, #56]	@ (800385c <HAL_UART_RxCpltCallback+0x50>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_UART_RxCpltCallback+0x30>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0c      	ldr	r2, [pc, #48]	@ (8003860 <HAL_UART_RxCpltCallback+0x54>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_UART_RxCpltCallback+0x30>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a0b      	ldr	r2, [pc, #44]	@ (8003864 <HAL_UART_RxCpltCallback+0x58>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <HAL_UART_RxCpltCallback+0x42>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 800383c:	4b0a      	ldr	r3, [pc, #40]	@ (8003868 <HAL_UART_RxCpltCallback+0x5c>)
 800383e:	2209      	movs	r2, #9
 8003840:	4619      	mov	r1, r3
 8003842:	480a      	ldr	r0, [pc, #40]	@ (800386c <HAL_UART_RxCpltCallback+0x60>)
 8003844:	f012 fe83 	bl	801654e <memcpy>
        rxBufferReady = 1;
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_UART_RxCpltCallback+0x64>)
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]

    }

    // TODO: UART callback for read from PCB2Gcode

}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40004400 	.word	0x40004400
 800385c:	40011400 	.word	0x40011400
 8003860:	40004c00 	.word	0x40004c00
 8003864:	40005000 	.word	0x40005000
 8003868:	20008a35 	.word	0x20008a35
 800386c:	20008a40 	.word	0x20008a40
 8003870:	20008a48 	.word	0x20008a48

08003874 <calibProcessTask>:
  RunCalibrationStateMachine(): Encapsulates the calibration logic.
  Parameters can include pointers to LCD, motors, and any other state
  needed to update the calibration instructions.
-------------------------------------------------------------------*/

void calibProcessTask(void *pvParameters){
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	6078      	str	r0, [r7, #4]

	for(;;){
		EventBits_t uxBits = xEventGroupWaitBits(calibEventGroup, CALIB_START_BIT | CALIB_STOP_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 800387c:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <calibProcessTask+0xac>)
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2300      	movs	r3, #0
 8003888:	2201      	movs	r2, #1
 800388a:	2105      	movs	r1, #5
 800388c:	f00e ff32 	bl	80126f4 <xEventGroupWaitBits>
 8003890:	60f8      	str	r0, [r7, #12]
    if(uxBits & CALIB_STOP_BIT){
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d012      	beq.n	80038c2 <calibProcessTask+0x4e>
    	LCD_I2C_ClearAllLines(&hlcd3);
 800389c:	4821      	ldr	r0, [pc, #132]	@ (8003924 <calibProcessTask+0xb0>)
 800389e:	f7fd fce1 	bl	8001264 <LCD_I2C_ClearAllLines>
    	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 80038a2:	2201      	movs	r2, #1
 80038a4:	2100      	movs	r1, #0
 80038a6:	481f      	ldr	r0, [pc, #124]	@ (8003924 <calibProcessTask+0xb0>)
 80038a8:	f7fd fcb0 	bl	800120c <LCD_I2C_SetCursor>
    	LCD_I2C_printStr(&hlcd3, "Stall Detected, Calibration Aborted!");
 80038ac:	491e      	ldr	r1, [pc, #120]	@ (8003928 <calibProcessTask+0xb4>)
 80038ae:	481d      	ldr	r0, [pc, #116]	@ (8003924 <calibProcessTask+0xb0>)
 80038b0:	f7fd fc72 	bl	8001198 <LCD_I2C_printStr>
    	osDelay(3500);
 80038b4:	f640 50ac 	movw	r0, #3500	@ 0xdac
 80038b8:	f00e fe23 	bl	8012502 <osDelay>
    	currentState = MENU_STATE_TESTING;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	@ (800392c <calibProcessTask+0xb8>)
 80038be:	2207      	movs	r2, #7
 80038c0:	701a      	strb	r2, [r3, #0]
    }
	if (uxBits & CALIB_START_BIT) {
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d025      	beq.n	8003918 <calibProcessTask+0xa4>

     switch(g_calibSelection){
 80038cc:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <calibProcessTask+0xbc>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d014      	beq.n	8003900 <calibProcessTask+0x8c>
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	dc1d      	bgt.n	8003916 <calibProcessTask+0xa2>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <calibProcessTask+0x70>
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d003      	beq.n	80038ea <calibProcessTask+0x76>
//                       // xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
//        //RunManualCalibrationStateMachine(&hlcd3, &motors);
//        currentState = MENU_STATE_TESTING; // TODO: Add Test Process
//        break;
        default:
        break;
 80038e2:	e018      	b.n	8003916 <calibProcessTask+0xa2>
            currentState = MENU_STATE_SD_TEST;
 80038e4:	4b11      	ldr	r3, [pc, #68]	@ (800392c <calibProcessTask+0xb8>)
 80038e6:	2202      	movs	r2, #2
 80038e8:	701a      	strb	r2, [r3, #0]
        AutoCalibration(&axes,&motors); 
 80038ea:	4912      	ldr	r1, [pc, #72]	@ (8003934 <calibProcessTask+0xc0>)
 80038ec:	4812      	ldr	r0, [pc, #72]	@ (8003938 <calibProcessTask+0xc4>)
 80038ee:	f000 fea7 	bl	8004640 <AutoCalibration>
        xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 80038f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <calibProcessTask+0xac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00e ffd5 	bl	80128a8 <xEventGroupSetBits>
        break;
 80038fe:	e00b      	b.n	8003918 <calibProcessTask+0xa4>
        	ManualCalibration(&axes,&motors);
 8003900:	490c      	ldr	r1, [pc, #48]	@ (8003934 <calibProcessTask+0xc0>)
 8003902:	480d      	ldr	r0, [pc, #52]	@ (8003938 <calibProcessTask+0xc4>)
 8003904:	f000 ff7a 	bl	80047fc <ManualCalibration>
            xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <calibProcessTask+0xac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2102      	movs	r1, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f00e ffca 	bl	80128a8 <xEventGroupSetBits>
        break;
 8003914:	e000      	b.n	8003918 <calibProcessTask+0xa4>
        break;
 8003916:	bf00      	nop
    }
        // Short delay to let other tasks run.
     //xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);

       }
		vTaskDelay(pdMS_TO_TICKS(10));
 8003918:	200a      	movs	r0, #10
 800391a:	f010 fa07 	bl	8013d2c <vTaskDelay>
	for(;;){
 800391e:	e7ad      	b.n	800387c <calibProcessTask+0x8>
 8003920:	20008a54 	.word	0x20008a54
 8003924:	20000018 	.word	0x20000018
 8003928:	0801881c 	.word	0x0801881c
 800392c:	20008a50 	.word	0x20008a50
 8003930:	20008a64 	.word	0x20008a64
 8003934:	2000bf40 	.word	0x2000bf40
 8003938:	2000c1d0 	.word	0x2000c1d0

0800393c <motorControlTask>:
   }
}


void motorControlTask(void *argument) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	@ 0x30
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
		// Queue for motor cmds
	motorCommandQueue = xQueueCreate(256, sizeof(MotorCommand));
 8003944:	2200      	movs	r2, #0
 8003946:	2124      	movs	r1, #36	@ 0x24
 8003948:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800394c:	f00f fa05 	bl	8012d5a <xQueueGenericCreate>
 8003950:	4603      	mov	r3, r0
 8003952:	4a62      	ldr	r2, [pc, #392]	@ (8003adc <motorControlTask+0x1a0>)
 8003954:	6013      	str	r3, [r2, #0]
	configASSERT(motorCommandQueue != NULL);
 8003956:	4b61      	ldr	r3, [pc, #388]	@ (8003adc <motorControlTask+0x1a0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <motorControlTask+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	b672      	cpsid	i
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	b662      	cpsie	i
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	e7fd      	b.n	8003976 <motorControlTask+0x3a>

	MotorCommand cmd;

    for(;;) {
    // Wait for a command from the queue
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 800397a:	4b58      	ldr	r3, [pc, #352]	@ (8003adc <motorControlTask+0x1a0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f107 0108 	add.w	r1, r7, #8
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	4618      	mov	r0, r3
 8003988:	f00f fc22 	bl	80131d0 <xQueueReceive>
 800398c:	4603      	mov	r3, r0
 800398e:	2b01      	cmp	r3, #1
 8003990:	f040 809b 	bne.w	8003aca <motorControlTask+0x18e>
    		switch (cmd.command){
 8003994:	7a3b      	ldrb	r3, [r7, #8]
 8003996:	2b09      	cmp	r3, #9
 8003998:	f200 8096 	bhi.w	8003ac8 <motorControlTask+0x18c>
 800399c:	a201      	add	r2, pc, #4	@ (adr r2, 80039a4 <motorControlTask+0x68>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039e3 	.word	0x080039e3
 80039a8:	08003a07 	.word	0x08003a07
 80039ac:	080039cd 	.word	0x080039cd
 80039b0:	08003a1d 	.word	0x08003a1d
 80039b4:	08003a37 	.word	0x08003a37
 80039b8:	08003a51 	.word	0x08003a51
 80039bc:	08003a85 	.word	0x08003a85
 80039c0:	08003a9f 	.word	0x08003a9f
 80039c4:	08003a6b 	.word	0x08003a6b
 80039c8:	08003ab9 	.word	0x08003ab9

    		case	MOTOR_CMD_START: // Start the motor
    				TMC2209_Start(&motors[cmd.motorIndex]);
 80039cc:	7abb      	ldrb	r3, [r7, #10]
 80039ce:	461a      	mov	r2, r3
 80039d0:	23a4      	movs	r3, #164	@ 0xa4
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	4a42      	ldr	r2, [pc, #264]	@ (8003ae0 <motorControlTask+0x1a4>)
 80039d8:	4413      	add	r3, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fc58 	bl	8002290 <TMC2209_Start>
    				break;
 80039e0:	e073      	b.n	8003aca <motorControlTask+0x18e>

    		case	MOTOR_CMD_MOVETO: // Move the motor to a target position
    				TMC2209_MoveTo(&axes[cmd.axisIndex], cmd.motorIndex, cmd.targetPositionMM);
 80039e2:	7a7b      	ldrb	r3, [r7, #9]
 80039e4:	461a      	mov	r2, r3
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4a3d      	ldr	r2, [pc, #244]	@ (8003ae4 <motorControlTask+0x1a8>)
 80039f0:	4413      	add	r3, r2
 80039f2:	7aba      	ldrb	r2, [r7, #10]
 80039f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fc7c 	bl	80022fc <TMC2209_MoveTo>
    				break;
 8003a04:	e061      	b.n	8003aca <motorControlTask+0x18e>

    		case	MOTOR_CMD_STOP:	// Stop the motor
    				TMC2209_Stop(&motors[cmd.motorIndex]);
 8003a06:	7abb      	ldrb	r3, [r7, #10]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	23a4      	movs	r3, #164	@ 0xa4
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	4a33      	ldr	r2, [pc, #204]	@ (8003ae0 <motorControlTask+0x1a4>)
 8003a12:	4413      	add	r3, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fc25 	bl	8002264 <TMC2209_Stop>

    				break;
 8003a1a:	e056      	b.n	8003aca <motorControlTask+0x18e>

    		case 	MOTOR_CMD_DIRECTION:
    				TMC2209_SetDirection(&motors[cmd.motorIndex], cmd.direction);
 8003a1c:	7abb      	ldrb	r3, [r7, #10]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	23a4      	movs	r3, #164	@ 0xa4
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae0 <motorControlTask+0x1a4>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	7c3a      	ldrb	r2, [r7, #16]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fb8c 	bl	800214c <TMC2209_SetDirection>
    				break;
 8003a34:	e049      	b.n	8003aca <motorControlTask+0x18e>

    		case 	MOTOR_CMD_SETSPEED:
    				TMC2209_SetSpeed(&motors[cmd.motorIndex], cmd.speed);
 8003a36:	7abb      	ldrb	r3, [r7, #10]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	23a4      	movs	r3, #164	@ 0xa4
 8003a3c:	fb02 f303 	mul.w	r3, r2, r3
 8003a40:	4a27      	ldr	r2, [pc, #156]	@ (8003ae0 <motorControlTask+0x1a4>)
 8003a42:	4413      	add	r3, r2
 8003a44:	8a7a      	ldrh	r2, [r7, #18]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fba8 	bl	800219e <TMC2209_SetSpeed>
    				break;
 8003a4e:	e03c      	b.n	8003aca <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_MSTEP:
    				TMC2209_setMicrosteppingResolution(&motors[cmd.motorIndex], cmd.mstep);
 8003a50:	7abb      	ldrb	r3, [r7, #10]
 8003a52:	461a      	mov	r2, r3
 8003a54:	23a4      	movs	r3, #164	@ 0xa4
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ae0 <motorControlTask+0x1a4>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	8aba      	ldrh	r2, [r7, #20]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe ffb8 	bl	80029d8 <TMC2209_setMicrosteppingResolution>
    				break;
 8003a68:	e02f      	b.n	8003aca <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_CHOPPER:
    			    TMC2209_setSpreadCycle(&motors[cmd.motorIndex], cmd.chopper);
 8003a6a:	7abb      	ldrb	r3, [r7, #10]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	23a4      	movs	r3, #164	@ 0xa4
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae0 <motorControlTask+0x1a4>)
 8003a76:	4413      	add	r3, r2
 8003a78:	7eba      	ldrb	r2, [r7, #26]
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe ff4d 	bl	800291c <TMC2209_setSpreadCycle>
    			    break;
 8003a82:	e022      	b.n	8003aca <motorControlTask+0x18e>

    		case	MOTOR_CMD_CONFIG_SGTHRS:
    				TMC2209_enableStallDetection(&motors[cmd.motorIndex], cmd.sgthrs);
 8003a84:	7abb      	ldrb	r3, [r7, #10]
 8003a86:	461a      	mov	r2, r3
 8003a88:	23a4      	movs	r3, #164	@ 0xa4
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	4a14      	ldr	r2, [pc, #80]	@ (8003ae0 <motorControlTask+0x1a4>)
 8003a90:	4413      	add	r3, r2
 8003a92:	7dba      	ldrb	r2, [r7, #22]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f8e2 	bl	8002c60 <TMC2209_enableStallDetection>
    				break;
 8003a9c:	e015      	b.n	8003aca <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_COOLTHRS:
    				TMC2209_SetTCoolThrs(&motors[cmd.motorIndex], cmd.coolThrs);
 8003a9e:	7abb      	ldrb	r3, [r7, #10]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	23a4      	movs	r3, #164	@ 0xa4
 8003aa4:	fb02 f303 	mul.w	r3, r2, r3
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae0 <motorControlTask+0x1a4>)
 8003aaa:	4413      	add	r3, r2
 8003aac:	8b3a      	ldrh	r2, [r7, #24]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff f8ff 	bl	8002cb4 <TMC2209_SetTCoolThrs>
    				break;
 8003ab6:	e008      	b.n	8003aca <motorControlTask+0x18e>
       		case 	MOTOR_CMD_MOVE_ALL_MOTORS:
       		{
       			   // Move all motors on axis 0 concurrently.
       			TMC2209_MoveAllMotorsTo(&axes, cmd.targetPositionsAxis0);
 8003ab8:	f107 0308 	add.w	r3, r7, #8
 8003abc:	3314      	adds	r3, #20
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4808      	ldr	r0, [pc, #32]	@ (8003ae4 <motorControlTask+0x1a8>)
 8003ac2:	f7fe fc89 	bl	80023d8 <TMC2209_MoveAllMotorsTo>

       			    break;
 8003ac6:	e000      	b.n	8003aca <motorControlTask+0x18e>
//    		case 	MOTOR_CMD_CHECK_CHOPPER:
//    		case	MOTOR_CMD_CHECK_SGTHRS:
//    		case 	MOTOR_CMD_CHECK_COOLTHRS:
//    				break;
    		default: // unkown command
    				break;
 8003ac8:	bf00      	nop
    		}
    	}



    	taskYIELD();
 8003aca:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <motorControlTask+0x1ac>)
 8003acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	f3bf 8f6f 	isb	sy
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 8003ada:	e74e      	b.n	800397a <motorControlTask+0x3e>
 8003adc:	20008a4c 	.word	0x20008a4c
 8003ae0:	2000bf40 	.word	0x2000bf40
 8003ae4:	2000c1d0 	.word	0x2000c1d0
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <stallMonitorTask>:

/*
 * Stall Monitor Task
 * This task will check the diag pin of each motor and send a stop command for the motor that stalled.
 */
void stallMonitorTask(void *argument) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08e      	sub	sp, #56	@ 0x38
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	MotorCommand stallCmd;
    for(;;) {
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003af4:	2300      	movs	r3, #0
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af8:	e050      	b.n	8003b9c <stallMonitorTask+0xb0>
        	motors[i].STALL = HAL_GPIO_ReadPin(motors[i].driver.diag_port, motors[i].driver.diag_pin);
 8003afa:	4a2c      	ldr	r2, [pc, #176]	@ (8003bac <stallMonitorTask+0xc0>)
 8003afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afe:	21a4      	movs	r1, #164	@ 0xa4
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	3354      	adds	r3, #84	@ 0x54
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4928      	ldr	r1, [pc, #160]	@ (8003bac <stallMonitorTask+0xc0>)
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0e:	20a4      	movs	r0, #164	@ 0xa4
 8003b10:	fb00 f303 	mul.w	r3, r0, r3
 8003b14:	440b      	add	r3, r1
 8003b16:	3358      	adds	r3, #88	@ 0x58
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f004 f93b 	bl	8007d98 <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4618      	mov	r0, r3
 8003b26:	4a21      	ldr	r2, [pc, #132]	@ (8003bac <stallMonitorTask+0xc0>)
 8003b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2a:	21a4      	movs	r1, #164	@ 0xa4
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	4413      	add	r3, r2
 8003b32:	33a0      	adds	r3, #160	@ 0xa0
 8003b34:	4602      	mov	r2, r0
 8003b36:	701a      	strb	r2, [r3, #0]

            if(motors[i].STALL == GPIO_PIN_SET) {  // Stall detecte
 8003b38:	4a1c      	ldr	r2, [pc, #112]	@ (8003bac <stallMonitorTask+0xc0>)
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3c:	21a4      	movs	r1, #164	@ 0xa4
 8003b3e:	fb01 f303 	mul.w	r3, r1, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	33a0      	adds	r3, #160	@ 0xa0
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d124      	bne.n	8003b96 <stallMonitorTask+0xaa>

                xEventGroupSetBits(testingEvent, TEST_STOP_BIT); // Abort Testing task
 8003b4c:	4b18      	ldr	r3, [pc, #96]	@ (8003bb0 <stallMonitorTask+0xc4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2102      	movs	r1, #2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f00e fea8 	bl	80128a8 <xEventGroupSetBits>
                TMC2209_Stop(&motors[i]); // Stop stalled motor first -- We don't send a command through the motor task here since we need to not queue and execute as soon as possible
 8003b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5a:	22a4      	movs	r2, #164	@ 0xa4
 8003b5c:	fb02 f303 	mul.w	r3, r2, r3
 8003b60:	4a12      	ldr	r2, [pc, #72]	@ (8003bac <stallMonitorTask+0xc0>)
 8003b62:	4413      	add	r3, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fb7d 	bl	8002264 <TMC2209_Stop>
                for(int j = 0; j<MAX_MOTORS; j++){ // Stop the other motors
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b6e:	e00f      	b.n	8003b90 <stallMonitorTask+0xa4>
                   if(j != i) TMC2209_Stop(&motors[j]);
 8003b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d008      	beq.n	8003b8a <stallMonitorTask+0x9e>
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	22a4      	movs	r2, #164	@ 0xa4
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	4a0a      	ldr	r2, [pc, #40]	@ (8003bac <stallMonitorTask+0xc0>)
 8003b82:	4413      	add	r3, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe fb6d 	bl	8002264 <TMC2209_Stop>
                for(int j = 0; j<MAX_MOTORS; j++){ // Stop the other motors
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	ddec      	ble.n	8003b70 <stallMonitorTask+0x84>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b98:	3301      	adds	r3, #1
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	ddab      	ble.n	8003afa <stallMonitorTask+0xe>

                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(STALL_CHECK_INTERVAL_MS));
 8003ba2:	2032      	movs	r0, #50	@ 0x32
 8003ba4:	f010 f8c2 	bl	8013d2c <vTaskDelay>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003ba8:	e7a4      	b.n	8003af4 <stallMonitorTask+0x8>
 8003baa:	bf00      	nop
 8003bac:	2000bf40 	.word	0x2000bf40
 8003bb0:	20008a58 	.word	0x20008a58

08003bb4 <vMainMenuTask>:
 * FreeRTOS task to handle the main menu.
 * This task will display the menu, wait for a selection,
 * and then call the handler for that selection.
 */
void vMainMenuTask(void *pvParameters)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	@ 0x28
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
    currentState = MENU_STATE_WELCOME;
 8003bbc:	4b6b      	ldr	r3, [pc, #428]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
    for (;;) {

        switch (currentState) {
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b07      	cmp	r3, #7
 8003bc8:	f200 80c4 	bhi.w	8003d54 <vMainMenuTask+0x1a0>
 8003bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd4 <vMainMenuTask+0x20>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf5 	.word	0x08003bf5
 8003bd8:	08003c3f 	.word	0x08003c3f
 8003bdc:	08003c7f 	.word	0x08003c7f
 8003be0:	08003ca1 	.word	0x08003ca1
 8003be4:	08003d55 	.word	0x08003d55
 8003be8:	08003d55 	.word	0x08003d55
 8003bec:	08003cf3 	.word	0x08003cf3
 8003bf0:	08003d2d 	.word	0x08003d2d
        	case MENU_STATE_WELCOME:
        	{
        		LCD_I2C_DisplaySequentialGlossyText(&hlcd3, 2);
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	485e      	ldr	r0, [pc, #376]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003bf8:	f7fd fb7a 	bl	80012f0 <LCD_I2C_DisplaySequentialGlossyText>
        		osDelay(500);
 8003bfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c00:	f00e fc7f 	bl	8012502 <osDelay>
        		LCD_I2C_ClearAllLines(&hlcd3);
 8003c04:	485a      	ldr	r0, [pc, #360]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003c06:	f7fd fb2d 	bl	8001264 <LCD_I2C_ClearAllLines>
        		LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4858      	ldr	r0, [pc, #352]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003c10:	f7fd fafc 	bl	800120c <LCD_I2C_SetCursor>
        		LCD_I2C_printStr(&hlcd3, "Setting up machine, please wait...");
 8003c14:	4957      	ldr	r1, [pc, #348]	@ (8003d74 <vMainMenuTask+0x1c0>)
 8003c16:	4856      	ldr	r0, [pc, #344]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003c18:	f7fd fabe 	bl	8001198 <LCD_I2C_printStr>
        		initializeSystem();
 8003c1c:	f7ff fc4c 	bl	80034b8 <initializeSystem>
                // Wait here until the initialization semaphore is given.
                if (xSemaphoreTake(xInitSemaphore, portMAX_DELAY) == pdTRUE) {
 8003c20:	4b55      	ldr	r3, [pc, #340]	@ (8003d78 <vMainMenuTask+0x1c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f04f 31ff 	mov.w	r1, #4294967295
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f00f fbb9 	bl	80133a0 <xQueueSemaphoreTake>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	f040 8093 	bne.w	8003d5c <vMainMenuTask+0x1a8>
                    currentState = MENU_STATE_MAIN;
 8003c36:	4b4d      	ldr	r3, [pc, #308]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
                }
        }
        	break;
 8003c3c:	e08e      	b.n	8003d5c <vMainMenuTask+0x1a8>

            case MENU_STATE_MAIN:
                {
                    // Display main menu and get selection.
                	const char* menuItems[] = {"Test from SD", "Prepare Machine"};
 8003c3e:	4a4f      	ldr	r2, [pc, #316]	@ (8003d7c <vMainMenuTask+0x1c8>)
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c48:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t mainSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1, menuItems,2, 0);
 8003c4c:	f107 0214 	add.w	r2, r7, #20
 8003c50:	2300      	movs	r3, #0
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2302      	movs	r3, #2
 8003c56:	494a      	ldr	r1, [pc, #296]	@ (8003d80 <vMainMenuTask+0x1cc>)
 8003c58:	4845      	ldr	r0, [pc, #276]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003c5a:	f7fd fb9b 	bl	8001394 <LCD_I2C_menuTemplate>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	77bb      	strb	r3, [r7, #30]
                    if (mainSelection == 0) {
 8003c62:	7fbb      	ldrb	r3, [r7, #30]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <vMainMenuTask+0xbc>
                        currentState = MENU_STATE_SD_TEST;
 8003c68:	4b40      	ldr	r3, [pc, #256]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	701a      	strb	r2, [r3, #0]
                    } else if (mainSelection == 1) {
                        currentState = MENU_STATE_PREPARE_MACHINE;
                    } 
                }
                break;
 8003c6e:	e077      	b.n	8003d60 <vMainMenuTask+0x1ac>
                    } else if (mainSelection == 1) {
 8003c70:	7fbb      	ldrb	r3, [r7, #30]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d174      	bne.n	8003d60 <vMainMenuTask+0x1ac>
                        currentState = MENU_STATE_PREPARE_MACHINE;
 8003c76:	4b3d      	ldr	r3, [pc, #244]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003c78:	2206      	movs	r2, #6
 8003c7a:	701a      	strb	r2, [r3, #0]
                break;
 8003c7c:	e070      	b.n	8003d60 <vMainMenuTask+0x1ac>

            case MENU_STATE_SD_TEST:
                {
                    // Display SD card test menu or process SD card files.
                	  LCD_I2C_Clear(&hlcd3);
 8003c7e:	483c      	ldr	r0, [pc, #240]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003c80:	f7fd fae4 	bl	800124c <LCD_I2C_Clear>
                	  LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003c84:	2201      	movs	r2, #1
 8003c86:	2100      	movs	r1, #0
 8003c88:	4839      	ldr	r0, [pc, #228]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003c8a:	f7fd fabf 	bl	800120c <LCD_I2C_SetCursor>
                	  LCD_I2C_printStr(&hlcd3, "Performing Tests");
 8003c8e:	493d      	ldr	r1, [pc, #244]	@ (8003d84 <vMainMenuTask+0x1d0>)
 8003c90:	4837      	ldr	r0, [pc, #220]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003c92:	f7fd fa81 	bl	8001198 <LCD_I2C_printStr>
                      LCD_I2C_DisplaySDMenu(&hlcd3, &henc1);
 8003c96:	493a      	ldr	r1, [pc, #232]	@ (8003d80 <vMainMenuTask+0x1cc>)
 8003c98:	4835      	ldr	r0, [pc, #212]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003c9a:	f7fd fdb5 	bl	8001808 <LCD_I2C_DisplaySDMenu>



                        //currentState = MENU_STATE_MAIN;
                }
                break;
 8003c9e:	e060      	b.n	8003d62 <vMainMenuTask+0x1ae>

            case MENU_STATE_CALIBRATION:
                {
                    const char* calibMenuItems[] = {"Auto Calibartion", "Manual Calibration" };
 8003ca0:	4a39      	ldr	r2, [pc, #228]	@ (8003d88 <vMainMenuTask+0x1d4>)
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003caa:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t calibSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1,calibMenuItems,2, 1);
 8003cae:	f107 020c 	add.w	r2, r7, #12
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	4931      	ldr	r1, [pc, #196]	@ (8003d80 <vMainMenuTask+0x1cc>)
 8003cba:	482d      	ldr	r0, [pc, #180]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003cbc:	f7fd fb6a 	bl	8001394 <LCD_I2C_menuTemplate>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	77fb      	strb	r3, [r7, #31]


                    	g_calibSelection = calibSelection;
 8003cc4:	4a31      	ldr	r2, [pc, #196]	@ (8003d8c <vMainMenuTask+0x1d8>)
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	7013      	strb	r3, [r2, #0]
                         //Signal the calibration task to start.
                    	xEventGroupSetBits(calibEventGroup, CALIB_START_BIT);
 8003cca:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <vMainMenuTask+0x1dc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f00e fde9 	bl	80128a8 <xEventGroupSetBits>
                    	 //Wait for calibration to complete.
                    	 //(You might use a timeout here if desired.)
                    	xEventGroupWaitBits(calibEventGroup, CALIB_COMPLETE_BIT,
 8003cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d90 <vMainMenuTask+0x1dc>)
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	f00e fd05 	bl	80126f4 <xEventGroupWaitBits>
                    	                    pdTRUE, pdFALSE, portMAX_DELAY);

                         //Calibration is complete. Return to the main menu or update as needed.
                        currentState = MENU_STATE_TESTING;
 8003cea:	4b20      	ldr	r3, [pc, #128]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	701a      	strb	r2, [r3, #0]

                }
                break;
 8003cf0:	e037      	b.n	8003d62 <vMainMenuTask+0x1ae>


            case MENU_STATE_PREPARE_MACHINE:
                {
                	LCD_I2C_ClearAllLines(&hlcd3);
 8003cf2:	481f      	ldr	r0, [pc, #124]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003cf4:	f7fd fab6 	bl	8001264 <LCD_I2C_ClearAllLines>
                	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	481c      	ldr	r0, [pc, #112]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003cfe:	f7fd fa85 	bl	800120c <LCD_I2C_SetCursor>
                    LCD_I2C_printStr(&hlcd3, "Preparing...");
 8003d02:	4924      	ldr	r1, [pc, #144]	@ (8003d94 <vMainMenuTask+0x1e0>)
 8003d04:	481a      	ldr	r0, [pc, #104]	@ (8003d70 <vMainMenuTask+0x1bc>)
 8003d06:	f7fd fa47 	bl	8001198 <LCD_I2C_printStr>
                    if(MotorsHoming(&motors) == 1){
 8003d0a:	4823      	ldr	r0, [pc, #140]	@ (8003d98 <vMainMenuTask+0x1e4>)
 8003d0c:	f000 faee 	bl	80042ec <MotorsHoming>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d10a      	bne.n	8003d2c <vMainMenuTask+0x178>
                       if(!calibrationState()){
 8003d16:	f000 fd45 	bl	80047a4 <calibrationState>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <vMainMenuTask+0x172>
                           currentState =MENU_STATE_CALIBRATION;
 8003d20:	4b12      	ldr	r3, [pc, #72]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003d22:	2203      	movs	r2, #3
 8003d24:	701a      	strb	r2, [r3, #0]
                        }
                       currentState = MENU_STATE_MAIN;
 8003d26:	4b11      	ldr	r3, [pc, #68]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]

                 }
            case MENU_STATE_TESTING:
            {
            	// TDOD: MENU FOR TESTING -- SHOW PROGRESS OF TESTING
            	xEventGroupSetBits(testingEvent, TEST_START_BIT); // Start Testing task
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d9c <vMainMenuTask+0x1e8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f00e fdb8 	bl	80128a8 <xEventGroupSetBits>
            	xEventGroupWaitBits(testingEvent, TEST_COMPLETE_BIT, pdTRUE, pdFALSE, portMAX_DELAY); // Test Finished.
 8003d38:	4b18      	ldr	r3, [pc, #96]	@ (8003d9c <vMainMenuTask+0x1e8>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	2201      	movs	r2, #1
 8003d46:	2104      	movs	r1, #4
 8003d48:	f00e fcd4 	bl	80126f4 <xEventGroupWaitBits>
            	currentState = MENU_STATE_MAIN;
 8003d4c:	4b07      	ldr	r3, [pc, #28]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
            }
                break;
 8003d52:	e006      	b.n	8003d62 <vMainMenuTask+0x1ae>
            default:
                currentState = MENU_STATE_MAIN;
 8003d54:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <vMainMenuTask+0x1b8>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
                break;
 8003d5a:	e002      	b.n	8003d62 <vMainMenuTask+0x1ae>
        	break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <vMainMenuTask+0x1ae>
                break;
 8003d60:	bf00      	nop
        }

        osDelay(1);  // Allow other tasks to run
 8003d62:	2001      	movs	r0, #1
 8003d64:	f00e fbcd 	bl	8012502 <osDelay>
        switch (currentState) {
 8003d68:	e72b      	b.n	8003bc2 <vMainMenuTask+0xe>
 8003d6a:	bf00      	nop
 8003d6c:	20008a50 	.word	0x20008a50
 8003d70:	20000018 	.word	0x20000018
 8003d74:	08018844 	.word	0x08018844
 8003d78:	20008a60 	.word	0x20008a60
 8003d7c:	080188ac 	.word	0x080188ac
 8003d80:	20000000 	.word	0x20000000
 8003d84:	08018868 	.word	0x08018868
 8003d88:	080188dc 	.word	0x080188dc
 8003d8c:	20008a64 	.word	0x20008a64
 8003d90:	20008a54 	.word	0x20008a54
 8003d94:	0801887c 	.word	0x0801887c
 8003d98:	2000bf40 	.word	0x2000bf40
 8003d9c:	20008a58 	.word	0x20008a58

08003da0 <vTestingTask>:
    }
}

void vTestingTask(void *arugment){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	6078      	str	r0, [r7, #4]
	for(;;){

		EventBits_t testingBits = xEventGroupWaitBits(testingEvent, TEST_START_BIT | TEST_STOP_BIT,
 8003da8:	4b18      	ldr	r3, [pc, #96]	@ (8003e0c <vTestingTask+0x6c>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2201      	movs	r2, #1
 8003db6:	2103      	movs	r1, #3
 8003db8:	f00e fc9c 	bl	80126f4 <xEventGroupWaitBits>
 8003dbc:	60f8      	str	r0, [r7, #12]
		                                                   pdTRUE, pdFALSE, portMAX_DELAY); // Trigger testing
		if(testingBits & TEST_STOP_BIT){ // Stall detected during test
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <vTestingTask+0x4a>
	    	LCD_I2C_ClearAllLines(&hlcd3);
 8003dc8:	4811      	ldr	r0, [pc, #68]	@ (8003e10 <vTestingTask+0x70>)
 8003dca:	f7fd fa4b 	bl	8001264 <LCD_I2C_ClearAllLines>
	    	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003dce:	2201      	movs	r2, #1
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	480f      	ldr	r0, [pc, #60]	@ (8003e10 <vTestingTask+0x70>)
 8003dd4:	f7fd fa1a 	bl	800120c <LCD_I2C_SetCursor>
	    	LCD_I2C_printStr(&hlcd3, "Stall Detected, Test Aborted!");
 8003dd8:	490e      	ldr	r1, [pc, #56]	@ (8003e14 <vTestingTask+0x74>)
 8003dda:	480d      	ldr	r0, [pc, #52]	@ (8003e10 <vTestingTask+0x70>)
 8003ddc:	f7fd f9dc 	bl	8001198 <LCD_I2C_printStr>
	    	osDelay(500);
 8003de0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003de4:	f00e fb8d 	bl	8012502 <osDelay>
			continue;	// Abort test
 8003de8:	e00f      	b.n	8003e0a <vTestingTask+0x6a>
		}
		if (testingBits & TEST_START_BIT) { // Start Test
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <vTestingTask+0x64>

		preformTest();
 8003df4:	f000 f810 	bl	8003e18 <preformTest>
		xEventGroupSetBits(testingEvent, TEST_COMPLETE_BIT);
 8003df8:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <vTestingTask+0x6c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f00e fd52 	bl	80128a8 <xEventGroupSetBits>
       // xEventGroupClearBits(testingEvent, TEST_STOP_BIT); // clear bit incase we want to restart test

		}

		vTaskDelay(pdMS_TO_TICKS(10));
 8003e04:	200a      	movs	r0, #10
 8003e06:	f00f ff91 	bl	8013d2c <vTaskDelay>
	for(;;){
 8003e0a:	e7cd      	b.n	8003da8 <vTestingTask+0x8>
 8003e0c:	20008a58 	.word	0x20008a58
 8003e10:	20000018 	.word	0x20000018
 8003e14:	080188e4 	.word	0x080188e4

08003e18 <preformTest>:
}



//// FUNCTIONS //////
void preformTest(){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08c      	sub	sp, #48	@ 0x30
 8003e1c:	af00      	add	r7, sp, #0

	MotorCommand testingCMD;
	uint16_t j = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	84fb      	strh	r3, [r7, #38]	@ 0x26
	LCD_I2C_ClearAllLines(&hlcd3);
 8003e22:	4850      	ldr	r0, [pc, #320]	@ (8003f64 <preformTest+0x14c>)
 8003e24:	f7fd fa1e 	bl	8001264 <LCD_I2C_ClearAllLines>
	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	484d      	ldr	r0, [pc, #308]	@ (8003f64 <preformTest+0x14c>)
 8003e2e:	f7fd f9ed 	bl	800120c <LCD_I2C_SetCursor>
	LCD_I2C_printStr(&hlcd3, "Testing Started!");
 8003e32:	494d      	ldr	r1, [pc, #308]	@ (8003f68 <preformTest+0x150>)
 8003e34:	484b      	ldr	r0, [pc, #300]	@ (8003f64 <preformTest+0x14c>)
 8003e36:	f7fd f9af 	bl	8001198 <LCD_I2C_printStr>

	for(int l = 0; l< MAX_MOTORS; l++){ // Set testing speed for all motors
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e3e:	e012      	b.n	8003e66 <preformTest+0x4e>
		testingCMD.command = MOTOR_CMD_SETSPEED;
 8003e40:	2304      	movs	r3, #4
 8003e42:	703b      	strb	r3, [r7, #0]
		testingCMD.motorIndex = l;
 8003e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	70bb      	strb	r3, [r7, #2]
		testingCMD.speed = 80000;
 8003e4a:	f44f 5362 	mov.w	r3, #14464	@ 0x3880
 8003e4e:	817b      	strh	r3, [r7, #10]
		xQueueSend(motorCommandQueue, &testingCMD, portMAX_DELAY);
 8003e50:	4b46      	ldr	r3, [pc, #280]	@ (8003f6c <preformTest+0x154>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4639      	mov	r1, r7
 8003e56:	2300      	movs	r3, #0
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5c:	f00f f816 	bl	8012e8c <xQueueGenericSend>
	for(int l = 0; l< MAX_MOTORS; l++){ // Set testing speed for all motors
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	3301      	adds	r3, #1
 8003e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	dde9      	ble.n	8003e40 <preformTest+0x28>
	}
	osDelay(1000);
 8003e6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e70:	f00e fb47 	bl	8012502 <osDelay>
	for(int i = 0; i < commandsGcode; i++){
 8003e74:	2300      	movs	r3, #0
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e78:	e050      	b.n	8003f1c <preformTest+0x104>
		if(i % 2 == 0){
 8003e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10d      	bne.n	8003ea0 <preformTest+0x88>
			testingCMD.targetPositionsAxis0[2] = coordinates[i].x;
 8003e84:	4a3a      	ldr	r2, [pc, #232]	@ (8003f70 <preformTest+0x158>)
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	015b      	lsls	r3, r3, #5
 8003e8a:	4413      	add	r3, r2
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	61fb      	str	r3, [r7, #28]
			testingCMD.targetPositionsAxis0[0] = coordinates[i].y;
 8003e90:	4a37      	ldr	r2, [pc, #220]	@ (8003f70 <preformTest+0x158>)
 8003e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e94:	015b      	lsls	r3, r3, #5
 8003e96:	4413      	add	r3, r2
 8003e98:	3304      	adds	r3, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e00c      	b.n	8003eba <preformTest+0xa2>
		}
		else{
			testingCMD.targetPositionsAxis0[3] = coordinates[i].x;
 8003ea0:	4a33      	ldr	r2, [pc, #204]	@ (8003f70 <preformTest+0x158>)
 8003ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea4:	015b      	lsls	r3, r3, #5
 8003ea6:	4413      	add	r3, r2
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	623b      	str	r3, [r7, #32]
			testingCMD.targetPositionsAxis0[1] = coordinates[i].y;
 8003eac:	4a30      	ldr	r2, [pc, #192]	@ (8003f70 <preformTest+0x158>)
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	015b      	lsls	r3, r3, #5
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	61bb      	str	r3, [r7, #24]
		}
		if(i >= 1 && (i+1)%2 == 0){
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dd2a      	ble.n	8003f16 <preformTest+0xfe>
 8003ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d124      	bne.n	8003f16 <preformTest+0xfe>
		testingCMD.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 8003ecc:	2309      	movs	r3, #9
 8003ece:	703b      	strb	r3, [r7, #0]
		xQueueSend(motorCommandQueue, &testingCMD, portMAX_DELAY);
 8003ed0:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <preformTest+0x154>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	4639      	mov	r1, r7
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	f00e ffd6 	bl	8012e8c <xQueueGenericSend>
		 coordinates[i].testResult = CheckConnection(&hservo1,&hservo2);
 8003ee0:	4924      	ldr	r1, [pc, #144]	@ (8003f74 <preformTest+0x15c>)
 8003ee2:	4825      	ldr	r0, [pc, #148]	@ (8003f78 <preformTest+0x160>)
 8003ee4:	f7ff fb58 	bl	8003598 <CheckConnection>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4619      	mov	r1, r3
 8003eec:	4a20      	ldr	r2, [pc, #128]	@ (8003f70 <preformTest+0x158>)
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	015b      	lsls	r3, r3, #5
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	701a      	strb	r2, [r3, #0]
		 coordinates[i-1].testResult = coordinates[i].testResult;
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	491c      	ldr	r1, [pc, #112]	@ (8003f70 <preformTest+0x158>)
 8003f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f02:	0152      	lsls	r2, r2, #5
 8003f04:	440a      	add	r2, r1
 8003f06:	3208      	adds	r2, #8
 8003f08:	7811      	ldrb	r1, [r2, #0]
 8003f0a:	4a19      	ldr	r2, [pc, #100]	@ (8003f70 <preformTest+0x158>)
 8003f0c:	015b      	lsls	r3, r3, #5
 8003f0e:	4413      	add	r3, r2
 8003f10:	3308      	adds	r3, #8
 8003f12:	460a      	mov	r2, r1
 8003f14:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < commandsGcode; i++){
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	3301      	adds	r3, #1
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f1e:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <preformTest+0x164>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3a9      	bcc.n	8003e7a <preformTest+0x62>
		}
	}
    LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003f26:	2201      	movs	r2, #1
 8003f28:	2100      	movs	r1, #0
 8003f2a:	480e      	ldr	r0, [pc, #56]	@ (8003f64 <preformTest+0x14c>)
 8003f2c:	f7fd f96e 	bl	800120c <LCD_I2C_SetCursor>
    LCD_I2C_printStr(&hlcd3, "Testing Done!");
 8003f30:	4913      	ldr	r1, [pc, #76]	@ (8003f80 <preformTest+0x168>)
 8003f32:	480c      	ldr	r0, [pc, #48]	@ (8003f64 <preformTest+0x14c>)
 8003f34:	f7fd f930 	bl	8001198 <LCD_I2C_printStr>
	generate_report(&hlcd3);
 8003f38:	480a      	ldr	r0, [pc, #40]	@ (8003f64 <preformTest+0x14c>)
 8003f3a:	f7fd ff43 	bl	8001dc4 <generate_report>

	LCD_I2C_ClearAllLines(&hlcd3);
 8003f3e:	4809      	ldr	r0, [pc, #36]	@ (8003f64 <preformTest+0x14c>)
 8003f40:	f7fd f990 	bl	8001264 <LCD_I2C_ClearAllLines>
    LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003f44:	2201      	movs	r2, #1
 8003f46:	2100      	movs	r1, #0
 8003f48:	4806      	ldr	r0, [pc, #24]	@ (8003f64 <preformTest+0x14c>)
 8003f4a:	f7fd f95f 	bl	800120c <LCD_I2C_SetCursor>
    LCD_I2C_printStr(&hlcd3, "File Generated");
 8003f4e:	490d      	ldr	r1, [pc, #52]	@ (8003f84 <preformTest+0x16c>)
 8003f50:	4804      	ldr	r0, [pc, #16]	@ (8003f64 <preformTest+0x14c>)
 8003f52:	f7fd f921 	bl	8001198 <LCD_I2C_printStr>


	MotorsHoming(&motors);
 8003f56:	480c      	ldr	r0, [pc, #48]	@ (8003f88 <preformTest+0x170>)
 8003f58:	f000 f9c8 	bl	80042ec <MotorsHoming>

		//osDelay(2000);

}
 8003f5c:	bf00      	nop
 8003f5e:	3730      	adds	r7, #48	@ 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000018 	.word	0x20000018
 8003f68:	08018904 	.word	0x08018904
 8003f6c:	20008a4c 	.word	0x20008a4c
 8003f70:	20008a70 	.word	0x20008a70
 8003f74:	20000040 	.word	0x20000040
 8003f78:	2000002c 	.word	0x2000002c
 8003f7c:	2000aff0 	.word	0x2000aff0
 8003f80:	08018918 	.word	0x08018918
 8003f84:	08018928 	.word	0x08018928
 8003f88:	2000bf40 	.word	0x2000bf40

08003f8c <ProcessGcode>:


void ProcessGcode(Axis *axisGroup[], const char *gcodeArray[][MAX_LINE_LENGTH], size_t gcodeCount) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b092      	sub	sp, #72	@ 0x48
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]

    // Variables to hold PCB dimensions
	uint16_t netTestCount = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	    int inNetBlock = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
	    size_t currentNetIndex = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    for(size_t i = 0; i < gcodeCount; i++) {
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa8:	e12b      	b.n	8004202 <ProcessGcode+0x276>
	            const char *line = gcodeArray[i];
 8003faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	        // Check for a net definition line.



        if (line[0] == ';') {
 8003fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b3b      	cmp	r3, #59	@ 0x3b
 8003fba:	d167      	bne.n	800408c <ProcessGcode+0x100>
            if (strncmp(line, "; G54", 5) == 0) { // G54: actual PCB dimensions. Format G54 X.. Y..
 8003fbc:	2205      	movs	r2, #5
 8003fbe:	4994      	ldr	r1, [pc, #592]	@ (8004210 <ProcessGcode+0x284>)
 8003fc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fc2:	f012 fa16 	bl	80163f2 <strncmp>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d12c      	bne.n	8004026 <ProcessGcode+0x9a>

                const char *ptr = strchr(line, 'X');
 8003fcc:	2158      	movs	r1, #88	@ 0x58
 8003fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fd0:	f012 f9f1 	bl	80163b6 <strchr>
 8003fd4:	6178      	str	r0, [r7, #20]


                if (ptr) {
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <ProcessGcode+0x6c>
                    pcbWidth = (float)atof(ptr + 1);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f011 fa7b 	bl	80154dc <atof>
 8003fe6:	ec53 2b10 	vmov	r2, r3, d0
 8003fea:	4610      	mov	r0, r2
 8003fec:	4619      	mov	r1, r3
 8003fee:	f7fc fddd 	bl	8000bac <__aeabi_d2f>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a87      	ldr	r2, [pc, #540]	@ (8004214 <ProcessGcode+0x288>)
 8003ff6:	6013      	str	r3, [r2, #0]
                }

                ptr = strchr(line, 'Y');
 8003ff8:	2159      	movs	r1, #89	@ 0x59
 8003ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ffc:	f012 f9db 	bl	80163b6 <strchr>
 8004000:	6178      	str	r0, [r7, #20]
                if (ptr) {
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 814d 	beq.w	80042a4 <ProcessGcode+0x318>
                    pcbHeight = (float)atof(ptr + 1);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3301      	adds	r3, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f011 fa64 	bl	80154dc <atof>
 8004014:	ec53 2b10 	vmov	r2, r3, d0
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	f7fc fdc6 	bl	8000bac <__aeabi_d2f>
 8004020:	4603      	mov	r3, r0
 8004022:	4a7d      	ldr	r2, [pc, #500]	@ (8004218 <ProcessGcode+0x28c>)
 8004024:	6013      	str	r3, [r2, #0]
                else{
                	return;
                }
            }

        if (strncmp(line, "; Net:", 6) == 0) {
 8004026:	2206      	movs	r2, #6
 8004028:	497c      	ldr	r1, [pc, #496]	@ (800421c <ProcessGcode+0x290>)
 800402a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800402c:	f012 f9e1 	bl	80163f2 <strncmp>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 80e1 	bne.w	80041fa <ProcessGcode+0x26e>

        	const char *netName = strchr(line, 'Net-(');
 8004038:	4979      	ldr	r1, [pc, #484]	@ (8004220 <ProcessGcode+0x294>)
 800403a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800403c:	f012 f9bb 	bl	80163b6 <strchr>
 8004040:	6138      	str	r0, [r7, #16]

        		if(netName != NULL){
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80d8 	beq.w	80041fa <ProcessGcode+0x26e>
              	  //netName = strlen(line);
              	  size_t len = strcspn(netName,"\r\n");
 800404a:	4976      	ldr	r1, [pc, #472]	@ (8004224 <ProcessGcode+0x298>)
 800404c:	6938      	ldr	r0, [r7, #16]
 800404e:	f012 f9bf 	bl	80163d0 <strcspn>
 8004052:	6438      	str	r0, [r7, #64]	@ 0x40
              	  if( len >= 20){
 8004054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004056:	2b13      	cmp	r3, #19
 8004058:	d901      	bls.n	800405e <ProcessGcode+0xd2>
              		  len = 20-1;
 800405a:	2313      	movs	r3, #19
 800405c:	643b      	str	r3, [r7, #64]	@ 0x40
              	  }
        			strncpy(coordinates[commandsGcode].netName, netName, len);
 800405e:	4b72      	ldr	r3, [pc, #456]	@ (8004228 <ProcessGcode+0x29c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	015b      	lsls	r3, r3, #5
 8004064:	3308      	adds	r3, #8
 8004066:	4a71      	ldr	r2, [pc, #452]	@ (800422c <ProcessGcode+0x2a0>)
 8004068:	4413      	add	r3, r2
 800406a:	3301      	adds	r3, #1
 800406c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	4618      	mov	r0, r3
 8004072:	f012 f9d0 	bl	8016416 <strncpy>
        			coordinates[commandsGcode].netName[len] ='\0';
 8004076:	4b6c      	ldr	r3, [pc, #432]	@ (8004228 <ProcessGcode+0x29c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6c      	ldr	r2, [pc, #432]	@ (800422c <ProcessGcode+0x2a0>)
 800407c:	015b      	lsls	r3, r3, #5
 800407e:	441a      	add	r2, r3
 8004080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004082:	4413      	add	r3, r2
 8004084:	3309      	adds	r3, #9
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
        		}
        	}

        continue;
 800408a:	e0b6      	b.n	80041fa <ProcessGcode+0x26e>

        }

        if (strncmp(line, "G0", 2) == 0) { // G0: move command
 800408c:	2202      	movs	r2, #2
 800408e:	4968      	ldr	r1, [pc, #416]	@ (8004230 <ProcessGcode+0x2a4>)
 8004090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004092:	f012 f9ae 	bl	80163f2 <strncmp>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8093 	bne.w	80041c4 <ProcessGcode+0x238>
            float xTarget = 0.0f, yTarget = 0.0f, zTarget = 0.0f;
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
            uint8_t probe = (strstr(line, "P1") != NULL) ? 1 : ((strstr(line, "P2") != NULL) ? 2 : 0); // P1 or P2
 80040b0:	4960      	ldr	r1, [pc, #384]	@ (8004234 <ProcessGcode+0x2a8>)
 80040b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040b4:	f012 f9c2 	bl	801643c <strstr>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <ProcessGcode+0x148>
 80040be:	495e      	ldr	r1, [pc, #376]	@ (8004238 <ProcessGcode+0x2ac>)
 80040c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040c2:	f012 f9bb 	bl	801643c <strstr>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <ProcessGcode+0x144>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e002      	b.n	80040d6 <ProcessGcode+0x14a>
 80040d0:	2300      	movs	r3, #0
 80040d2:	e000      	b.n	80040d6 <ProcessGcode+0x14a>
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            // Extract axis coordinates from the line
             const char *ptr = strchr(line, 'X');
 80040da:	2158      	movs	r1, #88	@ 0x58
 80040dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040de:	f012 f96a 	bl	80163b6 <strchr>
 80040e2:	61f8      	str	r0, [r7, #28]
             if (ptr) xTarget = (float)atof(ptr + 1);
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <ProcessGcode+0x178>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3301      	adds	r3, #1
 80040ee:	4618      	mov	r0, r3
 80040f0:	f011 f9f4 	bl	80154dc <atof>
 80040f4:	ec53 2b10 	vmov	r2, r3, d0
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	f7fc fd56 	bl	8000bac <__aeabi_d2f>
 8004100:	4603      	mov	r3, r0
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c
                ptr = strchr(line, 'Y');
 8004104:	2159      	movs	r1, #89	@ 0x59
 8004106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004108:	f012 f955 	bl	80163b6 <strchr>
 800410c:	61f8      	str	r0, [r7, #28]
             if (ptr) yTarget = (float)atof(ptr + 1);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00c      	beq.n	800412e <ProcessGcode+0x1a2>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3301      	adds	r3, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f011 f9df 	bl	80154dc <atof>
 800411e:	ec53 2b10 	vmov	r2, r3, d0
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	f7fc fd41 	bl	8000bac <__aeabi_d2f>
 800412a:	4603      	mov	r3, r0
 800412c:	63bb      	str	r3, [r7, #56]	@ 0x38

             uint8_t motorIndex = (probe == 2) ? 1 : 0; // Select motor index based on P1 or P2
 800412e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004132:	2b02      	cmp	r3, #2
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	76fb      	strb	r3, [r7, #27]
             // Send MoveTo commands
            if (xTarget >= 0) {
 800413e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414a:	db15      	blt.n	8004178 <ProcessGcode+0x1ec>
                //cmd.motorIndex = motorIndex;
               // cmd.axisIndex = 1;

                if(motorIndex == 0){
 800414c:	7efb      	ldrb	r3, [r7, #27]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <ProcessGcode+0x1de>
                	coordinates[commandsGcode].x = -xTarget;
 8004152:	4b35      	ldr	r3, [pc, #212]	@ (8004228 <ProcessGcode+0x29c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800415a:	eef1 7a67 	vneg.f32	s15, s15
 800415e:	4a33      	ldr	r2, [pc, #204]	@ (800422c <ProcessGcode+0x2a0>)
 8004160:	015b      	lsls	r3, r3, #5
 8004162:	4413      	add	r3, r2
 8004164:	edc3 7a00 	vstr	s15, [r3]
 8004168:	e006      	b.n	8004178 <ProcessGcode+0x1ec>
            }
                else{
                	coordinates[commandsGcode].x = xTarget;
 800416a:	4b2f      	ldr	r3, [pc, #188]	@ (8004228 <ProcessGcode+0x29c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2f      	ldr	r2, [pc, #188]	@ (800422c <ProcessGcode+0x2a0>)
 8004170:	015b      	lsls	r3, r3, #5
 8004172:	4413      	add	r3, r2
 8004174:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004176:	601a      	str	r2, [r3, #0]
           }
                }
                //cmd.command = MOTOR_CMD_MOVETO;
                //xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);

            if (yTarget >= 0) {
 8004178:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800417c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	db3a      	blt.n	80041fc <ProcessGcode+0x270>
               // cmd.motorIndex = motorIndex;
               // cmd.axisIndex = 0;
                if(motorIndex == 0){
 8004186:	7efb      	ldrb	r3, [r7, #27]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <ProcessGcode+0x21c>
                	coordinates[commandsGcode].y = yTarget;
 800418c:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <ProcessGcode+0x29c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a26      	ldr	r2, [pc, #152]	@ (800422c <ProcessGcode+0x2a0>)
 8004192:	015b      	lsls	r3, r3, #5
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800419a:	601a      	str	r2, [r3, #0]
                	commandsGcode++;
 800419c:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <ProcessGcode+0x29c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	4a21      	ldr	r2, [pc, #132]	@ (8004228 <ProcessGcode+0x29c>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e029      	b.n	80041fc <ProcessGcode+0x270>
                }
                else{
                	coordinates[commandsGcode].y = yTarget;
 80041a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <ProcessGcode+0x29c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1f      	ldr	r2, [pc, #124]	@ (800422c <ProcessGcode+0x2a0>)
 80041ae:	015b      	lsls	r3, r3, #5
 80041b0:	4413      	add	r3, r2
 80041b2:	3304      	adds	r3, #4
 80041b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041b6:	601a      	str	r2, [r3, #0]
                	commandsGcode++;
 80041b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <ProcessGcode+0x29c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	4a1a      	ldr	r2, [pc, #104]	@ (8004228 <ProcessGcode+0x29c>)
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e01b      	b.n	80041fc <ProcessGcode+0x270>
//          if(i == gcodeCount - 1){
//        	   num_elements = i;
//
//          }

        else if (strncmp(line, "T1", 2) == 0) { // T : perform test
 80041c4:	2202      	movs	r2, #2
 80041c6:	491d      	ldr	r1, [pc, #116]	@ (800423c <ProcessGcode+0x2b0>)
 80041c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041ca:	f012 f912 	bl	80163f2 <strncmp>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <ProcessGcode+0x254>
        	testResultsCount++;
 80041d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004240 <ProcessGcode+0x2b4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3301      	adds	r3, #1
 80041da:	4a19      	ldr	r2, [pc, #100]	@ (8004240 <ProcessGcode+0x2b4>)
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00d      	b.n	80041fc <ProcessGcode+0x270>
        	//inNetBlock = 0;
        //CheckConnection(&hservo1, &hservo2);
        }

        else if (line[0] == 'M') {
 80041e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b4d      	cmp	r3, #77	@ 0x4d
 80041e6:	d109      	bne.n	80041fc <ProcessGcode+0x270>
            if (strncmp(line, "M30", 3) == 0) { // M30: end of program
 80041e8:	2203      	movs	r2, #3
 80041ea:	4916      	ldr	r1, [pc, #88]	@ (8004244 <ProcessGcode+0x2b8>)
 80041ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041ee:	f012 f900 	bl	80163f2 <strncmp>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d027      	beq.n	8004248 <ProcessGcode+0x2bc>
 80041f8:	e000      	b.n	80041fc <ProcessGcode+0x270>
        continue;
 80041fa:	bf00      	nop
	    for(size_t i = 0; i < gcodeCount; i++) {
 80041fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041fe:	3301      	adds	r3, #1
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
 8004202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	f4ff aecf 	bcc.w	8003faa <ProcessGcode+0x1e>
 800420c:	e01d      	b.n	800424a <ProcessGcode+0x2be>
 800420e:	bf00      	nop
 8004210:	08018938 	.word	0x08018938
 8004214:	20008a68 	.word	0x20008a68
 8004218:	20008a6c 	.word	0x20008a6c
 800421c:	08018940 	.word	0x08018940
 8004220:	65742d28 	.word	0x65742d28
 8004224:	08018948 	.word	0x08018948
 8004228:	2000aff0 	.word	0x2000aff0
 800422c:	20008a70 	.word	0x20008a70
 8004230:	0801894c 	.word	0x0801894c
 8004234:	08018950 	.word	0x08018950
 8004238:	08018954 	.word	0x08018954
 800423c:	08018958 	.word	0x08018958
 8004240:	2000aff4 	.word	0x2000aff4
 8004244:	0801895c 	.word	0x0801895c
                break;  // End processing
 8004248:	bf00      	nop
            }
            //vTaskDelay(100);
        }
        // TODO: Some delay?
    }
	    commandsGcode++;
 800424a:	4b18      	ldr	r3, [pc, #96]	@ (80042ac <ProcessGcode+0x320>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <ProcessGcode+0x320>)
 8004252:	6013      	str	r3, [r2, #0]
	    coordinates[commandsGcode].x = 1.5f;
 8004254:	4b15      	ldr	r3, [pc, #84]	@ (80042ac <ProcessGcode+0x320>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a15      	ldr	r2, [pc, #84]	@ (80042b0 <ProcessGcode+0x324>)
 800425a:	015b      	lsls	r3, r3, #5
 800425c:	4413      	add	r3, r2
 800425e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004262:	601a      	str	r2, [r3, #0]
	    coordinates[commandsGcode].y = 1.5f;
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <ProcessGcode+0x320>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a11      	ldr	r2, [pc, #68]	@ (80042b0 <ProcessGcode+0x324>)
 800426a:	015b      	lsls	r3, r3, #5
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004274:	601a      	str	r2, [r3, #0]
	    commandsGcode++;
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <ProcessGcode+0x320>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3301      	adds	r3, #1
 800427c:	4a0b      	ldr	r2, [pc, #44]	@ (80042ac <ProcessGcode+0x320>)
 800427e:	6013      	str	r3, [r2, #0]
	    coordinates[commandsGcode].x = 1.5f;
 8004280:	4b0a      	ldr	r3, [pc, #40]	@ (80042ac <ProcessGcode+0x320>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0a      	ldr	r2, [pc, #40]	@ (80042b0 <ProcessGcode+0x324>)
 8004286:	015b      	lsls	r3, r3, #5
 8004288:	4413      	add	r3, r2
 800428a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800428e:	601a      	str	r2, [r3, #0]
	    coordinates[commandsGcode].y = 1.5f;
 8004290:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <ProcessGcode+0x320>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a06      	ldr	r2, [pc, #24]	@ (80042b0 <ProcessGcode+0x324>)
 8004296:	015b      	lsls	r3, r3, #5
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e000      	b.n	80042a6 <ProcessGcode+0x31a>
                	return;
 80042a4:	bf00      	nop

}
 80042a6:	3748      	adds	r7, #72	@ 0x48
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	2000aff0 	.word	0x2000aff0
 80042b0:	20008a70 	.word	0x20008a70

080042b4 <ResetMotorState>:
uint8_t x = 0;
bool testing = 0;
const uint32_t HOMING_SPEED = 80000;
const uint32_t CALIB_SPEED = 80000;

static void ResetMotorState(Motor *m, float homePosition) {
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	ed87 0a00 	vstr	s0, [r7]
    m->currentPositionMM = homePosition;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    m->stepsTaken = 0;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	671a      	str	r2, [r3, #112]	@ 0x70
    m->StepsBack = 0;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    m->StepsFront = 0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <MotorsHoming>:
      reset its state.
    • Then poll (with a short delay) until each motor reaches its home.
    • When a sensor is triggered during polling, a STOP command is sent,
      and the motor state is reset.
------------------------------------------------------------------*/
bool MotorsHoming(Motor *motor) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	@ 0x30
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    bool homed[4] = { false, false, false, false };
 80042f4:	2300      	movs	r3, #0
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //SERVO_WritePosition(&hservo1, 115);
    //SERVO_WritePosition(&hservo2, 115);

    /* --- Start each motor if not already at its home sensor --- */
    /* Motor 0: Uses EndStop2, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 0) {
 80042f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042fc:	48cb      	ldr	r0, [pc, #812]	@ (800462c <MotorsHoming+0x340>)
 80042fe:	f7ff f987 	bl	8003610 <IsSensorTriggered>
 8004302:	4603      	mov	r3, r0
 8004304:	f083 0301 	eor.w	r3, r3, #1
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01f      	beq.n	800434e <MotorsHoming+0x62>
        TMC2209_SetSpeed(&motor[0], HOMING_SPEED);
 800430e:	4bc8      	ldr	r3, [pc, #800]	@ (8004630 <MotorsHoming+0x344>)
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fd ff43 	bl	800219e <TMC2209_SetSpeed>
        cmd.motorIndex = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 800431c:	2303      	movs	r3, #3
 800431e:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 8004320:	2301      	movs	r3, #1
 8004322:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004324:	4bc3      	ldr	r3, [pc, #780]	@ (8004634 <MotorsHoming+0x348>)
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	f107 0108 	add.w	r1, r7, #8
 800432c:	2300      	movs	r3, #0
 800432e:	f04f 32ff 	mov.w	r2, #4294967295
 8004332:	f00e fdab 	bl	8012e8c <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004336:	2302      	movs	r3, #2
 8004338:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800433a:	4bbe      	ldr	r3, [pc, #760]	@ (8004634 <MotorsHoming+0x348>)
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	f107 0108 	add.w	r1, r7, #8
 8004342:	2300      	movs	r3, #0
 8004344:	f04f 32ff 	mov.w	r2, #4294967295
 8004348:	f00e fda0 	bl	8012e8c <xQueueGenericSend>
 800434c:	e007      	b.n	800435e <MotorsHoming+0x72>
    } else {
        homed[0] = true;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        ResetMotorState(&motor[0], 0);
 8004354:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8004638 <MotorsHoming+0x34c>
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ffab 	bl	80042b4 <ResetMotorState>
    }

    /* Motor 1: Uses EndStop4, home position = 450, direction = 0 */
    if (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 0) {
 800435e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004362:	48b6      	ldr	r0, [pc, #728]	@ (800463c <MotorsHoming+0x350>)
 8004364:	f7ff f954 	bl	8003610 <IsSensorTriggered>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d021      	beq.n	80043b8 <MotorsHoming+0xcc>
        TMC2209_SetSpeed(&motor[1], HOMING_SPEED);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	33a4      	adds	r3, #164	@ 0xa4
 8004378:	4aad      	ldr	r2, [pc, #692]	@ (8004630 <MotorsHoming+0x344>)
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f7fd ff0e 	bl	800219e <TMC2209_SetSpeed>
        cmd.motorIndex = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8004386:	2303      	movs	r3, #3
 8004388:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800438e:	4ba9      	ldr	r3, [pc, #676]	@ (8004634 <MotorsHoming+0x348>)
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	f107 0108 	add.w	r1, r7, #8
 8004396:	2300      	movs	r3, #0
 8004398:	f04f 32ff 	mov.w	r2, #4294967295
 800439c:	f00e fd76 	bl	8012e8c <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 80043a0:	2302      	movs	r3, #2
 80043a2:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80043a4:	4ba3      	ldr	r3, [pc, #652]	@ (8004634 <MotorsHoming+0x348>)
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	f107 0108 	add.w	r1, r7, #8
 80043ac:	2300      	movs	r3, #0
 80043ae:	f04f 32ff 	mov.w	r2, #4294967295
 80043b2:	f00e fd6b 	bl	8012e8c <xQueueGenericSend>
 80043b6:	e009      	b.n	80043cc <MotorsHoming+0xe0>
    } else {
        homed[1] = true;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        ResetMotorState(&motor[1], 0);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	33a4      	adds	r3, #164	@ 0xa4
 80043c2:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 8004638 <MotorsHoming+0x34c>
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff ff74 	bl	80042b4 <ResetMotorState>
    }

    /* Motor 2: Uses EndStop1, home position = 0, direction = 0 */
    if (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 0) {
 80043cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043d0:	489a      	ldr	r0, [pc, #616]	@ (800463c <MotorsHoming+0x350>)
 80043d2:	f7ff f91d 	bl	8003610 <IsSensorTriggered>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f083 0301 	eor.w	r3, r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d022      	beq.n	8004428 <MotorsHoming+0x13c>
        TMC2209_SetSpeed(&motor[2], HOMING_SPEED);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80043e8:	4a91      	ldr	r2, [pc, #580]	@ (8004630 <MotorsHoming+0x344>)
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fd fed6 	bl	800219e <TMC2209_SetSpeed>
        cmd.motorIndex = 2;
 80043f2:	2302      	movs	r3, #2
 80043f4:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 80043f6:	2303      	movs	r3, #3
 80043f8:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80043fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004634 <MotorsHoming+0x348>)
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	f107 0108 	add.w	r1, r7, #8
 8004406:	2300      	movs	r3, #0
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	f00e fd3e 	bl	8012e8c <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004410:	2302      	movs	r3, #2
 8004412:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004414:	4b87      	ldr	r3, [pc, #540]	@ (8004634 <MotorsHoming+0x348>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	f107 0108 	add.w	r1, r7, #8
 800441c:	2300      	movs	r3, #0
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	f00e fd33 	bl	8012e8c <xQueueGenericSend>
 8004426:	e00a      	b.n	800443e <MotorsHoming+0x152>
    } else {
        homed[2] = true;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ResetMotorState(&motor[2], 0);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004434:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 8004638 <MotorsHoming+0x34c>
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff3b 	bl	80042b4 <ResetMotorState>
    }

    /* Motor 3: Uses EndStop3, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 0) {
 800443e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004442:	487a      	ldr	r0, [pc, #488]	@ (800462c <MotorsHoming+0x340>)
 8004444:	f7ff f8e4 	bl	8003610 <IsSensorTriggered>
 8004448:	4603      	mov	r3, r0
 800444a:	f083 0301 	eor.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d022      	beq.n	800449a <MotorsHoming+0x1ae>
        TMC2209_SetSpeed(&motor[3], HOMING_SPEED);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800445a:	4a75      	ldr	r2, [pc, #468]	@ (8004630 <MotorsHoming+0x344>)
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd fe9d 	bl	800219e <TMC2209_SetSpeed>
        cmd.motorIndex = 3;
 8004464:	2303      	movs	r3, #3
 8004466:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8004468:	2303      	movs	r3, #3
 800446a:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 800446c:	2301      	movs	r3, #1
 800446e:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004470:	4b70      	ldr	r3, [pc, #448]	@ (8004634 <MotorsHoming+0x348>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	f107 0108 	add.w	r1, r7, #8
 8004478:	2300      	movs	r3, #0
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	f00e fd05 	bl	8012e8c <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004482:	2302      	movs	r3, #2
 8004484:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004486:	4b6b      	ldr	r3, [pc, #428]	@ (8004634 <MotorsHoming+0x348>)
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	f107 0108 	add.w	r1, r7, #8
 800448e:	2300      	movs	r3, #0
 8004490:	f04f 32ff 	mov.w	r2, #4294967295
 8004494:	f00e fcfa 	bl	8012e8c <xQueueGenericSend>
 8004498:	e0a3      	b.n	80045e2 <MotorsHoming+0x2f6>
    } else {
        homed[3] = true;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        ResetMotorState(&motor[3], 0);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80044a6:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8004638 <MotorsHoming+0x34c>
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff02 	bl	80042b4 <ResetMotorState>
    }

    /* --- Poll sensors until all motors are homed --- */
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 80044b0:	e097      	b.n	80045e2 <MotorsHoming+0x2f6>
        if (!homed[0] && (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 1)) {
 80044b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044b6:	f083 0301 	eor.w	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01c      	beq.n	80044fa <MotorsHoming+0x20e>
 80044c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044c4:	4859      	ldr	r0, [pc, #356]	@ (800462c <MotorsHoming+0x340>)
 80044c6:	f7ff f8a3 	bl	8003610 <IsSensorTriggered>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d014      	beq.n	80044fa <MotorsHoming+0x20e>
            cmd.motorIndex = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 80044d4:	2301      	movs	r3, #1
 80044d6:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80044d8:	4b56      	ldr	r3, [pc, #344]	@ (8004634 <MotorsHoming+0x348>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	f107 0108 	add.w	r1, r7, #8
 80044e0:	2300      	movs	r3, #0
 80044e2:	f04f 32ff 	mov.w	r2, #4294967295
 80044e6:	f00e fcd1 	bl	8012e8c <xQueueGenericSend>
            ResetMotorState(&motor[0], 0);
 80044ea:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8004638 <MotorsHoming+0x34c>
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fee0 	bl	80042b4 <ResetMotorState>
            homed[0] = true;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        }
        if (!homed[1] && (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 1)) {
 80044fa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80044fe:	f083 0301 	eor.w	r3, r3, #1
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01e      	beq.n	8004546 <MotorsHoming+0x25a>
 8004508:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800450c:	484b      	ldr	r0, [pc, #300]	@ (800463c <MotorsHoming+0x350>)
 800450e:	f7ff f87f 	bl	8003610 <IsSensorTriggered>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d016      	beq.n	8004546 <MotorsHoming+0x25a>
            cmd.motorIndex = 1;
 8004518:	2301      	movs	r3, #1
 800451a:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 800451c:	2301      	movs	r3, #1
 800451e:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004520:	4b44      	ldr	r3, [pc, #272]	@ (8004634 <MotorsHoming+0x348>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	f107 0108 	add.w	r1, r7, #8
 8004528:	2300      	movs	r3, #0
 800452a:	f04f 32ff 	mov.w	r2, #4294967295
 800452e:	f00e fcad 	bl	8012e8c <xQueueGenericSend>
            ResetMotorState(&motor[1], 0);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	33a4      	adds	r3, #164	@ 0xa4
 8004536:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8004638 <MotorsHoming+0x34c>
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff feba 	bl	80042b4 <ResetMotorState>
            homed[1] = true;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }
        if (!homed[2] && (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 1)) {
 8004546:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800454a:	f083 0301 	eor.w	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01f      	beq.n	8004594 <MotorsHoming+0x2a8>
 8004554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004558:	4838      	ldr	r0, [pc, #224]	@ (800463c <MotorsHoming+0x350>)
 800455a:	f7ff f859 	bl	8003610 <IsSensorTriggered>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d017      	beq.n	8004594 <MotorsHoming+0x2a8>
            cmd.motorIndex = 2;
 8004564:	2302      	movs	r3, #2
 8004566:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 8004568:	2301      	movs	r3, #1
 800456a:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800456c:	4b31      	ldr	r3, [pc, #196]	@ (8004634 <MotorsHoming+0x348>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	f107 0108 	add.w	r1, r7, #8
 8004574:	2300      	movs	r3, #0
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	f00e fc87 	bl	8012e8c <xQueueGenericSend>
            ResetMotorState(&motor[2], 0);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004584:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8004638 <MotorsHoming+0x34c>
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fe93 	bl	80042b4 <ResetMotorState>
            homed[2] = true;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        }
        if (!homed[3] && (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 1)) {
 8004594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004598:	f083 0301 	eor.w	r3, r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01f      	beq.n	80045e2 <MotorsHoming+0x2f6>
 80045a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80045a6:	4821      	ldr	r0, [pc, #132]	@ (800462c <MotorsHoming+0x340>)
 80045a8:	f7ff f832 	bl	8003610 <IsSensorTriggered>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d017      	beq.n	80045e2 <MotorsHoming+0x2f6>
            cmd.motorIndex = 3;
 80045b2:	2303      	movs	r3, #3
 80045b4:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 80045b6:	2301      	movs	r3, #1
 80045b8:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80045ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004634 <MotorsHoming+0x348>)
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	f107 0108 	add.w	r1, r7, #8
 80045c2:	2300      	movs	r3, #0
 80045c4:	f04f 32ff 	mov.w	r2, #4294967295
 80045c8:	f00e fc60 	bl	8012e8c <xQueueGenericSend>
            ResetMotorState(&motor[3], 0);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80045d2:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8004638 <MotorsHoming+0x34c>
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fe6c 	bl	80042b4 <ResetMotorState>
            homed[3] = true;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 80045e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80045e6:	f083 0301 	eor.w	r3, r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f47f af60 	bne.w	80044b2 <MotorsHoming+0x1c6>
 80045f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80045f6:	f083 0301 	eor.w	r3, r3, #1
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f47f af58 	bne.w	80044b2 <MotorsHoming+0x1c6>
 8004602:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004606:	f083 0301 	eor.w	r3, r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	f47f af50 	bne.w	80044b2 <MotorsHoming+0x1c6>
 8004612:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004616:	f083 0301 	eor.w	r3, r3, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	f47f af48 	bne.w	80044b2 <MotorsHoming+0x1c6>
        }
        /* Yield for 1 ms to allow other tasks to run */
        //vTaskDelay(pdMS_TO_TICKS(1));
    }

    return true;
 8004622:	2301      	movs	r3, #1
}
 8004624:	4618      	mov	r0, r3
 8004626:	3730      	adds	r7, #48	@ 0x30
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021000 	.word	0x40021000
 8004630:	00013880 	.word	0x00013880
 8004634:	20008a4c 	.word	0x20008a4c
 8004638:	00000000 	.word	0x00000000
 800463c:	40021400 	.word	0x40021400

08004640 <AutoCalibration>:
       to move each motor to its calibration positions.
    3. Uses nonblocking delays with vTaskDelay().

  Adjust axis/motor indexes, positions, and offsets as needed.
------------------------------------------------------------------*/
void AutoCalibration(Axis *axes, Motor *motors) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	@ 0x30
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
    MotorCommand cmd;

//    SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
//    SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
    // Continue with calibration until the calibration condition is met.
    if(!calibrationState()) {
 800464a:	f000 f8ab 	bl	80047a4 <calibrationState>
 800464e:	4603      	mov	r3, r0
 8004650:	f083 0301 	eor.w	r3, r3, #1
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d07f      	beq.n	800475a <AutoCalibration+0x11a>
        MotorsHoming(motors);
 800465a:	6838      	ldr	r0, [r7, #0]
 800465c:	f7ff fe46 	bl	80042ec <MotorsHoming>
         *       Motor 0 -> -47.9 mm
         *       Motor 1 -> 50.2 mm
         *
         * Adjust the indices below if your system assigns motors differently.
         */
        TMC2209_SetSpeed(&motors[0], CALIB_SPEED);
 8004660:	4b40      	ldr	r3, [pc, #256]	@ (8004764 <AutoCalibration+0x124>)
 8004662:	4619      	mov	r1, r3
 8004664:	6838      	ldr	r0, [r7, #0]
 8004666:	f7fd fd9a 	bl	800219e <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[1], CALIB_SPEED);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	33a4      	adds	r3, #164	@ 0xa4
 800466e:	4a3d      	ldr	r2, [pc, #244]	@ (8004764 <AutoCalibration+0x124>)
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd fd93 	bl	800219e <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[2], CALIB_SPEED);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800467e:	4a39      	ldr	r2, [pc, #228]	@ (8004764 <AutoCalibration+0x124>)
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fd8b 	bl	800219e <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[3], CALIB_SPEED);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800468e:	4a35      	ldr	r2, [pc, #212]	@ (8004764 <AutoCalibration+0x124>)
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd fd83 	bl	800219e <TMC2209_SetSpeed>
        HAL_Delay(3000);
 8004698:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800469c:	f002 fcc0 	bl	8007020 <HAL_Delay>

        LCD_I2C_ClearAllLines(&hlcd3);
 80046a0:	4831      	ldr	r0, [pc, #196]	@ (8004768 <AutoCalibration+0x128>)
 80046a2:	f7fc fddf 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(&hlcd3, 0, 2);
 80046a6:	2202      	movs	r2, #2
 80046a8:	2100      	movs	r1, #0
 80046aa:	482f      	ldr	r0, [pc, #188]	@ (8004768 <AutoCalibration+0x128>)
 80046ac:	f7fc fdae 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(&hlcd3, "Calibrating!");
 80046b0:	492e      	ldr	r1, [pc, #184]	@ (800476c <AutoCalibration+0x12c>)
 80046b2:	482d      	ldr	r0, [pc, #180]	@ (8004768 <AutoCalibration+0x128>)
 80046b4:	f7fc fd70 	bl	8001198 <LCD_I2C_printStr>
        //float targetPositionsAxis0[MAX_MOTORS_PER_AXIS] = ;
        //float targetPositionsAxis1[MAX_MOTORS_PER_AXIS] = ;
        cmd.targetPositionsAxis0[0] = 38.62f;   // Y
 80046b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <AutoCalibration+0x130>)
 80046ba:	623b      	str	r3, [r7, #32]
        cmd.targetPositionsAxis0[1] = -57.5f; // Y
 80046bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004774 <AutoCalibration+0x134>)
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
        cmd.targetPositionsAxis0[2] = -80.85f;  // X
 80046c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004778 <AutoCalibration+0x138>)
 80046c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        cmd.targetPositionsAxis0[3] = 22.0f;   // X/ X
 80046c4:	4b2d      	ldr	r3, [pc, #180]	@ (800477c <AutoCalibration+0x13c>)
 80046c6:	62fb      	str	r3, [r7, #44]	@ 0x2c





        cmd.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 80046c8:	2309      	movs	r3, #9
 80046ca:	733b      	strb	r3, [r7, #12]

       xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80046cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004780 <AutoCalibration+0x140>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	f107 010c 	add.w	r1, r7, #12
 80046d4:	2300      	movs	r3, #0
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295
 80046da:	f00e fbd7 	bl	8012e8c <xQueueGenericSend>
       CheckConnection(&hservo1,&hservo2);
 80046de:	4929      	ldr	r1, [pc, #164]	@ (8004784 <AutoCalibration+0x144>)
 80046e0:	4829      	ldr	r0, [pc, #164]	@ (8004788 <AutoCalibration+0x148>)
 80046e2:	f7fe ff59 	bl	8003598 <CheckConnection>
//       SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
//       SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
       axes[0].motors[0]->currentPositionMM = 0.0f;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[0].motors[1]->currentPositionMM = 99.11111f;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a25      	ldr	r2, [pc, #148]	@ (800478c <AutoCalibration+0x14c>)
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[1].motors[0]->currentPositionMM = 0.0f;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3328      	adds	r3, #40	@ 0x28
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[1].motors[1]->currentPositionMM = 0.0f;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3328      	adds	r3, #40	@ 0x28
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
         * - And updated each motor's currentPositionMM to the new (target) value.
         */

        // Optionally update calibration values in the motors structure.
        // (Be sure that these indices match your system's mapping.)
        motors[0].calib[1] = 77.9f;  // 77.9f
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <AutoCalibration+0x150>)
 800471c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[1].calib[1] = -47.9f;  // -47.9f
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	33a4      	adds	r3, #164	@ 0xa4
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <AutoCalibration+0x154>)
 8004726:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[2].calib[1] = -100.0f;  // -100.8f
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004730:	4a19      	ldr	r2, [pc, #100]	@ (8004798 <AutoCalibration+0x158>)
 8004732:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[3].calib[1] = 50.2f;  // 50.2f
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800473c:	4a17      	ldr	r2, [pc, #92]	@ (800479c <AutoCalibration+0x15c>)
 800473e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        // Clear and update the LCD to indicate calibration is done.
        LCD_I2C_ClearAllLines(&hlcd3);
 8004742:	4809      	ldr	r0, [pc, #36]	@ (8004768 <AutoCalibration+0x128>)
 8004744:	f7fc fd8e 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(&hlcd3, 0, 2);
 8004748:	2202      	movs	r2, #2
 800474a:	2100      	movs	r1, #0
 800474c:	4806      	ldr	r0, [pc, #24]	@ (8004768 <AutoCalibration+0x128>)
 800474e:	f7fc fd5d 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(&hlcd3, "Calibration done!");
 8004752:	4913      	ldr	r1, [pc, #76]	@ (80047a0 <AutoCalibration+0x160>)
 8004754:	4804      	ldr	r0, [pc, #16]	@ (8004768 <AutoCalibration+0x128>)
 8004756:	f7fc fd1f 	bl	8001198 <LCD_I2C_printStr>

        // Perform any connection testing.
       // testing = CheckConnection(&hservo2, &hservo1);

    }
}
 800475a:	bf00      	nop
 800475c:	3730      	adds	r7, #48	@ 0x30
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	00013880 	.word	0x00013880
 8004768:	20000018 	.word	0x20000018
 800476c:	08018a48 	.word	0x08018a48
 8004770:	421a7ae1 	.word	0x421a7ae1
 8004774:	c2660000 	.word	0xc2660000
 8004778:	c2a1b333 	.word	0xc2a1b333
 800477c:	41b00000 	.word	0x41b00000
 8004780:	20008a4c 	.word	0x20008a4c
 8004784:	20000040 	.word	0x20000040
 8004788:	2000002c 	.word	0x2000002c
 800478c:	42c638e3 	.word	0x42c638e3
 8004790:	429bcccd 	.word	0x429bcccd
 8004794:	c23f999a 	.word	0xc23f999a
 8004798:	c2c80000 	.word	0xc2c80000
 800479c:	4248cccd 	.word	0x4248cccd
 80047a0:	08018a58 	.word	0x08018a58

080047a4 <calibrationState>:


bool calibrationState(void) {
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
    
    if (motors[0].calib[1] != 0 &&
 80047a8:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <calibrationState+0x54>)
 80047aa:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 80047ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d019      	beq.n	80047ec <calibrationState+0x48>
        motors[2].calib[1] != 0 &&
 80047b8:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <calibrationState+0x54>)
 80047ba:	edd3 7a79 	vldr	s15, [r3, #484]	@ 0x1e4
    if (motors[0].calib[1] != 0 &&
 80047be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c6:	d011      	beq.n	80047ec <calibrationState+0x48>
        motors[3].calib[1] != 0 &&
 80047c8:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <calibrationState+0x54>)
 80047ca:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
        motors[2].calib[1] != 0 &&
 80047ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	d009      	beq.n	80047ec <calibrationState+0x48>
        motors[1].calib[1] != 0)
 80047d8:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <calibrationState+0x54>)
 80047da:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
        motors[3].calib[1] != 0 &&
 80047de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e6:	d001      	beq.n	80047ec <calibrationState+0x48>
    {
        return true;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <calibrationState+0x4a>
    }
    else {
        return false;
 80047ec:	2300      	movs	r3, #0
    }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	2000bf40 	.word	0x2000bf40

080047fc <ManualCalibration>:


void ManualCalibration(Axis *axes, Motor *motors) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	@ 0x38
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
    /* If calibration is complete, exit immediately */
    TMC2209_SetSpeed(&motors[0], 8000);
 8004806:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800480a:	6838      	ldr	r0, [r7, #0]
 800480c:	f7fd fcc7 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	33a4      	adds	r3, #164	@ 0xa4
 8004814:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd fcc0 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004824:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004828:	4618      	mov	r0, r3
 800482a:	f7fd fcb8 	bl	800219e <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004834:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004838:	4618      	mov	r0, r3
 800483a:	f7fd fcb0 	bl	800219e <TMC2209_SetSpeed>
    MotorCommand cmd;  // Command structure to post to motorControlTask

	MotorsHoming(motors);
 800483e:	6838      	ldr	r0, [r7, #0]
 8004840:	f7ff fd54 	bl	80042ec <MotorsHoming>
    while(!calibrationState()){
 8004844:	e315      	b.n	8004e72 <ManualCalibration+0x676>
    //RunManualCalibrationStateMachine(&hlcd3, &motors);
        SERVO_WritePosition(&hservo1, SERVO1_CHECK_POS);
 8004846:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8004a28 <ManualCalibration+0x22c>
 800484a:	4878      	ldr	r0, [pc, #480]	@ (8004a2c <ManualCalibration+0x230>)
 800484c:	f7fe ffa6 	bl	800379c <SERVO_WritePosition>
        SERVO_WritePosition(&hservo2, SERVO2_CHECK_POS);
 8004850:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8004a30 <ManualCalibration+0x234>
 8004854:	4877      	ldr	r0, [pc, #476]	@ (8004a34 <ManualCalibration+0x238>)
 8004856:	f7fe ffa1 	bl	800379c <SERVO_WritePosition>
    	/* Example variables. Put them in a suitable scope (static in file-scope or function-scope). */
    	static uint8_t buttonState = 0;       // 0 = not pressed, 1 = pressed
    	static uint32_t pressStartTime = 0;   // Time at which the button was first pressed

    	// Debounce time in ms:
    	const uint32_t debounceTime = 50;
 800485a:	2332      	movs	r3, #50	@ 0x32
 800485c:	637b      	str	r3, [r7, #52]	@ 0x34
    	LCD_I2C_ClearAllLines(&hlcd3);
 800485e:	4876      	ldr	r0, [pc, #472]	@ (8004a38 <ManualCalibration+0x23c>)
 8004860:	f7fc fd00 	bl	8001264 <LCD_I2C_ClearAllLines>
    	LCD_I2C_SetCursor(&hlcd3, 0, 2);
 8004864:	2202      	movs	r2, #2
 8004866:	2100      	movs	r1, #0
 8004868:	4873      	ldr	r0, [pc, #460]	@ (8004a38 <ManualCalibration+0x23c>)
 800486a:	f7fc fccf 	bl	800120c <LCD_I2C_SetCursor>
    	LCD_I2C_printStr(&hlcd3, "Calibrate Probe 1!");
 800486e:	4973      	ldr	r1, [pc, #460]	@ (8004a3c <ManualCalibration+0x240>)
 8004870:	4871      	ldr	r0, [pc, #452]	@ (8004a38 <ManualCalibration+0x23c>)
 8004872:	f7fc fc91 	bl	8001198 <LCD_I2C_printStr>

    static uint32_t lastPressTime = 0;  // Last valid press timestamp

    /* Process the calibration button (BtnCtr) */

    uint32_t currentTime = xTaskGetTickCount(); // or HAL_GetTick(), whichever you use
 8004876:	f00f fba7 	bl	8013fc8 <xTaskGetTickCount>
 800487a:	6338      	str	r0, [r7, #48]	@ 0x30
    uint8_t currentLevel = HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin);
 800487c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004880:	486f      	ldr	r0, [pc, #444]	@ (8004a40 <ManualCalibration+0x244>)
 8004882:	f003 fa89 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // ----------------------------------------------------------
    // Active-low button logic: pressed = (currentLevel == RESET)
    // ----------------------------------------------------------
    if (currentLevel == GPIO_PIN_RESET) {
 800488c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10b      	bne.n	80048ac <ManualCalibration+0xb0>
        // Button is physically pressed
        if (buttonState == 0) {
 8004894:	4b6b      	ldr	r3, [pc, #428]	@ (8004a44 <ManualCalibration+0x248>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f040 8205 	bne.w	8004ca8 <ManualCalibration+0x4ac>
            // Transition from not-pressed -> pressed
            buttonState = 1;
 800489e:	4b69      	ldr	r3, [pc, #420]	@ (8004a44 <ManualCalibration+0x248>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
            pressStartTime = currentTime;
 80048a4:	4a68      	ldr	r2, [pc, #416]	@ (8004a48 <ManualCalibration+0x24c>)
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e1fd      	b.n	8004ca8 <ManualCalibration+0x4ac>
        }
    } else {
        // Button is physically released
        if (buttonState == 1) {
 80048ac:	4b65      	ldr	r3, [pc, #404]	@ (8004a44 <ManualCalibration+0x248>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	f040 81f9 	bne.w	8004ca8 <ManualCalibration+0x4ac>
            // Transition from pressed -> released
            buttonState = 0;
 80048b6:	4b63      	ldr	r3, [pc, #396]	@ (8004a44 <ManualCalibration+0x248>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
            // Check if it was held long enough to count as a valid press
            if ((currentTime - pressStartTime) >= debounceTime) {
 80048bc:	4b62      	ldr	r3, [pc, #392]	@ (8004a48 <ManualCalibration+0x24c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048c6:	429a      	cmp	r2, r3
 80048c8:	f200 81ee 	bhi.w	8004ca8 <ManualCalibration+0x4ac>
                // We register exactly ONE press per cycle
                Pressed++;
 80048cc:	4b5f      	ldr	r3, [pc, #380]	@ (8004a4c <ManualCalibration+0x250>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	4b5d      	ldr	r3, [pc, #372]	@ (8004a4c <ManualCalibration+0x250>)
 80048d8:	701a      	strb	r2, [r3, #0]

                // -----------------------------
                // Handle your calibration steps
                // -----------------------------
                switch (Pressed) {
 80048da:	4b5c      	ldr	r3, [pc, #368]	@ (8004a4c <ManualCalibration+0x250>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d003      	beq.n	80048ec <ManualCalibration+0xf0>
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	f000 80b7 	beq.w	8004a58 <ManualCalibration+0x25c>
 80048ea:	e1d9      	b.n	8004ca0 <ManualCalibration+0x4a4>
                    case 1:
                        // Save calibration for first press
                        motors[motorGroup].currentPositionMM =
                            (float)abs(motors[motorGroup].StepsFront - motors[motorGroup].StepsBack)
 80048ec:	4b58      	ldr	r3, [pc, #352]	@ (8004a50 <ManualCalibration+0x254>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	23a4      	movs	r3, #164	@ 0xa4
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004900:	4a53      	ldr	r2, [pc, #332]	@ (8004a50 <ManualCalibration+0x254>)
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	4611      	mov	r1, r2
 8004906:	22a4      	movs	r2, #164	@ 0xa4
 8004908:	fb01 f202 	mul.w	r2, r1, r2
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	440a      	add	r2, r1
 8004910:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	bfb8      	it	lt
 800491a:	425b      	neglt	r3, r3
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[0].stepPerUnit;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup].currentPositionMM =
 800492a:	4b49      	ldr	r3, [pc, #292]	@ (8004a50 <ManualCalibration+0x254>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	23a4      	movs	r3, #164	@ 0xa4
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	4413      	add	r3, r2
                              / axes[0].stepPerUnit;
 800493a:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup].currentPositionMM =
 800493e:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
                        motors[motorGroup + 2].currentPositionMM =
                            (float)abs(motors[motorGroup + 2].StepsBack - motors[motorGroup + 2].StepsFront)
 8004942:	4b43      	ldr	r3, [pc, #268]	@ (8004a50 <ManualCalibration+0x254>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	23a4      	movs	r3, #164	@ 0xa4
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4413      	add	r3, r2
 8004956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800495a:	4619      	mov	r1, r3
 800495c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a50 <ManualCalibration+0x254>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	23a4      	movs	r3, #164	@ 0xa4
 8004964:	fb02 f303 	mul.w	r3, r2, r3
 8004968:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	4413      	add	r3, r2
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	1acb      	subs	r3, r1, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	bfb8      	it	lt
 800497a:	425b      	neglt	r3, r3
 800497c:	ee07 3a90 	vmov	s15, r3
 8004980:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[1].stepPerUnit;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3328      	adds	r3, #40	@ 0x28
 8004988:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup + 2].currentPositionMM =
 800498c:	4b30      	ldr	r3, [pc, #192]	@ (8004a50 <ManualCalibration+0x254>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	23a4      	movs	r3, #164	@ 0xa4
 8004994:	fb02 f303 	mul.w	r3, r2, r3
 8004998:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	4413      	add	r3, r2
                              / axes[1].stepPerUnit;
 80049a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup + 2].currentPositionMM =
 80049a4:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

                        motors[motorGroup].calib[0] = motors[motorGroup].currentPositionMM;
 80049a8:	4b29      	ldr	r3, [pc, #164]	@ (8004a50 <ManualCalibration+0x254>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	23a4      	movs	r3, #164	@ 0xa4
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	441a      	add	r2, r3
 80049b8:	4b25      	ldr	r3, [pc, #148]	@ (8004a50 <ManualCalibration+0x254>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	4619      	mov	r1, r3
 80049be:	23a4      	movs	r3, #164	@ 0xa4
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	6839      	ldr	r1, [r7, #0]
 80049c6:	440b      	add	r3, r1
 80049c8:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 80049cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        motors[motorGroup + 2].calib[0] = motors[motorGroup + 2].currentPositionMM;
 80049d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a50 <ManualCalibration+0x254>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	23a4      	movs	r3, #164	@ 0xa4
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	441a      	add	r2, r3
 80049e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a50 <ManualCalibration+0x254>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	23a4      	movs	r3, #164	@ 0xa4
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	440b      	add	r3, r1
 80049f8:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 80049fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                        motorGroup += 1;
 8004a00:	4b13      	ldr	r3, [pc, #76]	@ (8004a50 <ManualCalibration+0x254>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <ManualCalibration+0x254>)
 8004a0a:	701a      	strb	r2, [r3, #0]
                        LCD_I2C_ClearAllLines(&hlcd3);
 8004a0c:	480a      	ldr	r0, [pc, #40]	@ (8004a38 <ManualCalibration+0x23c>)
 8004a0e:	f7fc fc29 	bl	8001264 <LCD_I2C_ClearAllLines>
                        LCD_I2C_SetCursor(&hlcd3, 0, 2);
 8004a12:	2202      	movs	r2, #2
 8004a14:	2100      	movs	r1, #0
 8004a16:	4808      	ldr	r0, [pc, #32]	@ (8004a38 <ManualCalibration+0x23c>)
 8004a18:	f7fc fbf8 	bl	800120c <LCD_I2C_SetCursor>
                        LCD_I2C_printStr(&hlcd3, "Calibrate Probe 2!");
 8004a1c:	490d      	ldr	r1, [pc, #52]	@ (8004a54 <ManualCalibration+0x258>)
 8004a1e:	4806      	ldr	r0, [pc, #24]	@ (8004a38 <ManualCalibration+0x23c>)
 8004a20:	f7fc fbba 	bl	8001198 <LCD_I2C_printStr>
                        break;
 8004a24:	e140      	b.n	8004ca8 <ManualCalibration+0x4ac>
 8004a26:	bf00      	nop
 8004a28:	428b0000 	.word	0x428b0000
 8004a2c:	2000002c 	.word	0x2000002c
 8004a30:	421c0000 	.word	0x421c0000
 8004a34:	20000040 	.word	0x20000040
 8004a38:	20000018 	.word	0x20000018
 8004a3c:	08018a6c 	.word	0x08018a6c
 8004a40:	40020c00 	.word	0x40020c00
 8004a44:	2000affa 	.word	0x2000affa
 8004a48:	2000affc 	.word	0x2000affc
 8004a4c:	2000aff9 	.word	0x2000aff9
 8004a50:	2000aff8 	.word	0x2000aff8
 8004a54:	08018a80 	.word	0x08018a80

                    case 2:
                        // Save calibration for second press
                        motors[motorGroup].currentPositionMM =
                            (float)abs(motors[motorGroup].StepsFront - motors[motorGroup].StepsBack)
 8004a58:	4b87      	ldr	r3, [pc, #540]	@ (8004c78 <ManualCalibration+0x47c>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	23a4      	movs	r3, #164	@ 0xa4
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6c:	4a82      	ldr	r2, [pc, #520]	@ (8004c78 <ManualCalibration+0x47c>)
 8004a6e:	7812      	ldrb	r2, [r2, #0]
 8004a70:	4611      	mov	r1, r2
 8004a72:	22a4      	movs	r2, #164	@ 0xa4
 8004a74:	fb01 f202 	mul.w	r2, r1, r2
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bfb8      	it	lt
 8004a86:	425b      	neglt	r3, r3
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[0].stepPerUnit;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup].currentPositionMM =
 8004a96:	4b78      	ldr	r3, [pc, #480]	@ (8004c78 <ManualCalibration+0x47c>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	23a4      	movs	r3, #164	@ 0xa4
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	4413      	add	r3, r2
                              / axes[0].stepPerUnit;
 8004aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup].currentPositionMM =
 8004aaa:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
                        motors[motorGroup + 2].currentPositionMM =
                            (float)abs(motors[motorGroup + 2].StepsBack - motors[motorGroup + 2].StepsFront)
 8004aae:	4b72      	ldr	r3, [pc, #456]	@ (8004c78 <ManualCalibration+0x47c>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	23a4      	movs	r3, #164	@ 0xa4
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4b6b      	ldr	r3, [pc, #428]	@ (8004c78 <ManualCalibration+0x47c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	23a4      	movs	r3, #164	@ 0xa4
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	4413      	add	r3, r2
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae0:	1acb      	subs	r3, r1, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	bfb8      	it	lt
 8004ae6:	425b      	neglt	r3, r3
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[1].stepPerUnit;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3328      	adds	r3, #40	@ 0x28
 8004af4:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup + 2].currentPositionMM =
 8004af8:	4b5f      	ldr	r3, [pc, #380]	@ (8004c78 <ManualCalibration+0x47c>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	23a4      	movs	r3, #164	@ 0xa4
 8004b00:	fb02 f303 	mul.w	r3, r2, r3
 8004b04:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	4413      	add	r3, r2
                              / axes[1].stepPerUnit;
 8004b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup + 2].currentPositionMM =
 8004b10:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

                        motors[motorGroup].calib[0] = motors[motorGroup].currentPositionMM;
 8004b14:	4b58      	ldr	r3, [pc, #352]	@ (8004c78 <ManualCalibration+0x47c>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	23a4      	movs	r3, #164	@ 0xa4
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	441a      	add	r2, r3
 8004b24:	4b54      	ldr	r3, [pc, #336]	@ (8004c78 <ManualCalibration+0x47c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	23a4      	movs	r3, #164	@ 0xa4
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	6839      	ldr	r1, [r7, #0]
 8004b32:	440b      	add	r3, r1
 8004b34:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004b38:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        motors[motorGroup + 2].calib[0] = motors[motorGroup + 2].currentPositionMM;
 8004b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8004c78 <ManualCalibration+0x47c>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	23a4      	movs	r3, #164	@ 0xa4
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	441a      	add	r2, r3
 8004b50:	4b49      	ldr	r3, [pc, #292]	@ (8004c78 <ManualCalibration+0x47c>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	23a4      	movs	r3, #164	@ 0xa4
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	440b      	add	r3, r1
 8004b64:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004b68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        MotorsHoming(motors);
 8004b6c:	6838      	ldr	r0, [r7, #0]
 8004b6e:	f7ff fbbd 	bl	80042ec <MotorsHoming>
                    	SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
 8004b72:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8004c7c <ManualCalibration+0x480>
 8004b76:	4842      	ldr	r0, [pc, #264]	@ (8004c80 <ManualCalibration+0x484>)
 8004b78:	f7fe fe10 	bl	800379c <SERVO_WritePosition>
                    	SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
 8004b7c:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8004c84 <ManualCalibration+0x488>
 8004b80:	4841      	ldr	r0, [pc, #260]	@ (8004c88 <ManualCalibration+0x48c>)
 8004b82:	f7fe fe0b 	bl	800379c <SERVO_WritePosition>

                        cmd.targetPositionsAxis0[0] = motors[0].calib[0];   // Y
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b8c:	61fb      	str	r3, [r7, #28]
                        cmd.targetPositionsAxis0[1] = -(motors[1].calib[0]); // Y
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	33a4      	adds	r3, #164	@ 0xa4
 8004b92:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004b96:	eef1 7a67 	vneg.f32	s15, s15
 8004b9a:	edc7 7a08 	vstr	s15, [r7, #32]
                        cmd.targetPositionsAxis0[2] = -(motors[2].calib[0]);  // X
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004ba4:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004ba8:	eef1 7a67 	vneg.f32	s15, s15
 8004bac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                        cmd.targetPositionsAxis0[3] = motors[3].calib[0];   // X
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
                        cmd.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 8004bbc:	2309      	movs	r3, #9
 8004bbe:	723b      	strb	r3, [r7, #8]
                        LCD_I2C_ClearAllLines(&hlcd3);
 8004bc0:	4832      	ldr	r0, [pc, #200]	@ (8004c8c <ManualCalibration+0x490>)
 8004bc2:	f7fc fb4f 	bl	8001264 <LCD_I2C_ClearAllLines>
                        LCD_I2C_SetCursor(&hlcd3, 0, 2);
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4830      	ldr	r0, [pc, #192]	@ (8004c8c <ManualCalibration+0x490>)
 8004bcc:	f7fc fb1e 	bl	800120c <LCD_I2C_SetCursor>
                        LCD_I2C_printStr(&hlcd3, "Calibration Done!");
 8004bd0:	492f      	ldr	r1, [pc, #188]	@ (8004c90 <ManualCalibration+0x494>)
 8004bd2:	482e      	ldr	r0, [pc, #184]	@ (8004c8c <ManualCalibration+0x490>)
 8004bd4:	f7fc fae0 	bl	8001198 <LCD_I2C_printStr>
                       xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c94 <ManualCalibration+0x498>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	f107 0108 	add.w	r1, r7, #8
 8004be0:	2300      	movs	r3, #0
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	f00e f951 	bl	8012e8c <xQueueGenericSend>
                       axes[0].motors[0]->currentPositionMM = 0.0f;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[0].motors[1]->currentPositionMM = 100;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4a27      	ldr	r2, [pc, #156]	@ (8004c98 <ManualCalibration+0x49c>)
 8004bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[1].motors[0]->currentPositionMM = 0.0f;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3328      	adds	r3, #40	@ 0x28
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[1].motors[1]->currentPositionMM = 0.0f;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3328      	adds	r3, #40	@ 0x28
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       motors[0].calib[1] = motors[0].calib[0];
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                       motors[1].calib[1] = -(motors[1].calib[0]);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	33a4      	adds	r3, #164	@ 0xa4
 8004c2c:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	33a4      	adds	r3, #164	@ 0xa4
 8004c34:	eef1 7a67 	vneg.f32	s15, s15
 8004c38:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
                       motors[2].calib[1] = -(motors[2].calib[0]);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004c42:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004c4c:	eef1 7a67 	vneg.f32	s15, s15
 8004c50:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
                       motors[3].calib[1] = motors[3].calib[0];
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004c60:	f8d2 2098 	ldr.w	r2, [r2, #152]	@ 0x98
 8004c64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                        motorGroup = 0;  // Reset as needed
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <ManualCalibration+0x47c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
                        Pressed = 0;     // Reset the press counter
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <ManualCalibration+0x4a0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]

                        break;
 8004c74:	e018      	b.n	8004ca8 <ManualCalibration+0x4ac>
 8004c76:	bf00      	nop
 8004c78:	2000aff8 	.word	0x2000aff8
 8004c7c:	42b20000 	.word	0x42b20000
 8004c80:	2000002c 	.word	0x2000002c
 8004c84:	42700000 	.word	0x42700000
 8004c88:	20000040 	.word	0x20000040
 8004c8c:	20000018 	.word	0x20000018
 8004c90:	08018a94 	.word	0x08018a94
 8004c94:	20008a4c 	.word	0x20008a4c
 8004c98:	42c80000 	.word	0x42c80000
 8004c9c:	2000aff9 	.word	0x2000aff9

                    default:
                        // If somehow we get more than 2, just reset
                        Pressed = 0;
 8004ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8004e90 <ManualCalibration+0x694>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
                        break;
 8004ca6:	bf00      	nop


    /* --- Manual motor control via buttons --- */

    /* Example: BtnUp pressed -> move motor (motorGroup) in the forward direction */
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8004ca8:	2102      	movs	r1, #2
 8004caa:	487a      	ldr	r0, [pc, #488]	@ (8004e94 <ManualCalibration+0x698>)
 8004cac:	f003 f874 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d12d      	bne.n	8004d12 <ManualCalibration+0x516>
        cmd.motorIndex = motorGroup;
 8004cb6:	4b78      	ldr	r3, [pc, #480]	@ (8004e98 <ManualCalibration+0x69c>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_SET;  // Set forward direction
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004cc4:	4b75      	ldr	r3, [pc, #468]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	f107 0108 	add.w	r1, r7, #8
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd2:	f00e f8db 	bl	8012e8c <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup],1);

        cmd.command = MOTOR_CMD_START;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004cda:	4b70      	ldr	r3, [pc, #448]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f107 0108 	add.w	r1, r7, #8
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce8:	f00e f8d0 	bl	8012e8c <xQueueGenericSend>

        /* While the button remains pressed, yield to other tasks */
        while (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8004cec:	bf00      	nop
 8004cee:	2102      	movs	r1, #2
 8004cf0:	4868      	ldr	r0, [pc, #416]	@ (8004e94 <ManualCalibration+0x698>)
 8004cf2:	f003 f851 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f8      	beq.n	8004cee <ManualCalibration+0x4f2>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.command = MOTOR_CMD_STOP;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d00:	4b66      	ldr	r3, [pc, #408]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	f107 0108 	add.w	r1, r7, #8
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0e:	f00e f8bd 	bl	8012e8c <xQueueGenericSend>
    }


    /* Example: BtnDown pressed -> move motor (motorGroup) in the reverse direction */
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8004d12:	2101      	movs	r1, #1
 8004d14:	485f      	ldr	r0, [pc, #380]	@ (8004e94 <ManualCalibration+0x698>)
 8004d16:	f003 f83f 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d130      	bne.n	8004d82 <ManualCalibration+0x586>
        cmd.motorIndex = motorGroup;
 8004d20:	4b5d      	ldr	r3, [pc, #372]	@ (8004e98 <ManualCalibration+0x69c>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004d26:	2303      	movs	r3, #3
 8004d28:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_RESET;  // Set reverse direction
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	f107 0108 	add.w	r1, r7, #8
 8004d36:	2300      	movs	r3, #0
 8004d38:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3c:	f00e f8a6 	bl	8012e8c <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup],1);

        cmd.command = MOTOR_CMD_START;
 8004d40:	2302      	movs	r3, #2
 8004d42:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d44:	4b55      	ldr	r3, [pc, #340]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	f107 0108 	add.w	r1, r7, #8
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d52:	f00e f89b 	bl	8012e8c <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8004d56:	bf00      	nop
 8004d58:	2101      	movs	r1, #1
 8004d5a:	484e      	ldr	r0, [pc, #312]	@ (8004e94 <ManualCalibration+0x698>)
 8004d5c:	f003 f81c 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f8      	beq.n	8004d58 <ManualCalibration+0x55c>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.motorIndex = motorGroup;
 8004d66:	4b4c      	ldr	r3, [pc, #304]	@ (8004e98 <ManualCalibration+0x69c>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_STOP;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d70:	4b4a      	ldr	r3, [pc, #296]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	f107 0108 	add.w	r1, r7, #8
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7e:	f00e f885 	bl	8012e8c <xQueueGenericSend>
    }


    /* Example: BtnRight pressed -> move paired motor (motorGroup+2) forward */
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8004d82:	2102      	movs	r1, #2
 8004d84:	4846      	ldr	r0, [pc, #280]	@ (8004ea0 <ManualCalibration+0x6a4>)
 8004d86:	f003 f807 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d134      	bne.n	8004dfa <ManualCalibration+0x5fe>
        cmd.motorIndex = motorGroup + 2;
 8004d90:	4b41      	ldr	r3, [pc, #260]	@ (8004e98 <ManualCalibration+0x69c>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	3302      	adds	r3, #2
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_SET;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004da2:	4b3e      	ldr	r3, [pc, #248]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	f107 0108 	add.w	r1, r7, #8
 8004daa:	2300      	movs	r3, #0
 8004dac:	f04f 32ff 	mov.w	r2, #4294967295
 8004db0:	f00e f86c 	bl	8012e8c <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup + 2],1);
        cmd.command = MOTOR_CMD_START;
 8004db4:	2302      	movs	r3, #2
 8004db6:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004db8:	4b38      	ldr	r3, [pc, #224]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	f107 0108 	add.w	r1, r7, #8
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc6:	f00e f861 	bl	8012e8c <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8004dca:	bf00      	nop
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4834      	ldr	r0, [pc, #208]	@ (8004ea0 <ManualCalibration+0x6a4>)
 8004dd0:	f002 ffe2 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f8      	beq.n	8004dcc <ManualCalibration+0x5d0>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.motorIndex = motorGroup + 2;
 8004dda:	4b2f      	ldr	r3, [pc, #188]	@ (8004e98 <ManualCalibration+0x69c>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	3302      	adds	r3, #2
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_STOP;
 8004de4:	2301      	movs	r3, #1
 8004de6:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004de8:	4b2c      	ldr	r3, [pc, #176]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	f107 0108 	add.w	r1, r7, #8
 8004df0:	2300      	movs	r3, #0
 8004df2:	f04f 32ff 	mov.w	r2, #4294967295
 8004df6:	f00e f849 	bl	8012e8c <xQueueGenericSend>
    }



    /* Example: BtnLeft pressed -> move paired motor (motorGroup+2) in reverse */
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8004dfa:	2102      	movs	r1, #2
 8004dfc:	4829      	ldr	r0, [pc, #164]	@ (8004ea4 <ManualCalibration+0x6a8>)
 8004dfe:	f002 ffcb 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d134      	bne.n	8004e72 <ManualCalibration+0x676>
        cmd.motorIndex = motorGroup + 2;
 8004e08:	4b23      	ldr	r3, [pc, #140]	@ (8004e98 <ManualCalibration+0x69c>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004e12:	2303      	movs	r3, #3
 8004e14:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004e1a:	4b20      	ldr	r3, [pc, #128]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	f107 0108 	add.w	r1, r7, #8
 8004e22:	2300      	movs	r3, #0
 8004e24:	f04f 32ff 	mov.w	r2, #4294967295
 8004e28:	f00e f830 	bl	8012e8c <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup + 2],0);

        cmd.command = MOTOR_CMD_START;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004e30:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	f107 0108 	add.w	r1, r7, #8
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	f00e f825 	bl	8012e8c <xQueueGenericSend>



    while (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8004e42:	bf00      	nop
 8004e44:	2102      	movs	r1, #2
 8004e46:	4817      	ldr	r0, [pc, #92]	@ (8004ea4 <ManualCalibration+0x6a8>)
 8004e48:	f002 ffa6 	bl	8007d98 <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f8      	beq.n	8004e44 <ManualCalibration+0x648>
                //vTaskDelay(pdMS_TO_TICKS(10));
            }
            cmd.motorIndex = motorGroup + 2;
 8004e52:	4b11      	ldr	r3, [pc, #68]	@ (8004e98 <ManualCalibration+0x69c>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	3302      	adds	r3, #2
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	72bb      	strb	r3, [r7, #10]
            cmd.command    = MOTOR_CMD_STOP;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004e60:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <ManualCalibration+0x6a0>)
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	f107 0108 	add.w	r1, r7, #8
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6e:	f00e f80d 	bl	8012e8c <xQueueGenericSend>
    while(!calibrationState()){
 8004e72:	f7ff fc97 	bl	80047a4 <calibrationState>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f083 0301 	eor.w	r3, r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f47f ace1 	bne.w	8004846 <ManualCalibration+0x4a>
        }
    }
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	3738      	adds	r7, #56	@ 0x38
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	2000aff9 	.word	0x2000aff9
 8004e94:	40021400 	.word	0x40021400
 8004e98:	2000aff8 	.word	0x2000aff8
 8004e9c:	20008a4c 	.word	0x20008a4c
 8004ea0:	40020c00 	.word	0x40020c00
 8004ea4:	40021800 	.word	0x40021800

08004ea8 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0

}
 8004eac:	bf00      	nop
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	af00      	add	r7, sp, #0
return 0;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a07      	ldr	r2, [pc, #28]	@ (8004f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8004eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a06      	ldr	r2, [pc, #24]	@ (8004f0c <vApplicationGetIdleTaskMemory+0x30>)
 8004ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2280      	movs	r2, #128	@ 0x80
 8004ef8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	2000b000 	.word	0x2000b000
 8004f0c:	2000b060 	.word	0x2000b060

08004f10 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f20:	d102      	bne.n	8004f28 <HAL_GPIO_EXTI_Callback+0x18>
    {

    flagUserBtn = 1;
 8004f22:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <HAL_GPIO_EXTI_Callback+0x24>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	701a      	strb	r2, [r3, #0]
    }

}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	2000c220 	.word	0x2000c220

08004f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f3e:	f002 f842 	bl	8006fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f42:	f000 f8cb 	bl	80050dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f46:	f000 fe57 	bl	8005bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f4a:	f000 fe03 	bl	8005b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004f4e:	f000 fd73 	bl	8005a38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004f52:	f000 fdd1 	bl	8005af8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8004f56:	f000 fbf9 	bl	800574c <MX_TIM7_Init>
  MX_TIM4_Init();
 8004f5a:	f000 fb45 	bl	80055e8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8004f5e:	f000 fa53 	bl	8005408 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004f62:	f000 fd39 	bl	80059d8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004f66:	f009 f811 	bl	800df8c <MX_FATFS_Init>
  MX_SPI2_Init();
 8004f6a:	f000 f963 	bl	8005234 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004f6e:	f000 fac3 	bl	80054f8 <MX_TIM3_Init>
  MX_TIM14_Init();
 8004f72:	f000 fc83 	bl	800587c <MX_TIM14_Init>
  MX_TIM5_Init();
 8004f76:	f000 fb8d 	bl	8005694 <MX_TIM5_Init>
  MX_TIM9_Init();
 8004f7a:	f000 fc1d 	bl	80057b8 <MX_TIM9_Init>
  MX_I2C1_Init();
 8004f7e:	f000 f919 	bl	80051b4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8004f82:	f000 fd89 	bl	8005a98 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004f86:	f000 fcc7 	bl	8005918 <MX_UART4_Init>
  MX_UART5_Init();
 8004f8a:	f000 fcf5 	bl	8005978 <MX_UART5_Init>
  MX_TIM1_Init();
 8004f8e:	f000 f98f 	bl	80052b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_I2C_Init(&hlcd3);
 8004f92:	4840      	ldr	r0, [pc, #256]	@ (8005094 <main+0x15c>)
 8004f94:	f7fc f89c 	bl	80010d0 <LCD_I2C_Init>
 // LCD_I2C_Clear(&hlcd3);

  SERVO_Init(&hservo1);
 8004f98:	483f      	ldr	r0, [pc, #252]	@ (8005098 <main+0x160>)
 8004f9a:	f7fe fbdf 	bl	800375c <SERVO_Init>
  SERVO_Init(&hservo2);
 8004f9e:	483f      	ldr	r0, [pc, #252]	@ (800509c <main+0x164>)
 8004fa0:	f7fe fbdc 	bl	800375c <SERVO_Init>

  ENC_Init(&henc1);
 8004fa4:	483e      	ldr	r0, [pc, #248]	@ (80050a0 <main+0x168>)
 8004fa6:	f7fe fabb 	bl	8003520 <ENC_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  testingEvent = xEventGroupCreate();
 8004faa:	f00d fb88 	bl	80126be <xEventGroupCreate>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80050a4 <main+0x16c>)
 8004fb2:	6013      	str	r3, [r2, #0]
  configASSERT(testingEvent != NULL);
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80050a4 <main+0x16c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10d      	bne.n	8004fd8 <main+0xa0>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	b672      	cpsid	i
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	b662      	cpsie	i
 8004fd0:	607b      	str	r3, [r7, #4]
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <main+0x9c>
  calibEventGroup = xEventGroupCreate();
 8004fd8:	f00d fb71 	bl	80126be <xEventGroupCreate>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	4a32      	ldr	r2, [pc, #200]	@ (80050a8 <main+0x170>)
 8004fe0:	6013      	str	r3, [r2, #0]
  configASSERT(calibEventGroup != NULL);
 8004fe2:	4b31      	ldr	r3, [pc, #196]	@ (80050a8 <main+0x170>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <main+0xce>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	b672      	cpsid	i
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	b662      	cpsie	i
 8004ffe:	603b      	str	r3, [r7, #0]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <main+0xca>

  lcdMutex = xSemaphoreCreateMutex();
 8005006:	2001      	movs	r0, #1
 8005008:	f00d ff27 	bl	8012e5a <xQueueCreateMutex>
 800500c:	4603      	mov	r3, r0
 800500e:	4a27      	ldr	r2, [pc, #156]	@ (80050ac <main+0x174>)
 8005010:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xInitSemaphore = xSemaphoreCreateMutex();
 8005012:	2001      	movs	r0, #1
 8005014:	f00d ff21 	bl	8012e5a <xQueueCreateMutex>
 8005018:	4603      	mov	r3, r0
 800501a:	4a25      	ldr	r2, [pc, #148]	@ (80050b0 <main+0x178>)
 800501c:	6013      	str	r3, [r2, #0]
//  osThreadId_t motorTaskHandle = osThreadNew(motorControlTask, NULL, &motorTask_attributes);



  /* Create the main menu task */
  xTaskCreate(
 800501e:	2300      	movs	r3, #0
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	2304      	movs	r3, #4
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2300      	movs	r3, #0
 8005028:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800502c:	4921      	ldr	r1, [pc, #132]	@ (80050b4 <main+0x17c>)
 800502e:	4822      	ldr	r0, [pc, #136]	@ (80050b8 <main+0x180>)
 8005030:	f00e fd34 	bl	8013a9c <xTaskCreate>
      NULL,         /* Task parameters */
	  tskIDLE_PRIORITY + 4,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 8005034:	2300      	movs	r3, #0
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	2304      	movs	r3, #4
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2300      	movs	r3, #0
 800503e:	2280      	movs	r2, #128	@ 0x80
 8005040:	491e      	ldr	r1, [pc, #120]	@ (80050bc <main+0x184>)
 8005042:	481f      	ldr	r0, [pc, #124]	@ (80050c0 <main+0x188>)
 8005044:	f00e fd2a 	bl	8013a9c <xTaskCreate>
      NULL,                     /* Task parameters */
	  tskIDLE_PRIORITY + 4,     /* Task priority */
      NULL                       /* Task handle (optional) */
  );

  xTaskCreate(
 8005048:	2300      	movs	r3, #0
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	2301      	movs	r3, #1
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2300      	movs	r3, #0
 8005052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005056:	491b      	ldr	r1, [pc, #108]	@ (80050c4 <main+0x18c>)
 8005058:	481b      	ldr	r0, [pc, #108]	@ (80050c8 <main+0x190>)
 800505a:	f00e fd1f 	bl	8013a9c <xTaskCreate>
      NULL,         /* Task parameters */
	  tskIDLE_PRIORITY + 1,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 800505e:	2300      	movs	r3, #0
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	2303      	movs	r3, #3
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2300      	movs	r3, #0
 8005068:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800506c:	4917      	ldr	r1, [pc, #92]	@ (80050cc <main+0x194>)
 800506e:	4818      	ldr	r0, [pc, #96]	@ (80050d0 <main+0x198>)
 8005070:	f00e fd14 	bl	8013a9c <xTaskCreate>
	  tskIDLE_PRIORITY + 3,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );


  xTaskCreate(
 8005074:	2300      	movs	r3, #0
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	2302      	movs	r3, #2
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	2280      	movs	r2, #128	@ 0x80
 8005080:	4914      	ldr	r1, [pc, #80]	@ (80050d4 <main+0x19c>)
 8005082:	4815      	ldr	r0, [pc, #84]	@ (80050d8 <main+0x1a0>)
 8005084:	f00e fd0a 	bl	8013a9c <xTaskCreate>
  );



  /* Start the FreeRTOS scheduler */
  vTaskStartScheduler();
 8005088:	f00e fe88 	bl	8013d9c <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800508c:	f00d fa32 	bl	80124f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1){
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <main+0x158>
 8005094:	20000018 	.word	0x20000018
 8005098:	2000002c 	.word	0x2000002c
 800509c:	20000040 	.word	0x20000040
 80050a0:	20000000 	.word	0x20000000
 80050a4:	20008a58 	.word	0x20008a58
 80050a8:	20008a54 	.word	0x20008a54
 80050ac:	20008a5c 	.word	0x20008a5c
 80050b0:	20008a60 	.word	0x20008a60
 80050b4:	08018aa8 	.word	0x08018aa8
 80050b8:	0800393d 	.word	0x0800393d
 80050bc:	08018abc 	.word	0x08018abc
 80050c0:	08003aed 	.word	0x08003aed
 80050c4:	08018ad0 	.word	0x08018ad0
 80050c8:	08003bb5 	.word	0x08003bb5
 80050cc:	08018ae0 	.word	0x08018ae0
 80050d0:	08003da1 	.word	0x08003da1
 80050d4:	08018af0 	.word	0x08018af0
 80050d8:	08003875 	.word	0x08003875

080050dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b094      	sub	sp, #80	@ 0x50
 80050e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050e2:	f107 0320 	add.w	r3, r7, #32
 80050e6:	2230      	movs	r2, #48	@ 0x30
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f011 f95b 	bl	80163a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050f0:	f107 030c 	add.w	r3, r7, #12
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	60da      	str	r2, [r3, #12]
 80050fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005100:	4b2a      	ldr	r3, [pc, #168]	@ (80051ac <SystemClock_Config+0xd0>)
 8005102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005104:	4a29      	ldr	r2, [pc, #164]	@ (80051ac <SystemClock_Config+0xd0>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800510a:	6413      	str	r3, [r2, #64]	@ 0x40
 800510c:	4b27      	ldr	r3, [pc, #156]	@ (80051ac <SystemClock_Config+0xd0>)
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005118:	4b25      	ldr	r3, [pc, #148]	@ (80051b0 <SystemClock_Config+0xd4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a24      	ldr	r2, [pc, #144]	@ (80051b0 <SystemClock_Config+0xd4>)
 800511e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b22      	ldr	r3, [pc, #136]	@ (80051b0 <SystemClock_Config+0xd4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800512c:	607b      	str	r3, [r7, #4]
 800512e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005130:	2301      	movs	r3, #1
 8005132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005134:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800513a:	2302      	movs	r3, #2
 800513c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800513e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005144:	2304      	movs	r3, #4
 8005146:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005148:	23d8      	movs	r3, #216	@ 0xd8
 800514a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800514c:	2302      	movs	r3, #2
 800514e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8005150:	2309      	movs	r3, #9
 8005152:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005154:	f107 0320 	add.w	r3, r7, #32
 8005158:	4618      	mov	r0, r3
 800515a:	f003 fc57 	bl	8008a0c <HAL_RCC_OscConfig>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8005164:	f000 fe9c 	bl	8005ea0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005168:	f003 fc00 	bl	800896c <HAL_PWREx_EnableOverDrive>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005172:	f000 fe95 	bl	8005ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005176:	230f      	movs	r3, #15
 8005178:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800517a:	2302      	movs	r3, #2
 800517c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005182:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005186:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8005188:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800518c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800518e:	f107 030c 	add.w	r3, r7, #12
 8005192:	2107      	movs	r1, #7
 8005194:	4618      	mov	r0, r3
 8005196:	f003 fedd 	bl	8008f54 <HAL_RCC_ClockConfig>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80051a0:	f000 fe7e 	bl	8005ea0 <Error_Handler>
  }
}
 80051a4:	bf00      	nop
 80051a6:	3750      	adds	r7, #80	@ 0x50
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40023800 	.word	0x40023800
 80051b0:	40007000 	.word	0x40007000

080051b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80051b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051ba:	4a1c      	ldr	r2, [pc, #112]	@ (800522c <MX_I2C1_Init+0x78>)
 80051bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80051be:	4b1a      	ldr	r3, [pc, #104]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005230 <MX_I2C1_Init+0x7c>)
 80051c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80051c4:	4b18      	ldr	r3, [pc, #96]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051ca:	4b17      	ldr	r3, [pc, #92]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051d0:	4b15      	ldr	r3, [pc, #84]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80051d6:	4b14      	ldr	r3, [pc, #80]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051d8:	2200      	movs	r2, #0
 80051da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80051dc:	4b12      	ldr	r3, [pc, #72]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051de:	2200      	movs	r2, #0
 80051e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051e2:	4b11      	ldr	r3, [pc, #68]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80051ee:	480e      	ldr	r0, [pc, #56]	@ (8005228 <MX_I2C1_Init+0x74>)
 80051f0:	f002 fe1c 	bl	8007e2c <HAL_I2C_Init>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80051fa:	f000 fe51 	bl	8005ea0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80051fe:	2100      	movs	r1, #0
 8005200:	4809      	ldr	r0, [pc, #36]	@ (8005228 <MX_I2C1_Init+0x74>)
 8005202:	f003 f9e1 	bl	80085c8 <HAL_I2CEx_ConfigAnalogFilter>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800520c:	f000 fe48 	bl	8005ea0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005210:	2100      	movs	r1, #0
 8005212:	4805      	ldr	r0, [pc, #20]	@ (8005228 <MX_I2C1_Init+0x74>)
 8005214:	f003 fa23 	bl	800865e <HAL_I2CEx_ConfigDigitalFilter>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800521e:	f000 fe3f 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	2000b260 	.word	0x2000b260
 800522c:	40005400 	.word	0x40005400
 8005230:	20404768 	.word	0x20404768

08005234 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005238:	4b1b      	ldr	r3, [pc, #108]	@ (80052a8 <MX_SPI2_Init+0x74>)
 800523a:	4a1c      	ldr	r2, [pc, #112]	@ (80052ac <MX_SPI2_Init+0x78>)
 800523c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800523e:	4b1a      	ldr	r3, [pc, #104]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005240:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005244:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005246:	4b18      	ldr	r3, [pc, #96]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005248:	2200      	movs	r2, #0
 800524a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800524c:	4b16      	ldr	r3, [pc, #88]	@ (80052a8 <MX_SPI2_Init+0x74>)
 800524e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005252:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005254:	4b14      	ldr	r3, [pc, #80]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005256:	2200      	movs	r2, #0
 8005258:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800525a:	4b13      	ldr	r3, [pc, #76]	@ (80052a8 <MX_SPI2_Init+0x74>)
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005260:	4b11      	ldr	r3, [pc, #68]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005266:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005268:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <MX_SPI2_Init+0x74>)
 800526a:	2238      	movs	r2, #56	@ 0x38
 800526c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800526e:	4b0e      	ldr	r3, [pc, #56]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005270:	2200      	movs	r2, #0
 8005272:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005274:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005276:	2200      	movs	r2, #0
 8005278:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800527a:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <MX_SPI2_Init+0x74>)
 800527c:	2200      	movs	r2, #0
 800527e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005280:	4b09      	ldr	r3, [pc, #36]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005282:	2207      	movs	r2, #7
 8005284:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005286:	4b08      	ldr	r3, [pc, #32]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005288:	2200      	movs	r2, #0
 800528a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800528c:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <MX_SPI2_Init+0x74>)
 800528e:	2208      	movs	r2, #8
 8005290:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005292:	4805      	ldr	r0, [pc, #20]	@ (80052a8 <MX_SPI2_Init+0x74>)
 8005294:	f004 fca6 	bl	8009be4 <HAL_SPI_Init>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800529e:	f000 fdff 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	2000b2b4 	.word	0x2000b2b4
 80052ac:	40003800 	.word	0x40003800

080052b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b09a      	sub	sp, #104	@ 0x68
 80052b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	605a      	str	r2, [r3, #4]
 80052ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	611a      	str	r2, [r3, #16]
 80052e0:	615a      	str	r2, [r3, #20]
 80052e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	222c      	movs	r2, #44	@ 0x2c
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f011 f85b 	bl	80163a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80052f0:	4b43      	ldr	r3, [pc, #268]	@ (8005400 <MX_TIM1_Init+0x150>)
 80052f2:	4a44      	ldr	r2, [pc, #272]	@ (8005404 <MX_TIM1_Init+0x154>)
 80052f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 80052f6:	4b42      	ldr	r3, [pc, #264]	@ (8005400 <MX_TIM1_Init+0x150>)
 80052f8:	22d7      	movs	r2, #215	@ 0xd7
 80052fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052fc:	4b40      	ldr	r3, [pc, #256]	@ (8005400 <MX_TIM1_Init+0x150>)
 80052fe:	2200      	movs	r2, #0
 8005300:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005302:	4b3f      	ldr	r3, [pc, #252]	@ (8005400 <MX_TIM1_Init+0x150>)
 8005304:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005308:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800530a:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <MX_TIM1_Init+0x150>)
 800530c:	2200      	movs	r2, #0
 800530e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005310:	4b3b      	ldr	r3, [pc, #236]	@ (8005400 <MX_TIM1_Init+0x150>)
 8005312:	2200      	movs	r2, #0
 8005314:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005316:	4b3a      	ldr	r3, [pc, #232]	@ (8005400 <MX_TIM1_Init+0x150>)
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800531c:	4838      	ldr	r0, [pc, #224]	@ (8005400 <MX_TIM1_Init+0x150>)
 800531e:	f005 fa2b 	bl	800a778 <HAL_TIM_Base_Init>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005328:	f000 fdba 	bl	8005ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800532c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005330:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005332:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005336:	4619      	mov	r1, r3
 8005338:	4831      	ldr	r0, [pc, #196]	@ (8005400 <MX_TIM1_Init+0x150>)
 800533a:	f006 fa3d 	bl	800b7b8 <HAL_TIM_ConfigClockSource>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005344:	f000 fdac 	bl	8005ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005348:	482d      	ldr	r0, [pc, #180]	@ (8005400 <MX_TIM1_Init+0x150>)
 800534a:	f005 fb7d 	bl	800aa48 <HAL_TIM_PWM_Init>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005354:	f000 fda4 	bl	8005ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005358:	2300      	movs	r3, #0
 800535a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800535c:	2300      	movs	r3, #0
 800535e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005360:	2300      	movs	r3, #0
 8005362:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005364:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005368:	4619      	mov	r1, r3
 800536a:	4825      	ldr	r0, [pc, #148]	@ (8005400 <MX_TIM1_Init+0x150>)
 800536c:	f006 fed6 	bl	800c11c <HAL_TIMEx_MasterConfigSynchronization>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005376:	f000 fd93 	bl	8005ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800537a:	2360      	movs	r3, #96	@ 0x60
 800537c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 800537e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005384:	2300      	movs	r3, #0
 8005386:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005388:	2300      	movs	r3, #0
 800538a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800538c:	2300      	movs	r3, #0
 800538e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005390:	2300      	movs	r3, #0
 8005392:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005394:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005398:	220c      	movs	r2, #12
 800539a:	4619      	mov	r1, r3
 800539c:	4818      	ldr	r0, [pc, #96]	@ (8005400 <MX_TIM1_Init+0x150>)
 800539e:	f006 f8f7 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80053a8:	f000 fd7a 	bl	8005ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80053c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80053ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80053dc:	1d3b      	adds	r3, r7, #4
 80053de:	4619      	mov	r1, r3
 80053e0:	4807      	ldr	r0, [pc, #28]	@ (8005400 <MX_TIM1_Init+0x150>)
 80053e2:	f006 ff29 	bl	800c238 <HAL_TIMEx_ConfigBreakDeadTime>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80053ec:	f000 fd58 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80053f0:	4803      	ldr	r0, [pc, #12]	@ (8005400 <MX_TIM1_Init+0x150>)
 80053f2:	f000 ff4f 	bl	8006294 <HAL_TIM_MspPostInit>

}
 80053f6:	bf00      	nop
 80053f8:	3768      	adds	r7, #104	@ 0x68
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	2000b318 	.word	0x2000b318
 8005404:	40010000 	.word	0x40010000

08005408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	@ 0x38
 800540c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800540e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	605a      	str	r2, [r3, #4]
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800541c:	f107 031c 	add.w	r3, r7, #28
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005428:	463b      	mov	r3, r7
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	609a      	str	r2, [r3, #8]
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	611a      	str	r2, [r3, #16]
 8005436:	615a      	str	r2, [r3, #20]
 8005438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800543a:	4b2e      	ldr	r3, [pc, #184]	@ (80054f4 <MX_TIM2_Init+0xec>)
 800543c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 8005442:	4b2c      	ldr	r3, [pc, #176]	@ (80054f4 <MX_TIM2_Init+0xec>)
 8005444:	22d7      	movs	r2, #215	@ 0xd7
 8005446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005448:	4b2a      	ldr	r3, [pc, #168]	@ (80054f4 <MX_TIM2_Init+0xec>)
 800544a:	2200      	movs	r2, #0
 800544c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800544e:	4b29      	ldr	r3, [pc, #164]	@ (80054f4 <MX_TIM2_Init+0xec>)
 8005450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005454:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005456:	4b27      	ldr	r3, [pc, #156]	@ (80054f4 <MX_TIM2_Init+0xec>)
 8005458:	2200      	movs	r2, #0
 800545a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800545c:	4b25      	ldr	r3, [pc, #148]	@ (80054f4 <MX_TIM2_Init+0xec>)
 800545e:	2200      	movs	r2, #0
 8005460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005462:	4824      	ldr	r0, [pc, #144]	@ (80054f4 <MX_TIM2_Init+0xec>)
 8005464:	f005 f988 	bl	800a778 <HAL_TIM_Base_Init>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800546e:	f000 fd17 	bl	8005ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005476:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005478:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800547c:	4619      	mov	r1, r3
 800547e:	481d      	ldr	r0, [pc, #116]	@ (80054f4 <MX_TIM2_Init+0xec>)
 8005480:	f006 f99a 	bl	800b7b8 <HAL_TIM_ConfigClockSource>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800548a:	f000 fd09 	bl	8005ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800548e:	4819      	ldr	r0, [pc, #100]	@ (80054f4 <MX_TIM2_Init+0xec>)
 8005490:	f005 fada 	bl	800aa48 <HAL_TIM_PWM_Init>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800549a:	f000 fd01 	bl	8005ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054a6:	f107 031c 	add.w	r3, r7, #28
 80054aa:	4619      	mov	r1, r3
 80054ac:	4811      	ldr	r0, [pc, #68]	@ (80054f4 <MX_TIM2_Init+0xec>)
 80054ae:	f006 fe35 	bl	800c11c <HAL_TIMEx_MasterConfigSynchronization>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80054b8:	f000 fcf2 	bl	8005ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054bc:	2360      	movs	r3, #96	@ 0x60
 80054be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80054c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80054c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80054ce:	463b      	mov	r3, r7
 80054d0:	2208      	movs	r2, #8
 80054d2:	4619      	mov	r1, r3
 80054d4:	4807      	ldr	r0, [pc, #28]	@ (80054f4 <MX_TIM2_Init+0xec>)
 80054d6:	f006 f85b 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80054e0:	f000 fcde 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80054e4:	4803      	ldr	r0, [pc, #12]	@ (80054f4 <MX_TIM2_Init+0xec>)
 80054e6:	f000 fed5 	bl	8006294 <HAL_TIM_MspPostInit>

}
 80054ea:	bf00      	nop
 80054ec:	3738      	adds	r7, #56	@ 0x38
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	2000b364 	.word	0x2000b364

080054f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08e      	sub	sp, #56	@ 0x38
 80054fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	609a      	str	r2, [r3, #8]
 800550a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800550c:	f107 031c 	add.w	r3, r7, #28
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005518:	463b      	mov	r3, r7
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	609a      	str	r2, [r3, #8]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	611a      	str	r2, [r3, #16]
 8005526:	615a      	str	r2, [r3, #20]
 8005528:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800552a:	4b2d      	ldr	r3, [pc, #180]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 800552c:	4a2d      	ldr	r2, [pc, #180]	@ (80055e4 <MX_TIM3_Init+0xec>)
 800552e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8005530:	4b2b      	ldr	r3, [pc, #172]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 8005532:	22d7      	movs	r2, #215	@ 0xd7
 8005534:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005536:	4b2a      	ldr	r3, [pc, #168]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 8005538:	2200      	movs	r2, #0
 800553a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800553c:	4b28      	ldr	r3, [pc, #160]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 800553e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005542:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005544:	4b26      	ldr	r3, [pc, #152]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 8005546:	2200      	movs	r2, #0
 8005548:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800554a:	4b25      	ldr	r3, [pc, #148]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 800554c:	2200      	movs	r2, #0
 800554e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005550:	4823      	ldr	r0, [pc, #140]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 8005552:	f005 f911 	bl	800a778 <HAL_TIM_Base_Init>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800555c:	f000 fca0 	bl	8005ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005564:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005566:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800556a:	4619      	mov	r1, r3
 800556c:	481c      	ldr	r0, [pc, #112]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 800556e:	f006 f923 	bl	800b7b8 <HAL_TIM_ConfigClockSource>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005578:	f000 fc92 	bl	8005ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800557c:	4818      	ldr	r0, [pc, #96]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 800557e:	f005 fa63 	bl	800aa48 <HAL_TIM_PWM_Init>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005588:	f000 fc8a 	bl	8005ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005590:	2300      	movs	r3, #0
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005594:	f107 031c 	add.w	r3, r7, #28
 8005598:	4619      	mov	r1, r3
 800559a:	4811      	ldr	r0, [pc, #68]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 800559c:	f006 fdbe 	bl	800c11c <HAL_TIMEx_MasterConfigSynchronization>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80055a6:	f000 fc7b 	bl	8005ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055aa:	2360      	movs	r3, #96	@ 0x60
 80055ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80055ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80055b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80055bc:	463b      	mov	r3, r7
 80055be:	2208      	movs	r2, #8
 80055c0:	4619      	mov	r1, r3
 80055c2:	4807      	ldr	r0, [pc, #28]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 80055c4:	f005 ffe4 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80055ce:	f000 fc67 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80055d2:	4803      	ldr	r0, [pc, #12]	@ (80055e0 <MX_TIM3_Init+0xe8>)
 80055d4:	f000 fe5e 	bl	8006294 <HAL_TIM_MspPostInit>

}
 80055d8:	bf00      	nop
 80055da:	3738      	adds	r7, #56	@ 0x38
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	2000b3b0 	.word	0x2000b3b0
 80055e4:	40000400 	.word	0x40000400

080055e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08c      	sub	sp, #48	@ 0x30
 80055ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80055ee:	f107 030c 	add.w	r3, r7, #12
 80055f2:	2224      	movs	r2, #36	@ 0x24
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f010 fed5 	bl	80163a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055fc:	463b      	mov	r3, r7
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	605a      	str	r2, [r3, #4]
 8005604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005606:	4b21      	ldr	r3, [pc, #132]	@ (800568c <MX_TIM4_Init+0xa4>)
 8005608:	4a21      	ldr	r2, [pc, #132]	@ (8005690 <MX_TIM4_Init+0xa8>)
 800560a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800560c:	4b1f      	ldr	r3, [pc, #124]	@ (800568c <MX_TIM4_Init+0xa4>)
 800560e:	2200      	movs	r2, #0
 8005610:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005612:	4b1e      	ldr	r3, [pc, #120]	@ (800568c <MX_TIM4_Init+0xa4>)
 8005614:	2200      	movs	r2, #0
 8005616:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 800;
 8005618:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <MX_TIM4_Init+0xa4>)
 800561a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800561e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005620:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <MX_TIM4_Init+0xa4>)
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005626:	4b19      	ldr	r3, [pc, #100]	@ (800568c <MX_TIM4_Init+0xa4>)
 8005628:	2200      	movs	r2, #0
 800562a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800562c:	2303      	movs	r3, #3
 800562e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005634:	2301      	movs	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800563c:	230f      	movs	r3, #15
 800563e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005640:	2300      	movs	r3, #0
 8005642:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005644:	2301      	movs	r3, #1
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005648:	2300      	movs	r3, #0
 800564a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800564c:	230f      	movs	r3, #15
 800564e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	4619      	mov	r1, r3
 8005656:	480d      	ldr	r0, [pc, #52]	@ (800568c <MX_TIM4_Init+0xa4>)
 8005658:	f005 fd5e 	bl	800b118 <HAL_TIM_Encoder_Init>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005662:	f000 fc1d 	bl	8005ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005666:	2300      	movs	r3, #0
 8005668:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800566e:	463b      	mov	r3, r7
 8005670:	4619      	mov	r1, r3
 8005672:	4806      	ldr	r0, [pc, #24]	@ (800568c <MX_TIM4_Init+0xa4>)
 8005674:	f006 fd52 	bl	800c11c <HAL_TIMEx_MasterConfigSynchronization>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800567e:	f000 fc0f 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005682:	bf00      	nop
 8005684:	3730      	adds	r7, #48	@ 0x30
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	2000b3fc 	.word	0x2000b3fc
 8005690:	40000800 	.word	0x40000800

08005694 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	@ 0x28
 8005698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800569a:	f107 031c 	add.w	r3, r7, #28
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
 80056a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056a6:	463b      	mov	r3, r7
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	609a      	str	r2, [r3, #8]
 80056b0:	60da      	str	r2, [r3, #12]
 80056b2:	611a      	str	r2, [r3, #16]
 80056b4:	615a      	str	r2, [r3, #20]
 80056b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80056b8:	4b22      	ldr	r3, [pc, #136]	@ (8005744 <MX_TIM5_Init+0xb0>)
 80056ba:	4a23      	ldr	r2, [pc, #140]	@ (8005748 <MX_TIM5_Init+0xb4>)
 80056bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 80056be:	4b21      	ldr	r3, [pc, #132]	@ (8005744 <MX_TIM5_Init+0xb0>)
 80056c0:	22d7      	movs	r2, #215	@ 0xd7
 80056c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <MX_TIM5_Init+0xb0>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80056ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005744 <MX_TIM5_Init+0xb0>)
 80056cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80056d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005744 <MX_TIM5_Init+0xb0>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005744 <MX_TIM5_Init+0xb0>)
 80056da:	2200      	movs	r2, #0
 80056dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80056de:	4819      	ldr	r0, [pc, #100]	@ (8005744 <MX_TIM5_Init+0xb0>)
 80056e0:	f005 f9b2 	bl	800aa48 <HAL_TIM_PWM_Init>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80056ea:	f000 fbd9 	bl	8005ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80056f6:	f107 031c 	add.w	r3, r7, #28
 80056fa:	4619      	mov	r1, r3
 80056fc:	4811      	ldr	r0, [pc, #68]	@ (8005744 <MX_TIM5_Init+0xb0>)
 80056fe:	f006 fd0d 	bl	800c11c <HAL_TIMEx_MasterConfigSynchronization>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8005708:	f000 fbca 	bl	8005ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800570c:	2360      	movs	r3, #96	@ 0x60
 800570e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8005710:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005714:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800571e:	463b      	mov	r3, r7
 8005720:	2200      	movs	r2, #0
 8005722:	4619      	mov	r1, r3
 8005724:	4807      	ldr	r0, [pc, #28]	@ (8005744 <MX_TIM5_Init+0xb0>)
 8005726:	f005 ff33 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8005730:	f000 fbb6 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005734:	4803      	ldr	r0, [pc, #12]	@ (8005744 <MX_TIM5_Init+0xb0>)
 8005736:	f000 fdad 	bl	8006294 <HAL_TIM_MspPostInit>

}
 800573a:	bf00      	nop
 800573c:	3728      	adds	r7, #40	@ 0x28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	2000b448 	.word	0x2000b448
 8005748:	40000c00 	.word	0x40000c00

0800574c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800575c:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <MX_TIM7_Init+0x64>)
 800575e:	4a15      	ldr	r2, [pc, #84]	@ (80057b4 <MX_TIM7_Init+0x68>)
 8005760:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8005762:	4b13      	ldr	r3, [pc, #76]	@ (80057b0 <MX_TIM7_Init+0x64>)
 8005764:	22d7      	movs	r2, #215	@ 0xd7
 8005766:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005768:	4b11      	ldr	r3, [pc, #68]	@ (80057b0 <MX_TIM7_Init+0x64>)
 800576a:	2200      	movs	r2, #0
 800576c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800576e:	4b10      	ldr	r3, [pc, #64]	@ (80057b0 <MX_TIM7_Init+0x64>)
 8005770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005774:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005776:	4b0e      	ldr	r3, [pc, #56]	@ (80057b0 <MX_TIM7_Init+0x64>)
 8005778:	2200      	movs	r2, #0
 800577a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800577c:	480c      	ldr	r0, [pc, #48]	@ (80057b0 <MX_TIM7_Init+0x64>)
 800577e:	f004 fffb 	bl	800a778 <HAL_TIM_Base_Init>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005788:	f000 fb8a 	bl	8005ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800578c:	2300      	movs	r3, #0
 800578e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4805      	ldr	r0, [pc, #20]	@ (80057b0 <MX_TIM7_Init+0x64>)
 800579a:	f006 fcbf 	bl	800c11c <HAL_TIMEx_MasterConfigSynchronization>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80057a4:	f000 fb7c 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	2000b494 	.word	0x2000b494
 80057b4:	40001400 	.word	0x40001400

080057b8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	@ 0x30
 80057bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057be:	f107 0320 	add.w	r3, r7, #32
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	609a      	str	r2, [r3, #8]
 80057ca:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	605a      	str	r2, [r3, #4]
 80057d4:	609a      	str	r2, [r3, #8]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	611a      	str	r2, [r3, #16]
 80057da:	615a      	str	r2, [r3, #20]
 80057dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80057de:	4b25      	ldr	r3, [pc, #148]	@ (8005874 <MX_TIM9_Init+0xbc>)
 80057e0:	4a25      	ldr	r2, [pc, #148]	@ (8005878 <MX_TIM9_Init+0xc0>)
 80057e2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80057e4:	4b23      	ldr	r3, [pc, #140]	@ (8005874 <MX_TIM9_Init+0xbc>)
 80057e6:	226b      	movs	r2, #107	@ 0x6b
 80057e8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ea:	4b22      	ldr	r3, [pc, #136]	@ (8005874 <MX_TIM9_Init+0xbc>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 80057f0:	4b20      	ldr	r3, [pc, #128]	@ (8005874 <MX_TIM9_Init+0xbc>)
 80057f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80057f6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005874 <MX_TIM9_Init+0xbc>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005874 <MX_TIM9_Init+0xbc>)
 8005800:	2200      	movs	r2, #0
 8005802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005804:	481b      	ldr	r0, [pc, #108]	@ (8005874 <MX_TIM9_Init+0xbc>)
 8005806:	f004 ffb7 	bl	800a778 <HAL_TIM_Base_Init>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8005810:	f000 fb46 	bl	8005ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005818:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800581a:	f107 0320 	add.w	r3, r7, #32
 800581e:	4619      	mov	r1, r3
 8005820:	4814      	ldr	r0, [pc, #80]	@ (8005874 <MX_TIM9_Init+0xbc>)
 8005822:	f005 ffc9 	bl	800b7b8 <HAL_TIM_ConfigClockSource>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800582c:	f000 fb38 	bl	8005ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8005830:	4810      	ldr	r0, [pc, #64]	@ (8005874 <MX_TIM9_Init+0xbc>)
 8005832:	f005 f909 	bl	800aa48 <HAL_TIM_PWM_Init>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800583c:	f000 fb30 	bl	8005ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005840:	2360      	movs	r3, #96	@ 0x60
 8005842:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8005844:	230a      	movs	r3, #10
 8005846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	2200      	movs	r2, #0
 8005854:	4619      	mov	r1, r3
 8005856:	4807      	ldr	r0, [pc, #28]	@ (8005874 <MX_TIM9_Init+0xbc>)
 8005858:	f005 fe9a 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8005862:	f000 fb1d 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8005866:	4803      	ldr	r0, [pc, #12]	@ (8005874 <MX_TIM9_Init+0xbc>)
 8005868:	f000 fd14 	bl	8006294 <HAL_TIM_MspPostInit>

}
 800586c:	bf00      	nop
 800586e:	3730      	adds	r7, #48	@ 0x30
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	2000b4e0 	.word	0x2000b4e0
 8005878:	40014000 	.word	0x40014000

0800587c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005882:	1d3b      	adds	r3, r7, #4
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	611a      	str	r2, [r3, #16]
 8005890:	615a      	str	r2, [r3, #20]
 8005892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005894:	4b1e      	ldr	r3, [pc, #120]	@ (8005910 <MX_TIM14_Init+0x94>)
 8005896:	4a1f      	ldr	r2, [pc, #124]	@ (8005914 <MX_TIM14_Init+0x98>)
 8005898:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 800589a:	4b1d      	ldr	r3, [pc, #116]	@ (8005910 <MX_TIM14_Init+0x94>)
 800589c:	226b      	movs	r2, #107	@ 0x6b
 800589e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <MX_TIM14_Init+0x94>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 80058a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005910 <MX_TIM14_Init+0x94>)
 80058a8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80058ac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058ae:	4b18      	ldr	r3, [pc, #96]	@ (8005910 <MX_TIM14_Init+0x94>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058b4:	4b16      	ldr	r3, [pc, #88]	@ (8005910 <MX_TIM14_Init+0x94>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80058ba:	4815      	ldr	r0, [pc, #84]	@ (8005910 <MX_TIM14_Init+0x94>)
 80058bc:	f004 ff5c 	bl	800a778 <HAL_TIM_Base_Init>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80058c6:	f000 faeb 	bl	8005ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80058ca:	4811      	ldr	r0, [pc, #68]	@ (8005910 <MX_TIM14_Init+0x94>)
 80058cc:	f005 f8bc 	bl	800aa48 <HAL_TIM_PWM_Init>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80058d6:	f000 fae3 	bl	8005ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058da:	2360      	movs	r3, #96	@ 0x60
 80058dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80058de:	230a      	movs	r3, #10
 80058e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058ea:	1d3b      	adds	r3, r7, #4
 80058ec:	2200      	movs	r2, #0
 80058ee:	4619      	mov	r1, r3
 80058f0:	4807      	ldr	r0, [pc, #28]	@ (8005910 <MX_TIM14_Init+0x94>)
 80058f2:	f005 fe4d 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80058fc:	f000 fad0 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005900:	4803      	ldr	r0, [pc, #12]	@ (8005910 <MX_TIM14_Init+0x94>)
 8005902:	f000 fcc7 	bl	8006294 <HAL_TIM_MspPostInit>

}
 8005906:	bf00      	nop
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000b52c 	.word	0x2000b52c
 8005914:	40002000 	.word	0x40002000

08005918 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800591c:	4b14      	ldr	r3, [pc, #80]	@ (8005970 <MX_UART4_Init+0x58>)
 800591e:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <MX_UART4_Init+0x5c>)
 8005920:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005922:	4b13      	ldr	r3, [pc, #76]	@ (8005970 <MX_UART4_Init+0x58>)
 8005924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005928:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800592a:	4b11      	ldr	r3, [pc, #68]	@ (8005970 <MX_UART4_Init+0x58>)
 800592c:	2200      	movs	r2, #0
 800592e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005930:	4b0f      	ldr	r3, [pc, #60]	@ (8005970 <MX_UART4_Init+0x58>)
 8005932:	2200      	movs	r2, #0
 8005934:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005936:	4b0e      	ldr	r3, [pc, #56]	@ (8005970 <MX_UART4_Init+0x58>)
 8005938:	2200      	movs	r2, #0
 800593a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800593c:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <MX_UART4_Init+0x58>)
 800593e:	220c      	movs	r2, #12
 8005940:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005942:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <MX_UART4_Init+0x58>)
 8005944:	2200      	movs	r2, #0
 8005946:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005948:	4b09      	ldr	r3, [pc, #36]	@ (8005970 <MX_UART4_Init+0x58>)
 800594a:	2200      	movs	r2, #0
 800594c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800594e:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <MX_UART4_Init+0x58>)
 8005950:	2200      	movs	r2, #0
 8005952:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005954:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <MX_UART4_Init+0x58>)
 8005956:	2200      	movs	r2, #0
 8005958:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800595a:	4805      	ldr	r0, [pc, #20]	@ (8005970 <MX_UART4_Init+0x58>)
 800595c:	f006 fd08 	bl	800c370 <HAL_UART_Init>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8005966:	f000 fa9b 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	2000b578 	.word	0x2000b578
 8005974:	40004c00 	.word	0x40004c00

08005978 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800597c:	4b14      	ldr	r3, [pc, #80]	@ (80059d0 <MX_UART5_Init+0x58>)
 800597e:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <MX_UART5_Init+0x5c>)
 8005980:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005982:	4b13      	ldr	r3, [pc, #76]	@ (80059d0 <MX_UART5_Init+0x58>)
 8005984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005988:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800598a:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <MX_UART5_Init+0x58>)
 800598c:	2200      	movs	r2, #0
 800598e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005990:	4b0f      	ldr	r3, [pc, #60]	@ (80059d0 <MX_UART5_Init+0x58>)
 8005992:	2200      	movs	r2, #0
 8005994:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005996:	4b0e      	ldr	r3, [pc, #56]	@ (80059d0 <MX_UART5_Init+0x58>)
 8005998:	2200      	movs	r2, #0
 800599a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800599c:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <MX_UART5_Init+0x58>)
 800599e:	220c      	movs	r2, #12
 80059a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059a2:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <MX_UART5_Init+0x58>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80059a8:	4b09      	ldr	r3, [pc, #36]	@ (80059d0 <MX_UART5_Init+0x58>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059ae:	4b08      	ldr	r3, [pc, #32]	@ (80059d0 <MX_UART5_Init+0x58>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059b4:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <MX_UART5_Init+0x58>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80059ba:	4805      	ldr	r0, [pc, #20]	@ (80059d0 <MX_UART5_Init+0x58>)
 80059bc:	f006 fcd8 	bl	800c370 <HAL_UART_Init>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80059c6:	f000 fa6b 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	2000b600 	.word	0x2000b600
 80059d4:	40005000 	.word	0x40005000

080059d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80059dc:	4b14      	ldr	r3, [pc, #80]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 80059de:	4a15      	ldr	r2, [pc, #84]	@ (8005a34 <MX_USART2_UART_Init+0x5c>)
 80059e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80059e2:	4b13      	ldr	r3, [pc, #76]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 80059e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80059e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059ea:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 80059fe:	220c      	movs	r2, #12
 8005a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a02:	4b0b      	ldr	r3, [pc, #44]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a08:	4b09      	ldr	r3, [pc, #36]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a0e:	4b08      	ldr	r3, [pc, #32]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a14:	4b06      	ldr	r3, [pc, #24]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a1a:	4805      	ldr	r0, [pc, #20]	@ (8005a30 <MX_USART2_UART_Init+0x58>)
 8005a1c:	f006 fca8 	bl	800c370 <HAL_UART_Init>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005a26:	f000 fa3b 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a2a:	bf00      	nop
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	2000b688 	.word	0x2000b688
 8005a34:	40004400 	.word	0x40004400

08005a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a3c:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a3e:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <MX_USART3_UART_Init+0x5c>)
 8005a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8005a42:	4b13      	ldr	r3, [pc, #76]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a44:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8005a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a4a:	4b11      	ldr	r3, [pc, #68]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a50:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a56:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a5e:	220c      	movs	r2, #12
 8005a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a62:	4b0b      	ldr	r3, [pc, #44]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a68:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a6e:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a74:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a7a:	4805      	ldr	r0, [pc, #20]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a7c:	f006 fc78 	bl	800c370 <HAL_UART_Init>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005a86:	f000 fa0b 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	2000b710 	.word	0x2000b710
 8005a94:	40004800 	.word	0x40004800

08005a98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005a9c:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005a9e:	4a15      	ldr	r2, [pc, #84]	@ (8005af4 <MX_USART6_UART_Init+0x5c>)
 8005aa0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005aa2:	4b13      	ldr	r3, [pc, #76]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005aa8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005aaa:	4b11      	ldr	r3, [pc, #68]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005abc:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005abe:	220c      	movs	r2, #12
 8005ac0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ac8:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ace:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005ada:	4805      	ldr	r0, [pc, #20]	@ (8005af0 <MX_USART6_UART_Init+0x58>)
 8005adc:	f006 fc48 	bl	800c370 <HAL_UART_Init>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005ae6:	f000 f9db 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	2000b798 	.word	0x2000b798
 8005af4:	40011400 	.word	0x40011400

08005af8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005afc:	4b14      	ldr	r3, [pc, #80]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005afe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005b02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005b04:	4b12      	ldr	r3, [pc, #72]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b06:	2206      	movs	r2, #6
 8005b08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005b0a:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005b10:	4b0f      	ldr	r3, [pc, #60]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005b16:	4b0e      	ldr	r3, [pc, #56]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b18:	2202      	movs	r2, #2
 8005b1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005b22:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005b34:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005b3a:	4805      	ldr	r0, [pc, #20]	@ (8005b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b3c:	f002 fddb 	bl	80086f6 <HAL_PCD_Init>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005b46:	f000 f9ab 	bl	8005ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2000ba60 	.word	0x2000ba60

08005b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005b5a:	4b26      	ldr	r3, [pc, #152]	@ (8005bf4 <MX_DMA_Init+0xa0>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	4a25      	ldr	r2, [pc, #148]	@ (8005bf4 <MX_DMA_Init+0xa0>)
 8005b60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b66:	4b23      	ldr	r3, [pc, #140]	@ (8005bf4 <MX_DMA_Init+0xa0>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b72:	4b20      	ldr	r3, [pc, #128]	@ (8005bf4 <MX_DMA_Init+0xa0>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf4 <MX_DMA_Init+0xa0>)
 8005b78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf4 <MX_DMA_Init+0xa0>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 10, 0);
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	210a      	movs	r1, #10
 8005b8e:	200b      	movs	r0, #11
 8005b90:	f001 fb22 	bl	80071d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005b94:	200b      	movs	r0, #11
 8005b96:	f001 fb3b 	bl	8007210 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	210a      	movs	r1, #10
 8005b9e:	200c      	movs	r0, #12
 8005ba0:	f001 fb1a 	bl	80071d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005ba4:	200c      	movs	r0, #12
 8005ba6:	f001 fb33 	bl	8007210 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 10, 0);
 8005baa:	2200      	movs	r2, #0
 8005bac:	210a      	movs	r1, #10
 8005bae:	200d      	movs	r0, #13
 8005bb0:	f001 fb12 	bl	80071d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005bb4:	200d      	movs	r0, #13
 8005bb6:	f001 fb2b 	bl	8007210 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 10, 0);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	210a      	movs	r1, #10
 8005bbe:	200e      	movs	r0, #14
 8005bc0:	f001 fb0a 	bl	80071d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005bc4:	200e      	movs	r0, #14
 8005bc6:	f001 fb23 	bl	8007210 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 10, 0);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	210a      	movs	r1, #10
 8005bce:	2010      	movs	r0, #16
 8005bd0:	f001 fb02 	bl	80071d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005bd4:	2010      	movs	r0, #16
 8005bd6:	f001 fb1b 	bl	8007210 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2105      	movs	r1, #5
 8005bde:	2039      	movs	r0, #57	@ 0x39
 8005be0:	f001 fafa 	bl	80071d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005be4:	2039      	movs	r0, #57	@ 0x39
 8005be6:	f001 fb13 	bl	8007210 <HAL_NVIC_EnableIRQ>

}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800

08005bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	@ 0x38
 8005bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	605a      	str	r2, [r3, #4]
 8005c08:	609a      	str	r2, [r3, #8]
 8005c0a:	60da      	str	r2, [r3, #12]
 8005c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c0e:	4b94      	ldr	r3, [pc, #592]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c12:	4a93      	ldr	r2, [pc, #588]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c14:	f043 0310 	orr.w	r3, r3, #16
 8005c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c1a:	4b91      	ldr	r3, [pc, #580]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c26:	4b8e      	ldr	r3, [pc, #568]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	4a8d      	ldr	r2, [pc, #564]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c2c:	f043 0304 	orr.w	r3, r3, #4
 8005c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c32:	4b8b      	ldr	r3, [pc, #556]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c3e:	4b88      	ldr	r3, [pc, #544]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c42:	4a87      	ldr	r2, [pc, #540]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c44:	f043 0320 	orr.w	r3, r3, #32
 8005c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c4a:	4b85      	ldr	r3, [pc, #532]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005c56:	4b82      	ldr	r3, [pc, #520]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5a:	4a81      	ldr	r2, [pc, #516]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c62:	4b7f      	ldr	r3, [pc, #508]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c72:	4a7b      	ldr	r2, [pc, #492]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c7a:	4b79      	ldr	r3, [pc, #484]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c86:	4b76      	ldr	r3, [pc, #472]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	4a75      	ldr	r2, [pc, #468]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c8c:	f043 0302 	orr.w	r3, r3, #2
 8005c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c92:	4b73      	ldr	r3, [pc, #460]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c9e:	4b70      	ldr	r3, [pc, #448]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	4a6f      	ldr	r2, [pc, #444]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005caa:	4b6d      	ldr	r3, [pc, #436]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cba:	4a69      	ldr	r2, [pc, #420]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005cbc:	f043 0308 	orr.w	r3, r3, #8
 8005cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cc2:	4b67      	ldr	r3, [pc, #412]	@ (8005e60 <MX_GPIO_Init+0x268>)
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f249 5185 	movw	r1, #38277	@ 0x9585
 8005cd4:	4863      	ldr	r0, [pc, #396]	@ (8005e64 <MX_GPIO_Init+0x26c>)
 8005cd6:	f002 f877 	bl	8007dc8 <HAL_GPIO_WritePin>
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENN1_Pin|SPI_cs_Pin, GPIO_PIN_RESET);
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005ce0:	4861      	ldr	r0, [pc, #388]	@ (8005e68 <MX_GPIO_Init+0x270>)
 8005ce2:	f002 f871 	bl	8007dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2140      	movs	r1, #64	@ 0x40
 8005cea:	4860      	ldr	r0, [pc, #384]	@ (8005e6c <MX_GPIO_Init+0x274>)
 8005cec:	f002 f86c 	bl	8007dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR3_Pin ENN3_Pin ENN4_Pin ENN2_Pin
                           DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8005cf0:	f249 5385 	movw	r3, #38277	@ 0x9585
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d06:	4619      	mov	r1, r3
 8005d08:	4856      	ldr	r0, [pc, #344]	@ (8005e64 <MX_GPIO_Init+0x26c>)
 8005d0a:	f001 fe99 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005d0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d22:	4619      	mov	r1, r3
 8005d24:	4852      	ldr	r0, [pc, #328]	@ (8005e70 <MX_GPIO_Init+0x278>)
 8005d26:	f001 fe8b 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnDown_Pin BtnUp_Pin EndStop1_Pin EndStop4_Pin
                           BtnDownF15_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin|BtnUp_Pin|EndStop1_Pin|EndStop4_Pin
 8005d2a:	f24e 0303 	movw	r3, #57347	@ 0xe003
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BtnDownF15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d30:	2300      	movs	r3, #0
 8005d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d34:	2301      	movs	r3, #1
 8005d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	484d      	ldr	r0, [pc, #308]	@ (8005e74 <MX_GPIO_Init+0x27c>)
 8005d40:	f001 fe7e 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIAG4_Pin */
  GPIO_InitStruct.Pin = DIAG4_Pin;
 8005d44:	2310      	movs	r3, #16
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DIAG4_GPIO_Port, &GPIO_InitStruct);
 8005d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d54:	4619      	mov	r1, r3
 8005d56:	4847      	ldr	r0, [pc, #284]	@ (8005e74 <MX_GPIO_Init+0x27c>)
 8005d58:	f001 fe72 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIAG2_Pin DIAG3_Pin */
  GPIO_InitStruct.Pin = DIAG2_Pin|DIAG3_Pin;
 8005d5c:	2344      	movs	r3, #68	@ 0x44
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d60:	2300      	movs	r3, #0
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	483e      	ldr	r0, [pc, #248]	@ (8005e68 <MX_GPIO_Init+0x270>)
 8005d70:	f001 fe66 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnLef_Pin BtnLeft_Pin */
  GPIO_InitStruct.Pin = BtnLef_Pin|BtnLeft_Pin;
 8005d74:	2303      	movs	r3, #3
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d84:	4619      	mov	r1, r3
 8005d86:	4839      	ldr	r0, [pc, #228]	@ (8005e6c <MX_GPIO_Init+0x274>)
 8005d88:	f001 fe5a 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop2_Pin EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop2_Pin|EndStop3_Pin;
 8005d8c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d92:	2300      	movs	r3, #0
 8005d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d96:	2301      	movs	r3, #1
 8005d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4830      	ldr	r0, [pc, #192]	@ (8005e64 <MX_GPIO_Init+0x26c>)
 8005da2:	f001 fe4d 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8005da6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005db0:	2302      	movs	r3, #2
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8005db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005db8:	4619      	mov	r1, r3
 8005dba:	482a      	ldr	r0, [pc, #168]	@ (8005e64 <MX_GPIO_Init+0x26c>)
 8005dbc:	f001 fe40 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENN1_Pin SPI_cs_Pin */
  GPIO_InitStruct.Pin = ENN1_Pin|SPI_cs_Pin;
 8005dc0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4823      	ldr	r0, [pc, #140]	@ (8005e68 <MX_GPIO_Init+0x270>)
 8005dda:	f001 fe31 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBtn_Pin */
  GPIO_InitStruct.Pin = EncoderBtn_Pin;
 8005dde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005de4:	2300      	movs	r3, #0
 8005de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EncoderBtn_GPIO_Port, &GPIO_InitStruct);
 8005dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005df0:	4619      	mov	r1, r3
 8005df2:	4821      	ldr	r0, [pc, #132]	@ (8005e78 <MX_GPIO_Init+0x280>)
 8005df4:	f001 fe24 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005df8:	2340      	movs	r3, #64	@ 0x40
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e04:	2300      	movs	r3, #0
 8005e06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4817      	ldr	r0, [pc, #92]	@ (8005e6c <MX_GPIO_Init+0x274>)
 8005e10:	f001 fe16 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin DIAG1_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|DIAG1_Pin;
 8005e14:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e26:	4619      	mov	r1, r3
 8005e28:	4810      	ldr	r0, [pc, #64]	@ (8005e6c <MX_GPIO_Init+0x274>)
 8005e2a:	f001 fe09 	bl	8007a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnCtr_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin|BtnRight_Pin;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e32:	2300      	movs	r3, #0
 8005e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e36:	2301      	movs	r3, #1
 8005e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e3e:	4619      	mov	r1, r3
 8005e40:	480d      	ldr	r0, [pc, #52]	@ (8005e78 <MX_GPIO_Init+0x280>)
 8005e42:	f001 fdfd 	bl	8007a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005e46:	2200      	movs	r2, #0
 8005e48:	2105      	movs	r1, #5
 8005e4a:	2028      	movs	r0, #40	@ 0x28
 8005e4c:	f001 f9c4 	bl	80071d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005e50:	2028      	movs	r0, #40	@ 0x28
 8005e52:	f001 f9dd 	bl	8007210 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005e56:	bf00      	nop
 8005e58:	3738      	adds	r7, #56	@ 0x38
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40023800 	.word	0x40023800
 8005e64:	40021000 	.word	0x40021000
 8005e68:	40020400 	.word	0x40020400
 8005e6c:	40021800 	.word	0x40021800
 8005e70:	40020800 	.word	0x40020800
 8005e74:	40021400 	.word	0x40021400
 8005e78:	40020c00 	.word	0x40020c00

08005e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a04      	ldr	r2, [pc, #16]	@ (8005e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d101      	bne.n	8005e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005e8e:	f001 f8a7 	bl	8006fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40001000 	.word	0x40001000

08005ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ea4:	b672      	cpsid	i
}
 8005ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <Error_Handler+0x8>

08005eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005eb2:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <HAL_MspInit+0x4c>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	4a10      	ldr	r2, [pc, #64]	@ (8005ef8 <HAL_MspInit+0x4c>)
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef8 <HAL_MspInit+0x4c>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <HAL_MspInit+0x4c>)
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef8 <HAL_MspInit+0x4c>)
 8005ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ed6:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <HAL_MspInit+0x4c>)
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	210f      	movs	r1, #15
 8005ee6:	f06f 0001 	mvn.w	r0, #1
 8005eea:	f001 f975 	bl	80071d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800

08005efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b0aa      	sub	sp, #168	@ 0xa8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f04:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	605a      	str	r2, [r3, #4]
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	60da      	str	r2, [r3, #12]
 8005f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f14:	f107 0310 	add.w	r3, r7, #16
 8005f18:	2284      	movs	r2, #132	@ 0x84
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f010 fa42 	bl	80163a6 <memset>
  if(hi2c->Instance==I2C1)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a22      	ldr	r2, [pc, #136]	@ (8005fb0 <HAL_I2C_MspInit+0xb4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d13c      	bne.n	8005fa6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005f2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005f32:	2300      	movs	r3, #0
 8005f34:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f36:	f107 0310 	add.w	r3, r7, #16
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f003 fa62 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005f46:	f7ff ffab 	bl	8005ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb4 <HAL_I2C_MspInit+0xb8>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4e:	4a19      	ldr	r2, [pc, #100]	@ (8005fb4 <HAL_I2C_MspInit+0xb8>)
 8005f50:	f043 0302 	orr.w	r3, r3, #2
 8005f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f56:	4b17      	ldr	r3, [pc, #92]	@ (8005fb4 <HAL_I2C_MspInit+0xb8>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005f62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f6a:	2312      	movs	r3, #18
 8005f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f76:	2303      	movs	r3, #3
 8005f78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f82:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005f86:	4619      	mov	r1, r3
 8005f88:	480b      	ldr	r0, [pc, #44]	@ (8005fb8 <HAL_I2C_MspInit+0xbc>)
 8005f8a:	f001 fd59 	bl	8007a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f8e:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <HAL_I2C_MspInit+0xb8>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f92:	4a08      	ldr	r2, [pc, #32]	@ (8005fb4 <HAL_I2C_MspInit+0xb8>)
 8005f94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f9a:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <HAL_I2C_MspInit+0xb8>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fa2:	60bb      	str	r3, [r7, #8]
 8005fa4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005fa6:	bf00      	nop
 8005fa8:	37a8      	adds	r7, #168	@ 0xa8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40005400 	.word	0x40005400
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	40020400 	.word	0x40020400

08005fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	@ 0x28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc4:	f107 0314 	add.w	r3, r7, #20
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	609a      	str	r2, [r3, #8]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a25      	ldr	r2, [pc, #148]	@ (8006070 <HAL_SPI_MspInit+0xb4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d144      	bne.n	8006068 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005fde:	4b25      	ldr	r3, [pc, #148]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	4a24      	ldr	r2, [pc, #144]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 8005fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fea:	4b22      	ldr	r3, [pc, #136]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 8005ffc:	f043 0304 	orr.w	r3, r3, #4
 8006000:	6313      	str	r3, [r2, #48]	@ 0x30
 8006002:	4b1c      	ldr	r3, [pc, #112]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800600e:	4b19      	ldr	r3, [pc, #100]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	4a18      	ldr	r2, [pc, #96]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 8006014:	f043 0302 	orr.w	r3, r3, #2
 8006018:	6313      	str	r3, [r2, #48]	@ 0x30
 800601a:	4b16      	ldr	r3, [pc, #88]	@ (8006074 <HAL_SPI_MspInit+0xb8>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	60bb      	str	r3, [r7, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006026:	2304      	movs	r3, #4
 8006028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800602a:	2302      	movs	r3, #2
 800602c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006032:	2303      	movs	r3, #3
 8006034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006036:	2305      	movs	r3, #5
 8006038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800603a:	f107 0314 	add.w	r3, r7, #20
 800603e:	4619      	mov	r1, r3
 8006040:	480d      	ldr	r0, [pc, #52]	@ (8006078 <HAL_SPI_MspInit+0xbc>)
 8006042:	f001 fcfd 	bl	8007a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8006046:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800604a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604c:	2302      	movs	r3, #2
 800604e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006054:	2303      	movs	r3, #3
 8006056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006058:	2305      	movs	r3, #5
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800605c:	f107 0314 	add.w	r3, r7, #20
 8006060:	4619      	mov	r1, r3
 8006062:	4806      	ldr	r0, [pc, #24]	@ (800607c <HAL_SPI_MspInit+0xc0>)
 8006064:	f001 fcec 	bl	8007a40 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8006068:	bf00      	nop
 800606a:	3728      	adds	r7, #40	@ 0x28
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40003800 	.word	0x40003800
 8006074:	40023800 	.word	0x40023800
 8006078:	40020800 	.word	0x40020800
 800607c:	40020400 	.word	0x40020400

08006080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a42      	ldr	r2, [pc, #264]	@ (8006198 <HAL_TIM_Base_MspInit+0x118>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d114      	bne.n	80060bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006092:	4b42      	ldr	r3, [pc, #264]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006096:	4a41      	ldr	r2, [pc, #260]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	6453      	str	r3, [r2, #68]	@ 0x44
 800609e:	4b3f      	ldr	r3, [pc, #252]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80060aa:	2200      	movs	r2, #0
 80060ac:	2105      	movs	r1, #5
 80060ae:	201b      	movs	r0, #27
 80060b0:	f001 f892 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80060b4:	201b      	movs	r0, #27
 80060b6:	f001 f8ab 	bl	8007210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80060ba:	e068      	b.n	800618e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c4:	d114      	bne.n	80060f0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060c6:	4b35      	ldr	r3, [pc, #212]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ca:	4a34      	ldr	r2, [pc, #208]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80060d2:	4b32      	ldr	r3, [pc, #200]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80060de:	2200      	movs	r2, #0
 80060e0:	2105      	movs	r1, #5
 80060e2:	201c      	movs	r0, #28
 80060e4:	f001 f878 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80060e8:	201c      	movs	r0, #28
 80060ea:	f001 f891 	bl	8007210 <HAL_NVIC_EnableIRQ>
}
 80060ee:	e04e      	b.n	800618e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2a      	ldr	r2, [pc, #168]	@ (80061a0 <HAL_TIM_Base_MspInit+0x120>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d114      	bne.n	8006124 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060fa:	4b28      	ldr	r3, [pc, #160]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	4a27      	ldr	r2, [pc, #156]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006100:	f043 0302 	orr.w	r3, r3, #2
 8006104:	6413      	str	r3, [r2, #64]	@ 0x40
 8006106:	4b25      	ldr	r3, [pc, #148]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006112:	2200      	movs	r2, #0
 8006114:	2105      	movs	r1, #5
 8006116:	201d      	movs	r0, #29
 8006118:	f001 f85e 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800611c:	201d      	movs	r0, #29
 800611e:	f001 f877 	bl	8007210 <HAL_NVIC_EnableIRQ>
}
 8006122:	e034      	b.n	800618e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1e      	ldr	r2, [pc, #120]	@ (80061a4 <HAL_TIM_Base_MspInit+0x124>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d10c      	bne.n	8006148 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800612e:	4b1b      	ldr	r3, [pc, #108]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	4a1a      	ldr	r2, [pc, #104]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006134:	f043 0320 	orr.w	r3, r3, #32
 8006138:	6413      	str	r3, [r2, #64]	@ 0x40
 800613a:	4b18      	ldr	r3, [pc, #96]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	693b      	ldr	r3, [r7, #16]
}
 8006146:	e022      	b.n	800618e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a16      	ldr	r2, [pc, #88]	@ (80061a8 <HAL_TIM_Base_MspInit+0x128>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d10c      	bne.n	800616c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006152:	4b12      	ldr	r3, [pc, #72]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006156:	4a11      	ldr	r2, [pc, #68]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800615c:	6453      	str	r3, [r2, #68]	@ 0x44
 800615e:	4b0f      	ldr	r3, [pc, #60]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
}
 800616a:	e010      	b.n	800618e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0e      	ldr	r2, [pc, #56]	@ (80061ac <HAL_TIM_Base_MspInit+0x12c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10b      	bne.n	800618e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006176:	4b09      	ldr	r3, [pc, #36]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	4a08      	ldr	r2, [pc, #32]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 800617c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006180:	6413      	str	r3, [r2, #64]	@ 0x40
 8006182:	4b06      	ldr	r3, [pc, #24]	@ (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618a:	60bb      	str	r3, [r7, #8]
 800618c:	68bb      	ldr	r3, [r7, #8]
}
 800618e:	bf00      	nop
 8006190:	3720      	adds	r7, #32
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000
 800619c:	40023800 	.word	0x40023800
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40001400 	.word	0x40001400
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40002000 	.word	0x40002000

080061b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	@ 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1b      	ldr	r2, [pc, #108]	@ (800623c <HAL_TIM_Encoder_MspInit+0x8c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d130      	bne.n	8006234 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006240 <HAL_TIM_Encoder_MspInit+0x90>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006240 <HAL_TIM_Encoder_MspInit+0x90>)
 80061d8:	f043 0304 	orr.w	r3, r3, #4
 80061dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80061de:	4b18      	ldr	r3, [pc, #96]	@ (8006240 <HAL_TIM_Encoder_MspInit+0x90>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061ea:	4b15      	ldr	r3, [pc, #84]	@ (8006240 <HAL_TIM_Encoder_MspInit+0x90>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ee:	4a14      	ldr	r2, [pc, #80]	@ (8006240 <HAL_TIM_Encoder_MspInit+0x90>)
 80061f0:	f043 0308 	orr.w	r3, r3, #8
 80061f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80061f6:	4b12      	ldr	r3, [pc, #72]	@ (8006240 <HAL_TIM_Encoder_MspInit+0x90>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 8006202:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006208:	2302      	movs	r3, #2
 800620a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006210:	2300      	movs	r3, #0
 8006212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006214:	2302      	movs	r3, #2
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006218:	f107 0314 	add.w	r3, r7, #20
 800621c:	4619      	mov	r1, r3
 800621e:	4809      	ldr	r0, [pc, #36]	@ (8006244 <HAL_TIM_Encoder_MspInit+0x94>)
 8006220:	f001 fc0e 	bl	8007a40 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006224:	2200      	movs	r2, #0
 8006226:	2105      	movs	r1, #5
 8006228:	201e      	movs	r0, #30
 800622a:	f000 ffd5 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800622e:	201e      	movs	r0, #30
 8006230:	f000 ffee 	bl	8007210 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8006234:	bf00      	nop
 8006236:	3728      	adds	r7, #40	@ 0x28
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40000800 	.word	0x40000800
 8006240:	40023800 	.word	0x40023800
 8006244:	40020c00 	.word	0x40020c00

08006248 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a0d      	ldr	r2, [pc, #52]	@ (800628c <HAL_TIM_PWM_MspInit+0x44>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d113      	bne.n	8006282 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800625a:	4b0d      	ldr	r3, [pc, #52]	@ (8006290 <HAL_TIM_PWM_MspInit+0x48>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	4a0c      	ldr	r2, [pc, #48]	@ (8006290 <HAL_TIM_PWM_MspInit+0x48>)
 8006260:	f043 0308 	orr.w	r3, r3, #8
 8006264:	6413      	str	r3, [r2, #64]	@ 0x40
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <HAL_TIM_PWM_MspInit+0x48>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8006272:	2200      	movs	r2, #0
 8006274:	2105      	movs	r1, #5
 8006276:	2032      	movs	r0, #50	@ 0x32
 8006278:	f000 ffae 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800627c:	2032      	movs	r0, #50	@ 0x32
 800627e:	f000 ffc7 	bl	8007210 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40023800 	.word	0x40023800

08006294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08e      	sub	sp, #56	@ 0x38
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800629c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	605a      	str	r2, [r3, #4]
 80062a6:	609a      	str	r2, [r3, #8]
 80062a8:	60da      	str	r2, [r3, #12]
 80062aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a67      	ldr	r2, [pc, #412]	@ (8006450 <HAL_TIM_MspPostInit+0x1bc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d11d      	bne.n	80062f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062b6:	4b67      	ldr	r3, [pc, #412]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 80062b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ba:	4a66      	ldr	r2, [pc, #408]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 80062bc:	f043 0310 	orr.w	r3, r3, #16
 80062c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80062c2:	4b64      	ldr	r3, [pc, #400]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	623b      	str	r3, [r7, #32]
 80062cc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 80062ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d4:	2302      	movs	r3, #2
 80062d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062dc:	2300      	movs	r3, #0
 80062de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80062e0:	2301      	movs	r3, #1
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80062e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062e8:	4619      	mov	r1, r3
 80062ea:	485b      	ldr	r0, [pc, #364]	@ (8006458 <HAL_TIM_MspPostInit+0x1c4>)
 80062ec:	f001 fba8 	bl	8007a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80062f0:	e0a9      	b.n	8006446 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fa:	d11d      	bne.n	8006338 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062fc:	4b55      	ldr	r3, [pc, #340]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006300:	4a54      	ldr	r2, [pc, #336]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 8006302:	f043 0302 	orr.w	r3, r3, #2
 8006306:	6313      	str	r3, [r2, #48]	@ 0x30
 8006308:	4b52      	ldr	r3, [pc, #328]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 800630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8006314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800631a:	2302      	movs	r3, #2
 800631c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800631e:	2300      	movs	r3, #0
 8006320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006322:	2300      	movs	r3, #0
 8006324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006326:	2301      	movs	r3, #1
 8006328:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 800632a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800632e:	4619      	mov	r1, r3
 8006330:	484a      	ldr	r0, [pc, #296]	@ (800645c <HAL_TIM_MspPostInit+0x1c8>)
 8006332:	f001 fb85 	bl	8007a40 <HAL_GPIO_Init>
}
 8006336:	e086      	b.n	8006446 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a48      	ldr	r2, [pc, #288]	@ (8006460 <HAL_TIM_MspPostInit+0x1cc>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d11c      	bne.n	800637c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006342:	4b44      	ldr	r3, [pc, #272]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 8006344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006346:	4a43      	ldr	r2, [pc, #268]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 8006348:	f043 0302 	orr.w	r3, r3, #2
 800634c:	6313      	str	r3, [r2, #48]	@ 0x30
 800634e:	4b41      	ldr	r3, [pc, #260]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 8006350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP4_Pin;
 800635a:	2301      	movs	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800635e:	2302      	movs	r3, #2
 8006360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006362:	2300      	movs	r3, #0
 8006364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006366:	2300      	movs	r3, #0
 8006368:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800636a:	2302      	movs	r3, #2
 800636c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 800636e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006372:	4619      	mov	r1, r3
 8006374:	4839      	ldr	r0, [pc, #228]	@ (800645c <HAL_TIM_MspPostInit+0x1c8>)
 8006376:	f001 fb63 	bl	8007a40 <HAL_GPIO_Init>
}
 800637a:	e064      	b.n	8006446 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM5)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a38      	ldr	r2, [pc, #224]	@ (8006464 <HAL_TIM_MspPostInit+0x1d0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d11c      	bne.n	80063c0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006386:	4b33      	ldr	r3, [pc, #204]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638a:	4a32      	ldr	r2, [pc, #200]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6313      	str	r3, [r2, #48]	@ 0x30
 8006392:	4b30      	ldr	r3, [pc, #192]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP3_Pin;
 800639e:	2301      	movs	r3, #1
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a2:	2302      	movs	r3, #2
 80063a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063aa:	2300      	movs	r3, #0
 80063ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80063ae:	2302      	movs	r3, #2
 80063b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 80063b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063b6:	4619      	mov	r1, r3
 80063b8:	482b      	ldr	r0, [pc, #172]	@ (8006468 <HAL_TIM_MspPostInit+0x1d4>)
 80063ba:	f001 fb41 	bl	8007a40 <HAL_GPIO_Init>
}
 80063be:	e042      	b.n	8006446 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a29      	ldr	r2, [pc, #164]	@ (800646c <HAL_TIM_MspPostInit+0x1d8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d11c      	bne.n	8006404 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80063ca:	4b22      	ldr	r3, [pc, #136]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	4a21      	ldr	r2, [pc, #132]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 80063d0:	f043 0310 	orr.w	r3, r3, #16
 80063d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80063d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 80063d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063da:	f003 0310 	and.w	r3, r3, #16
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2PWM_Pin;
 80063e2:	2320      	movs	r3, #32
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e6:	2302      	movs	r3, #2
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ee:	2300      	movs	r3, #0
 80063f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80063f2:	2303      	movs	r3, #3
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2PWM_GPIO_Port, &GPIO_InitStruct);
 80063f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063fa:	4619      	mov	r1, r3
 80063fc:	4816      	ldr	r0, [pc, #88]	@ (8006458 <HAL_TIM_MspPostInit+0x1c4>)
 80063fe:	f001 fb1f 	bl	8007a40 <HAL_GPIO_Init>
}
 8006402:	e020      	b.n	8006446 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM14)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a19      	ldr	r2, [pc, #100]	@ (8006470 <HAL_TIM_MspPostInit+0x1dc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d11b      	bne.n	8006446 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800640e:	4b11      	ldr	r3, [pc, #68]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006412:	4a10      	ldr	r2, [pc, #64]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	6313      	str	r3, [r2, #48]	@ 0x30
 800641a:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <HAL_TIM_MspPostInit+0x1c0>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 8006426:	2380      	movs	r3, #128	@ 0x80
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642a:	2302      	movs	r3, #2
 800642c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642e:	2300      	movs	r3, #0
 8006430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006432:	2300      	movs	r3, #0
 8006434:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006436:	2309      	movs	r3, #9
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 800643a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800643e:	4619      	mov	r1, r3
 8006440:	4809      	ldr	r0, [pc, #36]	@ (8006468 <HAL_TIM_MspPostInit+0x1d4>)
 8006442:	f001 fafd 	bl	8007a40 <HAL_GPIO_Init>
}
 8006446:	bf00      	nop
 8006448:	3738      	adds	r7, #56	@ 0x38
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000
 8006454:	40023800 	.word	0x40023800
 8006458:	40021000 	.word	0x40021000
 800645c:	40020400 	.word	0x40020400
 8006460:	40000400 	.word	0x40000400
 8006464:	40000c00 	.word	0x40000c00
 8006468:	40020000 	.word	0x40020000
 800646c:	40014000 	.word	0x40014000
 8006470:	40002000 	.word	0x40002000

08006474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b0b4      	sub	sp, #208	@ 0xd0
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800647c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	609a      	str	r2, [r3, #8]
 8006488:	60da      	str	r2, [r3, #12]
 800648a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800648c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006490:	2284      	movs	r2, #132	@ 0x84
 8006492:	2100      	movs	r1, #0
 8006494:	4618      	mov	r0, r3
 8006496:	f00f ff86 	bl	80163a6 <memset>
  if(huart->Instance==UART4)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a8a      	ldr	r2, [pc, #552]	@ (80066c8 <HAL_UART_MspInit+0x254>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d174      	bne.n	800658e <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80064a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80064b4:	4618      	mov	r0, r3
 80064b6:	f002 ffa5 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80064c0:	f7ff fcee 	bl	8005ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80064c4:	4b81      	ldr	r3, [pc, #516]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80064c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c8:	4a80      	ldr	r2, [pc, #512]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80064ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80064d0:	4b7e      	ldr	r3, [pc, #504]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80064d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064dc:	4b7b      	ldr	r3, [pc, #492]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80064de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e0:	4a7a      	ldr	r2, [pc, #488]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80064e2:	f043 0304 	orr.w	r3, r3, #4
 80064e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80064e8:	4b78      	ldr	r3, [pc, #480]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80064f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80064f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fc:	2302      	movs	r3, #2
 80064fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006508:	2303      	movs	r3, #3
 800650a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800650e:	2308      	movs	r3, #8
 8006510:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006514:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006518:	4619      	mov	r1, r3
 800651a:	486d      	ldr	r0, [pc, #436]	@ (80066d0 <HAL_UART_MspInit+0x25c>)
 800651c:	f001 fa90 	bl	8007a40 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8006520:	4b6c      	ldr	r3, [pc, #432]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006522:	4a6d      	ldr	r2, [pc, #436]	@ (80066d8 <HAL_UART_MspInit+0x264>)
 8006524:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006526:	4b6b      	ldr	r3, [pc, #428]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006528:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800652c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800652e:	4b69      	ldr	r3, [pc, #420]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006530:	2200      	movs	r2, #0
 8006532:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006534:	4b67      	ldr	r3, [pc, #412]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006536:	2200      	movs	r2, #0
 8006538:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800653a:	4b66      	ldr	r3, [pc, #408]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 800653c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006540:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006542:	4b64      	ldr	r3, [pc, #400]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006544:	2200      	movs	r2, #0
 8006546:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006548:	4b62      	ldr	r3, [pc, #392]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 800654a:	2200      	movs	r2, #0
 800654c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800654e:	4b61      	ldr	r3, [pc, #388]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006550:	2200      	movs	r2, #0
 8006552:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006554:	4b5f      	ldr	r3, [pc, #380]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006556:	2200      	movs	r2, #0
 8006558:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800655a:	4b5e      	ldr	r3, [pc, #376]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 800655c:	2200      	movs	r2, #0
 800655e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006560:	485c      	ldr	r0, [pc, #368]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006562:	f000 fe63 	bl	800722c <HAL_DMA_Init>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 800656c:	f7ff fc98 	bl	8005ea0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a58      	ldr	r2, [pc, #352]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006574:	675a      	str	r2, [r3, #116]	@ 0x74
 8006576:	4a57      	ldr	r2, [pc, #348]	@ (80066d4 <HAL_UART_MspInit+0x260>)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800657c:	2200      	movs	r2, #0
 800657e:	2105      	movs	r1, #5
 8006580:	2034      	movs	r0, #52	@ 0x34
 8006582:	f000 fe29 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006586:	2034      	movs	r0, #52	@ 0x34
 8006588:	f000 fe42 	bl	8007210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800658c:	e254      	b.n	8006a38 <HAL_UART_MspInit+0x5c4>
  else if(huart->Instance==UART5)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a52      	ldr	r2, [pc, #328]	@ (80066dc <HAL_UART_MspInit+0x268>)
 8006594:	4293      	cmp	r3, r2
 8006596:	f040 80a9 	bne.w	80066ec <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800659a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800659e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80065aa:	4618      	mov	r0, r3
 80065ac:	f002 ff2a 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_UART_MspInit+0x146>
      Error_Handler();
 80065b6:	f7ff fc73 	bl	8005ea0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80065ba:	4b44      	ldr	r3, [pc, #272]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	4a43      	ldr	r2, [pc, #268]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80065c6:	4b41      	ldr	r3, [pc, #260]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065d2:	4b3e      	ldr	r3, [pc, #248]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d6:	4a3d      	ldr	r2, [pc, #244]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065d8:	f043 0304 	orr.w	r3, r3, #4
 80065dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80065de:	4b3b      	ldr	r3, [pc, #236]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065ea:	4b38      	ldr	r3, [pc, #224]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	4a37      	ldr	r2, [pc, #220]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065f0:	f043 0308 	orr.w	r3, r3, #8
 80065f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80065f6:	4b35      	ldr	r3, [pc, #212]	@ (80066cc <HAL_UART_MspInit+0x258>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006606:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660a:	2302      	movs	r3, #2
 800660c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006616:	2303      	movs	r3, #3
 8006618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800661c:	2308      	movs	r3, #8
 800661e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006622:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006626:	4619      	mov	r1, r3
 8006628:	4829      	ldr	r0, [pc, #164]	@ (80066d0 <HAL_UART_MspInit+0x25c>)
 800662a:	f001 fa09 	bl	8007a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800662e:	2304      	movs	r3, #4
 8006630:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006634:	2302      	movs	r3, #2
 8006636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663a:	2300      	movs	r3, #0
 800663c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006640:	2303      	movs	r3, #3
 8006642:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006646:	2308      	movs	r3, #8
 8006648:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800664c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006650:	4619      	mov	r1, r3
 8006652:	4823      	ldr	r0, [pc, #140]	@ (80066e0 <HAL_UART_MspInit+0x26c>)
 8006654:	f001 f9f4 	bl	8007a40 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006658:	4b22      	ldr	r3, [pc, #136]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 800665a:	4a23      	ldr	r2, [pc, #140]	@ (80066e8 <HAL_UART_MspInit+0x274>)
 800665c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800665e:	4b21      	ldr	r3, [pc, #132]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 8006660:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006664:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006666:	4b1f      	ldr	r3, [pc, #124]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 8006668:	2200      	movs	r2, #0
 800666a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800666c:	4b1d      	ldr	r3, [pc, #116]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 800666e:	2200      	movs	r2, #0
 8006670:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006672:	4b1c      	ldr	r3, [pc, #112]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 8006674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006678:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800667a:	4b1a      	ldr	r3, [pc, #104]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 800667c:	2200      	movs	r2, #0
 800667e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006680:	4b18      	ldr	r3, [pc, #96]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 8006682:	2200      	movs	r2, #0
 8006684:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8006686:	4b17      	ldr	r3, [pc, #92]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 8006688:	2200      	movs	r2, #0
 800668a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800668c:	4b15      	ldr	r3, [pc, #84]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 800668e:	2200      	movs	r2, #0
 8006690:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006692:	4b14      	ldr	r3, [pc, #80]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 8006694:	2200      	movs	r2, #0
 8006696:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006698:	4812      	ldr	r0, [pc, #72]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 800669a:	f000 fdc7 	bl	800722c <HAL_DMA_Init>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_UART_MspInit+0x234>
      Error_Handler();
 80066a4:	f7ff fbfc 	bl	8005ea0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a0e      	ldr	r2, [pc, #56]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 80066ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80066ae:	4a0d      	ldr	r2, [pc, #52]	@ (80066e4 <HAL_UART_MspInit+0x270>)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80066b4:	2200      	movs	r2, #0
 80066b6:	2105      	movs	r1, #5
 80066b8:	2035      	movs	r0, #53	@ 0x35
 80066ba:	f000 fd8d 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80066be:	2035      	movs	r0, #53	@ 0x35
 80066c0:	f000 fda6 	bl	8007210 <HAL_NVIC_EnableIRQ>
}
 80066c4:	e1b8      	b.n	8006a38 <HAL_UART_MspInit+0x5c4>
 80066c6:	bf00      	nop
 80066c8:	40004c00 	.word	0x40004c00
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40020800 	.word	0x40020800
 80066d4:	2000b820 	.word	0x2000b820
 80066d8:	40026040 	.word	0x40026040
 80066dc:	40005000 	.word	0x40005000
 80066e0:	40020c00 	.word	0x40020c00
 80066e4:	2000b880 	.word	0x2000b880
 80066e8:	40026010 	.word	0x40026010
  else if(huart->Instance==USART2)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a8b      	ldr	r2, [pc, #556]	@ (8006920 <HAL_UART_MspInit+0x4ac>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d172      	bne.n	80067dc <HAL_UART_MspInit+0x368>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80066f6:	2380      	movs	r3, #128	@ 0x80
 80066f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80066fa:	2300      	movs	r3, #0
 80066fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006700:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006704:	4618      	mov	r0, r3
 8006706:	f002 fe7d 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8006710:	f7ff fbc6 	bl	8005ea0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006714:	4b83      	ldr	r3, [pc, #524]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 8006716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006718:	4a82      	ldr	r2, [pc, #520]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800671e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006720:	4b80      	ldr	r3, [pc, #512]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 8006722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800672c:	4b7d      	ldr	r3, [pc, #500]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 800672e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006730:	4a7c      	ldr	r2, [pc, #496]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 8006732:	f043 0308 	orr.w	r3, r3, #8
 8006736:	6313      	str	r3, [r2, #48]	@ 0x30
 8006738:	4b7a      	ldr	r3, [pc, #488]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 800673a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006744:	2360      	movs	r3, #96	@ 0x60
 8006746:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674a:	2302      	movs	r3, #2
 800674c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006750:	2300      	movs	r3, #0
 8006752:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006756:	2303      	movs	r3, #3
 8006758:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800675c:	2307      	movs	r3, #7
 800675e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006762:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006766:	4619      	mov	r1, r3
 8006768:	486f      	ldr	r0, [pc, #444]	@ (8006928 <HAL_UART_MspInit+0x4b4>)
 800676a:	f001 f969 	bl	8007a40 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800676e:	4b6f      	ldr	r3, [pc, #444]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 8006770:	4a6f      	ldr	r2, [pc, #444]	@ (8006930 <HAL_UART_MspInit+0x4bc>)
 8006772:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006774:	4b6d      	ldr	r3, [pc, #436]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 8006776:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800677a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800677c:	4b6b      	ldr	r3, [pc, #428]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 800677e:	2200      	movs	r2, #0
 8006780:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006782:	4b6a      	ldr	r3, [pc, #424]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 8006784:	2200      	movs	r2, #0
 8006786:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006788:	4b68      	ldr	r3, [pc, #416]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 800678a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800678e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006790:	4b66      	ldr	r3, [pc, #408]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 8006792:	2200      	movs	r2, #0
 8006794:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006796:	4b65      	ldr	r3, [pc, #404]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 8006798:	2200      	movs	r2, #0
 800679a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800679c:	4b63      	ldr	r3, [pc, #396]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 800679e:	2200      	movs	r2, #0
 80067a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067a2:	4b62      	ldr	r3, [pc, #392]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067a8:	4b60      	ldr	r3, [pc, #384]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80067ae:	485f      	ldr	r0, [pc, #380]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 80067b0:	f000 fd3c 	bl	800722c <HAL_DMA_Init>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_UART_MspInit+0x34a>
      Error_Handler();
 80067ba:	f7ff fb71 	bl	8005ea0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a5a      	ldr	r2, [pc, #360]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 80067c2:	675a      	str	r2, [r3, #116]	@ 0x74
 80067c4:	4a59      	ldr	r2, [pc, #356]	@ (800692c <HAL_UART_MspInit+0x4b8>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80067ca:	2200      	movs	r2, #0
 80067cc:	2105      	movs	r1, #5
 80067ce:	2026      	movs	r0, #38	@ 0x26
 80067d0:	f000 fd02 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80067d4:	2026      	movs	r0, #38	@ 0x26
 80067d6:	f000 fd1b 	bl	8007210 <HAL_NVIC_EnableIRQ>
}
 80067da:	e12d      	b.n	8006a38 <HAL_UART_MspInit+0x5c4>
  else if(huart->Instance==USART3)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a54      	ldr	r2, [pc, #336]	@ (8006934 <HAL_UART_MspInit+0x4c0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	f040 80b0 	bne.w	8006948 <HAL_UART_MspInit+0x4d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80067e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80067f8:	4618      	mov	r0, r3
 80067fa:	f002 fe03 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_UART_MspInit+0x394>
      Error_Handler();
 8006804:	f7ff fb4c 	bl	8005ea0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006808:	4b46      	ldr	r3, [pc, #280]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 800680a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680c:	4a45      	ldr	r2, [pc, #276]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 800680e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006812:	6413      	str	r3, [r2, #64]	@ 0x40
 8006814:	4b43      	ldr	r3, [pc, #268]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006820:	4b40      	ldr	r3, [pc, #256]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006824:	4a3f      	ldr	r2, [pc, #252]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 8006826:	f043 0308 	orr.w	r3, r3, #8
 800682a:	6313      	str	r3, [r2, #48]	@ 0x30
 800682c:	4b3d      	ldr	r3, [pc, #244]	@ (8006924 <HAL_UART_MspInit+0x4b0>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006838:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800683c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006840:	2302      	movs	r3, #2
 8006842:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006846:	2301      	movs	r3, #1
 8006848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800684c:	2303      	movs	r3, #3
 800684e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006852:	2307      	movs	r3, #7
 8006854:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006858:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800685c:	4619      	mov	r1, r3
 800685e:	4832      	ldr	r0, [pc, #200]	@ (8006928 <HAL_UART_MspInit+0x4b4>)
 8006860:	f001 f8ee 	bl	8007a40 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006864:	4b34      	ldr	r3, [pc, #208]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 8006866:	4a35      	ldr	r2, [pc, #212]	@ (800693c <HAL_UART_MspInit+0x4c8>)
 8006868:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800686a:	4b33      	ldr	r3, [pc, #204]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 800686c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006870:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006872:	4b31      	ldr	r3, [pc, #196]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 8006874:	2200      	movs	r2, #0
 8006876:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006878:	4b2f      	ldr	r3, [pc, #188]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 800687a:	2200      	movs	r2, #0
 800687c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800687e:	4b2e      	ldr	r3, [pc, #184]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 8006880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006884:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006886:	4b2c      	ldr	r3, [pc, #176]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 8006888:	2200      	movs	r2, #0
 800688a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800688c:	4b2a      	ldr	r3, [pc, #168]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 800688e:	2200      	movs	r2, #0
 8006890:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006892:	4b29      	ldr	r3, [pc, #164]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 8006894:	2200      	movs	r2, #0
 8006896:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006898:	4b27      	ldr	r3, [pc, #156]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 800689a:	2200      	movs	r2, #0
 800689c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800689e:	4b26      	ldr	r3, [pc, #152]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80068a4:	4824      	ldr	r0, [pc, #144]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 80068a6:	f000 fcc1 	bl	800722c <HAL_DMA_Init>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <HAL_UART_MspInit+0x440>
      Error_Handler();
 80068b0:	f7ff faf6 	bl	8005ea0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a20      	ldr	r2, [pc, #128]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 80068b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80068ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006938 <HAL_UART_MspInit+0x4c4>)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80068c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068c2:	4a20      	ldr	r2, [pc, #128]	@ (8006944 <HAL_UART_MspInit+0x4d0>)
 80068c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80068c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80068cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068d0:	2240      	movs	r2, #64	@ 0x40
 80068d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068da:	4b19      	ldr	r3, [pc, #100]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068e2:	4b17      	ldr	r3, [pc, #92]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068e8:	4b15      	ldr	r3, [pc, #84]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80068ee:	4b14      	ldr	r3, [pc, #80]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80068f4:	4b12      	ldr	r3, [pc, #72]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068fa:	4b11      	ldr	r3, [pc, #68]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006900:	480f      	ldr	r0, [pc, #60]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 8006902:	f000 fc93 	bl	800722c <HAL_DMA_Init>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_UART_MspInit+0x49c>
      Error_Handler();
 800690c:	f7ff fac8 	bl	8005ea0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a0b      	ldr	r2, [pc, #44]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 8006914:	671a      	str	r2, [r3, #112]	@ 0x70
 8006916:	4a0a      	ldr	r2, [pc, #40]	@ (8006940 <HAL_UART_MspInit+0x4cc>)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800691c:	e08c      	b.n	8006a38 <HAL_UART_MspInit+0x5c4>
 800691e:	bf00      	nop
 8006920:	40004400 	.word	0x40004400
 8006924:	40023800 	.word	0x40023800
 8006928:	40020c00 	.word	0x40020c00
 800692c:	2000b8e0 	.word	0x2000b8e0
 8006930:	40026088 	.word	0x40026088
 8006934:	40004800 	.word	0x40004800
 8006938:	2000b940 	.word	0x2000b940
 800693c:	40026028 	.word	0x40026028
 8006940:	2000b9a0 	.word	0x2000b9a0
 8006944:	40026058 	.word	0x40026058
  else if(huart->Instance==USART6)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a40 <HAL_UART_MspInit+0x5cc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d172      	bne.n	8006a38 <HAL_UART_MspInit+0x5c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006952:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006956:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8006958:	2300      	movs	r3, #0
 800695a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800695e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006962:	4618      	mov	r0, r3
 8006964:	f002 fd4e 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_UART_MspInit+0x4fe>
      Error_Handler();
 800696e:	f7ff fa97 	bl	8005ea0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006972:	4b34      	ldr	r3, [pc, #208]	@ (8006a44 <HAL_UART_MspInit+0x5d0>)
 8006974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006976:	4a33      	ldr	r2, [pc, #204]	@ (8006a44 <HAL_UART_MspInit+0x5d0>)
 8006978:	f043 0320 	orr.w	r3, r3, #32
 800697c:	6453      	str	r3, [r2, #68]	@ 0x44
 800697e:	4b31      	ldr	r3, [pc, #196]	@ (8006a44 <HAL_UART_MspInit+0x5d0>)
 8006980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800698a:	4b2e      	ldr	r3, [pc, #184]	@ (8006a44 <HAL_UART_MspInit+0x5d0>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a44 <HAL_UART_MspInit+0x5d0>)
 8006990:	f043 0304 	orr.w	r3, r3, #4
 8006994:	6313      	str	r3, [r2, #48]	@ 0x30
 8006996:	4b2b      	ldr	r3, [pc, #172]	@ (8006a44 <HAL_UART_MspInit+0x5d0>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069a2:	23c0      	movs	r3, #192	@ 0xc0
 80069a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a8:	2302      	movs	r3, #2
 80069aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b4:	2303      	movs	r3, #3
 80069b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80069ba:	2308      	movs	r3, #8
 80069bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069c0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80069c4:	4619      	mov	r1, r3
 80069c6:	4820      	ldr	r0, [pc, #128]	@ (8006a48 <HAL_UART_MspInit+0x5d4>)
 80069c8:	f001 f83a 	bl	8007a40 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80069cc:	4b1f      	ldr	r3, [pc, #124]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 80069ce:	4a20      	ldr	r2, [pc, #128]	@ (8006a50 <HAL_UART_MspInit+0x5dc>)
 80069d0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80069d2:	4b1e      	ldr	r3, [pc, #120]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 80069d4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80069d8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069da:	4b1c      	ldr	r3, [pc, #112]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 80069dc:	2200      	movs	r2, #0
 80069de:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069e0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069e6:	4b19      	ldr	r3, [pc, #100]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 80069e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80069ec:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069ee:	4b17      	ldr	r3, [pc, #92]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069f4:	4b15      	ldr	r3, [pc, #84]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80069fa:	4b14      	ldr	r3, [pc, #80]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a00:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a06:	4b11      	ldr	r3, [pc, #68]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006a0c:	480f      	ldr	r0, [pc, #60]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 8006a0e:	f000 fc0d 	bl	800722c <HAL_DMA_Init>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_UART_MspInit+0x5a8>
      Error_Handler();
 8006a18:	f7ff fa42 	bl	8005ea0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 8006a20:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a22:	4a0a      	ldr	r2, [pc, #40]	@ (8006a4c <HAL_UART_MspInit+0x5d8>)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2105      	movs	r1, #5
 8006a2c:	2047      	movs	r0, #71	@ 0x47
 8006a2e:	f000 fbd3 	bl	80071d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006a32:	2047      	movs	r0, #71	@ 0x47
 8006a34:	f000 fbec 	bl	8007210 <HAL_NVIC_EnableIRQ>
}
 8006a38:	bf00      	nop
 8006a3a:	37d0      	adds	r7, #208	@ 0xd0
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	40011400 	.word	0x40011400
 8006a44:	40023800 	.word	0x40023800
 8006a48:	40020800 	.word	0x40020800
 8006a4c:	2000ba00 	.word	0x2000ba00
 8006a50:	40026428 	.word	0x40026428

08006a54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b0ac      	sub	sp, #176	@ 0xb0
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	609a      	str	r2, [r3, #8]
 8006a68:	60da      	str	r2, [r3, #12]
 8006a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a6c:	f107 0318 	add.w	r3, r7, #24
 8006a70:	2284      	movs	r2, #132	@ 0x84
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f00f fc96 	bl	80163a6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a82:	d159      	bne.n	8006b38 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006a84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006a88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a90:	f107 0318 	add.w	r3, r7, #24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 fcb5 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8006aa0:	f7ff f9fe 	bl	8005ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aa4:	4b26      	ldr	r3, [pc, #152]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	4a25      	ldr	r2, [pc, #148]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ab0:	4b23      	ldr	r3, [pc, #140]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006abc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8006ac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ad6:	230a      	movs	r3, #10
 8006ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006adc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4818      	ldr	r0, [pc, #96]	@ (8006b44 <HAL_PCD_MspInit+0xf0>)
 8006ae4:	f000 ffac 	bl	8007a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006aec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006af0:	2300      	movs	r3, #0
 8006af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006afc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006b00:	4619      	mov	r1, r3
 8006b02:	4810      	ldr	r0, [pc, #64]	@ (8006b44 <HAL_PCD_MspInit+0xf0>)
 8006b04:	f000 ff9c 	bl	8007a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b08:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b12:	6353      	str	r3, [r2, #52]	@ 0x34
 8006b14:	4b0a      	ldr	r3, [pc, #40]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b24:	4a06      	ldr	r2, [pc, #24]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b2c:	4b04      	ldr	r3, [pc, #16]	@ (8006b40 <HAL_PCD_MspInit+0xec>)
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8006b38:	bf00      	nop
 8006b3a:	37b0      	adds	r7, #176	@ 0xb0
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40023800 	.word	0x40023800
 8006b44:	40020000 	.word	0x40020000

08006b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	@ 0x38
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006b58:	4b33      	ldr	r3, [pc, #204]	@ (8006c28 <HAL_InitTick+0xe0>)
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	4a32      	ldr	r2, [pc, #200]	@ (8006c28 <HAL_InitTick+0xe0>)
 8006b5e:	f043 0310 	orr.w	r3, r3, #16
 8006b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b64:	4b30      	ldr	r3, [pc, #192]	@ (8006c28 <HAL_InitTick+0xe0>)
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006b70:	f107 0210 	add.w	r2, r7, #16
 8006b74:	f107 0314 	add.w	r3, r7, #20
 8006b78:	4611      	mov	r1, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f002 fc10 	bl	80093a0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006b8a:	f002 fbe1 	bl	8009350 <HAL_RCC_GetPCLK1Freq>
 8006b8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b90:	e004      	b.n	8006b9c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006b92:	f002 fbdd 	bl	8009350 <HAL_RCC_GetPCLK1Freq>
 8006b96:	4603      	mov	r3, r0
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9e:	4a23      	ldr	r2, [pc, #140]	@ (8006c2c <HAL_InitTick+0xe4>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	0c9b      	lsrs	r3, r3, #18
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006baa:	4b21      	ldr	r3, [pc, #132]	@ (8006c30 <HAL_InitTick+0xe8>)
 8006bac:	4a21      	ldr	r2, [pc, #132]	@ (8006c34 <HAL_InitTick+0xec>)
 8006bae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006c30 <HAL_InitTick+0xe8>)
 8006bb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006bb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c30 <HAL_InitTick+0xe8>)
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006c30 <HAL_InitTick+0xe8>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c30 <HAL_InitTick+0xe8>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bca:	4b19      	ldr	r3, [pc, #100]	@ (8006c30 <HAL_InitTick+0xe8>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006bd0:	4817      	ldr	r0, [pc, #92]	@ (8006c30 <HAL_InitTick+0xe8>)
 8006bd2:	f003 fdd1 	bl	800a778 <HAL_TIM_Base_Init>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8006bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11b      	bne.n	8006c1c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006be4:	4812      	ldr	r0, [pc, #72]	@ (8006c30 <HAL_InitTick+0xe8>)
 8006be6:	f003 feb7 	bl	800a958 <HAL_TIM_Base_Start_IT>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8006bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d111      	bne.n	8006c1c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006bf8:	2036      	movs	r0, #54	@ 0x36
 8006bfa:	f000 fb09 	bl	8007210 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b0f      	cmp	r3, #15
 8006c02:	d808      	bhi.n	8006c16 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006c04:	2200      	movs	r2, #0
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	2036      	movs	r0, #54	@ 0x36
 8006c0a:	f000 fae5 	bl	80071d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c38 <HAL_InitTick+0xf0>)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	e002      	b.n	8006c1c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3738      	adds	r7, #56	@ 0x38
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	431bde83 	.word	0x431bde83
 8006c30:	2000c224 	.word	0x2000c224
 8006c34:	40001000 	.word	0x40001000
 8006c38:	20000058 	.word	0x20000058

08006c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006c40:	bf00      	nop
 8006c42:	e7fd      	b.n	8006c40 <NMI_Handler+0x4>

08006c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c48:	bf00      	nop
 8006c4a:	e7fd      	b.n	8006c48 <HardFault_Handler+0x4>

08006c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c50:	bf00      	nop
 8006c52:	e7fd      	b.n	8006c50 <MemManage_Handler+0x4>

08006c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c58:	bf00      	nop
 8006c5a:	e7fd      	b.n	8006c58 <BusFault_Handler+0x4>

08006c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c60:	bf00      	nop
 8006c62:	e7fd      	b.n	8006c60 <UsageFault_Handler+0x4>

08006c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c68:	bf00      	nop
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006c78:	4802      	ldr	r0, [pc, #8]	@ (8006c84 <DMA1_Stream0_IRQHandler+0x10>)
 8006c7a:	f000 fc77 	bl	800756c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006c7e:	bf00      	nop
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	2000b880 	.word	0x2000b880

08006c88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006c8c:	4802      	ldr	r0, [pc, #8]	@ (8006c98 <DMA1_Stream1_IRQHandler+0x10>)
 8006c8e:	f000 fc6d 	bl	800756c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006c92:	bf00      	nop
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	2000b940 	.word	0x2000b940

08006c9c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006ca0:	4802      	ldr	r0, [pc, #8]	@ (8006cac <DMA1_Stream2_IRQHandler+0x10>)
 8006ca2:	f000 fc63 	bl	800756c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006ca6:	bf00      	nop
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000b820 	.word	0x2000b820

08006cb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006cb4:	4802      	ldr	r0, [pc, #8]	@ (8006cc0 <DMA1_Stream3_IRQHandler+0x10>)
 8006cb6:	f000 fc59 	bl	800756c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006cba:	bf00      	nop
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	2000b9a0 	.word	0x2000b9a0

08006cc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006cc8:	4802      	ldr	r0, [pc, #8]	@ (8006cd4 <DMA1_Stream5_IRQHandler+0x10>)
 8006cca:	f000 fc4f 	bl	800756c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006cce:	bf00      	nop
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	2000b8e0 	.word	0x2000b8e0

08006cd8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006cdc:	4802      	ldr	r0, [pc, #8]	@ (8006ce8 <TIM1_CC_IRQHandler+0x10>)
 8006cde:	f004 fb4f 	bl	800b380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006ce2:	bf00      	nop
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	2000b318 	.word	0x2000b318

08006cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006cf0:	4802      	ldr	r0, [pc, #8]	@ (8006cfc <TIM2_IRQHandler+0x10>)
 8006cf2:	f004 fb45 	bl	800b380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006cf6:	bf00      	nop
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	2000b364 	.word	0x2000b364

08006d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006d04:	4802      	ldr	r0, [pc, #8]	@ (8006d10 <TIM3_IRQHandler+0x10>)
 8006d06:	f004 fb3b 	bl	800b380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006d0a:	bf00      	nop
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	2000b3b0 	.word	0x2000b3b0

08006d14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006d18:	4802      	ldr	r0, [pc, #8]	@ (8006d24 <TIM4_IRQHandler+0x10>)
 8006d1a:	f004 fb31 	bl	800b380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006d1e:	bf00      	nop
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	2000b3fc 	.word	0x2000b3fc

08006d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006d2c:	4802      	ldr	r0, [pc, #8]	@ (8006d38 <USART2_IRQHandler+0x10>)
 8006d2e:	f005 fcb7 	bl	800c6a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006d32:	bf00      	nop
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	2000b688 	.word	0x2000b688

08006d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8006d40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006d44:	f001 f85a 	bl	8007dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006d48:	bf00      	nop
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006d50:	4802      	ldr	r0, [pc, #8]	@ (8006d5c <TIM5_IRQHandler+0x10>)
 8006d52:	f004 fb15 	bl	800b380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006d56:	bf00      	nop
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	2000b448 	.word	0x2000b448

08006d60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006d64:	4802      	ldr	r0, [pc, #8]	@ (8006d70 <UART4_IRQHandler+0x10>)
 8006d66:	f005 fc9b 	bl	800c6a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006d6a:	bf00      	nop
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	2000b578 	.word	0x2000b578

08006d74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006d78:	4802      	ldr	r0, [pc, #8]	@ (8006d84 <UART5_IRQHandler+0x10>)
 8006d7a:	f005 fc91 	bl	800c6a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006d7e:	bf00      	nop
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	2000b600 	.word	0x2000b600

08006d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006d8c:	4802      	ldr	r0, [pc, #8]	@ (8006d98 <TIM6_DAC_IRQHandler+0x10>)
 8006d8e:	f004 faf7 	bl	800b380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006d92:	bf00      	nop
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2000c224 	.word	0x2000c224

08006d9c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006da0:	4802      	ldr	r0, [pc, #8]	@ (8006dac <DMA2_Stream1_IRQHandler+0x10>)
 8006da2:	f000 fbe3 	bl	800756c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2000ba00 	.word	0x2000ba00

08006db0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006db4:	4802      	ldr	r0, [pc, #8]	@ (8006dc0 <USART6_IRQHandler+0x10>)
 8006db6:	f005 fc73 	bl	800c6a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006dba:	bf00      	nop
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2000b798 	.word	0x2000b798

08006dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  return 1;
 8006dc8:	2301      	movs	r3, #1
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <_kill>:

int _kill(int pid, int sig)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006dde:	f00f fb89 	bl	80164f4 <__errno>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2216      	movs	r2, #22
 8006de6:	601a      	str	r2, [r3, #0]
  return -1;
 8006de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <_exit>:

void _exit (int status)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff ffe7 	bl	8006dd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <_exit+0x12>

08006e0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e00a      	b.n	8006e32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e1c:	f3af 8000 	nop.w
 8006e20:	4601      	mov	r1, r0
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	60ba      	str	r2, [r7, #8]
 8006e28:	b2ca      	uxtb	r2, r1
 8006e2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	dbf0      	blt.n	8006e1c <_read+0x12>
  }

  return len;
 8006e3a:	687b      	ldr	r3, [r7, #4]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	e009      	b.n	8006e6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	60ba      	str	r2, [r7, #8]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	3301      	adds	r3, #1
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	dbf1      	blt.n	8006e56 <_write+0x12>
  }
  return len;
 8006e72:	687b      	ldr	r3, [r7, #4]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <_close>:

int _close(int file)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006ea4:	605a      	str	r2, [r3, #4]
  return 0;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <_isatty>:

int _isatty(int file)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006ebc:	2301      	movs	r3, #1
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006eec:	4a14      	ldr	r2, [pc, #80]	@ (8006f40 <_sbrk+0x5c>)
 8006eee:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <_sbrk+0x60>)
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ef8:	4b13      	ldr	r3, [pc, #76]	@ (8006f48 <_sbrk+0x64>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f00:	4b11      	ldr	r3, [pc, #68]	@ (8006f48 <_sbrk+0x64>)
 8006f02:	4a12      	ldr	r2, [pc, #72]	@ (8006f4c <_sbrk+0x68>)
 8006f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f06:	4b10      	ldr	r3, [pc, #64]	@ (8006f48 <_sbrk+0x64>)
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d207      	bcs.n	8006f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f14:	f00f faee 	bl	80164f4 <__errno>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	220c      	movs	r2, #12
 8006f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	e009      	b.n	8006f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f24:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <_sbrk+0x64>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f2a:	4b07      	ldr	r3, [pc, #28]	@ (8006f48 <_sbrk+0x64>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	4a05      	ldr	r2, [pc, #20]	@ (8006f48 <_sbrk+0x64>)
 8006f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20050000 	.word	0x20050000
 8006f44:	00000400 	.word	0x00000400
 8006f48:	2000c270 	.word	0x2000c270
 8006f4c:	20014dc0 	.word	0x20014dc0

08006f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f54:	4b06      	ldr	r3, [pc, #24]	@ (8006f70 <SystemInit+0x20>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	4a05      	ldr	r2, [pc, #20]	@ (8006f70 <SystemInit+0x20>)
 8006f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f64:	bf00      	nop
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	e000ed00 	.word	0xe000ed00

08006f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8006f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006fac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006f78:	f7ff ffea 	bl	8006f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f7c:	480c      	ldr	r0, [pc, #48]	@ (8006fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f7e:	490d      	ldr	r1, [pc, #52]	@ (8006fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f80:	4a0d      	ldr	r2, [pc, #52]	@ (8006fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f84:	e002      	b.n	8006f8c <LoopCopyDataInit>

08006f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f8a:	3304      	adds	r3, #4

08006f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f90:	d3f9      	bcc.n	8006f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f92:	4a0a      	ldr	r2, [pc, #40]	@ (8006fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f94:	4c0a      	ldr	r4, [pc, #40]	@ (8006fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f98:	e001      	b.n	8006f9e <LoopFillZerobss>

08006f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f9c:	3204      	adds	r2, #4

08006f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fa0:	d3fb      	bcc.n	8006f9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006fa2:	f00f faad 	bl	8016500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fa6:	f7fd ffc7 	bl	8004f38 <main>
  bx  lr    
 8006faa:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8006fac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fb4:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8006fb8:	08019380 	.word	0x08019380
  ldr r2, =_sbss
 8006fbc:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8006fc0:	20014dc0 	.word	0x20014dc0

08006fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006fc4:	e7fe      	b.n	8006fc4 <ADC_IRQHandler>

08006fc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fca:	2003      	movs	r0, #3
 8006fcc:	f000 f8f9 	bl	80071c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006fd0:	200f      	movs	r0, #15
 8006fd2:	f7ff fdb9 	bl	8006b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fd6:	f7fe ff69 	bl	8005eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006fe4:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <HAL_IncTick+0x20>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4b06      	ldr	r3, [pc, #24]	@ (8007004 <HAL_IncTick+0x24>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4413      	add	r3, r2
 8006ff0:	4a04      	ldr	r2, [pc, #16]	@ (8007004 <HAL_IncTick+0x24>)
 8006ff2:	6013      	str	r3, [r2, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	2000005c 	.word	0x2000005c
 8007004:	2000c274 	.word	0x2000c274

08007008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return uwTick;
 800700c:	4b03      	ldr	r3, [pc, #12]	@ (800701c <HAL_GetTick+0x14>)
 800700e:	681b      	ldr	r3, [r3, #0]
}
 8007010:	4618      	mov	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	2000c274 	.word	0x2000c274

08007020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007028:	f7ff ffee 	bl	8007008 <HAL_GetTick>
 800702c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007038:	d005      	beq.n	8007046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800703a:	4b0a      	ldr	r3, [pc, #40]	@ (8007064 <HAL_Delay+0x44>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007046:	bf00      	nop
 8007048:	f7ff ffde 	bl	8007008 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	429a      	cmp	r2, r3
 8007056:	d8f7      	bhi.n	8007048 <HAL_Delay+0x28>
  {
  }
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	2000005c 	.word	0x2000005c

08007068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007078:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <__NVIC_SetPriorityGrouping+0x40>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007084:	4013      	ands	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007090:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <__NVIC_SetPriorityGrouping+0x44>)
 8007092:	4313      	orrs	r3, r2
 8007094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007096:	4a04      	ldr	r2, [pc, #16]	@ (80070a8 <__NVIC_SetPriorityGrouping+0x40>)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	60d3      	str	r3, [r2, #12]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	e000ed00 	.word	0xe000ed00
 80070ac:	05fa0000 	.word	0x05fa0000

080070b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070b4:	4b04      	ldr	r3, [pc, #16]	@ (80070c8 <__NVIC_GetPriorityGrouping+0x18>)
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	0a1b      	lsrs	r3, r3, #8
 80070ba:	f003 0307 	and.w	r3, r3, #7
}
 80070be:	4618      	mov	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	e000ed00 	.word	0xe000ed00

080070cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	db0b      	blt.n	80070f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	f003 021f 	and.w	r2, r3, #31
 80070e4:	4907      	ldr	r1, [pc, #28]	@ (8007104 <__NVIC_EnableIRQ+0x38>)
 80070e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	2001      	movs	r0, #1
 80070ee:	fa00 f202 	lsl.w	r2, r0, r2
 80070f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	e000e100 	.word	0xe000e100

08007108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007118:	2b00      	cmp	r3, #0
 800711a:	db0a      	blt.n	8007132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	490c      	ldr	r1, [pc, #48]	@ (8007154 <__NVIC_SetPriority+0x4c>)
 8007122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007126:	0112      	lsls	r2, r2, #4
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	440b      	add	r3, r1
 800712c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007130:	e00a      	b.n	8007148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	b2da      	uxtb	r2, r3
 8007136:	4908      	ldr	r1, [pc, #32]	@ (8007158 <__NVIC_SetPriority+0x50>)
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	3b04      	subs	r3, #4
 8007140:	0112      	lsls	r2, r2, #4
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	440b      	add	r3, r1
 8007146:	761a      	strb	r2, [r3, #24]
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	e000e100 	.word	0xe000e100
 8007158:	e000ed00 	.word	0xe000ed00

0800715c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800715c:	b480      	push	{r7}
 800715e:	b089      	sub	sp, #36	@ 0x24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f1c3 0307 	rsb	r3, r3, #7
 8007176:	2b04      	cmp	r3, #4
 8007178:	bf28      	it	cs
 800717a:	2304      	movcs	r3, #4
 800717c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	3304      	adds	r3, #4
 8007182:	2b06      	cmp	r3, #6
 8007184:	d902      	bls.n	800718c <NVIC_EncodePriority+0x30>
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3b03      	subs	r3, #3
 800718a:	e000      	b.n	800718e <NVIC_EncodePriority+0x32>
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007190:	f04f 32ff 	mov.w	r2, #4294967295
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43da      	mvns	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	401a      	ands	r2, r3
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071a4:	f04f 31ff 	mov.w	r1, #4294967295
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	43d9      	mvns	r1, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b4:	4313      	orrs	r3, r2
         );
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3724      	adds	r7, #36	@ 0x24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff ff4c 	bl	8007068 <__NVIC_SetPriorityGrouping>
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071ea:	f7ff ff61 	bl	80070b0 <__NVIC_GetPriorityGrouping>
 80071ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	6978      	ldr	r0, [r7, #20]
 80071f6:	f7ff ffb1 	bl	800715c <NVIC_EncodePriority>
 80071fa:	4602      	mov	r2, r0
 80071fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff ff80 	bl	8007108 <__NVIC_SetPriority>
}
 8007208:	bf00      	nop
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800721a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff ff54 	bl	80070cc <__NVIC_EnableIRQ>
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007238:	f7ff fee6 	bl	8007008 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e099      	b.n	800737c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007268:	e00f      	b.n	800728a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800726a:	f7ff fecd 	bl	8007008 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b05      	cmp	r3, #5
 8007276:	d908      	bls.n	800728a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2203      	movs	r2, #3
 8007282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e078      	b.n	800737c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e8      	bne.n	800726a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4b38      	ldr	r3, [pc, #224]	@ (8007384 <HAL_DMA_Init+0x158>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d107      	bne.n	80072f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	4313      	orrs	r3, r2
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0307 	bic.w	r3, r3, #7
 800730a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	2b04      	cmp	r3, #4
 800731c:	d117      	bne.n	800734e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00e      	beq.n	800734e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fb09 	bl	8007948 <DMA_CheckFifoParam>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2240      	movs	r2, #64	@ 0x40
 8007340:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800734a:	2301      	movs	r3, #1
 800734c:	e016      	b.n	800737c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fac0 	bl	80078dc <DMA_CalcBaseAndBitshift>
 800735c:	4603      	mov	r3, r0
 800735e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007364:	223f      	movs	r2, #63	@ 0x3f
 8007366:	409a      	lsls	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	f010803f 	.word	0xf010803f

08007388 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_DMA_Start_IT+0x26>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e048      	b.n	8007440 <HAL_DMA_Start_IT+0xb8>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d137      	bne.n	8007432 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2202      	movs	r2, #2
 80073c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fa52 	bl	8007880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e0:	223f      	movs	r2, #63	@ 0x3f
 80073e2:	409a      	lsls	r2, r3
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0216 	orr.w	r2, r2, #22
 80073f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007406:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0208 	orr.w	r2, r2, #8
 800741e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0201 	orr.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e005      	b.n	800743e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800743a:	2302      	movs	r3, #2
 800743c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007454:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007456:	f7ff fdd7 	bl	8007008 <HAL_GetTick>
 800745a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d008      	beq.n	800747a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2280      	movs	r2, #128	@ 0x80
 800746c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e052      	b.n	8007520 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0216 	bic.w	r2, r2, #22
 8007488:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007498:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d103      	bne.n	80074aa <HAL_DMA_Abort+0x62>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0208 	bic.w	r2, r2, #8
 80074b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074ca:	e013      	b.n	80074f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074cc:	f7ff fd9c 	bl	8007008 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b05      	cmp	r3, #5
 80074d8:	d90c      	bls.n	80074f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2203      	movs	r2, #3
 80074e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e015      	b.n	8007520 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e4      	bne.n	80074cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007506:	223f      	movs	r2, #63	@ 0x3f
 8007508:	409a      	lsls	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d004      	beq.n	8007546 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2280      	movs	r2, #128	@ 0x80
 8007540:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e00c      	b.n	8007560 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2205      	movs	r2, #5
 800754a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0201 	bic.w	r2, r2, #1
 800755c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007578:	4b8e      	ldr	r3, [pc, #568]	@ (80077b4 <HAL_DMA_IRQHandler+0x248>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a8e      	ldr	r2, [pc, #568]	@ (80077b8 <HAL_DMA_IRQHandler+0x24c>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	0a9b      	lsrs	r3, r3, #10
 8007584:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007596:	2208      	movs	r2, #8
 8007598:	409a      	lsls	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4013      	ands	r3, r2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01a      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d013      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0204 	bic.w	r2, r2, #4
 80075be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075c4:	2208      	movs	r2, #8
 80075c6:	409a      	lsls	r2, r3
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075d0:	f043 0201 	orr.w	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075dc:	2201      	movs	r2, #1
 80075de:	409a      	lsls	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d012      	beq.n	800760e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075fa:	2201      	movs	r2, #1
 80075fc:	409a      	lsls	r2, r3
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007606:	f043 0202 	orr.w	r2, r3, #2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007612:	2204      	movs	r2, #4
 8007614:	409a      	lsls	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4013      	ands	r3, r2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d012      	beq.n	8007644 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007630:	2204      	movs	r2, #4
 8007632:	409a      	lsls	r2, r3
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763c:	f043 0204 	orr.w	r2, r3, #4
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007648:	2210      	movs	r2, #16
 800764a:	409a      	lsls	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4013      	ands	r3, r2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d043      	beq.n	80076dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d03c      	beq.n	80076dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007666:	2210      	movs	r2, #16
 8007668:	409a      	lsls	r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d018      	beq.n	80076ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d108      	bne.n	800769c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	d024      	beq.n	80076dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
 800769a:	e01f      	b.n	80076dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01b      	beq.n	80076dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
 80076ac:	e016      	b.n	80076dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d107      	bne.n	80076cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 0208 	bic.w	r2, r2, #8
 80076ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076e0:	2220      	movs	r2, #32
 80076e2:	409a      	lsls	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4013      	ands	r3, r2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 808f 	beq.w	800780c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 8087 	beq.w	800780c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007702:	2220      	movs	r2, #32
 8007704:	409a      	lsls	r2, r3
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b05      	cmp	r3, #5
 8007714:	d136      	bne.n	8007784 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0216 	bic.w	r2, r2, #22
 8007724:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007734:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <HAL_DMA_IRQHandler+0x1da>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0208 	bic.w	r2, r2, #8
 8007754:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800775a:	223f      	movs	r2, #63	@ 0x3f
 800775c:	409a      	lsls	r2, r3
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007776:	2b00      	cmp	r3, #0
 8007778:	d07e      	beq.n	8007878 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
        }
        return;
 8007782:	e079      	b.n	8007878 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01d      	beq.n	80077ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10d      	bne.n	80077bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d031      	beq.n	800780c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
 80077b0:	e02c      	b.n	800780c <HAL_DMA_IRQHandler+0x2a0>
 80077b2:	bf00      	nop
 80077b4:	20000054 	.word	0x20000054
 80077b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d023      	beq.n	800780c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
 80077cc:	e01e      	b.n	800780c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10f      	bne.n	80077fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0210 	bic.w	r2, r2, #16
 80077ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007810:	2b00      	cmp	r3, #0
 8007812:	d032      	beq.n	800787a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d022      	beq.n	8007866 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2205      	movs	r2, #5
 8007824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	3301      	adds	r3, #1
 800783c:	60bb      	str	r3, [r7, #8]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	429a      	cmp	r2, r3
 8007842:	d307      	bcc.n	8007854 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f2      	bne.n	8007838 <HAL_DMA_IRQHandler+0x2cc>
 8007852:	e000      	b.n	8007856 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007854:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
 8007876:	e000      	b.n	800787a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007878:	bf00      	nop
    }
  }
}
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800789c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b40      	cmp	r3, #64	@ 0x40
 80078ac:	d108      	bne.n	80078c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80078be:	e007      	b.n	80078d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	60da      	str	r2, [r3, #12]
}
 80078d0:	bf00      	nop
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	3b10      	subs	r3, #16
 80078ec:	4a13      	ldr	r2, [pc, #76]	@ (800793c <DMA_CalcBaseAndBitshift+0x60>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80078f6:	4a12      	ldr	r2, [pc, #72]	@ (8007940 <DMA_CalcBaseAndBitshift+0x64>)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d908      	bls.n	800791c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	4b0c      	ldr	r3, [pc, #48]	@ (8007944 <DMA_CalcBaseAndBitshift+0x68>)
 8007912:	4013      	ands	r3, r2
 8007914:	1d1a      	adds	r2, r3, #4
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	659a      	str	r2, [r3, #88]	@ 0x58
 800791a:	e006      	b.n	800792a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	4b08      	ldr	r3, [pc, #32]	@ (8007944 <DMA_CalcBaseAndBitshift+0x68>)
 8007924:	4013      	ands	r3, r2
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	aaaaaaab 	.word	0xaaaaaaab
 8007940:	08018b70 	.word	0x08018b70
 8007944:	fffffc00 	.word	0xfffffc00

08007948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d11f      	bne.n	80079a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b03      	cmp	r3, #3
 8007966:	d856      	bhi.n	8007a16 <DMA_CheckFifoParam+0xce>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <DMA_CheckFifoParam+0x28>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	08007981 	.word	0x08007981
 8007974:	08007993 	.word	0x08007993
 8007978:	08007981 	.word	0x08007981
 800797c:	08007a17 	.word	0x08007a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d046      	beq.n	8007a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007990:	e043      	b.n	8007a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007996:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800799a:	d140      	bne.n	8007a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079a0:	e03d      	b.n	8007a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079aa:	d121      	bne.n	80079f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d837      	bhi.n	8007a22 <DMA_CheckFifoParam+0xda>
 80079b2:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <DMA_CheckFifoParam+0x70>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079c9 	.word	0x080079c9
 80079bc:	080079cf 	.word	0x080079cf
 80079c0:	080079c9 	.word	0x080079c9
 80079c4:	080079e1 	.word	0x080079e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	73fb      	strb	r3, [r7, #15]
      break;
 80079cc:	e030      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d025      	beq.n	8007a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079de:	e022      	b.n	8007a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80079e8:	d11f      	bne.n	8007a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80079ee:	e01c      	b.n	8007a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d903      	bls.n	80079fe <DMA_CheckFifoParam+0xb6>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d003      	beq.n	8007a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80079fc:	e018      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
      break;
 8007a02:	e015      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00e      	beq.n	8007a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	73fb      	strb	r3, [r7, #15]
      break;
 8007a14:	e00b      	b.n	8007a2e <DMA_CheckFifoParam+0xe6>
      break;
 8007a16:	bf00      	nop
 8007a18:	e00a      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
      break;
 8007a1a:	bf00      	nop
 8007a1c:	e008      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
      break;
 8007a1e:	bf00      	nop
 8007a20:	e006      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
      break;
 8007a22:	bf00      	nop
 8007a24:	e004      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
      break;
 8007a26:	bf00      	nop
 8007a28:	e002      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8007a2a:	bf00      	nop
 8007a2c:	e000      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
      break;
 8007a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop

08007a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b089      	sub	sp, #36	@ 0x24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	e175      	b.n	8007d4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007a60:	2201      	movs	r2, #1
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4013      	ands	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	f040 8164 	bne.w	8007d46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d005      	beq.n	8007a96 <HAL_GPIO_Init+0x56>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d130      	bne.n	8007af8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007acc:	2201      	movs	r2, #1
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	091b      	lsrs	r3, r3, #4
 8007ae2:	f003 0201 	and.w	r2, r3, #1
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d017      	beq.n	8007b34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	2203      	movs	r2, #3
 8007b10:	fa02 f303 	lsl.w	r3, r2, r3
 8007b14:	43db      	mvns	r3, r3
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	fa02 f303 	lsl.w	r3, r2, r3
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d123      	bne.n	8007b88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	08da      	lsrs	r2, r3, #3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3208      	adds	r2, #8
 8007b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	220f      	movs	r2, #15
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	4013      	ands	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	08da      	lsrs	r2, r3, #3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3208      	adds	r2, #8
 8007b82:	69b9      	ldr	r1, [r7, #24]
 8007b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	2203      	movs	r2, #3
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	43db      	mvns	r3, r3
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f003 0203 	and.w	r2, r3, #3
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 80be 	beq.w	8007d46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bca:	4b66      	ldr	r3, [pc, #408]	@ (8007d64 <HAL_GPIO_Init+0x324>)
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bce:	4a65      	ldr	r2, [pc, #404]	@ (8007d64 <HAL_GPIO_Init+0x324>)
 8007bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bd6:	4b63      	ldr	r3, [pc, #396]	@ (8007d64 <HAL_GPIO_Init+0x324>)
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007be2:	4a61      	ldr	r2, [pc, #388]	@ (8007d68 <HAL_GPIO_Init+0x328>)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	089b      	lsrs	r3, r3, #2
 8007be8:	3302      	adds	r3, #2
 8007bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	220f      	movs	r2, #15
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4013      	ands	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a58      	ldr	r2, [pc, #352]	@ (8007d6c <HAL_GPIO_Init+0x32c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d037      	beq.n	8007c7e <HAL_GPIO_Init+0x23e>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a57      	ldr	r2, [pc, #348]	@ (8007d70 <HAL_GPIO_Init+0x330>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d031      	beq.n	8007c7a <HAL_GPIO_Init+0x23a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a56      	ldr	r2, [pc, #344]	@ (8007d74 <HAL_GPIO_Init+0x334>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d02b      	beq.n	8007c76 <HAL_GPIO_Init+0x236>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a55      	ldr	r2, [pc, #340]	@ (8007d78 <HAL_GPIO_Init+0x338>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d025      	beq.n	8007c72 <HAL_GPIO_Init+0x232>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a54      	ldr	r2, [pc, #336]	@ (8007d7c <HAL_GPIO_Init+0x33c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d01f      	beq.n	8007c6e <HAL_GPIO_Init+0x22e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a53      	ldr	r2, [pc, #332]	@ (8007d80 <HAL_GPIO_Init+0x340>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d019      	beq.n	8007c6a <HAL_GPIO_Init+0x22a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a52      	ldr	r2, [pc, #328]	@ (8007d84 <HAL_GPIO_Init+0x344>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <HAL_GPIO_Init+0x226>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a51      	ldr	r2, [pc, #324]	@ (8007d88 <HAL_GPIO_Init+0x348>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00d      	beq.n	8007c62 <HAL_GPIO_Init+0x222>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a50      	ldr	r2, [pc, #320]	@ (8007d8c <HAL_GPIO_Init+0x34c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d007      	beq.n	8007c5e <HAL_GPIO_Init+0x21e>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a4f      	ldr	r2, [pc, #316]	@ (8007d90 <HAL_GPIO_Init+0x350>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d101      	bne.n	8007c5a <HAL_GPIO_Init+0x21a>
 8007c56:	2309      	movs	r3, #9
 8007c58:	e012      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c5a:	230a      	movs	r3, #10
 8007c5c:	e010      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c5e:	2308      	movs	r3, #8
 8007c60:	e00e      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c62:	2307      	movs	r3, #7
 8007c64:	e00c      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c66:	2306      	movs	r3, #6
 8007c68:	e00a      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c6a:	2305      	movs	r3, #5
 8007c6c:	e008      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c6e:	2304      	movs	r3, #4
 8007c70:	e006      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c72:	2303      	movs	r3, #3
 8007c74:	e004      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e002      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <HAL_GPIO_Init+0x240>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	f002 0203 	and.w	r2, r2, #3
 8007c86:	0092      	lsls	r2, r2, #2
 8007c88:	4093      	lsls	r3, r2
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007c90:	4935      	ldr	r1, [pc, #212]	@ (8007d68 <HAL_GPIO_Init+0x328>)
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	089b      	lsrs	r3, r3, #2
 8007c96:	3302      	adds	r3, #2
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8007d94 <HAL_GPIO_Init+0x354>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	43db      	mvns	r3, r3
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	4013      	ands	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007cc2:	4a34      	ldr	r2, [pc, #208]	@ (8007d94 <HAL_GPIO_Init+0x354>)
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007cc8:	4b32      	ldr	r3, [pc, #200]	@ (8007d94 <HAL_GPIO_Init+0x354>)
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007cec:	4a29      	ldr	r2, [pc, #164]	@ (8007d94 <HAL_GPIO_Init+0x354>)
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007cf2:	4b28      	ldr	r3, [pc, #160]	@ (8007d94 <HAL_GPIO_Init+0x354>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	43db      	mvns	r3, r3
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007d16:	4a1f      	ldr	r2, [pc, #124]	@ (8007d94 <HAL_GPIO_Init+0x354>)
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007d94 <HAL_GPIO_Init+0x354>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	43db      	mvns	r3, r3
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007d40:	4a14      	ldr	r2, [pc, #80]	@ (8007d94 <HAL_GPIO_Init+0x354>)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	61fb      	str	r3, [r7, #28]
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b0f      	cmp	r3, #15
 8007d50:	f67f ae86 	bls.w	8007a60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	3724      	adds	r7, #36	@ 0x24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40023800 	.word	0x40023800
 8007d68:	40013800 	.word	0x40013800
 8007d6c:	40020000 	.word	0x40020000
 8007d70:	40020400 	.word	0x40020400
 8007d74:	40020800 	.word	0x40020800
 8007d78:	40020c00 	.word	0x40020c00
 8007d7c:	40021000 	.word	0x40021000
 8007d80:	40021400 	.word	0x40021400
 8007d84:	40021800 	.word	0x40021800
 8007d88:	40021c00 	.word	0x40021c00
 8007d8c:	40022000 	.word	0x40022000
 8007d90:	40022400 	.word	0x40022400
 8007d94:	40013c00 	.word	0x40013c00

08007d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691a      	ldr	r2, [r3, #16]
 8007da8:	887b      	ldrh	r3, [r7, #2]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007db0:	2301      	movs	r3, #1
 8007db2:	73fb      	strb	r3, [r7, #15]
 8007db4:	e001      	b.n	8007dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	807b      	strh	r3, [r7, #2]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007dd8:	787b      	ldrb	r3, [r7, #1]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dde:	887a      	ldrh	r2, [r7, #2]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007de4:	e003      	b.n	8007dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	041a      	lsls	r2, r3, #16
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	619a      	str	r2, [r3, #24]
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
	...

08007dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007e06:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e08:	695a      	ldr	r2, [r3, #20]
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d006      	beq.n	8007e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e12:	4a05      	ldr	r2, [pc, #20]	@ (8007e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e18:	88fb      	ldrh	r3, [r7, #6]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fd f878 	bl	8004f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40013c00 	.word	0x40013c00

08007e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e08b      	b.n	8007f56 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fe f852 	bl	8005efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2224      	movs	r2, #36	@ 0x24
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d107      	bne.n	8007ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	e006      	b.n	8007eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d108      	bne.n	8007ece <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	e007      	b.n	8007ede <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6859      	ldr	r1, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f60 <HAL_I2C_Init+0x134>)
 8007eea:	430b      	orrs	r3, r1
 8007eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691a      	ldr	r2, [r3, #16]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	69d9      	ldr	r1, [r3, #28]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	02008000 	.word	0x02008000

08007f64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	460b      	mov	r3, r1
 8007f72:	817b      	strh	r3, [r7, #10]
 8007f74:	4613      	mov	r3, r2
 8007f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	f040 80fd 	bne.w	8008180 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_I2C_Master_Transmit+0x30>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e0f6      	b.n	8008182 <HAL_I2C_Master_Transmit+0x21e>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f9c:	f7ff f834 	bl	8007008 <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	2319      	movs	r3, #25
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f914 	bl	80081dc <I2C_WaitOnFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e0e1      	b.n	8008182 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2221      	movs	r2, #33	@ 0x21
 8007fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2210      	movs	r2, #16
 8007fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	893a      	ldrh	r2, [r7, #8]
 8007fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2bff      	cmp	r3, #255	@ 0xff
 8007fee:	d906      	bls.n	8007ffe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	22ff      	movs	r2, #255	@ 0xff
 8007ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007ff6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e007      	b.n	800800e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008002:	b29a      	uxth	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008008:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800800c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008012:	2b00      	cmp	r3, #0
 8008014:	d024      	beq.n	8008060 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801a:	781a      	ldrb	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800804a:	b2db      	uxtb	r3, r3
 800804c:	3301      	adds	r3, #1
 800804e:	b2da      	uxtb	r2, r3
 8008050:	8979      	ldrh	r1, [r7, #10]
 8008052:	4b4e      	ldr	r3, [pc, #312]	@ (800818c <HAL_I2C_Master_Transmit+0x228>)
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 fa83 	bl	8008564 <I2C_TransferConfig>
 800805e:	e066      	b.n	800812e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008064:	b2da      	uxtb	r2, r3
 8008066:	8979      	ldrh	r1, [r7, #10]
 8008068:	4b48      	ldr	r3, [pc, #288]	@ (800818c <HAL_I2C_Master_Transmit+0x228>)
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fa78 	bl	8008564 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008074:	e05b      	b.n	800812e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	6a39      	ldr	r1, [r7, #32]
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f907 	bl	800828e <I2C_WaitOnTXISFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e07b      	b.n	8008182 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808e:	781a      	ldrb	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d034      	beq.n	800812e <HAL_I2C_Master_Transmit+0x1ca>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d130      	bne.n	800812e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	2200      	movs	r2, #0
 80080d4:	2180      	movs	r1, #128	@ 0x80
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f880 	bl	80081dc <I2C_WaitOnFlagUntilTimeout>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e04d      	b.n	8008182 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	2bff      	cmp	r3, #255	@ 0xff
 80080ee:	d90e      	bls.n	800810e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	22ff      	movs	r2, #255	@ 0xff
 80080f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	8979      	ldrh	r1, [r7, #10]
 80080fe:	2300      	movs	r3, #0
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fa2c 	bl	8008564 <I2C_TransferConfig>
 800810c:	e00f      	b.n	800812e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008112:	b29a      	uxth	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800811c:	b2da      	uxtb	r2, r3
 800811e:	8979      	ldrh	r1, [r7, #10]
 8008120:	2300      	movs	r3, #0
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fa1b 	bl	8008564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d19e      	bne.n	8008076 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	6a39      	ldr	r1, [r7, #32]
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 f8ed 	bl	800831c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e01a      	b.n	8008182 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2220      	movs	r2, #32
 8008152:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b0c      	ldr	r3, [pc, #48]	@ (8008190 <HAL_I2C_Master_Transmit+0x22c>)
 8008160:	400b      	ands	r3, r1
 8008162:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	e000      	b.n	8008182 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008180:	2302      	movs	r3, #2
  }
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	80002000 	.word	0x80002000
 8008190:	fe00e800 	.word	0xfe00e800

08008194 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d103      	bne.n	80081b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2200      	movs	r2, #0
 80081b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d007      	beq.n	80081d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	619a      	str	r2, [r3, #24]
  }
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081ec:	e03b      	b.n	8008266 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f8d6 	bl	80083a4 <I2C_IsErrorOccurred>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e041      	b.n	8008286 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008208:	d02d      	beq.n	8008266 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820a:	f7fe fefd 	bl	8007008 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <I2C_WaitOnFlagUntilTimeout+0x44>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d122      	bne.n	8008266 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	4013      	ands	r3, r2
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	429a      	cmp	r2, r3
 800822e:	bf0c      	ite	eq
 8008230:	2301      	moveq	r3, #1
 8008232:	2300      	movne	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	461a      	mov	r2, r3
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	429a      	cmp	r2, r3
 800823c:	d113      	bne.n	8008266 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008242:	f043 0220 	orr.w	r2, r3, #32
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2220      	movs	r2, #32
 800824e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e00f      	b.n	8008286 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	699a      	ldr	r2, [r3, #24]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4013      	ands	r3, r2
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	429a      	cmp	r2, r3
 8008274:	bf0c      	ite	eq
 8008276:	2301      	moveq	r3, #1
 8008278:	2300      	movne	r3, #0
 800827a:	b2db      	uxtb	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	429a      	cmp	r2, r3
 8008282:	d0b4      	beq.n	80081ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800829a:	e033      	b.n	8008304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f87f 	bl	80083a4 <I2C_IsErrorOccurred>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e031      	b.n	8008314 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b6:	d025      	beq.n	8008304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b8:	f7fe fea6 	bl	8007008 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d302      	bcc.n	80082ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d11a      	bne.n	8008304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d013      	beq.n	8008304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e0:	f043 0220 	orr.w	r2, r3, #32
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e007      	b.n	8008314 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b02      	cmp	r3, #2
 8008310:	d1c4      	bne.n	800829c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008328:	e02f      	b.n	800838a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 f838 	bl	80083a4 <I2C_IsErrorOccurred>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e02d      	b.n	800839a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800833e:	f7fe fe63 	bl	8007008 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	429a      	cmp	r2, r3
 800834c:	d302      	bcc.n	8008354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d11a      	bne.n	800838a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b20      	cmp	r3, #32
 8008360:	d013      	beq.n	800838a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008366:	f043 0220 	orr.w	r2, r3, #32
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e007      	b.n	800839a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b20      	cmp	r3, #32
 8008396:	d1c8      	bne.n	800832a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08a      	sub	sp, #40	@ 0x28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d068      	beq.n	80084a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2210      	movs	r2, #16
 80083d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083d8:	e049      	b.n	800846e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d045      	beq.n	800846e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80083e2:	f7fe fe11 	bl	8007008 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d302      	bcc.n	80083f8 <I2C_IsErrorOccurred+0x54>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d13a      	bne.n	800846e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008402:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800840a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800841a:	d121      	bne.n	8008460 <I2C_IsErrorOccurred+0xbc>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008422:	d01d      	beq.n	8008460 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008424:	7cfb      	ldrb	r3, [r7, #19]
 8008426:	2b20      	cmp	r3, #32
 8008428:	d01a      	beq.n	8008460 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008438:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800843a:	f7fe fde5 	bl	8007008 <HAL_GetTick>
 800843e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008440:	e00e      	b.n	8008460 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008442:	f7fe fde1 	bl	8007008 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b19      	cmp	r3, #25
 800844e:	d907      	bls.n	8008460 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	f043 0320 	orr.w	r3, r3, #32
 8008456:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800845e:	e006      	b.n	800846e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b20      	cmp	r3, #32
 800846c:	d1e9      	bne.n	8008442 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b20      	cmp	r3, #32
 800847a:	d003      	beq.n	8008484 <I2C_IsErrorOccurred+0xe0>
 800847c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0aa      	beq.n	80083da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008488:	2b00      	cmp	r3, #0
 800848a:	d103      	bne.n	8008494 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2220      	movs	r2, #32
 8008492:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	f043 0304 	orr.w	r3, r3, #4
 800849a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	f043 0301 	orr.w	r3, r3, #1
 80084ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	f043 0308 	orr.w	r3, r3, #8
 80084dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	f043 0302 	orr.w	r3, r3, #2
 80084fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01c      	beq.n	8008552 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7ff fe3b 	bl	8008194 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6859      	ldr	r1, [r3, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <I2C_IsErrorOccurred+0x1bc>)
 800852a:	400b      	ands	r3, r1
 800852c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	431a      	orrs	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2220      	movs	r2, #32
 800853e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008556:	4618      	mov	r0, r3
 8008558:	3728      	adds	r7, #40	@ 0x28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	fe00e800 	.word	0xfe00e800

08008564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	817b      	strh	r3, [r7, #10]
 8008572:	4613      	mov	r3, r2
 8008574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008576:	897b      	ldrh	r3, [r7, #10]
 8008578:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800857c:	7a7b      	ldrb	r3, [r7, #9]
 800857e:	041b      	lsls	r3, r3, #16
 8008580:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008584:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	4313      	orrs	r3, r2
 800858e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008592:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	0d5b      	lsrs	r3, r3, #21
 800859e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80085a2:	4b08      	ldr	r3, [pc, #32]	@ (80085c4 <I2C_TransferConfig+0x60>)
 80085a4:	430b      	orrs	r3, r1
 80085a6:	43db      	mvns	r3, r3
 80085a8:	ea02 0103 	and.w	r1, r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	03ff63ff 	.word	0x03ff63ff

080085c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b20      	cmp	r3, #32
 80085dc:	d138      	bne.n	8008650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e032      	b.n	8008652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2224      	movs	r2, #36	@ 0x24
 80085f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f022 0201 	bic.w	r2, r2, #1
 800860a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800861a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6819      	ldr	r1, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0201 	orr.w	r2, r2, #1
 800863a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	e000      	b.n	8008652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008650:	2302      	movs	r3, #2
  }
}
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800865e:	b480      	push	{r7}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b20      	cmp	r3, #32
 8008672:	d139      	bne.n	80086e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800867e:	2302      	movs	r3, #2
 8008680:	e033      	b.n	80086ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2224      	movs	r2, #36	@ 0x24
 800868e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0201 	bic.w	r2, r2, #1
 80086a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80086b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0201 	orr.w	r2, r2, #1
 80086d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e000      	b.n	80086ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086e8:	2302      	movs	r3, #2
  }
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af02      	add	r7, sp, #8
 80086fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e108      	b.n	800891a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d106      	bne.n	8008728 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7fe f996 	bl	8006a54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2203      	movs	r2, #3
 800872c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008736:	d102      	bne.n	800873e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4618      	mov	r0, r3
 8008744:	f005 f98c 	bl	800da60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7c1a      	ldrb	r2, [r3, #16]
 8008750:	f88d 2000 	strb.w	r2, [sp]
 8008754:	3304      	adds	r3, #4
 8008756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008758:	f005 f928 	bl	800d9ac <USB_CoreInit>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e0d5      	b.n	800891a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f005 f984 	bl	800da82 <USB_SetCurrentMode>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e0c6      	b.n	800891a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	e04a      	b.n	8008828 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008792:	7bfa      	ldrb	r2, [r7, #15]
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	3315      	adds	r3, #21
 80087a2:	2201      	movs	r2, #1
 80087a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80087a6:	7bfa      	ldrb	r2, [r7, #15]
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	3314      	adds	r3, #20
 80087b6:	7bfa      	ldrb	r2, [r7, #15]
 80087b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80087ba:	7bfa      	ldrb	r2, [r7, #15]
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	b298      	uxth	r0, r3
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4613      	mov	r3, r2
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	332e      	adds	r3, #46	@ 0x2e
 80087ce:	4602      	mov	r2, r0
 80087d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80087d2:	7bfa      	ldrb	r2, [r7, #15]
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	3318      	adds	r3, #24
 80087e2:	2200      	movs	r2, #0
 80087e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087e6:	7bfa      	ldrb	r2, [r7, #15]
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	331c      	adds	r3, #28
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087fa:	7bfa      	ldrb	r2, [r7, #15]
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	00db      	lsls	r3, r3, #3
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	3320      	adds	r3, #32
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800880e:	7bfa      	ldrb	r2, [r7, #15]
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3324      	adds	r3, #36	@ 0x24
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	3301      	adds	r3, #1
 8008826:	73fb      	strb	r3, [r7, #15]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	791b      	ldrb	r3, [r3, #4]
 800882c:	7bfa      	ldrb	r2, [r7, #15]
 800882e:	429a      	cmp	r2, r3
 8008830:	d3af      	bcc.n	8008792 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
 8008836:	e044      	b.n	80088c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008838:	7bfa      	ldrb	r2, [r7, #15]
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800884e:	7bfa      	ldrb	r2, [r7, #15]
 8008850:	6879      	ldr	r1, [r7, #4]
 8008852:	4613      	mov	r3, r2
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	440b      	add	r3, r1
 800885c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008860:	7bfa      	ldrb	r2, [r7, #15]
 8008862:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008864:	7bfa      	ldrb	r2, [r7, #15]
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4613      	mov	r3, r2
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	440b      	add	r3, r1
 8008872:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800887a:	7bfa      	ldrb	r2, [r7, #15]
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008890:	7bfa      	ldrb	r2, [r7, #15]
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4613      	mov	r3, r2
 8008896:	00db      	lsls	r3, r3, #3
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80088a6:	7bfa      	ldrb	r2, [r7, #15]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	3301      	adds	r3, #1
 80088c0:	73fb      	strb	r3, [r7, #15]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	791b      	ldrb	r3, [r3, #4]
 80088c6:	7bfa      	ldrb	r2, [r7, #15]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d3b5      	bcc.n	8008838 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7c1a      	ldrb	r2, [r3, #16]
 80088d4:	f88d 2000 	strb.w	r2, [sp]
 80088d8:	3304      	adds	r3, #4
 80088da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088dc:	f005 f91e 	bl	800db1c <USB_DevInit>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2202      	movs	r2, #2
 80088ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e013      	b.n	800891a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7b1b      	ldrb	r3, [r3, #12]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d102      	bne.n	800890e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f80b 	bl	8008924 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f005 fad9 	bl	800deca <USB_DevDisconnect>

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008952:	4b05      	ldr	r3, [pc, #20]	@ (8008968 <HAL_PCDEx_ActivateLPM+0x44>)
 8008954:	4313      	orrs	r3, r2
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	10000003 	.word	0x10000003

0800896c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008976:	4b23      	ldr	r3, [pc, #140]	@ (8008a04 <HAL_PWREx_EnableOverDrive+0x98>)
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	4a22      	ldr	r2, [pc, #136]	@ (8008a04 <HAL_PWREx_EnableOverDrive+0x98>)
 800897c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008980:	6413      	str	r3, [r2, #64]	@ 0x40
 8008982:	4b20      	ldr	r3, [pc, #128]	@ (8008a04 <HAL_PWREx_EnableOverDrive+0x98>)
 8008984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800898e:	4b1e      	ldr	r3, [pc, #120]	@ (8008a08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a1d      	ldr	r2, [pc, #116]	@ (8008a08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008998:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800899a:	f7fe fb35 	bl	8007008 <HAL_GetTick>
 800899e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80089a0:	e009      	b.n	80089b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80089a2:	f7fe fb31 	bl	8007008 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089b0:	d901      	bls.n	80089b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e022      	b.n	80089fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80089b6:	4b14      	ldr	r3, [pc, #80]	@ (8008a08 <HAL_PWREx_EnableOverDrive+0x9c>)
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089c2:	d1ee      	bne.n	80089a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80089c4:	4b10      	ldr	r3, [pc, #64]	@ (8008a08 <HAL_PWREx_EnableOverDrive+0x9c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a0f      	ldr	r2, [pc, #60]	@ (8008a08 <HAL_PWREx_EnableOverDrive+0x9c>)
 80089ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089d0:	f7fe fb1a 	bl	8007008 <HAL_GetTick>
 80089d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80089d6:	e009      	b.n	80089ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80089d8:	f7fe fb16 	bl	8007008 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089e6:	d901      	bls.n	80089ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e007      	b.n	80089fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80089ec:	4b06      	ldr	r3, [pc, #24]	@ (8008a08 <HAL_PWREx_EnableOverDrive+0x9c>)
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089f8:	d1ee      	bne.n	80089d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	40023800 	.word	0x40023800
 8008a08:	40007000 	.word	0x40007000

08008a0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008a14:	2300      	movs	r3, #0
 8008a16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e291      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 8087 	beq.w	8008b3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a30:	4b96      	ldr	r3, [pc, #600]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f003 030c 	and.w	r3, r3, #12
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d00c      	beq.n	8008a56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a3c:	4b93      	ldr	r3, [pc, #588]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 030c 	and.w	r3, r3, #12
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d112      	bne.n	8008a6e <HAL_RCC_OscConfig+0x62>
 8008a48:	4b90      	ldr	r3, [pc, #576]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a54:	d10b      	bne.n	8008a6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a56:	4b8d      	ldr	r3, [pc, #564]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d06c      	beq.n	8008b3c <HAL_RCC_OscConfig+0x130>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d168      	bne.n	8008b3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e26b      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a76:	d106      	bne.n	8008a86 <HAL_RCC_OscConfig+0x7a>
 8008a78:	4b84      	ldr	r3, [pc, #528]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a83      	ldr	r2, [pc, #524]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	e02e      	b.n	8008ae4 <HAL_RCC_OscConfig+0xd8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10c      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x9c>
 8008a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a7e      	ldr	r2, [pc, #504]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a7b      	ldr	r2, [pc, #492]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	e01d      	b.n	8008ae4 <HAL_RCC_OscConfig+0xd8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ab0:	d10c      	bne.n	8008acc <HAL_RCC_OscConfig+0xc0>
 8008ab2:	4b76      	ldr	r3, [pc, #472]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a75      	ldr	r2, [pc, #468]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	4b73      	ldr	r3, [pc, #460]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a72      	ldr	r2, [pc, #456]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	e00b      	b.n	8008ae4 <HAL_RCC_OscConfig+0xd8>
 8008acc:	4b6f      	ldr	r3, [pc, #444]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a6e      	ldr	r2, [pc, #440]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a6b      	ldr	r2, [pc, #428]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d013      	beq.n	8008b14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aec:	f7fe fa8c 	bl	8007008 <HAL_GetTick>
 8008af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008af4:	f7fe fa88 	bl	8007008 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b64      	cmp	r3, #100	@ 0x64
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e21f      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b06:	4b61      	ldr	r3, [pc, #388]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f0      	beq.n	8008af4 <HAL_RCC_OscConfig+0xe8>
 8008b12:	e014      	b.n	8008b3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b14:	f7fe fa78 	bl	8007008 <HAL_GetTick>
 8008b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b1a:	e008      	b.n	8008b2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b1c:	f7fe fa74 	bl	8007008 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b64      	cmp	r3, #100	@ 0x64
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e20b      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b2e:	4b57      	ldr	r3, [pc, #348]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1f0      	bne.n	8008b1c <HAL_RCC_OscConfig+0x110>
 8008b3a:	e000      	b.n	8008b3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d069      	beq.n	8008c1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b4a:	4b50      	ldr	r3, [pc, #320]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 030c 	and.w	r3, r3, #12
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b56:	4b4d      	ldr	r3, [pc, #308]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 030c 	and.w	r3, r3, #12
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d11c      	bne.n	8008b9c <HAL_RCC_OscConfig+0x190>
 8008b62:	4b4a      	ldr	r3, [pc, #296]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d116      	bne.n	8008b9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b6e:	4b47      	ldr	r3, [pc, #284]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <HAL_RCC_OscConfig+0x17a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d001      	beq.n	8008b86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e1df      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b86:	4b41      	ldr	r3, [pc, #260]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	493d      	ldr	r1, [pc, #244]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b9a:	e040      	b.n	8008c1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d023      	beq.n	8008bec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ba4:	4b39      	ldr	r3, [pc, #228]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a38      	ldr	r2, [pc, #224]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008baa:	f043 0301 	orr.w	r3, r3, #1
 8008bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb0:	f7fe fa2a 	bl	8007008 <HAL_GetTick>
 8008bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bb6:	e008      	b.n	8008bca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bb8:	f7fe fa26 	bl	8007008 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d901      	bls.n	8008bca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e1bd      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bca:	4b30      	ldr	r3, [pc, #192]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0f0      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	4929      	ldr	r1, [pc, #164]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	600b      	str	r3, [r1, #0]
 8008bea:	e018      	b.n	8008c1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bec:	4b27      	ldr	r3, [pc, #156]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a26      	ldr	r2, [pc, #152]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008bf2:	f023 0301 	bic.w	r3, r3, #1
 8008bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf8:	f7fe fa06 	bl	8007008 <HAL_GetTick>
 8008bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c00:	f7fe fa02 	bl	8007008 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e199      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c12:	4b1e      	ldr	r3, [pc, #120]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1f0      	bne.n	8008c00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d038      	beq.n	8008c9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d019      	beq.n	8008c66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c32:	4b16      	ldr	r3, [pc, #88]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c36:	4a15      	ldr	r2, [pc, #84]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008c38:	f043 0301 	orr.w	r3, r3, #1
 8008c3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c3e:	f7fe f9e3 	bl	8007008 <HAL_GetTick>
 8008c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c44:	e008      	b.n	8008c58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c46:	f7fe f9df 	bl	8007008 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d901      	bls.n	8008c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e176      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c58:	4b0c      	ldr	r3, [pc, #48]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0f0      	beq.n	8008c46 <HAL_RCC_OscConfig+0x23a>
 8008c64:	e01a      	b.n	8008c9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c66:	4b09      	ldr	r3, [pc, #36]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c6a:	4a08      	ldr	r2, [pc, #32]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008c6c:	f023 0301 	bic.w	r3, r3, #1
 8008c70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c72:	f7fe f9c9 	bl	8007008 <HAL_GetTick>
 8008c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c78:	e00a      	b.n	8008c90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c7a:	f7fe f9c5 	bl	8007008 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d903      	bls.n	8008c90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e15c      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
 8008c8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c90:	4b91      	ldr	r3, [pc, #580]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1ee      	bne.n	8008c7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80a4 	beq.w	8008df2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008caa:	4b8b      	ldr	r3, [pc, #556]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10d      	bne.n	8008cd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cb6:	4b88      	ldr	r3, [pc, #544]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	4a87      	ldr	r2, [pc, #540]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8008cc2:	4b85      	ldr	r3, [pc, #532]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cca:	60bb      	str	r3, [r7, #8]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cd2:	4b82      	ldr	r3, [pc, #520]	@ (8008edc <HAL_RCC_OscConfig+0x4d0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d118      	bne.n	8008d10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008cde:	4b7f      	ldr	r3, [pc, #508]	@ (8008edc <HAL_RCC_OscConfig+0x4d0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8008edc <HAL_RCC_OscConfig+0x4d0>)
 8008ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cea:	f7fe f98d 	bl	8007008 <HAL_GetTick>
 8008cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cf0:	e008      	b.n	8008d04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cf2:	f7fe f989 	bl	8007008 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b64      	cmp	r3, #100	@ 0x64
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e120      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d04:	4b75      	ldr	r3, [pc, #468]	@ (8008edc <HAL_RCC_OscConfig+0x4d0>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d106      	bne.n	8008d26 <HAL_RCC_OscConfig+0x31a>
 8008d18:	4b6f      	ldr	r3, [pc, #444]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d1e:	f043 0301 	orr.w	r3, r3, #1
 8008d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d24:	e02d      	b.n	8008d82 <HAL_RCC_OscConfig+0x376>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10c      	bne.n	8008d48 <HAL_RCC_OscConfig+0x33c>
 8008d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d32:	4a69      	ldr	r2, [pc, #420]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d3a:	4b67      	ldr	r3, [pc, #412]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d3e:	4a66      	ldr	r2, [pc, #408]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d40:	f023 0304 	bic.w	r3, r3, #4
 8008d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d46:	e01c      	b.n	8008d82 <HAL_RCC_OscConfig+0x376>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b05      	cmp	r3, #5
 8008d4e:	d10c      	bne.n	8008d6a <HAL_RCC_OscConfig+0x35e>
 8008d50:	4b61      	ldr	r3, [pc, #388]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d54:	4a60      	ldr	r2, [pc, #384]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d56:	f043 0304 	orr.w	r3, r3, #4
 8008d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d60:	4a5d      	ldr	r2, [pc, #372]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d62:	f043 0301 	orr.w	r3, r3, #1
 8008d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d68:	e00b      	b.n	8008d82 <HAL_RCC_OscConfig+0x376>
 8008d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d76:	4b58      	ldr	r3, [pc, #352]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d7a:	4a57      	ldr	r2, [pc, #348]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008d7c:	f023 0304 	bic.w	r3, r3, #4
 8008d80:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d015      	beq.n	8008db6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d8a:	f7fe f93d 	bl	8007008 <HAL_GetTick>
 8008d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d90:	e00a      	b.n	8008da8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d92:	f7fe f939 	bl	8007008 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d901      	bls.n	8008da8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e0ce      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008da8:	4b4b      	ldr	r3, [pc, #300]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0ee      	beq.n	8008d92 <HAL_RCC_OscConfig+0x386>
 8008db4:	e014      	b.n	8008de0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db6:	f7fe f927 	bl	8007008 <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dbc:	e00a      	b.n	8008dd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dbe:	f7fe f923 	bl	8007008 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e0b8      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dd4:	4b40      	ldr	r3, [pc, #256]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1ee      	bne.n	8008dbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d105      	bne.n	8008df2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008de6:	4b3c      	ldr	r3, [pc, #240]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dea:	4a3b      	ldr	r2, [pc, #236]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008df0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80a4 	beq.w	8008f44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008dfc:	4b36      	ldr	r3, [pc, #216]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f003 030c 	and.w	r3, r3, #12
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d06b      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d149      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e10:	4b31      	ldr	r3, [pc, #196]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a30      	ldr	r2, [pc, #192]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1c:	f7fe f8f4 	bl	8007008 <HAL_GetTick>
 8008e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e22:	e008      	b.n	8008e36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e24:	f7fe f8f0 	bl	8007008 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d901      	bls.n	8008e36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e087      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e36:	4b28      	ldr	r3, [pc, #160]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1f0      	bne.n	8008e24 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69da      	ldr	r2, [r3, #28]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e50:	019b      	lsls	r3, r3, #6
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	085b      	lsrs	r3, r3, #1
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	041b      	lsls	r3, r3, #16
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e64:	061b      	lsls	r3, r3, #24
 8008e66:	4313      	orrs	r3, r2
 8008e68:	4a1b      	ldr	r2, [pc, #108]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008e6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e6e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e70:	4b19      	ldr	r3, [pc, #100]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a18      	ldr	r2, [pc, #96]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7c:	f7fe f8c4 	bl	8007008 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e84:	f7fe f8c0 	bl	8007008 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e057      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e96:	4b10      	ldr	r3, [pc, #64]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0f0      	beq.n	8008e84 <HAL_RCC_OscConfig+0x478>
 8008ea2:	e04f      	b.n	8008f44 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb0:	f7fe f8aa 	bl	8007008 <HAL_GetTick>
 8008eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb8:	f7fe f8a6 	bl	8007008 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e03d      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eca:	4b03      	ldr	r3, [pc, #12]	@ (8008ed8 <HAL_RCC_OscConfig+0x4cc>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f0      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x4ac>
 8008ed6:	e035      	b.n	8008f44 <HAL_RCC_OscConfig+0x538>
 8008ed8:	40023800 	.word	0x40023800
 8008edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8008f50 <HAL_RCC_OscConfig+0x544>)
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d028      	beq.n	8008f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d121      	bne.n	8008f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d11a      	bne.n	8008f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008f10:	4013      	ands	r3, r2
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d111      	bne.n	8008f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f26:	085b      	lsrs	r3, r3, #1
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d001      	beq.n	8008f44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e000      	b.n	8008f46 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40023800 	.word	0x40023800

08008f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0d0      	b.n	800910e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8009118 <HAL_RCC_ClockConfig+0x1c4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d910      	bls.n	8008f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f7a:	4b67      	ldr	r3, [pc, #412]	@ (8009118 <HAL_RCC_ClockConfig+0x1c4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f023 020f 	bic.w	r2, r3, #15
 8008f82:	4965      	ldr	r1, [pc, #404]	@ (8009118 <HAL_RCC_ClockConfig+0x1c4>)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8a:	4b63      	ldr	r3, [pc, #396]	@ (8009118 <HAL_RCC_ClockConfig+0x1c4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d001      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e0b8      	b.n	800910e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d020      	beq.n	8008fea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fb4:	4b59      	ldr	r3, [pc, #356]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	4a58      	ldr	r2, [pc, #352]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8008fba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008fbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fcc:	4b53      	ldr	r3, [pc, #332]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	4a52      	ldr	r2, [pc, #328]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8008fd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008fd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fd8:	4b50      	ldr	r3, [pc, #320]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	494d      	ldr	r1, [pc, #308]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d040      	beq.n	8009078 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d107      	bne.n	800900e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ffe:	4b47      	ldr	r3, [pc, #284]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d115      	bne.n	8009036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e07f      	b.n	800910e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d107      	bne.n	8009026 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009016:	4b41      	ldr	r3, [pc, #260]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e073      	b.n	800910e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009026:	4b3d      	ldr	r3, [pc, #244]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e06b      	b.n	800910e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009036:	4b39      	ldr	r3, [pc, #228]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f023 0203 	bic.w	r2, r3, #3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4936      	ldr	r1, [pc, #216]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8009044:	4313      	orrs	r3, r2
 8009046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009048:	f7fd ffde 	bl	8007008 <HAL_GetTick>
 800904c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800904e:	e00a      	b.n	8009066 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009050:	f7fd ffda 	bl	8007008 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800905e:	4293      	cmp	r3, r2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e053      	b.n	800910e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009066:	4b2d      	ldr	r3, [pc, #180]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f003 020c 	and.w	r2, r3, #12
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	429a      	cmp	r2, r3
 8009076:	d1eb      	bne.n	8009050 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009078:	4b27      	ldr	r3, [pc, #156]	@ (8009118 <HAL_RCC_ClockConfig+0x1c4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d210      	bcs.n	80090a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009086:	4b24      	ldr	r3, [pc, #144]	@ (8009118 <HAL_RCC_ClockConfig+0x1c4>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f023 020f 	bic.w	r2, r3, #15
 800908e:	4922      	ldr	r1, [pc, #136]	@ (8009118 <HAL_RCC_ClockConfig+0x1c4>)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	4313      	orrs	r3, r2
 8009094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009096:	4b20      	ldr	r3, [pc, #128]	@ (8009118 <HAL_RCC_ClockConfig+0x1c4>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d001      	beq.n	80090a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e032      	b.n	800910e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d008      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090b4:	4b19      	ldr	r3, [pc, #100]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	4916      	ldr	r1, [pc, #88]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0308 	and.w	r3, r3, #8
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80090d2:	4b12      	ldr	r3, [pc, #72]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	490e      	ldr	r1, [pc, #56]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090e6:	f000 f821 	bl	800912c <HAL_RCC_GetSysClockFreq>
 80090ea:	4602      	mov	r2, r0
 80090ec:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <HAL_RCC_ClockConfig+0x1c8>)
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	091b      	lsrs	r3, r3, #4
 80090f2:	f003 030f 	and.w	r3, r3, #15
 80090f6:	490a      	ldr	r1, [pc, #40]	@ (8009120 <HAL_RCC_ClockConfig+0x1cc>)
 80090f8:	5ccb      	ldrb	r3, [r1, r3]
 80090fa:	fa22 f303 	lsr.w	r3, r2, r3
 80090fe:	4a09      	ldr	r2, [pc, #36]	@ (8009124 <HAL_RCC_ClockConfig+0x1d0>)
 8009100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009102:	4b09      	ldr	r3, [pc, #36]	@ (8009128 <HAL_RCC_ClockConfig+0x1d4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f7fd fd1e 	bl	8006b48 <HAL_InitTick>

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	40023c00 	.word	0x40023c00
 800911c:	40023800 	.word	0x40023800
 8009120:	08018b58 	.word	0x08018b58
 8009124:	20000054 	.word	0x20000054
 8009128:	20000058 	.word	0x20000058

0800912c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800912c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009130:	b094      	sub	sp, #80	@ 0x50
 8009132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	647b      	str	r3, [r7, #68]	@ 0x44
 8009138:	2300      	movs	r3, #0
 800913a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800913c:	2300      	movs	r3, #0
 800913e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009144:	4b79      	ldr	r3, [pc, #484]	@ (800932c <HAL_RCC_GetSysClockFreq+0x200>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f003 030c 	and.w	r3, r3, #12
 800914c:	2b08      	cmp	r3, #8
 800914e:	d00d      	beq.n	800916c <HAL_RCC_GetSysClockFreq+0x40>
 8009150:	2b08      	cmp	r3, #8
 8009152:	f200 80e1 	bhi.w	8009318 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <HAL_RCC_GetSysClockFreq+0x34>
 800915a:	2b04      	cmp	r3, #4
 800915c:	d003      	beq.n	8009166 <HAL_RCC_GetSysClockFreq+0x3a>
 800915e:	e0db      	b.n	8009318 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009160:	4b73      	ldr	r3, [pc, #460]	@ (8009330 <HAL_RCC_GetSysClockFreq+0x204>)
 8009162:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009164:	e0db      	b.n	800931e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009166:	4b73      	ldr	r3, [pc, #460]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x208>)
 8009168:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800916a:	e0d8      	b.n	800931e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800916c:	4b6f      	ldr	r3, [pc, #444]	@ (800932c <HAL_RCC_GetSysClockFreq+0x200>)
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009174:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009176:	4b6d      	ldr	r3, [pc, #436]	@ (800932c <HAL_RCC_GetSysClockFreq+0x200>)
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d063      	beq.n	800924a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009182:	4b6a      	ldr	r3, [pc, #424]	@ (800932c <HAL_RCC_GetSysClockFreq+0x200>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	099b      	lsrs	r3, r3, #6
 8009188:	2200      	movs	r2, #0
 800918a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800918c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009194:	633b      	str	r3, [r7, #48]	@ 0x30
 8009196:	2300      	movs	r3, #0
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34
 800919a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800919e:	4622      	mov	r2, r4
 80091a0:	462b      	mov	r3, r5
 80091a2:	f04f 0000 	mov.w	r0, #0
 80091a6:	f04f 0100 	mov.w	r1, #0
 80091aa:	0159      	lsls	r1, r3, #5
 80091ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091b0:	0150      	lsls	r0, r2, #5
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4621      	mov	r1, r4
 80091b8:	1a51      	subs	r1, r2, r1
 80091ba:	6139      	str	r1, [r7, #16]
 80091bc:	4629      	mov	r1, r5
 80091be:	eb63 0301 	sbc.w	r3, r3, r1
 80091c2:	617b      	str	r3, [r7, #20]
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091d0:	4659      	mov	r1, fp
 80091d2:	018b      	lsls	r3, r1, #6
 80091d4:	4651      	mov	r1, sl
 80091d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091da:	4651      	mov	r1, sl
 80091dc:	018a      	lsls	r2, r1, #6
 80091de:	4651      	mov	r1, sl
 80091e0:	ebb2 0801 	subs.w	r8, r2, r1
 80091e4:	4659      	mov	r1, fp
 80091e6:	eb63 0901 	sbc.w	r9, r3, r1
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091fe:	4690      	mov	r8, r2
 8009200:	4699      	mov	r9, r3
 8009202:	4623      	mov	r3, r4
 8009204:	eb18 0303 	adds.w	r3, r8, r3
 8009208:	60bb      	str	r3, [r7, #8]
 800920a:	462b      	mov	r3, r5
 800920c:	eb49 0303 	adc.w	r3, r9, r3
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	f04f 0300 	mov.w	r3, #0
 800921a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800921e:	4629      	mov	r1, r5
 8009220:	024b      	lsls	r3, r1, #9
 8009222:	4621      	mov	r1, r4
 8009224:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009228:	4621      	mov	r1, r4
 800922a:	024a      	lsls	r2, r1, #9
 800922c:	4610      	mov	r0, r2
 800922e:	4619      	mov	r1, r3
 8009230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009232:	2200      	movs	r2, #0
 8009234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800923c:	f7f7 fd06 	bl	8000c4c <__aeabi_uldivmod>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4613      	mov	r3, r2
 8009246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009248:	e058      	b.n	80092fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800924a:	4b38      	ldr	r3, [pc, #224]	@ (800932c <HAL_RCC_GetSysClockFreq+0x200>)
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	099b      	lsrs	r3, r3, #6
 8009250:	2200      	movs	r2, #0
 8009252:	4618      	mov	r0, r3
 8009254:	4611      	mov	r1, r2
 8009256:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800925a:	623b      	str	r3, [r7, #32]
 800925c:	2300      	movs	r3, #0
 800925e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009260:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009264:	4642      	mov	r2, r8
 8009266:	464b      	mov	r3, r9
 8009268:	f04f 0000 	mov.w	r0, #0
 800926c:	f04f 0100 	mov.w	r1, #0
 8009270:	0159      	lsls	r1, r3, #5
 8009272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009276:	0150      	lsls	r0, r2, #5
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4641      	mov	r1, r8
 800927e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009282:	4649      	mov	r1, r9
 8009284:	eb63 0b01 	sbc.w	fp, r3, r1
 8009288:	f04f 0200 	mov.w	r2, #0
 800928c:	f04f 0300 	mov.w	r3, #0
 8009290:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009294:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009298:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800929c:	ebb2 040a 	subs.w	r4, r2, sl
 80092a0:	eb63 050b 	sbc.w	r5, r3, fp
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f04f 0300 	mov.w	r3, #0
 80092ac:	00eb      	lsls	r3, r5, #3
 80092ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092b2:	00e2      	lsls	r2, r4, #3
 80092b4:	4614      	mov	r4, r2
 80092b6:	461d      	mov	r5, r3
 80092b8:	4643      	mov	r3, r8
 80092ba:	18e3      	adds	r3, r4, r3
 80092bc:	603b      	str	r3, [r7, #0]
 80092be:	464b      	mov	r3, r9
 80092c0:	eb45 0303 	adc.w	r3, r5, r3
 80092c4:	607b      	str	r3, [r7, #4]
 80092c6:	f04f 0200 	mov.w	r2, #0
 80092ca:	f04f 0300 	mov.w	r3, #0
 80092ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092d2:	4629      	mov	r1, r5
 80092d4:	028b      	lsls	r3, r1, #10
 80092d6:	4621      	mov	r1, r4
 80092d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092dc:	4621      	mov	r1, r4
 80092de:	028a      	lsls	r2, r1, #10
 80092e0:	4610      	mov	r0, r2
 80092e2:	4619      	mov	r1, r3
 80092e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092e6:	2200      	movs	r2, #0
 80092e8:	61bb      	str	r3, [r7, #24]
 80092ea:	61fa      	str	r2, [r7, #28]
 80092ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092f0:	f7f7 fcac 	bl	8000c4c <__aeabi_uldivmod>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4613      	mov	r3, r2
 80092fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80092fc:	4b0b      	ldr	r3, [pc, #44]	@ (800932c <HAL_RCC_GetSysClockFreq+0x200>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	0c1b      	lsrs	r3, r3, #16
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	3301      	adds	r3, #1
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800930c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800930e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009310:	fbb2 f3f3 	udiv	r3, r2, r3
 8009314:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009316:	e002      	b.n	800931e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009318:	4b05      	ldr	r3, [pc, #20]	@ (8009330 <HAL_RCC_GetSysClockFreq+0x204>)
 800931a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800931c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800931e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009320:	4618      	mov	r0, r3
 8009322:	3750      	adds	r7, #80	@ 0x50
 8009324:	46bd      	mov	sp, r7
 8009326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800932a:	bf00      	nop
 800932c:	40023800 	.word	0x40023800
 8009330:	00f42400 	.word	0x00f42400
 8009334:	007a1200 	.word	0x007a1200

08009338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800933c:	4b03      	ldr	r3, [pc, #12]	@ (800934c <HAL_RCC_GetHCLKFreq+0x14>)
 800933e:	681b      	ldr	r3, [r3, #0]
}
 8009340:	4618      	mov	r0, r3
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20000054 	.word	0x20000054

08009350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009354:	f7ff fff0 	bl	8009338 <HAL_RCC_GetHCLKFreq>
 8009358:	4602      	mov	r2, r0
 800935a:	4b05      	ldr	r3, [pc, #20]	@ (8009370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	0a9b      	lsrs	r3, r3, #10
 8009360:	f003 0307 	and.w	r3, r3, #7
 8009364:	4903      	ldr	r1, [pc, #12]	@ (8009374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009366:	5ccb      	ldrb	r3, [r1, r3]
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800936c:	4618      	mov	r0, r3
 800936e:	bd80      	pop	{r7, pc}
 8009370:	40023800 	.word	0x40023800
 8009374:	08018b68 	.word	0x08018b68

08009378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800937c:	f7ff ffdc 	bl	8009338 <HAL_RCC_GetHCLKFreq>
 8009380:	4602      	mov	r2, r0
 8009382:	4b05      	ldr	r3, [pc, #20]	@ (8009398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	0b5b      	lsrs	r3, r3, #13
 8009388:	f003 0307 	and.w	r3, r3, #7
 800938c:	4903      	ldr	r1, [pc, #12]	@ (800939c <HAL_RCC_GetPCLK2Freq+0x24>)
 800938e:	5ccb      	ldrb	r3, [r1, r3]
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009394:	4618      	mov	r0, r3
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40023800 	.word	0x40023800
 800939c:	08018b68 	.word	0x08018b68

080093a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	220f      	movs	r2, #15
 80093ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093b0:	4b12      	ldr	r3, [pc, #72]	@ (80093fc <HAL_RCC_GetClockConfig+0x5c>)
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f003 0203 	and.w	r2, r3, #3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093bc:	4b0f      	ldr	r3, [pc, #60]	@ (80093fc <HAL_RCC_GetClockConfig+0x5c>)
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80093c8:	4b0c      	ldr	r3, [pc, #48]	@ (80093fc <HAL_RCC_GetClockConfig+0x5c>)
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80093d4:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <HAL_RCC_GetClockConfig+0x5c>)
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	08db      	lsrs	r3, r3, #3
 80093da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093e2:	4b07      	ldr	r3, [pc, #28]	@ (8009400 <HAL_RCC_GetClockConfig+0x60>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 020f 	and.w	r2, r3, #15
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	601a      	str	r2, [r3, #0]
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	40023800 	.word	0x40023800
 8009400:	40023c00 	.word	0x40023c00

08009404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d012      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800942c:	4b69      	ldr	r3, [pc, #420]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	4a68      	ldr	r2, [pc, #416]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009432:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009436:	6093      	str	r3, [r2, #8]
 8009438:	4b66      	ldr	r3, [pc, #408]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009440:	4964      	ldr	r1, [pc, #400]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009442:	4313      	orrs	r3, r2
 8009444:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800944e:	2301      	movs	r3, #1
 8009450:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d017      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800945e:	4b5d      	ldr	r3, [pc, #372]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009464:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800946c:	4959      	ldr	r1, [pc, #356]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800947c:	d101      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800947e:	2301      	movs	r3, #1
 8009480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800948a:	2301      	movs	r3, #1
 800948c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d017      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800949a:	4b4e      	ldr	r3, [pc, #312]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800949c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a8:	494a      	ldr	r1, [pc, #296]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094b8:	d101      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80094ba:	2301      	movs	r3, #1
 80094bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80094c6:	2301      	movs	r3, #1
 80094c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 808b 	beq.w	80095fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80094e8:	4b3a      	ldr	r3, [pc, #232]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ec:	4a39      	ldr	r2, [pc, #228]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80094f4:	4b37      	ldr	r3, [pc, #220]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094fc:	60bb      	str	r3, [r7, #8]
 80094fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009500:	4b35      	ldr	r3, [pc, #212]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a34      	ldr	r2, [pc, #208]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800950a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800950c:	f7fd fd7c 	bl	8007008 <HAL_GetTick>
 8009510:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009512:	e008      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009514:	f7fd fd78 	bl	8007008 <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	2b64      	cmp	r3, #100	@ 0x64
 8009520:	d901      	bls.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e357      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009526:	4b2c      	ldr	r3, [pc, #176]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f0      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009532:	4b28      	ldr	r3, [pc, #160]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800953a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d035      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	429a      	cmp	r2, r3
 800954e:	d02e      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009550:	4b20      	ldr	r3, [pc, #128]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009558:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800955a:	4b1e      	ldr	r3, [pc, #120]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800955c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800955e:	4a1d      	ldr	r2, [pc, #116]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009564:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009566:	4b1b      	ldr	r3, [pc, #108]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800956a:	4a1a      	ldr	r2, [pc, #104]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800956c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009570:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009572:	4a18      	ldr	r2, [pc, #96]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009578:	4b16      	ldr	r3, [pc, #88]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800957a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	d114      	bne.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009584:	f7fd fd40 	bl	8007008 <HAL_GetTick>
 8009588:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800958a:	e00a      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800958c:	f7fd fd3c 	bl	8007008 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800959a:	4293      	cmp	r3, r2
 800959c:	d901      	bls.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e319      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095a2:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0ee      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095ba:	d111      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80095bc:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80095c8:	4b04      	ldr	r3, [pc, #16]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80095ca:	400b      	ands	r3, r1
 80095cc:	4901      	ldr	r1, [pc, #4]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	608b      	str	r3, [r1, #8]
 80095d2:	e00b      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80095d4:	40023800 	.word	0x40023800
 80095d8:	40007000 	.word	0x40007000
 80095dc:	0ffffcff 	.word	0x0ffffcff
 80095e0:	4baa      	ldr	r3, [pc, #680]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	4aa9      	ldr	r2, [pc, #676]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80095ea:	6093      	str	r3, [r2, #8]
 80095ec:	4ba7      	ldr	r3, [pc, #668]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f8:	49a4      	ldr	r1, [pc, #656]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0310 	and.w	r3, r3, #16
 8009606:	2b00      	cmp	r3, #0
 8009608:	d010      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800960a:	4ba0      	ldr	r3, [pc, #640]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800960c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009610:	4a9e      	ldr	r2, [pc, #632]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009616:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800961a:	4b9c      	ldr	r3, [pc, #624]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800961c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009624:	4999      	ldr	r1, [pc, #612]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009626:	4313      	orrs	r3, r2
 8009628:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00a      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009638:	4b94      	ldr	r3, [pc, #592]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800963a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800963e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009646:	4991      	ldr	r1, [pc, #580]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009648:	4313      	orrs	r3, r2
 800964a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800965a:	4b8c      	ldr	r3, [pc, #560]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800965c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009660:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009668:	4988      	ldr	r1, [pc, #544]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800966a:	4313      	orrs	r3, r2
 800966c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00a      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800967c:	4b83      	ldr	r3, [pc, #524]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009682:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800968a:	4980      	ldr	r1, [pc, #512]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800968c:	4313      	orrs	r3, r2
 800968e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800969e:	4b7b      	ldr	r3, [pc, #492]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ac:	4977      	ldr	r1, [pc, #476]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00a      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096c0:	4b72      	ldr	r3, [pc, #456]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096c6:	f023 0203 	bic.w	r2, r3, #3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ce:	496f      	ldr	r1, [pc, #444]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00a      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096e2:	4b6a      	ldr	r3, [pc, #424]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e8:	f023 020c 	bic.w	r2, r3, #12
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096f0:	4966      	ldr	r1, [pc, #408]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00a      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009704:	4b61      	ldr	r3, [pc, #388]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800970a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009712:	495e      	ldr	r1, [pc, #376]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009714:	4313      	orrs	r3, r2
 8009716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009726:	4b59      	ldr	r3, [pc, #356]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800972c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009734:	4955      	ldr	r1, [pc, #340]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009736:	4313      	orrs	r3, r2
 8009738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00a      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009748:	4b50      	ldr	r3, [pc, #320]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800974e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009756:	494d      	ldr	r1, [pc, #308]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009758:	4313      	orrs	r3, r2
 800975a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800976a:	4b48      	ldr	r3, [pc, #288]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800976c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009770:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009778:	4944      	ldr	r1, [pc, #272]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800977a:	4313      	orrs	r3, r2
 800977c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800978c:	4b3f      	ldr	r3, [pc, #252]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800978e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009792:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800979a:	493c      	ldr	r1, [pc, #240]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800979c:	4313      	orrs	r3, r2
 800979e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80097ae:	4b37      	ldr	r3, [pc, #220]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097bc:	4933      	ldr	r1, [pc, #204]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097d0:	4b2e      	ldr	r3, [pc, #184]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097de:	492b      	ldr	r1, [pc, #172]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d011      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80097f2:	4b26      	ldr	r3, [pc, #152]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009800:	4922      	ldr	r1, [pc, #136]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009802:	4313      	orrs	r3, r2
 8009804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800980c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009810:	d101      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009812:	2301      	movs	r3, #1
 8009814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0308 	and.w	r3, r3, #8
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009822:	2301      	movs	r3, #1
 8009824:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009832:	4b16      	ldr	r3, [pc, #88]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009838:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009840:	4912      	ldr	r1, [pc, #72]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009842:	4313      	orrs	r3, r2
 8009844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009854:	4b0d      	ldr	r3, [pc, #52]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800985a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009864:	4909      	ldr	r1, [pc, #36]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009866:	4313      	orrs	r3, r2
 8009868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d006      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 80d9 	beq.w	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009880:	4b02      	ldr	r3, [pc, #8]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a01      	ldr	r2, [pc, #4]	@ (800988c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009886:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800988a:	e001      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800988c:	40023800 	.word	0x40023800
 8009890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009892:	f7fd fbb9 	bl	8007008 <HAL_GetTick>
 8009896:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009898:	e008      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800989a:	f7fd fbb5 	bl	8007008 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b64      	cmp	r3, #100	@ 0x64
 80098a6:	d901      	bls.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e194      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098ac:	4b6c      	ldr	r3, [pc, #432]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1f0      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d021      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11d      	bne.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80098cc:	4b64      	ldr	r3, [pc, #400]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098d2:	0c1b      	lsrs	r3, r3, #16
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80098da:	4b61      	ldr	r3, [pc, #388]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098e0:	0e1b      	lsrs	r3, r3, #24
 80098e2:	f003 030f 	and.w	r3, r3, #15
 80098e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	019a      	lsls	r2, r3, #6
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	041b      	lsls	r3, r3, #16
 80098f2:	431a      	orrs	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	061b      	lsls	r3, r3, #24
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	071b      	lsls	r3, r3, #28
 8009900:	4957      	ldr	r1, [pc, #348]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009902:	4313      	orrs	r3, r2
 8009904:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d004      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009918:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800991c:	d00a      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009926:	2b00      	cmp	r3, #0
 8009928:	d02e      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009932:	d129      	bne.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009934:	4b4a      	ldr	r3, [pc, #296]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800993a:	0c1b      	lsrs	r3, r3, #16
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009942:	4b47      	ldr	r3, [pc, #284]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009948:	0f1b      	lsrs	r3, r3, #28
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	019a      	lsls	r2, r3, #6
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	041b      	lsls	r3, r3, #16
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	061b      	lsls	r3, r3, #24
 8009962:	431a      	orrs	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	071b      	lsls	r3, r3, #28
 8009968:	493d      	ldr	r1, [pc, #244]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800996a:	4313      	orrs	r3, r2
 800996c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009970:	4b3b      	ldr	r3, [pc, #236]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009976:	f023 021f 	bic.w	r2, r3, #31
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997e:	3b01      	subs	r3, #1
 8009980:	4937      	ldr	r1, [pc, #220]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009982:	4313      	orrs	r3, r2
 8009984:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01d      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009994:	4b32      	ldr	r3, [pc, #200]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800999a:	0e1b      	lsrs	r3, r3, #24
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099a8:	0f1b      	lsrs	r3, r3, #28
 80099aa:	f003 0307 	and.w	r3, r3, #7
 80099ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	019a      	lsls	r2, r3, #6
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	041b      	lsls	r3, r3, #16
 80099bc:	431a      	orrs	r2, r3
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	061b      	lsls	r3, r3, #24
 80099c2:	431a      	orrs	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	071b      	lsls	r3, r3, #28
 80099c8:	4925      	ldr	r1, [pc, #148]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d011      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	019a      	lsls	r2, r3, #6
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	041b      	lsls	r3, r3, #16
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	061b      	lsls	r3, r3, #24
 80099f0:	431a      	orrs	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	071b      	lsls	r3, r3, #28
 80099f8:	4919      	ldr	r1, [pc, #100]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a00:	4b17      	ldr	r3, [pc, #92]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a16      	ldr	r2, [pc, #88]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a0c:	f7fd fafc 	bl	8007008 <HAL_GetTick>
 8009a10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a12:	e008      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009a14:	f7fd faf8 	bl	8007008 <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b64      	cmp	r3, #100	@ 0x64
 8009a20:	d901      	bls.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e0d7      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a26:	4b0e      	ldr	r3, [pc, #56]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f0      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	f040 80cd 	bne.w	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a3a:	4b09      	ldr	r3, [pc, #36]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a08      	ldr	r2, [pc, #32]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a46:	f7fd fadf 	bl	8007008 <HAL_GetTick>
 8009a4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a4c:	e00a      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a4e:	f7fd fadb 	bl	8007008 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b64      	cmp	r3, #100	@ 0x64
 8009a5a:	d903      	bls.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e0ba      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009a60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a64:	4b5e      	ldr	r3, [pc, #376]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a70:	d0ed      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d009      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d02e      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d12a      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009a9a:	4b51      	ldr	r3, [pc, #324]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aa0:	0c1b      	lsrs	r3, r3, #16
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aae:	0f1b      	lsrs	r3, r3, #28
 8009ab0:	f003 0307 	and.w	r3, r3, #7
 8009ab4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	019a      	lsls	r2, r3, #6
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	041b      	lsls	r3, r3, #16
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	061b      	lsls	r3, r3, #24
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	071b      	lsls	r3, r3, #28
 8009ace:	4944      	ldr	r1, [pc, #272]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009ad6:	4b42      	ldr	r3, [pc, #264]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009adc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	021b      	lsls	r3, r3, #8
 8009ae8:	493d      	ldr	r1, [pc, #244]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d022      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b04:	d11d      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b06:	4b36      	ldr	r3, [pc, #216]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b0c:	0e1b      	lsrs	r3, r3, #24
 8009b0e:	f003 030f 	and.w	r3, r3, #15
 8009b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b14:	4b32      	ldr	r3, [pc, #200]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1a:	0f1b      	lsrs	r3, r3, #28
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	019a      	lsls	r2, r3, #6
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	041b      	lsls	r3, r3, #16
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	061b      	lsls	r3, r3, #24
 8009b34:	431a      	orrs	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	071b      	lsls	r3, r3, #28
 8009b3a:	4929      	ldr	r1, [pc, #164]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d028      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b4e:	4b24      	ldr	r3, [pc, #144]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b54:	0e1b      	lsrs	r3, r3, #24
 8009b56:	f003 030f 	and.w	r3, r3, #15
 8009b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009b5c:	4b20      	ldr	r3, [pc, #128]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b62:	0c1b      	lsrs	r3, r3, #16
 8009b64:	f003 0303 	and.w	r3, r3, #3
 8009b68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	019a      	lsls	r2, r3, #6
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	041b      	lsls	r3, r3, #16
 8009b74:	431a      	orrs	r2, r3
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	061b      	lsls	r3, r3, #24
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	071b      	lsls	r3, r3, #28
 8009b82:	4917      	ldr	r1, [pc, #92]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009b8a:	4b15      	ldr	r3, [pc, #84]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b98:	4911      	ldr	r1, [pc, #68]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a0e      	ldr	r2, [pc, #56]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bac:	f7fd fa2c 	bl	8007008 <HAL_GetTick>
 8009bb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009bb2:	e008      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009bb4:	f7fd fa28 	bl	8007008 <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b64      	cmp	r3, #100	@ 0x64
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e007      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009bc6:	4b06      	ldr	r3, [pc, #24]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bd2:	d1ef      	bne.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3720      	adds	r7, #32
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	40023800 	.word	0x40023800

08009be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e09d      	b.n	8009d32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d108      	bne.n	8009c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c06:	d009      	beq.n	8009c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	61da      	str	r2, [r3, #28]
 8009c0e:	e005      	b.n	8009c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7fc f9c0 	bl	8005fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c5c:	d902      	bls.n	8009c64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	e002      	b.n	8009c6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009c72:	d007      	beq.n	8009c84 <HAL_SPI_Init+0xa0>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c7c:	d002      	beq.n	8009c84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009c94:	431a      	orrs	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc6:	ea42 0103 	orr.w	r1, r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	0c1b      	lsrs	r3, r3, #16
 8009ce0:	f003 0204 	and.w	r2, r3, #4
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce8:	f003 0310 	and.w	r3, r3, #16
 8009cec:	431a      	orrs	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009d00:	ea42 0103 	orr.w	r1, r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69da      	ldr	r2, [r3, #28]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b088      	sub	sp, #32
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	603b      	str	r3, [r7, #0]
 8009d46:	4613      	mov	r3, r2
 8009d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <HAL_SPI_Transmit+0x22>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e15f      	b.n	800a01c <HAL_SPI_Transmit+0x2e2>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d64:	f7fd f950 	bl	8007008 <HAL_GetTick>
 8009d68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d002      	beq.n	8009d80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d7e:	e148      	b.n	800a012 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <HAL_SPI_Transmit+0x52>
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d102      	bne.n	8009d92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d90:	e13f      	b.n	800a012 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2203      	movs	r2, #3
 8009d96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	88fa      	ldrh	r2, [r7, #6]
 8009daa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	88fa      	ldrh	r2, [r7, #6]
 8009db0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ddc:	d10f      	bne.n	8009dfe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009dfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e08:	2b40      	cmp	r3, #64	@ 0x40
 8009e0a:	d007      	beq.n	8009e1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e24:	d94f      	bls.n	8009ec6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <HAL_SPI_Transmit+0xfa>
 8009e2e:	8afb      	ldrh	r3, [r7, #22]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d142      	bne.n	8009eba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e38:	881a      	ldrh	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e44:	1c9a      	adds	r2, r3, #2
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009e58:	e02f      	b.n	8009eba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f003 0302 	and.w	r3, r3, #2
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d112      	bne.n	8009e8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e6c:	881a      	ldrh	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e78:	1c9a      	adds	r2, r3, #2
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	3b01      	subs	r3, #1
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e8c:	e015      	b.n	8009eba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e8e:	f7fd f8bb 	bl	8007008 <HAL_GetTick>
 8009e92:	4602      	mov	r2, r0
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d803      	bhi.n	8009ea6 <HAL_SPI_Transmit+0x16c>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea4:	d102      	bne.n	8009eac <HAL_SPI_Transmit+0x172>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009eb8:	e0ab      	b.n	800a012 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1ca      	bne.n	8009e5a <HAL_SPI_Transmit+0x120>
 8009ec4:	e080      	b.n	8009fc8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <HAL_SPI_Transmit+0x19a>
 8009ece:	8afb      	ldrh	r3, [r7, #22]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d174      	bne.n	8009fbe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d912      	bls.n	8009f04 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee2:	881a      	ldrh	r2, [r3, #0]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eee:	1c9a      	adds	r2, r3, #2
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b02      	subs	r3, #2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f02:	e05c      	b.n	8009fbe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	330c      	adds	r3, #12
 8009f0e:	7812      	ldrb	r2, [r2, #0]
 8009f10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	3b01      	subs	r3, #1
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009f2a:	e048      	b.n	8009fbe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d12b      	bne.n	8009f92 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d912      	bls.n	8009f6a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f48:	881a      	ldrh	r2, [r3, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f54:	1c9a      	adds	r2, r3, #2
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	3b02      	subs	r3, #2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f68:	e029      	b.n	8009fbe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	330c      	adds	r3, #12
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f90:	e015      	b.n	8009fbe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f92:	f7fd f839 	bl	8007008 <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d803      	bhi.n	8009faa <HAL_SPI_Transmit+0x270>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa8:	d102      	bne.n	8009fb0 <HAL_SPI_Transmit+0x276>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d106      	bne.n	8009fbe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009fbc:	e029      	b.n	800a012 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1b1      	bne.n	8009f2c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fb69 	bl	800a6a4 <SPI_EndRxTxTransaction>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10a      	bne.n	8009ffc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	613b      	str	r3, [r7, #16]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	613b      	str	r3, [r7, #16]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	613b      	str	r3, [r7, #16]
 8009ffa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	77fb      	strb	r3, [r7, #31]
 800a008:	e003      	b.n	800a012 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a01a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3720      	adds	r7, #32
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08a      	sub	sp, #40	@ 0x28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a032:	2301      	movs	r3, #1
 800a034:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_SPI_TransmitReceive+0x26>
 800a046:	2302      	movs	r3, #2
 800a048:	e20a      	b.n	800a460 <HAL_SPI_TransmitReceive+0x43c>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a052:	f7fc ffd9 	bl	8007008 <HAL_GetTick>
 800a056:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a05e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a066:	887b      	ldrh	r3, [r7, #2]
 800a068:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a06a:	887b      	ldrh	r3, [r7, #2]
 800a06c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a06e:	7efb      	ldrb	r3, [r7, #27]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d00e      	beq.n	800a092 <HAL_SPI_TransmitReceive+0x6e>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a07a:	d106      	bne.n	800a08a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <HAL_SPI_TransmitReceive+0x66>
 800a084:	7efb      	ldrb	r3, [r7, #27]
 800a086:	2b04      	cmp	r3, #4
 800a088:	d003      	beq.n	800a092 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a08a:	2302      	movs	r3, #2
 800a08c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a090:	e1e0      	b.n	800a454 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d005      	beq.n	800a0a4 <HAL_SPI_TransmitReceive+0x80>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <HAL_SPI_TransmitReceive+0x80>
 800a09e:	887b      	ldrh	r3, [r7, #2]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d103      	bne.n	800a0ac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a0aa:	e1d3      	b.n	800a454 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	d003      	beq.n	800a0c0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2205      	movs	r2, #5
 800a0bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	887a      	ldrh	r2, [r7, #2]
 800a0d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	887a      	ldrh	r2, [r7, #2]
 800a0d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	887a      	ldrh	r2, [r7, #2]
 800a0e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	887a      	ldrh	r2, [r7, #2]
 800a0ec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a102:	d802      	bhi.n	800a10a <HAL_SPI_TransmitReceive+0xe6>
 800a104:	8a3b      	ldrh	r3, [r7, #16]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d908      	bls.n	800a11c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a118:	605a      	str	r2, [r3, #4]
 800a11a:	e007      	b.n	800a12c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a12a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a136:	2b40      	cmp	r3, #64	@ 0x40
 800a138:	d007      	beq.n	800a14a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a152:	f240 8081 	bls.w	800a258 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <HAL_SPI_TransmitReceive+0x140>
 800a15e:	8a7b      	ldrh	r3, [r7, #18]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d16d      	bne.n	800a240 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a168:	881a      	ldrh	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a174:	1c9a      	adds	r2, r3, #2
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a17e:	b29b      	uxth	r3, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a188:	e05a      	b.n	800a240 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b02      	cmp	r3, #2
 800a196:	d11b      	bne.n	800a1d0 <HAL_SPI_TransmitReceive+0x1ac>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d016      	beq.n	800a1d0 <HAL_SPI_TransmitReceive+0x1ac>
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d113      	bne.n	800a1d0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ac:	881a      	ldrh	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b8:	1c9a      	adds	r2, r3, #2
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d11c      	bne.n	800a218 <HAL_SPI_TransmitReceive+0x1f4>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d016      	beq.n	800a218 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f4:	b292      	uxth	r2, r2
 800a1f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1fc:	1c9a      	adds	r2, r3, #2
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a208:	b29b      	uxth	r3, r3
 800a20a:	3b01      	subs	r3, #1
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a214:	2301      	movs	r3, #1
 800a216:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a218:	f7fc fef6 	bl	8007008 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a224:	429a      	cmp	r2, r3
 800a226:	d80b      	bhi.n	800a240 <HAL_SPI_TransmitReceive+0x21c>
 800a228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22e:	d007      	beq.n	800a240 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a23e:	e109      	b.n	800a454 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a244:	b29b      	uxth	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d19f      	bne.n	800a18a <HAL_SPI_TransmitReceive+0x166>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a250:	b29b      	uxth	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d199      	bne.n	800a18a <HAL_SPI_TransmitReceive+0x166>
 800a256:	e0e3      	b.n	800a420 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <HAL_SPI_TransmitReceive+0x244>
 800a260:	8a7b      	ldrh	r3, [r7, #18]
 800a262:	2b01      	cmp	r3, #1
 800a264:	f040 80cf 	bne.w	800a406 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d912      	bls.n	800a298 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a276:	881a      	ldrh	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a282:	1c9a      	adds	r2, r3, #2
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	3b02      	subs	r3, #2
 800a290:	b29a      	uxth	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a296:	e0b6      	b.n	800a406 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	7812      	ldrb	r2, [r2, #0]
 800a2a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2be:	e0a2      	b.n	800a406 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d134      	bne.n	800a338 <HAL_SPI_TransmitReceive+0x314>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d02f      	beq.n	800a338 <HAL_SPI_TransmitReceive+0x314>
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d12c      	bne.n	800a338 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d912      	bls.n	800a30e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ec:	881a      	ldrh	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f8:	1c9a      	adds	r2, r3, #2
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b02      	subs	r3, #2
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a30c:	e012      	b.n	800a334 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	330c      	adds	r3, #12
 800a318:	7812      	ldrb	r2, [r2, #0]
 800a31a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a334:	2300      	movs	r3, #0
 800a336:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b01      	cmp	r3, #1
 800a344:	d148      	bne.n	800a3d8 <HAL_SPI_TransmitReceive+0x3b4>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d042      	beq.n	800a3d8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d923      	bls.n	800a3a6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a368:	b292      	uxth	r2, r2
 800a36a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a370:	1c9a      	adds	r2, r3, #2
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	3b02      	subs	r3, #2
 800a380:	b29a      	uxth	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a38e:	b29b      	uxth	r3, r3
 800a390:	2b01      	cmp	r3, #1
 800a392:	d81f      	bhi.n	800a3d4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3a2:	605a      	str	r2, [r3, #4]
 800a3a4:	e016      	b.n	800a3d4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f103 020c 	add.w	r2, r3, #12
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b2:	7812      	ldrb	r2, [r2, #0]
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3d8:	f7fc fe16 	bl	8007008 <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d803      	bhi.n	800a3f0 <HAL_SPI_TransmitReceive+0x3cc>
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ee:	d102      	bne.n	800a3f6 <HAL_SPI_TransmitReceive+0x3d2>
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d107      	bne.n	800a406 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a404:	e026      	b.n	800a454 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f47f af57 	bne.w	800a2c0 <HAL_SPI_TransmitReceive+0x29c>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a418:	b29b      	uxth	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f47f af50 	bne.w	800a2c0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 f93d 	bl	800a6a4 <SPI_EndRxTxTransaction>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2220      	movs	r2, #32
 800a43a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a44a:	e003      	b.n	800a454 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a45c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a460:	4618      	mov	r0, r3
 800a462:	3728      	adds	r7, #40	@ 0x28
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	603b      	str	r3, [r7, #0]
 800a474:	4613      	mov	r3, r2
 800a476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a478:	f7fc fdc6 	bl	8007008 <HAL_GetTick>
 800a47c:	4602      	mov	r2, r0
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	4413      	add	r3, r2
 800a486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a488:	f7fc fdbe 	bl	8007008 <HAL_GetTick>
 800a48c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a48e:	4b39      	ldr	r3, [pc, #228]	@ (800a574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	015b      	lsls	r3, r3, #5
 800a494:	0d1b      	lsrs	r3, r3, #20
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	fb02 f303 	mul.w	r3, r2, r3
 800a49c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a49e:	e054      	b.n	800a54a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a6:	d050      	beq.n	800a54a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4a8:	f7fc fdae 	bl	8007008 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	69fa      	ldr	r2, [r7, #28]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d902      	bls.n	800a4be <SPI_WaitFlagStateUntilTimeout+0x56>
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d13d      	bne.n	800a53a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a4cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a4d6:	d111      	bne.n	800a4fc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4e0:	d004      	beq.n	800a4ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4ea:	d107      	bne.n	800a4fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a504:	d10f      	bne.n	800a526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e017      	b.n	800a56a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a540:	2300      	movs	r3, #0
 800a542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	3b01      	subs	r3, #1
 800a548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	689a      	ldr	r2, [r3, #8]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	4013      	ands	r3, r2
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	429a      	cmp	r2, r3
 800a558:	bf0c      	ite	eq
 800a55a:	2301      	moveq	r3, #1
 800a55c:	2300      	movne	r3, #0
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	461a      	mov	r2, r3
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	429a      	cmp	r2, r3
 800a566:	d19b      	bne.n	800a4a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3720      	adds	r7, #32
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000054 	.word	0x20000054

0800a578 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	@ 0x28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a58a:	f7fc fd3d 	bl	8007008 <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	1a9b      	subs	r3, r3, r2
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	4413      	add	r3, r2
 800a598:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a59a:	f7fc fd35 	bl	8007008 <HAL_GetTick>
 800a59e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	330c      	adds	r3, #12
 800a5a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a5a8:	4b3d      	ldr	r3, [pc, #244]	@ (800a6a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	00da      	lsls	r2, r3, #3
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	0d1b      	lsrs	r3, r3, #20
 800a5b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5ba:	fb02 f303 	mul.w	r3, r2, r3
 800a5be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a5c0:	e060      	b.n	800a684 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a5c8:	d107      	bne.n	800a5da <SPI_WaitFifoStateUntilTimeout+0x62>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d104      	bne.n	800a5da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d050      	beq.n	800a684 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5e2:	f7fc fd11 	bl	8007008 <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d902      	bls.n	800a5f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d13d      	bne.n	800a674 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a606:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a610:	d111      	bne.n	800a636 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a61a:	d004      	beq.n	800a626 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a624:	d107      	bne.n	800a636 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a634:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a63e:	d10f      	bne.n	800a660 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a64e:	601a      	str	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a65e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e010      	b.n	800a696 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	3b01      	subs	r3, #1
 800a682:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	4013      	ands	r3, r2
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d196      	bne.n	800a5c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3728      	adds	r7, #40	@ 0x28
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000054 	.word	0x20000054

0800a6a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff ff5b 	bl	800a578 <SPI_WaitFifoStateUntilTimeout>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d007      	beq.n	800a6d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6cc:	f043 0220 	orr.w	r2, r3, #32
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e046      	b.n	800a766 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a6d8:	4b25      	ldr	r3, [pc, #148]	@ (800a770 <SPI_EndRxTxTransaction+0xcc>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a25      	ldr	r2, [pc, #148]	@ (800a774 <SPI_EndRxTxTransaction+0xd0>)
 800a6de:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e2:	0d5b      	lsrs	r3, r3, #21
 800a6e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a6e8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6f6:	d112      	bne.n	800a71e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2200      	movs	r2, #0
 800a700:	2180      	movs	r1, #128	@ 0x80
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f7ff feb0 	bl	800a468 <SPI_WaitFlagStateUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d016      	beq.n	800a73c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a712:	f043 0220 	orr.w	r2, r3, #32
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e023      	b.n	800a766 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00a      	beq.n	800a73a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	3b01      	subs	r3, #1
 800a728:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a734:	2b80      	cmp	r3, #128	@ 0x80
 800a736:	d0f2      	beq.n	800a71e <SPI_EndRxTxTransaction+0x7a>
 800a738:	e000      	b.n	800a73c <SPI_EndRxTxTransaction+0x98>
        break;
 800a73a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2200      	movs	r2, #0
 800a744:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7ff ff15 	bl	800a578 <SPI_WaitFifoStateUntilTimeout>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d007      	beq.n	800a764 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a758:	f043 0220 	orr.w	r2, r3, #32
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e000      	b.n	800a766 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	20000054 	.word	0x20000054
 800a774:	165e9f81 	.word	0x165e9f81

0800a778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e049      	b.n	800a81e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	d106      	bne.n	800a7a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7fb fc6e 	bl	8006080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f001 f8e6 	bl	800b988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d001      	beq.n	800a840 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e04c      	b.n	800a8da <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a26      	ldr	r2, [pc, #152]	@ (800a8e8 <HAL_TIM_Base_Start+0xc0>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d022      	beq.n	800a898 <HAL_TIM_Base_Start+0x70>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a85a:	d01d      	beq.n	800a898 <HAL_TIM_Base_Start+0x70>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a22      	ldr	r2, [pc, #136]	@ (800a8ec <HAL_TIM_Base_Start+0xc4>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d018      	beq.n	800a898 <HAL_TIM_Base_Start+0x70>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a21      	ldr	r2, [pc, #132]	@ (800a8f0 <HAL_TIM_Base_Start+0xc8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d013      	beq.n	800a898 <HAL_TIM_Base_Start+0x70>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a1f      	ldr	r2, [pc, #124]	@ (800a8f4 <HAL_TIM_Base_Start+0xcc>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d00e      	beq.n	800a898 <HAL_TIM_Base_Start+0x70>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a1e      	ldr	r2, [pc, #120]	@ (800a8f8 <HAL_TIM_Base_Start+0xd0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d009      	beq.n	800a898 <HAL_TIM_Base_Start+0x70>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a1c      	ldr	r2, [pc, #112]	@ (800a8fc <HAL_TIM_Base_Start+0xd4>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d004      	beq.n	800a898 <HAL_TIM_Base_Start+0x70>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a1b      	ldr	r2, [pc, #108]	@ (800a900 <HAL_TIM_Base_Start+0xd8>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d115      	bne.n	800a8c4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689a      	ldr	r2, [r3, #8]
 800a89e:	4b19      	ldr	r3, [pc, #100]	@ (800a904 <HAL_TIM_Base_Start+0xdc>)
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b06      	cmp	r3, #6
 800a8a8:	d015      	beq.n	800a8d6 <HAL_TIM_Base_Start+0xae>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8b0:	d011      	beq.n	800a8d6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f042 0201 	orr.w	r2, r2, #1
 800a8c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8c2:	e008      	b.n	800a8d6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f042 0201 	orr.w	r2, r2, #1
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	e000      	b.n	800a8d8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	40010000 	.word	0x40010000
 800a8ec:	40000400 	.word	0x40000400
 800a8f0:	40000800 	.word	0x40000800
 800a8f4:	40000c00 	.word	0x40000c00
 800a8f8:	40010400 	.word	0x40010400
 800a8fc:	40014000 	.word	0x40014000
 800a900:	40001800 	.word	0x40001800
 800a904:	00010007 	.word	0x00010007

0800a908 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6a1a      	ldr	r2, [r3, #32]
 800a916:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a91a:	4013      	ands	r3, r2
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10f      	bne.n	800a940 <HAL_TIM_Base_Stop+0x38>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6a1a      	ldr	r2, [r3, #32]
 800a926:	f240 4344 	movw	r3, #1092	@ 0x444
 800a92a:	4013      	ands	r3, r2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d107      	bne.n	800a940 <HAL_TIM_Base_Stop+0x38>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0201 	bic.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
	...

0800a958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d001      	beq.n	800a970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e054      	b.n	800aa1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68da      	ldr	r2, [r3, #12]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f042 0201 	orr.w	r2, r2, #1
 800a986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a26      	ldr	r2, [pc, #152]	@ (800aa28 <HAL_TIM_Base_Start_IT+0xd0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d022      	beq.n	800a9d8 <HAL_TIM_Base_Start_IT+0x80>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a99a:	d01d      	beq.n	800a9d8 <HAL_TIM_Base_Start_IT+0x80>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a22      	ldr	r2, [pc, #136]	@ (800aa2c <HAL_TIM_Base_Start_IT+0xd4>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d018      	beq.n	800a9d8 <HAL_TIM_Base_Start_IT+0x80>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a21      	ldr	r2, [pc, #132]	@ (800aa30 <HAL_TIM_Base_Start_IT+0xd8>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d013      	beq.n	800a9d8 <HAL_TIM_Base_Start_IT+0x80>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a1f      	ldr	r2, [pc, #124]	@ (800aa34 <HAL_TIM_Base_Start_IT+0xdc>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00e      	beq.n	800a9d8 <HAL_TIM_Base_Start_IT+0x80>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a1e      	ldr	r2, [pc, #120]	@ (800aa38 <HAL_TIM_Base_Start_IT+0xe0>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d009      	beq.n	800a9d8 <HAL_TIM_Base_Start_IT+0x80>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a1c      	ldr	r2, [pc, #112]	@ (800aa3c <HAL_TIM_Base_Start_IT+0xe4>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d004      	beq.n	800a9d8 <HAL_TIM_Base_Start_IT+0x80>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a1b      	ldr	r2, [pc, #108]	@ (800aa40 <HAL_TIM_Base_Start_IT+0xe8>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d115      	bne.n	800aa04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	689a      	ldr	r2, [r3, #8]
 800a9de:	4b19      	ldr	r3, [pc, #100]	@ (800aa44 <HAL_TIM_Base_Start_IT+0xec>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b06      	cmp	r3, #6
 800a9e8:	d015      	beq.n	800aa16 <HAL_TIM_Base_Start_IT+0xbe>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9f0:	d011      	beq.n	800aa16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f042 0201 	orr.w	r2, r2, #1
 800aa00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa02:	e008      	b.n	800aa16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f042 0201 	orr.w	r2, r2, #1
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	e000      	b.n	800aa18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	40010000 	.word	0x40010000
 800aa2c:	40000400 	.word	0x40000400
 800aa30:	40000800 	.word	0x40000800
 800aa34:	40000c00 	.word	0x40000c00
 800aa38:	40010400 	.word	0x40010400
 800aa3c:	40014000 	.word	0x40014000
 800aa40:	40001800 	.word	0x40001800
 800aa44:	00010007 	.word	0x00010007

0800aa48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e049      	b.n	800aaee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d106      	bne.n	800aa74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7fb fbea 	bl	8006248 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3304      	adds	r3, #4
 800aa84:	4619      	mov	r1, r3
 800aa86:	4610      	mov	r0, r2
 800aa88:	f000 ff7e 	bl	800b988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
	...

0800aaf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d109      	bne.n	800ab1c <HAL_TIM_PWM_Start+0x24>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	bf14      	ite	ne
 800ab14:	2301      	movne	r3, #1
 800ab16:	2300      	moveq	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	e03c      	b.n	800ab96 <HAL_TIM_PWM_Start+0x9e>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d109      	bne.n	800ab36 <HAL_TIM_PWM_Start+0x3e>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	bf14      	ite	ne
 800ab2e:	2301      	movne	r3, #1
 800ab30:	2300      	moveq	r3, #0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	e02f      	b.n	800ab96 <HAL_TIM_PWM_Start+0x9e>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d109      	bne.n	800ab50 <HAL_TIM_PWM_Start+0x58>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	bf14      	ite	ne
 800ab48:	2301      	movne	r3, #1
 800ab4a:	2300      	moveq	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	e022      	b.n	800ab96 <HAL_TIM_PWM_Start+0x9e>
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2b0c      	cmp	r3, #12
 800ab54:	d109      	bne.n	800ab6a <HAL_TIM_PWM_Start+0x72>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	bf14      	ite	ne
 800ab62:	2301      	movne	r3, #1
 800ab64:	2300      	moveq	r3, #0
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	e015      	b.n	800ab96 <HAL_TIM_PWM_Start+0x9e>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b10      	cmp	r3, #16
 800ab6e:	d109      	bne.n	800ab84 <HAL_TIM_PWM_Start+0x8c>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	bf14      	ite	ne
 800ab7c:	2301      	movne	r3, #1
 800ab7e:	2300      	moveq	r3, #0
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	e008      	b.n	800ab96 <HAL_TIM_PWM_Start+0x9e>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	bf14      	ite	ne
 800ab90:	2301      	movne	r3, #1
 800ab92:	2300      	moveq	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e092      	b.n	800acc4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d104      	bne.n	800abae <HAL_TIM_PWM_Start+0xb6>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abac:	e023      	b.n	800abf6 <HAL_TIM_PWM_Start+0xfe>
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d104      	bne.n	800abbe <HAL_TIM_PWM_Start+0xc6>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abbc:	e01b      	b.n	800abf6 <HAL_TIM_PWM_Start+0xfe>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	d104      	bne.n	800abce <HAL_TIM_PWM_Start+0xd6>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abcc:	e013      	b.n	800abf6 <HAL_TIM_PWM_Start+0xfe>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b0c      	cmp	r3, #12
 800abd2:	d104      	bne.n	800abde <HAL_TIM_PWM_Start+0xe6>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2202      	movs	r2, #2
 800abd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800abdc:	e00b      	b.n	800abf6 <HAL_TIM_PWM_Start+0xfe>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b10      	cmp	r3, #16
 800abe2:	d104      	bne.n	800abee <HAL_TIM_PWM_Start+0xf6>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abec:	e003      	b.n	800abf6 <HAL_TIM_PWM_Start+0xfe>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2201      	movs	r2, #1
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f001 fa66 	bl	800c0d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a30      	ldr	r2, [pc, #192]	@ (800accc <HAL_TIM_PWM_Start+0x1d4>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d004      	beq.n	800ac18 <HAL_TIM_PWM_Start+0x120>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a2f      	ldr	r2, [pc, #188]	@ (800acd0 <HAL_TIM_PWM_Start+0x1d8>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d101      	bne.n	800ac1c <HAL_TIM_PWM_Start+0x124>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e000      	b.n	800ac1e <HAL_TIM_PWM_Start+0x126>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d007      	beq.n	800ac32 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ac30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a25      	ldr	r2, [pc, #148]	@ (800accc <HAL_TIM_PWM_Start+0x1d4>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d022      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x18a>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac44:	d01d      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x18a>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a22      	ldr	r2, [pc, #136]	@ (800acd4 <HAL_TIM_PWM_Start+0x1dc>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d018      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x18a>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a20      	ldr	r2, [pc, #128]	@ (800acd8 <HAL_TIM_PWM_Start+0x1e0>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d013      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x18a>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a1f      	ldr	r2, [pc, #124]	@ (800acdc <HAL_TIM_PWM_Start+0x1e4>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00e      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x18a>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a19      	ldr	r2, [pc, #100]	@ (800acd0 <HAL_TIM_PWM_Start+0x1d8>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d009      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x18a>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a1b      	ldr	r2, [pc, #108]	@ (800ace0 <HAL_TIM_PWM_Start+0x1e8>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d004      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x18a>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a19      	ldr	r2, [pc, #100]	@ (800ace4 <HAL_TIM_PWM_Start+0x1ec>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d115      	bne.n	800acae <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689a      	ldr	r2, [r3, #8]
 800ac88:	4b17      	ldr	r3, [pc, #92]	@ (800ace8 <HAL_TIM_PWM_Start+0x1f0>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b06      	cmp	r3, #6
 800ac92:	d015      	beq.n	800acc0 <HAL_TIM_PWM_Start+0x1c8>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac9a:	d011      	beq.n	800acc0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f042 0201 	orr.w	r2, r2, #1
 800acaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acac:	e008      	b.n	800acc0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f042 0201 	orr.w	r2, r2, #1
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	e000      	b.n	800acc2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	40010000 	.word	0x40010000
 800acd0:	40010400 	.word	0x40010400
 800acd4:	40000400 	.word	0x40000400
 800acd8:	40000800 	.word	0x40000800
 800acdc:	40000c00 	.word	0x40000c00
 800ace0:	40014000 	.word	0x40014000
 800ace4:	40001800 	.word	0x40001800
 800ace8:	00010007 	.word	0x00010007

0800acec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d109      	bne.n	800ad14 <HAL_TIM_PWM_Start_IT+0x28>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	bf14      	ite	ne
 800ad0c:	2301      	movne	r3, #1
 800ad0e:	2300      	moveq	r3, #0
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	e03c      	b.n	800ad8e <HAL_TIM_PWM_Start_IT+0xa2>
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d109      	bne.n	800ad2e <HAL_TIM_PWM_Start_IT+0x42>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	bf14      	ite	ne
 800ad26:	2301      	movne	r3, #1
 800ad28:	2300      	moveq	r3, #0
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	e02f      	b.n	800ad8e <HAL_TIM_PWM_Start_IT+0xa2>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b08      	cmp	r3, #8
 800ad32:	d109      	bne.n	800ad48 <HAL_TIM_PWM_Start_IT+0x5c>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	bf14      	ite	ne
 800ad40:	2301      	movne	r3, #1
 800ad42:	2300      	moveq	r3, #0
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	e022      	b.n	800ad8e <HAL_TIM_PWM_Start_IT+0xa2>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b0c      	cmp	r3, #12
 800ad4c:	d109      	bne.n	800ad62 <HAL_TIM_PWM_Start_IT+0x76>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	bf14      	ite	ne
 800ad5a:	2301      	movne	r3, #1
 800ad5c:	2300      	moveq	r3, #0
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	e015      	b.n	800ad8e <HAL_TIM_PWM_Start_IT+0xa2>
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2b10      	cmp	r3, #16
 800ad66:	d109      	bne.n	800ad7c <HAL_TIM_PWM_Start_IT+0x90>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	bf14      	ite	ne
 800ad74:	2301      	movne	r3, #1
 800ad76:	2300      	moveq	r3, #0
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	e008      	b.n	800ad8e <HAL_TIM_PWM_Start_IT+0xa2>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	bf14      	ite	ne
 800ad88:	2301      	movne	r3, #1
 800ad8a:	2300      	moveq	r3, #0
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e0dd      	b.n	800af52 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <HAL_TIM_PWM_Start_IT+0xba>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ada4:	e023      	b.n	800adee <HAL_TIM_PWM_Start_IT+0x102>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	d104      	bne.n	800adb6 <HAL_TIM_PWM_Start_IT+0xca>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adb4:	e01b      	b.n	800adee <HAL_TIM_PWM_Start_IT+0x102>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b08      	cmp	r3, #8
 800adba:	d104      	bne.n	800adc6 <HAL_TIM_PWM_Start_IT+0xda>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2202      	movs	r2, #2
 800adc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adc4:	e013      	b.n	800adee <HAL_TIM_PWM_Start_IT+0x102>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b0c      	cmp	r3, #12
 800adca:	d104      	bne.n	800add6 <HAL_TIM_PWM_Start_IT+0xea>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2202      	movs	r2, #2
 800add0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800add4:	e00b      	b.n	800adee <HAL_TIM_PWM_Start_IT+0x102>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	2b10      	cmp	r3, #16
 800adda:	d104      	bne.n	800ade6 <HAL_TIM_PWM_Start_IT+0xfa>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2202      	movs	r2, #2
 800ade0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ade4:	e003      	b.n	800adee <HAL_TIM_PWM_Start_IT+0x102>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2202      	movs	r2, #2
 800adea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b0c      	cmp	r3, #12
 800adf2:	d841      	bhi.n	800ae78 <HAL_TIM_PWM_Start_IT+0x18c>
 800adf4:	a201      	add	r2, pc, #4	@ (adr r2, 800adfc <HAL_TIM_PWM_Start_IT+0x110>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae31 	.word	0x0800ae31
 800ae00:	0800ae79 	.word	0x0800ae79
 800ae04:	0800ae79 	.word	0x0800ae79
 800ae08:	0800ae79 	.word	0x0800ae79
 800ae0c:	0800ae43 	.word	0x0800ae43
 800ae10:	0800ae79 	.word	0x0800ae79
 800ae14:	0800ae79 	.word	0x0800ae79
 800ae18:	0800ae79 	.word	0x0800ae79
 800ae1c:	0800ae55 	.word	0x0800ae55
 800ae20:	0800ae79 	.word	0x0800ae79
 800ae24:	0800ae79 	.word	0x0800ae79
 800ae28:	0800ae79 	.word	0x0800ae79
 800ae2c:	0800ae67 	.word	0x0800ae67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0202 	orr.w	r2, r2, #2
 800ae3e:	60da      	str	r2, [r3, #12]
      break;
 800ae40:	e01d      	b.n	800ae7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68da      	ldr	r2, [r3, #12]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f042 0204 	orr.w	r2, r2, #4
 800ae50:	60da      	str	r2, [r3, #12]
      break;
 800ae52:	e014      	b.n	800ae7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68da      	ldr	r2, [r3, #12]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f042 0208 	orr.w	r2, r2, #8
 800ae62:	60da      	str	r2, [r3, #12]
      break;
 800ae64:	e00b      	b.n	800ae7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f042 0210 	orr.w	r2, r2, #16
 800ae74:	60da      	str	r2, [r3, #12]
      break;
 800ae76:	e002      	b.n	800ae7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae7c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d165      	bne.n	800af50 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f001 f91f 	bl	800c0d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a31      	ldr	r2, [pc, #196]	@ (800af5c <HAL_TIM_PWM_Start_IT+0x270>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d004      	beq.n	800aea6 <HAL_TIM_PWM_Start_IT+0x1ba>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a2f      	ldr	r2, [pc, #188]	@ (800af60 <HAL_TIM_PWM_Start_IT+0x274>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d101      	bne.n	800aeaa <HAL_TIM_PWM_Start_IT+0x1be>
 800aea6:	2301      	movs	r3, #1
 800aea8:	e000      	b.n	800aeac <HAL_TIM_PWM_Start_IT+0x1c0>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d007      	beq.n	800aec0 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aebe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a25      	ldr	r2, [pc, #148]	@ (800af5c <HAL_TIM_PWM_Start_IT+0x270>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d022      	beq.n	800af10 <HAL_TIM_PWM_Start_IT+0x224>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aed2:	d01d      	beq.n	800af10 <HAL_TIM_PWM_Start_IT+0x224>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a22      	ldr	r2, [pc, #136]	@ (800af64 <HAL_TIM_PWM_Start_IT+0x278>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d018      	beq.n	800af10 <HAL_TIM_PWM_Start_IT+0x224>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a21      	ldr	r2, [pc, #132]	@ (800af68 <HAL_TIM_PWM_Start_IT+0x27c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d013      	beq.n	800af10 <HAL_TIM_PWM_Start_IT+0x224>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a1f      	ldr	r2, [pc, #124]	@ (800af6c <HAL_TIM_PWM_Start_IT+0x280>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00e      	beq.n	800af10 <HAL_TIM_PWM_Start_IT+0x224>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a1a      	ldr	r2, [pc, #104]	@ (800af60 <HAL_TIM_PWM_Start_IT+0x274>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d009      	beq.n	800af10 <HAL_TIM_PWM_Start_IT+0x224>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a1b      	ldr	r2, [pc, #108]	@ (800af70 <HAL_TIM_PWM_Start_IT+0x284>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d004      	beq.n	800af10 <HAL_TIM_PWM_Start_IT+0x224>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a1a      	ldr	r2, [pc, #104]	@ (800af74 <HAL_TIM_PWM_Start_IT+0x288>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d115      	bne.n	800af3c <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	4b18      	ldr	r3, [pc, #96]	@ (800af78 <HAL_TIM_PWM_Start_IT+0x28c>)
 800af18:	4013      	ands	r3, r2
 800af1a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b06      	cmp	r3, #6
 800af20:	d015      	beq.n	800af4e <HAL_TIM_PWM_Start_IT+0x262>
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af28:	d011      	beq.n	800af4e <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f042 0201 	orr.w	r2, r2, #1
 800af38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af3a:	e008      	b.n	800af4e <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f042 0201 	orr.w	r2, r2, #1
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	e000      	b.n	800af50 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af4e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	40010000 	.word	0x40010000
 800af60:	40010400 	.word	0x40010400
 800af64:	40000400 	.word	0x40000400
 800af68:	40000800 	.word	0x40000800
 800af6c:	40000c00 	.word	0x40000c00
 800af70:	40014000 	.word	0x40014000
 800af74:	40001800 	.word	0x40001800
 800af78:	00010007 	.word	0x00010007

0800af7c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b0c      	cmp	r3, #12
 800af8e:	d841      	bhi.n	800b014 <HAL_TIM_PWM_Stop_IT+0x98>
 800af90:	a201      	add	r2, pc, #4	@ (adr r2, 800af98 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afcd 	.word	0x0800afcd
 800af9c:	0800b015 	.word	0x0800b015
 800afa0:	0800b015 	.word	0x0800b015
 800afa4:	0800b015 	.word	0x0800b015
 800afa8:	0800afdf 	.word	0x0800afdf
 800afac:	0800b015 	.word	0x0800b015
 800afb0:	0800b015 	.word	0x0800b015
 800afb4:	0800b015 	.word	0x0800b015
 800afb8:	0800aff1 	.word	0x0800aff1
 800afbc:	0800b015 	.word	0x0800b015
 800afc0:	0800b015 	.word	0x0800b015
 800afc4:	0800b015 	.word	0x0800b015
 800afc8:	0800b003 	.word	0x0800b003
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0202 	bic.w	r2, r2, #2
 800afda:	60da      	str	r2, [r3, #12]
      break;
 800afdc:	e01d      	b.n	800b01a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0204 	bic.w	r2, r2, #4
 800afec:	60da      	str	r2, [r3, #12]
      break;
 800afee:	e014      	b.n	800b01a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68da      	ldr	r2, [r3, #12]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0208 	bic.w	r2, r2, #8
 800affe:	60da      	str	r2, [r3, #12]
      break;
 800b000:	e00b      	b.n	800b01a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68da      	ldr	r2, [r3, #12]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f022 0210 	bic.w	r2, r2, #16
 800b010:	60da      	str	r2, [r3, #12]
      break;
 800b012:	e002      	b.n	800b01a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	73fb      	strb	r3, [r7, #15]
      break;
 800b018:	bf00      	nop
  }

  if (status == HAL_OK)
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d171      	bne.n	800b104 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2200      	movs	r2, #0
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	4618      	mov	r0, r3
 800b02a:	f001 f851 	bl	800c0d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a37      	ldr	r2, [pc, #220]	@ (800b110 <HAL_TIM_PWM_Stop_IT+0x194>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d004      	beq.n	800b042 <HAL_TIM_PWM_Stop_IT+0xc6>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a35      	ldr	r2, [pc, #212]	@ (800b114 <HAL_TIM_PWM_Stop_IT+0x198>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d101      	bne.n	800b046 <HAL_TIM_PWM_Stop_IT+0xca>
 800b042:	2301      	movs	r3, #1
 800b044:	e000      	b.n	800b048 <HAL_TIM_PWM_Stop_IT+0xcc>
 800b046:	2300      	movs	r3, #0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d017      	beq.n	800b07c <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6a1a      	ldr	r2, [r3, #32]
 800b052:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b056:	4013      	ands	r3, r2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10f      	bne.n	800b07c <HAL_TIM_PWM_Stop_IT+0x100>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6a1a      	ldr	r2, [r3, #32]
 800b062:	f240 4344 	movw	r3, #1092	@ 0x444
 800b066:	4013      	ands	r3, r2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d107      	bne.n	800b07c <HAL_TIM_PWM_Stop_IT+0x100>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b07a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6a1a      	ldr	r2, [r3, #32]
 800b082:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b086:	4013      	ands	r3, r2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10f      	bne.n	800b0ac <HAL_TIM_PWM_Stop_IT+0x130>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6a1a      	ldr	r2, [r3, #32]
 800b092:	f240 4344 	movw	r3, #1092	@ 0x444
 800b096:	4013      	ands	r3, r2
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d107      	bne.n	800b0ac <HAL_TIM_PWM_Stop_IT+0x130>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f022 0201 	bic.w	r2, r2, #1
 800b0aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d104      	bne.n	800b0bc <HAL_TIM_PWM_Stop_IT+0x140>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b0ba:	e023      	b.n	800b104 <HAL_TIM_PWM_Stop_IT+0x188>
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d104      	bne.n	800b0cc <HAL_TIM_PWM_Stop_IT+0x150>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0ca:	e01b      	b.n	800b104 <HAL_TIM_PWM_Stop_IT+0x188>
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2b08      	cmp	r3, #8
 800b0d0:	d104      	bne.n	800b0dc <HAL_TIM_PWM_Stop_IT+0x160>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0da:	e013      	b.n	800b104 <HAL_TIM_PWM_Stop_IT+0x188>
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	2b0c      	cmp	r3, #12
 800b0e0:	d104      	bne.n	800b0ec <HAL_TIM_PWM_Stop_IT+0x170>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b0ea:	e00b      	b.n	800b104 <HAL_TIM_PWM_Stop_IT+0x188>
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2b10      	cmp	r3, #16
 800b0f0:	d104      	bne.n	800b0fc <HAL_TIM_PWM_Stop_IT+0x180>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0fa:	e003      	b.n	800b104 <HAL_TIM_PWM_Stop_IT+0x188>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	40010000 	.word	0x40010000
 800b114:	40010400 	.word	0x40010400

0800b118 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e08f      	b.n	800b24c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b00      	cmp	r3, #0
 800b136:	d106      	bne.n	800b146 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fb f835 	bl	80061b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2202      	movs	r2, #2
 800b14a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	6899      	ldr	r1, [r3, #8]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	4b3e      	ldr	r3, [pc, #248]	@ (800b254 <HAL_TIM_Encoder_Init+0x13c>)
 800b15a:	400b      	ands	r3, r1
 800b15c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3304      	adds	r3, #4
 800b166:	4619      	mov	r1, r3
 800b168:	4610      	mov	r0, r2
 800b16a:	f000 fc0d 	bl	800b988 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	4313      	orrs	r3, r2
 800b18e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	4b31      	ldr	r3, [pc, #196]	@ (800b258 <HAL_TIM_Encoder_Init+0x140>)
 800b194:	4013      	ands	r3, r2
 800b196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	689a      	ldr	r2, [r3, #8]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	021b      	lsls	r3, r3, #8
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b25c <HAL_TIM_Encoder_Init+0x144>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	4b2a      	ldr	r3, [pc, #168]	@ (800b260 <HAL_TIM_Encoder_Init+0x148>)
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	021b      	lsls	r3, r3, #8
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	011a      	lsls	r2, r3, #4
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	031b      	lsls	r3, r3, #12
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b1e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b1ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	011b      	lsls	r3, r3, #4
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	fffebff8 	.word	0xfffebff8
 800b258:	fffffcfc 	.word	0xfffffcfc
 800b25c:	fffff3f3 	.word	0xfffff3f3
 800b260:	ffff0f0f 	.word	0xffff0f0f

0800b264 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b274:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b27c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b284:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b28c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d110      	bne.n	800b2b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d102      	bne.n	800b2a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b29a:	7b7b      	ldrb	r3, [r7, #13]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d001      	beq.n	800b2a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e069      	b.n	800b378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2b4:	e031      	b.n	800b31a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d110      	bne.n	800b2de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2bc:	7bbb      	ldrb	r3, [r7, #14]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d102      	bne.n	800b2c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b2c2:	7b3b      	ldrb	r3, [r7, #12]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d001      	beq.n	800b2cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e055      	b.n	800b378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2dc:	e01d      	b.n	800b31a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d108      	bne.n	800b2f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d105      	bne.n	800b2f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2ea:	7b7b      	ldrb	r3, [r7, #13]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d102      	bne.n	800b2f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b2f0:	7b3b      	ldrb	r3, [r7, #12]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d001      	beq.n	800b2fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e03e      	b.n	800b378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2202      	movs	r2, #2
 800b306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2202      	movs	r2, #2
 800b30e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2202      	movs	r2, #2
 800b316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <HAL_TIM_Encoder_Start+0xc4>
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2b04      	cmp	r3, #4
 800b324:	d008      	beq.n	800b338 <HAL_TIM_Encoder_Start+0xd4>
 800b326:	e00f      	b.n	800b348 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2201      	movs	r2, #1
 800b32e:	2100      	movs	r1, #0
 800b330:	4618      	mov	r0, r3
 800b332:	f000 fecd 	bl	800c0d0 <TIM_CCxChannelCmd>
      break;
 800b336:	e016      	b.n	800b366 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2201      	movs	r2, #1
 800b33e:	2104      	movs	r1, #4
 800b340:	4618      	mov	r0, r3
 800b342:	f000 fec5 	bl	800c0d0 <TIM_CCxChannelCmd>
      break;
 800b346:	e00e      	b.n	800b366 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2201      	movs	r2, #1
 800b34e:	2100      	movs	r1, #0
 800b350:	4618      	mov	r0, r3
 800b352:	f000 febd 	bl	800c0d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2201      	movs	r2, #1
 800b35c:	2104      	movs	r1, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 feb6 	bl	800c0d0 <TIM_CCxChannelCmd>
      break;
 800b364:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f042 0201 	orr.w	r2, r2, #1
 800b374:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f003 0302 	and.w	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d020      	beq.n	800b3e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d01b      	beq.n	800b3e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f06f 0202 	mvn.w	r2, #2
 800b3b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	f003 0303 	and.w	r3, r3, #3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fac8 	bl	800b960 <HAL_TIM_IC_CaptureCallback>
 800b3d0:	e005      	b.n	800b3de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 faba 	bl	800b94c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f7f6 fe19 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	f003 0304 	and.w	r3, r3, #4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d020      	beq.n	800b430 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f003 0304 	and.w	r3, r3, #4
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01b      	beq.n	800b430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f06f 0204 	mvn.w	r2, #4
 800b400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2202      	movs	r2, #2
 800b406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 faa2 	bl	800b960 <HAL_TIM_IC_CaptureCallback>
 800b41c:	e005      	b.n	800b42a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fa94 	bl	800b94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7f6 fdf3 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	f003 0308 	and.w	r3, r3, #8
 800b436:	2b00      	cmp	r3, #0
 800b438:	d020      	beq.n	800b47c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f003 0308 	and.w	r3, r3, #8
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01b      	beq.n	800b47c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f06f 0208 	mvn.w	r2, #8
 800b44c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2204      	movs	r2, #4
 800b452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	f003 0303 	and.w	r3, r3, #3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fa7c 	bl	800b960 <HAL_TIM_IC_CaptureCallback>
 800b468:	e005      	b.n	800b476 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa6e 	bl	800b94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7f6 fdcd 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f003 0310 	and.w	r3, r3, #16
 800b482:	2b00      	cmp	r3, #0
 800b484:	d020      	beq.n	800b4c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f003 0310 	and.w	r3, r3, #16
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d01b      	beq.n	800b4c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f06f 0210 	mvn.w	r2, #16
 800b498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2208      	movs	r2, #8
 800b49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	69db      	ldr	r3, [r3, #28]
 800b4a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa56 	bl	800b960 <HAL_TIM_IC_CaptureCallback>
 800b4b4:	e005      	b.n	800b4c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa48 	bl	800b94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7f6 fda7 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00c      	beq.n	800b4ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f003 0301 	and.w	r3, r3, #1
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f06f 0201 	mvn.w	r2, #1
 800b4e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7fa fcc8 	bl	8005e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d104      	bne.n	800b500 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00c      	beq.n	800b51a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b506:	2b00      	cmp	r3, #0
 800b508:	d007      	beq.n	800b51a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 ff17 	bl	800c348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00c      	beq.n	800b53e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d007      	beq.n	800b53e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 ff0f 	bl	800c35c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00c      	beq.n	800b562 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d007      	beq.n	800b562 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fa09 	bl	800b974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f003 0320 	and.w	r3, r3, #32
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00c      	beq.n	800b586 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f003 0320 	and.w	r3, r3, #32
 800b572:	2b00      	cmp	r3, #0
 800b574:	d007      	beq.n	800b586 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f06f 0220 	mvn.w	r2, #32
 800b57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fed7 	bl	800c334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b586:	bf00      	nop
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d101      	bne.n	800b5ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	e0ff      	b.n	800b7ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b14      	cmp	r3, #20
 800b5ba:	f200 80f0 	bhi.w	800b79e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b5be:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b619 	.word	0x0800b619
 800b5c8:	0800b79f 	.word	0x0800b79f
 800b5cc:	0800b79f 	.word	0x0800b79f
 800b5d0:	0800b79f 	.word	0x0800b79f
 800b5d4:	0800b659 	.word	0x0800b659
 800b5d8:	0800b79f 	.word	0x0800b79f
 800b5dc:	0800b79f 	.word	0x0800b79f
 800b5e0:	0800b79f 	.word	0x0800b79f
 800b5e4:	0800b69b 	.word	0x0800b69b
 800b5e8:	0800b79f 	.word	0x0800b79f
 800b5ec:	0800b79f 	.word	0x0800b79f
 800b5f0:	0800b79f 	.word	0x0800b79f
 800b5f4:	0800b6db 	.word	0x0800b6db
 800b5f8:	0800b79f 	.word	0x0800b79f
 800b5fc:	0800b79f 	.word	0x0800b79f
 800b600:	0800b79f 	.word	0x0800b79f
 800b604:	0800b71d 	.word	0x0800b71d
 800b608:	0800b79f 	.word	0x0800b79f
 800b60c:	0800b79f 	.word	0x0800b79f
 800b610:	0800b79f 	.word	0x0800b79f
 800b614:	0800b75d 	.word	0x0800b75d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68b9      	ldr	r1, [r7, #8]
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 fa5e 	bl	800bae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	699a      	ldr	r2, [r3, #24]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f042 0208 	orr.w	r2, r2, #8
 800b632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	699a      	ldr	r2, [r3, #24]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f022 0204 	bic.w	r2, r2, #4
 800b642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6999      	ldr	r1, [r3, #24]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	691a      	ldr	r2, [r3, #16]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	430a      	orrs	r2, r1
 800b654:	619a      	str	r2, [r3, #24]
      break;
 800b656:	e0a5      	b.n	800b7a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68b9      	ldr	r1, [r7, #8]
 800b65e:	4618      	mov	r0, r3
 800b660:	f000 fab0 	bl	800bbc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	699a      	ldr	r2, [r3, #24]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	699a      	ldr	r2, [r3, #24]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6999      	ldr	r1, [r3, #24]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	021a      	lsls	r2, r3, #8
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	430a      	orrs	r2, r1
 800b696:	619a      	str	r2, [r3, #24]
      break;
 800b698:	e084      	b.n	800b7a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68b9      	ldr	r1, [r7, #8]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 fb07 	bl	800bcb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	69da      	ldr	r2, [r3, #28]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f042 0208 	orr.w	r2, r2, #8
 800b6b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	69da      	ldr	r2, [r3, #28]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f022 0204 	bic.w	r2, r2, #4
 800b6c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	69d9      	ldr	r1, [r3, #28]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	691a      	ldr	r2, [r3, #16]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	430a      	orrs	r2, r1
 800b6d6:	61da      	str	r2, [r3, #28]
      break;
 800b6d8:	e064      	b.n	800b7a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68b9      	ldr	r1, [r7, #8]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fb5d 	bl	800bda0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	69da      	ldr	r2, [r3, #28]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	69da      	ldr	r2, [r3, #28]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	69d9      	ldr	r1, [r3, #28]
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	021a      	lsls	r2, r3, #8
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	430a      	orrs	r2, r1
 800b718:	61da      	str	r2, [r3, #28]
      break;
 800b71a:	e043      	b.n	800b7a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68b9      	ldr	r1, [r7, #8]
 800b722:	4618      	mov	r0, r3
 800b724:	f000 fb94 	bl	800be50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0208 	orr.w	r2, r2, #8
 800b736:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f022 0204 	bic.w	r2, r2, #4
 800b746:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	691a      	ldr	r2, [r3, #16]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b75a:	e023      	b.n	800b7a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	4618      	mov	r0, r3
 800b764:	f000 fbc6 	bl	800bef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b776:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b786:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	021a      	lsls	r2, r3, #8
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	430a      	orrs	r2, r1
 800b79a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b79c:	e002      	b.n	800b7a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop

0800b7b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d101      	bne.n	800b7d4 <HAL_TIM_ConfigClockSource+0x1c>
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	e0b4      	b.n	800b93e <HAL_TIM_ConfigClockSource+0x186>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	4b56      	ldr	r3, [pc, #344]	@ (800b948 <HAL_TIM_ConfigClockSource+0x190>)
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b7fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b80c:	d03e      	beq.n	800b88c <HAL_TIM_ConfigClockSource+0xd4>
 800b80e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b812:	f200 8087 	bhi.w	800b924 <HAL_TIM_ConfigClockSource+0x16c>
 800b816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b81a:	f000 8086 	beq.w	800b92a <HAL_TIM_ConfigClockSource+0x172>
 800b81e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b822:	d87f      	bhi.n	800b924 <HAL_TIM_ConfigClockSource+0x16c>
 800b824:	2b70      	cmp	r3, #112	@ 0x70
 800b826:	d01a      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0xa6>
 800b828:	2b70      	cmp	r3, #112	@ 0x70
 800b82a:	d87b      	bhi.n	800b924 <HAL_TIM_ConfigClockSource+0x16c>
 800b82c:	2b60      	cmp	r3, #96	@ 0x60
 800b82e:	d050      	beq.n	800b8d2 <HAL_TIM_ConfigClockSource+0x11a>
 800b830:	2b60      	cmp	r3, #96	@ 0x60
 800b832:	d877      	bhi.n	800b924 <HAL_TIM_ConfigClockSource+0x16c>
 800b834:	2b50      	cmp	r3, #80	@ 0x50
 800b836:	d03c      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0xfa>
 800b838:	2b50      	cmp	r3, #80	@ 0x50
 800b83a:	d873      	bhi.n	800b924 <HAL_TIM_ConfigClockSource+0x16c>
 800b83c:	2b40      	cmp	r3, #64	@ 0x40
 800b83e:	d058      	beq.n	800b8f2 <HAL_TIM_ConfigClockSource+0x13a>
 800b840:	2b40      	cmp	r3, #64	@ 0x40
 800b842:	d86f      	bhi.n	800b924 <HAL_TIM_ConfigClockSource+0x16c>
 800b844:	2b30      	cmp	r3, #48	@ 0x30
 800b846:	d064      	beq.n	800b912 <HAL_TIM_ConfigClockSource+0x15a>
 800b848:	2b30      	cmp	r3, #48	@ 0x30
 800b84a:	d86b      	bhi.n	800b924 <HAL_TIM_ConfigClockSource+0x16c>
 800b84c:	2b20      	cmp	r3, #32
 800b84e:	d060      	beq.n	800b912 <HAL_TIM_ConfigClockSource+0x15a>
 800b850:	2b20      	cmp	r3, #32
 800b852:	d867      	bhi.n	800b924 <HAL_TIM_ConfigClockSource+0x16c>
 800b854:	2b00      	cmp	r3, #0
 800b856:	d05c      	beq.n	800b912 <HAL_TIM_ConfigClockSource+0x15a>
 800b858:	2b10      	cmp	r3, #16
 800b85a:	d05a      	beq.n	800b912 <HAL_TIM_ConfigClockSource+0x15a>
 800b85c:	e062      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b86e:	f000 fc0f 	bl	800c090 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	609a      	str	r2, [r3, #8]
      break;
 800b88a:	e04f      	b.n	800b92c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b89c:	f000 fbf8 	bl	800c090 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689a      	ldr	r2, [r3, #8]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b8ae:	609a      	str	r2, [r3, #8]
      break;
 800b8b0:	e03c      	b.n	800b92c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f000 fb6c 	bl	800bf9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2150      	movs	r1, #80	@ 0x50
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fbc5 	bl	800c05a <TIM_ITRx_SetConfig>
      break;
 800b8d0:	e02c      	b.n	800b92c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f000 fb8b 	bl	800bffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2160      	movs	r1, #96	@ 0x60
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 fbb5 	bl	800c05a <TIM_ITRx_SetConfig>
      break;
 800b8f0:	e01c      	b.n	800b92c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8fe:	461a      	mov	r2, r3
 800b900:	f000 fb4c 	bl	800bf9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2140      	movs	r1, #64	@ 0x40
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 fba5 	bl	800c05a <TIM_ITRx_SetConfig>
      break;
 800b910:	e00c      	b.n	800b92c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4619      	mov	r1, r3
 800b91c:	4610      	mov	r0, r2
 800b91e:	f000 fb9c 	bl	800c05a <TIM_ITRx_SetConfig>
      break;
 800b922:	e003      	b.n	800b92c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	73fb      	strb	r3, [r7, #15]
      break;
 800b928:	e000      	b.n	800b92c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b92a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	fffeff88 	.word	0xfffeff88

0800b94c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a46      	ldr	r2, [pc, #280]	@ (800bab4 <TIM_Base_SetConfig+0x12c>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d013      	beq.n	800b9c8 <TIM_Base_SetConfig+0x40>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a6:	d00f      	beq.n	800b9c8 <TIM_Base_SetConfig+0x40>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a43      	ldr	r2, [pc, #268]	@ (800bab8 <TIM_Base_SetConfig+0x130>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d00b      	beq.n	800b9c8 <TIM_Base_SetConfig+0x40>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a42      	ldr	r2, [pc, #264]	@ (800babc <TIM_Base_SetConfig+0x134>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d007      	beq.n	800b9c8 <TIM_Base_SetConfig+0x40>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a41      	ldr	r2, [pc, #260]	@ (800bac0 <TIM_Base_SetConfig+0x138>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d003      	beq.n	800b9c8 <TIM_Base_SetConfig+0x40>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a40      	ldr	r2, [pc, #256]	@ (800bac4 <TIM_Base_SetConfig+0x13c>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d108      	bne.n	800b9da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a35      	ldr	r2, [pc, #212]	@ (800bab4 <TIM_Base_SetConfig+0x12c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d02b      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9e8:	d027      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a32      	ldr	r2, [pc, #200]	@ (800bab8 <TIM_Base_SetConfig+0x130>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d023      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a31      	ldr	r2, [pc, #196]	@ (800babc <TIM_Base_SetConfig+0x134>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d01f      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a30      	ldr	r2, [pc, #192]	@ (800bac0 <TIM_Base_SetConfig+0x138>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d01b      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a2f      	ldr	r2, [pc, #188]	@ (800bac4 <TIM_Base_SetConfig+0x13c>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d017      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a2e      	ldr	r2, [pc, #184]	@ (800bac8 <TIM_Base_SetConfig+0x140>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d013      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a2d      	ldr	r2, [pc, #180]	@ (800bacc <TIM_Base_SetConfig+0x144>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00f      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a2c      	ldr	r2, [pc, #176]	@ (800bad0 <TIM_Base_SetConfig+0x148>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00b      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a2b      	ldr	r2, [pc, #172]	@ (800bad4 <TIM_Base_SetConfig+0x14c>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d007      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a2a      	ldr	r2, [pc, #168]	@ (800bad8 <TIM_Base_SetConfig+0x150>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d003      	beq.n	800ba3a <TIM_Base_SetConfig+0xb2>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a29      	ldr	r2, [pc, #164]	@ (800badc <TIM_Base_SetConfig+0x154>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d108      	bne.n	800ba4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	689a      	ldr	r2, [r3, #8]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a10      	ldr	r2, [pc, #64]	@ (800bab4 <TIM_Base_SetConfig+0x12c>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d003      	beq.n	800ba80 <TIM_Base_SetConfig+0xf8>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a12      	ldr	r2, [pc, #72]	@ (800bac4 <TIM_Base_SetConfig+0x13c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d103      	bne.n	800ba88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	691a      	ldr	r2, [r3, #16]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d105      	bne.n	800baa6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	f023 0201 	bic.w	r2, r3, #1
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	611a      	str	r2, [r3, #16]
  }
}
 800baa6:	bf00      	nop
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	40010000 	.word	0x40010000
 800bab8:	40000400 	.word	0x40000400
 800babc:	40000800 	.word	0x40000800
 800bac0:	40000c00 	.word	0x40000c00
 800bac4:	40010400 	.word	0x40010400
 800bac8:	40014000 	.word	0x40014000
 800bacc:	40014400 	.word	0x40014400
 800bad0:	40014800 	.word	0x40014800
 800bad4:	40001800 	.word	0x40001800
 800bad8:	40001c00 	.word	0x40001c00
 800badc:	40002000 	.word	0x40002000

0800bae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	f023 0201 	bic.w	r2, r3, #1
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	4b2b      	ldr	r3, [pc, #172]	@ (800bbb8 <TIM_OC1_SetConfig+0xd8>)
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f023 0303 	bic.w	r3, r3, #3
 800bb16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f023 0302 	bic.w	r3, r3, #2
 800bb28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a21      	ldr	r2, [pc, #132]	@ (800bbbc <TIM_OC1_SetConfig+0xdc>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d003      	beq.n	800bb44 <TIM_OC1_SetConfig+0x64>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a20      	ldr	r2, [pc, #128]	@ (800bbc0 <TIM_OC1_SetConfig+0xe0>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d10c      	bne.n	800bb5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f023 0308 	bic.w	r3, r3, #8
 800bb4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f023 0304 	bic.w	r3, r3, #4
 800bb5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a16      	ldr	r2, [pc, #88]	@ (800bbbc <TIM_OC1_SetConfig+0xdc>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d003      	beq.n	800bb6e <TIM_OC1_SetConfig+0x8e>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a15      	ldr	r2, [pc, #84]	@ (800bbc0 <TIM_OC1_SetConfig+0xe0>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d111      	bne.n	800bb92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	621a      	str	r2, [r3, #32]
}
 800bbac:	bf00      	nop
 800bbae:	371c      	adds	r7, #28
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	fffeff8f 	.word	0xfffeff8f
 800bbbc:	40010000 	.word	0x40010000
 800bbc0:	40010400 	.word	0x40010400

0800bbc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6a1b      	ldr	r3, [r3, #32]
 800bbd8:	f023 0210 	bic.w	r2, r3, #16
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	4b2e      	ldr	r3, [pc, #184]	@ (800bca8 <TIM_OC2_SetConfig+0xe4>)
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f023 0320 	bic.w	r3, r3, #32
 800bc0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	011b      	lsls	r3, r3, #4
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a23      	ldr	r2, [pc, #140]	@ (800bcac <TIM_OC2_SetConfig+0xe8>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d003      	beq.n	800bc2c <TIM_OC2_SetConfig+0x68>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a22      	ldr	r2, [pc, #136]	@ (800bcb0 <TIM_OC2_SetConfig+0xec>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d10d      	bne.n	800bc48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	011b      	lsls	r3, r3, #4
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a18      	ldr	r2, [pc, #96]	@ (800bcac <TIM_OC2_SetConfig+0xe8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d003      	beq.n	800bc58 <TIM_OC2_SetConfig+0x94>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a17      	ldr	r2, [pc, #92]	@ (800bcb0 <TIM_OC2_SetConfig+0xec>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d113      	bne.n	800bc80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	621a      	str	r2, [r3, #32]
}
 800bc9a:	bf00      	nop
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	feff8fff 	.word	0xfeff8fff
 800bcac:	40010000 	.word	0x40010000
 800bcb0:	40010400 	.word	0x40010400

0800bcb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	4b2d      	ldr	r3, [pc, #180]	@ (800bd94 <TIM_OC3_SetConfig+0xe0>)
 800bce0:	4013      	ands	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f023 0303 	bic.w	r3, r3, #3
 800bcea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bcfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	021b      	lsls	r3, r3, #8
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a22      	ldr	r2, [pc, #136]	@ (800bd98 <TIM_OC3_SetConfig+0xe4>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d003      	beq.n	800bd1a <TIM_OC3_SetConfig+0x66>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a21      	ldr	r2, [pc, #132]	@ (800bd9c <TIM_OC3_SetConfig+0xe8>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d10d      	bne.n	800bd36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	021b      	lsls	r3, r3, #8
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a17      	ldr	r2, [pc, #92]	@ (800bd98 <TIM_OC3_SetConfig+0xe4>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d003      	beq.n	800bd46 <TIM_OC3_SetConfig+0x92>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a16      	ldr	r2, [pc, #88]	@ (800bd9c <TIM_OC3_SetConfig+0xe8>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d113      	bne.n	800bd6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	695b      	ldr	r3, [r3, #20]
 800bd5a:	011b      	lsls	r3, r3, #4
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	685a      	ldr	r2, [r3, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	621a      	str	r2, [r3, #32]
}
 800bd88:	bf00      	nop
 800bd8a:	371c      	adds	r7, #28
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	fffeff8f 	.word	0xfffeff8f
 800bd98:	40010000 	.word	0x40010000
 800bd9c:	40010400 	.word	0x40010400

0800bda0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b087      	sub	sp, #28
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a1b      	ldr	r3, [r3, #32]
 800bdb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4b1e      	ldr	r3, [pc, #120]	@ (800be44 <TIM_OC4_SetConfig+0xa4>)
 800bdcc:	4013      	ands	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	021b      	lsls	r3, r3, #8
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bdea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	031b      	lsls	r3, r3, #12
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a13      	ldr	r2, [pc, #76]	@ (800be48 <TIM_OC4_SetConfig+0xa8>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d003      	beq.n	800be08 <TIM_OC4_SetConfig+0x68>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a12      	ldr	r2, [pc, #72]	@ (800be4c <TIM_OC4_SetConfig+0xac>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d109      	bne.n	800be1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	019b      	lsls	r3, r3, #6
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	4313      	orrs	r3, r2
 800be1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	621a      	str	r2, [r3, #32]
}
 800be36:	bf00      	nop
 800be38:	371c      	adds	r7, #28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	feff8fff 	.word	0xfeff8fff
 800be48:	40010000 	.word	0x40010000
 800be4c:	40010400 	.word	0x40010400

0800be50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be50:	b480      	push	{r7}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4b1b      	ldr	r3, [pc, #108]	@ (800bee8 <TIM_OC5_SetConfig+0x98>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800be90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a12      	ldr	r2, [pc, #72]	@ (800beec <TIM_OC5_SetConfig+0x9c>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d003      	beq.n	800beae <TIM_OC5_SetConfig+0x5e>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a11      	ldr	r2, [pc, #68]	@ (800bef0 <TIM_OC5_SetConfig+0xa0>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d109      	bne.n	800bec2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800beb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	021b      	lsls	r3, r3, #8
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	621a      	str	r2, [r3, #32]
}
 800bedc:	bf00      	nop
 800bede:	371c      	adds	r7, #28
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	fffeff8f 	.word	0xfffeff8f
 800beec:	40010000 	.word	0x40010000
 800bef0:	40010400 	.word	0x40010400

0800bef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	4b1c      	ldr	r3, [pc, #112]	@ (800bf90 <TIM_OC6_SetConfig+0x9c>)
 800bf20:	4013      	ands	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	021b      	lsls	r3, r3, #8
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bf36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	051b      	lsls	r3, r3, #20
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a13      	ldr	r2, [pc, #76]	@ (800bf94 <TIM_OC6_SetConfig+0xa0>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d003      	beq.n	800bf54 <TIM_OC6_SetConfig+0x60>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a12      	ldr	r2, [pc, #72]	@ (800bf98 <TIM_OC6_SetConfig+0xa4>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d109      	bne.n	800bf68 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bf5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	029b      	lsls	r3, r3, #10
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	621a      	str	r2, [r3, #32]
}
 800bf82:	bf00      	nop
 800bf84:	371c      	adds	r7, #28
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	feff8fff 	.word	0xfeff8fff
 800bf94:	40010000 	.word	0x40010000
 800bf98:	40010400 	.word	0x40010400

0800bf9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b087      	sub	sp, #28
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a1b      	ldr	r3, [r3, #32]
 800bfac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	f023 0201 	bic.w	r2, r3, #1
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bfc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	011b      	lsls	r3, r3, #4
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	f023 030a 	bic.w	r3, r3, #10
 800bfd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	693a      	ldr	r2, [r7, #16]
 800bfe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	621a      	str	r2, [r3, #32]
}
 800bfee:	bf00      	nop
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bffa:	b480      	push	{r7}
 800bffc:	b087      	sub	sp, #28
 800bffe:	af00      	add	r7, sp, #0
 800c000:	60f8      	str	r0, [r7, #12]
 800c002:	60b9      	str	r1, [r7, #8]
 800c004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	f023 0210 	bic.w	r2, r3, #16
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	031b      	lsls	r3, r3, #12
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c036:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	4313      	orrs	r3, r2
 800c040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	621a      	str	r2, [r3, #32]
}
 800c04e:	bf00      	nop
 800c050:	371c      	adds	r7, #28
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b085      	sub	sp, #20
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4313      	orrs	r3, r2
 800c078:	f043 0307 	orr.w	r3, r3, #7
 800c07c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	609a      	str	r2, [r3, #8]
}
 800c084:	bf00      	nop
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c090:	b480      	push	{r7}
 800c092:	b087      	sub	sp, #28
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c0aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	021a      	lsls	r2, r3, #8
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	431a      	orrs	r2, r3
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	697a      	ldr	r2, [r7, #20]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	609a      	str	r2, [r3, #8]
}
 800c0c4:	bf00      	nop
 800c0c6:	371c      	adds	r7, #28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	f003 031f 	and.w	r3, r3, #31
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6a1a      	ldr	r2, [r3, #32]
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	43db      	mvns	r3, r3
 800c0f2:	401a      	ands	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6a1a      	ldr	r2, [r3, #32]
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f003 031f 	and.w	r3, r3, #31
 800c102:	6879      	ldr	r1, [r7, #4]
 800c104:	fa01 f303 	lsl.w	r3, r1, r3
 800c108:	431a      	orrs	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	621a      	str	r2, [r3, #32]
}
 800c10e:	bf00      	nop
 800c110:	371c      	adds	r7, #28
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
	...

0800c11c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d101      	bne.n	800c134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c130:	2302      	movs	r3, #2
 800c132:	e06d      	b.n	800c210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2202      	movs	r2, #2
 800c140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a30      	ldr	r2, [pc, #192]	@ (800c21c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a2f      	ldr	r2, [pc, #188]	@ (800c220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d108      	bne.n	800c17a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c16e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	4313      	orrs	r3, r2
 800c178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c180:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	4313      	orrs	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a20      	ldr	r2, [pc, #128]	@ (800c21c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d022      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1a6:	d01d      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a1d      	ldr	r2, [pc, #116]	@ (800c224 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d018      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a1c      	ldr	r2, [pc, #112]	@ (800c228 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d013      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a1a      	ldr	r2, [pc, #104]	@ (800c22c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d00e      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a15      	ldr	r2, [pc, #84]	@ (800c220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d009      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a16      	ldr	r2, [pc, #88]	@ (800c230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d004      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a15      	ldr	r2, [pc, #84]	@ (800c234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d10c      	bne.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	40010000 	.word	0x40010000
 800c220:	40010400 	.word	0x40010400
 800c224:	40000400 	.word	0x40000400
 800c228:	40000800 	.word	0x40000800
 800c22c:	40000c00 	.word	0x40000c00
 800c230:	40014000 	.word	0x40014000
 800c234:	40001800 	.word	0x40001800

0800c238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d101      	bne.n	800c254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c250:	2302      	movs	r3, #2
 800c252:	e065      	b.n	800c320 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	4313      	orrs	r3, r2
 800c268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	4313      	orrs	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	4313      	orrs	r3, r2
 800c284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4313      	orrs	r3, r2
 800c292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	041b      	lsls	r3, r3, #16
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a16      	ldr	r2, [pc, #88]	@ (800c32c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d004      	beq.n	800c2e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a14      	ldr	r2, [pc, #80]	@ (800c330 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d115      	bne.n	800c30e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ec:	051b      	lsls	r3, r3, #20
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	40010000 	.word	0x40010000
 800c330:	40010400 	.word	0x40010400

0800c334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e040      	b.n	800c404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c386:	2b00      	cmp	r3, #0
 800c388:	d106      	bne.n	800c398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7fa f86e 	bl	8006474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2224      	movs	r2, #36	@ 0x24
 800c39c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f022 0201 	bic.w	r2, r2, #1
 800c3ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d002      	beq.n	800c3bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fedc 	bl	800d174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fc75 	bl	800ccac <UART_SetConfig>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d101      	bne.n	800c3cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e01b      	b.n	800c404 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	685a      	ldr	r2, [r3, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	689a      	ldr	r2, [r3, #8]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c3ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f042 0201 	orr.w	r2, r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 ff5b 	bl	800d2b8 <UART_CheckIdleState>
 800c402:	4603      	mov	r3, r0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08a      	sub	sp, #40	@ 0x28
 800c410:	af02      	add	r7, sp, #8
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	4613      	mov	r3, r2
 800c41a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c420:	2b20      	cmp	r3, #32
 800c422:	d177      	bne.n	800c514 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d002      	beq.n	800c430 <HAL_UART_Transmit+0x24>
 800c42a:	88fb      	ldrh	r3, [r7, #6]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e070      	b.n	800c516 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2221      	movs	r2, #33	@ 0x21
 800c440:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c442:	f7fa fde1 	bl	8007008 <HAL_GetTick>
 800c446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	88fa      	ldrh	r2, [r7, #6]
 800c44c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	88fa      	ldrh	r2, [r7, #6]
 800c454:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c460:	d108      	bne.n	800c474 <HAL_UART_Transmit+0x68>
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d104      	bne.n	800c474 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	61bb      	str	r3, [r7, #24]
 800c472:	e003      	b.n	800c47c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c478:	2300      	movs	r3, #0
 800c47a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c47c:	e02f      	b.n	800c4de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2200      	movs	r2, #0
 800c486:	2180      	movs	r1, #128	@ 0x80
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f000 ff6c 	bl	800d366 <UART_WaitOnFlagUntilTimeout>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d004      	beq.n	800c49e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2220      	movs	r2, #32
 800c498:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e03b      	b.n	800c516 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10b      	bne.n	800c4bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	3302      	adds	r3, #2
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	e007      	b.n	800c4cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1c9      	bne.n	800c47e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2140      	movs	r1, #64	@ 0x40
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 ff36 	bl	800d366 <UART_WaitOnFlagUntilTimeout>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d004      	beq.n	800c50a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2220      	movs	r2, #32
 800c504:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800c506:	2303      	movs	r3, #3
 800c508:	e005      	b.n	800c516 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2220      	movs	r2, #32
 800c50e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	e000      	b.n	800c516 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c514:	2302      	movs	r3, #2
  }
}
 800c516:	4618      	mov	r0, r3
 800c518:	3720      	adds	r7, #32
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08a      	sub	sp, #40	@ 0x28
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	4613      	mov	r3, r2
 800c52c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c532:	2b20      	cmp	r3, #32
 800c534:	d165      	bne.n	800c602 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <HAL_UART_Transmit_DMA+0x22>
 800c53c:	88fb      	ldrh	r3, [r7, #6]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	e05e      	b.n	800c604 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	88fa      	ldrh	r2, [r7, #6]
 800c550:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	88fa      	ldrh	r2, [r7, #6]
 800c558:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2221      	movs	r2, #33	@ 0x21
 800c568:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d027      	beq.n	800c5c2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c576:	4a25      	ldr	r2, [pc, #148]	@ (800c60c <HAL_UART_Transmit_DMA+0xec>)
 800c578:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c57e:	4a24      	ldr	r2, [pc, #144]	@ (800c610 <HAL_UART_Transmit_DMA+0xf0>)
 800c580:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c586:	4a23      	ldr	r2, [pc, #140]	@ (800c614 <HAL_UART_Transmit_DMA+0xf4>)
 800c588:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c58e:	2200      	movs	r2, #0
 800c590:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c59a:	4619      	mov	r1, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3328      	adds	r3, #40	@ 0x28
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	88fb      	ldrh	r3, [r7, #6]
 800c5a6:	f7fa feef 	bl	8007388 <HAL_DMA_Start_IT>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d008      	beq.n	800c5c2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2210      	movs	r2, #16
 800c5b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2220      	movs	r2, #32
 800c5bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e020      	b.n	800c604 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2240      	movs	r2, #64	@ 0x40
 800c5c8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	3308      	adds	r3, #8
 800c5d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	e853 3f00 	ldrex	r3, [r3]
 800c5d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5ea:	623a      	str	r2, [r7, #32]
 800c5ec:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ee:	69f9      	ldr	r1, [r7, #28]
 800c5f0:	6a3a      	ldr	r2, [r7, #32]
 800c5f2:	e841 2300 	strex	r3, r2, [r1]
 800c5f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1e5      	bne.n	800c5ca <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c5fe:	2300      	movs	r3, #0
 800c600:	e000      	b.n	800c604 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c602:	2302      	movs	r3, #2
  }
}
 800c604:	4618      	mov	r0, r3
 800c606:	3728      	adds	r7, #40	@ 0x28
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	0800d695 	.word	0x0800d695
 800c610:	0800d72b 	.word	0x0800d72b
 800c614:	0800d8ad 	.word	0x0800d8ad

0800c618 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08a      	sub	sp, #40	@ 0x28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	4613      	mov	r3, r2
 800c624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c62c:	2b20      	cmp	r3, #32
 800c62e:	d132      	bne.n	800c696 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d002      	beq.n	800c63c <HAL_UART_Receive_DMA+0x24>
 800c636:	88fb      	ldrh	r3, [r7, #6]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d101      	bne.n	800c640 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e02b      	b.n	800c698 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c650:	2b00      	cmp	r3, #0
 800c652:	d018      	beq.n	800c686 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	e853 3f00 	ldrex	r3, [r3]
 800c660:	613b      	str	r3, [r7, #16]
   return(result);
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c668:	627b      	str	r3, [r7, #36]	@ 0x24
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	461a      	mov	r2, r3
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	623b      	str	r3, [r7, #32]
 800c674:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c676:	69f9      	ldr	r1, [r7, #28]
 800c678:	6a3a      	ldr	r2, [r7, #32]
 800c67a:	e841 2300 	strex	r3, r2, [r1]
 800c67e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1e6      	bne.n	800c654 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c686:	88fb      	ldrh	r3, [r7, #6]
 800c688:	461a      	mov	r2, r3
 800c68a:	68b9      	ldr	r1, [r7, #8]
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f000 fed7 	bl	800d440 <UART_Start_Receive_DMA>
 800c692:	4603      	mov	r3, r0
 800c694:	e000      	b.n	800c698 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c696:	2302      	movs	r3, #2
  }
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3728      	adds	r7, #40	@ 0x28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b0ba      	sub	sp, #232	@ 0xe8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c6c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c6ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c6d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d115      	bne.n	800c708 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6e0:	f003 0320 	and.w	r3, r3, #32
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00f      	beq.n	800c708 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6ec:	f003 0320 	and.w	r3, r3, #32
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d009      	beq.n	800c708 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 8297 	beq.w	800cc2c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	4798      	blx	r3
      }
      return;
 800c706:	e291      	b.n	800cc2c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 8117 	beq.w	800c940 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d106      	bne.n	800c72c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c71e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c722:	4b85      	ldr	r3, [pc, #532]	@ (800c938 <HAL_UART_IRQHandler+0x298>)
 800c724:	4013      	ands	r3, r2
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 810a 	beq.w	800c940 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d011      	beq.n	800c75c <HAL_UART_IRQHandler+0xbc>
 800c738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c73c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00b      	beq.n	800c75c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2201      	movs	r2, #1
 800c74a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c752:	f043 0201 	orr.w	r2, r3, #1
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c760:	f003 0302 	and.w	r3, r3, #2
 800c764:	2b00      	cmp	r3, #0
 800c766:	d011      	beq.n	800c78c <HAL_UART_IRQHandler+0xec>
 800c768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00b      	beq.n	800c78c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2202      	movs	r2, #2
 800c77a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c782:	f043 0204 	orr.w	r2, r3, #4
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c790:	f003 0304 	and.w	r3, r3, #4
 800c794:	2b00      	cmp	r3, #0
 800c796:	d011      	beq.n	800c7bc <HAL_UART_IRQHandler+0x11c>
 800c798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00b      	beq.n	800c7bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2204      	movs	r2, #4
 800c7aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7b2:	f043 0202 	orr.w	r2, r3, #2
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c0:	f003 0308 	and.w	r3, r3, #8
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d017      	beq.n	800c7f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7cc:	f003 0320 	and.w	r3, r3, #32
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d105      	bne.n	800c7e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c7d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00b      	beq.n	800c7f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2208      	movs	r2, #8
 800c7e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7ee:	f043 0208 	orr.w	r2, r3, #8
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c7f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c800:	2b00      	cmp	r3, #0
 800c802:	d012      	beq.n	800c82a <HAL_UART_IRQHandler+0x18a>
 800c804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c808:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00c      	beq.n	800c82a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c820:	f043 0220 	orr.w	r2, r3, #32
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c830:	2b00      	cmp	r3, #0
 800c832:	f000 81fd 	beq.w	800cc30 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c83a:	f003 0320 	and.w	r3, r3, #32
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00d      	beq.n	800c85e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d007      	beq.n	800c85e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c852:	2b00      	cmp	r3, #0
 800c854:	d003      	beq.n	800c85e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c864:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c872:	2b40      	cmp	r3, #64	@ 0x40
 800c874:	d005      	beq.n	800c882 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c87a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d04f      	beq.n	800c922 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fea2 	bl	800d5cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c892:	2b40      	cmp	r3, #64	@ 0x40
 800c894:	d141      	bne.n	800c91a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3308      	adds	r3, #8
 800c89c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c8ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3308      	adds	r3, #8
 800c8be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c8c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c8c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c8ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c8da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1d9      	bne.n	800c896 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d013      	beq.n	800c912 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8ee:	4a13      	ldr	r2, [pc, #76]	@ (800c93c <HAL_UART_IRQHandler+0x29c>)
 800c8f0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fa fe16 	bl	8007528 <HAL_DMA_Abort_IT>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d017      	beq.n	800c932 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c90c:	4610      	mov	r0, r2
 800c90e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c910:	e00f      	b.n	800c932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f9b4 	bl	800cc80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c918:	e00b      	b.n	800c932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f9b0 	bl	800cc80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c920:	e007      	b.n	800c932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f9ac 	bl	800cc80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c930:	e17e      	b.n	800cc30 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c932:	bf00      	nop
    return;
 800c934:	e17c      	b.n	800cc30 <HAL_UART_IRQHandler+0x590>
 800c936:	bf00      	nop
 800c938:	04000120 	.word	0x04000120
 800c93c:	0800d92b 	.word	0x0800d92b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c944:	2b01      	cmp	r3, #1
 800c946:	f040 814c 	bne.w	800cbe2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c94a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c94e:	f003 0310 	and.w	r3, r3, #16
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 8145 	beq.w	800cbe2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c95c:	f003 0310 	and.w	r3, r3, #16
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 813e 	beq.w	800cbe2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2210      	movs	r2, #16
 800c96c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c978:	2b40      	cmp	r3, #64	@ 0x40
 800c97a:	f040 80b6 	bne.w	800caea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c98a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f000 8150 	beq.w	800cc34 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c99a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	f080 8148 	bcs.w	800cc34 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9b2:	69db      	ldr	r3, [r3, #28]
 800c9b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9b8:	f000 8086 	beq.w	800cac8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9c8:	e853 3f00 	ldrex	r3, [r3]
 800c9cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c9d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c9ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c9f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c9f6:	e841 2300 	strex	r3, r2, [r1]
 800c9fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c9fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1da      	bne.n	800c9bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3308      	adds	r3, #8
 800ca0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca10:	e853 3f00 	ldrex	r3, [r3]
 800ca14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ca16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca18:	f023 0301 	bic.w	r3, r3, #1
 800ca1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3308      	adds	r3, #8
 800ca26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ca2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ca32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca36:	e841 2300 	strex	r3, r2, [r1]
 800ca3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ca3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1e1      	bne.n	800ca06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3308      	adds	r3, #8
 800ca48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca4c:	e853 3f00 	ldrex	r3, [r3]
 800ca50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ca52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3308      	adds	r3, #8
 800ca62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ca66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca6e:	e841 2300 	strex	r3, r2, [r1]
 800ca72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ca74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e3      	bne.n	800ca42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2220      	movs	r2, #32
 800ca7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca90:	e853 3f00 	ldrex	r3, [r3]
 800ca94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ca96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca98:	f023 0310 	bic.w	r3, r3, #16
 800ca9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	461a      	mov	r2, r3
 800caa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cab2:	e841 2300 	strex	r3, r2, [r1]
 800cab6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1e4      	bne.n	800ca88 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fa fcc0 	bl	8007448 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2202      	movs	r2, #2
 800cacc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cada:	b29b      	uxth	r3, r3
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	b29b      	uxth	r3, r3
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f8d6 	bl	800cc94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cae8:	e0a4      	b.n	800cc34 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 8096 	beq.w	800cc38 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800cb0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 8091 	beq.w	800cc38 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1e:	e853 3f00 	ldrex	r3, [r3]
 800cb22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	461a      	mov	r2, r3
 800cb34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb38:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb40:	e841 2300 	strex	r3, r2, [r1]
 800cb44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e4      	bne.n	800cb16 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3308      	adds	r3, #8
 800cb52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb56:	e853 3f00 	ldrex	r3, [r3]
 800cb5a:	623b      	str	r3, [r7, #32]
   return(result);
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	f023 0301 	bic.w	r3, r3, #1
 800cb62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	3308      	adds	r3, #8
 800cb6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cb70:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb78:	e841 2300 	strex	r3, r2, [r1]
 800cb7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1e3      	bne.n	800cb4c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2220      	movs	r2, #32
 800cb88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	e853 3f00 	ldrex	r3, [r3]
 800cba4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f023 0310 	bic.w	r3, r3, #16
 800cbac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cbba:	61fb      	str	r3, [r7, #28]
 800cbbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbe:	69b9      	ldr	r1, [r7, #24]
 800cbc0:	69fa      	ldr	r2, [r7, #28]
 800cbc2:	e841 2300 	strex	r3, r2, [r1]
 800cbc6:	617b      	str	r3, [r7, #20]
   return(result);
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1e4      	bne.n	800cb98 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cbd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbd8:	4619      	mov	r1, r3
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f85a 	bl	800cc94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cbe0:	e02a      	b.n	800cc38 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00e      	beq.n	800cc0c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cbee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d008      	beq.n	800cc0c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d01c      	beq.n	800cc3c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	4798      	blx	r3
    }
    return;
 800cc0a:	e017      	b.n	800cc3c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cc0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d012      	beq.n	800cc3e <HAL_UART_IRQHandler+0x59e>
 800cc18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00c      	beq.n	800cc3e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fe96 	bl	800d956 <UART_EndTransmit_IT>
    return;
 800cc2a:	e008      	b.n	800cc3e <HAL_UART_IRQHandler+0x59e>
      return;
 800cc2c:	bf00      	nop
 800cc2e:	e006      	b.n	800cc3e <HAL_UART_IRQHandler+0x59e>
    return;
 800cc30:	bf00      	nop
 800cc32:	e004      	b.n	800cc3e <HAL_UART_IRQHandler+0x59e>
      return;
 800cc34:	bf00      	nop
 800cc36:	e002      	b.n	800cc3e <HAL_UART_IRQHandler+0x59e>
      return;
 800cc38:	bf00      	nop
 800cc3a:	e000      	b.n	800cc3e <HAL_UART_IRQHandler+0x59e>
    return;
 800cc3c:	bf00      	nop
  }

}
 800cc3e:	37e8      	adds	r7, #232	@ 0xe8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b088      	sub	sp, #32
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	689a      	ldr	r2, [r3, #8]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	431a      	orrs	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	69db      	ldr	r3, [r3, #28]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	4ba6      	ldr	r3, [pc, #664]	@ (800cf70 <UART_SetConfig+0x2c4>)
 800ccd8:	4013      	ands	r3, r2
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	6812      	ldr	r2, [r2, #0]
 800ccde:	6979      	ldr	r1, [r7, #20]
 800cce0:	430b      	orrs	r3, r1
 800cce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68da      	ldr	r2, [r3, #12]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	699b      	ldr	r3, [r3, #24]
 800ccfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	697a      	ldr	r2, [r7, #20]
 800cd1a:	430a      	orrs	r2, r1
 800cd1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a94      	ldr	r2, [pc, #592]	@ (800cf74 <UART_SetConfig+0x2c8>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d120      	bne.n	800cd6a <UART_SetConfig+0xbe>
 800cd28:	4b93      	ldr	r3, [pc, #588]	@ (800cf78 <UART_SetConfig+0x2cc>)
 800cd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd2e:	f003 0303 	and.w	r3, r3, #3
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d816      	bhi.n	800cd64 <UART_SetConfig+0xb8>
 800cd36:	a201      	add	r2, pc, #4	@ (adr r2, 800cd3c <UART_SetConfig+0x90>)
 800cd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3c:	0800cd4d 	.word	0x0800cd4d
 800cd40:	0800cd59 	.word	0x0800cd59
 800cd44:	0800cd53 	.word	0x0800cd53
 800cd48:	0800cd5f 	.word	0x0800cd5f
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	77fb      	strb	r3, [r7, #31]
 800cd50:	e150      	b.n	800cff4 <UART_SetConfig+0x348>
 800cd52:	2302      	movs	r3, #2
 800cd54:	77fb      	strb	r3, [r7, #31]
 800cd56:	e14d      	b.n	800cff4 <UART_SetConfig+0x348>
 800cd58:	2304      	movs	r3, #4
 800cd5a:	77fb      	strb	r3, [r7, #31]
 800cd5c:	e14a      	b.n	800cff4 <UART_SetConfig+0x348>
 800cd5e:	2308      	movs	r3, #8
 800cd60:	77fb      	strb	r3, [r7, #31]
 800cd62:	e147      	b.n	800cff4 <UART_SetConfig+0x348>
 800cd64:	2310      	movs	r3, #16
 800cd66:	77fb      	strb	r3, [r7, #31]
 800cd68:	e144      	b.n	800cff4 <UART_SetConfig+0x348>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a83      	ldr	r2, [pc, #524]	@ (800cf7c <UART_SetConfig+0x2d0>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d132      	bne.n	800cdda <UART_SetConfig+0x12e>
 800cd74:	4b80      	ldr	r3, [pc, #512]	@ (800cf78 <UART_SetConfig+0x2cc>)
 800cd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd7a:	f003 030c 	and.w	r3, r3, #12
 800cd7e:	2b0c      	cmp	r3, #12
 800cd80:	d828      	bhi.n	800cdd4 <UART_SetConfig+0x128>
 800cd82:	a201      	add	r2, pc, #4	@ (adr r2, 800cd88 <UART_SetConfig+0xdc>)
 800cd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd88:	0800cdbd 	.word	0x0800cdbd
 800cd8c:	0800cdd5 	.word	0x0800cdd5
 800cd90:	0800cdd5 	.word	0x0800cdd5
 800cd94:	0800cdd5 	.word	0x0800cdd5
 800cd98:	0800cdc9 	.word	0x0800cdc9
 800cd9c:	0800cdd5 	.word	0x0800cdd5
 800cda0:	0800cdd5 	.word	0x0800cdd5
 800cda4:	0800cdd5 	.word	0x0800cdd5
 800cda8:	0800cdc3 	.word	0x0800cdc3
 800cdac:	0800cdd5 	.word	0x0800cdd5
 800cdb0:	0800cdd5 	.word	0x0800cdd5
 800cdb4:	0800cdd5 	.word	0x0800cdd5
 800cdb8:	0800cdcf 	.word	0x0800cdcf
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	77fb      	strb	r3, [r7, #31]
 800cdc0:	e118      	b.n	800cff4 <UART_SetConfig+0x348>
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	77fb      	strb	r3, [r7, #31]
 800cdc6:	e115      	b.n	800cff4 <UART_SetConfig+0x348>
 800cdc8:	2304      	movs	r3, #4
 800cdca:	77fb      	strb	r3, [r7, #31]
 800cdcc:	e112      	b.n	800cff4 <UART_SetConfig+0x348>
 800cdce:	2308      	movs	r3, #8
 800cdd0:	77fb      	strb	r3, [r7, #31]
 800cdd2:	e10f      	b.n	800cff4 <UART_SetConfig+0x348>
 800cdd4:	2310      	movs	r3, #16
 800cdd6:	77fb      	strb	r3, [r7, #31]
 800cdd8:	e10c      	b.n	800cff4 <UART_SetConfig+0x348>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a68      	ldr	r2, [pc, #416]	@ (800cf80 <UART_SetConfig+0x2d4>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d120      	bne.n	800ce26 <UART_SetConfig+0x17a>
 800cde4:	4b64      	ldr	r3, [pc, #400]	@ (800cf78 <UART_SetConfig+0x2cc>)
 800cde6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cdee:	2b30      	cmp	r3, #48	@ 0x30
 800cdf0:	d013      	beq.n	800ce1a <UART_SetConfig+0x16e>
 800cdf2:	2b30      	cmp	r3, #48	@ 0x30
 800cdf4:	d814      	bhi.n	800ce20 <UART_SetConfig+0x174>
 800cdf6:	2b20      	cmp	r3, #32
 800cdf8:	d009      	beq.n	800ce0e <UART_SetConfig+0x162>
 800cdfa:	2b20      	cmp	r3, #32
 800cdfc:	d810      	bhi.n	800ce20 <UART_SetConfig+0x174>
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d002      	beq.n	800ce08 <UART_SetConfig+0x15c>
 800ce02:	2b10      	cmp	r3, #16
 800ce04:	d006      	beq.n	800ce14 <UART_SetConfig+0x168>
 800ce06:	e00b      	b.n	800ce20 <UART_SetConfig+0x174>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	77fb      	strb	r3, [r7, #31]
 800ce0c:	e0f2      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce0e:	2302      	movs	r3, #2
 800ce10:	77fb      	strb	r3, [r7, #31]
 800ce12:	e0ef      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce14:	2304      	movs	r3, #4
 800ce16:	77fb      	strb	r3, [r7, #31]
 800ce18:	e0ec      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce1a:	2308      	movs	r3, #8
 800ce1c:	77fb      	strb	r3, [r7, #31]
 800ce1e:	e0e9      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce20:	2310      	movs	r3, #16
 800ce22:	77fb      	strb	r3, [r7, #31]
 800ce24:	e0e6      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a56      	ldr	r2, [pc, #344]	@ (800cf84 <UART_SetConfig+0x2d8>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d120      	bne.n	800ce72 <UART_SetConfig+0x1c6>
 800ce30:	4b51      	ldr	r3, [pc, #324]	@ (800cf78 <UART_SetConfig+0x2cc>)
 800ce32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ce3a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce3c:	d013      	beq.n	800ce66 <UART_SetConfig+0x1ba>
 800ce3e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce40:	d814      	bhi.n	800ce6c <UART_SetConfig+0x1c0>
 800ce42:	2b80      	cmp	r3, #128	@ 0x80
 800ce44:	d009      	beq.n	800ce5a <UART_SetConfig+0x1ae>
 800ce46:	2b80      	cmp	r3, #128	@ 0x80
 800ce48:	d810      	bhi.n	800ce6c <UART_SetConfig+0x1c0>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d002      	beq.n	800ce54 <UART_SetConfig+0x1a8>
 800ce4e:	2b40      	cmp	r3, #64	@ 0x40
 800ce50:	d006      	beq.n	800ce60 <UART_SetConfig+0x1b4>
 800ce52:	e00b      	b.n	800ce6c <UART_SetConfig+0x1c0>
 800ce54:	2300      	movs	r3, #0
 800ce56:	77fb      	strb	r3, [r7, #31]
 800ce58:	e0cc      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	77fb      	strb	r3, [r7, #31]
 800ce5e:	e0c9      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce60:	2304      	movs	r3, #4
 800ce62:	77fb      	strb	r3, [r7, #31]
 800ce64:	e0c6      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce66:	2308      	movs	r3, #8
 800ce68:	77fb      	strb	r3, [r7, #31]
 800ce6a:	e0c3      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce6c:	2310      	movs	r3, #16
 800ce6e:	77fb      	strb	r3, [r7, #31]
 800ce70:	e0c0      	b.n	800cff4 <UART_SetConfig+0x348>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a44      	ldr	r2, [pc, #272]	@ (800cf88 <UART_SetConfig+0x2dc>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d125      	bne.n	800cec8 <UART_SetConfig+0x21c>
 800ce7c:	4b3e      	ldr	r3, [pc, #248]	@ (800cf78 <UART_SetConfig+0x2cc>)
 800ce7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce8a:	d017      	beq.n	800cebc <UART_SetConfig+0x210>
 800ce8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce90:	d817      	bhi.n	800cec2 <UART_SetConfig+0x216>
 800ce92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce96:	d00b      	beq.n	800ceb0 <UART_SetConfig+0x204>
 800ce98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce9c:	d811      	bhi.n	800cec2 <UART_SetConfig+0x216>
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d003      	beq.n	800ceaa <UART_SetConfig+0x1fe>
 800cea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cea6:	d006      	beq.n	800ceb6 <UART_SetConfig+0x20a>
 800cea8:	e00b      	b.n	800cec2 <UART_SetConfig+0x216>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	77fb      	strb	r3, [r7, #31]
 800ceae:	e0a1      	b.n	800cff4 <UART_SetConfig+0x348>
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	77fb      	strb	r3, [r7, #31]
 800ceb4:	e09e      	b.n	800cff4 <UART_SetConfig+0x348>
 800ceb6:	2304      	movs	r3, #4
 800ceb8:	77fb      	strb	r3, [r7, #31]
 800ceba:	e09b      	b.n	800cff4 <UART_SetConfig+0x348>
 800cebc:	2308      	movs	r3, #8
 800cebe:	77fb      	strb	r3, [r7, #31]
 800cec0:	e098      	b.n	800cff4 <UART_SetConfig+0x348>
 800cec2:	2310      	movs	r3, #16
 800cec4:	77fb      	strb	r3, [r7, #31]
 800cec6:	e095      	b.n	800cff4 <UART_SetConfig+0x348>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a2f      	ldr	r2, [pc, #188]	@ (800cf8c <UART_SetConfig+0x2e0>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d125      	bne.n	800cf1e <UART_SetConfig+0x272>
 800ced2:	4b29      	ldr	r3, [pc, #164]	@ (800cf78 <UART_SetConfig+0x2cc>)
 800ced4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ced8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cedc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cee0:	d017      	beq.n	800cf12 <UART_SetConfig+0x266>
 800cee2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cee6:	d817      	bhi.n	800cf18 <UART_SetConfig+0x26c>
 800cee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ceec:	d00b      	beq.n	800cf06 <UART_SetConfig+0x25a>
 800ceee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cef2:	d811      	bhi.n	800cf18 <UART_SetConfig+0x26c>
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d003      	beq.n	800cf00 <UART_SetConfig+0x254>
 800cef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cefc:	d006      	beq.n	800cf0c <UART_SetConfig+0x260>
 800cefe:	e00b      	b.n	800cf18 <UART_SetConfig+0x26c>
 800cf00:	2301      	movs	r3, #1
 800cf02:	77fb      	strb	r3, [r7, #31]
 800cf04:	e076      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf06:	2302      	movs	r3, #2
 800cf08:	77fb      	strb	r3, [r7, #31]
 800cf0a:	e073      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf0c:	2304      	movs	r3, #4
 800cf0e:	77fb      	strb	r3, [r7, #31]
 800cf10:	e070      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf12:	2308      	movs	r3, #8
 800cf14:	77fb      	strb	r3, [r7, #31]
 800cf16:	e06d      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf18:	2310      	movs	r3, #16
 800cf1a:	77fb      	strb	r3, [r7, #31]
 800cf1c:	e06a      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4a1b      	ldr	r2, [pc, #108]	@ (800cf90 <UART_SetConfig+0x2e4>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d138      	bne.n	800cf9a <UART_SetConfig+0x2ee>
 800cf28:	4b13      	ldr	r3, [pc, #76]	@ (800cf78 <UART_SetConfig+0x2cc>)
 800cf2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf2e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cf32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf36:	d017      	beq.n	800cf68 <UART_SetConfig+0x2bc>
 800cf38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf3c:	d82a      	bhi.n	800cf94 <UART_SetConfig+0x2e8>
 800cf3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf42:	d00b      	beq.n	800cf5c <UART_SetConfig+0x2b0>
 800cf44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf48:	d824      	bhi.n	800cf94 <UART_SetConfig+0x2e8>
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <UART_SetConfig+0x2aa>
 800cf4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf52:	d006      	beq.n	800cf62 <UART_SetConfig+0x2b6>
 800cf54:	e01e      	b.n	800cf94 <UART_SetConfig+0x2e8>
 800cf56:	2300      	movs	r3, #0
 800cf58:	77fb      	strb	r3, [r7, #31]
 800cf5a:	e04b      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf5c:	2302      	movs	r3, #2
 800cf5e:	77fb      	strb	r3, [r7, #31]
 800cf60:	e048      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf62:	2304      	movs	r3, #4
 800cf64:	77fb      	strb	r3, [r7, #31]
 800cf66:	e045      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf68:	2308      	movs	r3, #8
 800cf6a:	77fb      	strb	r3, [r7, #31]
 800cf6c:	e042      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf6e:	bf00      	nop
 800cf70:	efff69f3 	.word	0xefff69f3
 800cf74:	40011000 	.word	0x40011000
 800cf78:	40023800 	.word	0x40023800
 800cf7c:	40004400 	.word	0x40004400
 800cf80:	40004800 	.word	0x40004800
 800cf84:	40004c00 	.word	0x40004c00
 800cf88:	40005000 	.word	0x40005000
 800cf8c:	40011400 	.word	0x40011400
 800cf90:	40007800 	.word	0x40007800
 800cf94:	2310      	movs	r3, #16
 800cf96:	77fb      	strb	r3, [r7, #31]
 800cf98:	e02c      	b.n	800cff4 <UART_SetConfig+0x348>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a72      	ldr	r2, [pc, #456]	@ (800d168 <UART_SetConfig+0x4bc>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d125      	bne.n	800cff0 <UART_SetConfig+0x344>
 800cfa4:	4b71      	ldr	r3, [pc, #452]	@ (800d16c <UART_SetConfig+0x4c0>)
 800cfa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfaa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cfae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cfb2:	d017      	beq.n	800cfe4 <UART_SetConfig+0x338>
 800cfb4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cfb8:	d817      	bhi.n	800cfea <UART_SetConfig+0x33e>
 800cfba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfbe:	d00b      	beq.n	800cfd8 <UART_SetConfig+0x32c>
 800cfc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfc4:	d811      	bhi.n	800cfea <UART_SetConfig+0x33e>
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d003      	beq.n	800cfd2 <UART_SetConfig+0x326>
 800cfca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cfce:	d006      	beq.n	800cfde <UART_SetConfig+0x332>
 800cfd0:	e00b      	b.n	800cfea <UART_SetConfig+0x33e>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	77fb      	strb	r3, [r7, #31]
 800cfd6:	e00d      	b.n	800cff4 <UART_SetConfig+0x348>
 800cfd8:	2302      	movs	r3, #2
 800cfda:	77fb      	strb	r3, [r7, #31]
 800cfdc:	e00a      	b.n	800cff4 <UART_SetConfig+0x348>
 800cfde:	2304      	movs	r3, #4
 800cfe0:	77fb      	strb	r3, [r7, #31]
 800cfe2:	e007      	b.n	800cff4 <UART_SetConfig+0x348>
 800cfe4:	2308      	movs	r3, #8
 800cfe6:	77fb      	strb	r3, [r7, #31]
 800cfe8:	e004      	b.n	800cff4 <UART_SetConfig+0x348>
 800cfea:	2310      	movs	r3, #16
 800cfec:	77fb      	strb	r3, [r7, #31]
 800cfee:	e001      	b.n	800cff4 <UART_SetConfig+0x348>
 800cff0:	2310      	movs	r3, #16
 800cff2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cffc:	d15b      	bne.n	800d0b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cffe:	7ffb      	ldrb	r3, [r7, #31]
 800d000:	2b08      	cmp	r3, #8
 800d002:	d828      	bhi.n	800d056 <UART_SetConfig+0x3aa>
 800d004:	a201      	add	r2, pc, #4	@ (adr r2, 800d00c <UART_SetConfig+0x360>)
 800d006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00a:	bf00      	nop
 800d00c:	0800d031 	.word	0x0800d031
 800d010:	0800d039 	.word	0x0800d039
 800d014:	0800d041 	.word	0x0800d041
 800d018:	0800d057 	.word	0x0800d057
 800d01c:	0800d047 	.word	0x0800d047
 800d020:	0800d057 	.word	0x0800d057
 800d024:	0800d057 	.word	0x0800d057
 800d028:	0800d057 	.word	0x0800d057
 800d02c:	0800d04f 	.word	0x0800d04f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d030:	f7fc f98e 	bl	8009350 <HAL_RCC_GetPCLK1Freq>
 800d034:	61b8      	str	r0, [r7, #24]
        break;
 800d036:	e013      	b.n	800d060 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d038:	f7fc f99e 	bl	8009378 <HAL_RCC_GetPCLK2Freq>
 800d03c:	61b8      	str	r0, [r7, #24]
        break;
 800d03e:	e00f      	b.n	800d060 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d040:	4b4b      	ldr	r3, [pc, #300]	@ (800d170 <UART_SetConfig+0x4c4>)
 800d042:	61bb      	str	r3, [r7, #24]
        break;
 800d044:	e00c      	b.n	800d060 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d046:	f7fc f871 	bl	800912c <HAL_RCC_GetSysClockFreq>
 800d04a:	61b8      	str	r0, [r7, #24]
        break;
 800d04c:	e008      	b.n	800d060 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d04e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d052:	61bb      	str	r3, [r7, #24]
        break;
 800d054:	e004      	b.n	800d060 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d056:	2300      	movs	r3, #0
 800d058:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	77bb      	strb	r3, [r7, #30]
        break;
 800d05e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d074      	beq.n	800d150 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	005a      	lsls	r2, r3, #1
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	085b      	lsrs	r3, r3, #1
 800d070:	441a      	add	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	fbb2 f3f3 	udiv	r3, r2, r3
 800d07a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	2b0f      	cmp	r3, #15
 800d080:	d916      	bls.n	800d0b0 <UART_SetConfig+0x404>
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d088:	d212      	bcs.n	800d0b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	f023 030f 	bic.w	r3, r3, #15
 800d092:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	085b      	lsrs	r3, r3, #1
 800d098:	b29b      	uxth	r3, r3
 800d09a:	f003 0307 	and.w	r3, r3, #7
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	89fb      	ldrh	r3, [r7, #14]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	89fa      	ldrh	r2, [r7, #14]
 800d0ac:	60da      	str	r2, [r3, #12]
 800d0ae:	e04f      	b.n	800d150 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	77bb      	strb	r3, [r7, #30]
 800d0b4:	e04c      	b.n	800d150 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0b6:	7ffb      	ldrb	r3, [r7, #31]
 800d0b8:	2b08      	cmp	r3, #8
 800d0ba:	d828      	bhi.n	800d10e <UART_SetConfig+0x462>
 800d0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c4 <UART_SetConfig+0x418>)
 800d0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c2:	bf00      	nop
 800d0c4:	0800d0e9 	.word	0x0800d0e9
 800d0c8:	0800d0f1 	.word	0x0800d0f1
 800d0cc:	0800d0f9 	.word	0x0800d0f9
 800d0d0:	0800d10f 	.word	0x0800d10f
 800d0d4:	0800d0ff 	.word	0x0800d0ff
 800d0d8:	0800d10f 	.word	0x0800d10f
 800d0dc:	0800d10f 	.word	0x0800d10f
 800d0e0:	0800d10f 	.word	0x0800d10f
 800d0e4:	0800d107 	.word	0x0800d107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0e8:	f7fc f932 	bl	8009350 <HAL_RCC_GetPCLK1Freq>
 800d0ec:	61b8      	str	r0, [r7, #24]
        break;
 800d0ee:	e013      	b.n	800d118 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0f0:	f7fc f942 	bl	8009378 <HAL_RCC_GetPCLK2Freq>
 800d0f4:	61b8      	str	r0, [r7, #24]
        break;
 800d0f6:	e00f      	b.n	800d118 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0f8:	4b1d      	ldr	r3, [pc, #116]	@ (800d170 <UART_SetConfig+0x4c4>)
 800d0fa:	61bb      	str	r3, [r7, #24]
        break;
 800d0fc:	e00c      	b.n	800d118 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0fe:	f7fc f815 	bl	800912c <HAL_RCC_GetSysClockFreq>
 800d102:	61b8      	str	r0, [r7, #24]
        break;
 800d104:	e008      	b.n	800d118 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d10a:	61bb      	str	r3, [r7, #24]
        break;
 800d10c:	e004      	b.n	800d118 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d10e:	2300      	movs	r3, #0
 800d110:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	77bb      	strb	r3, [r7, #30]
        break;
 800d116:	bf00      	nop
    }

    if (pclk != 0U)
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d018      	beq.n	800d150 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	085a      	lsrs	r2, r3, #1
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	441a      	add	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d130:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	2b0f      	cmp	r3, #15
 800d136:	d909      	bls.n	800d14c <UART_SetConfig+0x4a0>
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d13e:	d205      	bcs.n	800d14c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	b29a      	uxth	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	60da      	str	r2, [r3, #12]
 800d14a:	e001      	b.n	800d150 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d15c:	7fbb      	ldrb	r3, [r7, #30]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3720      	adds	r7, #32
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	40007c00 	.word	0x40007c00
 800d16c:	40023800 	.word	0x40023800
 800d170:	00f42400 	.word	0x00f42400

0800d174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d180:	f003 0308 	and.w	r3, r3, #8
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00a      	beq.n	800d19e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	430a      	orrs	r2, r1
 800d19c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00a      	beq.n	800d1c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	430a      	orrs	r2, r1
 800d1be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c4:	f003 0302 	and.w	r3, r3, #2
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00a      	beq.n	800d1e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	430a      	orrs	r2, r1
 800d1e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e6:	f003 0304 	and.w	r3, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00a      	beq.n	800d204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	430a      	orrs	r2, r1
 800d202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d208:	f003 0310 	and.w	r3, r3, #16
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00a      	beq.n	800d226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	430a      	orrs	r2, r1
 800d224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d22a:	f003 0320 	and.w	r3, r3, #32
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00a      	beq.n	800d248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	430a      	orrs	r2, r1
 800d246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d250:	2b00      	cmp	r3, #0
 800d252:	d01a      	beq.n	800d28a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	430a      	orrs	r2, r1
 800d268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d26e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d272:	d10a      	bne.n	800d28a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	430a      	orrs	r2, r1
 800d288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d28e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00a      	beq.n	800d2ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	605a      	str	r2, [r3, #4]
  }
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08c      	sub	sp, #48	@ 0x30
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d2c8:	f7f9 fe9e 	bl	8007008 <HAL_GetTick>
 800d2cc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0308 	and.w	r3, r3, #8
 800d2d8:	2b08      	cmp	r3, #8
 800d2da:	d12e      	bne.n	800d33a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f83b 	bl	800d366 <UART_WaitOnFlagUntilTimeout>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d021      	beq.n	800d33a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	e853 3f00 	ldrex	r3, [r3]
 800d302:	60fb      	str	r3, [r7, #12]
   return(result);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d30a:	623b      	str	r3, [r7, #32]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	461a      	mov	r2, r3
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	61fb      	str	r3, [r7, #28]
 800d316:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d318:	69b9      	ldr	r1, [r7, #24]
 800d31a:	69fa      	ldr	r2, [r7, #28]
 800d31c:	e841 2300 	strex	r3, r2, [r1]
 800d320:	617b      	str	r3, [r7, #20]
   return(result);
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1e6      	bne.n	800d2f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2220      	movs	r2, #32
 800d32c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d336:	2303      	movs	r3, #3
 800d338:	e011      	b.n	800d35e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2220      	movs	r2, #32
 800d33e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2220      	movs	r2, #32
 800d344:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3728      	adds	r7, #40	@ 0x28
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b084      	sub	sp, #16
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	60f8      	str	r0, [r7, #12]
 800d36e:	60b9      	str	r1, [r7, #8]
 800d370:	603b      	str	r3, [r7, #0]
 800d372:	4613      	mov	r3, r2
 800d374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d376:	e04f      	b.n	800d418 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37e:	d04b      	beq.n	800d418 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d380:	f7f9 fe42 	bl	8007008 <HAL_GetTick>
 800d384:	4602      	mov	r2, r0
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	69ba      	ldr	r2, [r7, #24]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d302      	bcc.n	800d396 <UART_WaitOnFlagUntilTimeout+0x30>
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d101      	bne.n	800d39a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d396:	2303      	movs	r3, #3
 800d398:	e04e      	b.n	800d438 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 0304 	and.w	r3, r3, #4
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d037      	beq.n	800d418 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	2b80      	cmp	r3, #128	@ 0x80
 800d3ac:	d034      	beq.n	800d418 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	2b40      	cmp	r3, #64	@ 0x40
 800d3b2:	d031      	beq.n	800d418 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	f003 0308 	and.w	r3, r3, #8
 800d3be:	2b08      	cmp	r3, #8
 800d3c0:	d110      	bne.n	800d3e4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2208      	movs	r2, #8
 800d3c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f000 f8fe 	bl	800d5cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2208      	movs	r2, #8
 800d3d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e029      	b.n	800d438 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	69db      	ldr	r3, [r3, #28]
 800d3ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d3ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d3f2:	d111      	bne.n	800d418 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d3fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f000 f8e4 	bl	800d5cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2220      	movs	r2, #32
 800d408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d414:	2303      	movs	r3, #3
 800d416:	e00f      	b.n	800d438 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	69da      	ldr	r2, [r3, #28]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	4013      	ands	r3, r2
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	429a      	cmp	r2, r3
 800d426:	bf0c      	ite	eq
 800d428:	2301      	moveq	r3, #1
 800d42a:	2300      	movne	r3, #0
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	461a      	mov	r2, r3
 800d430:	79fb      	ldrb	r3, [r7, #7]
 800d432:	429a      	cmp	r2, r3
 800d434:	d0a0      	beq.n	800d378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b096      	sub	sp, #88	@ 0x58
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	4613      	mov	r3, r2
 800d44c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	88fa      	ldrh	r2, [r7, #6]
 800d458:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2222      	movs	r2, #34	@ 0x22
 800d468:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d470:	2b00      	cmp	r3, #0
 800d472:	d028      	beq.n	800d4c6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d478:	4a3e      	ldr	r2, [pc, #248]	@ (800d574 <UART_Start_Receive_DMA+0x134>)
 800d47a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d480:	4a3d      	ldr	r2, [pc, #244]	@ (800d578 <UART_Start_Receive_DMA+0x138>)
 800d482:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d488:	4a3c      	ldr	r2, [pc, #240]	@ (800d57c <UART_Start_Receive_DMA+0x13c>)
 800d48a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d490:	2200      	movs	r2, #0
 800d492:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3324      	adds	r3, #36	@ 0x24
 800d49e:	4619      	mov	r1, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	88fb      	ldrh	r3, [r7, #6]
 800d4a8:	f7f9 ff6e 	bl	8007388 <HAL_DMA_Start_IT>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d009      	beq.n	800d4c6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2210      	movs	r2, #16
 800d4b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2220      	movs	r2, #32
 800d4be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e051      	b.n	800d56a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d018      	beq.n	800d500 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d6:	e853 3f00 	ldrex	r3, [r3]
 800d4da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4ee:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d4f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4f4:	e841 2300 	strex	r3, r2, [r1]
 800d4f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d4fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e6      	bne.n	800d4ce <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3308      	adds	r3, #8
 800d506:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50a:	e853 3f00 	ldrex	r3, [r3]
 800d50e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d512:	f043 0301 	orr.w	r3, r3, #1
 800d516:	653b      	str	r3, [r7, #80]	@ 0x50
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3308      	adds	r3, #8
 800d51e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d520:	637a      	str	r2, [r7, #52]	@ 0x34
 800d522:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d524:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d526:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d528:	e841 2300 	strex	r3, r2, [r1]
 800d52c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1e5      	bne.n	800d500 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3308      	adds	r3, #8
 800d53a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	e853 3f00 	ldrex	r3, [r3]
 800d542:	613b      	str	r3, [r7, #16]
   return(result);
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d54a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3308      	adds	r3, #8
 800d552:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d554:	623a      	str	r2, [r7, #32]
 800d556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d558:	69f9      	ldr	r1, [r7, #28]
 800d55a:	6a3a      	ldr	r2, [r7, #32]
 800d55c:	e841 2300 	strex	r3, r2, [r1]
 800d560:	61bb      	str	r3, [r7, #24]
   return(result);
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1e5      	bne.n	800d534 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3758      	adds	r7, #88	@ 0x58
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	0800d747 	.word	0x0800d747
 800d578:	0800d86f 	.word	0x0800d86f
 800d57c:	0800d8ad 	.word	0x0800d8ad

0800d580 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d580:	b480      	push	{r7}
 800d582:	b089      	sub	sp, #36	@ 0x24
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	60bb      	str	r3, [r7, #8]
   return(result);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d59c:	61fb      	str	r3, [r7, #28]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	61bb      	str	r3, [r7, #24]
 800d5a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5aa:	6979      	ldr	r1, [r7, #20]
 800d5ac:	69ba      	ldr	r2, [r7, #24]
 800d5ae:	e841 2300 	strex	r3, r2, [r1]
 800d5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1e6      	bne.n	800d588 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2220      	movs	r2, #32
 800d5be:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d5c0:	bf00      	nop
 800d5c2:	3724      	adds	r7, #36	@ 0x24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b095      	sub	sp, #84	@ 0x54
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5dc:	e853 3f00 	ldrex	r3, [r3]
 800d5e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d5fa:	e841 2300 	strex	r3, r2, [r1]
 800d5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1e6      	bne.n	800d5d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3308      	adds	r3, #8
 800d60c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60e:	6a3b      	ldr	r3, [r7, #32]
 800d610:	e853 3f00 	ldrex	r3, [r3]
 800d614:	61fb      	str	r3, [r7, #28]
   return(result);
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	f023 0301 	bic.w	r3, r3, #1
 800d61c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3308      	adds	r3, #8
 800d624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d628:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d62c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d62e:	e841 2300 	strex	r3, r2, [r1]
 800d632:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1e5      	bne.n	800d606 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d118      	bne.n	800d674 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	e853 3f00 	ldrex	r3, [r3]
 800d64e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	f023 0310 	bic.w	r3, r3, #16
 800d656:	647b      	str	r3, [r7, #68]	@ 0x44
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	461a      	mov	r2, r3
 800d65e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d660:	61bb      	str	r3, [r7, #24]
 800d662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d664:	6979      	ldr	r1, [r7, #20]
 800d666:	69ba      	ldr	r2, [r7, #24]
 800d668:	e841 2300 	strex	r3, r2, [r1]
 800d66c:	613b      	str	r3, [r7, #16]
   return(result);
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1e6      	bne.n	800d642 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2220      	movs	r2, #32
 800d678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d688:	bf00      	nop
 800d68a:	3754      	adds	r7, #84	@ 0x54
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b090      	sub	sp, #64	@ 0x40
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	69db      	ldr	r3, [r3, #28]
 800d6a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6aa:	d037      	beq.n	800d71c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6be:	e853 3f00 	ldrex	r3, [r3]
 800d6c2:	623b      	str	r3, [r7, #32]
   return(result);
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d6ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d6cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6dc:	e841 2300 	strex	r3, r2, [r1]
 800d6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1e5      	bne.n	800d6b4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	e853 3f00 	ldrex	r3, [r3]
 800d6f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	461a      	mov	r2, r3
 800d704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d706:	61fb      	str	r3, [r7, #28]
 800d708:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70a:	69b9      	ldr	r1, [r7, #24]
 800d70c:	69fa      	ldr	r2, [r7, #28]
 800d70e:	e841 2300 	strex	r3, r2, [r1]
 800d712:	617b      	str	r3, [r7, #20]
   return(result);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1e6      	bne.n	800d6e8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d71a:	e002      	b.n	800d722 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d71c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d71e:	f7ff fa91 	bl	800cc44 <HAL_UART_TxCpltCallback>
}
 800d722:	bf00      	nop
 800d724:	3740      	adds	r7, #64	@ 0x40
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d736:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7ff fa8d 	bl	800cc58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d73e:	bf00      	nop
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b09c      	sub	sp, #112	@ 0x70
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d752:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	69db      	ldr	r3, [r3, #28]
 800d758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d75c:	d071      	beq.n	800d842 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d75e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d760:	2200      	movs	r2, #0
 800d762:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d76e:	e853 3f00 	ldrex	r3, [r3]
 800d772:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d776:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d77a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d77c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d784:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d786:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d78a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e6      	bne.n	800d766 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3308      	adds	r3, #8
 800d79e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a2:	e853 3f00 	ldrex	r3, [r3]
 800d7a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7aa:	f023 0301 	bic.w	r3, r3, #1
 800d7ae:	667b      	str	r3, [r7, #100]	@ 0x64
 800d7b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3308      	adds	r3, #8
 800d7b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d7b8:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d7be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7c0:	e841 2300 	strex	r3, r2, [r1]
 800d7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1e5      	bne.n	800d798 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d6:	e853 3f00 	ldrex	r3, [r3]
 800d7da:	623b      	str	r3, [r7, #32]
   return(result);
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800d7e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	3308      	adds	r3, #8
 800d7ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d7ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800d7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7f4:	e841 2300 	strex	r3, r2, [r1]
 800d7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d1e5      	bne.n	800d7cc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d802:	2220      	movs	r2, #32
 800d804:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d80a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d118      	bne.n	800d842 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	e853 3f00 	ldrex	r3, [r3]
 800d81c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f023 0310 	bic.w	r3, r3, #16
 800d824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d82e:	61fb      	str	r3, [r7, #28]
 800d830:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d832:	69b9      	ldr	r1, [r7, #24]
 800d834:	69fa      	ldr	r2, [r7, #28]
 800d836:	e841 2300 	strex	r3, r2, [r1]
 800d83a:	617b      	str	r3, [r7, #20]
   return(result);
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1e6      	bne.n	800d810 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d844:	2200      	movs	r2, #0
 800d846:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d84a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d107      	bne.n	800d860 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d852:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d856:	4619      	mov	r1, r3
 800d858:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d85a:	f7ff fa1b 	bl	800cc94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d85e:	e002      	b.n	800d866 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d860:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d862:	f7f5 ffd3 	bl	800380c <HAL_UART_RxCpltCallback>
}
 800d866:	bf00      	nop
 800d868:	3770      	adds	r7, #112	@ 0x70
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d87a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2201      	movs	r2, #1
 800d880:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d886:	2b01      	cmp	r3, #1
 800d888:	d109      	bne.n	800d89e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d890:	085b      	lsrs	r3, r3, #1
 800d892:	b29b      	uxth	r3, r3
 800d894:	4619      	mov	r1, r3
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff f9fc 	bl	800cc94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d89c:	e002      	b.n	800d8a4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7ff f9e4 	bl	800cc6c <HAL_UART_RxHalfCpltCallback>
}
 800d8a4:	bf00      	nop
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8d2:	2b80      	cmp	r3, #128	@ 0x80
 800d8d4:	d109      	bne.n	800d8ea <UART_DMAError+0x3e>
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	2b21      	cmp	r3, #33	@ 0x21
 800d8da:	d106      	bne.n	800d8ea <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d8e4:	6978      	ldr	r0, [r7, #20]
 800d8e6:	f7ff fe4b 	bl	800d580 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8f4:	2b40      	cmp	r3, #64	@ 0x40
 800d8f6:	d109      	bne.n	800d90c <UART_DMAError+0x60>
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2b22      	cmp	r3, #34	@ 0x22
 800d8fc:	d106      	bne.n	800d90c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	2200      	movs	r2, #0
 800d902:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d906:	6978      	ldr	r0, [r7, #20]
 800d908:	f7ff fe60 	bl	800d5cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d912:	f043 0210 	orr.w	r2, r3, #16
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d91c:	6978      	ldr	r0, [r7, #20]
 800d91e:	f7ff f9af 	bl	800cc80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d922:	bf00      	nop
 800d924:	3718      	adds	r7, #24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b084      	sub	sp, #16
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f7ff f999 	bl	800cc80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d94e:	bf00      	nop
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b088      	sub	sp, #32
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	e853 3f00 	ldrex	r3, [r3]
 800d96a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d972:	61fb      	str	r3, [r7, #28]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	461a      	mov	r2, r3
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	61bb      	str	r3, [r7, #24]
 800d97e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d980:	6979      	ldr	r1, [r7, #20]
 800d982:	69ba      	ldr	r2, [r7, #24]
 800d984:	e841 2300 	strex	r3, r2, [r1]
 800d988:	613b      	str	r3, [r7, #16]
   return(result);
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d1e6      	bne.n	800d95e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2220      	movs	r2, #32
 800d994:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff f951 	bl	800cc44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9a2:	bf00      	nop
 800d9a4:	3720      	adds	r7, #32
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9ac:	b084      	sub	sp, #16
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b084      	sub	sp, #16
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
 800d9b6:	f107 001c 	add.w	r0, r7, #28
 800d9ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d121      	bne.n	800da0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68da      	ldr	r2, [r3, #12]
 800d9d6:	4b21      	ldr	r3, [pc, #132]	@ (800da5c <USB_CoreInit+0xb0>)
 800d9d8:	4013      	ands	r3, r2
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d9ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d105      	bne.n	800d9fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fa92 	bl	800df28 <USB_CoreReset>
 800da04:	4603      	mov	r3, r0
 800da06:	73fb      	strb	r3, [r7, #15]
 800da08:	e010      	b.n	800da2c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fa86 	bl	800df28 <USB_CoreReset>
 800da1c:	4603      	mov	r3, r0
 800da1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800da2c:	7fbb      	ldrb	r3, [r7, #30]
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d10b      	bne.n	800da4a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	f043 0206 	orr.w	r2, r3, #6
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	f043 0220 	orr.w	r2, r3, #32
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da56:	b004      	add	sp, #16
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	ffbdffbf 	.word	0xffbdffbf

0800da60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	f023 0201 	bic.w	r2, r3, #1
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	370c      	adds	r7, #12
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr

0800da82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b084      	sub	sp, #16
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
 800da8a:	460b      	mov	r3, r1
 800da8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800da8e:	2300      	movs	r3, #0
 800da90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800da9e:	78fb      	ldrb	r3, [r7, #3]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d115      	bne.n	800dad0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dab0:	200a      	movs	r0, #10
 800dab2:	f7f9 fab5 	bl	8007020 <HAL_Delay>
      ms += 10U;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	330a      	adds	r3, #10
 800daba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fa25 	bl	800df0c <USB_GetMode>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d01e      	beq.n	800db06 <USB_SetCurrentMode+0x84>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2bc7      	cmp	r3, #199	@ 0xc7
 800dacc:	d9f0      	bls.n	800dab0 <USB_SetCurrentMode+0x2e>
 800dace:	e01a      	b.n	800db06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dad0:	78fb      	ldrb	r3, [r7, #3]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d115      	bne.n	800db02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dae2:	200a      	movs	r0, #10
 800dae4:	f7f9 fa9c 	bl	8007020 <HAL_Delay>
      ms += 10U;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	330a      	adds	r3, #10
 800daec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fa0c 	bl	800df0c <USB_GetMode>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d005      	beq.n	800db06 <USB_SetCurrentMode+0x84>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2bc7      	cmp	r3, #199	@ 0xc7
 800dafe:	d9f0      	bls.n	800dae2 <USB_SetCurrentMode+0x60>
 800db00:	e001      	b.n	800db06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db02:	2301      	movs	r3, #1
 800db04:	e005      	b.n	800db12 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2bc8      	cmp	r3, #200	@ 0xc8
 800db0a:	d101      	bne.n	800db10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db0c:	2301      	movs	r3, #1
 800db0e:	e000      	b.n	800db12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
	...

0800db1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db1c:	b084      	sub	sp, #16
 800db1e:	b580      	push	{r7, lr}
 800db20:	b086      	sub	sp, #24
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800db2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db36:	2300      	movs	r3, #0
 800db38:	613b      	str	r3, [r7, #16]
 800db3a:	e009      	b.n	800db50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	3340      	adds	r3, #64	@ 0x40
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4413      	add	r3, r2
 800db46:	2200      	movs	r2, #0
 800db48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	3301      	adds	r3, #1
 800db4e:	613b      	str	r3, [r7, #16]
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	2b0e      	cmp	r3, #14
 800db54:	d9f2      	bls.n	800db3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d11c      	bne.n	800db98 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db6c:	f043 0302 	orr.w	r3, r3, #2
 800db70:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	e005      	b.n	800dba4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dbaa:	461a      	mov	r2, r3
 800dbac:	2300      	movs	r3, #0
 800dbae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dbb0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d10d      	bne.n	800dbd4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dbb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d104      	bne.n	800dbca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f968 	bl	800de98 <USB_SetDevSpeed>
 800dbc8:	e008      	b.n	800dbdc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dbca:	2101      	movs	r1, #1
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 f963 	bl	800de98 <USB_SetDevSpeed>
 800dbd2:	e003      	b.n	800dbdc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dbd4:	2103      	movs	r1, #3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f95e 	bl	800de98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dbdc:	2110      	movs	r1, #16
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 f8fa 	bl	800ddd8 <USB_FlushTxFifo>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f924 	bl	800de3c <USB_FlushRxFifo>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc04:	461a      	mov	r2, r3
 800dc06:	2300      	movs	r3, #0
 800dc08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc10:	461a      	mov	r2, r3
 800dc12:	2300      	movs	r3, #0
 800dc14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	2300      	movs	r3, #0
 800dc20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc22:	2300      	movs	r3, #0
 800dc24:	613b      	str	r3, [r7, #16]
 800dc26:	e043      	b.n	800dcb0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	015a      	lsls	r2, r3, #5
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	4413      	add	r3, r2
 800dc30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc3e:	d118      	bne.n	800dc72 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10a      	bne.n	800dc5c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc52:	461a      	mov	r2, r3
 800dc54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	e013      	b.n	800dc84 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	015a      	lsls	r2, r3, #5
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	4413      	add	r3, r2
 800dc64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc68:	461a      	mov	r2, r3
 800dc6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dc6e:	6013      	str	r3, [r2, #0]
 800dc70:	e008      	b.n	800dc84 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	015a      	lsls	r2, r3, #5
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	4413      	add	r3, r2
 800dc7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc7e:	461a      	mov	r2, r3
 800dc80:	2300      	movs	r3, #0
 800dc82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	015a      	lsls	r2, r3, #5
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	4413      	add	r3, r2
 800dc8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc90:	461a      	mov	r2, r3
 800dc92:	2300      	movs	r3, #0
 800dc94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	015a      	lsls	r2, r3, #5
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dca2:	461a      	mov	r2, r3
 800dca4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dca8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	3301      	adds	r3, #1
 800dcae:	613b      	str	r3, [r7, #16]
 800dcb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d3b5      	bcc.n	800dc28 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	613b      	str	r3, [r7, #16]
 800dcc0:	e043      	b.n	800dd4a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	015a      	lsls	r2, r3, #5
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dcd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dcd8:	d118      	bne.n	800dd0c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10a      	bne.n	800dcf6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	015a      	lsls	r2, r3, #5
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	4413      	add	r3, r2
 800dce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcec:	461a      	mov	r2, r3
 800dcee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dcf2:	6013      	str	r3, [r2, #0]
 800dcf4:	e013      	b.n	800dd1e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	015a      	lsls	r2, r3, #5
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd02:	461a      	mov	r2, r3
 800dd04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dd08:	6013      	str	r3, [r2, #0]
 800dd0a:	e008      	b.n	800dd1e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	015a      	lsls	r2, r3, #5
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	4413      	add	r3, r2
 800dd14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd18:	461a      	mov	r2, r3
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	015a      	lsls	r2, r3, #5
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	4413      	add	r3, r2
 800dd26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	015a      	lsls	r2, r3, #5
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4413      	add	r3, r2
 800dd38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dd42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	3301      	adds	r3, #1
 800dd48:	613b      	str	r3, [r7, #16]
 800dd4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd4e:	461a      	mov	r2, r3
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d3b5      	bcc.n	800dcc2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dd76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dd78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d105      	bne.n	800dd8c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	699b      	ldr	r3, [r3, #24]
 800dd84:	f043 0210 	orr.w	r2, r3, #16
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	699a      	ldr	r2, [r3, #24]
 800dd90:	4b0f      	ldr	r3, [pc, #60]	@ (800ddd0 <USB_DevInit+0x2b4>)
 800dd92:	4313      	orrs	r3, r2
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dd98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d005      	beq.n	800ddac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	f043 0208 	orr.w	r2, r3, #8
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ddac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d105      	bne.n	800ddc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	699a      	ldr	r2, [r3, #24]
 800ddb8:	4b06      	ldr	r3, [pc, #24]	@ (800ddd4 <USB_DevInit+0x2b8>)
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddcc:	b004      	add	sp, #16
 800ddce:	4770      	bx	lr
 800ddd0:	803c3800 	.word	0x803c3800
 800ddd4:	40000004 	.word	0x40000004

0800ddd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dde2:	2300      	movs	r3, #0
 800dde4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3301      	adds	r3, #1
 800ddea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ddf2:	d901      	bls.n	800ddf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	e01b      	b.n	800de30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	daf2      	bge.n	800dde6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de00:	2300      	movs	r3, #0
 800de02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	019b      	lsls	r3, r3, #6
 800de08:	f043 0220 	orr.w	r2, r3, #32
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	3301      	adds	r3, #1
 800de14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de1c:	d901      	bls.n	800de22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e006      	b.n	800de30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	f003 0320 	and.w	r3, r3, #32
 800de2a:	2b20      	cmp	r3, #32
 800de2c:	d0f0      	beq.n	800de10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3301      	adds	r3, #1
 800de4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de54:	d901      	bls.n	800de5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800de56:	2303      	movs	r3, #3
 800de58:	e018      	b.n	800de8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	691b      	ldr	r3, [r3, #16]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	daf2      	bge.n	800de48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800de62:	2300      	movs	r3, #0
 800de64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2210      	movs	r2, #16
 800de6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	3301      	adds	r3, #1
 800de70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de78:	d901      	bls.n	800de7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800de7a:	2303      	movs	r3, #3
 800de7c:	e006      	b.n	800de8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	f003 0310 	and.w	r3, r3, #16
 800de86:	2b10      	cmp	r3, #16
 800de88:	d0f0      	beq.n	800de6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800de8a:	2300      	movs	r3, #0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3714      	adds	r7, #20
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	78fb      	ldrb	r3, [r7, #3]
 800deb2:	68f9      	ldr	r1, [r7, #12]
 800deb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800deb8:	4313      	orrs	r3, r2
 800deba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3714      	adds	r7, #20
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800deca:	b480      	push	{r7}
 800decc:	b085      	sub	sp, #20
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dee4:	f023 0303 	bic.w	r3, r3, #3
 800dee8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800def8:	f043 0302 	orr.w	r3, r3, #2
 800defc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	f003 0301 	and.w	r3, r3, #1
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df30:	2300      	movs	r3, #0
 800df32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3301      	adds	r3, #1
 800df38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df40:	d901      	bls.n	800df46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800df42:	2303      	movs	r3, #3
 800df44:	e01b      	b.n	800df7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	691b      	ldr	r3, [r3, #16]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	daf2      	bge.n	800df34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	691b      	ldr	r3, [r3, #16]
 800df56:	f043 0201 	orr.w	r2, r3, #1
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3301      	adds	r3, #1
 800df62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df6a:	d901      	bls.n	800df70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800df6c:	2303      	movs	r3, #3
 800df6e:	e006      	b.n	800df7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	f003 0301 	and.w	r3, r3, #1
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d0f0      	beq.n	800df5e <USB_CoreReset+0x36>

  return HAL_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
	...

0800df8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800df90:	4904      	ldr	r1, [pc, #16]	@ (800dfa4 <MX_FATFS_Init+0x18>)
 800df92:	4805      	ldr	r0, [pc, #20]	@ (800dfa8 <MX_FATFS_Init+0x1c>)
 800df94:	f004 f97a 	bl	801228c <FATFS_LinkDriver>
 800df98:	4603      	mov	r3, r0
 800df9a:	461a      	mov	r2, r3
 800df9c:	4b03      	ldr	r3, [pc, #12]	@ (800dfac <MX_FATFS_Init+0x20>)
 800df9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dfa0:	bf00      	nop
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	2000c27c 	.word	0x2000c27c
 800dfa8:	20000060 	.word	0x20000060
 800dfac:	2000c278 	.word	0x2000c278

0800dfb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dfb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800dfca:	79fb      	ldrb	r3, [r7, #7]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f000 f9d7 	bl	800e380 <USER_SPI_initialize>
 800dfd2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 fabd 	bl	800e568 <USER_SPI_status>
 800dfee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60b9      	str	r1, [r7, #8]
 800e000:	607a      	str	r2, [r7, #4]
 800e002:	603b      	str	r3, [r7, #0]
 800e004:	4603      	mov	r3, r0
 800e006:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800e008:	7bf8      	ldrb	r0, [r7, #15]
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	68b9      	ldr	r1, [r7, #8]
 800e010:	f000 fac0 	bl	800e594 <USER_SPI_read>
 800e014:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]
 800e028:	603b      	str	r3, [r7, #0]
 800e02a:	4603      	mov	r3, r0
 800e02c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800e02e:	7bf8      	ldrb	r0, [r7, #15]
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	68b9      	ldr	r1, [r7, #8]
 800e036:	f000 fb13 	bl	800e660 <USER_SPI_write>
 800e03a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	603a      	str	r2, [r7, #0]
 800e04e:	71fb      	strb	r3, [r7, #7]
 800e050:	460b      	mov	r3, r1
 800e052:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800e054:	79b9      	ldrb	r1, [r7, #6]
 800e056:	79fb      	ldrb	r3, [r7, #7]
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f000 fb7c 	bl	800e758 <USER_SPI_ioctl>
 800e060:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
	...

0800e06c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800e074:	f7f8 ffc8 	bl	8007008 <HAL_GetTick>
 800e078:	4603      	mov	r3, r0
 800e07a:	4a04      	ldr	r2, [pc, #16]	@ (800e08c <SPI_Timer_On+0x20>)
 800e07c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800e07e:	4a04      	ldr	r2, [pc, #16]	@ (800e090 <SPI_Timer_On+0x24>)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6013      	str	r3, [r2, #0]
}
 800e084:	bf00      	nop
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	2000c288 	.word	0x2000c288
 800e090:	2000c28c 	.word	0x2000c28c

0800e094 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800e094:	b580      	push	{r7, lr}
 800e096:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800e098:	f7f8 ffb6 	bl	8007008 <HAL_GetTick>
 800e09c:	4602      	mov	r2, r0
 800e09e:	4b06      	ldr	r3, [pc, #24]	@ (800e0b8 <SPI_Timer_Status+0x24>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	1ad2      	subs	r2, r2, r3
 800e0a4:	4b05      	ldr	r3, [pc, #20]	@ (800e0bc <SPI_Timer_Status+0x28>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	bf34      	ite	cc
 800e0ac:	2301      	movcc	r3, #1
 800e0ae:	2300      	movcs	r3, #0
 800e0b0:	b2db      	uxtb	r3, r3
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	2000c288 	.word	0x2000c288
 800e0bc:	2000c28c 	.word	0x2000c28c

0800e0c0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af02      	add	r7, sp, #8
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800e0ca:	f107 020f 	add.w	r2, r7, #15
 800e0ce:	1df9      	adds	r1, r7, #7
 800e0d0:	2332      	movs	r3, #50	@ 0x32
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	4804      	ldr	r0, [pc, #16]	@ (800e0e8 <xchg_spi+0x28>)
 800e0d8:	f7fb ffa4 	bl	800a024 <HAL_SPI_TransmitReceive>
    return rxDat;
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	2000b2b4 	.word	0x2000b2b4

0800e0ec <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800e0ec:	b590      	push	{r4, r7, lr}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	60fb      	str	r3, [r7, #12]
 800e0fa:	e00a      	b.n	800e112 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	18d4      	adds	r4, r2, r3
 800e102:	20ff      	movs	r0, #255	@ 0xff
 800e104:	f7ff ffdc 	bl	800e0c0 <xchg_spi>
 800e108:	4603      	mov	r3, r0
 800e10a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	3301      	adds	r3, #1
 800e110:	60fb      	str	r3, [r7, #12]
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	429a      	cmp	r2, r3
 800e118:	d3f0      	bcc.n	800e0fc <rcvr_spi_multi+0x10>
	}
}
 800e11a:	bf00      	nop
 800e11c:	bf00      	nop
 800e11e:	3714      	adds	r7, #20
 800e120:	46bd      	mov	sp, r7
 800e122:	bd90      	pop	{r4, r7, pc}

0800e124 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	b29a      	uxth	r2, r3
 800e132:	f04f 33ff 	mov.w	r3, #4294967295
 800e136:	6879      	ldr	r1, [r7, #4]
 800e138:	4803      	ldr	r0, [pc, #12]	@ (800e148 <xmit_spi_multi+0x24>)
 800e13a:	f7fb fdfe 	bl	8009d3a <HAL_SPI_Transmit>
}
 800e13e:	bf00      	nop
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	2000b2b4 	.word	0x2000b2b4

0800e14c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800e154:	f7f8 ff58 	bl	8007008 <HAL_GetTick>
 800e158:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800e15e:	20ff      	movs	r0, #255	@ 0xff
 800e160:	f7ff ffae 	bl	800e0c0 <xchg_spi>
 800e164:	4603      	mov	r3, r0
 800e166:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800e168:	7bfb      	ldrb	r3, [r7, #15]
 800e16a:	2bff      	cmp	r3, #255	@ 0xff
 800e16c:	d007      	beq.n	800e17e <wait_ready+0x32>
 800e16e:	f7f8 ff4b 	bl	8007008 <HAL_GetTick>
 800e172:	4602      	mov	r2, r0
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	693a      	ldr	r2, [r7, #16]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d8ef      	bhi.n	800e15e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
 800e180:	2bff      	cmp	r3, #255	@ 0xff
 800e182:	bf0c      	ite	eq
 800e184:	2301      	moveq	r3, #1
 800e186:	2300      	movne	r3, #0
 800e188:	b2db      	uxtb	r3, r3
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
	...

0800e194 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800e198:	2201      	movs	r2, #1
 800e19a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e19e:	4804      	ldr	r0, [pc, #16]	@ (800e1b0 <despiselect+0x1c>)
 800e1a0:	f7f9 fe12 	bl	8007dc8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800e1a4:	20ff      	movs	r0, #255	@ 0xff
 800e1a6:	f7ff ff8b 	bl	800e0c0 <xchg_spi>

}
 800e1aa:	bf00      	nop
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	40020400 	.word	0x40020400

0800e1b4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e1be:	480a      	ldr	r0, [pc, #40]	@ (800e1e8 <spiselect+0x34>)
 800e1c0:	f7f9 fe02 	bl	8007dc8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800e1c4:	20ff      	movs	r0, #255	@ 0xff
 800e1c6:	f7ff ff7b 	bl	800e0c0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800e1ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e1ce:	f7ff ffbd 	bl	800e14c <wait_ready>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <spiselect+0x28>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e002      	b.n	800e1e2 <spiselect+0x2e>

	despiselect();
 800e1dc:	f7ff ffda 	bl	800e194 <despiselect>
	return 0;	/* Timeout */
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	40020400 	.word	0x40020400

0800e1ec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800e1f6:	20c8      	movs	r0, #200	@ 0xc8
 800e1f8:	f7ff ff38 	bl	800e06c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800e1fc:	20ff      	movs	r0, #255	@ 0xff
 800e1fe:	f7ff ff5f 	bl	800e0c0 <xchg_spi>
 800e202:	4603      	mov	r3, r0
 800e204:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	2bff      	cmp	r3, #255	@ 0xff
 800e20a:	d104      	bne.n	800e216 <rcvr_datablock+0x2a>
 800e20c:	f7ff ff42 	bl	800e094 <SPI_Timer_Status>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1f2      	bne.n	800e1fc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800e216:	7bfb      	ldrb	r3, [r7, #15]
 800e218:	2bfe      	cmp	r3, #254	@ 0xfe
 800e21a:	d001      	beq.n	800e220 <rcvr_datablock+0x34>
 800e21c:	2300      	movs	r3, #0
 800e21e:	e00a      	b.n	800e236 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7ff ff62 	bl	800e0ec <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800e228:	20ff      	movs	r0, #255	@ 0xff
 800e22a:	f7ff ff49 	bl	800e0c0 <xchg_spi>
 800e22e:	20ff      	movs	r0, #255	@ 0xff
 800e230:	f7ff ff46 	bl	800e0c0 <xchg_spi>

	return 1;						/* Function succeeded */
 800e234:	2301      	movs	r3, #1
}
 800e236:	4618      	mov	r0, r3
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b084      	sub	sp, #16
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
 800e246:	460b      	mov	r3, r1
 800e248:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800e24a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e24e:	f7ff ff7d 	bl	800e14c <wait_ready>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d101      	bne.n	800e25c <xmit_datablock+0x1e>
 800e258:	2300      	movs	r3, #0
 800e25a:	e01e      	b.n	800e29a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800e25c:	78fb      	ldrb	r3, [r7, #3]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff ff2e 	bl	800e0c0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800e264:	78fb      	ldrb	r3, [r7, #3]
 800e266:	2bfd      	cmp	r3, #253	@ 0xfd
 800e268:	d016      	beq.n	800e298 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800e26a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7ff ff58 	bl	800e124 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800e274:	20ff      	movs	r0, #255	@ 0xff
 800e276:	f7ff ff23 	bl	800e0c0 <xchg_spi>
 800e27a:	20ff      	movs	r0, #255	@ 0xff
 800e27c:	f7ff ff20 	bl	800e0c0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800e280:	20ff      	movs	r0, #255	@ 0xff
 800e282:	f7ff ff1d 	bl	800e0c0 <xchg_spi>
 800e286:	4603      	mov	r3, r0
 800e288:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	f003 031f 	and.w	r3, r3, #31
 800e290:	2b05      	cmp	r3, #5
 800e292:	d001      	beq.n	800e298 <xmit_datablock+0x5a>
 800e294:	2300      	movs	r3, #0
 800e296:	e000      	b.n	800e29a <xmit_datablock+0x5c>
	}
	return 1;
 800e298:	2301      	movs	r3, #1
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b084      	sub	sp, #16
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	6039      	str	r1, [r7, #0]
 800e2ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800e2ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	da0e      	bge.n	800e2d4 <send_cmd+0x32>
		cmd &= 0x7F;
 800e2b6:	79fb      	ldrb	r3, [r7, #7]
 800e2b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2bc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800e2be:	2100      	movs	r1, #0
 800e2c0:	2037      	movs	r0, #55	@ 0x37
 800e2c2:	f7ff ffee 	bl	800e2a2 <send_cmd>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800e2ca:	7bbb      	ldrb	r3, [r7, #14]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d901      	bls.n	800e2d4 <send_cmd+0x32>
 800e2d0:	7bbb      	ldrb	r3, [r7, #14]
 800e2d2:	e051      	b.n	800e378 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800e2d4:	79fb      	ldrb	r3, [r7, #7]
 800e2d6:	2b0c      	cmp	r3, #12
 800e2d8:	d008      	beq.n	800e2ec <send_cmd+0x4a>
		despiselect();
 800e2da:	f7ff ff5b 	bl	800e194 <despiselect>
		if (!spiselect()) return 0xFF;
 800e2de:	f7ff ff69 	bl	800e1b4 <spiselect>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d101      	bne.n	800e2ec <send_cmd+0x4a>
 800e2e8:	23ff      	movs	r3, #255	@ 0xff
 800e2ea:	e045      	b.n	800e378 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff fee3 	bl	800e0c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	0e1b      	lsrs	r3, r3, #24
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	4618      	mov	r0, r3
 800e302:	f7ff fedd 	bl	800e0c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	0c1b      	lsrs	r3, r3, #16
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7ff fed7 	bl	800e0c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	0a1b      	lsrs	r3, r3, #8
 800e316:	b2db      	uxtb	r3, r3
 800e318:	4618      	mov	r0, r3
 800e31a:	f7ff fed1 	bl	800e0c0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	b2db      	uxtb	r3, r3
 800e322:	4618      	mov	r0, r3
 800e324:	f7ff fecc 	bl	800e0c0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800e328:	2301      	movs	r3, #1
 800e32a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <send_cmd+0x94>
 800e332:	2395      	movs	r3, #149	@ 0x95
 800e334:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800e336:	79fb      	ldrb	r3, [r7, #7]
 800e338:	2b08      	cmp	r3, #8
 800e33a:	d101      	bne.n	800e340 <send_cmd+0x9e>
 800e33c:	2387      	movs	r3, #135	@ 0x87
 800e33e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800e340:	7bfb      	ldrb	r3, [r7, #15]
 800e342:	4618      	mov	r0, r3
 800e344:	f7ff febc 	bl	800e0c0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800e348:	79fb      	ldrb	r3, [r7, #7]
 800e34a:	2b0c      	cmp	r3, #12
 800e34c:	d102      	bne.n	800e354 <send_cmd+0xb2>
 800e34e:	20ff      	movs	r0, #255	@ 0xff
 800e350:	f7ff feb6 	bl	800e0c0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800e354:	230a      	movs	r3, #10
 800e356:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800e358:	20ff      	movs	r0, #255	@ 0xff
 800e35a:	f7ff feb1 	bl	800e0c0 <xchg_spi>
 800e35e:	4603      	mov	r3, r0
 800e360:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800e362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e366:	2b00      	cmp	r3, #0
 800e368:	da05      	bge.n	800e376 <send_cmd+0xd4>
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
 800e36c:	3b01      	subs	r3, #1
 800e36e:	73fb      	strb	r3, [r7, #15]
 800e370:	7bfb      	ldrb	r3, [r7, #15]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1f0      	bne.n	800e358 <send_cmd+0xb6>

	return res;							/* Return received response */
 800e376:	7bbb      	ldrb	r3, [r7, #14]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e380:	b590      	push	{r4, r7, lr}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	4603      	mov	r3, r0
 800e388:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800e38a:	79fb      	ldrb	r3, [r7, #7]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d001      	beq.n	800e394 <USER_SPI_initialize+0x14>
 800e390:	2301      	movs	r3, #1
 800e392:	e0dc      	b.n	800e54e <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800e394:	4b70      	ldr	r3, [pc, #448]	@ (800e558 <USER_SPI_initialize+0x1d8>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	f003 0302 	and.w	r3, r3, #2
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d003      	beq.n	800e3aa <USER_SPI_initialize+0x2a>
 800e3a2:	4b6d      	ldr	r3, [pc, #436]	@ (800e558 <USER_SPI_initialize+0x1d8>)
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	e0d1      	b.n	800e54e <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800e3aa:	4b6b      	ldr	r3, [pc, #428]	@ (800e558 <USER_SPI_initialize+0x1d8>)
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	4b6a      	ldr	r3, [pc, #424]	@ (800e55c <USER_SPI_initialize+0x1dc>)
 800e3b4:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800e3b6:	4b6a      	ldr	r3, [pc, #424]	@ (800e560 <USER_SPI_initialize+0x1e0>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800e3c0:	4b67      	ldr	r3, [pc, #412]	@ (800e560 <USER_SPI_initialize+0x1e0>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800e3c8:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800e3ca:	230a      	movs	r3, #10
 800e3cc:	73fb      	strb	r3, [r7, #15]
 800e3ce:	e005      	b.n	800e3dc <USER_SPI_initialize+0x5c>
 800e3d0:	20ff      	movs	r0, #255	@ 0xff
 800e3d2:	f7ff fe75 	bl	800e0c0 <xchg_spi>
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	73fb      	strb	r3, [r7, #15]
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1f6      	bne.n	800e3d0 <USER_SPI_initialize+0x50>

	ty = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	f7ff ff5a 	bl	800e2a2 <send_cmd>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	f040 808b 	bne.w	800e50c <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800e3f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e3fa:	f7ff fe37 	bl	800e06c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800e3fe:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800e402:	2008      	movs	r0, #8
 800e404:	f7ff ff4d 	bl	800e2a2 <send_cmd>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d151      	bne.n	800e4b2 <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800e40e:	2300      	movs	r3, #0
 800e410:	73fb      	strb	r3, [r7, #15]
 800e412:	e00d      	b.n	800e430 <USER_SPI_initialize+0xb0>
 800e414:	7bfc      	ldrb	r4, [r7, #15]
 800e416:	20ff      	movs	r0, #255	@ 0xff
 800e418:	f7ff fe52 	bl	800e0c0 <xchg_spi>
 800e41c:	4603      	mov	r3, r0
 800e41e:	461a      	mov	r2, r3
 800e420:	f104 0310 	add.w	r3, r4, #16
 800e424:	443b      	add	r3, r7
 800e426:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
 800e42c:	3301      	adds	r3, #1
 800e42e:	73fb      	strb	r3, [r7, #15]
 800e430:	7bfb      	ldrb	r3, [r7, #15]
 800e432:	2b03      	cmp	r3, #3
 800e434:	d9ee      	bls.n	800e414 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800e436:	7abb      	ldrb	r3, [r7, #10]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d167      	bne.n	800e50c <USER_SPI_initialize+0x18c>
 800e43c:	7afb      	ldrb	r3, [r7, #11]
 800e43e:	2baa      	cmp	r3, #170	@ 0xaa
 800e440:	d164      	bne.n	800e50c <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800e442:	bf00      	nop
 800e444:	f7ff fe26 	bl	800e094 <SPI_Timer_Status>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d007      	beq.n	800e45e <USER_SPI_initialize+0xde>
 800e44e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e452:	20a9      	movs	r0, #169	@ 0xa9
 800e454:	f7ff ff25 	bl	800e2a2 <send_cmd>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1f2      	bne.n	800e444 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800e45e:	f7ff fe19 	bl	800e094 <SPI_Timer_Status>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d051      	beq.n	800e50c <USER_SPI_initialize+0x18c>
 800e468:	2100      	movs	r1, #0
 800e46a:	203a      	movs	r0, #58	@ 0x3a
 800e46c:	f7ff ff19 	bl	800e2a2 <send_cmd>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d14a      	bne.n	800e50c <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800e476:	2300      	movs	r3, #0
 800e478:	73fb      	strb	r3, [r7, #15]
 800e47a:	e00d      	b.n	800e498 <USER_SPI_initialize+0x118>
 800e47c:	7bfc      	ldrb	r4, [r7, #15]
 800e47e:	20ff      	movs	r0, #255	@ 0xff
 800e480:	f7ff fe1e 	bl	800e0c0 <xchg_spi>
 800e484:	4603      	mov	r3, r0
 800e486:	461a      	mov	r2, r3
 800e488:	f104 0310 	add.w	r3, r4, #16
 800e48c:	443b      	add	r3, r7
 800e48e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e492:	7bfb      	ldrb	r3, [r7, #15]
 800e494:	3301      	adds	r3, #1
 800e496:	73fb      	strb	r3, [r7, #15]
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d9ee      	bls.n	800e47c <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800e49e:	7a3b      	ldrb	r3, [r7, #8]
 800e4a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d001      	beq.n	800e4ac <USER_SPI_initialize+0x12c>
 800e4a8:	230c      	movs	r3, #12
 800e4aa:	e000      	b.n	800e4ae <USER_SPI_initialize+0x12e>
 800e4ac:	2304      	movs	r3, #4
 800e4ae:	737b      	strb	r3, [r7, #13]
 800e4b0:	e02c      	b.n	800e50c <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	20a9      	movs	r0, #169	@ 0xa9
 800e4b6:	f7ff fef4 	bl	800e2a2 <send_cmd>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d804      	bhi.n	800e4ca <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	737b      	strb	r3, [r7, #13]
 800e4c4:	23a9      	movs	r3, #169	@ 0xa9
 800e4c6:	73bb      	strb	r3, [r7, #14]
 800e4c8:	e003      	b.n	800e4d2 <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	737b      	strb	r3, [r7, #13]
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800e4d2:	bf00      	nop
 800e4d4:	f7ff fdde 	bl	800e094 <SPI_Timer_Status>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d007      	beq.n	800e4ee <USER_SPI_initialize+0x16e>
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	2100      	movs	r1, #0
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7ff fedd 	bl	800e2a2 <send_cmd>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1f2      	bne.n	800e4d4 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800e4ee:	f7ff fdd1 	bl	800e094 <SPI_Timer_Status>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d007      	beq.n	800e508 <USER_SPI_initialize+0x188>
 800e4f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e4fc:	2010      	movs	r0, #16
 800e4fe:	f7ff fed0 	bl	800e2a2 <send_cmd>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d001      	beq.n	800e50c <USER_SPI_initialize+0x18c>
				ty = 0;
 800e508:	2300      	movs	r3, #0
 800e50a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800e50c:	4a15      	ldr	r2, [pc, #84]	@ (800e564 <USER_SPI_initialize+0x1e4>)
 800e50e:	7b7b      	ldrb	r3, [r7, #13]
 800e510:	7013      	strb	r3, [r2, #0]
	despiselect();
 800e512:	f7ff fe3f 	bl	800e194 <despiselect>

	if (ty) {			/* OK */
 800e516:	7b7b      	ldrb	r3, [r7, #13]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d012      	beq.n	800e542 <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800e51c:	4b10      	ldr	r3, [pc, #64]	@ (800e560 <USER_SPI_initialize+0x1e0>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800e526:	4b0e      	ldr	r3, [pc, #56]	@ (800e560 <USER_SPI_initialize+0x1e0>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f042 0210 	orr.w	r2, r2, #16
 800e52e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800e530:	4b09      	ldr	r3, [pc, #36]	@ (800e558 <USER_SPI_initialize+0x1d8>)
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	b2db      	uxtb	r3, r3
 800e536:	f023 0301 	bic.w	r3, r3, #1
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	4b06      	ldr	r3, [pc, #24]	@ (800e558 <USER_SPI_initialize+0x1d8>)
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	e002      	b.n	800e548 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800e542:	4b05      	ldr	r3, [pc, #20]	@ (800e558 <USER_SPI_initialize+0x1d8>)
 800e544:	2201      	movs	r2, #1
 800e546:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800e548:	4b03      	ldr	r3, [pc, #12]	@ (800e558 <USER_SPI_initialize+0x1d8>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	b2db      	uxtb	r3, r3
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3714      	adds	r7, #20
 800e552:	46bd      	mov	sp, r7
 800e554:	bd90      	pop	{r4, r7, pc}
 800e556:	bf00      	nop
 800e558:	20000074 	.word	0x20000074
 800e55c:	2000c280 	.word	0x2000c280
 800e560:	2000b2b4 	.word	0x2000b2b4
 800e564:	2000c284 	.word	0x2000c284

0800e568 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	4603      	mov	r3, r0
 800e570:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800e572:	79fb      	ldrb	r3, [r7, #7]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <USER_SPI_status+0x14>
 800e578:	2301      	movs	r3, #1
 800e57a:	e002      	b.n	800e582 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800e57c:	4b04      	ldr	r3, [pc, #16]	@ (800e590 <USER_SPI_status+0x28>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	b2db      	uxtb	r3, r3
}
 800e582:	4618      	mov	r0, r3
 800e584:	370c      	adds	r7, #12
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop
 800e590:	20000074 	.word	0x20000074

0800e594 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60b9      	str	r1, [r7, #8]
 800e59c:	607a      	str	r2, [r7, #4]
 800e59e:	603b      	str	r3, [r7, #0]
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e5a4:	7bfb      	ldrb	r3, [r7, #15]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d102      	bne.n	800e5b0 <USER_SPI_read+0x1c>
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <USER_SPI_read+0x20>
 800e5b0:	2304      	movs	r3, #4
 800e5b2:	e04d      	b.n	800e650 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e5b4:	4b28      	ldr	r3, [pc, #160]	@ (800e658 <USER_SPI_read+0xc4>)
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	f003 0301 	and.w	r3, r3, #1
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <USER_SPI_read+0x32>
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	e044      	b.n	800e650 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800e5c6:	4b25      	ldr	r3, [pc, #148]	@ (800e65c <USER_SPI_read+0xc8>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	f003 0308 	and.w	r3, r3, #8
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d102      	bne.n	800e5d8 <USER_SPI_read+0x44>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	025b      	lsls	r3, r3, #9
 800e5d6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d111      	bne.n	800e602 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	2011      	movs	r0, #17
 800e5e2:	f7ff fe5e 	bl	800e2a2 <send_cmd>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d129      	bne.n	800e640 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800e5ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e5f0:	68b8      	ldr	r0, [r7, #8]
 800e5f2:	f7ff fdfb 	bl	800e1ec <rcvr_datablock>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d021      	beq.n	800e640 <USER_SPI_read+0xac>
			count = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	603b      	str	r3, [r7, #0]
 800e600:	e01e      	b.n	800e640 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	2012      	movs	r0, #18
 800e606:	f7ff fe4c 	bl	800e2a2 <send_cmd>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d117      	bne.n	800e640 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800e610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e614:	68b8      	ldr	r0, [r7, #8]
 800e616:	f7ff fde9 	bl	800e1ec <rcvr_datablock>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00a      	beq.n	800e636 <USER_SPI_read+0xa2>
				buff += 512;
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e626:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	3b01      	subs	r3, #1
 800e62c:	603b      	str	r3, [r7, #0]
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d1ed      	bne.n	800e610 <USER_SPI_read+0x7c>
 800e634:	e000      	b.n	800e638 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800e636:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800e638:	2100      	movs	r1, #0
 800e63a:	200c      	movs	r0, #12
 800e63c:	f7ff fe31 	bl	800e2a2 <send_cmd>
		}
	}
	despiselect();
 800e640:	f7ff fda8 	bl	800e194 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	bf14      	ite	ne
 800e64a:	2301      	movne	r3, #1
 800e64c:	2300      	moveq	r3, #0
 800e64e:	b2db      	uxtb	r3, r3
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	20000074 	.word	0x20000074
 800e65c:	2000c284 	.word	0x2000c284

0800e660 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	60b9      	str	r1, [r7, #8]
 800e668:	607a      	str	r2, [r7, #4]
 800e66a:	603b      	str	r3, [r7, #0]
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d102      	bne.n	800e67c <USER_SPI_write+0x1c>
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d101      	bne.n	800e680 <USER_SPI_write+0x20>
 800e67c:	2304      	movs	r3, #4
 800e67e:	e063      	b.n	800e748 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800e680:	4b33      	ldr	r3, [pc, #204]	@ (800e750 <USER_SPI_write+0xf0>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	b2db      	uxtb	r3, r3
 800e686:	f003 0301 	and.w	r3, r3, #1
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d001      	beq.n	800e692 <USER_SPI_write+0x32>
 800e68e:	2303      	movs	r3, #3
 800e690:	e05a      	b.n	800e748 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800e692:	4b2f      	ldr	r3, [pc, #188]	@ (800e750 <USER_SPI_write+0xf0>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	b2db      	uxtb	r3, r3
 800e698:	f003 0304 	and.w	r3, r3, #4
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d001      	beq.n	800e6a4 <USER_SPI_write+0x44>
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	e051      	b.n	800e748 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800e6a4:	4b2b      	ldr	r3, [pc, #172]	@ (800e754 <USER_SPI_write+0xf4>)
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	f003 0308 	and.w	r3, r3, #8
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d102      	bne.n	800e6b6 <USER_SPI_write+0x56>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	025b      	lsls	r3, r3, #9
 800e6b4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d110      	bne.n	800e6de <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800e6bc:	6879      	ldr	r1, [r7, #4]
 800e6be:	2018      	movs	r0, #24
 800e6c0:	f7ff fdef 	bl	800e2a2 <send_cmd>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d136      	bne.n	800e738 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800e6ca:	21fe      	movs	r1, #254	@ 0xfe
 800e6cc:	68b8      	ldr	r0, [r7, #8]
 800e6ce:	f7ff fdb6 	bl	800e23e <xmit_datablock>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d02f      	beq.n	800e738 <USER_SPI_write+0xd8>
			count = 0;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	603b      	str	r3, [r7, #0]
 800e6dc:	e02c      	b.n	800e738 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800e6de:	4b1d      	ldr	r3, [pc, #116]	@ (800e754 <USER_SPI_write+0xf4>)
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	f003 0306 	and.w	r3, r3, #6
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d003      	beq.n	800e6f2 <USER_SPI_write+0x92>
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	2097      	movs	r0, #151	@ 0x97
 800e6ee:	f7ff fdd8 	bl	800e2a2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800e6f2:	6879      	ldr	r1, [r7, #4]
 800e6f4:	2019      	movs	r0, #25
 800e6f6:	f7ff fdd4 	bl	800e2a2 <send_cmd>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d11b      	bne.n	800e738 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800e700:	21fc      	movs	r1, #252	@ 0xfc
 800e702:	68b8      	ldr	r0, [r7, #8]
 800e704:	f7ff fd9b 	bl	800e23e <xmit_datablock>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00a      	beq.n	800e724 <USER_SPI_write+0xc4>
				buff += 512;
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e714:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	3b01      	subs	r3, #1
 800e71a:	603b      	str	r3, [r7, #0]
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1ee      	bne.n	800e700 <USER_SPI_write+0xa0>
 800e722:	e000      	b.n	800e726 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800e724:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800e726:	21fd      	movs	r1, #253	@ 0xfd
 800e728:	2000      	movs	r0, #0
 800e72a:	f7ff fd88 	bl	800e23e <xmit_datablock>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d101      	bne.n	800e738 <USER_SPI_write+0xd8>
 800e734:	2301      	movs	r3, #1
 800e736:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800e738:	f7ff fd2c 	bl	800e194 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	bf14      	ite	ne
 800e742:	2301      	movne	r3, #1
 800e744:	2300      	moveq	r3, #0
 800e746:	b2db      	uxtb	r3, r3
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	20000074 	.word	0x20000074
 800e754:	2000c284 	.word	0x2000c284

0800e758 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b08c      	sub	sp, #48	@ 0x30
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	4603      	mov	r3, r0
 800e760:	603a      	str	r2, [r7, #0]
 800e762:	71fb      	strb	r3, [r7, #7]
 800e764:	460b      	mov	r3, r1
 800e766:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800e768:	79fb      	ldrb	r3, [r7, #7]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d001      	beq.n	800e772 <USER_SPI_ioctl+0x1a>
 800e76e:	2304      	movs	r3, #4
 800e770:	e15a      	b.n	800ea28 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e772:	4baf      	ldr	r3, [pc, #700]	@ (800ea30 <USER_SPI_ioctl+0x2d8>)
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	b2db      	uxtb	r3, r3
 800e778:	f003 0301 	and.w	r3, r3, #1
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d001      	beq.n	800e784 <USER_SPI_ioctl+0x2c>
 800e780:	2303      	movs	r3, #3
 800e782:	e151      	b.n	800ea28 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800e78a:	79bb      	ldrb	r3, [r7, #6]
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	f200 8136 	bhi.w	800e9fe <USER_SPI_ioctl+0x2a6>
 800e792:	a201      	add	r2, pc, #4	@ (adr r2, 800e798 <USER_SPI_ioctl+0x40>)
 800e794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e798:	0800e7ad 	.word	0x0800e7ad
 800e79c:	0800e7c1 	.word	0x0800e7c1
 800e7a0:	0800e9ff 	.word	0x0800e9ff
 800e7a4:	0800e86d 	.word	0x0800e86d
 800e7a8:	0800e963 	.word	0x0800e963
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800e7ac:	f7ff fd02 	bl	800e1b4 <spiselect>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f000 8127 	beq.w	800ea06 <USER_SPI_ioctl+0x2ae>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e7be:	e122      	b.n	800ea06 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	2009      	movs	r0, #9
 800e7c4:	f7ff fd6d 	bl	800e2a2 <send_cmd>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f040 811d 	bne.w	800ea0a <USER_SPI_ioctl+0x2b2>
 800e7d0:	f107 030c 	add.w	r3, r7, #12
 800e7d4:	2110      	movs	r1, #16
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7ff fd08 	bl	800e1ec <rcvr_datablock>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f000 8113 	beq.w	800ea0a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e7e4:	7b3b      	ldrb	r3, [r7, #12]
 800e7e6:	099b      	lsrs	r3, r3, #6
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d111      	bne.n	800e812 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e7ee:	7d7b      	ldrb	r3, [r7, #21]
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	7d3b      	ldrb	r3, [r7, #20]
 800e7f4:	021b      	lsls	r3, r3, #8
 800e7f6:	4413      	add	r3, r2
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	7cfb      	ldrb	r3, [r7, #19]
 800e7fc:	041b      	lsls	r3, r3, #16
 800e7fe:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800e802:	4413      	add	r3, r2
 800e804:	3301      	adds	r3, #1
 800e806:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	029a      	lsls	r2, r3, #10
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	601a      	str	r2, [r3, #0]
 800e810:	e028      	b.n	800e864 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e812:	7c7b      	ldrb	r3, [r7, #17]
 800e814:	f003 030f 	and.w	r3, r3, #15
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	7dbb      	ldrb	r3, [r7, #22]
 800e81c:	09db      	lsrs	r3, r3, #7
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	4413      	add	r3, r2
 800e822:	b2da      	uxtb	r2, r3
 800e824:	7d7b      	ldrb	r3, [r7, #21]
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	f003 0306 	and.w	r3, r3, #6
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	4413      	add	r3, r2
 800e832:	b2db      	uxtb	r3, r3
 800e834:	3302      	adds	r3, #2
 800e836:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e83a:	7d3b      	ldrb	r3, [r7, #20]
 800e83c:	099b      	lsrs	r3, r3, #6
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	461a      	mov	r2, r3
 800e842:	7cfb      	ldrb	r3, [r7, #19]
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	441a      	add	r2, r3
 800e848:	7cbb      	ldrb	r3, [r7, #18]
 800e84a:	029b      	lsls	r3, r3, #10
 800e84c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e850:	4413      	add	r3, r2
 800e852:	3301      	adds	r3, #1
 800e854:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e856:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e85a:	3b09      	subs	r3, #9
 800e85c:	69fa      	ldr	r2, [r7, #28]
 800e85e:	409a      	lsls	r2, r3
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e86a:	e0ce      	b.n	800ea0a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e86c:	4b71      	ldr	r3, [pc, #452]	@ (800ea34 <USER_SPI_ioctl+0x2dc>)
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	f003 0304 	and.w	r3, r3, #4
 800e874:	2b00      	cmp	r3, #0
 800e876:	d031      	beq.n	800e8dc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e878:	2100      	movs	r1, #0
 800e87a:	208d      	movs	r0, #141	@ 0x8d
 800e87c:	f7ff fd11 	bl	800e2a2 <send_cmd>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	f040 80c3 	bne.w	800ea0e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e888:	20ff      	movs	r0, #255	@ 0xff
 800e88a:	f7ff fc19 	bl	800e0c0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e88e:	f107 030c 	add.w	r3, r7, #12
 800e892:	2110      	movs	r1, #16
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff fca9 	bl	800e1ec <rcvr_datablock>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f000 80b6 	beq.w	800ea0e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e8a2:	2330      	movs	r3, #48	@ 0x30
 800e8a4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e8a8:	e007      	b.n	800e8ba <USER_SPI_ioctl+0x162>
 800e8aa:	20ff      	movs	r0, #255	@ 0xff
 800e8ac:	f7ff fc08 	bl	800e0c0 <xchg_spi>
 800e8b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e8b4:	3b01      	subs	r3, #1
 800e8b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e8ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d1f3      	bne.n	800e8aa <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e8c2:	7dbb      	ldrb	r3, [r7, #22]
 800e8c4:	091b      	lsrs	r3, r3, #4
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	2310      	movs	r3, #16
 800e8cc:	fa03 f202 	lsl.w	r2, r3, r2
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e8da:	e098      	b.n	800ea0e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e8dc:	2100      	movs	r1, #0
 800e8de:	2009      	movs	r0, #9
 800e8e0:	f7ff fcdf 	bl	800e2a2 <send_cmd>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f040 8091 	bne.w	800ea0e <USER_SPI_ioctl+0x2b6>
 800e8ec:	f107 030c 	add.w	r3, r7, #12
 800e8f0:	2110      	movs	r1, #16
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff fc7a 	bl	800e1ec <rcvr_datablock>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f000 8087 	beq.w	800ea0e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e900:	4b4c      	ldr	r3, [pc, #304]	@ (800ea34 <USER_SPI_ioctl+0x2dc>)
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	f003 0302 	and.w	r3, r3, #2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d012      	beq.n	800e932 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e90c:	7dbb      	ldrb	r3, [r7, #22]
 800e90e:	005b      	lsls	r3, r3, #1
 800e910:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800e914:	7dfa      	ldrb	r2, [r7, #23]
 800e916:	09d2      	lsrs	r2, r2, #7
 800e918:	b2d2      	uxtb	r2, r2
 800e91a:	4413      	add	r3, r2
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	7e7b      	ldrb	r3, [r7, #25]
 800e920:	099b      	lsrs	r3, r3, #6
 800e922:	b2db      	uxtb	r3, r3
 800e924:	3b01      	subs	r3, #1
 800e926:	fa02 f303 	lsl.w	r3, r2, r3
 800e92a:	461a      	mov	r2, r3
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	e013      	b.n	800e95a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e932:	7dbb      	ldrb	r3, [r7, #22]
 800e934:	109b      	asrs	r3, r3, #2
 800e936:	b29b      	uxth	r3, r3
 800e938:	f003 031f 	and.w	r3, r3, #31
 800e93c:	3301      	adds	r3, #1
 800e93e:	7dfa      	ldrb	r2, [r7, #23]
 800e940:	00d2      	lsls	r2, r2, #3
 800e942:	f002 0218 	and.w	r2, r2, #24
 800e946:	7df9      	ldrb	r1, [r7, #23]
 800e948:	0949      	lsrs	r1, r1, #5
 800e94a:	b2c9      	uxtb	r1, r1
 800e94c:	440a      	add	r2, r1
 800e94e:	3201      	adds	r2, #1
 800e950:	fb02 f303 	mul.w	r3, r2, r3
 800e954:	461a      	mov	r2, r3
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e960:	e055      	b.n	800ea0e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e962:	4b34      	ldr	r3, [pc, #208]	@ (800ea34 <USER_SPI_ioctl+0x2dc>)
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	f003 0306 	and.w	r3, r3, #6
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d051      	beq.n	800ea12 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e96e:	f107 020c 	add.w	r2, r7, #12
 800e972:	79fb      	ldrb	r3, [r7, #7]
 800e974:	210b      	movs	r1, #11
 800e976:	4618      	mov	r0, r3
 800e978:	f7ff feee 	bl	800e758 <USER_SPI_ioctl>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d149      	bne.n	800ea16 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e982:	7b3b      	ldrb	r3, [r7, #12]
 800e984:	099b      	lsrs	r3, r3, #6
 800e986:	b2db      	uxtb	r3, r3
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d104      	bne.n	800e996 <USER_SPI_ioctl+0x23e>
 800e98c:	7dbb      	ldrb	r3, [r7, #22]
 800e98e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e992:	2b00      	cmp	r3, #0
 800e994:	d041      	beq.n	800ea1a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	623b      	str	r3, [r7, #32]
 800e99a:	6a3b      	ldr	r3, [r7, #32]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9a0:	6a3b      	ldr	r3, [r7, #32]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800e9a6:	4b23      	ldr	r3, [pc, #140]	@ (800ea34 <USER_SPI_ioctl+0x2dc>)
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	f003 0308 	and.w	r3, r3, #8
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d105      	bne.n	800e9be <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b4:	025b      	lsls	r3, r3, #9
 800e9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ba:	025b      	lsls	r3, r3, #9
 800e9bc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e9be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e9c0:	2020      	movs	r0, #32
 800e9c2:	f7ff fc6e 	bl	800e2a2 <send_cmd>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d128      	bne.n	800ea1e <USER_SPI_ioctl+0x2c6>
 800e9cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e9ce:	2021      	movs	r0, #33	@ 0x21
 800e9d0:	f7ff fc67 	bl	800e2a2 <send_cmd>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d121      	bne.n	800ea1e <USER_SPI_ioctl+0x2c6>
 800e9da:	2100      	movs	r1, #0
 800e9dc:	2026      	movs	r0, #38	@ 0x26
 800e9de:	f7ff fc60 	bl	800e2a2 <send_cmd>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d11a      	bne.n	800ea1e <USER_SPI_ioctl+0x2c6>
 800e9e8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e9ec:	f7ff fbae 	bl	800e14c <wait_ready>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d013      	beq.n	800ea1e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e9fc:	e00f      	b.n	800ea1e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e9fe:	2304      	movs	r3, #4
 800ea00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ea04:	e00c      	b.n	800ea20 <USER_SPI_ioctl+0x2c8>
		break;
 800ea06:	bf00      	nop
 800ea08:	e00a      	b.n	800ea20 <USER_SPI_ioctl+0x2c8>
		break;
 800ea0a:	bf00      	nop
 800ea0c:	e008      	b.n	800ea20 <USER_SPI_ioctl+0x2c8>
		break;
 800ea0e:	bf00      	nop
 800ea10:	e006      	b.n	800ea20 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ea12:	bf00      	nop
 800ea14:	e004      	b.n	800ea20 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ea16:	bf00      	nop
 800ea18:	e002      	b.n	800ea20 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ea1a:	bf00      	nop
 800ea1c:	e000      	b.n	800ea20 <USER_SPI_ioctl+0x2c8>
		break;
 800ea1e:	bf00      	nop
	}

	despiselect();
 800ea20:	f7ff fbb8 	bl	800e194 <despiselect>

	return res;
 800ea24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3730      	adds	r7, #48	@ 0x30
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	20000074 	.word	0x20000074
 800ea34:	2000c284 	.word	0x2000c284

0800ea38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	4603      	mov	r3, r0
 800ea40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ea42:	79fb      	ldrb	r3, [r7, #7]
 800ea44:	4a08      	ldr	r2, [pc, #32]	@ (800ea68 <disk_status+0x30>)
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	4413      	add	r3, r2
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	79fa      	ldrb	r2, [r7, #7]
 800ea50:	4905      	ldr	r1, [pc, #20]	@ (800ea68 <disk_status+0x30>)
 800ea52:	440a      	add	r2, r1
 800ea54:	7a12      	ldrb	r2, [r2, #8]
 800ea56:	4610      	mov	r0, r2
 800ea58:	4798      	blx	r3
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	2000c2b8 	.word	0x2000c2b8

0800ea6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	4a0d      	ldr	r2, [pc, #52]	@ (800eab4 <disk_initialize+0x48>)
 800ea7e:	5cd3      	ldrb	r3, [r2, r3]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d111      	bne.n	800eaa8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ea84:	79fb      	ldrb	r3, [r7, #7]
 800ea86:	4a0b      	ldr	r2, [pc, #44]	@ (800eab4 <disk_initialize+0x48>)
 800ea88:	2101      	movs	r1, #1
 800ea8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ea8c:	79fb      	ldrb	r3, [r7, #7]
 800ea8e:	4a09      	ldr	r2, [pc, #36]	@ (800eab4 <disk_initialize+0x48>)
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	4413      	add	r3, r2
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	79fa      	ldrb	r2, [r7, #7]
 800ea9a:	4906      	ldr	r1, [pc, #24]	@ (800eab4 <disk_initialize+0x48>)
 800ea9c:	440a      	add	r2, r1
 800ea9e:	7a12      	ldrb	r2, [r2, #8]
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	4798      	blx	r3
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	2000c2b8 	.word	0x2000c2b8

0800eab8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eab8:	b590      	push	{r4, r7, lr}
 800eaba:	b087      	sub	sp, #28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60b9      	str	r1, [r7, #8]
 800eac0:	607a      	str	r2, [r7, #4]
 800eac2:	603b      	str	r3, [r7, #0]
 800eac4:	4603      	mov	r3, r0
 800eac6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	4a0a      	ldr	r2, [pc, #40]	@ (800eaf4 <disk_read+0x3c>)
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	689c      	ldr	r4, [r3, #8]
 800ead4:	7bfb      	ldrb	r3, [r7, #15]
 800ead6:	4a07      	ldr	r2, [pc, #28]	@ (800eaf4 <disk_read+0x3c>)
 800ead8:	4413      	add	r3, r2
 800eada:	7a18      	ldrb	r0, [r3, #8]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	68b9      	ldr	r1, [r7, #8]
 800eae2:	47a0      	blx	r4
 800eae4:	4603      	mov	r3, r0
 800eae6:	75fb      	strb	r3, [r7, #23]
  return res;
 800eae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	371c      	adds	r7, #28
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd90      	pop	{r4, r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	2000c2b8 	.word	0x2000c2b8

0800eaf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eaf8:	b590      	push	{r4, r7, lr}
 800eafa:	b087      	sub	sp, #28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60b9      	str	r1, [r7, #8]
 800eb00:	607a      	str	r2, [r7, #4]
 800eb02:	603b      	str	r3, [r7, #0]
 800eb04:	4603      	mov	r3, r0
 800eb06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
 800eb0a:	4a0a      	ldr	r2, [pc, #40]	@ (800eb34 <disk_write+0x3c>)
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	4413      	add	r3, r2
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	68dc      	ldr	r4, [r3, #12]
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
 800eb16:	4a07      	ldr	r2, [pc, #28]	@ (800eb34 <disk_write+0x3c>)
 800eb18:	4413      	add	r3, r2
 800eb1a:	7a18      	ldrb	r0, [r3, #8]
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	68b9      	ldr	r1, [r7, #8]
 800eb22:	47a0      	blx	r4
 800eb24:	4603      	mov	r3, r0
 800eb26:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb28:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	371c      	adds	r7, #28
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd90      	pop	{r4, r7, pc}
 800eb32:	bf00      	nop
 800eb34:	2000c2b8 	.word	0x2000c2b8

0800eb38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	603a      	str	r2, [r7, #0]
 800eb42:	71fb      	strb	r3, [r7, #7]
 800eb44:	460b      	mov	r3, r1
 800eb46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eb48:	79fb      	ldrb	r3, [r7, #7]
 800eb4a:	4a09      	ldr	r2, [pc, #36]	@ (800eb70 <disk_ioctl+0x38>)
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	4413      	add	r3, r2
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	691b      	ldr	r3, [r3, #16]
 800eb54:	79fa      	ldrb	r2, [r7, #7]
 800eb56:	4906      	ldr	r1, [pc, #24]	@ (800eb70 <disk_ioctl+0x38>)
 800eb58:	440a      	add	r2, r1
 800eb5a:	7a10      	ldrb	r0, [r2, #8]
 800eb5c:	79b9      	ldrb	r1, [r7, #6]
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	4798      	blx	r3
 800eb62:	4603      	mov	r3, r0
 800eb64:	73fb      	strb	r3, [r7, #15]
  return res;
 800eb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	2000c2b8 	.word	0x2000c2b8

0800eb74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eb74:	b480      	push	{r7}
 800eb76:	b085      	sub	sp, #20
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800eb84:	89fb      	ldrh	r3, [r7, #14]
 800eb86:	021b      	lsls	r3, r3, #8
 800eb88:	b21a      	sxth	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	b21b      	sxth	r3, r3
 800eb90:	4313      	orrs	r3, r2
 800eb92:	b21b      	sxth	r3, r3
 800eb94:	81fb      	strh	r3, [r7, #14]
	return rv;
 800eb96:	89fb      	ldrh	r3, [r7, #14]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3714      	adds	r7, #20
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	3303      	adds	r3, #3
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	021b      	lsls	r3, r3, #8
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	3202      	adds	r2, #2
 800ebbc:	7812      	ldrb	r2, [r2, #0]
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	021b      	lsls	r3, r3, #8
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	3201      	adds	r2, #1
 800ebca:	7812      	ldrb	r2, [r2, #0]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	021b      	lsls	r3, r3, #8
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	7812      	ldrb	r2, [r2, #0]
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	60fb      	str	r3, [r7, #12]
	return rv;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3714      	adds	r7, #20
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr

0800ebea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ebea:	b480      	push	{r7}
 800ebec:	b083      	sub	sp, #12
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	1c5a      	adds	r2, r3, #1
 800ebfa:	607a      	str	r2, [r7, #4]
 800ebfc:	887a      	ldrh	r2, [r7, #2]
 800ebfe:	b2d2      	uxtb	r2, r2
 800ec00:	701a      	strb	r2, [r3, #0]
 800ec02:	887b      	ldrh	r3, [r7, #2]
 800ec04:	0a1b      	lsrs	r3, r3, #8
 800ec06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	1c5a      	adds	r2, r3, #1
 800ec0c:	607a      	str	r2, [r7, #4]
 800ec0e:	887a      	ldrh	r2, [r7, #2]
 800ec10:	b2d2      	uxtb	r2, r2
 800ec12:	701a      	strb	r2, [r3, #0]
}
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	1c5a      	adds	r2, r3, #1
 800ec2e:	607a      	str	r2, [r7, #4]
 800ec30:	683a      	ldr	r2, [r7, #0]
 800ec32:	b2d2      	uxtb	r2, r2
 800ec34:	701a      	strb	r2, [r3, #0]
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	0a1b      	lsrs	r3, r3, #8
 800ec3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	607a      	str	r2, [r7, #4]
 800ec42:	683a      	ldr	r2, [r7, #0]
 800ec44:	b2d2      	uxtb	r2, r2
 800ec46:	701a      	strb	r2, [r3, #0]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	0a1b      	lsrs	r3, r3, #8
 800ec4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	1c5a      	adds	r2, r3, #1
 800ec52:	607a      	str	r2, [r7, #4]
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	b2d2      	uxtb	r2, r2
 800ec58:	701a      	strb	r2, [r3, #0]
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	0a1b      	lsrs	r3, r3, #8
 800ec5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	1c5a      	adds	r2, r3, #1
 800ec64:	607a      	str	r2, [r7, #4]
 800ec66:	683a      	ldr	r2, [r7, #0]
 800ec68:	b2d2      	uxtb	r2, r2
 800ec6a:	701a      	strb	r2, [r3, #0]
}
 800ec6c:	bf00      	nop
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ec78:	b480      	push	{r7}
 800ec7a:	b087      	sub	sp, #28
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00d      	beq.n	800ecae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ec92:	693a      	ldr	r2, [r7, #16]
 800ec94:	1c53      	adds	r3, r2, #1
 800ec96:	613b      	str	r3, [r7, #16]
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	1c59      	adds	r1, r3, #1
 800ec9c:	6179      	str	r1, [r7, #20]
 800ec9e:	7812      	ldrb	r2, [r2, #0]
 800eca0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	3b01      	subs	r3, #1
 800eca6:	607b      	str	r3, [r7, #4]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d1f1      	bne.n	800ec92 <mem_cpy+0x1a>
	}
}
 800ecae:	bf00      	nop
 800ecb0:	371c      	adds	r7, #28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ecba:	b480      	push	{r7}
 800ecbc:	b087      	sub	sp, #28
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	60f8      	str	r0, [r7, #12]
 800ecc2:	60b9      	str	r1, [r7, #8]
 800ecc4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	1c5a      	adds	r2, r3, #1
 800ecce:	617a      	str	r2, [r7, #20]
 800ecd0:	68ba      	ldr	r2, [r7, #8]
 800ecd2:	b2d2      	uxtb	r2, r2
 800ecd4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	607b      	str	r3, [r7, #4]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1f3      	bne.n	800ecca <mem_set+0x10>
}
 800ece2:	bf00      	nop
 800ece4:	bf00      	nop
 800ece6:	371c      	adds	r7, #28
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ecf0:	b480      	push	{r7}
 800ecf2:	b089      	sub	sp, #36	@ 0x24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	61fb      	str	r3, [r7, #28]
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	1c5a      	adds	r2, r3, #1
 800ed0c:	61fa      	str	r2, [r7, #28]
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	4619      	mov	r1, r3
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	1c5a      	adds	r2, r3, #1
 800ed16:	61ba      	str	r2, [r7, #24]
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	1acb      	subs	r3, r1, r3
 800ed1c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	3b01      	subs	r3, #1
 800ed22:	607b      	str	r3, [r7, #4]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d002      	beq.n	800ed30 <mem_cmp+0x40>
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d0eb      	beq.n	800ed08 <mem_cmp+0x18>

	return r;
 800ed30:	697b      	ldr	r3, [r7, #20]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3724      	adds	r7, #36	@ 0x24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr

0800ed3e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ed3e:	b480      	push	{r7}
 800ed40:	b083      	sub	sp, #12
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
 800ed46:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ed48:	e002      	b.n	800ed50 <chk_chr+0x12>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	607b      	str	r3, [r7, #4]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d005      	beq.n	800ed64 <chk_chr+0x26>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d1f2      	bne.n	800ed4a <chk_chr+0xc>
	return *str;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	781b      	ldrb	r3, [r3, #0]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d009      	beq.n	800ed96 <lock_fs+0x22>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	691b      	ldr	r3, [r3, #16]
 800ed86:	4618      	mov	r0, r3
 800ed88:	f003 fb82 	bl	8012490 <ff_req_grant>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <lock_fs+0x22>
 800ed92:	2301      	movs	r3, #1
 800ed94:	e000      	b.n	800ed98 <lock_fs+0x24>
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	460b      	mov	r3, r1
 800edaa:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00d      	beq.n	800edce <unlock_fs+0x2e>
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	2b0c      	cmp	r3, #12
 800edb6:	d00a      	beq.n	800edce <unlock_fs+0x2e>
 800edb8:	78fb      	ldrb	r3, [r7, #3]
 800edba:	2b0b      	cmp	r3, #11
 800edbc:	d007      	beq.n	800edce <unlock_fs+0x2e>
 800edbe:	78fb      	ldrb	r3, [r7, #3]
 800edc0:	2b0f      	cmp	r3, #15
 800edc2:	d004      	beq.n	800edce <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	691b      	ldr	r3, [r3, #16]
 800edc8:	4618      	mov	r0, r3
 800edca:	f003 fb76 	bl	80124ba <ff_rel_grant>
	}
}
 800edce:	bf00      	nop
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ede2:	2300      	movs	r3, #0
 800ede4:	60bb      	str	r3, [r7, #8]
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	60fb      	str	r3, [r7, #12]
 800edea:	e029      	b.n	800ee40 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800edec:	4a27      	ldr	r2, [pc, #156]	@ (800ee8c <chk_lock+0xb4>)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	011b      	lsls	r3, r3, #4
 800edf2:	4413      	add	r3, r2
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d01d      	beq.n	800ee36 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800edfa:	4a24      	ldr	r2, [pc, #144]	@ (800ee8c <chk_lock+0xb4>)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	011b      	lsls	r3, r3, #4
 800ee00:	4413      	add	r3, r2
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d116      	bne.n	800ee3a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ee0c:	4a1f      	ldr	r2, [pc, #124]	@ (800ee8c <chk_lock+0xb4>)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	011b      	lsls	r3, r3, #4
 800ee12:	4413      	add	r3, r2
 800ee14:	3304      	adds	r3, #4
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d10c      	bne.n	800ee3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ee20:	4a1a      	ldr	r2, [pc, #104]	@ (800ee8c <chk_lock+0xb4>)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	011b      	lsls	r3, r3, #4
 800ee26:	4413      	add	r3, r2
 800ee28:	3308      	adds	r3, #8
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d102      	bne.n	800ee3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ee34:	e007      	b.n	800ee46 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ee36:	2301      	movs	r3, #1
 800ee38:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	60fb      	str	r3, [r7, #12]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d9d2      	bls.n	800edec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d109      	bne.n	800ee60 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d102      	bne.n	800ee58 <chk_lock+0x80>
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d101      	bne.n	800ee5c <chk_lock+0x84>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	e010      	b.n	800ee7e <chk_lock+0xa6>
 800ee5c:	2312      	movs	r3, #18
 800ee5e:	e00e      	b.n	800ee7e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d108      	bne.n	800ee78 <chk_lock+0xa0>
 800ee66:	4a09      	ldr	r2, [pc, #36]	@ (800ee8c <chk_lock+0xb4>)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	011b      	lsls	r3, r3, #4
 800ee6c:	4413      	add	r3, r2
 800ee6e:	330c      	adds	r3, #12
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee76:	d101      	bne.n	800ee7c <chk_lock+0xa4>
 800ee78:	2310      	movs	r3, #16
 800ee7a:	e000      	b.n	800ee7e <chk_lock+0xa6>
 800ee7c:	2300      	movs	r3, #0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3714      	adds	r7, #20
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	2000c298 	.word	0x2000c298

0800ee90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ee96:	2300      	movs	r3, #0
 800ee98:	607b      	str	r3, [r7, #4]
 800ee9a:	e002      	b.n	800eea2 <enq_lock+0x12>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	607b      	str	r3, [r7, #4]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d806      	bhi.n	800eeb6 <enq_lock+0x26>
 800eea8:	4a09      	ldr	r2, [pc, #36]	@ (800eed0 <enq_lock+0x40>)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	011b      	lsls	r3, r3, #4
 800eeae:	4413      	add	r3, r2
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d1f2      	bne.n	800ee9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	bf14      	ite	ne
 800eebc:	2301      	movne	r3, #1
 800eebe:	2300      	moveq	r3, #0
 800eec0:	b2db      	uxtb	r3, r3
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	370c      	adds	r7, #12
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	2000c298 	.word	0x2000c298

0800eed4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eede:	2300      	movs	r3, #0
 800eee0:	60fb      	str	r3, [r7, #12]
 800eee2:	e01f      	b.n	800ef24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eee4:	4a41      	ldr	r2, [pc, #260]	@ (800efec <inc_lock+0x118>)
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	011b      	lsls	r3, r3, #4
 800eeea:	4413      	add	r3, r2
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d113      	bne.n	800ef1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eef6:	4a3d      	ldr	r2, [pc, #244]	@ (800efec <inc_lock+0x118>)
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	011b      	lsls	r3, r3, #4
 800eefc:	4413      	add	r3, r2
 800eefe:	3304      	adds	r3, #4
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d109      	bne.n	800ef1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ef0a:	4a38      	ldr	r2, [pc, #224]	@ (800efec <inc_lock+0x118>)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	011b      	lsls	r3, r3, #4
 800ef10:	4413      	add	r3, r2
 800ef12:	3308      	adds	r3, #8
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d006      	beq.n	800ef2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	3301      	adds	r3, #1
 800ef22:	60fb      	str	r3, [r7, #12]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d9dc      	bls.n	800eee4 <inc_lock+0x10>
 800ef2a:	e000      	b.n	800ef2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ef2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d132      	bne.n	800ef9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef34:	2300      	movs	r3, #0
 800ef36:	60fb      	str	r3, [r7, #12]
 800ef38:	e002      	b.n	800ef40 <inc_lock+0x6c>
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d806      	bhi.n	800ef54 <inc_lock+0x80>
 800ef46:	4a29      	ldr	r2, [pc, #164]	@ (800efec <inc_lock+0x118>)
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	011b      	lsls	r3, r3, #4
 800ef4c:	4413      	add	r3, r2
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d1f2      	bne.n	800ef3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d101      	bne.n	800ef5e <inc_lock+0x8a>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	e040      	b.n	800efe0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	4922      	ldr	r1, [pc, #136]	@ (800efec <inc_lock+0x118>)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	011b      	lsls	r3, r3, #4
 800ef68:	440b      	add	r3, r1
 800ef6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	689a      	ldr	r2, [r3, #8]
 800ef70:	491e      	ldr	r1, [pc, #120]	@ (800efec <inc_lock+0x118>)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	011b      	lsls	r3, r3, #4
 800ef76:	440b      	add	r3, r1
 800ef78:	3304      	adds	r3, #4
 800ef7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	695a      	ldr	r2, [r3, #20]
 800ef80:	491a      	ldr	r1, [pc, #104]	@ (800efec <inc_lock+0x118>)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	011b      	lsls	r3, r3, #4
 800ef86:	440b      	add	r3, r1
 800ef88:	3308      	adds	r3, #8
 800ef8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ef8c:	4a17      	ldr	r2, [pc, #92]	@ (800efec <inc_lock+0x118>)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	011b      	lsls	r3, r3, #4
 800ef92:	4413      	add	r3, r2
 800ef94:	330c      	adds	r3, #12
 800ef96:	2200      	movs	r2, #0
 800ef98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d009      	beq.n	800efb4 <inc_lock+0xe0>
 800efa0:	4a12      	ldr	r2, [pc, #72]	@ (800efec <inc_lock+0x118>)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	011b      	lsls	r3, r3, #4
 800efa6:	4413      	add	r3, r2
 800efa8:	330c      	adds	r3, #12
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d001      	beq.n	800efb4 <inc_lock+0xe0>
 800efb0:	2300      	movs	r3, #0
 800efb2:	e015      	b.n	800efe0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d108      	bne.n	800efcc <inc_lock+0xf8>
 800efba:	4a0c      	ldr	r2, [pc, #48]	@ (800efec <inc_lock+0x118>)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	011b      	lsls	r3, r3, #4
 800efc0:	4413      	add	r3, r2
 800efc2:	330c      	adds	r3, #12
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	3301      	adds	r3, #1
 800efc8:	b29a      	uxth	r2, r3
 800efca:	e001      	b.n	800efd0 <inc_lock+0xfc>
 800efcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800efd0:	4906      	ldr	r1, [pc, #24]	@ (800efec <inc_lock+0x118>)
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	011b      	lsls	r3, r3, #4
 800efd6:	440b      	add	r3, r1
 800efd8:	330c      	adds	r3, #12
 800efda:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	3301      	adds	r3, #1
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3714      	adds	r7, #20
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	2000c298 	.word	0x2000c298

0800eff0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	3b01      	subs	r3, #1
 800effc:	607b      	str	r3, [r7, #4]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b01      	cmp	r3, #1
 800f002:	d825      	bhi.n	800f050 <dec_lock+0x60>
		n = Files[i].ctr;
 800f004:	4a17      	ldr	r2, [pc, #92]	@ (800f064 <dec_lock+0x74>)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	011b      	lsls	r3, r3, #4
 800f00a:	4413      	add	r3, r2
 800f00c:	330c      	adds	r3, #12
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f012:	89fb      	ldrh	r3, [r7, #14]
 800f014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f018:	d101      	bne.n	800f01e <dec_lock+0x2e>
 800f01a:	2300      	movs	r3, #0
 800f01c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f01e:	89fb      	ldrh	r3, [r7, #14]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <dec_lock+0x3a>
 800f024:	89fb      	ldrh	r3, [r7, #14]
 800f026:	3b01      	subs	r3, #1
 800f028:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f02a:	4a0e      	ldr	r2, [pc, #56]	@ (800f064 <dec_lock+0x74>)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	011b      	lsls	r3, r3, #4
 800f030:	4413      	add	r3, r2
 800f032:	330c      	adds	r3, #12
 800f034:	89fa      	ldrh	r2, [r7, #14]
 800f036:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f038:	89fb      	ldrh	r3, [r7, #14]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d105      	bne.n	800f04a <dec_lock+0x5a>
 800f03e:	4a09      	ldr	r2, [pc, #36]	@ (800f064 <dec_lock+0x74>)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	011b      	lsls	r3, r3, #4
 800f044:	4413      	add	r3, r2
 800f046:	2200      	movs	r2, #0
 800f048:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f04a:	2300      	movs	r3, #0
 800f04c:	737b      	strb	r3, [r7, #13]
 800f04e:	e001      	b.n	800f054 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f050:	2302      	movs	r3, #2
 800f052:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f054:	7b7b      	ldrb	r3, [r7, #13]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3714      	adds	r7, #20
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	2000c298 	.word	0x2000c298

0800f068 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f070:	2300      	movs	r3, #0
 800f072:	60fb      	str	r3, [r7, #12]
 800f074:	e010      	b.n	800f098 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f076:	4a0d      	ldr	r2, [pc, #52]	@ (800f0ac <clear_lock+0x44>)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	011b      	lsls	r3, r3, #4
 800f07c:	4413      	add	r3, r2
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	429a      	cmp	r2, r3
 800f084:	d105      	bne.n	800f092 <clear_lock+0x2a>
 800f086:	4a09      	ldr	r2, [pc, #36]	@ (800f0ac <clear_lock+0x44>)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	011b      	lsls	r3, r3, #4
 800f08c:	4413      	add	r3, r2
 800f08e:	2200      	movs	r2, #0
 800f090:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3301      	adds	r3, #1
 800f096:	60fb      	str	r3, [r7, #12]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d9eb      	bls.n	800f076 <clear_lock+0xe>
	}
}
 800f09e:	bf00      	nop
 800f0a0:	bf00      	nop
 800f0a2:	3714      	adds	r7, #20
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr
 800f0ac:	2000c298 	.word	0x2000c298

0800f0b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	78db      	ldrb	r3, [r3, #3]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d034      	beq.n	800f12e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	7858      	ldrb	r0, [r3, #1]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	697a      	ldr	r2, [r7, #20]
 800f0d8:	f7ff fd0e 	bl	800eaf8 <disk_write>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d002      	beq.n	800f0e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	73fb      	strb	r3, [r7, #15]
 800f0e6:	e022      	b.n	800f12e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	1ad2      	subs	r2, r2, r3
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d217      	bcs.n	800f12e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	789b      	ldrb	r3, [r3, #2]
 800f102:	613b      	str	r3, [r7, #16]
 800f104:	e010      	b.n	800f128 <sync_window+0x78>
					wsect += fs->fsize;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a1b      	ldr	r3, [r3, #32]
 800f10a:	697a      	ldr	r2, [r7, #20]
 800f10c:	4413      	add	r3, r2
 800f10e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	7858      	ldrb	r0, [r3, #1]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f11a:	2301      	movs	r3, #1
 800f11c:	697a      	ldr	r2, [r7, #20]
 800f11e:	f7ff fceb 	bl	800eaf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	3b01      	subs	r3, #1
 800f126:	613b      	str	r3, [r7, #16]
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d8eb      	bhi.n	800f106 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3718      	adds	r7, #24
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f142:	2300      	movs	r3, #0
 800f144:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d01b      	beq.n	800f188 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f7ff ffad 	bl	800f0b0 <sync_window>
 800f156:	4603      	mov	r3, r0
 800f158:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f15a:	7bfb      	ldrb	r3, [r7, #15]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d113      	bne.n	800f188 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	7858      	ldrb	r0, [r3, #1]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f16a:	2301      	movs	r3, #1
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	f7ff fca3 	bl	800eab8 <disk_read>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d004      	beq.n	800f182 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f178:	f04f 33ff 	mov.w	r3, #4294967295
 800f17c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f17e:	2301      	movs	r3, #1
 800f180:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	683a      	ldr	r2, [r7, #0]
 800f186:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800f188:	7bfb      	ldrb	r3, [r7, #15]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
	...

0800f194 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7ff ff87 	bl	800f0b0 <sync_window>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f1a6:	7bfb      	ldrb	r3, [r7, #15]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d158      	bne.n	800f25e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	2b03      	cmp	r3, #3
 800f1b2:	d148      	bne.n	800f246 <sync_fs+0xb2>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	791b      	ldrb	r3, [r3, #4]
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d144      	bne.n	800f246 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	3338      	adds	r3, #56	@ 0x38
 800f1c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7ff fd77 	bl	800ecba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	3338      	adds	r3, #56	@ 0x38
 800f1d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f1d4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff fd06 	bl	800ebea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	3338      	adds	r3, #56	@ 0x38
 800f1e2:	4921      	ldr	r1, [pc, #132]	@ (800f268 <sync_fs+0xd4>)
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7ff fd1b 	bl	800ec20 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	3338      	adds	r3, #56	@ 0x38
 800f1ee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f1f2:	491e      	ldr	r1, [pc, #120]	@ (800f26c <sync_fs+0xd8>)
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff fd13 	bl	800ec20 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	3338      	adds	r3, #56	@ 0x38
 800f1fe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	699b      	ldr	r3, [r3, #24]
 800f206:	4619      	mov	r1, r3
 800f208:	4610      	mov	r0, r2
 800f20a:	f7ff fd09 	bl	800ec20 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	3338      	adds	r3, #56	@ 0x38
 800f212:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	695b      	ldr	r3, [r3, #20]
 800f21a:	4619      	mov	r1, r3
 800f21c:	4610      	mov	r0, r2
 800f21e:	f7ff fcff 	bl	800ec20 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f226:	1c5a      	adds	r2, r3, #1
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	7858      	ldrb	r0, [r3, #1]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f23a:	2301      	movs	r3, #1
 800f23c:	f7ff fc5c 	bl	800eaf8 <disk_write>
			fs->fsi_flag = 0;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	785b      	ldrb	r3, [r3, #1]
 800f24a:	2200      	movs	r2, #0
 800f24c:	2100      	movs	r1, #0
 800f24e:	4618      	mov	r0, r3
 800f250:	f7ff fc72 	bl	800eb38 <disk_ioctl>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <sync_fs+0xca>
 800f25a:	2301      	movs	r3, #1
 800f25c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	41615252 	.word	0x41615252
 800f26c:	61417272 	.word	0x61417272

0800f270 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	3b02      	subs	r3, #2
 800f27e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	69db      	ldr	r3, [r3, #28]
 800f284:	3b02      	subs	r3, #2
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d301      	bcc.n	800f290 <clust2sect+0x20>
 800f28c:	2300      	movs	r3, #0
 800f28e:	e008      	b.n	800f2a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	895b      	ldrh	r3, [r3, #10]
 800f294:	461a      	mov	r2, r3
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	fb03 f202 	mul.w	r2, r3, r2
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2a0:	4413      	add	r3, r2
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	370c      	adds	r7, #12
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b086      	sub	sp, #24
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d904      	bls.n	800f2ce <get_fat+0x20>
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	69db      	ldr	r3, [r3, #28]
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d302      	bcc.n	800f2d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	617b      	str	r3, [r7, #20]
 800f2d2:	e08e      	b.n	800f3f2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d061      	beq.n	800f3a6 <get_fat+0xf8>
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	dc7b      	bgt.n	800f3de <get_fat+0x130>
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d002      	beq.n	800f2f0 <get_fat+0x42>
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d041      	beq.n	800f372 <get_fat+0xc4>
 800f2ee:	e076      	b.n	800f3de <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	60fb      	str	r3, [r7, #12]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	085b      	lsrs	r3, r3, #1
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	0a5b      	lsrs	r3, r3, #9
 800f306:	4413      	add	r3, r2
 800f308:	4619      	mov	r1, r3
 800f30a:	6938      	ldr	r0, [r7, #16]
 800f30c:	f7ff ff14 	bl	800f138 <move_window>
 800f310:	4603      	mov	r3, r0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d166      	bne.n	800f3e4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	1c5a      	adds	r2, r3, #1
 800f31a:	60fa      	str	r2, [r7, #12]
 800f31c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f320:	693a      	ldr	r2, [r7, #16]
 800f322:	4413      	add	r3, r2
 800f324:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f328:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	0a5b      	lsrs	r3, r3, #9
 800f332:	4413      	add	r3, r2
 800f334:	4619      	mov	r1, r3
 800f336:	6938      	ldr	r0, [r7, #16]
 800f338:	f7ff fefe 	bl	800f138 <move_window>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d152      	bne.n	800f3e8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f348:	693a      	ldr	r2, [r7, #16]
 800f34a:	4413      	add	r3, r2
 800f34c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f350:	021b      	lsls	r3, r3, #8
 800f352:	68ba      	ldr	r2, [r7, #8]
 800f354:	4313      	orrs	r3, r2
 800f356:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	f003 0301 	and.w	r3, r3, #1
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d002      	beq.n	800f368 <get_fat+0xba>
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	091b      	lsrs	r3, r3, #4
 800f366:	e002      	b.n	800f36e <get_fat+0xc0>
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f36e:	617b      	str	r3, [r7, #20]
			break;
 800f370:	e03f      	b.n	800f3f2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	0a1b      	lsrs	r3, r3, #8
 800f37a:	4413      	add	r3, r2
 800f37c:	4619      	mov	r1, r3
 800f37e:	6938      	ldr	r0, [r7, #16]
 800f380:	f7ff feda 	bl	800f138 <move_window>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d130      	bne.n	800f3ec <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f398:	4413      	add	r3, r2
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff fbea 	bl	800eb74 <ld_word>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	617b      	str	r3, [r7, #20]
			break;
 800f3a4:	e025      	b.n	800f3f2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	09db      	lsrs	r3, r3, #7
 800f3ae:	4413      	add	r3, r2
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6938      	ldr	r0, [r7, #16]
 800f3b4:	f7ff fec0 	bl	800f138 <move_window>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d118      	bne.n	800f3f0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f3cc:	4413      	add	r3, r2
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7ff fbe8 	bl	800eba4 <ld_dword>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f3da:	617b      	str	r3, [r7, #20]
			break;
 800f3dc:	e009      	b.n	800f3f2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f3de:	2301      	movs	r3, #1
 800f3e0:	617b      	str	r3, [r7, #20]
 800f3e2:	e006      	b.n	800f3f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3e4:	bf00      	nop
 800f3e6:	e004      	b.n	800f3f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3e8:	bf00      	nop
 800f3ea:	e002      	b.n	800f3f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f3ec:	bf00      	nop
 800f3ee:	e000      	b.n	800f3f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f3f0:	bf00      	nop
		}
	}

	return val;
 800f3f2:	697b      	ldr	r3, [r7, #20]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3718      	adds	r7, #24
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f3fc:	b590      	push	{r4, r7, lr}
 800f3fe:	b089      	sub	sp, #36	@ 0x24
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f408:	2302      	movs	r3, #2
 800f40a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	2b01      	cmp	r3, #1
 800f410:	f240 80d9 	bls.w	800f5c6 <put_fat+0x1ca>
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	69db      	ldr	r3, [r3, #28]
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	f080 80d3 	bcs.w	800f5c6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b03      	cmp	r3, #3
 800f426:	f000 8096 	beq.w	800f556 <put_fat+0x15a>
 800f42a:	2b03      	cmp	r3, #3
 800f42c:	f300 80cb 	bgt.w	800f5c6 <put_fat+0x1ca>
 800f430:	2b01      	cmp	r3, #1
 800f432:	d002      	beq.n	800f43a <put_fat+0x3e>
 800f434:	2b02      	cmp	r3, #2
 800f436:	d06e      	beq.n	800f516 <put_fat+0x11a>
 800f438:	e0c5      	b.n	800f5c6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	61bb      	str	r3, [r7, #24]
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	085b      	lsrs	r3, r3, #1
 800f442:	69ba      	ldr	r2, [r7, #24]
 800f444:	4413      	add	r3, r2
 800f446:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	0a5b      	lsrs	r3, r3, #9
 800f450:	4413      	add	r3, r2
 800f452:	4619      	mov	r1, r3
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f7ff fe6f 	bl	800f138 <move_window>
 800f45a:	4603      	mov	r3, r0
 800f45c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f45e:	7ffb      	ldrb	r3, [r7, #31]
 800f460:	2b00      	cmp	r3, #0
 800f462:	f040 80a9 	bne.w	800f5b8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	1c59      	adds	r1, r3, #1
 800f470:	61b9      	str	r1, [r7, #24]
 800f472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f476:	4413      	add	r3, r2
 800f478:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	f003 0301 	and.w	r3, r3, #1
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00d      	beq.n	800f4a0 <put_fat+0xa4>
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	b25b      	sxtb	r3, r3
 800f48a:	f003 030f 	and.w	r3, r3, #15
 800f48e:	b25a      	sxtb	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	b2db      	uxtb	r3, r3
 800f494:	011b      	lsls	r3, r3, #4
 800f496:	b25b      	sxtb	r3, r3
 800f498:	4313      	orrs	r3, r2
 800f49a:	b25b      	sxtb	r3, r3
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	e001      	b.n	800f4a4 <put_fat+0xa8>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	697a      	ldr	r2, [r7, #20]
 800f4a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	0a5b      	lsrs	r3, r3, #9
 800f4b6:	4413      	add	r3, r2
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f7ff fe3c 	bl	800f138 <move_window>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f4c4:	7ffb      	ldrb	r3, [r7, #31]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d178      	bne.n	800f5bc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4d6:	4413      	add	r3, r2
 800f4d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	f003 0301 	and.w	r3, r3, #1
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <put_fat+0xf0>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	091b      	lsrs	r3, r3, #4
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	e00e      	b.n	800f50a <put_fat+0x10e>
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	b25b      	sxtb	r3, r3
 800f4f2:	f023 030f 	bic.w	r3, r3, #15
 800f4f6:	b25a      	sxtb	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	0a1b      	lsrs	r3, r3, #8
 800f4fc:	b25b      	sxtb	r3, r3
 800f4fe:	f003 030f 	and.w	r3, r3, #15
 800f502:	b25b      	sxtb	r3, r3
 800f504:	4313      	orrs	r3, r2
 800f506:	b25b      	sxtb	r3, r3
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	697a      	ldr	r2, [r7, #20]
 800f50c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2201      	movs	r2, #1
 800f512:	70da      	strb	r2, [r3, #3]
			break;
 800f514:	e057      	b.n	800f5c6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	0a1b      	lsrs	r3, r3, #8
 800f51e:	4413      	add	r3, r2
 800f520:	4619      	mov	r1, r3
 800f522:	68f8      	ldr	r0, [r7, #12]
 800f524:	f7ff fe08 	bl	800f138 <move_window>
 800f528:	4603      	mov	r3, r0
 800f52a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f52c:	7ffb      	ldrb	r3, [r7, #31]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d146      	bne.n	800f5c0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	005b      	lsls	r3, r3, #1
 800f53c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f540:	4413      	add	r3, r2
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	b292      	uxth	r2, r2
 800f546:	4611      	mov	r1, r2
 800f548:	4618      	mov	r0, r3
 800f54a:	f7ff fb4e 	bl	800ebea <st_word>
			fs->wflag = 1;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2201      	movs	r2, #1
 800f552:	70da      	strb	r2, [r3, #3]
			break;
 800f554:	e037      	b.n	800f5c6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	09db      	lsrs	r3, r3, #7
 800f55e:	4413      	add	r3, r2
 800f560:	4619      	mov	r1, r3
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f7ff fde8 	bl	800f138 <move_window>
 800f568:	4603      	mov	r3, r0
 800f56a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f56c:	7ffb      	ldrb	r3, [r7, #31]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d128      	bne.n	800f5c4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	009b      	lsls	r3, r3, #2
 800f582:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f586:	4413      	add	r3, r2
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff fb0b 	bl	800eba4 <ld_dword>
 800f58e:	4603      	mov	r3, r0
 800f590:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f594:	4323      	orrs	r3, r4
 800f596:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f5a6:	4413      	add	r3, r2
 800f5a8:	6879      	ldr	r1, [r7, #4]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7ff fb38 	bl	800ec20 <st_dword>
			fs->wflag = 1;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	70da      	strb	r2, [r3, #3]
			break;
 800f5b6:	e006      	b.n	800f5c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f5b8:	bf00      	nop
 800f5ba:	e004      	b.n	800f5c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f5bc:	bf00      	nop
 800f5be:	e002      	b.n	800f5c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f5c0:	bf00      	nop
 800f5c2:	e000      	b.n	800f5c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f5c4:	bf00      	nop
		}
	}
	return res;
 800f5c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3724      	adds	r7, #36	@ 0x24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd90      	pop	{r4, r7, pc}

0800f5d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b088      	sub	sp, #32
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d904      	bls.n	800f5f6 <remove_chain+0x26>
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	69db      	ldr	r3, [r3, #28]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d301      	bcc.n	800f5fa <remove_chain+0x2a>
 800f5f6:	2302      	movs	r3, #2
 800f5f8:	e04b      	b.n	800f692 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d00c      	beq.n	800f61a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f600:	f04f 32ff 	mov.w	r2, #4294967295
 800f604:	6879      	ldr	r1, [r7, #4]
 800f606:	69b8      	ldr	r0, [r7, #24]
 800f608:	f7ff fef8 	bl	800f3fc <put_fat>
 800f60c:	4603      	mov	r3, r0
 800f60e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f610:	7ffb      	ldrb	r3, [r7, #31]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <remove_chain+0x4a>
 800f616:	7ffb      	ldrb	r3, [r7, #31]
 800f618:	e03b      	b.n	800f692 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f61a:	68b9      	ldr	r1, [r7, #8]
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f7ff fe46 	bl	800f2ae <get_fat>
 800f622:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d031      	beq.n	800f68e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d101      	bne.n	800f634 <remove_chain+0x64>
 800f630:	2302      	movs	r3, #2
 800f632:	e02e      	b.n	800f692 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f63a:	d101      	bne.n	800f640 <remove_chain+0x70>
 800f63c:	2301      	movs	r3, #1
 800f63e:	e028      	b.n	800f692 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f640:	2200      	movs	r2, #0
 800f642:	68b9      	ldr	r1, [r7, #8]
 800f644:	69b8      	ldr	r0, [r7, #24]
 800f646:	f7ff fed9 	bl	800f3fc <put_fat>
 800f64a:	4603      	mov	r3, r0
 800f64c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f64e:	7ffb      	ldrb	r3, [r7, #31]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d001      	beq.n	800f658 <remove_chain+0x88>
 800f654:	7ffb      	ldrb	r3, [r7, #31]
 800f656:	e01c      	b.n	800f692 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	699a      	ldr	r2, [r3, #24]
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	69db      	ldr	r3, [r3, #28]
 800f660:	3b02      	subs	r3, #2
 800f662:	429a      	cmp	r2, r3
 800f664:	d20b      	bcs.n	800f67e <remove_chain+0xae>
			fs->free_clst++;
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	699b      	ldr	r3, [r3, #24]
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	791b      	ldrb	r3, [r3, #4]
 800f674:	f043 0301 	orr.w	r3, r3, #1
 800f678:	b2da      	uxtb	r2, r3
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	69db      	ldr	r3, [r3, #28]
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d3c6      	bcc.n	800f61a <remove_chain+0x4a>
 800f68c:	e000      	b.n	800f690 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f68e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3720      	adds	r7, #32
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b088      	sub	sp, #32
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d10d      	bne.n	800f6cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	695b      	ldr	r3, [r3, #20]
 800f6b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d004      	beq.n	800f6c6 <create_chain+0x2c>
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	69db      	ldr	r3, [r3, #28]
 800f6c0:	69ba      	ldr	r2, [r7, #24]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d31b      	bcc.n	800f6fe <create_chain+0x64>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	61bb      	str	r3, [r7, #24]
 800f6ca:	e018      	b.n	800f6fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f6cc:	6839      	ldr	r1, [r7, #0]
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f7ff fded 	bl	800f2ae <get_fat>
 800f6d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d801      	bhi.n	800f6e0 <create_chain+0x46>
 800f6dc:	2301      	movs	r3, #1
 800f6de:	e070      	b.n	800f7c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6e6:	d101      	bne.n	800f6ec <create_chain+0x52>
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	e06a      	b.n	800f7c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	69db      	ldr	r3, [r3, #28]
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d201      	bcs.n	800f6fa <create_chain+0x60>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	e063      	b.n	800f7c2 <create_chain+0x128>
		scl = clst;
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	3301      	adds	r3, #1
 800f706:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	69fa      	ldr	r2, [r7, #28]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d307      	bcc.n	800f722 <create_chain+0x88>
				ncl = 2;
 800f712:	2302      	movs	r3, #2
 800f714:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f716:	69fa      	ldr	r2, [r7, #28]
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d901      	bls.n	800f722 <create_chain+0x88>
 800f71e:	2300      	movs	r3, #0
 800f720:	e04f      	b.n	800f7c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f722:	69f9      	ldr	r1, [r7, #28]
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f7ff fdc2 	bl	800f2ae <get_fat>
 800f72a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00e      	beq.n	800f750 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d003      	beq.n	800f740 <create_chain+0xa6>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f73e:	d101      	bne.n	800f744 <create_chain+0xaa>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	e03e      	b.n	800f7c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f744:	69fa      	ldr	r2, [r7, #28]
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d1da      	bne.n	800f702 <create_chain+0x68>
 800f74c:	2300      	movs	r3, #0
 800f74e:	e038      	b.n	800f7c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f750:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f752:	f04f 32ff 	mov.w	r2, #4294967295
 800f756:	69f9      	ldr	r1, [r7, #28]
 800f758:	6938      	ldr	r0, [r7, #16]
 800f75a:	f7ff fe4f 	bl	800f3fc <put_fat>
 800f75e:	4603      	mov	r3, r0
 800f760:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f762:	7dfb      	ldrb	r3, [r7, #23]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d109      	bne.n	800f77c <create_chain+0xe2>
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d006      	beq.n	800f77c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f76e:	69fa      	ldr	r2, [r7, #28]
 800f770:	6839      	ldr	r1, [r7, #0]
 800f772:	6938      	ldr	r0, [r7, #16]
 800f774:	f7ff fe42 	bl	800f3fc <put_fat>
 800f778:	4603      	mov	r3, r0
 800f77a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f77c:	7dfb      	ldrb	r3, [r7, #23]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d116      	bne.n	800f7b0 <create_chain+0x116>
		fs->last_clst = ncl;
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	69fa      	ldr	r2, [r7, #28]
 800f786:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	699a      	ldr	r2, [r3, #24]
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	69db      	ldr	r3, [r3, #28]
 800f790:	3b02      	subs	r3, #2
 800f792:	429a      	cmp	r2, r3
 800f794:	d804      	bhi.n	800f7a0 <create_chain+0x106>
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	699b      	ldr	r3, [r3, #24]
 800f79a:	1e5a      	subs	r2, r3, #1
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	791b      	ldrb	r3, [r3, #4]
 800f7a4:	f043 0301 	orr.w	r3, r3, #1
 800f7a8:	b2da      	uxtb	r2, r3
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	711a      	strb	r2, [r3, #4]
 800f7ae:	e007      	b.n	800f7c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f7b0:	7dfb      	ldrb	r3, [r7, #23]
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d102      	bne.n	800f7bc <create_chain+0x122>
 800f7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ba:	e000      	b.n	800f7be <create_chain+0x124>
 800f7bc:	2301      	movs	r3, #1
 800f7be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f7c0:	69fb      	ldr	r3, [r7, #28]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3720      	adds	r7, #32
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}

0800f7ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f7ca:	b480      	push	{r7}
 800f7cc:	b087      	sub	sp, #28
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
 800f7d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7de:	3304      	adds	r3, #4
 800f7e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	0a5b      	lsrs	r3, r3, #9
 800f7e6:	68fa      	ldr	r2, [r7, #12]
 800f7e8:	8952      	ldrh	r2, [r2, #10]
 800f7ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	1d1a      	adds	r2, r3, #4
 800f7f4:	613a      	str	r2, [r7, #16]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <clmt_clust+0x3a>
 800f800:	2300      	movs	r3, #0
 800f802:	e010      	b.n	800f826 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f804:	697a      	ldr	r2, [r7, #20]
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d307      	bcc.n	800f81c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f80c:	697a      	ldr	r2, [r7, #20]
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	617b      	str	r3, [r7, #20]
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	3304      	adds	r3, #4
 800f818:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f81a:	e7e9      	b.n	800f7f0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f81c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	4413      	add	r3, r2
}
 800f826:	4618      	mov	r0, r3
 800f828:	371c      	adds	r7, #28
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr

0800f832 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b086      	sub	sp, #24
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f848:	d204      	bcs.n	800f854 <dir_sdi+0x22>
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	f003 031f 	and.w	r3, r3, #31
 800f850:	2b00      	cmp	r3, #0
 800f852:	d001      	beq.n	800f858 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f854:	2302      	movs	r3, #2
 800f856:	e063      	b.n	800f920 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	683a      	ldr	r2, [r7, #0]
 800f85c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d106      	bne.n	800f878 <dir_sdi+0x46>
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d902      	bls.n	800f878 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f876:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10c      	bne.n	800f898 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	095b      	lsrs	r3, r3, #5
 800f882:	693a      	ldr	r2, [r7, #16]
 800f884:	8912      	ldrh	r2, [r2, #8]
 800f886:	4293      	cmp	r3, r2
 800f888:	d301      	bcc.n	800f88e <dir_sdi+0x5c>
 800f88a:	2302      	movs	r3, #2
 800f88c:	e048      	b.n	800f920 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	61da      	str	r2, [r3, #28]
 800f896:	e029      	b.n	800f8ec <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	895b      	ldrh	r3, [r3, #10]
 800f89c:	025b      	lsls	r3, r3, #9
 800f89e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f8a0:	e019      	b.n	800f8d6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6979      	ldr	r1, [r7, #20]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7ff fd01 	bl	800f2ae <get_fat>
 800f8ac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b4:	d101      	bne.n	800f8ba <dir_sdi+0x88>
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e032      	b.n	800f920 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d904      	bls.n	800f8ca <dir_sdi+0x98>
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	69db      	ldr	r3, [r3, #28]
 800f8c4:	697a      	ldr	r2, [r7, #20]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d301      	bcc.n	800f8ce <dir_sdi+0x9c>
 800f8ca:	2302      	movs	r3, #2
 800f8cc:	e028      	b.n	800f920 <dir_sdi+0xee>
			ofs -= csz;
 800f8ce:	683a      	ldr	r2, [r7, #0]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f8d6:	683a      	ldr	r2, [r7, #0]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d2e1      	bcs.n	800f8a2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f8de:	6979      	ldr	r1, [r7, #20]
 800f8e0:	6938      	ldr	r0, [r7, #16]
 800f8e2:	f7ff fcc5 	bl	800f270 <clust2sect>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	697a      	ldr	r2, [r7, #20]
 800f8f0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	69db      	ldr	r3, [r3, #28]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <dir_sdi+0xcc>
 800f8fa:	2302      	movs	r3, #2
 800f8fc:	e010      	b.n	800f920 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	69da      	ldr	r2, [r3, #28]
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	0a5b      	lsrs	r3, r3, #9
 800f906:	441a      	add	r2, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f918:	441a      	add	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f91e:	2300      	movs	r3, #0
}
 800f920:	4618      	mov	r0, r3
 800f922:	3718      	adds	r7, #24
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b086      	sub	sp, #24
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	695b      	ldr	r3, [r3, #20]
 800f93c:	3320      	adds	r3, #32
 800f93e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	69db      	ldr	r3, [r3, #28]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d003      	beq.n	800f950 <dir_next+0x28>
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f94e:	d301      	bcc.n	800f954 <dir_next+0x2c>
 800f950:	2304      	movs	r3, #4
 800f952:	e0aa      	b.n	800faaa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f040 8098 	bne.w	800fa90 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	69db      	ldr	r3, [r3, #28]
 800f964:	1c5a      	adds	r2, r3, #1
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d10b      	bne.n	800f98a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	095b      	lsrs	r3, r3, #5
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	8912      	ldrh	r2, [r2, #8]
 800f97a:	4293      	cmp	r3, r2
 800f97c:	f0c0 8088 	bcc.w	800fa90 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	61da      	str	r2, [r3, #28]
 800f986:	2304      	movs	r3, #4
 800f988:	e08f      	b.n	800faaa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	0a5b      	lsrs	r3, r3, #9
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	8952      	ldrh	r2, [r2, #10]
 800f992:	3a01      	subs	r2, #1
 800f994:	4013      	ands	r3, r2
 800f996:	2b00      	cmp	r3, #0
 800f998:	d17a      	bne.n	800fa90 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	699b      	ldr	r3, [r3, #24]
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	f7ff fc83 	bl	800f2ae <get_fat>
 800f9a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d801      	bhi.n	800f9b4 <dir_next+0x8c>
 800f9b0:	2302      	movs	r3, #2
 800f9b2:	e07a      	b.n	800faaa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ba:	d101      	bne.n	800f9c0 <dir_next+0x98>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e074      	b.n	800faaa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	69db      	ldr	r3, [r3, #28]
 800f9c4:	697a      	ldr	r2, [r7, #20]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d358      	bcc.n	800fa7c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d104      	bne.n	800f9da <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	61da      	str	r2, [r3, #28]
 800f9d6:	2304      	movs	r3, #4
 800f9d8:	e067      	b.n	800faaa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	699b      	ldr	r3, [r3, #24]
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	f7ff fe59 	bl	800f69a <create_chain>
 800f9e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d101      	bne.n	800f9f4 <dir_next+0xcc>
 800f9f0:	2307      	movs	r3, #7
 800f9f2:	e05a      	b.n	800faaa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	2b01      	cmp	r3, #1
 800f9f8:	d101      	bne.n	800f9fe <dir_next+0xd6>
 800f9fa:	2302      	movs	r3, #2
 800f9fc:	e055      	b.n	800faaa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa04:	d101      	bne.n	800fa0a <dir_next+0xe2>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e04f      	b.n	800faaa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f7ff fb50 	bl	800f0b0 <sync_window>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d001      	beq.n	800fa1a <dir_next+0xf2>
 800fa16:	2301      	movs	r3, #1
 800fa18:	e047      	b.n	800faaa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	3338      	adds	r3, #56	@ 0x38
 800fa1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa22:	2100      	movs	r1, #0
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7ff f948 	bl	800ecba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	613b      	str	r3, [r7, #16]
 800fa2e:	6979      	ldr	r1, [r7, #20]
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f7ff fc1d 	bl	800f270 <clust2sect>
 800fa36:	4602      	mov	r2, r0
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	635a      	str	r2, [r3, #52]	@ 0x34
 800fa3c:	e012      	b.n	800fa64 <dir_next+0x13c>
						fs->wflag = 1;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2201      	movs	r2, #1
 800fa42:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7ff fb33 	bl	800f0b0 <sync_window>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <dir_next+0x12c>
 800fa50:	2301      	movs	r3, #1
 800fa52:	e02a      	b.n	800faaa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	3301      	adds	r3, #1
 800fa58:	613b      	str	r3, [r7, #16]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa5e:	1c5a      	adds	r2, r3, #1
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	635a      	str	r2, [r3, #52]	@ 0x34
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	895b      	ldrh	r3, [r3, #10]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d3e6      	bcc.n	800fa3e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	1ad2      	subs	r2, r2, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	697a      	ldr	r2, [r7, #20]
 800fa80:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fa82:	6979      	ldr	r1, [r7, #20]
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f7ff fbf3 	bl	800f270 <clust2sect>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faa2:	441a      	add	r2, r3
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3718      	adds	r7, #24
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b086      	sub	sp, #24
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fac2:	2100      	movs	r1, #0
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7ff feb4 	bl	800f832 <dir_sdi>
 800faca:	4603      	mov	r3, r0
 800facc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800face:	7dfb      	ldrb	r3, [r7, #23]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d12b      	bne.n	800fb2c <dir_alloc+0x7a>
		n = 0;
 800fad4:	2300      	movs	r3, #0
 800fad6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	69db      	ldr	r3, [r3, #28]
 800fadc:	4619      	mov	r1, r3
 800fade:	68f8      	ldr	r0, [r7, #12]
 800fae0:	f7ff fb2a 	bl	800f138 <move_window>
 800fae4:	4603      	mov	r3, r0
 800fae6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fae8:	7dfb      	ldrb	r3, [r7, #23]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d11d      	bne.n	800fb2a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6a1b      	ldr	r3, [r3, #32]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2be5      	cmp	r3, #229	@ 0xe5
 800faf6:	d004      	beq.n	800fb02 <dir_alloc+0x50>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a1b      	ldr	r3, [r3, #32]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d107      	bne.n	800fb12 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	3301      	adds	r3, #1
 800fb06:	613b      	str	r3, [r7, #16]
 800fb08:	693a      	ldr	r2, [r7, #16]
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d102      	bne.n	800fb16 <dir_alloc+0x64>
 800fb10:	e00c      	b.n	800fb2c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fb12:	2300      	movs	r3, #0
 800fb14:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fb16:	2101      	movs	r1, #1
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ff05 	bl	800f928 <dir_next>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d0d7      	beq.n	800fad8 <dir_alloc+0x26>
 800fb28:	e000      	b.n	800fb2c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fb2a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fb2c:	7dfb      	ldrb	r3, [r7, #23]
 800fb2e:	2b04      	cmp	r3, #4
 800fb30:	d101      	bne.n	800fb36 <dir_alloc+0x84>
 800fb32:	2307      	movs	r3, #7
 800fb34:	75fb      	strb	r3, [r7, #23]
	return res;
 800fb36:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	331a      	adds	r3, #26
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff f810 	bl	800eb74 <ld_word>
 800fb54:	4603      	mov	r3, r0
 800fb56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	2b03      	cmp	r3, #3
 800fb5e:	d109      	bne.n	800fb74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	3314      	adds	r3, #20
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7ff f805 	bl	800eb74 <ld_word>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	041b      	lsls	r3, r3, #16
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	4313      	orrs	r3, r2
 800fb72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fb74:	68fb      	ldr	r3, [r7, #12]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b084      	sub	sp, #16
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	60f8      	str	r0, [r7, #12]
 800fb86:	60b9      	str	r1, [r7, #8]
 800fb88:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	331a      	adds	r3, #26
 800fb8e:	687a      	ldr	r2, [r7, #4]
 800fb90:	b292      	uxth	r2, r2
 800fb92:	4611      	mov	r1, r2
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7ff f828 	bl	800ebea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	2b03      	cmp	r3, #3
 800fba0:	d109      	bne.n	800fbb6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	f103 0214 	add.w	r2, r3, #20
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	0c1b      	lsrs	r3, r3, #16
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	4619      	mov	r1, r3
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	f7ff f81a 	bl	800ebea <st_word>
	}
}
 800fbb6:	bf00      	nop
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
	...

0800fbc0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800fbc0:	b590      	push	{r4, r7, lr}
 800fbc2:	b087      	sub	sp, #28
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	331a      	adds	r3, #26
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe ffd0 	bl	800eb74 <ld_word>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d001      	beq.n	800fbde <cmp_lfn+0x1e>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e059      	b.n	800fc92 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fbe6:	1e5a      	subs	r2, r3, #1
 800fbe8:	4613      	mov	r3, r2
 800fbea:	005b      	lsls	r3, r3, #1
 800fbec:	4413      	add	r3, r2
 800fbee:	009b      	lsls	r3, r3, #2
 800fbf0:	4413      	add	r3, r2
 800fbf2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	81fb      	strh	r3, [r7, #14]
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	613b      	str	r3, [r7, #16]
 800fbfc:	e033      	b.n	800fc66 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fbfe:	4a27      	ldr	r2, [pc, #156]	@ (800fc9c <cmp_lfn+0xdc>)
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	4413      	add	r3, r2
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	461a      	mov	r2, r3
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7fe ffb1 	bl	800eb74 <ld_word>
 800fc12:	4603      	mov	r3, r0
 800fc14:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fc16:	89fb      	ldrh	r3, [r7, #14]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d01a      	beq.n	800fc52 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	2bfe      	cmp	r3, #254	@ 0xfe
 800fc20:	d812      	bhi.n	800fc48 <cmp_lfn+0x88>
 800fc22:	89bb      	ldrh	r3, [r7, #12]
 800fc24:	4618      	mov	r0, r3
 800fc26:	f002 fb7d 	bl	8012324 <ff_wtoupper>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	461c      	mov	r4, r3
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	1c5a      	adds	r2, r3, #1
 800fc32:	617a      	str	r2, [r7, #20]
 800fc34:	005b      	lsls	r3, r3, #1
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	4413      	add	r3, r2
 800fc3a:	881b      	ldrh	r3, [r3, #0]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f002 fb71 	bl	8012324 <ff_wtoupper>
 800fc42:	4603      	mov	r3, r0
 800fc44:	429c      	cmp	r4, r3
 800fc46:	d001      	beq.n	800fc4c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800fc48:	2300      	movs	r3, #0
 800fc4a:	e022      	b.n	800fc92 <cmp_lfn+0xd2>
			}
			wc = uc;
 800fc4c:	89bb      	ldrh	r3, [r7, #12]
 800fc4e:	81fb      	strh	r3, [r7, #14]
 800fc50:	e006      	b.n	800fc60 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fc52:	89bb      	ldrh	r3, [r7, #12]
 800fc54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d001      	beq.n	800fc60 <cmp_lfn+0xa0>
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	e018      	b.n	800fc92 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	3301      	adds	r3, #1
 800fc64:	613b      	str	r3, [r7, #16]
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	2b0c      	cmp	r3, #12
 800fc6a:	d9c8      	bls.n	800fbfe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d00b      	beq.n	800fc90 <cmp_lfn+0xd0>
 800fc78:	89fb      	ldrh	r3, [r7, #14]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d008      	beq.n	800fc90 <cmp_lfn+0xd0>
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	4413      	add	r3, r2
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d001      	beq.n	800fc90 <cmp_lfn+0xd0>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	e000      	b.n	800fc92 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800fc90:	2301      	movs	r3, #1
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	371c      	adds	r7, #28
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd90      	pop	{r4, r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	08018bf8 	.word	0x08018bf8

0800fca0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	331a      	adds	r3, #26
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7fe ff60 	bl	800eb74 <ld_word>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d001      	beq.n	800fcbe <pick_lfn+0x1e>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	e04d      	b.n	800fd5a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fcc6:	1e5a      	subs	r2, r3, #1
 800fcc8:	4613      	mov	r3, r2
 800fcca:	005b      	lsls	r3, r3, #1
 800fccc:	4413      	add	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	4413      	add	r3, r2
 800fcd2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	81fb      	strh	r3, [r7, #14]
 800fcd8:	2300      	movs	r3, #0
 800fcda:	613b      	str	r3, [r7, #16]
 800fcdc:	e028      	b.n	800fd30 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fcde:	4a21      	ldr	r2, [pc, #132]	@ (800fd64 <pick_lfn+0xc4>)
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	4413      	add	r3, r2
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	4413      	add	r3, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7fe ff41 	bl	800eb74 <ld_word>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fcf6:	89fb      	ldrh	r3, [r7, #14]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d00f      	beq.n	800fd1c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	2bfe      	cmp	r3, #254	@ 0xfe
 800fd00:	d901      	bls.n	800fd06 <pick_lfn+0x66>
 800fd02:	2300      	movs	r3, #0
 800fd04:	e029      	b.n	800fd5a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd06:	89bb      	ldrh	r3, [r7, #12]
 800fd08:	81fb      	strh	r3, [r7, #14]
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	1c5a      	adds	r2, r3, #1
 800fd0e:	617a      	str	r2, [r7, #20]
 800fd10:	005b      	lsls	r3, r3, #1
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	4413      	add	r3, r2
 800fd16:	89fa      	ldrh	r2, [r7, #14]
 800fd18:	801a      	strh	r2, [r3, #0]
 800fd1a:	e006      	b.n	800fd2a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fd1c:	89bb      	ldrh	r3, [r7, #12]
 800fd1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d001      	beq.n	800fd2a <pick_lfn+0x8a>
 800fd26:	2300      	movs	r3, #0
 800fd28:	e017      	b.n	800fd5a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	613b      	str	r3, [r7, #16]
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	2b0c      	cmp	r3, #12
 800fd34:	d9d3      	bls.n	800fcde <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00a      	beq.n	800fd58 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	2bfe      	cmp	r3, #254	@ 0xfe
 800fd46:	d901      	bls.n	800fd4c <pick_lfn+0xac>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	e006      	b.n	800fd5a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	005b      	lsls	r3, r3, #1
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	4413      	add	r3, r2
 800fd54:	2200      	movs	r2, #0
 800fd56:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800fd58:	2301      	movs	r3, #1
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3718      	adds	r7, #24
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	08018bf8 	.word	0x08018bf8

0800fd68 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b088      	sub	sp, #32
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	4611      	mov	r1, r2
 800fd74:	461a      	mov	r2, r3
 800fd76:	460b      	mov	r3, r1
 800fd78:	71fb      	strb	r3, [r7, #7]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	330d      	adds	r3, #13
 800fd82:	79ba      	ldrb	r2, [r7, #6]
 800fd84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	330b      	adds	r3, #11
 800fd8a:	220f      	movs	r2, #15
 800fd8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	330c      	adds	r3, #12
 800fd92:	2200      	movs	r2, #0
 800fd94:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	331a      	adds	r3, #26
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7fe ff24 	bl	800ebea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fda2:	79fb      	ldrb	r3, [r7, #7]
 800fda4:	1e5a      	subs	r2, r3, #1
 800fda6:	4613      	mov	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4413      	add	r3, r2
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	4413      	add	r3, r2
 800fdb0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	82fb      	strh	r3, [r7, #22]
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fdba:	8afb      	ldrh	r3, [r7, #22]
 800fdbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d007      	beq.n	800fdd4 <put_lfn+0x6c>
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	1c5a      	adds	r2, r3, #1
 800fdc8:	61fa      	str	r2, [r7, #28]
 800fdca:	005b      	lsls	r3, r3, #1
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	4413      	add	r3, r2
 800fdd0:	881b      	ldrh	r3, [r3, #0]
 800fdd2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fdd4:	4a17      	ldr	r2, [pc, #92]	@ (800fe34 <put_lfn+0xcc>)
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	4413      	add	r3, r2
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	461a      	mov	r2, r3
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	4413      	add	r3, r2
 800fde2:	8afa      	ldrh	r2, [r7, #22]
 800fde4:	4611      	mov	r1, r2
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fe feff 	bl	800ebea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800fdec:	8afb      	ldrh	r3, [r7, #22]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d102      	bne.n	800fdf8 <put_lfn+0x90>
 800fdf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fdf6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	61bb      	str	r3, [r7, #24]
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	2b0c      	cmp	r3, #12
 800fe02:	d9da      	bls.n	800fdba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fe04:	8afb      	ldrh	r3, [r7, #22]
 800fe06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d006      	beq.n	800fe1c <put_lfn+0xb4>
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	005b      	lsls	r3, r3, #1
 800fe12:	68fa      	ldr	r2, [r7, #12]
 800fe14:	4413      	add	r3, r2
 800fe16:	881b      	ldrh	r3, [r3, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d103      	bne.n	800fe24 <put_lfn+0xbc>
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe22:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	79fa      	ldrb	r2, [r7, #7]
 800fe28:	701a      	strb	r2, [r3, #0]
}
 800fe2a:	bf00      	nop
 800fe2c:	3720      	adds	r7, #32
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	08018bf8 	.word	0x08018bf8

0800fe38 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08c      	sub	sp, #48	@ 0x30
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
 800fe44:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fe46:	220b      	movs	r2, #11
 800fe48:	68b9      	ldr	r1, [r7, #8]
 800fe4a:	68f8      	ldr	r0, [r7, #12]
 800fe4c:	f7fe ff14 	bl	800ec78 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	2b05      	cmp	r3, #5
 800fe54:	d929      	bls.n	800feaa <gen_numname+0x72>
		sr = seq;
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fe5a:	e020      	b.n	800fe9e <gen_numname+0x66>
			wc = *lfn++;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	1c9a      	adds	r2, r3, #2
 800fe60:	607a      	str	r2, [r7, #4]
 800fe62:	881b      	ldrh	r3, [r3, #0]
 800fe64:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800fe66:	2300      	movs	r3, #0
 800fe68:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe6a:	e015      	b.n	800fe98 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	005a      	lsls	r2, r3, #1
 800fe70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe72:	f003 0301 	and.w	r3, r3, #1
 800fe76:	4413      	add	r3, r2
 800fe78:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fe7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe7c:	085b      	lsrs	r3, r3, #1
 800fe7e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d003      	beq.n	800fe92 <gen_numname+0x5a>
 800fe8a:	69fa      	ldr	r2, [r7, #28]
 800fe8c:	4b30      	ldr	r3, [pc, #192]	@ (800ff50 <gen_numname+0x118>)
 800fe8e:	4053      	eors	r3, r2
 800fe90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fe92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe94:	3301      	adds	r3, #1
 800fe96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe9a:	2b0f      	cmp	r3, #15
 800fe9c:	d9e6      	bls.n	800fe6c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	881b      	ldrh	r3, [r3, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d1da      	bne.n	800fe5c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800feaa:	2307      	movs	r3, #7
 800feac:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	f003 030f 	and.w	r3, r3, #15
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	3330      	adds	r3, #48	@ 0x30
 800feba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800febe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fec2:	2b39      	cmp	r3, #57	@ 0x39
 800fec4:	d904      	bls.n	800fed0 <gen_numname+0x98>
 800fec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800feca:	3307      	adds	r3, #7
 800fecc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800fed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed2:	1e5a      	subs	r2, r3, #1
 800fed4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fed6:	3330      	adds	r3, #48	@ 0x30
 800fed8:	443b      	add	r3, r7
 800feda:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fede:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	091b      	lsrs	r3, r3, #4
 800fee6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d1df      	bne.n	800feae <gen_numname+0x76>
	ns[i] = '~';
 800feee:	f107 0214 	add.w	r2, r7, #20
 800fef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef4:	4413      	add	r3, r2
 800fef6:	227e      	movs	r2, #126	@ 0x7e
 800fef8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800fefa:	2300      	movs	r3, #0
 800fefc:	627b      	str	r3, [r7, #36]	@ 0x24
 800fefe:	e002      	b.n	800ff06 <gen_numname+0xce>
 800ff00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff02:	3301      	adds	r3, #1
 800ff04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d205      	bcs.n	800ff1a <gen_numname+0xe2>
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff12:	4413      	add	r3, r2
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	2b20      	cmp	r3, #32
 800ff18:	d1f2      	bne.n	800ff00 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ff1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1c:	2b07      	cmp	r3, #7
 800ff1e:	d807      	bhi.n	800ff30 <gen_numname+0xf8>
 800ff20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ff26:	3330      	adds	r3, #48	@ 0x30
 800ff28:	443b      	add	r3, r7
 800ff2a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ff2e:	e000      	b.n	800ff32 <gen_numname+0xfa>
 800ff30:	2120      	movs	r1, #32
 800ff32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff34:	1c5a      	adds	r2, r3, #1
 800ff36:	627a      	str	r2, [r7, #36]	@ 0x24
 800ff38:	68fa      	ldr	r2, [r7, #12]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	460a      	mov	r2, r1
 800ff3e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ff40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff42:	2b07      	cmp	r3, #7
 800ff44:	d9e9      	bls.n	800ff1a <gen_numname+0xe2>
}
 800ff46:	bf00      	nop
 800ff48:	bf00      	nop
 800ff4a:	3730      	adds	r7, #48	@ 0x30
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	00011021 	.word	0x00011021

0800ff54 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b085      	sub	sp, #20
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ff60:	230b      	movs	r3, #11
 800ff62:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ff64:	7bfb      	ldrb	r3, [r7, #15]
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	0852      	lsrs	r2, r2, #1
 800ff6a:	01db      	lsls	r3, r3, #7
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	1c59      	adds	r1, r3, #1
 800ff74:	6079      	str	r1, [r7, #4]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	4413      	add	r3, r2
 800ff7a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	60bb      	str	r3, [r7, #8]
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d1ed      	bne.n	800ff64 <sum_sfn+0x10>
	return sum;
 800ff88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3714      	adds	r7, #20
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b086      	sub	sp, #24
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
 800ff9e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ffa0:	2304      	movs	r3, #4
 800ffa2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ffaa:	23ff      	movs	r3, #255	@ 0xff
 800ffac:	757b      	strb	r3, [r7, #21]
 800ffae:	23ff      	movs	r3, #255	@ 0xff
 800ffb0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ffb2:	e081      	b.n	80100b8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	69db      	ldr	r3, [r3, #28]
 800ffb8:	4619      	mov	r1, r3
 800ffba:	6938      	ldr	r0, [r7, #16]
 800ffbc:	f7ff f8bc 	bl	800f138 <move_window>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ffc4:	7dfb      	ldrb	r3, [r7, #23]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d17c      	bne.n	80100c4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6a1b      	ldr	r3, [r3, #32]
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ffd2:	7dbb      	ldrb	r3, [r7, #22]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d102      	bne.n	800ffde <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ffd8:	2304      	movs	r3, #4
 800ffda:	75fb      	strb	r3, [r7, #23]
 800ffdc:	e077      	b.n	80100ce <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a1b      	ldr	r3, [r3, #32]
 800ffe2:	330b      	adds	r3, #11
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffea:	73fb      	strb	r3, [r7, #15]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	7bfa      	ldrb	r2, [r7, #15]
 800fff0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800fff2:	7dbb      	ldrb	r3, [r7, #22]
 800fff4:	2be5      	cmp	r3, #229	@ 0xe5
 800fff6:	d00e      	beq.n	8010016 <dir_read+0x80>
 800fff8:	7dbb      	ldrb	r3, [r7, #22]
 800fffa:	2b2e      	cmp	r3, #46	@ 0x2e
 800fffc:	d00b      	beq.n	8010016 <dir_read+0x80>
 800fffe:	7bfb      	ldrb	r3, [r7, #15]
 8010000:	f023 0320 	bic.w	r3, r3, #32
 8010004:	2b08      	cmp	r3, #8
 8010006:	bf0c      	ite	eq
 8010008:	2301      	moveq	r3, #1
 801000a:	2300      	movne	r3, #0
 801000c:	b2db      	uxtb	r3, r3
 801000e:	461a      	mov	r2, r3
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	4293      	cmp	r3, r2
 8010014:	d002      	beq.n	801001c <dir_read+0x86>
				ord = 0xFF;
 8010016:	23ff      	movs	r3, #255	@ 0xff
 8010018:	757b      	strb	r3, [r7, #21]
 801001a:	e044      	b.n	80100a6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801001c:	7bfb      	ldrb	r3, [r7, #15]
 801001e:	2b0f      	cmp	r3, #15
 8010020:	d12f      	bne.n	8010082 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8010022:	7dbb      	ldrb	r3, [r7, #22]
 8010024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00d      	beq.n	8010048 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6a1b      	ldr	r3, [r3, #32]
 8010030:	7b5b      	ldrb	r3, [r3, #13]
 8010032:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8010034:	7dbb      	ldrb	r3, [r7, #22]
 8010036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801003a:	75bb      	strb	r3, [r7, #22]
 801003c:	7dbb      	ldrb	r3, [r7, #22]
 801003e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	695a      	ldr	r2, [r3, #20]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010048:	7dba      	ldrb	r2, [r7, #22]
 801004a:	7d7b      	ldrb	r3, [r7, #21]
 801004c:	429a      	cmp	r2, r3
 801004e:	d115      	bne.n	801007c <dir_read+0xe6>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6a1b      	ldr	r3, [r3, #32]
 8010054:	330d      	adds	r3, #13
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	7d3a      	ldrb	r2, [r7, #20]
 801005a:	429a      	cmp	r2, r3
 801005c:	d10e      	bne.n	801007c <dir_read+0xe6>
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	68da      	ldr	r2, [r3, #12]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6a1b      	ldr	r3, [r3, #32]
 8010066:	4619      	mov	r1, r3
 8010068:	4610      	mov	r0, r2
 801006a:	f7ff fe19 	bl	800fca0 <pick_lfn>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d003      	beq.n	801007c <dir_read+0xe6>
 8010074:	7d7b      	ldrb	r3, [r7, #21]
 8010076:	3b01      	subs	r3, #1
 8010078:	b2db      	uxtb	r3, r3
 801007a:	e000      	b.n	801007e <dir_read+0xe8>
 801007c:	23ff      	movs	r3, #255	@ 0xff
 801007e:	757b      	strb	r3, [r7, #21]
 8010080:	e011      	b.n	80100a6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8010082:	7d7b      	ldrb	r3, [r7, #21]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d109      	bne.n	801009c <dir_read+0x106>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6a1b      	ldr	r3, [r3, #32]
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff ff61 	bl	800ff54 <sum_sfn>
 8010092:	4603      	mov	r3, r0
 8010094:	461a      	mov	r2, r3
 8010096:	7d3b      	ldrb	r3, [r7, #20]
 8010098:	4293      	cmp	r3, r2
 801009a:	d015      	beq.n	80100c8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f04f 32ff 	mov.w	r2, #4294967295
 80100a2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80100a4:	e010      	b.n	80100c8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80100a6:	2100      	movs	r1, #0
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7ff fc3d 	bl	800f928 <dir_next>
 80100ae:	4603      	mov	r3, r0
 80100b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80100b2:	7dfb      	ldrb	r3, [r7, #23]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d109      	bne.n	80100cc <dir_read+0x136>
	while (dp->sect) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	69db      	ldr	r3, [r3, #28]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f47f af79 	bne.w	800ffb4 <dir_read+0x1e>
 80100c2:	e004      	b.n	80100ce <dir_read+0x138>
		if (res != FR_OK) break;
 80100c4:	bf00      	nop
 80100c6:	e002      	b.n	80100ce <dir_read+0x138>
					break;
 80100c8:	bf00      	nop
 80100ca:	e000      	b.n	80100ce <dir_read+0x138>
		if (res != FR_OK) break;
 80100cc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80100ce:	7dfb      	ldrb	r3, [r7, #23]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <dir_read+0x144>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	61da      	str	r2, [r3, #28]
	return res;
 80100da:	7dfb      	ldrb	r3, [r7, #23]
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3718      	adds	r7, #24
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b086      	sub	sp, #24
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80100f2:	2100      	movs	r1, #0
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7ff fb9c 	bl	800f832 <dir_sdi>
 80100fa:	4603      	mov	r3, r0
 80100fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80100fe:	7dfb      	ldrb	r3, [r7, #23]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d001      	beq.n	8010108 <dir_find+0x24>
 8010104:	7dfb      	ldrb	r3, [r7, #23]
 8010106:	e0a9      	b.n	801025c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010108:	23ff      	movs	r3, #255	@ 0xff
 801010a:	753b      	strb	r3, [r7, #20]
 801010c:	7d3b      	ldrb	r3, [r7, #20]
 801010e:	757b      	strb	r3, [r7, #21]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f04f 32ff 	mov.w	r2, #4294967295
 8010116:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	69db      	ldr	r3, [r3, #28]
 801011c:	4619      	mov	r1, r3
 801011e:	6938      	ldr	r0, [r7, #16]
 8010120:	f7ff f80a 	bl	800f138 <move_window>
 8010124:	4603      	mov	r3, r0
 8010126:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010128:	7dfb      	ldrb	r3, [r7, #23]
 801012a:	2b00      	cmp	r3, #0
 801012c:	f040 8090 	bne.w	8010250 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6a1b      	ldr	r3, [r3, #32]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010138:	7dbb      	ldrb	r3, [r7, #22]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d102      	bne.n	8010144 <dir_find+0x60>
 801013e:	2304      	movs	r3, #4
 8010140:	75fb      	strb	r3, [r7, #23]
 8010142:	e08a      	b.n	801025a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6a1b      	ldr	r3, [r3, #32]
 8010148:	330b      	adds	r3, #11
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010150:	73fb      	strb	r3, [r7, #15]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	7bfa      	ldrb	r2, [r7, #15]
 8010156:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010158:	7dbb      	ldrb	r3, [r7, #22]
 801015a:	2be5      	cmp	r3, #229	@ 0xe5
 801015c:	d007      	beq.n	801016e <dir_find+0x8a>
 801015e:	7bfb      	ldrb	r3, [r7, #15]
 8010160:	f003 0308 	and.w	r3, r3, #8
 8010164:	2b00      	cmp	r3, #0
 8010166:	d009      	beq.n	801017c <dir_find+0x98>
 8010168:	7bfb      	ldrb	r3, [r7, #15]
 801016a:	2b0f      	cmp	r3, #15
 801016c:	d006      	beq.n	801017c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801016e:	23ff      	movs	r3, #255	@ 0xff
 8010170:	757b      	strb	r3, [r7, #21]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f04f 32ff 	mov.w	r2, #4294967295
 8010178:	631a      	str	r2, [r3, #48]	@ 0x30
 801017a:	e05e      	b.n	801023a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801017c:	7bfb      	ldrb	r3, [r7, #15]
 801017e:	2b0f      	cmp	r3, #15
 8010180:	d136      	bne.n	80101f0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801018c:	2b00      	cmp	r3, #0
 801018e:	d154      	bne.n	801023a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010190:	7dbb      	ldrb	r3, [r7, #22]
 8010192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00d      	beq.n	80101b6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6a1b      	ldr	r3, [r3, #32]
 801019e:	7b5b      	ldrb	r3, [r3, #13]
 80101a0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80101a2:	7dbb      	ldrb	r3, [r7, #22]
 80101a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80101a8:	75bb      	strb	r3, [r7, #22]
 80101aa:	7dbb      	ldrb	r3, [r7, #22]
 80101ac:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	695a      	ldr	r2, [r3, #20]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80101b6:	7dba      	ldrb	r2, [r7, #22]
 80101b8:	7d7b      	ldrb	r3, [r7, #21]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d115      	bne.n	80101ea <dir_find+0x106>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6a1b      	ldr	r3, [r3, #32]
 80101c2:	330d      	adds	r3, #13
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	7d3a      	ldrb	r2, [r7, #20]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d10e      	bne.n	80101ea <dir_find+0x106>
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	68da      	ldr	r2, [r3, #12]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a1b      	ldr	r3, [r3, #32]
 80101d4:	4619      	mov	r1, r3
 80101d6:	4610      	mov	r0, r2
 80101d8:	f7ff fcf2 	bl	800fbc0 <cmp_lfn>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d003      	beq.n	80101ea <dir_find+0x106>
 80101e2:	7d7b      	ldrb	r3, [r7, #21]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	e000      	b.n	80101ec <dir_find+0x108>
 80101ea:	23ff      	movs	r3, #255	@ 0xff
 80101ec:	757b      	strb	r3, [r7, #21]
 80101ee:	e024      	b.n	801023a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80101f0:	7d7b      	ldrb	r3, [r7, #21]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d109      	bne.n	801020a <dir_find+0x126>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a1b      	ldr	r3, [r3, #32]
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7ff feaa 	bl	800ff54 <sum_sfn>
 8010200:	4603      	mov	r3, r0
 8010202:	461a      	mov	r2, r3
 8010204:	7d3b      	ldrb	r3, [r7, #20]
 8010206:	4293      	cmp	r3, r2
 8010208:	d024      	beq.n	8010254 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010210:	f003 0301 	and.w	r3, r3, #1
 8010214:	2b00      	cmp	r3, #0
 8010216:	d10a      	bne.n	801022e <dir_find+0x14a>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6a18      	ldr	r0, [r3, #32]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	3324      	adds	r3, #36	@ 0x24
 8010220:	220b      	movs	r2, #11
 8010222:	4619      	mov	r1, r3
 8010224:	f7fe fd64 	bl	800ecf0 <mem_cmp>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d014      	beq.n	8010258 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801022e:	23ff      	movs	r3, #255	@ 0xff
 8010230:	757b      	strb	r3, [r7, #21]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f04f 32ff 	mov.w	r2, #4294967295
 8010238:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801023a:	2100      	movs	r1, #0
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7ff fb73 	bl	800f928 <dir_next>
 8010242:	4603      	mov	r3, r0
 8010244:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010246:	7dfb      	ldrb	r3, [r7, #23]
 8010248:	2b00      	cmp	r3, #0
 801024a:	f43f af65 	beq.w	8010118 <dir_find+0x34>
 801024e:	e004      	b.n	801025a <dir_find+0x176>
		if (res != FR_OK) break;
 8010250:	bf00      	nop
 8010252:	e002      	b.n	801025a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010254:	bf00      	nop
 8010256:	e000      	b.n	801025a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010258:	bf00      	nop

	return res;
 801025a:	7dfb      	ldrb	r3, [r7, #23]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3718      	adds	r7, #24
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b08c      	sub	sp, #48	@ 0x30
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010278:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801027c:	2b00      	cmp	r3, #0
 801027e:	d001      	beq.n	8010284 <dir_register+0x20>
 8010280:	2306      	movs	r3, #6
 8010282:	e0e0      	b.n	8010446 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010284:	2300      	movs	r3, #0
 8010286:	627b      	str	r3, [r7, #36]	@ 0x24
 8010288:	e002      	b.n	8010290 <dir_register+0x2c>
 801028a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028c:	3301      	adds	r3, #1
 801028e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	68da      	ldr	r2, [r3, #12]
 8010294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010296:	005b      	lsls	r3, r3, #1
 8010298:	4413      	add	r3, r2
 801029a:	881b      	ldrh	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1f4      	bne.n	801028a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80102a6:	f107 030c 	add.w	r3, r7, #12
 80102aa:	220c      	movs	r2, #12
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fe fce3 	bl	800ec78 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80102b2:	7dfb      	ldrb	r3, [r7, #23]
 80102b4:	f003 0301 	and.w	r3, r3, #1
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d032      	beq.n	8010322 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2240      	movs	r2, #64	@ 0x40
 80102c0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80102c4:	2301      	movs	r3, #1
 80102c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80102c8:	e016      	b.n	80102f8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	68da      	ldr	r2, [r3, #12]
 80102d4:	f107 010c 	add.w	r1, r7, #12
 80102d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102da:	f7ff fdad 	bl	800fe38 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7ff ff00 	bl	80100e4 <dir_find>
 80102e4:	4603      	mov	r3, r0
 80102e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80102ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d106      	bne.n	8010300 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80102f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f4:	3301      	adds	r3, #1
 80102f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80102f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102fa:	2b63      	cmp	r3, #99	@ 0x63
 80102fc:	d9e5      	bls.n	80102ca <dir_register+0x66>
 80102fe:	e000      	b.n	8010302 <dir_register+0x9e>
			if (res != FR_OK) break;
 8010300:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010304:	2b64      	cmp	r3, #100	@ 0x64
 8010306:	d101      	bne.n	801030c <dir_register+0xa8>
 8010308:	2307      	movs	r3, #7
 801030a:	e09c      	b.n	8010446 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801030c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010310:	2b04      	cmp	r3, #4
 8010312:	d002      	beq.n	801031a <dir_register+0xb6>
 8010314:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010318:	e095      	b.n	8010446 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801031a:	7dfa      	ldrb	r2, [r7, #23]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010322:	7dfb      	ldrb	r3, [r7, #23]
 8010324:	f003 0302 	and.w	r3, r3, #2
 8010328:	2b00      	cmp	r3, #0
 801032a:	d007      	beq.n	801033c <dir_register+0xd8>
 801032c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032e:	330c      	adds	r3, #12
 8010330:	4a47      	ldr	r2, [pc, #284]	@ (8010450 <dir_register+0x1ec>)
 8010332:	fba2 2303 	umull	r2, r3, r2, r3
 8010336:	089b      	lsrs	r3, r3, #2
 8010338:	3301      	adds	r3, #1
 801033a:	e000      	b.n	801033e <dir_register+0xda>
 801033c:	2301      	movs	r3, #1
 801033e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010340:	6a39      	ldr	r1, [r7, #32]
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7ff fbb5 	bl	800fab2 <dir_alloc>
 8010348:	4603      	mov	r3, r0
 801034a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801034e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010352:	2b00      	cmp	r3, #0
 8010354:	d148      	bne.n	80103e8 <dir_register+0x184>
 8010356:	6a3b      	ldr	r3, [r7, #32]
 8010358:	3b01      	subs	r3, #1
 801035a:	623b      	str	r3, [r7, #32]
 801035c:	6a3b      	ldr	r3, [r7, #32]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d042      	beq.n	80103e8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	695a      	ldr	r2, [r3, #20]
 8010366:	6a3b      	ldr	r3, [r7, #32]
 8010368:	015b      	lsls	r3, r3, #5
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	4619      	mov	r1, r3
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff fa5f 	bl	800f832 <dir_sdi>
 8010374:	4603      	mov	r3, r0
 8010376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801037a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801037e:	2b00      	cmp	r3, #0
 8010380:	d132      	bne.n	80103e8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	3324      	adds	r3, #36	@ 0x24
 8010386:	4618      	mov	r0, r3
 8010388:	f7ff fde4 	bl	800ff54 <sum_sfn>
 801038c:	4603      	mov	r3, r0
 801038e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	69db      	ldr	r3, [r3, #28]
 8010394:	4619      	mov	r1, r3
 8010396:	69f8      	ldr	r0, [r7, #28]
 8010398:	f7fe fece 	bl	800f138 <move_window>
 801039c:	4603      	mov	r3, r0
 801039e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80103a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d11d      	bne.n	80103e6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	68d8      	ldr	r0, [r3, #12]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6a19      	ldr	r1, [r3, #32]
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	b2da      	uxtb	r2, r3
 80103b6:	7efb      	ldrb	r3, [r7, #27]
 80103b8:	f7ff fcd6 	bl	800fd68 <put_lfn>
				fs->wflag = 1;
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	2201      	movs	r2, #1
 80103c0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80103c2:	2100      	movs	r1, #0
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7ff faaf 	bl	800f928 <dir_next>
 80103ca:	4603      	mov	r3, r0
 80103cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80103d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d107      	bne.n	80103e8 <dir_register+0x184>
 80103d8:	6a3b      	ldr	r3, [r7, #32]
 80103da:	3b01      	subs	r3, #1
 80103dc:	623b      	str	r3, [r7, #32]
 80103de:	6a3b      	ldr	r3, [r7, #32]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1d5      	bne.n	8010390 <dir_register+0x12c>
 80103e4:	e000      	b.n	80103e8 <dir_register+0x184>
				if (res != FR_OK) break;
 80103e6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80103e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d128      	bne.n	8010442 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	69db      	ldr	r3, [r3, #28]
 80103f4:	4619      	mov	r1, r3
 80103f6:	69f8      	ldr	r0, [r7, #28]
 80103f8:	f7fe fe9e 	bl	800f138 <move_window>
 80103fc:	4603      	mov	r3, r0
 80103fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010402:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010406:	2b00      	cmp	r3, #0
 8010408:	d11b      	bne.n	8010442 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a1b      	ldr	r3, [r3, #32]
 801040e:	2220      	movs	r2, #32
 8010410:	2100      	movs	r1, #0
 8010412:	4618      	mov	r0, r3
 8010414:	f7fe fc51 	bl	800ecba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6a18      	ldr	r0, [r3, #32]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	3324      	adds	r3, #36	@ 0x24
 8010420:	220b      	movs	r2, #11
 8010422:	4619      	mov	r1, r3
 8010424:	f7fe fc28 	bl	800ec78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6a1b      	ldr	r3, [r3, #32]
 8010432:	330c      	adds	r3, #12
 8010434:	f002 0218 	and.w	r2, r2, #24
 8010438:	b2d2      	uxtb	r2, r2
 801043a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	2201      	movs	r2, #1
 8010440:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010446:	4618      	mov	r0, r3
 8010448:	3730      	adds	r7, #48	@ 0x30
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	4ec4ec4f 	.word	0x4ec4ec4f

08010454 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b088      	sub	sp, #32
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	2200      	movs	r2, #0
 8010468:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	69db      	ldr	r3, [r3, #28]
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 80ca 	beq.w	8010608 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010478:	f1b3 3fff 	cmp.w	r3, #4294967295
 801047c:	d032      	beq.n	80104e4 <get_fileinfo+0x90>
			i = j = 0;
 801047e:	2300      	movs	r3, #0
 8010480:	61bb      	str	r3, [r7, #24]
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010486:	e01b      	b.n	80104c0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010488:	89fb      	ldrh	r3, [r7, #14]
 801048a:	2100      	movs	r1, #0
 801048c:	4618      	mov	r0, r3
 801048e:	f001 ff0d 	bl	80122ac <ff_convert>
 8010492:	4603      	mov	r3, r0
 8010494:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8010496:	89fb      	ldrh	r3, [r7, #14]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d102      	bne.n	80104a2 <get_fileinfo+0x4e>
 801049c:	2300      	movs	r3, #0
 801049e:	61fb      	str	r3, [r7, #28]
 80104a0:	e01a      	b.n	80104d8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80104a6:	d902      	bls.n	80104ae <get_fileinfo+0x5a>
 80104a8:	2300      	movs	r3, #0
 80104aa:	61fb      	str	r3, [r7, #28]
 80104ac:	e014      	b.n	80104d8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	1c5a      	adds	r2, r3, #1
 80104b2:	61fa      	str	r2, [r7, #28]
 80104b4:	89fa      	ldrh	r2, [r7, #14]
 80104b6:	b2d1      	uxtb	r1, r2
 80104b8:	683a      	ldr	r2, [r7, #0]
 80104ba:	4413      	add	r3, r2
 80104bc:	460a      	mov	r2, r1
 80104be:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	68da      	ldr	r2, [r3, #12]
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	1c59      	adds	r1, r3, #1
 80104c8:	61b9      	str	r1, [r7, #24]
 80104ca:	005b      	lsls	r3, r3, #1
 80104cc:	4413      	add	r3, r2
 80104ce:	881b      	ldrh	r3, [r3, #0]
 80104d0:	81fb      	strh	r3, [r7, #14]
 80104d2:	89fb      	ldrh	r3, [r7, #14]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1d7      	bne.n	8010488 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80104d8:	683a      	ldr	r2, [r7, #0]
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	4413      	add	r3, r2
 80104de:	3316      	adds	r3, #22
 80104e0:	2200      	movs	r2, #0
 80104e2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80104e4:	2300      	movs	r3, #0
 80104e6:	61bb      	str	r3, [r7, #24]
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80104ec:	683a      	ldr	r2, [r7, #0]
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	4413      	add	r3, r2
 80104f2:	3316      	adds	r3, #22
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80104f8:	e04d      	b.n	8010596 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6a1a      	ldr	r2, [r3, #32]
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	1c59      	adds	r1, r3, #1
 8010502:	61f9      	str	r1, [r7, #28]
 8010504:	4413      	add	r3, r2
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801050a:	7dfb      	ldrb	r3, [r7, #23]
 801050c:	2b20      	cmp	r3, #32
 801050e:	d041      	beq.n	8010594 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010510:	7dfb      	ldrb	r3, [r7, #23]
 8010512:	2b05      	cmp	r3, #5
 8010514:	d101      	bne.n	801051a <get_fileinfo+0xc6>
 8010516:	23e5      	movs	r3, #229	@ 0xe5
 8010518:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	2b09      	cmp	r3, #9
 801051e:	d10f      	bne.n	8010540 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8010520:	89bb      	ldrh	r3, [r7, #12]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d105      	bne.n	8010532 <get_fileinfo+0xde>
 8010526:	683a      	ldr	r2, [r7, #0]
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	4413      	add	r3, r2
 801052c:	3316      	adds	r3, #22
 801052e:	222e      	movs	r2, #46	@ 0x2e
 8010530:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8010532:	69bb      	ldr	r3, [r7, #24]
 8010534:	1c5a      	adds	r2, r3, #1
 8010536:	61ba      	str	r2, [r7, #24]
 8010538:	683a      	ldr	r2, [r7, #0]
 801053a:	4413      	add	r3, r2
 801053c:	222e      	movs	r2, #46	@ 0x2e
 801053e:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8010540:	683a      	ldr	r2, [r7, #0]
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	4413      	add	r3, r2
 8010546:	3309      	adds	r3, #9
 8010548:	7dfa      	ldrb	r2, [r7, #23]
 801054a:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801054c:	89bb      	ldrh	r3, [r7, #12]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d11c      	bne.n	801058c <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8010552:	7dfb      	ldrb	r3, [r7, #23]
 8010554:	2b40      	cmp	r3, #64	@ 0x40
 8010556:	d913      	bls.n	8010580 <get_fileinfo+0x12c>
 8010558:	7dfb      	ldrb	r3, [r7, #23]
 801055a:	2b5a      	cmp	r3, #90	@ 0x5a
 801055c:	d810      	bhi.n	8010580 <get_fileinfo+0x12c>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6a1b      	ldr	r3, [r3, #32]
 8010562:	330c      	adds	r3, #12
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	461a      	mov	r2, r3
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	2b08      	cmp	r3, #8
 801056c:	d901      	bls.n	8010572 <get_fileinfo+0x11e>
 801056e:	2310      	movs	r3, #16
 8010570:	e000      	b.n	8010574 <get_fileinfo+0x120>
 8010572:	2308      	movs	r3, #8
 8010574:	4013      	ands	r3, r2
 8010576:	2b00      	cmp	r3, #0
 8010578:	d002      	beq.n	8010580 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 801057a:	7dfb      	ldrb	r3, [r7, #23]
 801057c:	3320      	adds	r3, #32
 801057e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8010580:	683a      	ldr	r2, [r7, #0]
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	4413      	add	r3, r2
 8010586:	3316      	adds	r3, #22
 8010588:	7dfa      	ldrb	r2, [r7, #23]
 801058a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	3301      	adds	r3, #1
 8010590:	61bb      	str	r3, [r7, #24]
 8010592:	e000      	b.n	8010596 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8010594:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	2b0a      	cmp	r3, #10
 801059a:	d9ae      	bls.n	80104fa <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801059c:	89bb      	ldrh	r3, [r7, #12]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d10d      	bne.n	80105be <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	4413      	add	r3, r2
 80105a8:	3316      	adds	r3, #22
 80105aa:	2200      	movs	r2, #0
 80105ac:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6a1b      	ldr	r3, [r3, #32]
 80105b2:	330c      	adds	r3, #12
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d101      	bne.n	80105be <get_fileinfo+0x16a>
 80105ba:	2300      	movs	r3, #0
 80105bc:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80105be:	683a      	ldr	r2, [r7, #0]
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	4413      	add	r3, r2
 80105c4:	3309      	adds	r3, #9
 80105c6:	2200      	movs	r2, #0
 80105c8:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6a1b      	ldr	r3, [r3, #32]
 80105ce:	7ada      	ldrb	r2, [r3, #11]
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6a1b      	ldr	r3, [r3, #32]
 80105d8:	331c      	adds	r3, #28
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fe fae2 	bl	800eba4 <ld_dword>
 80105e0:	4602      	mov	r2, r0
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6a1b      	ldr	r3, [r3, #32]
 80105ea:	3316      	adds	r3, #22
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fe fad9 	bl	800eba4 <ld_dword>
 80105f2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	80da      	strh	r2, [r3, #6]
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	0c1b      	lsrs	r3, r3, #16
 8010600:	b29a      	uxth	r2, r3
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	809a      	strh	r2, [r3, #4]
 8010606:	e000      	b.n	801060a <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010608:	bf00      	nop
}
 801060a:	3720      	adds	r7, #32
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b08a      	sub	sp, #40	@ 0x28
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	613b      	str	r3, [r7, #16]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	60fb      	str	r3, [r7, #12]
 8010628:	2300      	movs	r3, #0
 801062a:	617b      	str	r3, [r7, #20]
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010630:	69bb      	ldr	r3, [r7, #24]
 8010632:	1c5a      	adds	r2, r3, #1
 8010634:	61ba      	str	r2, [r7, #24]
 8010636:	693a      	ldr	r2, [r7, #16]
 8010638:	4413      	add	r3, r2
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801063e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010640:	2b1f      	cmp	r3, #31
 8010642:	d940      	bls.n	80106c6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010644:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010646:	2b2f      	cmp	r3, #47	@ 0x2f
 8010648:	d006      	beq.n	8010658 <create_name+0x48>
 801064a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801064c:	2b5c      	cmp	r3, #92	@ 0x5c
 801064e:	d110      	bne.n	8010672 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010650:	e002      	b.n	8010658 <create_name+0x48>
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	3301      	adds	r3, #1
 8010656:	61bb      	str	r3, [r7, #24]
 8010658:	693a      	ldr	r2, [r7, #16]
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	4413      	add	r3, r2
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	2b2f      	cmp	r3, #47	@ 0x2f
 8010662:	d0f6      	beq.n	8010652 <create_name+0x42>
 8010664:	693a      	ldr	r2, [r7, #16]
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	4413      	add	r3, r2
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	2b5c      	cmp	r3, #92	@ 0x5c
 801066e:	d0f0      	beq.n	8010652 <create_name+0x42>
			break;
 8010670:	e02a      	b.n	80106c8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	2bfe      	cmp	r3, #254	@ 0xfe
 8010676:	d901      	bls.n	801067c <create_name+0x6c>
 8010678:	2306      	movs	r3, #6
 801067a:	e17d      	b.n	8010978 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801067c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801067e:	b2db      	uxtb	r3, r3
 8010680:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010684:	2101      	movs	r1, #1
 8010686:	4618      	mov	r0, r3
 8010688:	f001 fe10 	bl	80122ac <ff_convert>
 801068c:	4603      	mov	r3, r0
 801068e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <create_name+0x8a>
 8010696:	2306      	movs	r3, #6
 8010698:	e16e      	b.n	8010978 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801069a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801069c:	2b7f      	cmp	r3, #127	@ 0x7f
 801069e:	d809      	bhi.n	80106b4 <create_name+0xa4>
 80106a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106a2:	4619      	mov	r1, r3
 80106a4:	488d      	ldr	r0, [pc, #564]	@ (80108dc <create_name+0x2cc>)
 80106a6:	f7fe fb4a 	bl	800ed3e <chk_chr>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d001      	beq.n	80106b4 <create_name+0xa4>
 80106b0:	2306      	movs	r3, #6
 80106b2:	e161      	b.n	8010978 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	1c5a      	adds	r2, r3, #1
 80106b8:	617a      	str	r2, [r7, #20]
 80106ba:	005b      	lsls	r3, r3, #1
 80106bc:	68fa      	ldr	r2, [r7, #12]
 80106be:	4413      	add	r3, r2
 80106c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106c2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80106c4:	e7b4      	b.n	8010630 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80106c6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80106c8:	693a      	ldr	r2, [r7, #16]
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	441a      	add	r2, r3
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80106d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106d4:	2b1f      	cmp	r3, #31
 80106d6:	d801      	bhi.n	80106dc <create_name+0xcc>
 80106d8:	2304      	movs	r3, #4
 80106da:	e000      	b.n	80106de <create_name+0xce>
 80106dc:	2300      	movs	r3, #0
 80106de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80106e2:	e011      	b.n	8010708 <create_name+0xf8>
		w = lfn[di - 1];
 80106e4:	697a      	ldr	r2, [r7, #20]
 80106e6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80106ea:	4413      	add	r3, r2
 80106ec:	005b      	lsls	r3, r3, #1
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	4413      	add	r3, r2
 80106f2:	881b      	ldrh	r3, [r3, #0]
 80106f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80106f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106f8:	2b20      	cmp	r3, #32
 80106fa:	d002      	beq.n	8010702 <create_name+0xf2>
 80106fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8010700:	d106      	bne.n	8010710 <create_name+0x100>
		di--;
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	3b01      	subs	r3, #1
 8010706:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d1ea      	bne.n	80106e4 <create_name+0xd4>
 801070e:	e000      	b.n	8010712 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8010710:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	005b      	lsls	r3, r3, #1
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	4413      	add	r3, r2
 801071a:	2200      	movs	r2, #0
 801071c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d101      	bne.n	8010728 <create_name+0x118>
 8010724:	2306      	movs	r3, #6
 8010726:	e127      	b.n	8010978 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3324      	adds	r3, #36	@ 0x24
 801072c:	220b      	movs	r2, #11
 801072e:	2120      	movs	r1, #32
 8010730:	4618      	mov	r0, r3
 8010732:	f7fe fac2 	bl	800ecba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010736:	2300      	movs	r3, #0
 8010738:	61bb      	str	r3, [r7, #24]
 801073a:	e002      	b.n	8010742 <create_name+0x132>
 801073c:	69bb      	ldr	r3, [r7, #24]
 801073e:	3301      	adds	r3, #1
 8010740:	61bb      	str	r3, [r7, #24]
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	4413      	add	r3, r2
 801074a:	881b      	ldrh	r3, [r3, #0]
 801074c:	2b20      	cmp	r3, #32
 801074e:	d0f5      	beq.n	801073c <create_name+0x12c>
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	005b      	lsls	r3, r3, #1
 8010754:	68fa      	ldr	r2, [r7, #12]
 8010756:	4413      	add	r3, r2
 8010758:	881b      	ldrh	r3, [r3, #0]
 801075a:	2b2e      	cmp	r3, #46	@ 0x2e
 801075c:	d0ee      	beq.n	801073c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d009      	beq.n	8010778 <create_name+0x168>
 8010764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010768:	f043 0303 	orr.w	r3, r3, #3
 801076c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010770:	e002      	b.n	8010778 <create_name+0x168>
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	3b01      	subs	r3, #1
 8010776:	617b      	str	r3, [r7, #20]
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d009      	beq.n	8010792 <create_name+0x182>
 801077e:	697a      	ldr	r2, [r7, #20]
 8010780:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010784:	4413      	add	r3, r2
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	68fa      	ldr	r2, [r7, #12]
 801078a:	4413      	add	r3, r2
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010790:	d1ef      	bne.n	8010772 <create_name+0x162>

	i = b = 0; ni = 8;
 8010792:	2300      	movs	r3, #0
 8010794:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010798:	2300      	movs	r3, #0
 801079a:	623b      	str	r3, [r7, #32]
 801079c:	2308      	movs	r3, #8
 801079e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80107a0:	69bb      	ldr	r3, [r7, #24]
 80107a2:	1c5a      	adds	r2, r3, #1
 80107a4:	61ba      	str	r2, [r7, #24]
 80107a6:	005b      	lsls	r3, r3, #1
 80107a8:	68fa      	ldr	r2, [r7, #12]
 80107aa:	4413      	add	r3, r2
 80107ac:	881b      	ldrh	r3, [r3, #0]
 80107ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80107b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f000 8090 	beq.w	80108d8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80107b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107ba:	2b20      	cmp	r3, #32
 80107bc:	d006      	beq.n	80107cc <create_name+0x1bc>
 80107be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80107c2:	d10a      	bne.n	80107da <create_name+0x1ca>
 80107c4:	69ba      	ldr	r2, [r7, #24]
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d006      	beq.n	80107da <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80107cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107d0:	f043 0303 	orr.w	r3, r3, #3
 80107d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107d8:	e07d      	b.n	80108d6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80107da:	6a3a      	ldr	r2, [r7, #32]
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	429a      	cmp	r2, r3
 80107e0:	d203      	bcs.n	80107ea <create_name+0x1da>
 80107e2:	69ba      	ldr	r2, [r7, #24]
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d123      	bne.n	8010832 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	2b0b      	cmp	r3, #11
 80107ee:	d106      	bne.n	80107fe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80107f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107f4:	f043 0303 	orr.w	r3, r3, #3
 80107f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107fc:	e075      	b.n	80108ea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80107fe:	69ba      	ldr	r2, [r7, #24]
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	429a      	cmp	r2, r3
 8010804:	d005      	beq.n	8010812 <create_name+0x202>
 8010806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801080a:	f043 0303 	orr.w	r3, r3, #3
 801080e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8010812:	69ba      	ldr	r2, [r7, #24]
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	429a      	cmp	r2, r3
 8010818:	d866      	bhi.n	80108e8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	61bb      	str	r3, [r7, #24]
 801081e:	2308      	movs	r3, #8
 8010820:	623b      	str	r3, [r7, #32]
 8010822:	230b      	movs	r3, #11
 8010824:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010826:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010830:	e051      	b.n	80108d6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010834:	2b7f      	cmp	r3, #127	@ 0x7f
 8010836:	d914      	bls.n	8010862 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010838:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801083a:	2100      	movs	r1, #0
 801083c:	4618      	mov	r0, r3
 801083e:	f001 fd35 	bl	80122ac <ff_convert>
 8010842:	4603      	mov	r3, r0
 8010844:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010848:	2b00      	cmp	r3, #0
 801084a:	d004      	beq.n	8010856 <create_name+0x246>
 801084c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801084e:	3b80      	subs	r3, #128	@ 0x80
 8010850:	4a23      	ldr	r2, [pc, #140]	@ (80108e0 <create_name+0x2d0>)
 8010852:	5cd3      	ldrb	r3, [r2, r3]
 8010854:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801085a:	f043 0302 	orr.w	r3, r3, #2
 801085e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010864:	2b00      	cmp	r3, #0
 8010866:	d007      	beq.n	8010878 <create_name+0x268>
 8010868:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801086a:	4619      	mov	r1, r3
 801086c:	481d      	ldr	r0, [pc, #116]	@ (80108e4 <create_name+0x2d4>)
 801086e:	f7fe fa66 	bl	800ed3e <chk_chr>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d008      	beq.n	801088a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010878:	235f      	movs	r3, #95	@ 0x5f
 801087a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801087c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010880:	f043 0303 	orr.w	r3, r3, #3
 8010884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010888:	e01b      	b.n	80108c2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801088a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801088c:	2b40      	cmp	r3, #64	@ 0x40
 801088e:	d909      	bls.n	80108a4 <create_name+0x294>
 8010890:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010892:	2b5a      	cmp	r3, #90	@ 0x5a
 8010894:	d806      	bhi.n	80108a4 <create_name+0x294>
					b |= 2;
 8010896:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801089a:	f043 0302 	orr.w	r3, r3, #2
 801089e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80108a2:	e00e      	b.n	80108c2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80108a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108a6:	2b60      	cmp	r3, #96	@ 0x60
 80108a8:	d90b      	bls.n	80108c2 <create_name+0x2b2>
 80108aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108ac:	2b7a      	cmp	r3, #122	@ 0x7a
 80108ae:	d808      	bhi.n	80108c2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80108b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80108b4:	f043 0301 	orr.w	r3, r3, #1
 80108b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80108bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108be:	3b20      	subs	r3, #32
 80108c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80108c2:	6a3b      	ldr	r3, [r7, #32]
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	623a      	str	r2, [r7, #32]
 80108c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80108ca:	b2d1      	uxtb	r1, r2
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	4413      	add	r3, r2
 80108d0:	460a      	mov	r2, r1
 80108d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80108d6:	e763      	b.n	80107a0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80108d8:	bf00      	nop
 80108da:	e006      	b.n	80108ea <create_name+0x2da>
 80108dc:	08018b04 	.word	0x08018b04
 80108e0:	08018b78 	.word	0x08018b78
 80108e4:	08018b10 	.word	0x08018b10
			if (si > di) break;			/* No extension */
 80108e8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80108f0:	2be5      	cmp	r3, #229	@ 0xe5
 80108f2:	d103      	bne.n	80108fc <create_name+0x2ec>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2205      	movs	r2, #5
 80108f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	2b08      	cmp	r3, #8
 8010900:	d104      	bne.n	801090c <create_name+0x2fc>
 8010902:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801090c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010910:	f003 030c 	and.w	r3, r3, #12
 8010914:	2b0c      	cmp	r3, #12
 8010916:	d005      	beq.n	8010924 <create_name+0x314>
 8010918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801091c:	f003 0303 	and.w	r3, r3, #3
 8010920:	2b03      	cmp	r3, #3
 8010922:	d105      	bne.n	8010930 <create_name+0x320>
 8010924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010928:	f043 0302 	orr.w	r3, r3, #2
 801092c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010934:	f003 0302 	and.w	r3, r3, #2
 8010938:	2b00      	cmp	r3, #0
 801093a:	d117      	bne.n	801096c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801093c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010940:	f003 0303 	and.w	r3, r3, #3
 8010944:	2b01      	cmp	r3, #1
 8010946:	d105      	bne.n	8010954 <create_name+0x344>
 8010948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801094c:	f043 0310 	orr.w	r3, r3, #16
 8010950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010954:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010958:	f003 030c 	and.w	r3, r3, #12
 801095c:	2b04      	cmp	r3, #4
 801095e:	d105      	bne.n	801096c <create_name+0x35c>
 8010960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010964:	f043 0308 	orr.w	r3, r3, #8
 8010968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010972:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8010976:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010978:	4618      	mov	r0, r3
 801097a:	3728      	adds	r7, #40	@ 0x28
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010994:	e002      	b.n	801099c <follow_path+0x1c>
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	3301      	adds	r3, #1
 801099a:	603b      	str	r3, [r7, #0]
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80109a2:	d0f8      	beq.n	8010996 <follow_path+0x16>
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80109aa:	d0f4      	beq.n	8010996 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	2200      	movs	r2, #0
 80109b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	2b1f      	cmp	r3, #31
 80109b8:	d80a      	bhi.n	80109d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2280      	movs	r2, #128	@ 0x80
 80109be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80109c2:	2100      	movs	r1, #0
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7fe ff34 	bl	800f832 <dir_sdi>
 80109ca:	4603      	mov	r3, r0
 80109cc:	75fb      	strb	r3, [r7, #23]
 80109ce:	e043      	b.n	8010a58 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80109d0:	463b      	mov	r3, r7
 80109d2:	4619      	mov	r1, r3
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff fe1b 	bl	8010610 <create_name>
 80109da:	4603      	mov	r3, r0
 80109dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80109de:	7dfb      	ldrb	r3, [r7, #23]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d134      	bne.n	8010a4e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7ff fb7d 	bl	80100e4 <dir_find>
 80109ea:	4603      	mov	r3, r0
 80109ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80109f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80109f6:	7dfb      	ldrb	r3, [r7, #23]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00a      	beq.n	8010a12 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80109fc:	7dfb      	ldrb	r3, [r7, #23]
 80109fe:	2b04      	cmp	r3, #4
 8010a00:	d127      	bne.n	8010a52 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010a02:	7afb      	ldrb	r3, [r7, #11]
 8010a04:	f003 0304 	and.w	r3, r3, #4
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d122      	bne.n	8010a52 <follow_path+0xd2>
 8010a0c:	2305      	movs	r3, #5
 8010a0e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010a10:	e01f      	b.n	8010a52 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010a12:	7afb      	ldrb	r3, [r7, #11]
 8010a14:	f003 0304 	and.w	r3, r3, #4
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d11c      	bne.n	8010a56 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	799b      	ldrb	r3, [r3, #6]
 8010a20:	f003 0310 	and.w	r3, r3, #16
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010a28:	2305      	movs	r3, #5
 8010a2a:	75fb      	strb	r3, [r7, #23]
 8010a2c:	e014      	b.n	8010a58 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	695b      	ldr	r3, [r3, #20]
 8010a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a3c:	4413      	add	r3, r2
 8010a3e:	4619      	mov	r1, r3
 8010a40:	68f8      	ldr	r0, [r7, #12]
 8010a42:	f7ff f87d 	bl	800fb40 <ld_clust>
 8010a46:	4602      	mov	r2, r0
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010a4c:	e7c0      	b.n	80109d0 <follow_path+0x50>
			if (res != FR_OK) break;
 8010a4e:	bf00      	nop
 8010a50:	e002      	b.n	8010a58 <follow_path+0xd8>
				break;
 8010a52:	bf00      	nop
 8010a54:	e000      	b.n	8010a58 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010a56:	bf00      	nop
			}
		}
	}

	return res;
 8010a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3718      	adds	r7, #24
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010a62:	b480      	push	{r7}
 8010a64:	b087      	sub	sp, #28
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a6e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d031      	beq.n	8010adc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	617b      	str	r3, [r7, #20]
 8010a7e:	e002      	b.n	8010a86 <get_ldnumber+0x24>
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	3301      	adds	r3, #1
 8010a84:	617b      	str	r3, [r7, #20]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	2b1f      	cmp	r3, #31
 8010a8c:	d903      	bls.n	8010a96 <get_ldnumber+0x34>
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	2b3a      	cmp	r3, #58	@ 0x3a
 8010a94:	d1f4      	bne.n	8010a80 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	2b3a      	cmp	r3, #58	@ 0x3a
 8010a9c:	d11c      	bne.n	8010ad8 <get_ldnumber+0x76>
			tp = *path;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	1c5a      	adds	r2, r3, #1
 8010aa8:	60fa      	str	r2, [r7, #12]
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	3b30      	subs	r3, #48	@ 0x30
 8010aae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	2b09      	cmp	r3, #9
 8010ab4:	d80e      	bhi.n	8010ad4 <get_ldnumber+0x72>
 8010ab6:	68fa      	ldr	r2, [r7, #12]
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d10a      	bne.n	8010ad4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d107      	bne.n	8010ad4 <get_ldnumber+0x72>
					vol = (int)i;
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	3301      	adds	r3, #1
 8010acc:	617b      	str	r3, [r7, #20]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	697a      	ldr	r2, [r7, #20]
 8010ad2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	e002      	b.n	8010ade <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010ad8:	2300      	movs	r3, #0
 8010ada:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010adc:	693b      	ldr	r3, [r7, #16]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	371c      	adds	r7, #28
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr
	...

08010aec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	70da      	strb	r2, [r3, #3]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f04f 32ff 	mov.w	r2, #4294967295
 8010b02:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010b04:	6839      	ldr	r1, [r7, #0]
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f7fe fb16 	bl	800f138 <move_window>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <check_fs+0x2a>
 8010b12:	2304      	movs	r3, #4
 8010b14:	e038      	b.n	8010b88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	3338      	adds	r3, #56	@ 0x38
 8010b1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fe f828 	bl	800eb74 <ld_word>
 8010b24:	4603      	mov	r3, r0
 8010b26:	461a      	mov	r2, r3
 8010b28:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d001      	beq.n	8010b34 <check_fs+0x48>
 8010b30:	2303      	movs	r3, #3
 8010b32:	e029      	b.n	8010b88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010b3a:	2be9      	cmp	r3, #233	@ 0xe9
 8010b3c:	d009      	beq.n	8010b52 <check_fs+0x66>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010b44:	2beb      	cmp	r3, #235	@ 0xeb
 8010b46:	d11e      	bne.n	8010b86 <check_fs+0x9a>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010b4e:	2b90      	cmp	r3, #144	@ 0x90
 8010b50:	d119      	bne.n	8010b86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	3338      	adds	r3, #56	@ 0x38
 8010b56:	3336      	adds	r3, #54	@ 0x36
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7fe f823 	bl	800eba4 <ld_dword>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010b64:	4a0a      	ldr	r2, [pc, #40]	@ (8010b90 <check_fs+0xa4>)
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d101      	bne.n	8010b6e <check_fs+0x82>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	e00c      	b.n	8010b88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	3338      	adds	r3, #56	@ 0x38
 8010b72:	3352      	adds	r3, #82	@ 0x52
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fe f815 	bl	800eba4 <ld_dword>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	4a05      	ldr	r2, [pc, #20]	@ (8010b94 <check_fs+0xa8>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d101      	bne.n	8010b86 <check_fs+0x9a>
 8010b82:	2300      	movs	r3, #0
 8010b84:	e000      	b.n	8010b88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010b86:	2302      	movs	r3, #2
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3708      	adds	r7, #8
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	00544146 	.word	0x00544146
 8010b94:	33544146 	.word	0x33544146

08010b98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b096      	sub	sp, #88	@ 0x58
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	60b9      	str	r1, [r7, #8]
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f7ff ff58 	bl	8010a62 <get_ldnumber>
 8010bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	da01      	bge.n	8010bbe <find_volume+0x26>
 8010bba:	230b      	movs	r3, #11
 8010bbc:	e235      	b.n	801102a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010bbe:	4aa5      	ldr	r2, [pc, #660]	@ (8010e54 <find_volume+0x2bc>)
 8010bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <find_volume+0x3a>
 8010bce:	230c      	movs	r3, #12
 8010bd0:	e22b      	b.n	801102a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8010bd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010bd4:	f7fe f8ce 	bl	800ed74 <lock_fs>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d101      	bne.n	8010be2 <find_volume+0x4a>
 8010bde:	230f      	movs	r3, #15
 8010be0:	e223      	b.n	801102a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010be6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010be8:	79fb      	ldrb	r3, [r7, #7]
 8010bea:	f023 0301 	bic.w	r3, r3, #1
 8010bee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d01a      	beq.n	8010c2e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfa:	785b      	ldrb	r3, [r3, #1]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fd ff1b 	bl	800ea38 <disk_status>
 8010c02:	4603      	mov	r3, r0
 8010c04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010c08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c0c:	f003 0301 	and.w	r3, r3, #1
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d10c      	bne.n	8010c2e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010c14:	79fb      	ldrb	r3, [r7, #7]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d007      	beq.n	8010c2a <find_volume+0x92>
 8010c1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c1e:	f003 0304 	and.w	r3, r3, #4
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d001      	beq.n	8010c2a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010c26:	230a      	movs	r3, #10
 8010c28:	e1ff      	b.n	801102a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	e1fd      	b.n	801102a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c30:	2200      	movs	r2, #0
 8010c32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3e:	785b      	ldrb	r3, [r3, #1]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fd ff13 	bl	800ea6c <disk_initialize>
 8010c46:	4603      	mov	r3, r0
 8010c48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c50:	f003 0301 	and.w	r3, r3, #1
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d001      	beq.n	8010c5c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010c58:	2303      	movs	r3, #3
 8010c5a:	e1e6      	b.n	801102a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010c5c:	79fb      	ldrb	r3, [r7, #7]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d007      	beq.n	8010c72 <find_volume+0xda>
 8010c62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c66:	f003 0304 	and.w	r3, r3, #4
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010c6e:	230a      	movs	r3, #10
 8010c70:	e1db      	b.n	801102a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010c72:	2300      	movs	r3, #0
 8010c74:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010c76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010c78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c7a:	f7ff ff37 	bl	8010aec <check_fs>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010c84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c88:	2b02      	cmp	r3, #2
 8010c8a:	d149      	bne.n	8010d20 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c90:	e01e      	b.n	8010cd0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c94:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c9a:	011b      	lsls	r3, r3, #4
 8010c9c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010ca0:	4413      	add	r3, r2
 8010ca2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca6:	3304      	adds	r3, #4
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d006      	beq.n	8010cbc <find_volume+0x124>
 8010cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cb0:	3308      	adds	r3, #8
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fd ff76 	bl	800eba4 <ld_dword>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	e000      	b.n	8010cbe <find_volume+0x126>
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	3358      	adds	r3, #88	@ 0x58
 8010cc4:	443b      	add	r3, r7
 8010cc6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ccc:	3301      	adds	r3, #1
 8010cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8010cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010cd2:	2b03      	cmp	r3, #3
 8010cd4:	d9dd      	bls.n	8010c92 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <find_volume+0x14e>
 8010ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ce2:	3b01      	subs	r3, #1
 8010ce4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	3358      	adds	r3, #88	@ 0x58
 8010cec:	443b      	add	r3, r7
 8010cee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010cf2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d005      	beq.n	8010d06 <find_volume+0x16e>
 8010cfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010cfc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010cfe:	f7ff fef5 	bl	8010aec <check_fs>
 8010d02:	4603      	mov	r3, r0
 8010d04:	e000      	b.n	8010d08 <find_volume+0x170>
 8010d06:	2303      	movs	r3, #3
 8010d08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	d905      	bls.n	8010d20 <find_volume+0x188>
 8010d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d16:	3301      	adds	r3, #1
 8010d18:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d1c:	2b03      	cmp	r3, #3
 8010d1e:	d9e2      	bls.n	8010ce6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010d20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d24:	2b04      	cmp	r3, #4
 8010d26:	d101      	bne.n	8010d2c <find_volume+0x194>
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e17e      	b.n	801102a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d30:	2b01      	cmp	r3, #1
 8010d32:	d901      	bls.n	8010d38 <find_volume+0x1a0>
 8010d34:	230d      	movs	r3, #13
 8010d36:	e178      	b.n	801102a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3a:	3338      	adds	r3, #56	@ 0x38
 8010d3c:	330b      	adds	r3, #11
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7fd ff18 	bl	800eb74 <ld_word>
 8010d44:	4603      	mov	r3, r0
 8010d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d4a:	d001      	beq.n	8010d50 <find_volume+0x1b8>
 8010d4c:	230d      	movs	r3, #13
 8010d4e:	e16c      	b.n	801102a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d52:	3338      	adds	r3, #56	@ 0x38
 8010d54:	3316      	adds	r3, #22
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fd ff0c 	bl	800eb74 <ld_word>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d106      	bne.n	8010d74 <find_volume+0x1dc>
 8010d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d68:	3338      	adds	r3, #56	@ 0x38
 8010d6a:	3324      	adds	r3, #36	@ 0x24
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7fd ff19 	bl	800eba4 <ld_dword>
 8010d72:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010d78:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d7c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d86:	789b      	ldrb	r3, [r3, #2]
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	d005      	beq.n	8010d98 <find_volume+0x200>
 8010d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d8e:	789b      	ldrb	r3, [r3, #2]
 8010d90:	2b02      	cmp	r3, #2
 8010d92:	d001      	beq.n	8010d98 <find_volume+0x200>
 8010d94:	230d      	movs	r3, #13
 8010d96:	e148      	b.n	801102a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9a:	789b      	ldrb	r3, [r3, #2]
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010da0:	fb02 f303 	mul.w	r3, r2, r3
 8010da4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010dac:	461a      	mov	r2, r3
 8010dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db4:	895b      	ldrh	r3, [r3, #10]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d008      	beq.n	8010dcc <find_volume+0x234>
 8010dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dbc:	895b      	ldrh	r3, [r3, #10]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc2:	895b      	ldrh	r3, [r3, #10]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	4013      	ands	r3, r2
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d001      	beq.n	8010dd0 <find_volume+0x238>
 8010dcc:	230d      	movs	r3, #13
 8010dce:	e12c      	b.n	801102a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd2:	3338      	adds	r3, #56	@ 0x38
 8010dd4:	3311      	adds	r3, #17
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fd fecc 	bl	800eb74 <ld_word>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	461a      	mov	r2, r3
 8010de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de6:	891b      	ldrh	r3, [r3, #8]
 8010de8:	f003 030f 	and.w	r3, r3, #15
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d001      	beq.n	8010df6 <find_volume+0x25e>
 8010df2:	230d      	movs	r3, #13
 8010df4:	e119      	b.n	801102a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df8:	3338      	adds	r3, #56	@ 0x38
 8010dfa:	3313      	adds	r3, #19
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fd feb9 	bl	800eb74 <ld_word>
 8010e02:	4603      	mov	r3, r0
 8010e04:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d106      	bne.n	8010e1a <find_volume+0x282>
 8010e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e0e:	3338      	adds	r3, #56	@ 0x38
 8010e10:	3320      	adds	r3, #32
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fd fec6 	bl	800eba4 <ld_dword>
 8010e18:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1c:	3338      	adds	r3, #56	@ 0x38
 8010e1e:	330e      	adds	r3, #14
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fd fea7 	bl	800eb74 <ld_word>
 8010e26:	4603      	mov	r3, r0
 8010e28:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010e2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <find_volume+0x29c>
 8010e30:	230d      	movs	r3, #13
 8010e32:	e0fa      	b.n	801102a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010e34:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e38:	4413      	add	r3, r2
 8010e3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e3c:	8912      	ldrh	r2, [r2, #8]
 8010e3e:	0912      	lsrs	r2, r2, #4
 8010e40:	b292      	uxth	r2, r2
 8010e42:	4413      	add	r3, r2
 8010e44:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d204      	bcs.n	8010e58 <find_volume+0x2c0>
 8010e4e:	230d      	movs	r3, #13
 8010e50:	e0eb      	b.n	801102a <find_volume+0x492>
 8010e52:	bf00      	nop
 8010e54:	2000c290 	.word	0x2000c290
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e60:	8952      	ldrh	r2, [r2, #10]
 8010e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e66:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d101      	bne.n	8010e72 <find_volume+0x2da>
 8010e6e:	230d      	movs	r3, #13
 8010e70:	e0db      	b.n	801102a <find_volume+0x492>
		fmt = FS_FAT32;
 8010e72:	2303      	movs	r3, #3
 8010e74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e7a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d802      	bhi.n	8010e88 <find_volume+0x2f0>
 8010e82:	2302      	movs	r3, #2
 8010e84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d802      	bhi.n	8010e98 <find_volume+0x300>
 8010e92:	2301      	movs	r3, #1
 8010e94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e9a:	1c9a      	adds	r2, r3, #2
 8010e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e9e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010ea4:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010ea6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010eaa:	441a      	add	r2, r3
 8010eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eae:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010eb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb4:	441a      	add	r2, r3
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb8:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8010eba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ebe:	2b03      	cmp	r3, #3
 8010ec0:	d11e      	bne.n	8010f00 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec4:	3338      	adds	r3, #56	@ 0x38
 8010ec6:	332a      	adds	r3, #42	@ 0x2a
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7fd fe53 	bl	800eb74 <ld_word>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <find_volume+0x340>
 8010ed4:	230d      	movs	r3, #13
 8010ed6:	e0a8      	b.n	801102a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eda:	891b      	ldrh	r3, [r3, #8]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <find_volume+0x34c>
 8010ee0:	230d      	movs	r3, #13
 8010ee2:	e0a2      	b.n	801102a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ee6:	3338      	adds	r3, #56	@ 0x38
 8010ee8:	332c      	adds	r3, #44	@ 0x2c
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fd fe5a 	bl	800eba4 <ld_dword>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ef8:	69db      	ldr	r3, [r3, #28]
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8010efe:	e01f      	b.n	8010f40 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f02:	891b      	ldrh	r3, [r3, #8]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d101      	bne.n	8010f0c <find_volume+0x374>
 8010f08:	230d      	movs	r3, #13
 8010f0a:	e08e      	b.n	801102a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f12:	441a      	add	r2, r3
 8010f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f16:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010f18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	d103      	bne.n	8010f28 <find_volume+0x390>
 8010f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f22:	69db      	ldr	r3, [r3, #28]
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	e00a      	b.n	8010f3e <find_volume+0x3a6>
 8010f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2a:	69da      	ldr	r2, [r3, #28]
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	005b      	lsls	r3, r3, #1
 8010f30:	4413      	add	r3, r2
 8010f32:	085a      	lsrs	r2, r3, #1
 8010f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f36:	69db      	ldr	r3, [r3, #28]
 8010f38:	f003 0301 	and.w	r3, r3, #1
 8010f3c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010f3e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f42:	6a1a      	ldr	r2, [r3, #32]
 8010f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f46:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010f4a:	0a5b      	lsrs	r3, r3, #9
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d201      	bcs.n	8010f54 <find_volume+0x3bc>
 8010f50:	230d      	movs	r3, #13
 8010f52:	e06a      	b.n	801102a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f56:	f04f 32ff 	mov.w	r2, #4294967295
 8010f5a:	619a      	str	r2, [r3, #24]
 8010f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5e:	699a      	ldr	r2, [r3, #24]
 8010f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f62:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f66:	2280      	movs	r2, #128	@ 0x80
 8010f68:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010f6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f6e:	2b03      	cmp	r3, #3
 8010f70:	d149      	bne.n	8011006 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f74:	3338      	adds	r3, #56	@ 0x38
 8010f76:	3330      	adds	r3, #48	@ 0x30
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7fd fdfb 	bl	800eb74 <ld_word>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d140      	bne.n	8011006 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f86:	3301      	adds	r3, #1
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010f8c:	f7fe f8d4 	bl	800f138 <move_window>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d137      	bne.n	8011006 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f98:	2200      	movs	r2, #0
 8010f9a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f9e:	3338      	adds	r3, #56	@ 0x38
 8010fa0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fd fde5 	bl	800eb74 <ld_word>
 8010faa:	4603      	mov	r3, r0
 8010fac:	461a      	mov	r2, r3
 8010fae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d127      	bne.n	8011006 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb8:	3338      	adds	r3, #56	@ 0x38
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fd fdf2 	bl	800eba4 <ld_dword>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8011034 <find_volume+0x49c>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d11e      	bne.n	8011006 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fca:	3338      	adds	r3, #56	@ 0x38
 8010fcc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fd fde7 	bl	800eba4 <ld_dword>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	4a17      	ldr	r2, [pc, #92]	@ (8011038 <find_volume+0x4a0>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d113      	bne.n	8011006 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe0:	3338      	adds	r3, #56	@ 0x38
 8010fe2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7fd fddc 	bl	800eba4 <ld_dword>
 8010fec:	4602      	mov	r2, r0
 8010fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ff0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ff4:	3338      	adds	r3, #56	@ 0x38
 8010ff6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7fd fdd2 	bl	800eba4 <ld_dword>
 8011000:	4602      	mov	r2, r0
 8011002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011004:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011008:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801100c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801100e:	4b0b      	ldr	r3, [pc, #44]	@ (801103c <find_volume+0x4a4>)
 8011010:	881b      	ldrh	r3, [r3, #0]
 8011012:	3301      	adds	r3, #1
 8011014:	b29a      	uxth	r2, r3
 8011016:	4b09      	ldr	r3, [pc, #36]	@ (801103c <find_volume+0x4a4>)
 8011018:	801a      	strh	r2, [r3, #0]
 801101a:	4b08      	ldr	r3, [pc, #32]	@ (801103c <find_volume+0x4a4>)
 801101c:	881a      	ldrh	r2, [r3, #0]
 801101e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011020:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011022:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011024:	f7fe f820 	bl	800f068 <clear_lock>
#endif
	return FR_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3758      	adds	r7, #88	@ 0x58
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	41615252 	.word	0x41615252
 8011038:	61417272 	.word	0x61417272
 801103c:	2000c294 	.word	0x2000c294

08011040 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801104a:	2309      	movs	r3, #9
 801104c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d02e      	beq.n	80110b2 <validate+0x72>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d02a      	beq.n	80110b2 <validate+0x72>
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d025      	beq.n	80110b2 <validate+0x72>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	889a      	ldrh	r2, [r3, #4]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	88db      	ldrh	r3, [r3, #6]
 8011070:	429a      	cmp	r2, r3
 8011072:	d11e      	bne.n	80110b2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4618      	mov	r0, r3
 801107a:	f7fd fe7b 	bl	800ed74 <lock_fs>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d014      	beq.n	80110ae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	785b      	ldrb	r3, [r3, #1]
 801108a:	4618      	mov	r0, r3
 801108c:	f7fd fcd4 	bl	800ea38 <disk_status>
 8011090:	4603      	mov	r3, r0
 8011092:	f003 0301 	and.w	r3, r3, #1
 8011096:	2b00      	cmp	r3, #0
 8011098:	d102      	bne.n	80110a0 <validate+0x60>
				res = FR_OK;
 801109a:	2300      	movs	r3, #0
 801109c:	73fb      	strb	r3, [r7, #15]
 801109e:	e008      	b.n	80110b2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2100      	movs	r1, #0
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fd fe7a 	bl	800eda0 <unlock_fs>
 80110ac:	e001      	b.n	80110b2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80110ae:	230f      	movs	r3, #15
 80110b0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80110b2:	7bfb      	ldrb	r3, [r7, #15]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d102      	bne.n	80110be <validate+0x7e>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	e000      	b.n	80110c0 <validate+0x80>
 80110be:	2300      	movs	r3, #0
 80110c0:	683a      	ldr	r2, [r7, #0]
 80110c2:	6013      	str	r3, [r2, #0]
	return res;
 80110c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
	...

080110d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b088      	sub	sp, #32
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	4613      	mov	r3, r2
 80110dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80110e2:	f107 0310 	add.w	r3, r7, #16
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7ff fcbb 	bl	8010a62 <get_ldnumber>
 80110ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80110ee:	69fb      	ldr	r3, [r7, #28]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	da01      	bge.n	80110f8 <f_mount+0x28>
 80110f4:	230b      	movs	r3, #11
 80110f6:	e048      	b.n	801118a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80110f8:	4a26      	ldr	r2, [pc, #152]	@ (8011194 <f_mount+0xc4>)
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011100:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d00f      	beq.n	8011128 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011108:	69b8      	ldr	r0, [r7, #24]
 801110a:	f7fd ffad 	bl	800f068 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	691b      	ldr	r3, [r3, #16]
 8011112:	4618      	mov	r0, r3
 8011114:	f001 f9b0 	bl	8012478 <ff_del_syncobj>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d101      	bne.n	8011122 <f_mount+0x52>
 801111e:	2302      	movs	r3, #2
 8011120:	e033      	b.n	801118a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	2200      	movs	r2, #0
 8011126:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00f      	beq.n	801114e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2200      	movs	r2, #0
 8011132:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	b2da      	uxtb	r2, r3
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	3310      	adds	r3, #16
 801113c:	4619      	mov	r1, r3
 801113e:	4610      	mov	r0, r2
 8011140:	f001 f97a 	bl	8012438 <ff_cre_syncobj>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d101      	bne.n	801114e <f_mount+0x7e>
 801114a:	2302      	movs	r3, #2
 801114c:	e01d      	b.n	801118a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801114e:	68fa      	ldr	r2, [r7, #12]
 8011150:	4910      	ldr	r1, [pc, #64]	@ (8011194 <f_mount+0xc4>)
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d002      	beq.n	8011164 <f_mount+0x94>
 801115e:	79fb      	ldrb	r3, [r7, #7]
 8011160:	2b01      	cmp	r3, #1
 8011162:	d001      	beq.n	8011168 <f_mount+0x98>
 8011164:	2300      	movs	r3, #0
 8011166:	e010      	b.n	801118a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011168:	f107 010c 	add.w	r1, r7, #12
 801116c:	f107 0308 	add.w	r3, r7, #8
 8011170:	2200      	movs	r2, #0
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff fd10 	bl	8010b98 <find_volume>
 8011178:	4603      	mov	r3, r0
 801117a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	7dfa      	ldrb	r2, [r7, #23]
 8011180:	4611      	mov	r1, r2
 8011182:	4618      	mov	r0, r3
 8011184:	f7fd fe0c 	bl	800eda0 <unlock_fs>
 8011188:	7dfb      	ldrb	r3, [r7, #23]
}
 801118a:	4618      	mov	r0, r3
 801118c:	3720      	adds	r7, #32
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	2000c290 	.word	0x2000c290

08011198 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801119e:	af00      	add	r7, sp, #0
 80111a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80111a4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80111a8:	6018      	str	r0, [r3, #0]
 80111aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80111ae:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80111b2:	6019      	str	r1, [r3, #0]
 80111b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80111b8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80111bc:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80111be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80111c2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d101      	bne.n	80111d0 <f_open+0x38>
 80111cc:	2309      	movs	r3, #9
 80111ce:	e299      	b.n	8011704 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80111d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80111d4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80111d8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80111dc:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80111e0:	7812      	ldrb	r2, [r2, #0]
 80111e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80111e6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80111e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80111ec:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80111f0:	781a      	ldrb	r2, [r3, #0]
 80111f2:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80111f6:	f107 0308 	add.w	r3, r7, #8
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff fccc 	bl	8010b98 <find_volume>
 8011200:	4603      	mov	r3, r0
 8011202:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8011206:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801120a:	2b00      	cmp	r3, #0
 801120c:	f040 8265 	bne.w	80116da <f_open+0x542>
		dj.obj.fs = fs;
 8011210:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011214:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8011218:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801121c:	f107 0214 	add.w	r2, r7, #20
 8011220:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8011222:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011226:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011230:	4611      	mov	r1, r2
 8011232:	4618      	mov	r0, r3
 8011234:	f7ff fba4 	bl	8010980 <follow_path>
 8011238:	4603      	mov	r3, r0
 801123a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801123e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011242:	2b00      	cmp	r3, #0
 8011244:	d11c      	bne.n	8011280 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011246:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 801124a:	b25b      	sxtb	r3, r3
 801124c:	2b00      	cmp	r3, #0
 801124e:	da03      	bge.n	8011258 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8011250:	2306      	movs	r3, #6
 8011252:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8011256:	e013      	b.n	8011280 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011258:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801125c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	2b01      	cmp	r3, #1
 8011264:	bf8c      	ite	hi
 8011266:	2301      	movhi	r3, #1
 8011268:	2300      	movls	r3, #0
 801126a:	b2db      	uxtb	r3, r3
 801126c:	461a      	mov	r2, r3
 801126e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011272:	4611      	mov	r1, r2
 8011274:	4618      	mov	r0, r3
 8011276:	f7fd fdaf 	bl	800edd8 <chk_lock>
 801127a:	4603      	mov	r3, r0
 801127c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011280:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011284:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	f003 031c 	and.w	r3, r3, #28
 801128e:	2b00      	cmp	r3, #0
 8011290:	f000 80a7 	beq.w	80113e2 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8011294:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011298:	2b00      	cmp	r3, #0
 801129a:	d01f      	beq.n	80112dc <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801129c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80112a0:	2b04      	cmp	r3, #4
 80112a2:	d10e      	bne.n	80112c2 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80112a4:	f7fd fdf4 	bl	800ee90 <enq_lock>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d006      	beq.n	80112bc <f_open+0x124>
 80112ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7fe ffd6 	bl	8010264 <dir_register>
 80112b8:	4603      	mov	r3, r0
 80112ba:	e000      	b.n	80112be <f_open+0x126>
 80112bc:	2312      	movs	r3, #18
 80112be:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80112c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112c6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80112ca:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80112ce:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80112d2:	7812      	ldrb	r2, [r2, #0]
 80112d4:	f042 0208 	orr.w	r2, r2, #8
 80112d8:	701a      	strb	r2, [r3, #0]
 80112da:	e015      	b.n	8011308 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80112dc:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80112e0:	f003 0311 	and.w	r3, r3, #17
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d003      	beq.n	80112f0 <f_open+0x158>
					res = FR_DENIED;
 80112e8:	2307      	movs	r3, #7
 80112ea:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80112ee:	e00b      	b.n	8011308 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80112f0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112f4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	f003 0304 	and.w	r3, r3, #4
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d002      	beq.n	8011308 <f_open+0x170>
 8011302:	2308      	movs	r3, #8
 8011304:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011308:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801130c:	2b00      	cmp	r3, #0
 801130e:	f040 8088 	bne.w	8011422 <f_open+0x28a>
 8011312:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011316:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	f003 0308 	and.w	r3, r3, #8
 8011320:	2b00      	cmp	r3, #0
 8011322:	d07e      	beq.n	8011422 <f_open+0x28a>
				dw = GET_FATTIME();
 8011324:	f7fc fe44 	bl	800dfb0 <get_fattime>
 8011328:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801132c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011330:	330e      	adds	r3, #14
 8011332:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8011336:	4618      	mov	r0, r3
 8011338:	f7fd fc72 	bl	800ec20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801133c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011340:	3316      	adds	r3, #22
 8011342:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8011346:	4618      	mov	r0, r3
 8011348:	f7fd fc6a 	bl	800ec20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801134c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011350:	330b      	adds	r3, #11
 8011352:	2220      	movs	r2, #32
 8011354:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011356:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801135a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801135e:	4611      	mov	r1, r2
 8011360:	4618      	mov	r0, r3
 8011362:	f7fe fbed 	bl	800fb40 <ld_clust>
 8011366:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801136a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801136e:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8011372:	2200      	movs	r2, #0
 8011374:	4618      	mov	r0, r3
 8011376:	f7fe fc02 	bl	800fb7e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801137a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801137e:	331c      	adds	r3, #28
 8011380:	2100      	movs	r1, #0
 8011382:	4618      	mov	r0, r3
 8011384:	f7fd fc4c 	bl	800ec20 <st_dword>
					fs->wflag = 1;
 8011388:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801138c:	2201      	movs	r2, #1
 801138e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011390:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8011394:	2b00      	cmp	r3, #0
 8011396:	d044      	beq.n	8011422 <f_open+0x28a>
						dw = fs->winsect;
 8011398:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801139c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801139e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80113a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80113a6:	2200      	movs	r2, #0
 80113a8:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fe f90f 	bl	800f5d0 <remove_chain>
 80113b2:	4603      	mov	r3, r0
 80113b4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 80113b8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d130      	bne.n	8011422 <f_open+0x28a>
							res = move_window(fs, dw);
 80113c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80113c4:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fd feb5 	bl	800f138 <move_window>
 80113ce:	4603      	mov	r3, r0
 80113d0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80113d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80113d8:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80113dc:	3a01      	subs	r2, #1
 80113de:	615a      	str	r2, [r3, #20]
 80113e0:	e01f      	b.n	8011422 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80113e2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d11b      	bne.n	8011422 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80113ea:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80113ee:	f003 0310 	and.w	r3, r3, #16
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d003      	beq.n	80113fe <f_open+0x266>
					res = FR_NO_FILE;
 80113f6:	2304      	movs	r3, #4
 80113f8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80113fc:	e011      	b.n	8011422 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80113fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011402:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	f003 0302 	and.w	r3, r3, #2
 801140c:	2b00      	cmp	r3, #0
 801140e:	d008      	beq.n	8011422 <f_open+0x28a>
 8011410:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8011414:	f003 0301 	and.w	r3, r3, #1
 8011418:	2b00      	cmp	r3, #0
 801141a:	d002      	beq.n	8011422 <f_open+0x28a>
						res = FR_DENIED;
 801141c:	2307      	movs	r3, #7
 801141e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8011422:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011426:	2b00      	cmp	r3, #0
 8011428:	d148      	bne.n	80114bc <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801142a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801142e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f003 0308 	and.w	r3, r3, #8
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00b      	beq.n	8011454 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 801143c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011440:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011444:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8011448:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 801144c:	7812      	ldrb	r2, [r2, #0]
 801144e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011452:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011454:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801145a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801145e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011466:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801146a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801146e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011476:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801147a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b01      	cmp	r3, #1
 8011482:	bf8c      	ite	hi
 8011484:	2301      	movhi	r3, #1
 8011486:	2300      	movls	r3, #0
 8011488:	b2db      	uxtb	r3, r3
 801148a:	461a      	mov	r2, r3
 801148c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011490:	4611      	mov	r1, r2
 8011492:	4618      	mov	r0, r3
 8011494:	f7fd fd1e 	bl	800eed4 <inc_lock>
 8011498:	4602      	mov	r2, r0
 801149a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801149e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80114a6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114aa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	691b      	ldr	r3, [r3, #16]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d102      	bne.n	80114bc <f_open+0x324>
 80114b6:	2302      	movs	r3, #2
 80114b8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80114bc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f040 810a 	bne.w	80116da <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80114c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80114ca:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80114ce:	4611      	mov	r1, r2
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7fe fb35 	bl	800fb40 <ld_clust>
 80114d6:	4602      	mov	r2, r0
 80114d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114dc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80114e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80114e8:	331c      	adds	r3, #28
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fd fb5a 	bl	800eba4 <ld_dword>
 80114f0:	4602      	mov	r2, r0
 80114f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80114fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011502:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2200      	movs	r2, #0
 801150a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801150c:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8011510:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011514:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801151c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011520:	88da      	ldrh	r2, [r3, #6]
 8011522:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011526:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801152e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011532:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 801153c:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8011540:	7812      	ldrb	r2, [r2, #0]
 8011542:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011544:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011548:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2200      	movs	r2, #0
 8011550:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011552:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011556:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2200      	movs	r2, #0
 801155e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011560:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011564:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2200      	movs	r2, #0
 801156c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801156e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011572:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	3330      	adds	r3, #48	@ 0x30
 801157a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801157e:	2100      	movs	r1, #0
 8011580:	4618      	mov	r0, r3
 8011582:	f7fd fb9a 	bl	800ecba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011586:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801158a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	f003 0320 	and.w	r3, r3, #32
 8011594:	2b00      	cmp	r3, #0
 8011596:	f000 80a0 	beq.w	80116da <f_open+0x542>
 801159a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801159e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f000 8097 	beq.w	80116da <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80115ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115b0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	68da      	ldr	r2, [r3, #12]
 80115b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80115c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80115c8:	895b      	ldrh	r3, [r3, #10]
 80115ca:	025b      	lsls	r3, r3, #9
 80115cc:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80115d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115d4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115e4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80115f0:	e021      	b.n	8011636 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 80115f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8011600:	4618      	mov	r0, r3
 8011602:	f7fd fe54 	bl	800f2ae <get_fat>
 8011606:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 801160a:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801160e:	2b01      	cmp	r3, #1
 8011610:	d802      	bhi.n	8011618 <f_open+0x480>
 8011612:	2302      	movs	r3, #2
 8011614:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011618:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011620:	d102      	bne.n	8011628 <f_open+0x490>
 8011622:	2301      	movs	r3, #1
 8011624:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011628:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801162c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8011630:	1ad3      	subs	r3, r2, r3
 8011632:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8011636:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801163a:	2b00      	cmp	r3, #0
 801163c:	d105      	bne.n	801164a <f_open+0x4b2>
 801163e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8011642:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8011646:	429a      	cmp	r2, r3
 8011648:	d8d3      	bhi.n	80115f2 <f_open+0x45a>
				}
				fp->clust = clst;
 801164a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801164e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8011658:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801165a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801165e:	2b00      	cmp	r3, #0
 8011660:	d13b      	bne.n	80116da <f_open+0x542>
 8011662:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8011666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801166a:	2b00      	cmp	r3, #0
 801166c:	d035      	beq.n	80116da <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801166e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011672:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8011676:	4618      	mov	r0, r3
 8011678:	f7fd fdfa 	bl	800f270 <clust2sect>
 801167c:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8011680:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8011684:	2b00      	cmp	r3, #0
 8011686:	d103      	bne.n	8011690 <f_open+0x4f8>
						res = FR_INT_ERR;
 8011688:	2302      	movs	r3, #2
 801168a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 801168e:	e024      	b.n	80116da <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011690:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8011694:	0a5a      	lsrs	r2, r3, #9
 8011696:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801169a:	441a      	add	r2, r3
 801169c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80116a0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80116a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80116ac:	7858      	ldrb	r0, [r3, #1]
 80116ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80116b2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80116bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80116c0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	6a1a      	ldr	r2, [r3, #32]
 80116c8:	2301      	movs	r3, #1
 80116ca:	f7fd f9f5 	bl	800eab8 <disk_read>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d002      	beq.n	80116da <f_open+0x542>
 80116d4:	2301      	movs	r3, #1
 80116d6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80116da:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d006      	beq.n	80116f0 <f_open+0x558>
 80116e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80116e6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2200      	movs	r2, #0
 80116ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80116f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80116f4:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 80116f8:	4611      	mov	r1, r2
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fd fb50 	bl	800eda0 <unlock_fs>
 8011700:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 8011704:	4618      	mov	r0, r3
 8011706:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}

0801170e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801170e:	b580      	push	{r7, lr}
 8011710:	b08e      	sub	sp, #56	@ 0x38
 8011712:	af00      	add	r7, sp, #0
 8011714:	60f8      	str	r0, [r7, #12]
 8011716:	60b9      	str	r1, [r7, #8]
 8011718:	607a      	str	r2, [r7, #4]
 801171a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	2200      	movs	r2, #0
 8011724:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f107 0214 	add.w	r2, r7, #20
 801172c:	4611      	mov	r1, r2
 801172e:	4618      	mov	r0, r3
 8011730:	f7ff fc86 	bl	8011040 <validate>
 8011734:	4603      	mov	r3, r0
 8011736:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801173a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801173e:	2b00      	cmp	r3, #0
 8011740:	d107      	bne.n	8011752 <f_read+0x44>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	7d5b      	ldrb	r3, [r3, #21]
 8011746:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801174a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801174e:	2b00      	cmp	r3, #0
 8011750:	d009      	beq.n	8011766 <f_read+0x58>
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011758:	4611      	mov	r1, r2
 801175a:	4618      	mov	r0, r3
 801175c:	f7fd fb20 	bl	800eda0 <unlock_fs>
 8011760:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011764:	e13d      	b.n	80119e2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	7d1b      	ldrb	r3, [r3, #20]
 801176a:	f003 0301 	and.w	r3, r3, #1
 801176e:	2b00      	cmp	r3, #0
 8011770:	d106      	bne.n	8011780 <f_read+0x72>
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	2107      	movs	r1, #7
 8011776:	4618      	mov	r0, r3
 8011778:	f7fd fb12 	bl	800eda0 <unlock_fs>
 801177c:	2307      	movs	r3, #7
 801177e:	e130      	b.n	80119e2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	68da      	ldr	r2, [r3, #12]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	699b      	ldr	r3, [r3, #24]
 8011788:	1ad3      	subs	r3, r2, r3
 801178a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	6a3b      	ldr	r3, [r7, #32]
 8011790:	429a      	cmp	r2, r3
 8011792:	f240 811c 	bls.w	80119ce <f_read+0x2c0>
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801179a:	e118      	b.n	80119ce <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	699b      	ldr	r3, [r3, #24]
 80117a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f040 80e4 	bne.w	8011972 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	699b      	ldr	r3, [r3, #24]
 80117ae:	0a5b      	lsrs	r3, r3, #9
 80117b0:	697a      	ldr	r2, [r7, #20]
 80117b2:	8952      	ldrh	r2, [r2, #10]
 80117b4:	3a01      	subs	r2, #1
 80117b6:	4013      	ands	r3, r2
 80117b8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d139      	bne.n	8011834 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	699b      	ldr	r3, [r3, #24]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d103      	bne.n	80117d0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	689b      	ldr	r3, [r3, #8]
 80117cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80117ce:	e013      	b.n	80117f8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d007      	beq.n	80117e8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	699b      	ldr	r3, [r3, #24]
 80117dc:	4619      	mov	r1, r3
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f7fd fff3 	bl	800f7ca <clmt_clust>
 80117e4:	6338      	str	r0, [r7, #48]	@ 0x30
 80117e6:	e007      	b.n	80117f8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80117e8:	68fa      	ldr	r2, [r7, #12]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	69db      	ldr	r3, [r3, #28]
 80117ee:	4619      	mov	r1, r3
 80117f0:	4610      	mov	r0, r2
 80117f2:	f7fd fd5c 	bl	800f2ae <get_fat>
 80117f6:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80117f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117fa:	2b01      	cmp	r3, #1
 80117fc:	d809      	bhi.n	8011812 <f_read+0x104>
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2202      	movs	r2, #2
 8011802:	755a      	strb	r2, [r3, #21]
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	2102      	movs	r1, #2
 8011808:	4618      	mov	r0, r3
 801180a:	f7fd fac9 	bl	800eda0 <unlock_fs>
 801180e:	2302      	movs	r3, #2
 8011810:	e0e7      	b.n	80119e2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011818:	d109      	bne.n	801182e <f_read+0x120>
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	2201      	movs	r2, #1
 801181e:	755a      	strb	r2, [r3, #21]
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	2101      	movs	r1, #1
 8011824:	4618      	mov	r0, r3
 8011826:	f7fd fabb 	bl	800eda0 <unlock_fs>
 801182a:	2301      	movs	r3, #1
 801182c:	e0d9      	b.n	80119e2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011832:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011834:	697a      	ldr	r2, [r7, #20]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	69db      	ldr	r3, [r3, #28]
 801183a:	4619      	mov	r1, r3
 801183c:	4610      	mov	r0, r2
 801183e:	f7fd fd17 	bl	800f270 <clust2sect>
 8011842:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d109      	bne.n	801185e <f_read+0x150>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2202      	movs	r2, #2
 801184e:	755a      	strb	r2, [r3, #21]
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	2102      	movs	r1, #2
 8011854:	4618      	mov	r0, r3
 8011856:	f7fd faa3 	bl	800eda0 <unlock_fs>
 801185a:	2302      	movs	r3, #2
 801185c:	e0c1      	b.n	80119e2 <f_read+0x2d4>
			sect += csect;
 801185e:	69ba      	ldr	r2, [r7, #24]
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	4413      	add	r3, r2
 8011864:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	0a5b      	lsrs	r3, r3, #9
 801186a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801186c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801186e:	2b00      	cmp	r3, #0
 8011870:	d03e      	beq.n	80118f0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011872:	69fa      	ldr	r2, [r7, #28]
 8011874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011876:	4413      	add	r3, r2
 8011878:	697a      	ldr	r2, [r7, #20]
 801187a:	8952      	ldrh	r2, [r2, #10]
 801187c:	4293      	cmp	r3, r2
 801187e:	d905      	bls.n	801188c <f_read+0x17e>
					cc = fs->csize - csect;
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	895b      	ldrh	r3, [r3, #10]
 8011884:	461a      	mov	r2, r3
 8011886:	69fb      	ldr	r3, [r7, #28]
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	7858      	ldrb	r0, [r3, #1]
 8011890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011892:	69ba      	ldr	r2, [r7, #24]
 8011894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011896:	f7fd f90f 	bl	800eab8 <disk_read>
 801189a:	4603      	mov	r3, r0
 801189c:	2b00      	cmp	r3, #0
 801189e:	d009      	beq.n	80118b4 <f_read+0x1a6>
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2201      	movs	r2, #1
 80118a4:	755a      	strb	r2, [r3, #21]
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	2101      	movs	r1, #1
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fd fa78 	bl	800eda0 <unlock_fs>
 80118b0:	2301      	movs	r3, #1
 80118b2:	e096      	b.n	80119e2 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	7d1b      	ldrb	r3, [r3, #20]
 80118b8:	b25b      	sxtb	r3, r3
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	da14      	bge.n	80118e8 <f_read+0x1da>
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	6a1a      	ldr	r2, [r3, #32]
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d90d      	bls.n	80118e8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	6a1a      	ldr	r2, [r3, #32]
 80118d0:	69bb      	ldr	r3, [r7, #24]
 80118d2:	1ad3      	subs	r3, r2, r3
 80118d4:	025b      	lsls	r3, r3, #9
 80118d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118d8:	18d0      	adds	r0, r2, r3
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	3330      	adds	r3, #48	@ 0x30
 80118de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118e2:	4619      	mov	r1, r3
 80118e4:	f7fd f9c8 	bl	800ec78 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80118e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ea:	025b      	lsls	r3, r3, #9
 80118ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80118ee:	e05a      	b.n	80119a6 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6a1b      	ldr	r3, [r3, #32]
 80118f4:	69ba      	ldr	r2, [r7, #24]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d038      	beq.n	801196c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	7d1b      	ldrb	r3, [r3, #20]
 80118fe:	b25b      	sxtb	r3, r3
 8011900:	2b00      	cmp	r3, #0
 8011902:	da1d      	bge.n	8011940 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	7858      	ldrb	r0, [r3, #1]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	6a1a      	ldr	r2, [r3, #32]
 8011912:	2301      	movs	r3, #1
 8011914:	f7fd f8f0 	bl	800eaf8 <disk_write>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d009      	beq.n	8011932 <f_read+0x224>
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2201      	movs	r2, #1
 8011922:	755a      	strb	r2, [r3, #21]
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	2101      	movs	r1, #1
 8011928:	4618      	mov	r0, r3
 801192a:	f7fd fa39 	bl	800eda0 <unlock_fs>
 801192e:	2301      	movs	r3, #1
 8011930:	e057      	b.n	80119e2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	7d1b      	ldrb	r3, [r3, #20]
 8011936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801193a:	b2da      	uxtb	r2, r3
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	7858      	ldrb	r0, [r3, #1]
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801194a:	2301      	movs	r3, #1
 801194c:	69ba      	ldr	r2, [r7, #24]
 801194e:	f7fd f8b3 	bl	800eab8 <disk_read>
 8011952:	4603      	mov	r3, r0
 8011954:	2b00      	cmp	r3, #0
 8011956:	d009      	beq.n	801196c <f_read+0x25e>
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	2201      	movs	r2, #1
 801195c:	755a      	strb	r2, [r3, #21]
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	2101      	movs	r1, #1
 8011962:	4618      	mov	r0, r3
 8011964:	f7fd fa1c 	bl	800eda0 <unlock_fs>
 8011968:	2301      	movs	r3, #1
 801196a:	e03a      	b.n	80119e2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	69ba      	ldr	r2, [r7, #24]
 8011970:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	699b      	ldr	r3, [r3, #24]
 8011976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801197a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	429a      	cmp	r2, r3
 8011986:	d901      	bls.n	801198c <f_read+0x27e>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	699b      	ldr	r3, [r3, #24]
 8011996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801199a:	4413      	add	r3, r2
 801199c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801199e:	4619      	mov	r1, r3
 80119a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80119a2:	f7fd f969 	bl	800ec78 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80119a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119aa:	4413      	add	r3, r2
 80119ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	699a      	ldr	r2, [r3, #24]
 80119b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119b4:	441a      	add	r2, r3
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	619a      	str	r2, [r3, #24]
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119c0:	441a      	add	r2, r3
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ca:	1ad3      	subs	r3, r2, r3
 80119cc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	f47f aee3 	bne.w	801179c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	2100      	movs	r1, #0
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fd f9e0 	bl	800eda0 <unlock_fs>
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3738      	adds	r7, #56	@ 0x38
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b08c      	sub	sp, #48	@ 0x30
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	60f8      	str	r0, [r7, #12]
 80119f2:	60b9      	str	r1, [r7, #8]
 80119f4:	607a      	str	r2, [r7, #4]
 80119f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	2200      	movs	r2, #0
 8011a00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	f107 0210 	add.w	r2, r7, #16
 8011a08:	4611      	mov	r1, r2
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff fb18 	bl	8011040 <validate>
 8011a10:	4603      	mov	r3, r0
 8011a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011a16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d107      	bne.n	8011a2e <f_write+0x44>
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	7d5b      	ldrb	r3, [r3, #21]
 8011a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d009      	beq.n	8011a42 <f_write+0x58>
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011a34:	4611      	mov	r1, r2
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fd f9b2 	bl	800eda0 <unlock_fs>
 8011a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a40:	e173      	b.n	8011d2a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	7d1b      	ldrb	r3, [r3, #20]
 8011a46:	f003 0302 	and.w	r3, r3, #2
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d106      	bne.n	8011a5c <f_write+0x72>
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	2107      	movs	r1, #7
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7fd f9a4 	bl	800eda0 <unlock_fs>
 8011a58:	2307      	movs	r3, #7
 8011a5a:	e166      	b.n	8011d2a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	699a      	ldr	r2, [r3, #24]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	441a      	add	r2, r3
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	699b      	ldr	r3, [r3, #24]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	f080 814b 	bcs.w	8011d04 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	699b      	ldr	r3, [r3, #24]
 8011a72:	43db      	mvns	r3, r3
 8011a74:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011a76:	e145      	b.n	8011d04 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	699b      	ldr	r3, [r3, #24]
 8011a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f040 8101 	bne.w	8011c88 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	699b      	ldr	r3, [r3, #24]
 8011a8a:	0a5b      	lsrs	r3, r3, #9
 8011a8c:	693a      	ldr	r2, [r7, #16]
 8011a8e:	8952      	ldrh	r2, [r2, #10]
 8011a90:	3a01      	subs	r2, #1
 8011a92:	4013      	ands	r3, r2
 8011a94:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d14d      	bne.n	8011b38 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	699b      	ldr	r3, [r3, #24]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d10c      	bne.n	8011abe <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d11a      	bne.n	8011ae6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fd fdf0 	bl	800f69a <create_chain>
 8011aba:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011abc:	e013      	b.n	8011ae6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d007      	beq.n	8011ad6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	699b      	ldr	r3, [r3, #24]
 8011aca:	4619      	mov	r1, r3
 8011acc:	68f8      	ldr	r0, [r7, #12]
 8011ace:	f7fd fe7c 	bl	800f7ca <clmt_clust>
 8011ad2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011ad4:	e007      	b.n	8011ae6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011ad6:	68fa      	ldr	r2, [r7, #12]
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	69db      	ldr	r3, [r3, #28]
 8011adc:	4619      	mov	r1, r3
 8011ade:	4610      	mov	r0, r2
 8011ae0:	f7fd fddb 	bl	800f69a <create_chain>
 8011ae4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f000 8110 	beq.w	8011d0e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d109      	bne.n	8011b08 <f_write+0x11e>
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2202      	movs	r2, #2
 8011af8:	755a      	strb	r2, [r3, #21]
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	2102      	movs	r1, #2
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7fd f94e 	bl	800eda0 <unlock_fs>
 8011b04:	2302      	movs	r3, #2
 8011b06:	e110      	b.n	8011d2a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b0e:	d109      	bne.n	8011b24 <f_write+0x13a>
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2201      	movs	r2, #1
 8011b14:	755a      	strb	r2, [r3, #21]
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	2101      	movs	r1, #1
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fd f940 	bl	800eda0 <unlock_fs>
 8011b20:	2301      	movs	r3, #1
 8011b22:	e102      	b.n	8011d2a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b28:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d102      	bne.n	8011b38 <f_write+0x14e>
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b36:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	7d1b      	ldrb	r3, [r3, #20]
 8011b3c:	b25b      	sxtb	r3, r3
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	da1d      	bge.n	8011b7e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	7858      	ldrb	r0, [r3, #1]
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	6a1a      	ldr	r2, [r3, #32]
 8011b50:	2301      	movs	r3, #1
 8011b52:	f7fc ffd1 	bl	800eaf8 <disk_write>
 8011b56:	4603      	mov	r3, r0
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d009      	beq.n	8011b70 <f_write+0x186>
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	755a      	strb	r2, [r3, #21]
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	2101      	movs	r1, #1
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fd f91a 	bl	800eda0 <unlock_fs>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e0dc      	b.n	8011d2a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	7d1b      	ldrb	r3, [r3, #20]
 8011b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b78:	b2da      	uxtb	r2, r3
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011b7e:	693a      	ldr	r2, [r7, #16]
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	69db      	ldr	r3, [r3, #28]
 8011b84:	4619      	mov	r1, r3
 8011b86:	4610      	mov	r0, r2
 8011b88:	f7fd fb72 	bl	800f270 <clust2sect>
 8011b8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d109      	bne.n	8011ba8 <f_write+0x1be>
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2202      	movs	r2, #2
 8011b98:	755a      	strb	r2, [r3, #21]
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	2102      	movs	r1, #2
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fd f8fe 	bl	800eda0 <unlock_fs>
 8011ba4:	2302      	movs	r3, #2
 8011ba6:	e0c0      	b.n	8011d2a <f_write+0x340>
			sect += csect;
 8011ba8:	697a      	ldr	r2, [r7, #20]
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	4413      	add	r3, r2
 8011bae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	0a5b      	lsrs	r3, r3, #9
 8011bb4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011bb6:	6a3b      	ldr	r3, [r7, #32]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d041      	beq.n	8011c40 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011bbc:	69ba      	ldr	r2, [r7, #24]
 8011bbe:	6a3b      	ldr	r3, [r7, #32]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	693a      	ldr	r2, [r7, #16]
 8011bc4:	8952      	ldrh	r2, [r2, #10]
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	d905      	bls.n	8011bd6 <f_write+0x1ec>
					cc = fs->csize - csect;
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	895b      	ldrh	r3, [r3, #10]
 8011bce:	461a      	mov	r2, r3
 8011bd0:	69bb      	ldr	r3, [r7, #24]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	7858      	ldrb	r0, [r3, #1]
 8011bda:	6a3b      	ldr	r3, [r7, #32]
 8011bdc:	697a      	ldr	r2, [r7, #20]
 8011bde:	69f9      	ldr	r1, [r7, #28]
 8011be0:	f7fc ff8a 	bl	800eaf8 <disk_write>
 8011be4:	4603      	mov	r3, r0
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d009      	beq.n	8011bfe <f_write+0x214>
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2201      	movs	r2, #1
 8011bee:	755a      	strb	r2, [r3, #21]
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	2101      	movs	r1, #1
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7fd f8d3 	bl	800eda0 <unlock_fs>
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e095      	b.n	8011d2a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	6a1a      	ldr	r2, [r3, #32]
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	1ad3      	subs	r3, r2, r3
 8011c06:	6a3a      	ldr	r2, [r7, #32]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d915      	bls.n	8011c38 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	6a1a      	ldr	r2, [r3, #32]
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	1ad3      	subs	r3, r2, r3
 8011c1a:	025b      	lsls	r3, r3, #9
 8011c1c:	69fa      	ldr	r2, [r7, #28]
 8011c1e:	4413      	add	r3, r2
 8011c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c24:	4619      	mov	r1, r3
 8011c26:	f7fd f827 	bl	800ec78 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	7d1b      	ldrb	r3, [r3, #20]
 8011c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c32:	b2da      	uxtb	r2, r3
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011c38:	6a3b      	ldr	r3, [r7, #32]
 8011c3a:	025b      	lsls	r3, r3, #9
 8011c3c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011c3e:	e044      	b.n	8011cca <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6a1b      	ldr	r3, [r3, #32]
 8011c44:	697a      	ldr	r2, [r7, #20]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d01b      	beq.n	8011c82 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	699a      	ldr	r2, [r3, #24]
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d215      	bcs.n	8011c82 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	7858      	ldrb	r0, [r3, #1]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c60:	2301      	movs	r3, #1
 8011c62:	697a      	ldr	r2, [r7, #20]
 8011c64:	f7fc ff28 	bl	800eab8 <disk_read>
 8011c68:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d009      	beq.n	8011c82 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	2201      	movs	r2, #1
 8011c72:	755a      	strb	r2, [r3, #21]
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	2101      	movs	r1, #1
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fd f891 	bl	800eda0 <unlock_fs>
 8011c7e:	2301      	movs	r3, #1
 8011c80:	e053      	b.n	8011d2a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	697a      	ldr	r2, [r7, #20]
 8011c86:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	699b      	ldr	r3, [r3, #24]
 8011c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c90:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011c94:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d901      	bls.n	8011ca2 <f_write+0x2b8>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	699b      	ldr	r3, [r3, #24]
 8011cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cb0:	4413      	add	r3, r2
 8011cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cb4:	69f9      	ldr	r1, [r7, #28]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fc ffde 	bl	800ec78 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	7d1b      	ldrb	r3, [r3, #20]
 8011cc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011cca:	69fa      	ldr	r2, [r7, #28]
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cce:	4413      	add	r3, r2
 8011cd0:	61fb      	str	r3, [r7, #28]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	699a      	ldr	r2, [r3, #24]
 8011cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd8:	441a      	add	r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	619a      	str	r2, [r3, #24]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	68da      	ldr	r2, [r3, #12]
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	699b      	ldr	r3, [r3, #24]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	bf38      	it	cc
 8011cea:	461a      	movcc	r2, r3
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	60da      	str	r2, [r3, #12]
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf6:	441a      	add	r2, r3
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	601a      	str	r2, [r3, #0]
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d00:	1ad3      	subs	r3, r2, r3
 8011d02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f47f aeb6 	bne.w	8011a78 <f_write+0x8e>
 8011d0c:	e000      	b.n	8011d10 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011d0e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	7d1b      	ldrb	r3, [r3, #20]
 8011d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d18:	b2da      	uxtb	r2, r3
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	2100      	movs	r1, #0
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fd f83c 	bl	800eda0 <unlock_fs>
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3730      	adds	r7, #48	@ 0x30
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b086      	sub	sp, #24
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f107 0208 	add.w	r2, r7, #8
 8011d40:	4611      	mov	r1, r2
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7ff f97c 	bl	8011040 <validate>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d4c:	7dfb      	ldrb	r3, [r7, #23]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d16d      	bne.n	8011e2e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	7d1b      	ldrb	r3, [r3, #20]
 8011d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d067      	beq.n	8011e2e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	7d1b      	ldrb	r3, [r3, #20]
 8011d62:	b25b      	sxtb	r3, r3
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	da1a      	bge.n	8011d9e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	7858      	ldrb	r0, [r3, #1]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6a1a      	ldr	r2, [r3, #32]
 8011d76:	2301      	movs	r3, #1
 8011d78:	f7fc febe 	bl	800eaf8 <disk_write>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d006      	beq.n	8011d90 <f_sync+0x5e>
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	2101      	movs	r1, #1
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7fd f80a 	bl	800eda0 <unlock_fs>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e055      	b.n	8011e3c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	7d1b      	ldrb	r3, [r3, #20]
 8011d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011d9e:	f7fc f907 	bl	800dfb0 <get_fattime>
 8011da2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011da4:	68ba      	ldr	r2, [r7, #8]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011daa:	4619      	mov	r1, r3
 8011dac:	4610      	mov	r0, r2
 8011dae:	f7fd f9c3 	bl	800f138 <move_window>
 8011db2:	4603      	mov	r3, r0
 8011db4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011db6:	7dfb      	ldrb	r3, [r7, #23]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d138      	bne.n	8011e2e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dc0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	330b      	adds	r3, #11
 8011dc6:	781a      	ldrb	r2, [r3, #0]
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	330b      	adds	r3, #11
 8011dcc:	f042 0220 	orr.w	r2, r2, #32
 8011dd0:	b2d2      	uxtb	r2, r2
 8011dd2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6818      	ldr	r0, [r3, #0]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	461a      	mov	r2, r3
 8011dde:	68f9      	ldr	r1, [r7, #12]
 8011de0:	f7fd fecd 	bl	800fb7e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f103 021c 	add.w	r2, r3, #28
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	4619      	mov	r1, r3
 8011df0:	4610      	mov	r0, r2
 8011df2:	f7fc ff15 	bl	800ec20 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	3316      	adds	r3, #22
 8011dfa:	6939      	ldr	r1, [r7, #16]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7fc ff0f 	bl	800ec20 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	3312      	adds	r3, #18
 8011e06:	2100      	movs	r1, #0
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7fc feee 	bl	800ebea <st_word>
					fs->wflag = 1;
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	2201      	movs	r2, #1
 8011e12:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fd f9bc 	bl	800f194 <sync_fs>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	7d1b      	ldrb	r3, [r3, #20]
 8011e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e28:	b2da      	uxtb	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	7dfa      	ldrb	r2, [r7, #23]
 8011e32:	4611      	mov	r1, r2
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7fc ffb3 	bl	800eda0 <unlock_fs>
 8011e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3718      	adds	r7, #24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b084      	sub	sp, #16
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f7ff ff70 	bl	8011d32 <f_sync>
 8011e52:	4603      	mov	r3, r0
 8011e54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011e56:	7bfb      	ldrb	r3, [r7, #15]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d11d      	bne.n	8011e98 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f107 0208 	add.w	r2, r7, #8
 8011e62:	4611      	mov	r1, r2
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7ff f8eb 	bl	8011040 <validate>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011e6e:	7bfb      	ldrb	r3, [r7, #15]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d111      	bne.n	8011e98 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7fd f8b9 	bl	800eff0 <dec_lock>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011e82:	7bfb      	ldrb	r3, [r7, #15]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d102      	bne.n	8011e8e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	2100      	movs	r1, #0
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fc ff84 	bl	800eda0 <unlock_fs>
#endif
		}
	}
	return res;
 8011e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011eae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011eb2:	6018      	str	r0, [r3, #0]
 8011eb4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011eb8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8011ebc:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011ebe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011ec2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d101      	bne.n	8011ed0 <f_opendir+0x2e>
 8011ecc:	2309      	movs	r3, #9
 8011ece:	e0a8      	b.n	8012022 <f_opendir+0x180>

	/* Get logical drive */
	obj = &dp->obj;
 8011ed0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011ed4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 8011ede:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8011ee2:	463b      	mov	r3, r7
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe fe56 	bl	8010b98 <find_volume>
 8011eec:	4603      	mov	r3, r0
 8011eee:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8011ef2:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f040 8081 	bne.w	8011ffe <f_opendir+0x15c>
		obj->fs = fs;
 8011efc:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8011f00:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011f04:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8011f06:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011f0a:	f107 020c 	add.w	r2, r7, #12
 8011f0e:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011f10:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f14:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f1e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011f22:	4611      	mov	r1, r2
 8011f24:	6818      	ldr	r0, [r3, #0]
 8011f26:	f7fe fd2b 	bl	8010980 <follow_path>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 8011f30:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d15b      	bne.n	8011ff0 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011f38:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f3c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011f46:	b25b      	sxtb	r3, r3
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	db1a      	blt.n	8011f82 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011f4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011f50:	799b      	ldrb	r3, [r3, #6]
 8011f52:	f003 0310 	and.w	r3, r3, #16
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d010      	beq.n	8011f7c <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011f5a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8011f5e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f62:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	6a1b      	ldr	r3, [r3, #32]
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	4610      	mov	r0, r2
 8011f6e:	f7fd fde7 	bl	800fb40 <ld_clust>
 8011f72:	4602      	mov	r2, r0
 8011f74:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011f78:	609a      	str	r2, [r3, #8]
 8011f7a:	e002      	b.n	8011f82 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011f7c:	2305      	movs	r3, #5
 8011f7e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 8011f82:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d132      	bne.n	8011ff0 <f_opendir+0x14e>
				obj->id = fs->id;
 8011f8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011f8e:	88da      	ldrh	r2, [r3, #6]
 8011f90:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011f94:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011f96:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f9a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011f9e:	2100      	movs	r1, #0
 8011fa0:	6818      	ldr	r0, [r3, #0]
 8011fa2:	f7fd fc46 	bl	800f832 <dir_sdi>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011fac:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d11d      	bne.n	8011ff0 <f_opendir+0x14e>
					if (obj->sclust) {
 8011fb4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d014      	beq.n	8011fe8 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011fbe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011fc2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011fc6:	2100      	movs	r1, #0
 8011fc8:	6818      	ldr	r0, [r3, #0]
 8011fca:	f7fc ff83 	bl	800eed4 <inc_lock>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011fd4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011fd6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011fda:	691b      	ldr	r3, [r3, #16]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d107      	bne.n	8011ff0 <f_opendir+0x14e>
 8011fe0:	2312      	movs	r3, #18
 8011fe2:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8011fe6:	e003      	b.n	8011ff0 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011fe8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011fec:	2200      	movs	r2, #0
 8011fee:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011ff0:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011ff4:	2b04      	cmp	r3, #4
 8011ff6:	d102      	bne.n	8011ffe <f_opendir+0x15c>
 8011ff8:	2305      	movs	r3, #5
 8011ffa:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011ffe:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8012002:	2b00      	cmp	r3, #0
 8012004:	d003      	beq.n	801200e <f_opendir+0x16c>
 8012006:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801200a:	2200      	movs	r2, #0
 801200c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801200e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8012012:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8012016:	4611      	mov	r1, r2
 8012018:	4618      	mov	r0, r3
 801201a:	f7fc fec1 	bl	800eda0 <unlock_fs>
 801201e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 8012022:	4618      	mov	r0, r3
 8012024:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b084      	sub	sp, #16
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f107 0208 	add.w	r2, r7, #8
 801203a:	4611      	mov	r1, r2
 801203c:	4618      	mov	r0, r3
 801203e:	f7fe ffff 	bl	8011040 <validate>
 8012042:	4603      	mov	r3, r0
 8012044:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012046:	7bfb      	ldrb	r3, [r7, #15]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d115      	bne.n	8012078 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	691b      	ldr	r3, [r3, #16]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d006      	beq.n	8012062 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	4618      	mov	r0, r3
 801205a:	f7fc ffc9 	bl	800eff0 <dec_lock>
 801205e:	4603      	mov	r3, r0
 8012060:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012062:	7bfb      	ldrb	r3, [r7, #15]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d102      	bne.n	801206e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2200      	movs	r2, #0
 801206c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	2100      	movs	r1, #0
 8012072:	4618      	mov	r0, r3
 8012074:	f7fc fe94 	bl	800eda0 <unlock_fs>
#endif
	}
	return res;
 8012078:	7bfb      	ldrb	r3, [r7, #15]
}
 801207a:	4618      	mov	r0, r3
 801207c:	3710      	adds	r7, #16
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012082:	b580      	push	{r7, lr}
 8012084:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8012088:	af00      	add	r7, sp, #0
 801208a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801208e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8012092:	6018      	str	r0, [r3, #0]
 8012094:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8012098:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801209c:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801209e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80120a2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80120ac:	4611      	mov	r1, r2
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe ffc6 	bl	8011040 <validate>
 80120b4:	4603      	mov	r3, r0
 80120b6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 80120ba:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d14b      	bne.n	801215a <f_readdir+0xd8>
		if (!fno) {
 80120c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80120c6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d10b      	bne.n	80120e8 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80120d0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80120d4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80120d8:	2100      	movs	r1, #0
 80120da:	6818      	ldr	r0, [r3, #0]
 80120dc:	f7fd fba9 	bl	800f832 <dir_sdi>
 80120e0:	4603      	mov	r3, r0
 80120e2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80120e6:	e038      	b.n	801215a <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 80120e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80120ec:	f107 0208 	add.w	r2, r7, #8
 80120f0:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 80120f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80120f6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80120fa:	2100      	movs	r1, #0
 80120fc:	6818      	ldr	r0, [r3, #0]
 80120fe:	f7fd ff4a 	bl	800ff96 <dir_read>
 8012102:	4603      	mov	r3, r0
 8012104:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012108:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801210c:	2b04      	cmp	r3, #4
 801210e:	d102      	bne.n	8012116 <f_readdir+0x94>
 8012110:	2300      	movs	r3, #0
 8012112:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8012116:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801211a:	2b00      	cmp	r3, #0
 801211c:	d11d      	bne.n	801215a <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 801211e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8012122:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8012126:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801212a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801212e:	6811      	ldr	r1, [r2, #0]
 8012130:	6818      	ldr	r0, [r3, #0]
 8012132:	f7fe f98f 	bl	8010454 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012136:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801213a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801213e:	2100      	movs	r1, #0
 8012140:	6818      	ldr	r0, [r3, #0]
 8012142:	f7fd fbf1 	bl	800f928 <dir_next>
 8012146:	4603      	mov	r3, r0
 8012148:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801214c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8012150:	2b04      	cmp	r3, #4
 8012152:	d102      	bne.n	801215a <f_readdir+0xd8>
 8012154:	2300      	movs	r3, #0
 8012156:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801215a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801215e:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 8012162:	4611      	mov	r1, r2
 8012164:	4618      	mov	r0, r3
 8012166:	f7fc fe1b 	bl	800eda0 <unlock_fs>
 801216a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 801216e:	4618      	mov	r0, r3
 8012170:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b088      	sub	sp, #32
 801217c:	af00      	add	r7, sp, #0
 801217e:	60f8      	str	r0, [r7, #12]
 8012180:	60b9      	str	r1, [r7, #8]
 8012182:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801218c:	e01c      	b.n	80121c8 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801218e:	f107 0310 	add.w	r3, r7, #16
 8012192:	f107 0114 	add.w	r1, r7, #20
 8012196:	2201      	movs	r2, #1
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f7ff fab8 	bl	801170e <f_read>
		if (rc != 1) break;
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d117      	bne.n	80121d4 <f_gets+0x5c>
		c = s[0];
 80121a4:	7d3b      	ldrb	r3, [r7, #20]
 80121a6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80121a8:	7dfb      	ldrb	r3, [r7, #23]
 80121aa:	2b0d      	cmp	r3, #13
 80121ac:	d00b      	beq.n	80121c6 <f_gets+0x4e>
		*p++ = c;
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	1c5a      	adds	r2, r3, #1
 80121b2:	61ba      	str	r2, [r7, #24]
 80121b4:	7dfa      	ldrb	r2, [r7, #23]
 80121b6:	701a      	strb	r2, [r3, #0]
		n++;
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	3301      	adds	r3, #1
 80121bc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80121be:	7dfb      	ldrb	r3, [r7, #23]
 80121c0:	2b0a      	cmp	r3, #10
 80121c2:	d009      	beq.n	80121d8 <f_gets+0x60>
 80121c4:	e000      	b.n	80121c8 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80121c6:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	3b01      	subs	r3, #1
 80121cc:	69fa      	ldr	r2, [r7, #28]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	dbdd      	blt.n	801218e <f_gets+0x16>
 80121d2:	e002      	b.n	80121da <f_gets+0x62>
		if (rc != 1) break;
 80121d4:	bf00      	nop
 80121d6:	e000      	b.n	80121da <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80121d8:	bf00      	nop
	}
	*p = 0;
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	2200      	movs	r2, #0
 80121de:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d001      	beq.n	80121ea <f_gets+0x72>
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	e000      	b.n	80121ec <f_gets+0x74>
 80121ea:	2300      	movs	r3, #0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3720      	adds	r7, #32
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b087      	sub	sp, #28
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	60f8      	str	r0, [r7, #12]
 80121fc:	60b9      	str	r1, [r7, #8]
 80121fe:	4613      	mov	r3, r2
 8012200:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012202:	2301      	movs	r3, #1
 8012204:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012206:	2300      	movs	r3, #0
 8012208:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801220a:	4b1f      	ldr	r3, [pc, #124]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 801220c:	7a5b      	ldrb	r3, [r3, #9]
 801220e:	b2db      	uxtb	r3, r3
 8012210:	2b00      	cmp	r3, #0
 8012212:	d131      	bne.n	8012278 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012214:	4b1c      	ldr	r3, [pc, #112]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 8012216:	7a5b      	ldrb	r3, [r3, #9]
 8012218:	b2db      	uxtb	r3, r3
 801221a:	461a      	mov	r2, r3
 801221c:	4b1a      	ldr	r3, [pc, #104]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 801221e:	2100      	movs	r1, #0
 8012220:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012222:	4b19      	ldr	r3, [pc, #100]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 8012224:	7a5b      	ldrb	r3, [r3, #9]
 8012226:	b2db      	uxtb	r3, r3
 8012228:	4a17      	ldr	r2, [pc, #92]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	4413      	add	r3, r2
 801222e:	68fa      	ldr	r2, [r7, #12]
 8012230:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012232:	4b15      	ldr	r3, [pc, #84]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 8012234:	7a5b      	ldrb	r3, [r3, #9]
 8012236:	b2db      	uxtb	r3, r3
 8012238:	461a      	mov	r2, r3
 801223a:	4b13      	ldr	r3, [pc, #76]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 801223c:	4413      	add	r3, r2
 801223e:	79fa      	ldrb	r2, [r7, #7]
 8012240:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012242:	4b11      	ldr	r3, [pc, #68]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 8012244:	7a5b      	ldrb	r3, [r3, #9]
 8012246:	b2db      	uxtb	r3, r3
 8012248:	1c5a      	adds	r2, r3, #1
 801224a:	b2d1      	uxtb	r1, r2
 801224c:	4a0e      	ldr	r2, [pc, #56]	@ (8012288 <FATFS_LinkDriverEx+0x94>)
 801224e:	7251      	strb	r1, [r2, #9]
 8012250:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012252:	7dbb      	ldrb	r3, [r7, #22]
 8012254:	3330      	adds	r3, #48	@ 0x30
 8012256:	b2da      	uxtb	r2, r3
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	3301      	adds	r3, #1
 8012260:	223a      	movs	r2, #58	@ 0x3a
 8012262:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	3302      	adds	r3, #2
 8012268:	222f      	movs	r2, #47	@ 0x2f
 801226a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	3303      	adds	r3, #3
 8012270:	2200      	movs	r2, #0
 8012272:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012274:	2300      	movs	r3, #0
 8012276:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012278:	7dfb      	ldrb	r3, [r7, #23]
}
 801227a:	4618      	mov	r0, r3
 801227c:	371c      	adds	r7, #28
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr
 8012286:	bf00      	nop
 8012288:	2000c2b8 	.word	0x2000c2b8

0801228c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012296:	2200      	movs	r2, #0
 8012298:	6839      	ldr	r1, [r7, #0]
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f7ff ffaa 	bl	80121f4 <FATFS_LinkDriverEx>
 80122a0:	4603      	mov	r3, r0
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3708      	adds	r7, #8
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
	...

080122ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80122ac:	b480      	push	{r7}
 80122ae:	b085      	sub	sp, #20
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	4603      	mov	r3, r0
 80122b4:	6039      	str	r1, [r7, #0]
 80122b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80122b8:	88fb      	ldrh	r3, [r7, #6]
 80122ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80122bc:	d802      	bhi.n	80122c4 <ff_convert+0x18>
		c = chr;
 80122be:	88fb      	ldrh	r3, [r7, #6]
 80122c0:	81fb      	strh	r3, [r7, #14]
 80122c2:	e025      	b.n	8012310 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d00b      	beq.n	80122e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80122ca:	88fb      	ldrh	r3, [r7, #6]
 80122cc:	2bff      	cmp	r3, #255	@ 0xff
 80122ce:	d805      	bhi.n	80122dc <ff_convert+0x30>
 80122d0:	88fb      	ldrh	r3, [r7, #6]
 80122d2:	3b80      	subs	r3, #128	@ 0x80
 80122d4:	4a12      	ldr	r2, [pc, #72]	@ (8012320 <ff_convert+0x74>)
 80122d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122da:	e000      	b.n	80122de <ff_convert+0x32>
 80122dc:	2300      	movs	r3, #0
 80122de:	81fb      	strh	r3, [r7, #14]
 80122e0:	e016      	b.n	8012310 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80122e2:	2300      	movs	r3, #0
 80122e4:	81fb      	strh	r3, [r7, #14]
 80122e6:	e009      	b.n	80122fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80122e8:	89fb      	ldrh	r3, [r7, #14]
 80122ea:	4a0d      	ldr	r2, [pc, #52]	@ (8012320 <ff_convert+0x74>)
 80122ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122f0:	88fa      	ldrh	r2, [r7, #6]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d006      	beq.n	8012304 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80122f6:	89fb      	ldrh	r3, [r7, #14]
 80122f8:	3301      	adds	r3, #1
 80122fa:	81fb      	strh	r3, [r7, #14]
 80122fc:	89fb      	ldrh	r3, [r7, #14]
 80122fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8012300:	d9f2      	bls.n	80122e8 <ff_convert+0x3c>
 8012302:	e000      	b.n	8012306 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012304:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012306:	89fb      	ldrh	r3, [r7, #14]
 8012308:	3380      	adds	r3, #128	@ 0x80
 801230a:	b29b      	uxth	r3, r3
 801230c:	b2db      	uxtb	r3, r3
 801230e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012310:	89fb      	ldrh	r3, [r7, #14]
}
 8012312:	4618      	mov	r0, r3
 8012314:	3714      	adds	r7, #20
 8012316:	46bd      	mov	sp, r7
 8012318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	08018c08 	.word	0x08018c08

08012324 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012324:	b480      	push	{r7}
 8012326:	b087      	sub	sp, #28
 8012328:	af00      	add	r7, sp, #0
 801232a:	4603      	mov	r3, r0
 801232c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801232e:	88fb      	ldrh	r3, [r7, #6]
 8012330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012334:	d201      	bcs.n	801233a <ff_wtoupper+0x16>
 8012336:	4b3e      	ldr	r3, [pc, #248]	@ (8012430 <ff_wtoupper+0x10c>)
 8012338:	e000      	b.n	801233c <ff_wtoupper+0x18>
 801233a:	4b3e      	ldr	r3, [pc, #248]	@ (8012434 <ff_wtoupper+0x110>)
 801233c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	1c9a      	adds	r2, r3, #2
 8012342:	617a      	str	r2, [r7, #20]
 8012344:	881b      	ldrh	r3, [r3, #0]
 8012346:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012348:	8a7b      	ldrh	r3, [r7, #18]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d068      	beq.n	8012420 <ff_wtoupper+0xfc>
 801234e:	88fa      	ldrh	r2, [r7, #6]
 8012350:	8a7b      	ldrh	r3, [r7, #18]
 8012352:	429a      	cmp	r2, r3
 8012354:	d364      	bcc.n	8012420 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	1c9a      	adds	r2, r3, #2
 801235a:	617a      	str	r2, [r7, #20]
 801235c:	881b      	ldrh	r3, [r3, #0]
 801235e:	823b      	strh	r3, [r7, #16]
 8012360:	8a3b      	ldrh	r3, [r7, #16]
 8012362:	0a1b      	lsrs	r3, r3, #8
 8012364:	81fb      	strh	r3, [r7, #14]
 8012366:	8a3b      	ldrh	r3, [r7, #16]
 8012368:	b2db      	uxtb	r3, r3
 801236a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801236c:	88fa      	ldrh	r2, [r7, #6]
 801236e:	8a79      	ldrh	r1, [r7, #18]
 8012370:	8a3b      	ldrh	r3, [r7, #16]
 8012372:	440b      	add	r3, r1
 8012374:	429a      	cmp	r2, r3
 8012376:	da49      	bge.n	801240c <ff_wtoupper+0xe8>
			switch (cmd) {
 8012378:	89fb      	ldrh	r3, [r7, #14]
 801237a:	2b08      	cmp	r3, #8
 801237c:	d84f      	bhi.n	801241e <ff_wtoupper+0xfa>
 801237e:	a201      	add	r2, pc, #4	@ (adr r2, 8012384 <ff_wtoupper+0x60>)
 8012380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012384:	080123a9 	.word	0x080123a9
 8012388:	080123bb 	.word	0x080123bb
 801238c:	080123d1 	.word	0x080123d1
 8012390:	080123d9 	.word	0x080123d9
 8012394:	080123e1 	.word	0x080123e1
 8012398:	080123e9 	.word	0x080123e9
 801239c:	080123f1 	.word	0x080123f1
 80123a0:	080123f9 	.word	0x080123f9
 80123a4:	08012401 	.word	0x08012401
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80123a8:	88fa      	ldrh	r2, [r7, #6]
 80123aa:	8a7b      	ldrh	r3, [r7, #18]
 80123ac:	1ad3      	subs	r3, r2, r3
 80123ae:	005b      	lsls	r3, r3, #1
 80123b0:	697a      	ldr	r2, [r7, #20]
 80123b2:	4413      	add	r3, r2
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	80fb      	strh	r3, [r7, #6]
 80123b8:	e027      	b.n	801240a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80123ba:	88fa      	ldrh	r2, [r7, #6]
 80123bc:	8a7b      	ldrh	r3, [r7, #18]
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	f003 0301 	and.w	r3, r3, #1
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	88fa      	ldrh	r2, [r7, #6]
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	80fb      	strh	r3, [r7, #6]
 80123ce:	e01c      	b.n	801240a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80123d0:	88fb      	ldrh	r3, [r7, #6]
 80123d2:	3b10      	subs	r3, #16
 80123d4:	80fb      	strh	r3, [r7, #6]
 80123d6:	e018      	b.n	801240a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80123d8:	88fb      	ldrh	r3, [r7, #6]
 80123da:	3b20      	subs	r3, #32
 80123dc:	80fb      	strh	r3, [r7, #6]
 80123de:	e014      	b.n	801240a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80123e0:	88fb      	ldrh	r3, [r7, #6]
 80123e2:	3b30      	subs	r3, #48	@ 0x30
 80123e4:	80fb      	strh	r3, [r7, #6]
 80123e6:	e010      	b.n	801240a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80123e8:	88fb      	ldrh	r3, [r7, #6]
 80123ea:	3b1a      	subs	r3, #26
 80123ec:	80fb      	strh	r3, [r7, #6]
 80123ee:	e00c      	b.n	801240a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80123f0:	88fb      	ldrh	r3, [r7, #6]
 80123f2:	3308      	adds	r3, #8
 80123f4:	80fb      	strh	r3, [r7, #6]
 80123f6:	e008      	b.n	801240a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80123f8:	88fb      	ldrh	r3, [r7, #6]
 80123fa:	3b50      	subs	r3, #80	@ 0x50
 80123fc:	80fb      	strh	r3, [r7, #6]
 80123fe:	e004      	b.n	801240a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012400:	88fb      	ldrh	r3, [r7, #6]
 8012402:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012406:	80fb      	strh	r3, [r7, #6]
 8012408:	bf00      	nop
			}
			break;
 801240a:	e008      	b.n	801241e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801240c:	89fb      	ldrh	r3, [r7, #14]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d195      	bne.n	801233e <ff_wtoupper+0x1a>
 8012412:	8a3b      	ldrh	r3, [r7, #16]
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	697a      	ldr	r2, [r7, #20]
 8012418:	4413      	add	r3, r2
 801241a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801241c:	e78f      	b.n	801233e <ff_wtoupper+0x1a>
			break;
 801241e:	bf00      	nop
	}

	return chr;
 8012420:	88fb      	ldrh	r3, [r7, #6]
}
 8012422:	4618      	mov	r0, r3
 8012424:	371c      	adds	r7, #28
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	08018d08 	.word	0x08018d08
 8012434:	08018efc 	.word	0x08018efc

08012438 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b086      	sub	sp, #24
 801243c:	af00      	add	r7, sp, #0
 801243e:	4603      	mov	r3, r0
 8012440:	6039      	str	r1, [r7, #0]
 8012442:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8012444:	2300      	movs	r3, #0
 8012446:	60fb      	str	r3, [r7, #12]
 8012448:	2300      	movs	r3, #0
 801244a:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801244c:	f107 030c 	add.w	r3, r7, #12
 8012450:	2101      	movs	r1, #1
 8012452:	4618      	mov	r0, r3
 8012454:	f000 f869 	bl	801252a <osSemaphoreCreate>
 8012458:	4602      	mov	r2, r0
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	bf14      	ite	ne
 8012466:	2301      	movne	r3, #1
 8012468:	2300      	moveq	r3, #0
 801246a:	b2db      	uxtb	r3, r3
 801246c:	617b      	str	r3, [r7, #20]

    return ret;
 801246e:	697b      	ldr	r3, [r7, #20]
}
 8012470:	4618      	mov	r0, r3
 8012472:	3718      	adds	r7, #24
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f000 f909 	bl	8012698 <osSemaphoreDelete>
#endif
    return 1;
 8012486:	2301      	movs	r3, #1
}
 8012488:	4618      	mov	r0, r3
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012498:	2300      	movs	r3, #0
 801249a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801249c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f000 f875 	bl	8012590 <osSemaphoreWait>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d101      	bne.n	80124b0 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80124ac:	2301      	movs	r3, #1
 80124ae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80124b0:	68fb      	ldr	r3, [r7, #12]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b082      	sub	sp, #8
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f8b2 	bl	801262c <osSemaphoreRelease>
#endif
}
 80124c8:	bf00      	nop
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80124d0:	b480      	push	{r7}
 80124d2:	b083      	sub	sp, #12
 80124d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124d6:	f3ef 8305 	mrs	r3, IPSR
 80124da:	607b      	str	r3, [r7, #4]
  return(result);
 80124dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80124de:	2b00      	cmp	r3, #0
 80124e0:	bf14      	ite	ne
 80124e2:	2301      	movne	r3, #1
 80124e4:	2300      	moveq	r3, #0
 80124e6:	b2db      	uxtb	r3, r3
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	370c      	adds	r7, #12
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80124f8:	f001 fc50 	bl	8013d9c <vTaskStartScheduler>
  
  return osOK;
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	bd80      	pop	{r7, pc}

08012502 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012502:	b580      	push	{r7, lr}
 8012504:	b084      	sub	sp, #16
 8012506:	af00      	add	r7, sp, #0
 8012508:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d001      	beq.n	8012518 <osDelay+0x16>
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	e000      	b.n	801251a <osDelay+0x18>
 8012518:	2301      	movs	r3, #1
 801251a:	4618      	mov	r0, r3
 801251c:	f001 fc06 	bl	8013d2c <vTaskDelay>
  
  return osOK;
 8012520:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012522:	4618      	mov	r0, r3
 8012524:	3710      	adds	r7, #16
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801252a:	b580      	push	{r7, lr}
 801252c:	b086      	sub	sp, #24
 801252e:	af02      	add	r7, sp, #8
 8012530:	6078      	str	r0, [r7, #4]
 8012532:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00f      	beq.n	801255c <osSemaphoreCreate+0x32>
    if (count == 1) {
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	2b01      	cmp	r3, #1
 8012540:	d10a      	bne.n	8012558 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	2203      	movs	r2, #3
 8012548:	9200      	str	r2, [sp, #0]
 801254a:	2200      	movs	r2, #0
 801254c:	2100      	movs	r1, #0
 801254e:	2001      	movs	r0, #1
 8012550:	f000 fb7c 	bl	8012c4c <xQueueGenericCreateStatic>
 8012554:	4603      	mov	r3, r0
 8012556:	e016      	b.n	8012586 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012558:	2300      	movs	r3, #0
 801255a:	e014      	b.n	8012586 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	2b01      	cmp	r3, #1
 8012560:	d110      	bne.n	8012584 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012562:	2203      	movs	r2, #3
 8012564:	2100      	movs	r1, #0
 8012566:	2001      	movs	r0, #1
 8012568:	f000 fbf7 	bl	8012d5a <xQueueGenericCreate>
 801256c:	60f8      	str	r0, [r7, #12]
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d005      	beq.n	8012580 <osSemaphoreCreate+0x56>
 8012574:	2300      	movs	r3, #0
 8012576:	2200      	movs	r2, #0
 8012578:	2100      	movs	r1, #0
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f000 fc86 	bl	8012e8c <xQueueGenericSend>
      return sema;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	e000      	b.n	8012586 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8012584:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012586:	4618      	mov	r0, r3
 8012588:	3710      	adds	r7, #16
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
	...

08012590 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801259a:	2300      	movs	r3, #0
 801259c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d101      	bne.n	80125a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80125a4:	2380      	movs	r3, #128	@ 0x80
 80125a6:	e03a      	b.n	801261e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80125a8:	2300      	movs	r3, #0
 80125aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b2:	d103      	bne.n	80125bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80125b4:	f04f 33ff 	mov.w	r3, #4294967295
 80125b8:	60fb      	str	r3, [r7, #12]
 80125ba:	e009      	b.n	80125d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d006      	beq.n	80125d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d101      	bne.n	80125d0 <osSemaphoreWait+0x40>
      ticks = 1;
 80125cc:	2301      	movs	r3, #1
 80125ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80125d0:	f7ff ff7e 	bl	80124d0 <inHandlerMode>
 80125d4:	4603      	mov	r3, r0
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d017      	beq.n	801260a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80125da:	f107 0308 	add.w	r3, r7, #8
 80125de:	461a      	mov	r2, r3
 80125e0:	2100      	movs	r1, #0
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 fff4 	bl	80135d0 <xQueueReceiveFromISR>
 80125e8:	4603      	mov	r3, r0
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	d001      	beq.n	80125f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80125ee:	23ff      	movs	r3, #255	@ 0xff
 80125f0:	e015      	b.n	801261e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d011      	beq.n	801261c <osSemaphoreWait+0x8c>
 80125f8:	4b0b      	ldr	r3, [pc, #44]	@ (8012628 <osSemaphoreWait+0x98>)
 80125fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125fe:	601a      	str	r2, [r3, #0]
 8012600:	f3bf 8f4f 	dsb	sy
 8012604:	f3bf 8f6f 	isb	sy
 8012608:	e008      	b.n	801261c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801260a:	68f9      	ldr	r1, [r7, #12]
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 fec7 	bl	80133a0 <xQueueSemaphoreTake>
 8012612:	4603      	mov	r3, r0
 8012614:	2b01      	cmp	r3, #1
 8012616:	d001      	beq.n	801261c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012618:	23ff      	movs	r3, #255	@ 0xff
 801261a:	e000      	b.n	801261e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801261c:	2300      	movs	r3, #0
}
 801261e:	4618      	mov	r0, r3
 8012620:	3710      	adds	r7, #16
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	e000ed04 	.word	0xe000ed04

0801262c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b084      	sub	sp, #16
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012634:	2300      	movs	r3, #0
 8012636:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012638:	2300      	movs	r3, #0
 801263a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801263c:	f7ff ff48 	bl	80124d0 <inHandlerMode>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d016      	beq.n	8012674 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012646:	f107 0308 	add.w	r3, r7, #8
 801264a:	4619      	mov	r1, r3
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 fd27 	bl	80130a0 <xQueueGiveFromISR>
 8012652:	4603      	mov	r3, r0
 8012654:	2b01      	cmp	r3, #1
 8012656:	d001      	beq.n	801265c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012658:	23ff      	movs	r3, #255	@ 0xff
 801265a:	e017      	b.n	801268c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d013      	beq.n	801268a <osSemaphoreRelease+0x5e>
 8012662:	4b0c      	ldr	r3, [pc, #48]	@ (8012694 <osSemaphoreRelease+0x68>)
 8012664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012668:	601a      	str	r2, [r3, #0]
 801266a:	f3bf 8f4f 	dsb	sy
 801266e:	f3bf 8f6f 	isb	sy
 8012672:	e00a      	b.n	801268a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012674:	2300      	movs	r3, #0
 8012676:	2200      	movs	r2, #0
 8012678:	2100      	movs	r1, #0
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 fc06 	bl	8012e8c <xQueueGenericSend>
 8012680:	4603      	mov	r3, r0
 8012682:	2b01      	cmp	r3, #1
 8012684:	d001      	beq.n	801268a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012686:	23ff      	movs	r3, #255	@ 0xff
 8012688:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801268a:	68fb      	ldr	r3, [r7, #12]
}
 801268c:	4618      	mov	r0, r3
 801268e:	3710      	adds	r7, #16
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	e000ed04 	.word	0xe000ed04

08012698 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80126a0:	f7ff ff16 	bl	80124d0 <inHandlerMode>
 80126a4:	4603      	mov	r3, r0
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d001      	beq.n	80126ae <osSemaphoreDelete+0x16>
    return osErrorISR;
 80126aa:	2382      	movs	r3, #130	@ 0x82
 80126ac:	e003      	b.n	80126b6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f001 f816 	bl	80136e0 <vQueueDelete>

  return osOK; 
 80126b4:	2300      	movs	r3, #0
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3708      	adds	r7, #8
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}

080126be <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80126be:	b580      	push	{r7, lr}
 80126c0:	b082      	sub	sp, #8
 80126c2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80126c4:	2020      	movs	r0, #32
 80126c6:	f002 fd1f 	bl	8015108 <pvPortMalloc>
 80126ca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d00a      	beq.n	80126e8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2200      	movs	r2, #0
 80126d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	3304      	adds	r3, #4
 80126dc:	4618      	mov	r0, r3
 80126de:	f000 f995 	bl	8012a0c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2200      	movs	r2, #0
 80126e6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80126e8:	687b      	ldr	r3, [r7, #4]
	}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3708      	adds	r7, #8
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
	...

080126f4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b090      	sub	sp, #64	@ 0x40
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
 8012700:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801270a:	2300      	movs	r3, #0
 801270c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d10d      	bne.n	8012730 <xEventGroupWaitBits+0x3c>
	__asm volatile
 8012714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012718:	b672      	cpsid	i
 801271a:	f383 8811 	msr	BASEPRI, r3
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	b662      	cpsie	i
 8012728:	623b      	str	r3, [r7, #32]
}
 801272a:	bf00      	nop
 801272c:	bf00      	nop
 801272e:	e7fd      	b.n	801272c <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012736:	d30d      	bcc.n	8012754 <xEventGroupWaitBits+0x60>
	__asm volatile
 8012738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801273c:	b672      	cpsid	i
 801273e:	f383 8811 	msr	BASEPRI, r3
 8012742:	f3bf 8f6f 	isb	sy
 8012746:	f3bf 8f4f 	dsb	sy
 801274a:	b662      	cpsie	i
 801274c:	61fb      	str	r3, [r7, #28]
}
 801274e:	bf00      	nop
 8012750:	bf00      	nop
 8012752:	e7fd      	b.n	8012750 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d10d      	bne.n	8012776 <xEventGroupWaitBits+0x82>
	__asm volatile
 801275a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801275e:	b672      	cpsid	i
 8012760:	f383 8811 	msr	BASEPRI, r3
 8012764:	f3bf 8f6f 	isb	sy
 8012768:	f3bf 8f4f 	dsb	sy
 801276c:	b662      	cpsie	i
 801276e:	61bb      	str	r3, [r7, #24]
}
 8012770:	bf00      	nop
 8012772:	bf00      	nop
 8012774:	e7fd      	b.n	8012772 <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012776:	f002 f82d 	bl	80147d4 <xTaskGetSchedulerState>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d102      	bne.n	8012786 <xEventGroupWaitBits+0x92>
 8012780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012782:	2b00      	cmp	r3, #0
 8012784:	d101      	bne.n	801278a <xEventGroupWaitBits+0x96>
 8012786:	2301      	movs	r3, #1
 8012788:	e000      	b.n	801278c <xEventGroupWaitBits+0x98>
 801278a:	2300      	movs	r3, #0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d10d      	bne.n	80127ac <xEventGroupWaitBits+0xb8>
	__asm volatile
 8012790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012794:	b672      	cpsid	i
 8012796:	f383 8811 	msr	BASEPRI, r3
 801279a:	f3bf 8f6f 	isb	sy
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	b662      	cpsie	i
 80127a4:	617b      	str	r3, [r7, #20]
}
 80127a6:	bf00      	nop
 80127a8:	bf00      	nop
 80127aa:	e7fd      	b.n	80127a8 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 80127ac:	f001 fb5e 	bl	8013e6c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80127b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80127b6:	683a      	ldr	r2, [r7, #0]
 80127b8:	68b9      	ldr	r1, [r7, #8]
 80127ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127bc:	f000 f904 	bl	80129c8 <prvTestWaitCondition>
 80127c0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80127c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d00e      	beq.n	80127e6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80127c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80127cc:	2300      	movs	r3, #0
 80127ce:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d028      	beq.n	8012828 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80127d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	43db      	mvns	r3, r3
 80127de:	401a      	ands	r2, r3
 80127e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127e2:	601a      	str	r2, [r3, #0]
 80127e4:	e020      	b.n	8012828 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80127e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d104      	bne.n	80127f6 <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80127ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80127f0:	2301      	movs	r3, #1
 80127f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80127f4:	e018      	b.n	8012828 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d003      	beq.n	8012804 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80127fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012802:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d003      	beq.n	8012812 <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801280a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801280c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012810:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012814:	1d18      	adds	r0, r3, #4
 8012816:	68ba      	ldr	r2, [r7, #8]
 8012818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801281a:	4313      	orrs	r3, r2
 801281c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801281e:	4619      	mov	r1, r3
 8012820:	f001 fd66 	bl	80142f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012824:	2300      	movs	r3, #0
 8012826:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012828:	f001 fb2e 	bl	8013e88 <xTaskResumeAll>
 801282c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801282e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012830:	2b00      	cmp	r3, #0
 8012832:	d031      	beq.n	8012898 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 8012834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012836:	2b00      	cmp	r3, #0
 8012838:	d107      	bne.n	801284a <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 801283a:	4b1a      	ldr	r3, [pc, #104]	@ (80128a4 <xEventGroupWaitBits+0x1b0>)
 801283c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012840:	601a      	str	r2, [r3, #0]
 8012842:	f3bf 8f4f 	dsb	sy
 8012846:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801284a:	f002 f98d 	bl	8014b68 <uxTaskResetEventItemValue>
 801284e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012856:	2b00      	cmp	r3, #0
 8012858:	d11a      	bne.n	8012890 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 801285a:	f002 fb27 	bl	8014eac <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801285e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012864:	683a      	ldr	r2, [r7, #0]
 8012866:	68b9      	ldr	r1, [r7, #8]
 8012868:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801286a:	f000 f8ad 	bl	80129c8 <prvTestWaitCondition>
 801286e:	4603      	mov	r3, r0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d009      	beq.n	8012888 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d006      	beq.n	8012888 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801287a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	43db      	mvns	r3, r3
 8012882:	401a      	ands	r2, r3
 8012884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012886:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012888:	2301      	movs	r3, #1
 801288a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 801288c:	f002 fb44 	bl	8014f18 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012892:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012896:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801289a:	4618      	mov	r0, r3
 801289c:	3740      	adds	r7, #64	@ 0x40
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	e000ed04 	.word	0xe000ed04

080128a8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b08e      	sub	sp, #56	@ 0x38
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80128b2:	2300      	movs	r3, #0
 80128b4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80128ba:	2300      	movs	r3, #0
 80128bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d10d      	bne.n	80128e0 <xEventGroupSetBits+0x38>
	__asm volatile
 80128c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128c8:	b672      	cpsid	i
 80128ca:	f383 8811 	msr	BASEPRI, r3
 80128ce:	f3bf 8f6f 	isb	sy
 80128d2:	f3bf 8f4f 	dsb	sy
 80128d6:	b662      	cpsie	i
 80128d8:	613b      	str	r3, [r7, #16]
}
 80128da:	bf00      	nop
 80128dc:	bf00      	nop
 80128de:	e7fd      	b.n	80128dc <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80128e6:	d30d      	bcc.n	8012904 <xEventGroupSetBits+0x5c>
	__asm volatile
 80128e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128ec:	b672      	cpsid	i
 80128ee:	f383 8811 	msr	BASEPRI, r3
 80128f2:	f3bf 8f6f 	isb	sy
 80128f6:	f3bf 8f4f 	dsb	sy
 80128fa:	b662      	cpsie	i
 80128fc:	60fb      	str	r3, [r7, #12]
}
 80128fe:	bf00      	nop
 8012900:	bf00      	nop
 8012902:	e7fd      	b.n	8012900 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012906:	3304      	adds	r3, #4
 8012908:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801290c:	3308      	adds	r3, #8
 801290e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012910:	f001 faac 	bl	8013e6c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	431a      	orrs	r2, r3
 8012922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012924:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012926:	e03c      	b.n	80129a2 <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801292e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012934:	2300      	movs	r3, #0
 8012936:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 801293e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012946:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801294e:	2b00      	cmp	r3, #0
 8012950:	d108      	bne.n	8012964 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	69bb      	ldr	r3, [r7, #24]
 8012958:	4013      	ands	r3, r2
 801295a:	2b00      	cmp	r3, #0
 801295c:	d00b      	beq.n	8012976 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 801295e:	2301      	movs	r3, #1
 8012960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012962:	e008      	b.n	8012976 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	69bb      	ldr	r3, [r7, #24]
 801296a:	4013      	ands	r3, r2
 801296c:	69ba      	ldr	r2, [r7, #24]
 801296e:	429a      	cmp	r2, r3
 8012970:	d101      	bne.n	8012976 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012972:	2301      	movs	r3, #1
 8012974:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012978:	2b00      	cmp	r3, #0
 801297a:	d010      	beq.n	801299e <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012982:	2b00      	cmp	r3, #0
 8012984:	d003      	beq.n	801298e <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012988:	69bb      	ldr	r3, [r7, #24]
 801298a:	4313      	orrs	r3, r2
 801298c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012996:	4619      	mov	r1, r3
 8012998:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801299a:	f001 fd51 	bl	8014440 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80129a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80129a4:	6a3b      	ldr	r3, [r7, #32]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d1be      	bne.n	8012928 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80129aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129b0:	43db      	mvns	r3, r3
 80129b2:	401a      	ands	r2, r3
 80129b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129b6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80129b8:	f001 fa66 	bl	8013e88 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80129bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129be:	681b      	ldr	r3, [r3, #0]
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3738      	adds	r7, #56	@ 0x38
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80129c8:	b480      	push	{r7}
 80129ca:	b087      	sub	sp, #28
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	60b9      	str	r1, [r7, #8]
 80129d2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80129d4:	2300      	movs	r3, #0
 80129d6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d107      	bne.n	80129ee <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	4013      	ands	r3, r2
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d00a      	beq.n	80129fe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80129e8:	2301      	movs	r3, #1
 80129ea:	617b      	str	r3, [r7, #20]
 80129ec:	e007      	b.n	80129fe <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80129ee:	68fa      	ldr	r2, [r7, #12]
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	4013      	ands	r3, r2
 80129f4:	68ba      	ldr	r2, [r7, #8]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d101      	bne.n	80129fe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80129fa:	2301      	movs	r3, #1
 80129fc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80129fe:	697b      	ldr	r3, [r7, #20]
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	371c      	adds	r7, #28
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr

08012a0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b083      	sub	sp, #12
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f103 0208 	add.w	r2, r3, #8
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f04f 32ff 	mov.w	r2, #4294967295
 8012a24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f103 0208 	add.w	r2, r3, #8
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f103 0208 	add.w	r2, r3, #8
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012a40:	bf00      	nop
 8012a42:	370c      	adds	r7, #12
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2200      	movs	r2, #0
 8012a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012a5a:	bf00      	nop
 8012a5c:	370c      	adds	r7, #12
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr

08012a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012a66:	b480      	push	{r7}
 8012a68:	b085      	sub	sp, #20
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
 8012a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	689a      	ldr	r2, [r3, #8]
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	689b      	ldr	r3, [r3, #8]
 8012a88:	683a      	ldr	r2, [r7, #0]
 8012a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	683a      	ldr	r2, [r7, #0]
 8012a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	687a      	ldr	r2, [r7, #4]
 8012a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	1c5a      	adds	r2, r3, #1
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	601a      	str	r2, [r3, #0]
}
 8012aa2:	bf00      	nop
 8012aa4:	3714      	adds	r7, #20
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr

08012aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012aae:	b480      	push	{r7}
 8012ab0:	b085      	sub	sp, #20
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
 8012ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac4:	d103      	bne.n	8012ace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	691b      	ldr	r3, [r3, #16]
 8012aca:	60fb      	str	r3, [r7, #12]
 8012acc:	e00c      	b.n	8012ae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	3308      	adds	r3, #8
 8012ad2:	60fb      	str	r3, [r7, #12]
 8012ad4:	e002      	b.n	8012adc <vListInsert+0x2e>
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	60fb      	str	r3, [r7, #12]
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	68ba      	ldr	r2, [r7, #8]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d2f6      	bcs.n	8012ad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	685a      	ldr	r2, [r3, #4]
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	683a      	ldr	r2, [r7, #0]
 8012af6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	68fa      	ldr	r2, [r7, #12]
 8012afc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	683a      	ldr	r2, [r7, #0]
 8012b02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	687a      	ldr	r2, [r7, #4]
 8012b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	1c5a      	adds	r2, r3, #1
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	601a      	str	r2, [r3, #0]
}
 8012b14:	bf00      	nop
 8012b16:	3714      	adds	r7, #20
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012b20:	b480      	push	{r7}
 8012b22:	b085      	sub	sp, #20
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	691b      	ldr	r3, [r3, #16]
 8012b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	6892      	ldr	r2, [r2, #8]
 8012b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	689b      	ldr	r3, [r3, #8]
 8012b3c:	687a      	ldr	r2, [r7, #4]
 8012b3e:	6852      	ldr	r2, [r2, #4]
 8012b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d103      	bne.n	8012b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	689a      	ldr	r2, [r3, #8]
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2200      	movs	r2, #0
 8012b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	1e5a      	subs	r2, r3, #1
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	681b      	ldr	r3, [r3, #0]
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3714      	adds	r7, #20
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b72:	4770      	bx	lr

08012b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b084      	sub	sp, #16
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d10d      	bne.n	8012ba4 <xQueueGenericReset+0x30>
	__asm volatile
 8012b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b8c:	b672      	cpsid	i
 8012b8e:	f383 8811 	msr	BASEPRI, r3
 8012b92:	f3bf 8f6f 	isb	sy
 8012b96:	f3bf 8f4f 	dsb	sy
 8012b9a:	b662      	cpsie	i
 8012b9c:	60bb      	str	r3, [r7, #8]
}
 8012b9e:	bf00      	nop
 8012ba0:	bf00      	nop
 8012ba2:	e7fd      	b.n	8012ba0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012ba4:	f002 f982 	bl	8014eac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bb0:	68f9      	ldr	r1, [r7, #12]
 8012bb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012bb4:	fb01 f303 	mul.w	r3, r1, r3
 8012bb8:	441a      	add	r2, r3
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681a      	ldr	r2, [r3, #0]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	681a      	ldr	r2, [r3, #0]
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bd4:	3b01      	subs	r3, #1
 8012bd6:	68f9      	ldr	r1, [r7, #12]
 8012bd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012bda:	fb01 f303 	mul.w	r3, r1, r3
 8012bde:	441a      	add	r2, r3
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	22ff      	movs	r2, #255	@ 0xff
 8012be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	22ff      	movs	r2, #255	@ 0xff
 8012bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d114      	bne.n	8012c24 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	691b      	ldr	r3, [r3, #16]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d01a      	beq.n	8012c38 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	3310      	adds	r3, #16
 8012c06:	4618      	mov	r0, r3
 8012c08:	f001 fbb4 	bl	8014374 <xTaskRemoveFromEventList>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d012      	beq.n	8012c38 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012c12:	4b0d      	ldr	r3, [pc, #52]	@ (8012c48 <xQueueGenericReset+0xd4>)
 8012c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c18:	601a      	str	r2, [r3, #0]
 8012c1a:	f3bf 8f4f 	dsb	sy
 8012c1e:	f3bf 8f6f 	isb	sy
 8012c22:	e009      	b.n	8012c38 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	3310      	adds	r3, #16
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7ff feef 	bl	8012a0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	3324      	adds	r3, #36	@ 0x24
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff feea 	bl	8012a0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012c38:	f002 f96e 	bl	8014f18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012c3c:	2301      	movs	r3, #1
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3710      	adds	r7, #16
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop
 8012c48:	e000ed04 	.word	0xe000ed04

08012c4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b08e      	sub	sp, #56	@ 0x38
 8012c50:	af02      	add	r7, sp, #8
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
 8012c58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d10d      	bne.n	8012c7c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8012c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c64:	b672      	cpsid	i
 8012c66:	f383 8811 	msr	BASEPRI, r3
 8012c6a:	f3bf 8f6f 	isb	sy
 8012c6e:	f3bf 8f4f 	dsb	sy
 8012c72:	b662      	cpsie	i
 8012c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012c76:	bf00      	nop
 8012c78:	bf00      	nop
 8012c7a:	e7fd      	b.n	8012c78 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d10d      	bne.n	8012c9e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8012c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c86:	b672      	cpsid	i
 8012c88:	f383 8811 	msr	BASEPRI, r3
 8012c8c:	f3bf 8f6f 	isb	sy
 8012c90:	f3bf 8f4f 	dsb	sy
 8012c94:	b662      	cpsie	i
 8012c96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012c98:	bf00      	nop
 8012c9a:	bf00      	nop
 8012c9c:	e7fd      	b.n	8012c9a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d002      	beq.n	8012caa <xQueueGenericCreateStatic+0x5e>
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d001      	beq.n	8012cae <xQueueGenericCreateStatic+0x62>
 8012caa:	2301      	movs	r3, #1
 8012cac:	e000      	b.n	8012cb0 <xQueueGenericCreateStatic+0x64>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d10d      	bne.n	8012cd0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8012cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cb8:	b672      	cpsid	i
 8012cba:	f383 8811 	msr	BASEPRI, r3
 8012cbe:	f3bf 8f6f 	isb	sy
 8012cc2:	f3bf 8f4f 	dsb	sy
 8012cc6:	b662      	cpsie	i
 8012cc8:	623b      	str	r3, [r7, #32]
}
 8012cca:	bf00      	nop
 8012ccc:	bf00      	nop
 8012cce:	e7fd      	b.n	8012ccc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d102      	bne.n	8012cdc <xQueueGenericCreateStatic+0x90>
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d101      	bne.n	8012ce0 <xQueueGenericCreateStatic+0x94>
 8012cdc:	2301      	movs	r3, #1
 8012cde:	e000      	b.n	8012ce2 <xQueueGenericCreateStatic+0x96>
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d10d      	bne.n	8012d02 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8012ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cea:	b672      	cpsid	i
 8012cec:	f383 8811 	msr	BASEPRI, r3
 8012cf0:	f3bf 8f6f 	isb	sy
 8012cf4:	f3bf 8f4f 	dsb	sy
 8012cf8:	b662      	cpsie	i
 8012cfa:	61fb      	str	r3, [r7, #28]
}
 8012cfc:	bf00      	nop
 8012cfe:	bf00      	nop
 8012d00:	e7fd      	b.n	8012cfe <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012d02:	2350      	movs	r3, #80	@ 0x50
 8012d04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	2b50      	cmp	r3, #80	@ 0x50
 8012d0a:	d00d      	beq.n	8012d28 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8012d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d10:	b672      	cpsid	i
 8012d12:	f383 8811 	msr	BASEPRI, r3
 8012d16:	f3bf 8f6f 	isb	sy
 8012d1a:	f3bf 8f4f 	dsb	sy
 8012d1e:	b662      	cpsie	i
 8012d20:	61bb      	str	r3, [r7, #24]
}
 8012d22:	bf00      	nop
 8012d24:	bf00      	nop
 8012d26:	e7fd      	b.n	8012d24 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012d28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d00d      	beq.n	8012d50 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d36:	2201      	movs	r2, #1
 8012d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012d3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d42:	9300      	str	r3, [sp, #0]
 8012d44:	4613      	mov	r3, r2
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	68b9      	ldr	r1, [r7, #8]
 8012d4a:	68f8      	ldr	r0, [r7, #12]
 8012d4c:	f000 f848 	bl	8012de0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3730      	adds	r7, #48	@ 0x30
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012d5a:	b580      	push	{r7, lr}
 8012d5c:	b08a      	sub	sp, #40	@ 0x28
 8012d5e:	af02      	add	r7, sp, #8
 8012d60:	60f8      	str	r0, [r7, #12]
 8012d62:	60b9      	str	r1, [r7, #8]
 8012d64:	4613      	mov	r3, r2
 8012d66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d10d      	bne.n	8012d8a <xQueueGenericCreate+0x30>
	__asm volatile
 8012d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d72:	b672      	cpsid	i
 8012d74:	f383 8811 	msr	BASEPRI, r3
 8012d78:	f3bf 8f6f 	isb	sy
 8012d7c:	f3bf 8f4f 	dsb	sy
 8012d80:	b662      	cpsie	i
 8012d82:	613b      	str	r3, [r7, #16]
}
 8012d84:	bf00      	nop
 8012d86:	bf00      	nop
 8012d88:	e7fd      	b.n	8012d86 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d102      	bne.n	8012d96 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012d90:	2300      	movs	r3, #0
 8012d92:	61fb      	str	r3, [r7, #28]
 8012d94:	e004      	b.n	8012da0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	68ba      	ldr	r2, [r7, #8]
 8012d9a:	fb02 f303 	mul.w	r3, r2, r3
 8012d9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	3350      	adds	r3, #80	@ 0x50
 8012da4:	4618      	mov	r0, r3
 8012da6:	f002 f9af 	bl	8015108 <pvPortMalloc>
 8012daa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d011      	beq.n	8012dd6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	3350      	adds	r3, #80	@ 0x50
 8012dba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012dc4:	79fa      	ldrb	r2, [r7, #7]
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	4613      	mov	r3, r2
 8012dcc:	697a      	ldr	r2, [r7, #20]
 8012dce:	68b9      	ldr	r1, [r7, #8]
 8012dd0:	68f8      	ldr	r0, [r7, #12]
 8012dd2:	f000 f805 	bl	8012de0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3720      	adds	r7, #32
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
 8012dec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d103      	bne.n	8012dfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	69ba      	ldr	r2, [r7, #24]
 8012df8:	601a      	str	r2, [r3, #0]
 8012dfa:	e002      	b.n	8012e02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	68ba      	ldr	r2, [r7, #8]
 8012e0c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012e0e:	2101      	movs	r1, #1
 8012e10:	69b8      	ldr	r0, [r7, #24]
 8012e12:	f7ff feaf 	bl	8012b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012e16:	69bb      	ldr	r3, [r7, #24]
 8012e18:	78fa      	ldrb	r2, [r7, #3]
 8012e1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012e1e:	bf00      	nop
 8012e20:	3710      	adds	r7, #16
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}

08012e26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012e26:	b580      	push	{r7, lr}
 8012e28:	b082      	sub	sp, #8
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00e      	beq.n	8012e52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2200      	movs	r2, #0
 8012e44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012e46:	2300      	movs	r3, #0
 8012e48:	2200      	movs	r2, #0
 8012e4a:	2100      	movs	r1, #0
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f000 f81d 	bl	8012e8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012e52:	bf00      	nop
 8012e54:	3708      	adds	r7, #8
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}

08012e5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012e5a:	b580      	push	{r7, lr}
 8012e5c:	b086      	sub	sp, #24
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	4603      	mov	r3, r0
 8012e62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012e64:	2301      	movs	r3, #1
 8012e66:	617b      	str	r3, [r7, #20]
 8012e68:	2300      	movs	r3, #0
 8012e6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012e6c:	79fb      	ldrb	r3, [r7, #7]
 8012e6e:	461a      	mov	r2, r3
 8012e70:	6939      	ldr	r1, [r7, #16]
 8012e72:	6978      	ldr	r0, [r7, #20]
 8012e74:	f7ff ff71 	bl	8012d5a <xQueueGenericCreate>
 8012e78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f7ff ffd3 	bl	8012e26 <prvInitialiseMutex>

		return xNewQueue;
 8012e80:	68fb      	ldr	r3, [r7, #12]
	}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3718      	adds	r7, #24
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
	...

08012e8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b08e      	sub	sp, #56	@ 0x38
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]
 8012e98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d10d      	bne.n	8012ec4 <xQueueGenericSend+0x38>
	__asm volatile
 8012ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eac:	b672      	cpsid	i
 8012eae:	f383 8811 	msr	BASEPRI, r3
 8012eb2:	f3bf 8f6f 	isb	sy
 8012eb6:	f3bf 8f4f 	dsb	sy
 8012eba:	b662      	cpsie	i
 8012ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012ebe:	bf00      	nop
 8012ec0:	bf00      	nop
 8012ec2:	e7fd      	b.n	8012ec0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d103      	bne.n	8012ed2 <xQueueGenericSend+0x46>
 8012eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d101      	bne.n	8012ed6 <xQueueGenericSend+0x4a>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	e000      	b.n	8012ed8 <xQueueGenericSend+0x4c>
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d10d      	bne.n	8012ef8 <xQueueGenericSend+0x6c>
	__asm volatile
 8012edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ee0:	b672      	cpsid	i
 8012ee2:	f383 8811 	msr	BASEPRI, r3
 8012ee6:	f3bf 8f6f 	isb	sy
 8012eea:	f3bf 8f4f 	dsb	sy
 8012eee:	b662      	cpsie	i
 8012ef0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012ef2:	bf00      	nop
 8012ef4:	bf00      	nop
 8012ef6:	e7fd      	b.n	8012ef4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	2b02      	cmp	r3, #2
 8012efc:	d103      	bne.n	8012f06 <xQueueGenericSend+0x7a>
 8012efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d101      	bne.n	8012f0a <xQueueGenericSend+0x7e>
 8012f06:	2301      	movs	r3, #1
 8012f08:	e000      	b.n	8012f0c <xQueueGenericSend+0x80>
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d10d      	bne.n	8012f2c <xQueueGenericSend+0xa0>
	__asm volatile
 8012f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f14:	b672      	cpsid	i
 8012f16:	f383 8811 	msr	BASEPRI, r3
 8012f1a:	f3bf 8f6f 	isb	sy
 8012f1e:	f3bf 8f4f 	dsb	sy
 8012f22:	b662      	cpsie	i
 8012f24:	623b      	str	r3, [r7, #32]
}
 8012f26:	bf00      	nop
 8012f28:	bf00      	nop
 8012f2a:	e7fd      	b.n	8012f28 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f2c:	f001 fc52 	bl	80147d4 <xTaskGetSchedulerState>
 8012f30:	4603      	mov	r3, r0
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d102      	bne.n	8012f3c <xQueueGenericSend+0xb0>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d101      	bne.n	8012f40 <xQueueGenericSend+0xb4>
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	e000      	b.n	8012f42 <xQueueGenericSend+0xb6>
 8012f40:	2300      	movs	r3, #0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d10d      	bne.n	8012f62 <xQueueGenericSend+0xd6>
	__asm volatile
 8012f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f4a:	b672      	cpsid	i
 8012f4c:	f383 8811 	msr	BASEPRI, r3
 8012f50:	f3bf 8f6f 	isb	sy
 8012f54:	f3bf 8f4f 	dsb	sy
 8012f58:	b662      	cpsie	i
 8012f5a:	61fb      	str	r3, [r7, #28]
}
 8012f5c:	bf00      	nop
 8012f5e:	bf00      	nop
 8012f60:	e7fd      	b.n	8012f5e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f62:	f001 ffa3 	bl	8014eac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d302      	bcc.n	8012f78 <xQueueGenericSend+0xec>
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	2b02      	cmp	r3, #2
 8012f76:	d129      	bne.n	8012fcc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012f78:	683a      	ldr	r2, [r7, #0]
 8012f7a:	68b9      	ldr	r1, [r7, #8]
 8012f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f7e:	f000 fbed 	bl	801375c <prvCopyDataToQueue>
 8012f82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d010      	beq.n	8012fae <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f8e:	3324      	adds	r3, #36	@ 0x24
 8012f90:	4618      	mov	r0, r3
 8012f92:	f001 f9ef 	bl	8014374 <xTaskRemoveFromEventList>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d013      	beq.n	8012fc4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012f9c:	4b3f      	ldr	r3, [pc, #252]	@ (801309c <xQueueGenericSend+0x210>)
 8012f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fa2:	601a      	str	r2, [r3, #0]
 8012fa4:	f3bf 8f4f 	dsb	sy
 8012fa8:	f3bf 8f6f 	isb	sy
 8012fac:	e00a      	b.n	8012fc4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d007      	beq.n	8012fc4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012fb4:	4b39      	ldr	r3, [pc, #228]	@ (801309c <xQueueGenericSend+0x210>)
 8012fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fba:	601a      	str	r2, [r3, #0]
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012fc4:	f001 ffa8 	bl	8014f18 <vPortExitCritical>
				return pdPASS;
 8012fc8:	2301      	movs	r3, #1
 8012fca:	e063      	b.n	8013094 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d103      	bne.n	8012fda <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012fd2:	f001 ffa1 	bl	8014f18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	e05c      	b.n	8013094 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d106      	bne.n	8012fee <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012fe0:	f107 0314 	add.w	r3, r7, #20
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f001 fa93 	bl	8014510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012fea:	2301      	movs	r3, #1
 8012fec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012fee:	f001 ff93 	bl	8014f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012ff2:	f000 ff3b 	bl	8013e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012ff6:	f001 ff59 	bl	8014eac <vPortEnterCritical>
 8012ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013000:	b25b      	sxtb	r3, r3
 8013002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013006:	d103      	bne.n	8013010 <xQueueGenericSend+0x184>
 8013008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801300a:	2200      	movs	r2, #0
 801300c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013012:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013016:	b25b      	sxtb	r3, r3
 8013018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801301c:	d103      	bne.n	8013026 <xQueueGenericSend+0x19a>
 801301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013020:	2200      	movs	r2, #0
 8013022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013026:	f001 ff77 	bl	8014f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801302a:	1d3a      	adds	r2, r7, #4
 801302c:	f107 0314 	add.w	r3, r7, #20
 8013030:	4611      	mov	r1, r2
 8013032:	4618      	mov	r0, r3
 8013034:	f001 fa82 	bl	801453c <xTaskCheckForTimeOut>
 8013038:	4603      	mov	r3, r0
 801303a:	2b00      	cmp	r3, #0
 801303c:	d124      	bne.n	8013088 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801303e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013040:	f000 fc84 	bl	801394c <prvIsQueueFull>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d018      	beq.n	801307c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801304c:	3310      	adds	r3, #16
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	4611      	mov	r1, r2
 8013052:	4618      	mov	r0, r3
 8013054:	f001 f924 	bl	80142a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801305a:	f000 fc0f 	bl	801387c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801305e:	f000 ff13 	bl	8013e88 <xTaskResumeAll>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	f47f af7c 	bne.w	8012f62 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801306a:	4b0c      	ldr	r3, [pc, #48]	@ (801309c <xQueueGenericSend+0x210>)
 801306c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013070:	601a      	str	r2, [r3, #0]
 8013072:	f3bf 8f4f 	dsb	sy
 8013076:	f3bf 8f6f 	isb	sy
 801307a:	e772      	b.n	8012f62 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801307c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801307e:	f000 fbfd 	bl	801387c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013082:	f000 ff01 	bl	8013e88 <xTaskResumeAll>
 8013086:	e76c      	b.n	8012f62 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801308a:	f000 fbf7 	bl	801387c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801308e:	f000 fefb 	bl	8013e88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013092:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013094:	4618      	mov	r0, r3
 8013096:	3738      	adds	r7, #56	@ 0x38
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	e000ed04 	.word	0xe000ed04

080130a0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b08e      	sub	sp, #56	@ 0x38
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80130ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d10d      	bne.n	80130d0 <xQueueGiveFromISR+0x30>
	__asm volatile
 80130b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130b8:	b672      	cpsid	i
 80130ba:	f383 8811 	msr	BASEPRI, r3
 80130be:	f3bf 8f6f 	isb	sy
 80130c2:	f3bf 8f4f 	dsb	sy
 80130c6:	b662      	cpsie	i
 80130c8:	623b      	str	r3, [r7, #32]
}
 80130ca:	bf00      	nop
 80130cc:	bf00      	nop
 80130ce:	e7fd      	b.n	80130cc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80130d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d00d      	beq.n	80130f4 <xQueueGiveFromISR+0x54>
	__asm volatile
 80130d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130dc:	b672      	cpsid	i
 80130de:	f383 8811 	msr	BASEPRI, r3
 80130e2:	f3bf 8f6f 	isb	sy
 80130e6:	f3bf 8f4f 	dsb	sy
 80130ea:	b662      	cpsie	i
 80130ec:	61fb      	str	r3, [r7, #28]
}
 80130ee:	bf00      	nop
 80130f0:	bf00      	nop
 80130f2:	e7fd      	b.n	80130f0 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80130f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d103      	bne.n	8013104 <xQueueGiveFromISR+0x64>
 80130fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130fe:	689b      	ldr	r3, [r3, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d101      	bne.n	8013108 <xQueueGiveFromISR+0x68>
 8013104:	2301      	movs	r3, #1
 8013106:	e000      	b.n	801310a <xQueueGiveFromISR+0x6a>
 8013108:	2300      	movs	r3, #0
 801310a:	2b00      	cmp	r3, #0
 801310c:	d10d      	bne.n	801312a <xQueueGiveFromISR+0x8a>
	__asm volatile
 801310e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013112:	b672      	cpsid	i
 8013114:	f383 8811 	msr	BASEPRI, r3
 8013118:	f3bf 8f6f 	isb	sy
 801311c:	f3bf 8f4f 	dsb	sy
 8013120:	b662      	cpsie	i
 8013122:	61bb      	str	r3, [r7, #24]
}
 8013124:	bf00      	nop
 8013126:	bf00      	nop
 8013128:	e7fd      	b.n	8013126 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801312a:	f001 ffa7 	bl	801507c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801312e:	f3ef 8211 	mrs	r2, BASEPRI
 8013132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013136:	b672      	cpsid	i
 8013138:	f383 8811 	msr	BASEPRI, r3
 801313c:	f3bf 8f6f 	isb	sy
 8013140:	f3bf 8f4f 	dsb	sy
 8013144:	b662      	cpsie	i
 8013146:	617a      	str	r2, [r7, #20]
 8013148:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801314a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801314c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013152:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801315a:	429a      	cmp	r2, r3
 801315c:	d22b      	bcs.n	80131b6 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013160:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801316a:	1c5a      	adds	r2, r3, #1
 801316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801316e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013170:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013178:	d112      	bne.n	80131a0 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801317e:	2b00      	cmp	r3, #0
 8013180:	d016      	beq.n	80131b0 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013184:	3324      	adds	r3, #36	@ 0x24
 8013186:	4618      	mov	r0, r3
 8013188:	f001 f8f4 	bl	8014374 <xTaskRemoveFromEventList>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d00e      	beq.n	80131b0 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d00b      	beq.n	80131b0 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	2201      	movs	r2, #1
 801319c:	601a      	str	r2, [r3, #0]
 801319e:	e007      	b.n	80131b0 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80131a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131a4:	3301      	adds	r3, #1
 80131a6:	b2db      	uxtb	r3, r3
 80131a8:	b25a      	sxtb	r2, r3
 80131aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80131b0:	2301      	movs	r3, #1
 80131b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80131b4:	e001      	b.n	80131ba <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80131b6:	2300      	movs	r3, #0
 80131b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80131ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131bc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80131c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80131c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3738      	adds	r7, #56	@ 0x38
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b08c      	sub	sp, #48	@ 0x30
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80131dc:	2300      	movs	r3, #0
 80131de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80131e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d10d      	bne.n	8013206 <xQueueReceive+0x36>
	__asm volatile
 80131ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ee:	b672      	cpsid	i
 80131f0:	f383 8811 	msr	BASEPRI, r3
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	b662      	cpsie	i
 80131fe:	623b      	str	r3, [r7, #32]
}
 8013200:	bf00      	nop
 8013202:	bf00      	nop
 8013204:	e7fd      	b.n	8013202 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d103      	bne.n	8013214 <xQueueReceive+0x44>
 801320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013210:	2b00      	cmp	r3, #0
 8013212:	d101      	bne.n	8013218 <xQueueReceive+0x48>
 8013214:	2301      	movs	r3, #1
 8013216:	e000      	b.n	801321a <xQueueReceive+0x4a>
 8013218:	2300      	movs	r3, #0
 801321a:	2b00      	cmp	r3, #0
 801321c:	d10d      	bne.n	801323a <xQueueReceive+0x6a>
	__asm volatile
 801321e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013222:	b672      	cpsid	i
 8013224:	f383 8811 	msr	BASEPRI, r3
 8013228:	f3bf 8f6f 	isb	sy
 801322c:	f3bf 8f4f 	dsb	sy
 8013230:	b662      	cpsie	i
 8013232:	61fb      	str	r3, [r7, #28]
}
 8013234:	bf00      	nop
 8013236:	bf00      	nop
 8013238:	e7fd      	b.n	8013236 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801323a:	f001 facb 	bl	80147d4 <xTaskGetSchedulerState>
 801323e:	4603      	mov	r3, r0
 8013240:	2b00      	cmp	r3, #0
 8013242:	d102      	bne.n	801324a <xQueueReceive+0x7a>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d101      	bne.n	801324e <xQueueReceive+0x7e>
 801324a:	2301      	movs	r3, #1
 801324c:	e000      	b.n	8013250 <xQueueReceive+0x80>
 801324e:	2300      	movs	r3, #0
 8013250:	2b00      	cmp	r3, #0
 8013252:	d10d      	bne.n	8013270 <xQueueReceive+0xa0>
	__asm volatile
 8013254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013258:	b672      	cpsid	i
 801325a:	f383 8811 	msr	BASEPRI, r3
 801325e:	f3bf 8f6f 	isb	sy
 8013262:	f3bf 8f4f 	dsb	sy
 8013266:	b662      	cpsie	i
 8013268:	61bb      	str	r3, [r7, #24]
}
 801326a:	bf00      	nop
 801326c:	bf00      	nop
 801326e:	e7fd      	b.n	801326c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013270:	f001 fe1c 	bl	8014eac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013278:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801327c:	2b00      	cmp	r3, #0
 801327e:	d01f      	beq.n	80132c0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013280:	68b9      	ldr	r1, [r7, #8]
 8013282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013284:	f000 fad4 	bl	8013830 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801328a:	1e5a      	subs	r2, r3, #1
 801328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801328e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013292:	691b      	ldr	r3, [r3, #16]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d00f      	beq.n	80132b8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801329a:	3310      	adds	r3, #16
 801329c:	4618      	mov	r0, r3
 801329e:	f001 f869 	bl	8014374 <xTaskRemoveFromEventList>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d007      	beq.n	80132b8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80132a8:	4b3c      	ldr	r3, [pc, #240]	@ (801339c <xQueueReceive+0x1cc>)
 80132aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132ae:	601a      	str	r2, [r3, #0]
 80132b0:	f3bf 8f4f 	dsb	sy
 80132b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80132b8:	f001 fe2e 	bl	8014f18 <vPortExitCritical>
				return pdPASS;
 80132bc:	2301      	movs	r3, #1
 80132be:	e069      	b.n	8013394 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d103      	bne.n	80132ce <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80132c6:	f001 fe27 	bl	8014f18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80132ca:	2300      	movs	r3, #0
 80132cc:	e062      	b.n	8013394 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80132ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d106      	bne.n	80132e2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80132d4:	f107 0310 	add.w	r3, r7, #16
 80132d8:	4618      	mov	r0, r3
 80132da:	f001 f919 	bl	8014510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80132de:	2301      	movs	r3, #1
 80132e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80132e2:	f001 fe19 	bl	8014f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80132e6:	f000 fdc1 	bl	8013e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80132ea:	f001 fddf 	bl	8014eac <vPortEnterCritical>
 80132ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80132f4:	b25b      	sxtb	r3, r3
 80132f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132fa:	d103      	bne.n	8013304 <xQueueReceive+0x134>
 80132fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132fe:	2200      	movs	r2, #0
 8013300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801330a:	b25b      	sxtb	r3, r3
 801330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013310:	d103      	bne.n	801331a <xQueueReceive+0x14a>
 8013312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013314:	2200      	movs	r2, #0
 8013316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801331a:	f001 fdfd 	bl	8014f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801331e:	1d3a      	adds	r2, r7, #4
 8013320:	f107 0310 	add.w	r3, r7, #16
 8013324:	4611      	mov	r1, r2
 8013326:	4618      	mov	r0, r3
 8013328:	f001 f908 	bl	801453c <xTaskCheckForTimeOut>
 801332c:	4603      	mov	r3, r0
 801332e:	2b00      	cmp	r3, #0
 8013330:	d123      	bne.n	801337a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013334:	f000 faf4 	bl	8013920 <prvIsQueueEmpty>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d017      	beq.n	801336e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801333e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013340:	3324      	adds	r3, #36	@ 0x24
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	4611      	mov	r1, r2
 8013346:	4618      	mov	r0, r3
 8013348:	f000 ffaa 	bl	80142a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801334c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801334e:	f000 fa95 	bl	801387c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013352:	f000 fd99 	bl	8013e88 <xTaskResumeAll>
 8013356:	4603      	mov	r3, r0
 8013358:	2b00      	cmp	r3, #0
 801335a:	d189      	bne.n	8013270 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 801335c:	4b0f      	ldr	r3, [pc, #60]	@ (801339c <xQueueReceive+0x1cc>)
 801335e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013362:	601a      	str	r2, [r3, #0]
 8013364:	f3bf 8f4f 	dsb	sy
 8013368:	f3bf 8f6f 	isb	sy
 801336c:	e780      	b.n	8013270 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801336e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013370:	f000 fa84 	bl	801387c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013374:	f000 fd88 	bl	8013e88 <xTaskResumeAll>
 8013378:	e77a      	b.n	8013270 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801337a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801337c:	f000 fa7e 	bl	801387c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013380:	f000 fd82 	bl	8013e88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013386:	f000 facb 	bl	8013920 <prvIsQueueEmpty>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	f43f af6f 	beq.w	8013270 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013392:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013394:	4618      	mov	r0, r3
 8013396:	3730      	adds	r7, #48	@ 0x30
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	e000ed04 	.word	0xe000ed04

080133a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b08e      	sub	sp, #56	@ 0x38
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80133aa:	2300      	movs	r3, #0
 80133ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80133b2:	2300      	movs	r3, #0
 80133b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80133b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d10d      	bne.n	80133d8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80133bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c0:	b672      	cpsid	i
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	b662      	cpsie	i
 80133d0:	623b      	str	r3, [r7, #32]
}
 80133d2:	bf00      	nop
 80133d4:	bf00      	nop
 80133d6:	e7fd      	b.n	80133d4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80133d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00d      	beq.n	80133fc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80133e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133e4:	b672      	cpsid	i
 80133e6:	f383 8811 	msr	BASEPRI, r3
 80133ea:	f3bf 8f6f 	isb	sy
 80133ee:	f3bf 8f4f 	dsb	sy
 80133f2:	b662      	cpsie	i
 80133f4:	61fb      	str	r3, [r7, #28]
}
 80133f6:	bf00      	nop
 80133f8:	bf00      	nop
 80133fa:	e7fd      	b.n	80133f8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133fc:	f001 f9ea 	bl	80147d4 <xTaskGetSchedulerState>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d102      	bne.n	801340c <xQueueSemaphoreTake+0x6c>
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d101      	bne.n	8013410 <xQueueSemaphoreTake+0x70>
 801340c:	2301      	movs	r3, #1
 801340e:	e000      	b.n	8013412 <xQueueSemaphoreTake+0x72>
 8013410:	2300      	movs	r3, #0
 8013412:	2b00      	cmp	r3, #0
 8013414:	d10d      	bne.n	8013432 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801341a:	b672      	cpsid	i
 801341c:	f383 8811 	msr	BASEPRI, r3
 8013420:	f3bf 8f6f 	isb	sy
 8013424:	f3bf 8f4f 	dsb	sy
 8013428:	b662      	cpsie	i
 801342a:	61bb      	str	r3, [r7, #24]
}
 801342c:	bf00      	nop
 801342e:	bf00      	nop
 8013430:	e7fd      	b.n	801342e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013432:	f001 fd3b 	bl	8014eac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801343a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801343e:	2b00      	cmp	r3, #0
 8013440:	d024      	beq.n	801348c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013444:	1e5a      	subs	r2, r3, #1
 8013446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013448:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d104      	bne.n	801345c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013452:	f001 fba1 	bl	8014b98 <pvTaskIncrementMutexHeldCount>
 8013456:	4602      	mov	r2, r0
 8013458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801345a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801345c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801345e:	691b      	ldr	r3, [r3, #16]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d00f      	beq.n	8013484 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013466:	3310      	adds	r3, #16
 8013468:	4618      	mov	r0, r3
 801346a:	f000 ff83 	bl	8014374 <xTaskRemoveFromEventList>
 801346e:	4603      	mov	r3, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d007      	beq.n	8013484 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013474:	4b55      	ldr	r3, [pc, #340]	@ (80135cc <xQueueSemaphoreTake+0x22c>)
 8013476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801347a:	601a      	str	r2, [r3, #0]
 801347c:	f3bf 8f4f 	dsb	sy
 8013480:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013484:	f001 fd48 	bl	8014f18 <vPortExitCritical>
				return pdPASS;
 8013488:	2301      	movs	r3, #1
 801348a:	e09a      	b.n	80135c2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d114      	bne.n	80134bc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013494:	2b00      	cmp	r3, #0
 8013496:	d00d      	beq.n	80134b4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8013498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801349c:	b672      	cpsid	i
 801349e:	f383 8811 	msr	BASEPRI, r3
 80134a2:	f3bf 8f6f 	isb	sy
 80134a6:	f3bf 8f4f 	dsb	sy
 80134aa:	b662      	cpsie	i
 80134ac:	617b      	str	r3, [r7, #20]
}
 80134ae:	bf00      	nop
 80134b0:	bf00      	nop
 80134b2:	e7fd      	b.n	80134b0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80134b4:	f001 fd30 	bl	8014f18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80134b8:	2300      	movs	r3, #0
 80134ba:	e082      	b.n	80135c2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80134bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d106      	bne.n	80134d0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80134c2:	f107 030c 	add.w	r3, r7, #12
 80134c6:	4618      	mov	r0, r3
 80134c8:	f001 f822 	bl	8014510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80134cc:	2301      	movs	r3, #1
 80134ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80134d0:	f001 fd22 	bl	8014f18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80134d4:	f000 fcca 	bl	8013e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80134d8:	f001 fce8 	bl	8014eac <vPortEnterCritical>
 80134dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80134e2:	b25b      	sxtb	r3, r3
 80134e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134e8:	d103      	bne.n	80134f2 <xQueueSemaphoreTake+0x152>
 80134ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ec:	2200      	movs	r2, #0
 80134ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80134f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80134f8:	b25b      	sxtb	r3, r3
 80134fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134fe:	d103      	bne.n	8013508 <xQueueSemaphoreTake+0x168>
 8013500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013502:	2200      	movs	r2, #0
 8013504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013508:	f001 fd06 	bl	8014f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801350c:	463a      	mov	r2, r7
 801350e:	f107 030c 	add.w	r3, r7, #12
 8013512:	4611      	mov	r1, r2
 8013514:	4618      	mov	r0, r3
 8013516:	f001 f811 	bl	801453c <xTaskCheckForTimeOut>
 801351a:	4603      	mov	r3, r0
 801351c:	2b00      	cmp	r3, #0
 801351e:	d132      	bne.n	8013586 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013522:	f000 f9fd 	bl	8013920 <prvIsQueueEmpty>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	d026      	beq.n	801357a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d109      	bne.n	8013548 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013534:	f001 fcba 	bl	8014eac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801353a:	689b      	ldr	r3, [r3, #8]
 801353c:	4618      	mov	r0, r3
 801353e:	f001 f967 	bl	8014810 <xTaskPriorityInherit>
 8013542:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013544:	f001 fce8 	bl	8014f18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801354a:	3324      	adds	r3, #36	@ 0x24
 801354c:	683a      	ldr	r2, [r7, #0]
 801354e:	4611      	mov	r1, r2
 8013550:	4618      	mov	r0, r3
 8013552:	f000 fea5 	bl	80142a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013556:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013558:	f000 f990 	bl	801387c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801355c:	f000 fc94 	bl	8013e88 <xTaskResumeAll>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	f47f af65 	bne.w	8013432 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8013568:	4b18      	ldr	r3, [pc, #96]	@ (80135cc <xQueueSemaphoreTake+0x22c>)
 801356a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801356e:	601a      	str	r2, [r3, #0]
 8013570:	f3bf 8f4f 	dsb	sy
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	e75b      	b.n	8013432 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801357a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801357c:	f000 f97e 	bl	801387c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013580:	f000 fc82 	bl	8013e88 <xTaskResumeAll>
 8013584:	e755      	b.n	8013432 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013588:	f000 f978 	bl	801387c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801358c:	f000 fc7c 	bl	8013e88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013590:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013592:	f000 f9c5 	bl	8013920 <prvIsQueueEmpty>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	f43f af4a 	beq.w	8013432 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d00d      	beq.n	80135c0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80135a4:	f001 fc82 	bl	8014eac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80135a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135aa:	f000 f8bf 	bl	801372c <prvGetDisinheritPriorityAfterTimeout>
 80135ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80135b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80135b6:	4618      	mov	r0, r3
 80135b8:	f001 fa36 	bl	8014a28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80135bc:	f001 fcac 	bl	8014f18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80135c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3738      	adds	r7, #56	@ 0x38
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	e000ed04 	.word	0xe000ed04

080135d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b08e      	sub	sp, #56	@ 0x38
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80135e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d10d      	bne.n	8013602 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80135e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ea:	b672      	cpsid	i
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	b662      	cpsie	i
 80135fa:	623b      	str	r3, [r7, #32]
}
 80135fc:	bf00      	nop
 80135fe:	bf00      	nop
 8013600:	e7fd      	b.n	80135fe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d103      	bne.n	8013610 <xQueueReceiveFromISR+0x40>
 8013608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801360c:	2b00      	cmp	r3, #0
 801360e:	d101      	bne.n	8013614 <xQueueReceiveFromISR+0x44>
 8013610:	2301      	movs	r3, #1
 8013612:	e000      	b.n	8013616 <xQueueReceiveFromISR+0x46>
 8013614:	2300      	movs	r3, #0
 8013616:	2b00      	cmp	r3, #0
 8013618:	d10d      	bne.n	8013636 <xQueueReceiveFromISR+0x66>
	__asm volatile
 801361a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801361e:	b672      	cpsid	i
 8013620:	f383 8811 	msr	BASEPRI, r3
 8013624:	f3bf 8f6f 	isb	sy
 8013628:	f3bf 8f4f 	dsb	sy
 801362c:	b662      	cpsie	i
 801362e:	61fb      	str	r3, [r7, #28]
}
 8013630:	bf00      	nop
 8013632:	bf00      	nop
 8013634:	e7fd      	b.n	8013632 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013636:	f001 fd21 	bl	801507c <vPortValidateInterruptPriority>
	__asm volatile
 801363a:	f3ef 8211 	mrs	r2, BASEPRI
 801363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013642:	b672      	cpsid	i
 8013644:	f383 8811 	msr	BASEPRI, r3
 8013648:	f3bf 8f6f 	isb	sy
 801364c:	f3bf 8f4f 	dsb	sy
 8013650:	b662      	cpsie	i
 8013652:	61ba      	str	r2, [r7, #24]
 8013654:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013656:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013658:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801365e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013662:	2b00      	cmp	r3, #0
 8013664:	d02f      	beq.n	80136c6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801366c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013670:	68b9      	ldr	r1, [r7, #8]
 8013672:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013674:	f000 f8dc 	bl	8013830 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801367a:	1e5a      	subs	r2, r3, #1
 801367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801367e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013680:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013688:	d112      	bne.n	80136b0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801368c:	691b      	ldr	r3, [r3, #16]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d016      	beq.n	80136c0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013694:	3310      	adds	r3, #16
 8013696:	4618      	mov	r0, r3
 8013698:	f000 fe6c 	bl	8014374 <xTaskRemoveFromEventList>
 801369c:	4603      	mov	r3, r0
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d00e      	beq.n	80136c0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d00b      	beq.n	80136c0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2201      	movs	r2, #1
 80136ac:	601a      	str	r2, [r3, #0]
 80136ae:	e007      	b.n	80136c0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80136b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136b4:	3301      	adds	r3, #1
 80136b6:	b2db      	uxtb	r3, r3
 80136b8:	b25a      	sxtb	r2, r3
 80136ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80136c0:	2301      	movs	r3, #1
 80136c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80136c4:	e001      	b.n	80136ca <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80136c6:	2300      	movs	r3, #0
 80136c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80136ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	f383 8811 	msr	BASEPRI, r3
}
 80136d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3738      	adds	r7, #56	@ 0x38
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b084      	sub	sp, #16
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d10d      	bne.n	801370e <vQueueDelete+0x2e>
	__asm volatile
 80136f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136f6:	b672      	cpsid	i
 80136f8:	f383 8811 	msr	BASEPRI, r3
 80136fc:	f3bf 8f6f 	isb	sy
 8013700:	f3bf 8f4f 	dsb	sy
 8013704:	b662      	cpsie	i
 8013706:	60bb      	str	r3, [r7, #8]
}
 8013708:	bf00      	nop
 801370a:	bf00      	nop
 801370c:	e7fd      	b.n	801370a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801370e:	68f8      	ldr	r0, [r7, #12]
 8013710:	f000 f934 	bl	801397c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801371a:	2b00      	cmp	r3, #0
 801371c:	d102      	bne.n	8013724 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801371e:	68f8      	ldr	r0, [r7, #12]
 8013720:	f001 fdc0 	bl	80152a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013724:	bf00      	nop
 8013726:	3710      	adds	r7, #16
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801372c:	b480      	push	{r7}
 801372e:	b085      	sub	sp, #20
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013738:	2b00      	cmp	r3, #0
 801373a:	d006      	beq.n	801374a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	f1c3 030c 	rsb	r3, r3, #12
 8013746:	60fb      	str	r3, [r7, #12]
 8013748:	e001      	b.n	801374e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801374a:	2300      	movs	r3, #0
 801374c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801374e:	68fb      	ldr	r3, [r7, #12]
	}
 8013750:	4618      	mov	r0, r3
 8013752:	3714      	adds	r7, #20
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr

0801375c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b086      	sub	sp, #24
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013768:	2300      	movs	r3, #0
 801376a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013770:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013776:	2b00      	cmp	r3, #0
 8013778:	d10d      	bne.n	8013796 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d14d      	bne.n	801381e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	689b      	ldr	r3, [r3, #8]
 8013786:	4618      	mov	r0, r3
 8013788:	f001 f8c2 	bl	8014910 <xTaskPriorityDisinherit>
 801378c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2200      	movs	r2, #0
 8013792:	609a      	str	r2, [r3, #8]
 8013794:	e043      	b.n	801381e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d119      	bne.n	80137d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	6858      	ldr	r0, [r3, #4]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137a4:	461a      	mov	r2, r3
 80137a6:	68b9      	ldr	r1, [r7, #8]
 80137a8:	f002 fed1 	bl	801654e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	685a      	ldr	r2, [r3, #4]
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137b4:	441a      	add	r2, r3
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	685a      	ldr	r2, [r3, #4]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	689b      	ldr	r3, [r3, #8]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d32b      	bcc.n	801381e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681a      	ldr	r2, [r3, #0]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	605a      	str	r2, [r3, #4]
 80137ce:	e026      	b.n	801381e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	68d8      	ldr	r0, [r3, #12]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137d8:	461a      	mov	r2, r3
 80137da:	68b9      	ldr	r1, [r7, #8]
 80137dc:	f002 feb7 	bl	801654e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	68da      	ldr	r2, [r3, #12]
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137e8:	425b      	negs	r3, r3
 80137ea:	441a      	add	r2, r3
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	68da      	ldr	r2, [r3, #12]
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d207      	bcs.n	801380c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	689a      	ldr	r2, [r3, #8]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013804:	425b      	negs	r3, r3
 8013806:	441a      	add	r2, r3
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b02      	cmp	r3, #2
 8013810:	d105      	bne.n	801381e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d002      	beq.n	801381e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	3b01      	subs	r3, #1
 801381c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	1c5a      	adds	r2, r3, #1
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013826:	697b      	ldr	r3, [r7, #20]
}
 8013828:	4618      	mov	r0, r3
 801382a:	3718      	adds	r7, #24
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801383e:	2b00      	cmp	r3, #0
 8013840:	d018      	beq.n	8013874 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	68da      	ldr	r2, [r3, #12]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801384a:	441a      	add	r2, r3
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	68da      	ldr	r2, [r3, #12]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	429a      	cmp	r2, r3
 801385a:	d303      	bcc.n	8013864 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	68d9      	ldr	r1, [r3, #12]
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801386c:	461a      	mov	r2, r3
 801386e:	6838      	ldr	r0, [r7, #0]
 8013870:	f002 fe6d 	bl	801654e <memcpy>
	}
}
 8013874:	bf00      	nop
 8013876:	3708      	adds	r7, #8
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013884:	f001 fb12 	bl	8014eac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801388e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013890:	e011      	b.n	80138b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013896:	2b00      	cmp	r3, #0
 8013898:	d012      	beq.n	80138c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	3324      	adds	r3, #36	@ 0x24
 801389e:	4618      	mov	r0, r3
 80138a0:	f000 fd68 	bl	8014374 <xTaskRemoveFromEventList>
 80138a4:	4603      	mov	r3, r0
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d001      	beq.n	80138ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80138aa:	f000 feaf 	bl	801460c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80138ae:	7bfb      	ldrb	r3, [r7, #15]
 80138b0:	3b01      	subs	r3, #1
 80138b2:	b2db      	uxtb	r3, r3
 80138b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80138b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	dce9      	bgt.n	8013892 <prvUnlockQueue+0x16>
 80138be:	e000      	b.n	80138c2 <prvUnlockQueue+0x46>
					break;
 80138c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	22ff      	movs	r2, #255	@ 0xff
 80138c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80138ca:	f001 fb25 	bl	8014f18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80138ce:	f001 faed 	bl	8014eac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80138d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80138da:	e011      	b.n	8013900 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	691b      	ldr	r3, [r3, #16]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d012      	beq.n	801390a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	3310      	adds	r3, #16
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 fd43 	bl	8014374 <xTaskRemoveFromEventList>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d001      	beq.n	80138f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80138f4:	f000 fe8a 	bl	801460c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80138f8:	7bbb      	ldrb	r3, [r7, #14]
 80138fa:	3b01      	subs	r3, #1
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013904:	2b00      	cmp	r3, #0
 8013906:	dce9      	bgt.n	80138dc <prvUnlockQueue+0x60>
 8013908:	e000      	b.n	801390c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801390a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	22ff      	movs	r2, #255	@ 0xff
 8013910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013914:	f001 fb00 	bl	8014f18 <vPortExitCritical>
}
 8013918:	bf00      	nop
 801391a:	3710      	adds	r7, #16
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013928:	f001 fac0 	bl	8014eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013930:	2b00      	cmp	r3, #0
 8013932:	d102      	bne.n	801393a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013934:	2301      	movs	r3, #1
 8013936:	60fb      	str	r3, [r7, #12]
 8013938:	e001      	b.n	801393e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801393a:	2300      	movs	r3, #0
 801393c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801393e:	f001 faeb 	bl	8014f18 <vPortExitCritical>

	return xReturn;
 8013942:	68fb      	ldr	r3, [r7, #12]
}
 8013944:	4618      	mov	r0, r3
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013954:	f001 faaa 	bl	8014eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013960:	429a      	cmp	r2, r3
 8013962:	d102      	bne.n	801396a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013964:	2301      	movs	r3, #1
 8013966:	60fb      	str	r3, [r7, #12]
 8013968:	e001      	b.n	801396e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801396a:	2300      	movs	r3, #0
 801396c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801396e:	f001 fad3 	bl	8014f18 <vPortExitCritical>

	return xReturn;
 8013972:	68fb      	ldr	r3, [r7, #12]
}
 8013974:	4618      	mov	r0, r3
 8013976:	3710      	adds	r7, #16
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801397c:	b480      	push	{r7}
 801397e:	b085      	sub	sp, #20
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013984:	2300      	movs	r3, #0
 8013986:	60fb      	str	r3, [r7, #12]
 8013988:	e016      	b.n	80139b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801398a:	4a10      	ldr	r2, [pc, #64]	@ (80139cc <vQueueUnregisterQueue+0x50>)
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	00db      	lsls	r3, r3, #3
 8013990:	4413      	add	r3, r2
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	429a      	cmp	r2, r3
 8013998:	d10b      	bne.n	80139b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801399a:	4a0c      	ldr	r2, [pc, #48]	@ (80139cc <vQueueUnregisterQueue+0x50>)
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	2100      	movs	r1, #0
 80139a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80139a4:	4a09      	ldr	r2, [pc, #36]	@ (80139cc <vQueueUnregisterQueue+0x50>)
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	00db      	lsls	r3, r3, #3
 80139aa:	4413      	add	r3, r2
 80139ac:	2200      	movs	r2, #0
 80139ae:	605a      	str	r2, [r3, #4]
				break;
 80139b0:	e006      	b.n	80139c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	3301      	adds	r3, #1
 80139b6:	60fb      	str	r3, [r7, #12]
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80139bc:	d9e5      	bls.n	801398a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80139be:	bf00      	nop
 80139c0:	bf00      	nop
 80139c2:	3714      	adds	r7, #20
 80139c4:	46bd      	mov	sp, r7
 80139c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ca:	4770      	bx	lr
 80139cc:	2000c2c4 	.word	0x2000c2c4

080139d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b08e      	sub	sp, #56	@ 0x38
 80139d4:	af04      	add	r7, sp, #16
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
 80139dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80139de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10d      	bne.n	8013a00 <xTaskCreateStatic+0x30>
	__asm volatile
 80139e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139e8:	b672      	cpsid	i
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	b662      	cpsie	i
 80139f8:	623b      	str	r3, [r7, #32]
}
 80139fa:	bf00      	nop
 80139fc:	bf00      	nop
 80139fe:	e7fd      	b.n	80139fc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d10d      	bne.n	8013a22 <xTaskCreateStatic+0x52>
	__asm volatile
 8013a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a0a:	b672      	cpsid	i
 8013a0c:	f383 8811 	msr	BASEPRI, r3
 8013a10:	f3bf 8f6f 	isb	sy
 8013a14:	f3bf 8f4f 	dsb	sy
 8013a18:	b662      	cpsie	i
 8013a1a:	61fb      	str	r3, [r7, #28]
}
 8013a1c:	bf00      	nop
 8013a1e:	bf00      	nop
 8013a20:	e7fd      	b.n	8013a1e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013a22:	2360      	movs	r3, #96	@ 0x60
 8013a24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	2b60      	cmp	r3, #96	@ 0x60
 8013a2a:	d00d      	beq.n	8013a48 <xTaskCreateStatic+0x78>
	__asm volatile
 8013a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a30:	b672      	cpsid	i
 8013a32:	f383 8811 	msr	BASEPRI, r3
 8013a36:	f3bf 8f6f 	isb	sy
 8013a3a:	f3bf 8f4f 	dsb	sy
 8013a3e:	b662      	cpsie	i
 8013a40:	61bb      	str	r3, [r7, #24]
}
 8013a42:	bf00      	nop
 8013a44:	bf00      	nop
 8013a46:	e7fd      	b.n	8013a44 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013a48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d01e      	beq.n	8013a8e <xTaskCreateStatic+0xbe>
 8013a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d01b      	beq.n	8013a8e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a62:	2202      	movs	r2, #2
 8013a64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013a68:	2300      	movs	r3, #0
 8013a6a:	9303      	str	r3, [sp, #12]
 8013a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a6e:	9302      	str	r3, [sp, #8]
 8013a70:	f107 0314 	add.w	r3, r7, #20
 8013a74:	9301      	str	r3, [sp, #4]
 8013a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a78:	9300      	str	r3, [sp, #0]
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	687a      	ldr	r2, [r7, #4]
 8013a7e:	68b9      	ldr	r1, [r7, #8]
 8013a80:	68f8      	ldr	r0, [r7, #12]
 8013a82:	f000 f850 	bl	8013b26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013a88:	f000 f8e2 	bl	8013c50 <prvAddNewTaskToReadyList>
 8013a8c:	e001      	b.n	8013a92 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013a92:	697b      	ldr	r3, [r7, #20]
	}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3728      	adds	r7, #40	@ 0x28
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b08c      	sub	sp, #48	@ 0x30
 8013aa0:	af04      	add	r7, sp, #16
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	603b      	str	r3, [r7, #0]
 8013aa8:	4613      	mov	r3, r2
 8013aaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013aac:	88fb      	ldrh	r3, [r7, #6]
 8013aae:	009b      	lsls	r3, r3, #2
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f001 fb29 	bl	8015108 <pvPortMalloc>
 8013ab6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d00e      	beq.n	8013adc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013abe:	2060      	movs	r0, #96	@ 0x60
 8013ac0:	f001 fb22 	bl	8015108 <pvPortMalloc>
 8013ac4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d003      	beq.n	8013ad4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013acc:	69fb      	ldr	r3, [r7, #28]
 8013ace:	697a      	ldr	r2, [r7, #20]
 8013ad0:	631a      	str	r2, [r3, #48]	@ 0x30
 8013ad2:	e005      	b.n	8013ae0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013ad4:	6978      	ldr	r0, [r7, #20]
 8013ad6:	f001 fbe5 	bl	80152a4 <vPortFree>
 8013ada:	e001      	b.n	8013ae0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013adc:	2300      	movs	r3, #0
 8013ade:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013ae0:	69fb      	ldr	r3, [r7, #28]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d017      	beq.n	8013b16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013ae6:	69fb      	ldr	r3, [r7, #28]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013aee:	88fa      	ldrh	r2, [r7, #6]
 8013af0:	2300      	movs	r3, #0
 8013af2:	9303      	str	r3, [sp, #12]
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	9302      	str	r3, [sp, #8]
 8013af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013afa:	9301      	str	r3, [sp, #4]
 8013afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afe:	9300      	str	r3, [sp, #0]
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	68b9      	ldr	r1, [r7, #8]
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f000 f80e 	bl	8013b26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b0a:	69f8      	ldr	r0, [r7, #28]
 8013b0c:	f000 f8a0 	bl	8013c50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013b10:	2301      	movs	r3, #1
 8013b12:	61bb      	str	r3, [r7, #24]
 8013b14:	e002      	b.n	8013b1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013b16:	f04f 33ff 	mov.w	r3, #4294967295
 8013b1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013b1c:	69bb      	ldr	r3, [r7, #24]
	}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3720      	adds	r7, #32
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b088      	sub	sp, #32
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	60f8      	str	r0, [r7, #12]
 8013b2e:	60b9      	str	r1, [r7, #8]
 8013b30:	607a      	str	r2, [r7, #4]
 8013b32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b36:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	21a5      	movs	r1, #165	@ 0xa5
 8013b40:	f002 fc31 	bl	80163a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b48:	6879      	ldr	r1, [r7, #4]
 8013b4a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013b4e:	440b      	add	r3, r1
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	4413      	add	r3, r2
 8013b54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	f023 0307 	bic.w	r3, r3, #7
 8013b5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	f003 0307 	and.w	r3, r3, #7
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d00d      	beq.n	8013b84 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8013b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b6c:	b672      	cpsid	i
 8013b6e:	f383 8811 	msr	BASEPRI, r3
 8013b72:	f3bf 8f6f 	isb	sy
 8013b76:	f3bf 8f4f 	dsb	sy
 8013b7a:	b662      	cpsie	i
 8013b7c:	617b      	str	r3, [r7, #20]
}
 8013b7e:	bf00      	nop
 8013b80:	bf00      	nop
 8013b82:	e7fd      	b.n	8013b80 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d01f      	beq.n	8013bca <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	61fb      	str	r3, [r7, #28]
 8013b8e:	e012      	b.n	8013bb6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013b90:	68ba      	ldr	r2, [r7, #8]
 8013b92:	69fb      	ldr	r3, [r7, #28]
 8013b94:	4413      	add	r3, r2
 8013b96:	7819      	ldrb	r1, [r3, #0]
 8013b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	4413      	add	r3, r2
 8013b9e:	3334      	adds	r3, #52	@ 0x34
 8013ba0:	460a      	mov	r2, r1
 8013ba2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013ba4:	68ba      	ldr	r2, [r7, #8]
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	4413      	add	r3, r2
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d006      	beq.n	8013bbe <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013bb0:	69fb      	ldr	r3, [r7, #28]
 8013bb2:	3301      	adds	r3, #1
 8013bb4:	61fb      	str	r3, [r7, #28]
 8013bb6:	69fb      	ldr	r3, [r7, #28]
 8013bb8:	2b0f      	cmp	r3, #15
 8013bba:	d9e9      	bls.n	8013b90 <prvInitialiseNewTask+0x6a>
 8013bbc:	e000      	b.n	8013bc0 <prvInitialiseNewTask+0x9a>
			{
				break;
 8013bbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013bc8:	e003      	b.n	8013bd2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bcc:	2200      	movs	r2, #0
 8013bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bd4:	2b0b      	cmp	r3, #11
 8013bd6:	d901      	bls.n	8013bdc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013bd8:	230b      	movs	r3, #11
 8013bda:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013be0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013be4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013be6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bea:	2200      	movs	r2, #0
 8013bec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bf0:	3304      	adds	r3, #4
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fe ff2a 	bl	8012a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bfa:	3318      	adds	r3, #24
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fe ff25 	bl	8012a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c0a:	f1c3 020c 	rsb	r2, r3, #12
 8013c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c20:	2200      	movs	r2, #0
 8013c22:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c26:	2200      	movs	r2, #0
 8013c28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013c2c:	683a      	ldr	r2, [r7, #0]
 8013c2e:	68f9      	ldr	r1, [r7, #12]
 8013c30:	69b8      	ldr	r0, [r7, #24]
 8013c32:	f001 f82b 	bl	8014c8c <pxPortInitialiseStack>
 8013c36:	4602      	mov	r2, r0
 8013c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d002      	beq.n	8013c48 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c48:	bf00      	nop
 8013c4a:	3720      	adds	r7, #32
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b082      	sub	sp, #8
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013c58:	f001 f928 	bl	8014eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8013d10 <prvAddNewTaskToReadyList+0xc0>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	3301      	adds	r3, #1
 8013c62:	4a2b      	ldr	r2, [pc, #172]	@ (8013d10 <prvAddNewTaskToReadyList+0xc0>)
 8013c64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013c66:	4b2b      	ldr	r3, [pc, #172]	@ (8013d14 <prvAddNewTaskToReadyList+0xc4>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d109      	bne.n	8013c82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013c6e:	4a29      	ldr	r2, [pc, #164]	@ (8013d14 <prvAddNewTaskToReadyList+0xc4>)
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013c74:	4b26      	ldr	r3, [pc, #152]	@ (8013d10 <prvAddNewTaskToReadyList+0xc0>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	d110      	bne.n	8013c9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013c7c:	f000 fcea 	bl	8014654 <prvInitialiseTaskLists>
 8013c80:	e00d      	b.n	8013c9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013c82:	4b25      	ldr	r3, [pc, #148]	@ (8013d18 <prvAddNewTaskToReadyList+0xc8>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d109      	bne.n	8013c9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013c8a:	4b22      	ldr	r3, [pc, #136]	@ (8013d14 <prvAddNewTaskToReadyList+0xc4>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d802      	bhi.n	8013c9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013c98:	4a1e      	ldr	r2, [pc, #120]	@ (8013d14 <prvAddNewTaskToReadyList+0xc4>)
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8013d1c <prvAddNewTaskToReadyList+0xcc>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8013d1c <prvAddNewTaskToReadyList+0xcc>)
 8013ca6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8013d1c <prvAddNewTaskToReadyList+0xcc>)
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cb4:	2201      	movs	r2, #1
 8013cb6:	409a      	lsls	r2, r3
 8013cb8:	4b19      	ldr	r3, [pc, #100]	@ (8013d20 <prvAddNewTaskToReadyList+0xd0>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	4313      	orrs	r3, r2
 8013cbe:	4a18      	ldr	r2, [pc, #96]	@ (8013d20 <prvAddNewTaskToReadyList+0xd0>)
 8013cc0:	6013      	str	r3, [r2, #0]
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cc6:	4613      	mov	r3, r2
 8013cc8:	009b      	lsls	r3, r3, #2
 8013cca:	4413      	add	r3, r2
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	4a15      	ldr	r2, [pc, #84]	@ (8013d24 <prvAddNewTaskToReadyList+0xd4>)
 8013cd0:	441a      	add	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	3304      	adds	r3, #4
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	4610      	mov	r0, r2
 8013cda:	f7fe fec4 	bl	8012a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013cde:	f001 f91b 	bl	8014f18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8013d18 <prvAddNewTaskToReadyList+0xc8>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d00e      	beq.n	8013d08 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013cea:	4b0a      	ldr	r3, [pc, #40]	@ (8013d14 <prvAddNewTaskToReadyList+0xc4>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d207      	bcs.n	8013d08 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8013d28 <prvAddNewTaskToReadyList+0xd8>)
 8013cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cfe:	601a      	str	r2, [r3, #0]
 8013d00:	f3bf 8f4f 	dsb	sy
 8013d04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d08:	bf00      	nop
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}
 8013d10:	2000cc20 	.word	0x2000cc20
 8013d14:	2000cabc 	.word	0x2000cabc
 8013d18:	2000cc2c 	.word	0x2000cc2c
 8013d1c:	2000cc3c 	.word	0x2000cc3c
 8013d20:	2000cc28 	.word	0x2000cc28
 8013d24:	2000cac0 	.word	0x2000cac0
 8013d28:	e000ed04 	.word	0xe000ed04

08013d2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013d34:	2300      	movs	r3, #0
 8013d36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d01a      	beq.n	8013d74 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013d3e:	4b15      	ldr	r3, [pc, #84]	@ (8013d94 <vTaskDelay+0x68>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d00d      	beq.n	8013d62 <vTaskDelay+0x36>
	__asm volatile
 8013d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d4a:	b672      	cpsid	i
 8013d4c:	f383 8811 	msr	BASEPRI, r3
 8013d50:	f3bf 8f6f 	isb	sy
 8013d54:	f3bf 8f4f 	dsb	sy
 8013d58:	b662      	cpsie	i
 8013d5a:	60bb      	str	r3, [r7, #8]
}
 8013d5c:	bf00      	nop
 8013d5e:	bf00      	nop
 8013d60:	e7fd      	b.n	8013d5e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013d62:	f000 f883 	bl	8013e6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013d66:	2100      	movs	r1, #0
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f000 ff29 	bl	8014bc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013d6e:	f000 f88b 	bl	8013e88 <xTaskResumeAll>
 8013d72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d107      	bne.n	8013d8a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8013d7a:	4b07      	ldr	r3, [pc, #28]	@ (8013d98 <vTaskDelay+0x6c>)
 8013d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d80:	601a      	str	r2, [r3, #0]
 8013d82:	f3bf 8f4f 	dsb	sy
 8013d86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013d8a:	bf00      	nop
 8013d8c:	3710      	adds	r7, #16
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	2000cc48 	.word	0x2000cc48
 8013d98:	e000ed04 	.word	0xe000ed04

08013d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b08a      	sub	sp, #40	@ 0x28
 8013da0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013da6:	2300      	movs	r3, #0
 8013da8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013daa:	463a      	mov	r2, r7
 8013dac:	1d39      	adds	r1, r7, #4
 8013dae:	f107 0308 	add.w	r3, r7, #8
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7f1 f892 	bl	8004edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013db8:	6839      	ldr	r1, [r7, #0]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	68ba      	ldr	r2, [r7, #8]
 8013dbe:	9202      	str	r2, [sp, #8]
 8013dc0:	9301      	str	r3, [sp, #4]
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	9300      	str	r3, [sp, #0]
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	460a      	mov	r2, r1
 8013dca:	4922      	ldr	r1, [pc, #136]	@ (8013e54 <vTaskStartScheduler+0xb8>)
 8013dcc:	4822      	ldr	r0, [pc, #136]	@ (8013e58 <vTaskStartScheduler+0xbc>)
 8013dce:	f7ff fdff 	bl	80139d0 <xTaskCreateStatic>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	4a21      	ldr	r2, [pc, #132]	@ (8013e5c <vTaskStartScheduler+0xc0>)
 8013dd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013dd8:	4b20      	ldr	r3, [pc, #128]	@ (8013e5c <vTaskStartScheduler+0xc0>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d002      	beq.n	8013de6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013de0:	2301      	movs	r3, #1
 8013de2:	617b      	str	r3, [r7, #20]
 8013de4:	e001      	b.n	8013dea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013de6:	2300      	movs	r3, #0
 8013de8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	d11a      	bne.n	8013e26 <vTaskStartScheduler+0x8a>
	__asm volatile
 8013df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013df4:	b672      	cpsid	i
 8013df6:	f383 8811 	msr	BASEPRI, r3
 8013dfa:	f3bf 8f6f 	isb	sy
 8013dfe:	f3bf 8f4f 	dsb	sy
 8013e02:	b662      	cpsie	i
 8013e04:	613b      	str	r3, [r7, #16]
}
 8013e06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e08:	4b15      	ldr	r3, [pc, #84]	@ (8013e60 <vTaskStartScheduler+0xc4>)
 8013e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e10:	4b14      	ldr	r3, [pc, #80]	@ (8013e64 <vTaskStartScheduler+0xc8>)
 8013e12:	2201      	movs	r2, #1
 8013e14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e16:	4b14      	ldr	r3, [pc, #80]	@ (8013e68 <vTaskStartScheduler+0xcc>)
 8013e18:	2200      	movs	r2, #0
 8013e1a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013e1c:	f7f1 f844 	bl	8004ea8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e20:	f000 ffc6 	bl	8014db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e24:	e011      	b.n	8013e4a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e2c:	d10d      	bne.n	8013e4a <vTaskStartScheduler+0xae>
	__asm volatile
 8013e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e32:	b672      	cpsid	i
 8013e34:	f383 8811 	msr	BASEPRI, r3
 8013e38:	f3bf 8f6f 	isb	sy
 8013e3c:	f3bf 8f4f 	dsb	sy
 8013e40:	b662      	cpsie	i
 8013e42:	60fb      	str	r3, [r7, #12]
}
 8013e44:	bf00      	nop
 8013e46:	bf00      	nop
 8013e48:	e7fd      	b.n	8013e46 <vTaskStartScheduler+0xaa>
}
 8013e4a:	bf00      	nop
 8013e4c:	3718      	adds	r7, #24
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	08018b4c 	.word	0x08018b4c
 8013e58:	08014625 	.word	0x08014625
 8013e5c:	2000cc44 	.word	0x2000cc44
 8013e60:	2000cc40 	.word	0x2000cc40
 8013e64:	2000cc2c 	.word	0x2000cc2c
 8013e68:	2000cc24 	.word	0x2000cc24

08013e6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013e70:	4b04      	ldr	r3, [pc, #16]	@ (8013e84 <vTaskSuspendAll+0x18>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	3301      	adds	r3, #1
 8013e76:	4a03      	ldr	r2, [pc, #12]	@ (8013e84 <vTaskSuspendAll+0x18>)
 8013e78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013e7a:	bf00      	nop
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr
 8013e84:	2000cc48 	.word	0x2000cc48

08013e88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013e92:	2300      	movs	r3, #0
 8013e94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013e96:	4b43      	ldr	r3, [pc, #268]	@ (8013fa4 <xTaskResumeAll+0x11c>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d10d      	bne.n	8013eba <xTaskResumeAll+0x32>
	__asm volatile
 8013e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ea2:	b672      	cpsid	i
 8013ea4:	f383 8811 	msr	BASEPRI, r3
 8013ea8:	f3bf 8f6f 	isb	sy
 8013eac:	f3bf 8f4f 	dsb	sy
 8013eb0:	b662      	cpsie	i
 8013eb2:	603b      	str	r3, [r7, #0]
}
 8013eb4:	bf00      	nop
 8013eb6:	bf00      	nop
 8013eb8:	e7fd      	b.n	8013eb6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013eba:	f000 fff7 	bl	8014eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ebe:	4b39      	ldr	r3, [pc, #228]	@ (8013fa4 <xTaskResumeAll+0x11c>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	3b01      	subs	r3, #1
 8013ec4:	4a37      	ldr	r2, [pc, #220]	@ (8013fa4 <xTaskResumeAll+0x11c>)
 8013ec6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ec8:	4b36      	ldr	r3, [pc, #216]	@ (8013fa4 <xTaskResumeAll+0x11c>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d161      	bne.n	8013f94 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013ed0:	4b35      	ldr	r3, [pc, #212]	@ (8013fa8 <xTaskResumeAll+0x120>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d05d      	beq.n	8013f94 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ed8:	e02e      	b.n	8013f38 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013eda:	4b34      	ldr	r3, [pc, #208]	@ (8013fac <xTaskResumeAll+0x124>)
 8013edc:	68db      	ldr	r3, [r3, #12]
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	3318      	adds	r3, #24
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fe fe1a 	bl	8012b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	3304      	adds	r3, #4
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7fe fe15 	bl	8012b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013efa:	2201      	movs	r2, #1
 8013efc:	409a      	lsls	r2, r3
 8013efe:	4b2c      	ldr	r3, [pc, #176]	@ (8013fb0 <xTaskResumeAll+0x128>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	4313      	orrs	r3, r2
 8013f04:	4a2a      	ldr	r2, [pc, #168]	@ (8013fb0 <xTaskResumeAll+0x128>)
 8013f06:	6013      	str	r3, [r2, #0]
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f0c:	4613      	mov	r3, r2
 8013f0e:	009b      	lsls	r3, r3, #2
 8013f10:	4413      	add	r3, r2
 8013f12:	009b      	lsls	r3, r3, #2
 8013f14:	4a27      	ldr	r2, [pc, #156]	@ (8013fb4 <xTaskResumeAll+0x12c>)
 8013f16:	441a      	add	r2, r3
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	3304      	adds	r3, #4
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	4610      	mov	r0, r2
 8013f20:	f7fe fda1 	bl	8012a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f28:	4b23      	ldr	r3, [pc, #140]	@ (8013fb8 <xTaskResumeAll+0x130>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d302      	bcc.n	8013f38 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013f32:	4b22      	ldr	r3, [pc, #136]	@ (8013fbc <xTaskResumeAll+0x134>)
 8013f34:	2201      	movs	r2, #1
 8013f36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f38:	4b1c      	ldr	r3, [pc, #112]	@ (8013fac <xTaskResumeAll+0x124>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d1cc      	bne.n	8013eda <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d001      	beq.n	8013f4a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f46:	f000 fc25 	bl	8014794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8013fc0 <xTaskResumeAll+0x138>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d010      	beq.n	8013f78 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f56:	f000 f847 	bl	8013fe8 <xTaskIncrementTick>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d002      	beq.n	8013f66 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013f60:	4b16      	ldr	r3, [pc, #88]	@ (8013fbc <xTaskResumeAll+0x134>)
 8013f62:	2201      	movs	r2, #1
 8013f64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d1f1      	bne.n	8013f56 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013f72:	4b13      	ldr	r3, [pc, #76]	@ (8013fc0 <xTaskResumeAll+0x138>)
 8013f74:	2200      	movs	r2, #0
 8013f76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013f78:	4b10      	ldr	r3, [pc, #64]	@ (8013fbc <xTaskResumeAll+0x134>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d009      	beq.n	8013f94 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013f80:	2301      	movs	r3, #1
 8013f82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013f84:	4b0f      	ldr	r3, [pc, #60]	@ (8013fc4 <xTaskResumeAll+0x13c>)
 8013f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f8a:	601a      	str	r2, [r3, #0]
 8013f8c:	f3bf 8f4f 	dsb	sy
 8013f90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013f94:	f000 ffc0 	bl	8014f18 <vPortExitCritical>

	return xAlreadyYielded;
 8013f98:	68bb      	ldr	r3, [r7, #8]
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3710      	adds	r7, #16
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	2000cc48 	.word	0x2000cc48
 8013fa8:	2000cc20 	.word	0x2000cc20
 8013fac:	2000cbe0 	.word	0x2000cbe0
 8013fb0:	2000cc28 	.word	0x2000cc28
 8013fb4:	2000cac0 	.word	0x2000cac0
 8013fb8:	2000cabc 	.word	0x2000cabc
 8013fbc:	2000cc34 	.word	0x2000cc34
 8013fc0:	2000cc30 	.word	0x2000cc30
 8013fc4:	e000ed04 	.word	0xe000ed04

08013fc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013fc8:	b480      	push	{r7}
 8013fca:	b083      	sub	sp, #12
 8013fcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013fce:	4b05      	ldr	r3, [pc, #20]	@ (8013fe4 <xTaskGetTickCount+0x1c>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013fd4:	687b      	ldr	r3, [r7, #4]
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	370c      	adds	r7, #12
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr
 8013fe2:	bf00      	nop
 8013fe4:	2000cc24 	.word	0x2000cc24

08013fe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b086      	sub	sp, #24
 8013fec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ff2:	4b50      	ldr	r3, [pc, #320]	@ (8014134 <xTaskIncrementTick+0x14c>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	f040 808b 	bne.w	8014112 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8014138 <xTaskIncrementTick+0x150>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	3301      	adds	r3, #1
 8014002:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014004:	4a4c      	ldr	r2, [pc, #304]	@ (8014138 <xTaskIncrementTick+0x150>)
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d123      	bne.n	8014058 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8014010:	4b4a      	ldr	r3, [pc, #296]	@ (801413c <xTaskIncrementTick+0x154>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00d      	beq.n	8014036 <xTaskIncrementTick+0x4e>
	__asm volatile
 801401a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801401e:	b672      	cpsid	i
 8014020:	f383 8811 	msr	BASEPRI, r3
 8014024:	f3bf 8f6f 	isb	sy
 8014028:	f3bf 8f4f 	dsb	sy
 801402c:	b662      	cpsie	i
 801402e:	603b      	str	r3, [r7, #0]
}
 8014030:	bf00      	nop
 8014032:	bf00      	nop
 8014034:	e7fd      	b.n	8014032 <xTaskIncrementTick+0x4a>
 8014036:	4b41      	ldr	r3, [pc, #260]	@ (801413c <xTaskIncrementTick+0x154>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	60fb      	str	r3, [r7, #12]
 801403c:	4b40      	ldr	r3, [pc, #256]	@ (8014140 <xTaskIncrementTick+0x158>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4a3e      	ldr	r2, [pc, #248]	@ (801413c <xTaskIncrementTick+0x154>)
 8014042:	6013      	str	r3, [r2, #0]
 8014044:	4a3e      	ldr	r2, [pc, #248]	@ (8014140 <xTaskIncrementTick+0x158>)
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	6013      	str	r3, [r2, #0]
 801404a:	4b3e      	ldr	r3, [pc, #248]	@ (8014144 <xTaskIncrementTick+0x15c>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	3301      	adds	r3, #1
 8014050:	4a3c      	ldr	r2, [pc, #240]	@ (8014144 <xTaskIncrementTick+0x15c>)
 8014052:	6013      	str	r3, [r2, #0]
 8014054:	f000 fb9e 	bl	8014794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014058:	4b3b      	ldr	r3, [pc, #236]	@ (8014148 <xTaskIncrementTick+0x160>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	693a      	ldr	r2, [r7, #16]
 801405e:	429a      	cmp	r2, r3
 8014060:	d348      	bcc.n	80140f4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014062:	4b36      	ldr	r3, [pc, #216]	@ (801413c <xTaskIncrementTick+0x154>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d104      	bne.n	8014076 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801406c:	4b36      	ldr	r3, [pc, #216]	@ (8014148 <xTaskIncrementTick+0x160>)
 801406e:	f04f 32ff 	mov.w	r2, #4294967295
 8014072:	601a      	str	r2, [r3, #0]
					break;
 8014074:	e03e      	b.n	80140f4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014076:	4b31      	ldr	r3, [pc, #196]	@ (801413c <xTaskIncrementTick+0x154>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014086:	693a      	ldr	r2, [r7, #16]
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	429a      	cmp	r2, r3
 801408c:	d203      	bcs.n	8014096 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801408e:	4a2e      	ldr	r2, [pc, #184]	@ (8014148 <xTaskIncrementTick+0x160>)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014094:	e02e      	b.n	80140f4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	3304      	adds	r3, #4
 801409a:	4618      	mov	r0, r3
 801409c:	f7fe fd40 	bl	8012b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d004      	beq.n	80140b2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	3318      	adds	r3, #24
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7fe fd37 	bl	8012b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140b6:	2201      	movs	r2, #1
 80140b8:	409a      	lsls	r2, r3
 80140ba:	4b24      	ldr	r3, [pc, #144]	@ (801414c <xTaskIncrementTick+0x164>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	4313      	orrs	r3, r2
 80140c0:	4a22      	ldr	r2, [pc, #136]	@ (801414c <xTaskIncrementTick+0x164>)
 80140c2:	6013      	str	r3, [r2, #0]
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140c8:	4613      	mov	r3, r2
 80140ca:	009b      	lsls	r3, r3, #2
 80140cc:	4413      	add	r3, r2
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	4a1f      	ldr	r2, [pc, #124]	@ (8014150 <xTaskIncrementTick+0x168>)
 80140d2:	441a      	add	r2, r3
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	3304      	adds	r3, #4
 80140d8:	4619      	mov	r1, r3
 80140da:	4610      	mov	r0, r2
 80140dc:	f7fe fcc3 	bl	8012a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140e4:	4b1b      	ldr	r3, [pc, #108]	@ (8014154 <xTaskIncrementTick+0x16c>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d3b9      	bcc.n	8014062 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80140ee:	2301      	movs	r3, #1
 80140f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140f2:	e7b6      	b.n	8014062 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80140f4:	4b17      	ldr	r3, [pc, #92]	@ (8014154 <xTaskIncrementTick+0x16c>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140fa:	4915      	ldr	r1, [pc, #84]	@ (8014150 <xTaskIncrementTick+0x168>)
 80140fc:	4613      	mov	r3, r2
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	4413      	add	r3, r2
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	440b      	add	r3, r1
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	2b01      	cmp	r3, #1
 801410a:	d907      	bls.n	801411c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 801410c:	2301      	movs	r3, #1
 801410e:	617b      	str	r3, [r7, #20]
 8014110:	e004      	b.n	801411c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014112:	4b11      	ldr	r3, [pc, #68]	@ (8014158 <xTaskIncrementTick+0x170>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	3301      	adds	r3, #1
 8014118:	4a0f      	ldr	r2, [pc, #60]	@ (8014158 <xTaskIncrementTick+0x170>)
 801411a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801411c:	4b0f      	ldr	r3, [pc, #60]	@ (801415c <xTaskIncrementTick+0x174>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d001      	beq.n	8014128 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014124:	2301      	movs	r3, #1
 8014126:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014128:	697b      	ldr	r3, [r7, #20]
}
 801412a:	4618      	mov	r0, r3
 801412c:	3718      	adds	r7, #24
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	2000cc48 	.word	0x2000cc48
 8014138:	2000cc24 	.word	0x2000cc24
 801413c:	2000cbd8 	.word	0x2000cbd8
 8014140:	2000cbdc 	.word	0x2000cbdc
 8014144:	2000cc38 	.word	0x2000cc38
 8014148:	2000cc40 	.word	0x2000cc40
 801414c:	2000cc28 	.word	0x2000cc28
 8014150:	2000cac0 	.word	0x2000cac0
 8014154:	2000cabc 	.word	0x2000cabc
 8014158:	2000cc30 	.word	0x2000cc30
 801415c:	2000cc34 	.word	0x2000cc34

08014160 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b088      	sub	sp, #32
 8014164:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014166:	4b47      	ldr	r3, [pc, #284]	@ (8014284 <vTaskSwitchContext+0x124>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d003      	beq.n	8014176 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801416e:	4b46      	ldr	r3, [pc, #280]	@ (8014288 <vTaskSwitchContext+0x128>)
 8014170:	2201      	movs	r2, #1
 8014172:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014174:	e082      	b.n	801427c <vTaskSwitchContext+0x11c>
		xYieldPending = pdFALSE;
 8014176:	4b44      	ldr	r3, [pc, #272]	@ (8014288 <vTaskSwitchContext+0x128>)
 8014178:	2200      	movs	r2, #0
 801417a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801417c:	f7f0 fe9b 	bl	8004eb6 <getRunTimeCounterValue>
 8014180:	4603      	mov	r3, r0
 8014182:	4a42      	ldr	r2, [pc, #264]	@ (801428c <vTaskSwitchContext+0x12c>)
 8014184:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8014186:	4b41      	ldr	r3, [pc, #260]	@ (801428c <vTaskSwitchContext+0x12c>)
 8014188:	681a      	ldr	r2, [r3, #0]
 801418a:	4b41      	ldr	r3, [pc, #260]	@ (8014290 <vTaskSwitchContext+0x130>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	429a      	cmp	r2, r3
 8014190:	d909      	bls.n	80141a6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8014192:	4b40      	ldr	r3, [pc, #256]	@ (8014294 <vTaskSwitchContext+0x134>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014198:	4a3c      	ldr	r2, [pc, #240]	@ (801428c <vTaskSwitchContext+0x12c>)
 801419a:	6810      	ldr	r0, [r2, #0]
 801419c:	4a3c      	ldr	r2, [pc, #240]	@ (8014290 <vTaskSwitchContext+0x130>)
 801419e:	6812      	ldr	r2, [r2, #0]
 80141a0:	1a82      	subs	r2, r0, r2
 80141a2:	440a      	add	r2, r1
 80141a4:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80141a6:	4b39      	ldr	r3, [pc, #228]	@ (801428c <vTaskSwitchContext+0x12c>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	4a39      	ldr	r2, [pc, #228]	@ (8014290 <vTaskSwitchContext+0x130>)
 80141ac:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80141ae:	4b39      	ldr	r3, [pc, #228]	@ (8014294 <vTaskSwitchContext+0x134>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141b4:	61fb      	str	r3, [r7, #28]
 80141b6:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80141ba:	61bb      	str	r3, [r7, #24]
 80141bc:	69fb      	ldr	r3, [r7, #28]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	69ba      	ldr	r2, [r7, #24]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d111      	bne.n	80141ea <vTaskSwitchContext+0x8a>
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	3304      	adds	r3, #4
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	69ba      	ldr	r2, [r7, #24]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d10b      	bne.n	80141ea <vTaskSwitchContext+0x8a>
 80141d2:	69fb      	ldr	r3, [r7, #28]
 80141d4:	3308      	adds	r3, #8
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	69ba      	ldr	r2, [r7, #24]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d105      	bne.n	80141ea <vTaskSwitchContext+0x8a>
 80141de:	69fb      	ldr	r3, [r7, #28]
 80141e0:	330c      	adds	r3, #12
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	69ba      	ldr	r2, [r7, #24]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d008      	beq.n	80141fc <vTaskSwitchContext+0x9c>
 80141ea:	4b2a      	ldr	r3, [pc, #168]	@ (8014294 <vTaskSwitchContext+0x134>)
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	4b29      	ldr	r3, [pc, #164]	@ (8014294 <vTaskSwitchContext+0x134>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	3334      	adds	r3, #52	@ 0x34
 80141f4:	4619      	mov	r1, r3
 80141f6:	4610      	mov	r0, r2
 80141f8:	f7f0 fe65 	bl	8004ec6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141fc:	4b26      	ldr	r3, [pc, #152]	@ (8014298 <vTaskSwitchContext+0x138>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	fab3 f383 	clz	r3, r3
 8014208:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801420a:	7afb      	ldrb	r3, [r7, #11]
 801420c:	f1c3 031f 	rsb	r3, r3, #31
 8014210:	617b      	str	r3, [r7, #20]
 8014212:	4922      	ldr	r1, [pc, #136]	@ (801429c <vTaskSwitchContext+0x13c>)
 8014214:	697a      	ldr	r2, [r7, #20]
 8014216:	4613      	mov	r3, r2
 8014218:	009b      	lsls	r3, r3, #2
 801421a:	4413      	add	r3, r2
 801421c:	009b      	lsls	r3, r3, #2
 801421e:	440b      	add	r3, r1
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d10d      	bne.n	8014242 <vTaskSwitchContext+0xe2>
	__asm volatile
 8014226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801422a:	b672      	cpsid	i
 801422c:	f383 8811 	msr	BASEPRI, r3
 8014230:	f3bf 8f6f 	isb	sy
 8014234:	f3bf 8f4f 	dsb	sy
 8014238:	b662      	cpsie	i
 801423a:	607b      	str	r3, [r7, #4]
}
 801423c:	bf00      	nop
 801423e:	bf00      	nop
 8014240:	e7fd      	b.n	801423e <vTaskSwitchContext+0xde>
 8014242:	697a      	ldr	r2, [r7, #20]
 8014244:	4613      	mov	r3, r2
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	4413      	add	r3, r2
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	4a13      	ldr	r2, [pc, #76]	@ (801429c <vTaskSwitchContext+0x13c>)
 801424e:	4413      	add	r3, r2
 8014250:	613b      	str	r3, [r7, #16]
 8014252:	693b      	ldr	r3, [r7, #16]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	685a      	ldr	r2, [r3, #4]
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	605a      	str	r2, [r3, #4]
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	685a      	ldr	r2, [r3, #4]
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	3308      	adds	r3, #8
 8014264:	429a      	cmp	r2, r3
 8014266:	d104      	bne.n	8014272 <vTaskSwitchContext+0x112>
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	685a      	ldr	r2, [r3, #4]
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	605a      	str	r2, [r3, #4]
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	4a06      	ldr	r2, [pc, #24]	@ (8014294 <vTaskSwitchContext+0x134>)
 801427a:	6013      	str	r3, [r2, #0]
}
 801427c:	bf00      	nop
 801427e:	3720      	adds	r7, #32
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	2000cc48 	.word	0x2000cc48
 8014288:	2000cc34 	.word	0x2000cc34
 801428c:	2000cc50 	.word	0x2000cc50
 8014290:	2000cc4c 	.word	0x2000cc4c
 8014294:	2000cabc 	.word	0x2000cabc
 8014298:	2000cc28 	.word	0x2000cc28
 801429c:	2000cac0 	.word	0x2000cac0

080142a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b084      	sub	sp, #16
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d10d      	bne.n	80142cc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80142b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142b4:	b672      	cpsid	i
 80142b6:	f383 8811 	msr	BASEPRI, r3
 80142ba:	f3bf 8f6f 	isb	sy
 80142be:	f3bf 8f4f 	dsb	sy
 80142c2:	b662      	cpsie	i
 80142c4:	60fb      	str	r3, [r7, #12]
}
 80142c6:	bf00      	nop
 80142c8:	bf00      	nop
 80142ca:	e7fd      	b.n	80142c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142cc:	4b07      	ldr	r3, [pc, #28]	@ (80142ec <vTaskPlaceOnEventList+0x4c>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	3318      	adds	r3, #24
 80142d2:	4619      	mov	r1, r3
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f7fe fbea 	bl	8012aae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80142da:	2101      	movs	r1, #1
 80142dc:	6838      	ldr	r0, [r7, #0]
 80142de:	f000 fc6f 	bl	8014bc0 <prvAddCurrentTaskToDelayedList>
}
 80142e2:	bf00      	nop
 80142e4:	3710      	adds	r7, #16
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	2000cabc 	.word	0x2000cabc

080142f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b086      	sub	sp, #24
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	60b9      	str	r1, [r7, #8]
 80142fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d10d      	bne.n	801431e <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 8014302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014306:	b672      	cpsid	i
 8014308:	f383 8811 	msr	BASEPRI, r3
 801430c:	f3bf 8f6f 	isb	sy
 8014310:	f3bf 8f4f 	dsb	sy
 8014314:	b662      	cpsie	i
 8014316:	617b      	str	r3, [r7, #20]
}
 8014318:	bf00      	nop
 801431a:	bf00      	nop
 801431c:	e7fd      	b.n	801431a <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801431e:	4b13      	ldr	r3, [pc, #76]	@ (801436c <vTaskPlaceOnUnorderedEventList+0x7c>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d10d      	bne.n	8014342 <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801432a:	b672      	cpsid	i
 801432c:	f383 8811 	msr	BASEPRI, r3
 8014330:	f3bf 8f6f 	isb	sy
 8014334:	f3bf 8f4f 	dsb	sy
 8014338:	b662      	cpsie	i
 801433a:	613b      	str	r3, [r7, #16]
}
 801433c:	bf00      	nop
 801433e:	bf00      	nop
 8014340:	e7fd      	b.n	801433e <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014342:	4b0b      	ldr	r3, [pc, #44]	@ (8014370 <vTaskPlaceOnUnorderedEventList+0x80>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	68ba      	ldr	r2, [r7, #8]
 8014348:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801434c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801434e:	4b08      	ldr	r3, [pc, #32]	@ (8014370 <vTaskPlaceOnUnorderedEventList+0x80>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	3318      	adds	r3, #24
 8014354:	4619      	mov	r1, r3
 8014356:	68f8      	ldr	r0, [r7, #12]
 8014358:	f7fe fb85 	bl	8012a66 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801435c:	2101      	movs	r1, #1
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 fc2e 	bl	8014bc0 <prvAddCurrentTaskToDelayedList>
}
 8014364:	bf00      	nop
 8014366:	3718      	adds	r7, #24
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	2000cc48 	.word	0x2000cc48
 8014370:	2000cabc 	.word	0x2000cabc

08014374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b086      	sub	sp, #24
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	68db      	ldr	r3, [r3, #12]
 8014382:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d10d      	bne.n	80143a6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801438e:	b672      	cpsid	i
 8014390:	f383 8811 	msr	BASEPRI, r3
 8014394:	f3bf 8f6f 	isb	sy
 8014398:	f3bf 8f4f 	dsb	sy
 801439c:	b662      	cpsie	i
 801439e:	60fb      	str	r3, [r7, #12]
}
 80143a0:	bf00      	nop
 80143a2:	bf00      	nop
 80143a4:	e7fd      	b.n	80143a2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	3318      	adds	r3, #24
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7fe fbb8 	bl	8012b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143b0:	4b1d      	ldr	r3, [pc, #116]	@ (8014428 <xTaskRemoveFromEventList+0xb4>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d11c      	bne.n	80143f2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	3304      	adds	r3, #4
 80143bc:	4618      	mov	r0, r3
 80143be:	f7fe fbaf 	bl	8012b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143c6:	2201      	movs	r2, #1
 80143c8:	409a      	lsls	r2, r3
 80143ca:	4b18      	ldr	r3, [pc, #96]	@ (801442c <xTaskRemoveFromEventList+0xb8>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	4313      	orrs	r3, r2
 80143d0:	4a16      	ldr	r2, [pc, #88]	@ (801442c <xTaskRemoveFromEventList+0xb8>)
 80143d2:	6013      	str	r3, [r2, #0]
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143d8:	4613      	mov	r3, r2
 80143da:	009b      	lsls	r3, r3, #2
 80143dc:	4413      	add	r3, r2
 80143de:	009b      	lsls	r3, r3, #2
 80143e0:	4a13      	ldr	r2, [pc, #76]	@ (8014430 <xTaskRemoveFromEventList+0xbc>)
 80143e2:	441a      	add	r2, r3
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	3304      	adds	r3, #4
 80143e8:	4619      	mov	r1, r3
 80143ea:	4610      	mov	r0, r2
 80143ec:	f7fe fb3b 	bl	8012a66 <vListInsertEnd>
 80143f0:	e005      	b.n	80143fe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	3318      	adds	r3, #24
 80143f6:	4619      	mov	r1, r3
 80143f8:	480e      	ldr	r0, [pc, #56]	@ (8014434 <xTaskRemoveFromEventList+0xc0>)
 80143fa:	f7fe fb34 	bl	8012a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80143fe:	693b      	ldr	r3, [r7, #16]
 8014400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014402:	4b0d      	ldr	r3, [pc, #52]	@ (8014438 <xTaskRemoveFromEventList+0xc4>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014408:	429a      	cmp	r2, r3
 801440a:	d905      	bls.n	8014418 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801440c:	2301      	movs	r3, #1
 801440e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014410:	4b0a      	ldr	r3, [pc, #40]	@ (801443c <xTaskRemoveFromEventList+0xc8>)
 8014412:	2201      	movs	r2, #1
 8014414:	601a      	str	r2, [r3, #0]
 8014416:	e001      	b.n	801441c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014418:	2300      	movs	r3, #0
 801441a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801441c:	697b      	ldr	r3, [r7, #20]
}
 801441e:	4618      	mov	r0, r3
 8014420:	3718      	adds	r7, #24
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
 8014426:	bf00      	nop
 8014428:	2000cc48 	.word	0x2000cc48
 801442c:	2000cc28 	.word	0x2000cc28
 8014430:	2000cac0 	.word	0x2000cac0
 8014434:	2000cbe0 	.word	0x2000cbe0
 8014438:	2000cabc 	.word	0x2000cabc
 801443c:	2000cc34 	.word	0x2000cc34

08014440 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b086      	sub	sp, #24
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801444a:	4b2c      	ldr	r3, [pc, #176]	@ (80144fc <vTaskRemoveFromUnorderedEventList+0xbc>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d10d      	bne.n	801446e <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 8014452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014456:	b672      	cpsid	i
 8014458:	f383 8811 	msr	BASEPRI, r3
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	f3bf 8f4f 	dsb	sy
 8014464:	b662      	cpsie	i
 8014466:	613b      	str	r3, [r7, #16]
}
 8014468:	bf00      	nop
 801446a:	bf00      	nop
 801446c:	e7fd      	b.n	801446a <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	68db      	ldr	r3, [r3, #12]
 801447c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d10d      	bne.n	80144a0 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 8014484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014488:	b672      	cpsid	i
 801448a:	f383 8811 	msr	BASEPRI, r3
 801448e:	f3bf 8f6f 	isb	sy
 8014492:	f3bf 8f4f 	dsb	sy
 8014496:	b662      	cpsie	i
 8014498:	60fb      	str	r3, [r7, #12]
}
 801449a:	bf00      	nop
 801449c:	bf00      	nop
 801449e:	e7fd      	b.n	801449c <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 80144a0:	6878      	ldr	r0, [r7, #4]
 80144a2:	f7fe fb3d 	bl	8012b20 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	3304      	adds	r3, #4
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7fe fb38 	bl	8012b20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144b4:	2201      	movs	r2, #1
 80144b6:	409a      	lsls	r2, r3
 80144b8:	4b11      	ldr	r3, [pc, #68]	@ (8014500 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	4313      	orrs	r3, r2
 80144be:	4a10      	ldr	r2, [pc, #64]	@ (8014500 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80144c0:	6013      	str	r3, [r2, #0]
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144c6:	4613      	mov	r3, r2
 80144c8:	009b      	lsls	r3, r3, #2
 80144ca:	4413      	add	r3, r2
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	4a0d      	ldr	r2, [pc, #52]	@ (8014504 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80144d0:	441a      	add	r2, r3
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	3304      	adds	r3, #4
 80144d6:	4619      	mov	r1, r3
 80144d8:	4610      	mov	r0, r2
 80144da:	f7fe fac4 	bl	8012a66 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144e2:	4b09      	ldr	r3, [pc, #36]	@ (8014508 <vTaskRemoveFromUnorderedEventList+0xc8>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d902      	bls.n	80144f2 <vTaskRemoveFromUnorderedEventList+0xb2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80144ec:	4b07      	ldr	r3, [pc, #28]	@ (801450c <vTaskRemoveFromUnorderedEventList+0xcc>)
 80144ee:	2201      	movs	r2, #1
 80144f0:	601a      	str	r2, [r3, #0]
	}
}
 80144f2:	bf00      	nop
 80144f4:	3718      	adds	r7, #24
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	2000cc48 	.word	0x2000cc48
 8014500:	2000cc28 	.word	0x2000cc28
 8014504:	2000cac0 	.word	0x2000cac0
 8014508:	2000cabc 	.word	0x2000cabc
 801450c:	2000cc34 	.word	0x2000cc34

08014510 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014518:	4b06      	ldr	r3, [pc, #24]	@ (8014534 <vTaskInternalSetTimeOutState+0x24>)
 801451a:	681a      	ldr	r2, [r3, #0]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014520:	4b05      	ldr	r3, [pc, #20]	@ (8014538 <vTaskInternalSetTimeOutState+0x28>)
 8014522:	681a      	ldr	r2, [r3, #0]
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	605a      	str	r2, [r3, #4]
}
 8014528:	bf00      	nop
 801452a:	370c      	adds	r7, #12
 801452c:	46bd      	mov	sp, r7
 801452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014532:	4770      	bx	lr
 8014534:	2000cc38 	.word	0x2000cc38
 8014538:	2000cc24 	.word	0x2000cc24

0801453c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b088      	sub	sp, #32
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d10d      	bne.n	8014568 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 801454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014550:	b672      	cpsid	i
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	b662      	cpsie	i
 8014560:	613b      	str	r3, [r7, #16]
}
 8014562:	bf00      	nop
 8014564:	bf00      	nop
 8014566:	e7fd      	b.n	8014564 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d10d      	bne.n	801458a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014572:	b672      	cpsid	i
 8014574:	f383 8811 	msr	BASEPRI, r3
 8014578:	f3bf 8f6f 	isb	sy
 801457c:	f3bf 8f4f 	dsb	sy
 8014580:	b662      	cpsie	i
 8014582:	60fb      	str	r3, [r7, #12]
}
 8014584:	bf00      	nop
 8014586:	bf00      	nop
 8014588:	e7fd      	b.n	8014586 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801458a:	f000 fc8f 	bl	8014eac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801458e:	4b1d      	ldr	r3, [pc, #116]	@ (8014604 <xTaskCheckForTimeOut+0xc8>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	685b      	ldr	r3, [r3, #4]
 8014598:	69ba      	ldr	r2, [r7, #24]
 801459a:	1ad3      	subs	r3, r2, r3
 801459c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a6:	d102      	bne.n	80145ae <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80145a8:	2300      	movs	r3, #0
 80145aa:	61fb      	str	r3, [r7, #28]
 80145ac:	e023      	b.n	80145f6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681a      	ldr	r2, [r3, #0]
 80145b2:	4b15      	ldr	r3, [pc, #84]	@ (8014608 <xTaskCheckForTimeOut+0xcc>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	429a      	cmp	r2, r3
 80145b8:	d007      	beq.n	80145ca <xTaskCheckForTimeOut+0x8e>
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	69ba      	ldr	r2, [r7, #24]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d302      	bcc.n	80145ca <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80145c4:	2301      	movs	r3, #1
 80145c6:	61fb      	str	r3, [r7, #28]
 80145c8:	e015      	b.n	80145f6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	697a      	ldr	r2, [r7, #20]
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d20b      	bcs.n	80145ec <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	681a      	ldr	r2, [r3, #0]
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	1ad2      	subs	r2, r2, r3
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f7ff ff95 	bl	8014510 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80145e6:	2300      	movs	r3, #0
 80145e8:	61fb      	str	r3, [r7, #28]
 80145ea:	e004      	b.n	80145f6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	2200      	movs	r2, #0
 80145f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80145f2:	2301      	movs	r3, #1
 80145f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80145f6:	f000 fc8f 	bl	8014f18 <vPortExitCritical>

	return xReturn;
 80145fa:	69fb      	ldr	r3, [r7, #28]
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	3720      	adds	r7, #32
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}
 8014604:	2000cc24 	.word	0x2000cc24
 8014608:	2000cc38 	.word	0x2000cc38

0801460c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801460c:	b480      	push	{r7}
 801460e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014610:	4b03      	ldr	r3, [pc, #12]	@ (8014620 <vTaskMissedYield+0x14>)
 8014612:	2201      	movs	r2, #1
 8014614:	601a      	str	r2, [r3, #0]
}
 8014616:	bf00      	nop
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr
 8014620:	2000cc34 	.word	0x2000cc34

08014624 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801462c:	f000 f852 	bl	80146d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014630:	4b06      	ldr	r3, [pc, #24]	@ (801464c <prvIdleTask+0x28>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	2b01      	cmp	r3, #1
 8014636:	d9f9      	bls.n	801462c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014638:	4b05      	ldr	r3, [pc, #20]	@ (8014650 <prvIdleTask+0x2c>)
 801463a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801463e:	601a      	str	r2, [r3, #0]
 8014640:	f3bf 8f4f 	dsb	sy
 8014644:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014648:	e7f0      	b.n	801462c <prvIdleTask+0x8>
 801464a:	bf00      	nop
 801464c:	2000cac0 	.word	0x2000cac0
 8014650:	e000ed04 	.word	0xe000ed04

08014654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801465a:	2300      	movs	r3, #0
 801465c:	607b      	str	r3, [r7, #4]
 801465e:	e00c      	b.n	801467a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014660:	687a      	ldr	r2, [r7, #4]
 8014662:	4613      	mov	r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	4413      	add	r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	4a12      	ldr	r2, [pc, #72]	@ (80146b4 <prvInitialiseTaskLists+0x60>)
 801466c:	4413      	add	r3, r2
 801466e:	4618      	mov	r0, r3
 8014670:	f7fe f9cc 	bl	8012a0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	3301      	adds	r3, #1
 8014678:	607b      	str	r3, [r7, #4]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b0b      	cmp	r3, #11
 801467e:	d9ef      	bls.n	8014660 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014680:	480d      	ldr	r0, [pc, #52]	@ (80146b8 <prvInitialiseTaskLists+0x64>)
 8014682:	f7fe f9c3 	bl	8012a0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014686:	480d      	ldr	r0, [pc, #52]	@ (80146bc <prvInitialiseTaskLists+0x68>)
 8014688:	f7fe f9c0 	bl	8012a0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801468c:	480c      	ldr	r0, [pc, #48]	@ (80146c0 <prvInitialiseTaskLists+0x6c>)
 801468e:	f7fe f9bd 	bl	8012a0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014692:	480c      	ldr	r0, [pc, #48]	@ (80146c4 <prvInitialiseTaskLists+0x70>)
 8014694:	f7fe f9ba 	bl	8012a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014698:	480b      	ldr	r0, [pc, #44]	@ (80146c8 <prvInitialiseTaskLists+0x74>)
 801469a:	f7fe f9b7 	bl	8012a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801469e:	4b0b      	ldr	r3, [pc, #44]	@ (80146cc <prvInitialiseTaskLists+0x78>)
 80146a0:	4a05      	ldr	r2, [pc, #20]	@ (80146b8 <prvInitialiseTaskLists+0x64>)
 80146a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80146a4:	4b0a      	ldr	r3, [pc, #40]	@ (80146d0 <prvInitialiseTaskLists+0x7c>)
 80146a6:	4a05      	ldr	r2, [pc, #20]	@ (80146bc <prvInitialiseTaskLists+0x68>)
 80146a8:	601a      	str	r2, [r3, #0]
}
 80146aa:	bf00      	nop
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	2000cac0 	.word	0x2000cac0
 80146b8:	2000cbb0 	.word	0x2000cbb0
 80146bc:	2000cbc4 	.word	0x2000cbc4
 80146c0:	2000cbe0 	.word	0x2000cbe0
 80146c4:	2000cbf4 	.word	0x2000cbf4
 80146c8:	2000cc0c 	.word	0x2000cc0c
 80146cc:	2000cbd8 	.word	0x2000cbd8
 80146d0:	2000cbdc 	.word	0x2000cbdc

080146d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80146da:	e019      	b.n	8014710 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80146dc:	f000 fbe6 	bl	8014eac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146e0:	4b10      	ldr	r3, [pc, #64]	@ (8014724 <prvCheckTasksWaitingTermination+0x50>)
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	68db      	ldr	r3, [r3, #12]
 80146e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	3304      	adds	r3, #4
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7fe fa17 	bl	8012b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80146f2:	4b0d      	ldr	r3, [pc, #52]	@ (8014728 <prvCheckTasksWaitingTermination+0x54>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	4a0b      	ldr	r2, [pc, #44]	@ (8014728 <prvCheckTasksWaitingTermination+0x54>)
 80146fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80146fc:	4b0b      	ldr	r3, [pc, #44]	@ (801472c <prvCheckTasksWaitingTermination+0x58>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	3b01      	subs	r3, #1
 8014702:	4a0a      	ldr	r2, [pc, #40]	@ (801472c <prvCheckTasksWaitingTermination+0x58>)
 8014704:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014706:	f000 fc07 	bl	8014f18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 f810 	bl	8014730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014710:	4b06      	ldr	r3, [pc, #24]	@ (801472c <prvCheckTasksWaitingTermination+0x58>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d1e1      	bne.n	80146dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014718:	bf00      	nop
 801471a:	bf00      	nop
 801471c:	3708      	adds	r7, #8
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	2000cbf4 	.word	0x2000cbf4
 8014728:	2000cc20 	.word	0x2000cc20
 801472c:	2000cc08 	.word	0x2000cc08

08014730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801473e:	2b00      	cmp	r3, #0
 8014740:	d108      	bne.n	8014754 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014746:	4618      	mov	r0, r3
 8014748:	f000 fdac 	bl	80152a4 <vPortFree>
				vPortFree( pxTCB );
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f000 fda9 	bl	80152a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014752:	e01b      	b.n	801478c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801475a:	2b01      	cmp	r3, #1
 801475c:	d103      	bne.n	8014766 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f000 fda0 	bl	80152a4 <vPortFree>
	}
 8014764:	e012      	b.n	801478c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801476c:	2b02      	cmp	r3, #2
 801476e:	d00d      	beq.n	801478c <prvDeleteTCB+0x5c>
	__asm volatile
 8014770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014774:	b672      	cpsid	i
 8014776:	f383 8811 	msr	BASEPRI, r3
 801477a:	f3bf 8f6f 	isb	sy
 801477e:	f3bf 8f4f 	dsb	sy
 8014782:	b662      	cpsie	i
 8014784:	60fb      	str	r3, [r7, #12]
}
 8014786:	bf00      	nop
 8014788:	bf00      	nop
 801478a:	e7fd      	b.n	8014788 <prvDeleteTCB+0x58>
	}
 801478c:	bf00      	nop
 801478e:	3710      	adds	r7, #16
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014794:	b480      	push	{r7}
 8014796:	b083      	sub	sp, #12
 8014798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801479a:	4b0c      	ldr	r3, [pc, #48]	@ (80147cc <prvResetNextTaskUnblockTime+0x38>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d104      	bne.n	80147ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80147a4:	4b0a      	ldr	r3, [pc, #40]	@ (80147d0 <prvResetNextTaskUnblockTime+0x3c>)
 80147a6:	f04f 32ff 	mov.w	r2, #4294967295
 80147aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80147ac:	e008      	b.n	80147c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147ae:	4b07      	ldr	r3, [pc, #28]	@ (80147cc <prvResetNextTaskUnblockTime+0x38>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	68db      	ldr	r3, [r3, #12]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	685b      	ldr	r3, [r3, #4]
 80147bc:	4a04      	ldr	r2, [pc, #16]	@ (80147d0 <prvResetNextTaskUnblockTime+0x3c>)
 80147be:	6013      	str	r3, [r2, #0]
}
 80147c0:	bf00      	nop
 80147c2:	370c      	adds	r7, #12
 80147c4:	46bd      	mov	sp, r7
 80147c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ca:	4770      	bx	lr
 80147cc:	2000cbd8 	.word	0x2000cbd8
 80147d0:	2000cc40 	.word	0x2000cc40

080147d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80147d4:	b480      	push	{r7}
 80147d6:	b083      	sub	sp, #12
 80147d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80147da:	4b0b      	ldr	r3, [pc, #44]	@ (8014808 <xTaskGetSchedulerState+0x34>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d102      	bne.n	80147e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80147e2:	2301      	movs	r3, #1
 80147e4:	607b      	str	r3, [r7, #4]
 80147e6:	e008      	b.n	80147fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147e8:	4b08      	ldr	r3, [pc, #32]	@ (801480c <xTaskGetSchedulerState+0x38>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d102      	bne.n	80147f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80147f0:	2302      	movs	r3, #2
 80147f2:	607b      	str	r3, [r7, #4]
 80147f4:	e001      	b.n	80147fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80147f6:	2300      	movs	r3, #0
 80147f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80147fa:	687b      	ldr	r3, [r7, #4]
	}
 80147fc:	4618      	mov	r0, r3
 80147fe:	370c      	adds	r7, #12
 8014800:	46bd      	mov	sp, r7
 8014802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014806:	4770      	bx	lr
 8014808:	2000cc2c 	.word	0x2000cc2c
 801480c:	2000cc48 	.word	0x2000cc48

08014810 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801481c:	2300      	movs	r3, #0
 801481e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d069      	beq.n	80148fa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801482a:	4b36      	ldr	r3, [pc, #216]	@ (8014904 <xTaskPriorityInherit+0xf4>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014830:	429a      	cmp	r2, r3
 8014832:	d259      	bcs.n	80148e8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	699b      	ldr	r3, [r3, #24]
 8014838:	2b00      	cmp	r3, #0
 801483a:	db06      	blt.n	801484a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801483c:	4b31      	ldr	r3, [pc, #196]	@ (8014904 <xTaskPriorityInherit+0xf4>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014842:	f1c3 020c 	rsb	r2, r3, #12
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	6959      	ldr	r1, [r3, #20]
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014852:	4613      	mov	r3, r2
 8014854:	009b      	lsls	r3, r3, #2
 8014856:	4413      	add	r3, r2
 8014858:	009b      	lsls	r3, r3, #2
 801485a:	4a2b      	ldr	r2, [pc, #172]	@ (8014908 <xTaskPriorityInherit+0xf8>)
 801485c:	4413      	add	r3, r2
 801485e:	4299      	cmp	r1, r3
 8014860:	d13a      	bne.n	80148d8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	3304      	adds	r3, #4
 8014866:	4618      	mov	r0, r3
 8014868:	f7fe f95a 	bl	8012b20 <uxListRemove>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d115      	bne.n	801489e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014876:	4924      	ldr	r1, [pc, #144]	@ (8014908 <xTaskPriorityInherit+0xf8>)
 8014878:	4613      	mov	r3, r2
 801487a:	009b      	lsls	r3, r3, #2
 801487c:	4413      	add	r3, r2
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	440b      	add	r3, r1
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d10a      	bne.n	801489e <xTaskPriorityInherit+0x8e>
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801488c:	2201      	movs	r2, #1
 801488e:	fa02 f303 	lsl.w	r3, r2, r3
 8014892:	43da      	mvns	r2, r3
 8014894:	4b1d      	ldr	r3, [pc, #116]	@ (801490c <xTaskPriorityInherit+0xfc>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	4013      	ands	r3, r2
 801489a:	4a1c      	ldr	r2, [pc, #112]	@ (801490c <xTaskPriorityInherit+0xfc>)
 801489c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801489e:	4b19      	ldr	r3, [pc, #100]	@ (8014904 <xTaskPriorityInherit+0xf4>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148ac:	2201      	movs	r2, #1
 80148ae:	409a      	lsls	r2, r3
 80148b0:	4b16      	ldr	r3, [pc, #88]	@ (801490c <xTaskPriorityInherit+0xfc>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	4313      	orrs	r3, r2
 80148b6:	4a15      	ldr	r2, [pc, #84]	@ (801490c <xTaskPriorityInherit+0xfc>)
 80148b8:	6013      	str	r3, [r2, #0]
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148be:	4613      	mov	r3, r2
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	4413      	add	r3, r2
 80148c4:	009b      	lsls	r3, r3, #2
 80148c6:	4a10      	ldr	r2, [pc, #64]	@ (8014908 <xTaskPriorityInherit+0xf8>)
 80148c8:	441a      	add	r2, r3
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	3304      	adds	r3, #4
 80148ce:	4619      	mov	r1, r3
 80148d0:	4610      	mov	r0, r2
 80148d2:	f7fe f8c8 	bl	8012a66 <vListInsertEnd>
 80148d6:	e004      	b.n	80148e2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80148d8:	4b0a      	ldr	r3, [pc, #40]	@ (8014904 <xTaskPriorityInherit+0xf4>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80148e2:	2301      	movs	r3, #1
 80148e4:	60fb      	str	r3, [r7, #12]
 80148e6:	e008      	b.n	80148fa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80148ec:	4b05      	ldr	r3, [pc, #20]	@ (8014904 <xTaskPriorityInherit+0xf4>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d201      	bcs.n	80148fa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80148f6:	2301      	movs	r3, #1
 80148f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80148fa:	68fb      	ldr	r3, [r7, #12]
	}
 80148fc:	4618      	mov	r0, r3
 80148fe:	3710      	adds	r7, #16
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}
 8014904:	2000cabc 	.word	0x2000cabc
 8014908:	2000cac0 	.word	0x2000cac0
 801490c:	2000cc28 	.word	0x2000cc28

08014910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014910:	b580      	push	{r7, lr}
 8014912:	b086      	sub	sp, #24
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801491c:	2300      	movs	r3, #0
 801491e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d074      	beq.n	8014a10 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014926:	4b3d      	ldr	r3, [pc, #244]	@ (8014a1c <xTaskPriorityDisinherit+0x10c>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	693a      	ldr	r2, [r7, #16]
 801492c:	429a      	cmp	r2, r3
 801492e:	d00d      	beq.n	801494c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8014930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014934:	b672      	cpsid	i
 8014936:	f383 8811 	msr	BASEPRI, r3
 801493a:	f3bf 8f6f 	isb	sy
 801493e:	f3bf 8f4f 	dsb	sy
 8014942:	b662      	cpsie	i
 8014944:	60fb      	str	r3, [r7, #12]
}
 8014946:	bf00      	nop
 8014948:	bf00      	nop
 801494a:	e7fd      	b.n	8014948 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014950:	2b00      	cmp	r3, #0
 8014952:	d10d      	bne.n	8014970 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8014954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014958:	b672      	cpsid	i
 801495a:	f383 8811 	msr	BASEPRI, r3
 801495e:	f3bf 8f6f 	isb	sy
 8014962:	f3bf 8f4f 	dsb	sy
 8014966:	b662      	cpsie	i
 8014968:	60bb      	str	r3, [r7, #8]
}
 801496a:	bf00      	nop
 801496c:	bf00      	nop
 801496e:	e7fd      	b.n	801496c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014974:	1e5a      	subs	r2, r3, #1
 8014976:	693b      	ldr	r3, [r7, #16]
 8014978:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014982:	429a      	cmp	r2, r3
 8014984:	d044      	beq.n	8014a10 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801498a:	2b00      	cmp	r3, #0
 801498c:	d140      	bne.n	8014a10 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	3304      	adds	r3, #4
 8014992:	4618      	mov	r0, r3
 8014994:	f7fe f8c4 	bl	8012b20 <uxListRemove>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d115      	bne.n	80149ca <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149a2:	491f      	ldr	r1, [pc, #124]	@ (8014a20 <xTaskPriorityDisinherit+0x110>)
 80149a4:	4613      	mov	r3, r2
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	4413      	add	r3, r2
 80149aa:	009b      	lsls	r3, r3, #2
 80149ac:	440b      	add	r3, r1
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d10a      	bne.n	80149ca <xTaskPriorityDisinherit+0xba>
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149b8:	2201      	movs	r2, #1
 80149ba:	fa02 f303 	lsl.w	r3, r2, r3
 80149be:	43da      	mvns	r2, r3
 80149c0:	4b18      	ldr	r3, [pc, #96]	@ (8014a24 <xTaskPriorityDisinherit+0x114>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	4013      	ands	r3, r2
 80149c6:	4a17      	ldr	r2, [pc, #92]	@ (8014a24 <xTaskPriorityDisinherit+0x114>)
 80149c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149d6:	f1c3 020c 	rsb	r2, r3, #12
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149e2:	2201      	movs	r2, #1
 80149e4:	409a      	lsls	r2, r3
 80149e6:	4b0f      	ldr	r3, [pc, #60]	@ (8014a24 <xTaskPriorityDisinherit+0x114>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	4313      	orrs	r3, r2
 80149ec:	4a0d      	ldr	r2, [pc, #52]	@ (8014a24 <xTaskPriorityDisinherit+0x114>)
 80149ee:	6013      	str	r3, [r2, #0]
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149f4:	4613      	mov	r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	4413      	add	r3, r2
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	4a08      	ldr	r2, [pc, #32]	@ (8014a20 <xTaskPriorityDisinherit+0x110>)
 80149fe:	441a      	add	r2, r3
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	3304      	adds	r3, #4
 8014a04:	4619      	mov	r1, r3
 8014a06:	4610      	mov	r0, r2
 8014a08:	f7fe f82d 	bl	8012a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014a10:	697b      	ldr	r3, [r7, #20]
	}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3718      	adds	r7, #24
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd80      	pop	{r7, pc}
 8014a1a:	bf00      	nop
 8014a1c:	2000cabc 	.word	0x2000cabc
 8014a20:	2000cac0 	.word	0x2000cac0
 8014a24:	2000cc28 	.word	0x2000cc28

08014a28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b088      	sub	sp, #32
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014a36:	2301      	movs	r3, #1
 8014a38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	f000 8089 	beq.w	8014b54 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014a42:	69bb      	ldr	r3, [r7, #24]
 8014a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d10d      	bne.n	8014a66 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8014a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a4e:	b672      	cpsid	i
 8014a50:	f383 8811 	msr	BASEPRI, r3
 8014a54:	f3bf 8f6f 	isb	sy
 8014a58:	f3bf 8f4f 	dsb	sy
 8014a5c:	b662      	cpsie	i
 8014a5e:	60fb      	str	r3, [r7, #12]
}
 8014a60:	bf00      	nop
 8014a62:	bf00      	nop
 8014a64:	e7fd      	b.n	8014a62 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014a66:	69bb      	ldr	r3, [r7, #24]
 8014a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a6a:	683a      	ldr	r2, [r7, #0]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d902      	bls.n	8014a76 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	61fb      	str	r3, [r7, #28]
 8014a74:	e002      	b.n	8014a7c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014a76:	69bb      	ldr	r3, [r7, #24]
 8014a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a80:	69fa      	ldr	r2, [r7, #28]
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d066      	beq.n	8014b54 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014a86:	69bb      	ldr	r3, [r7, #24]
 8014a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a8a:	697a      	ldr	r2, [r7, #20]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d161      	bne.n	8014b54 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014a90:	4b32      	ldr	r3, [pc, #200]	@ (8014b5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	69ba      	ldr	r2, [r7, #24]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d10d      	bne.n	8014ab6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8014a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a9e:	b672      	cpsid	i
 8014aa0:	f383 8811 	msr	BASEPRI, r3
 8014aa4:	f3bf 8f6f 	isb	sy
 8014aa8:	f3bf 8f4f 	dsb	sy
 8014aac:	b662      	cpsie	i
 8014aae:	60bb      	str	r3, [r7, #8]
}
 8014ab0:	bf00      	nop
 8014ab2:	bf00      	nop
 8014ab4:	e7fd      	b.n	8014ab2 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014ab6:	69bb      	ldr	r3, [r7, #24]
 8014ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014aba:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	69fa      	ldr	r2, [r7, #28]
 8014ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ac2:	69bb      	ldr	r3, [r7, #24]
 8014ac4:	699b      	ldr	r3, [r3, #24]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	db04      	blt.n	8014ad4 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	f1c3 020c 	rsb	r2, r3, #12
 8014ad0:	69bb      	ldr	r3, [r7, #24]
 8014ad2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014ad4:	69bb      	ldr	r3, [r7, #24]
 8014ad6:	6959      	ldr	r1, [r3, #20]
 8014ad8:	693a      	ldr	r2, [r7, #16]
 8014ada:	4613      	mov	r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	4413      	add	r3, r2
 8014ae0:	009b      	lsls	r3, r3, #2
 8014ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8014b60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014ae4:	4413      	add	r3, r2
 8014ae6:	4299      	cmp	r1, r3
 8014ae8:	d134      	bne.n	8014b54 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014aea:	69bb      	ldr	r3, [r7, #24]
 8014aec:	3304      	adds	r3, #4
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7fe f816 	bl	8012b20 <uxListRemove>
 8014af4:	4603      	mov	r3, r0
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d115      	bne.n	8014b26 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014afa:	69bb      	ldr	r3, [r7, #24]
 8014afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014afe:	4918      	ldr	r1, [pc, #96]	@ (8014b60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014b00:	4613      	mov	r3, r2
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	4413      	add	r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	440b      	add	r3, r1
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d10a      	bne.n	8014b26 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8014b10:	69bb      	ldr	r3, [r7, #24]
 8014b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b14:	2201      	movs	r2, #1
 8014b16:	fa02 f303 	lsl.w	r3, r2, r3
 8014b1a:	43da      	mvns	r2, r3
 8014b1c:	4b11      	ldr	r3, [pc, #68]	@ (8014b64 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4013      	ands	r3, r2
 8014b22:	4a10      	ldr	r2, [pc, #64]	@ (8014b64 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014b24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014b26:	69bb      	ldr	r3, [r7, #24]
 8014b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b2a:	2201      	movs	r2, #1
 8014b2c:	409a      	lsls	r2, r3
 8014b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8014b64 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	4313      	orrs	r3, r2
 8014b34:	4a0b      	ldr	r2, [pc, #44]	@ (8014b64 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014b36:	6013      	str	r3, [r2, #0]
 8014b38:	69bb      	ldr	r3, [r7, #24]
 8014b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	009b      	lsls	r3, r3, #2
 8014b40:	4413      	add	r3, r2
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	4a06      	ldr	r2, [pc, #24]	@ (8014b60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014b46:	441a      	add	r2, r3
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	4610      	mov	r0, r2
 8014b50:	f7fd ff89 	bl	8012a66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014b54:	bf00      	nop
 8014b56:	3720      	adds	r7, #32
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}
 8014b5c:	2000cabc 	.word	0x2000cabc
 8014b60:	2000cac0 	.word	0x2000cac0
 8014b64:	2000cc28 	.word	0x2000cc28

08014b68 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014b6e:	4b09      	ldr	r3, [pc, #36]	@ (8014b94 <uxTaskResetEventItemValue+0x2c>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	699b      	ldr	r3, [r3, #24]
 8014b74:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b76:	4b07      	ldr	r3, [pc, #28]	@ (8014b94 <uxTaskResetEventItemValue+0x2c>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b7c:	4b05      	ldr	r3, [pc, #20]	@ (8014b94 <uxTaskResetEventItemValue+0x2c>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	f1c2 020c 	rsb	r2, r2, #12
 8014b84:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014b86:	687b      	ldr	r3, [r7, #4]
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	370c      	adds	r7, #12
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b92:	4770      	bx	lr
 8014b94:	2000cabc 	.word	0x2000cabc

08014b98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014b98:	b480      	push	{r7}
 8014b9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014b9c:	4b07      	ldr	r3, [pc, #28]	@ (8014bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d004      	beq.n	8014bae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014ba4:	4b05      	ldr	r3, [pc, #20]	@ (8014bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014baa:	3201      	adds	r2, #1
 8014bac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8014bae:	4b03      	ldr	r3, [pc, #12]	@ (8014bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
	}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bba:	4770      	bx	lr
 8014bbc:	2000cabc 	.word	0x2000cabc

08014bc0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014bca:	4b29      	ldr	r3, [pc, #164]	@ (8014c70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014bd0:	4b28      	ldr	r3, [pc, #160]	@ (8014c74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	3304      	adds	r3, #4
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7fd ffa2 	bl	8012b20 <uxListRemove>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d10b      	bne.n	8014bfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014be2:	4b24      	ldr	r3, [pc, #144]	@ (8014c74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014be8:	2201      	movs	r2, #1
 8014bea:	fa02 f303 	lsl.w	r3, r2, r3
 8014bee:	43da      	mvns	r2, r3
 8014bf0:	4b21      	ldr	r3, [pc, #132]	@ (8014c78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	4013      	ands	r3, r2
 8014bf6:	4a20      	ldr	r2, [pc, #128]	@ (8014c78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014bf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c00:	d10a      	bne.n	8014c18 <prvAddCurrentTaskToDelayedList+0x58>
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d007      	beq.n	8014c18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c08:	4b1a      	ldr	r3, [pc, #104]	@ (8014c74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	3304      	adds	r3, #4
 8014c0e:	4619      	mov	r1, r3
 8014c10:	481a      	ldr	r0, [pc, #104]	@ (8014c7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8014c12:	f7fd ff28 	bl	8012a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014c16:	e026      	b.n	8014c66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014c18:	68fa      	ldr	r2, [r7, #12]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4413      	add	r3, r2
 8014c1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014c20:	4b14      	ldr	r3, [pc, #80]	@ (8014c74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	68ba      	ldr	r2, [r7, #8]
 8014c26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014c28:	68ba      	ldr	r2, [r7, #8]
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d209      	bcs.n	8014c44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c30:	4b13      	ldr	r3, [pc, #76]	@ (8014c80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014c32:	681a      	ldr	r2, [r3, #0]
 8014c34:	4b0f      	ldr	r3, [pc, #60]	@ (8014c74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	3304      	adds	r3, #4
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	4610      	mov	r0, r2
 8014c3e:	f7fd ff36 	bl	8012aae <vListInsert>
}
 8014c42:	e010      	b.n	8014c66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c44:	4b0f      	ldr	r3, [pc, #60]	@ (8014c84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014c46:	681a      	ldr	r2, [r3, #0]
 8014c48:	4b0a      	ldr	r3, [pc, #40]	@ (8014c74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	3304      	adds	r3, #4
 8014c4e:	4619      	mov	r1, r3
 8014c50:	4610      	mov	r0, r2
 8014c52:	f7fd ff2c 	bl	8012aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014c56:	4b0c      	ldr	r3, [pc, #48]	@ (8014c88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	68ba      	ldr	r2, [r7, #8]
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d202      	bcs.n	8014c66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014c60:	4a09      	ldr	r2, [pc, #36]	@ (8014c88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	6013      	str	r3, [r2, #0]
}
 8014c66:	bf00      	nop
 8014c68:	3710      	adds	r7, #16
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	2000cc24 	.word	0x2000cc24
 8014c74:	2000cabc 	.word	0x2000cabc
 8014c78:	2000cc28 	.word	0x2000cc28
 8014c7c:	2000cc0c 	.word	0x2000cc0c
 8014c80:	2000cbdc 	.word	0x2000cbdc
 8014c84:	2000cbd8 	.word	0x2000cbd8
 8014c88:	2000cc40 	.word	0x2000cc40

08014c8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c8c:	b480      	push	{r7}
 8014c8e:	b085      	sub	sp, #20
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	60f8      	str	r0, [r7, #12]
 8014c94:	60b9      	str	r1, [r7, #8]
 8014c96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	3b04      	subs	r3, #4
 8014c9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	3b04      	subs	r3, #4
 8014caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	f023 0201 	bic.w	r2, r3, #1
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	3b04      	subs	r3, #4
 8014cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8014cf0 <pxPortInitialiseStack+0x64>)
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	3b14      	subs	r3, #20
 8014cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014cc8:	687a      	ldr	r2, [r7, #4]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	3b04      	subs	r3, #4
 8014cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	f06f 0202 	mvn.w	r2, #2
 8014cda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	3b20      	subs	r3, #32
 8014ce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3714      	adds	r7, #20
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr
 8014cf0:	08014cf5 	.word	0x08014cf5

08014cf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014cf4:	b480      	push	{r7}
 8014cf6:	b085      	sub	sp, #20
 8014cf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014cfe:	4b15      	ldr	r3, [pc, #84]	@ (8014d54 <prvTaskExitError+0x60>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d06:	d00d      	beq.n	8014d24 <prvTaskExitError+0x30>
	__asm volatile
 8014d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d0c:	b672      	cpsid	i
 8014d0e:	f383 8811 	msr	BASEPRI, r3
 8014d12:	f3bf 8f6f 	isb	sy
 8014d16:	f3bf 8f4f 	dsb	sy
 8014d1a:	b662      	cpsie	i
 8014d1c:	60fb      	str	r3, [r7, #12]
}
 8014d1e:	bf00      	nop
 8014d20:	bf00      	nop
 8014d22:	e7fd      	b.n	8014d20 <prvTaskExitError+0x2c>
	__asm volatile
 8014d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d28:	b672      	cpsid	i
 8014d2a:	f383 8811 	msr	BASEPRI, r3
 8014d2e:	f3bf 8f6f 	isb	sy
 8014d32:	f3bf 8f4f 	dsb	sy
 8014d36:	b662      	cpsie	i
 8014d38:	60bb      	str	r3, [r7, #8]
}
 8014d3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014d3c:	bf00      	nop
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d0fc      	beq.n	8014d3e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014d44:	bf00      	nop
 8014d46:	bf00      	nop
 8014d48:	3714      	adds	r7, #20
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d50:	4770      	bx	lr
 8014d52:	bf00      	nop
 8014d54:	20000078 	.word	0x20000078
	...

08014d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d60:	4b07      	ldr	r3, [pc, #28]	@ (8014d80 <pxCurrentTCBConst2>)
 8014d62:	6819      	ldr	r1, [r3, #0]
 8014d64:	6808      	ldr	r0, [r1, #0]
 8014d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6a:	f380 8809 	msr	PSP, r0
 8014d6e:	f3bf 8f6f 	isb	sy
 8014d72:	f04f 0000 	mov.w	r0, #0
 8014d76:	f380 8811 	msr	BASEPRI, r0
 8014d7a:	4770      	bx	lr
 8014d7c:	f3af 8000 	nop.w

08014d80 <pxCurrentTCBConst2>:
 8014d80:	2000cabc 	.word	0x2000cabc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014d84:	bf00      	nop
 8014d86:	bf00      	nop

08014d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014d88:	4808      	ldr	r0, [pc, #32]	@ (8014dac <prvPortStartFirstTask+0x24>)
 8014d8a:	6800      	ldr	r0, [r0, #0]
 8014d8c:	6800      	ldr	r0, [r0, #0]
 8014d8e:	f380 8808 	msr	MSP, r0
 8014d92:	f04f 0000 	mov.w	r0, #0
 8014d96:	f380 8814 	msr	CONTROL, r0
 8014d9a:	b662      	cpsie	i
 8014d9c:	b661      	cpsie	f
 8014d9e:	f3bf 8f4f 	dsb	sy
 8014da2:	f3bf 8f6f 	isb	sy
 8014da6:	df00      	svc	0
 8014da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014daa:	bf00      	nop
 8014dac:	e000ed08 	.word	0xe000ed08

08014db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b084      	sub	sp, #16
 8014db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014db6:	4b37      	ldr	r3, [pc, #220]	@ (8014e94 <xPortStartScheduler+0xe4>)
 8014db8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	22ff      	movs	r2, #255	@ 0xff
 8014dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	b2db      	uxtb	r3, r3
 8014dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014dd0:	78fb      	ldrb	r3, [r7, #3]
 8014dd2:	b2db      	uxtb	r3, r3
 8014dd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014dd8:	b2da      	uxtb	r2, r3
 8014dda:	4b2f      	ldr	r3, [pc, #188]	@ (8014e98 <xPortStartScheduler+0xe8>)
 8014ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014dde:	4b2f      	ldr	r3, [pc, #188]	@ (8014e9c <xPortStartScheduler+0xec>)
 8014de0:	2207      	movs	r2, #7
 8014de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014de4:	e009      	b.n	8014dfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014de6:	4b2d      	ldr	r3, [pc, #180]	@ (8014e9c <xPortStartScheduler+0xec>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	3b01      	subs	r3, #1
 8014dec:	4a2b      	ldr	r2, [pc, #172]	@ (8014e9c <xPortStartScheduler+0xec>)
 8014dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014df0:	78fb      	ldrb	r3, [r7, #3]
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	005b      	lsls	r3, r3, #1
 8014df6:	b2db      	uxtb	r3, r3
 8014df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014dfa:	78fb      	ldrb	r3, [r7, #3]
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014e02:	2b80      	cmp	r3, #128	@ 0x80
 8014e04:	d0ef      	beq.n	8014de6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014e06:	4b25      	ldr	r3, [pc, #148]	@ (8014e9c <xPortStartScheduler+0xec>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	f1c3 0307 	rsb	r3, r3, #7
 8014e0e:	2b04      	cmp	r3, #4
 8014e10:	d00d      	beq.n	8014e2e <xPortStartScheduler+0x7e>
	__asm volatile
 8014e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e16:	b672      	cpsid	i
 8014e18:	f383 8811 	msr	BASEPRI, r3
 8014e1c:	f3bf 8f6f 	isb	sy
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	b662      	cpsie	i
 8014e26:	60bb      	str	r3, [r7, #8]
}
 8014e28:	bf00      	nop
 8014e2a:	bf00      	nop
 8014e2c:	e7fd      	b.n	8014e2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8014e9c <xPortStartScheduler+0xec>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	021b      	lsls	r3, r3, #8
 8014e34:	4a19      	ldr	r2, [pc, #100]	@ (8014e9c <xPortStartScheduler+0xec>)
 8014e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e38:	4b18      	ldr	r3, [pc, #96]	@ (8014e9c <xPortStartScheduler+0xec>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014e40:	4a16      	ldr	r2, [pc, #88]	@ (8014e9c <xPortStartScheduler+0xec>)
 8014e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	b2da      	uxtb	r2, r3
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e4c:	4b14      	ldr	r3, [pc, #80]	@ (8014ea0 <xPortStartScheduler+0xf0>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4a13      	ldr	r2, [pc, #76]	@ (8014ea0 <xPortStartScheduler+0xf0>)
 8014e52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e58:	4b11      	ldr	r3, [pc, #68]	@ (8014ea0 <xPortStartScheduler+0xf0>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	4a10      	ldr	r2, [pc, #64]	@ (8014ea0 <xPortStartScheduler+0xf0>)
 8014e5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014e64:	f000 f8dc 	bl	8015020 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014e68:	4b0e      	ldr	r3, [pc, #56]	@ (8014ea4 <xPortStartScheduler+0xf4>)
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014e6e:	f000 f8fb 	bl	8015068 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014e72:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea8 <xPortStartScheduler+0xf8>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	4a0c      	ldr	r2, [pc, #48]	@ (8014ea8 <xPortStartScheduler+0xf8>)
 8014e78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014e7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014e7e:	f7ff ff83 	bl	8014d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014e82:	f7ff f96d 	bl	8014160 <vTaskSwitchContext>
	prvTaskExitError();
 8014e86:	f7ff ff35 	bl	8014cf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014e8a:	2300      	movs	r3, #0
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3710      	adds	r7, #16
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}
 8014e94:	e000e400 	.word	0xe000e400
 8014e98:	2000cc54 	.word	0x2000cc54
 8014e9c:	2000cc58 	.word	0x2000cc58
 8014ea0:	e000ed20 	.word	0xe000ed20
 8014ea4:	20000078 	.word	0x20000078
 8014ea8:	e000ef34 	.word	0xe000ef34

08014eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014eac:	b480      	push	{r7}
 8014eae:	b083      	sub	sp, #12
 8014eb0:	af00      	add	r7, sp, #0
	__asm volatile
 8014eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eb6:	b672      	cpsid	i
 8014eb8:	f383 8811 	msr	BASEPRI, r3
 8014ebc:	f3bf 8f6f 	isb	sy
 8014ec0:	f3bf 8f4f 	dsb	sy
 8014ec4:	b662      	cpsie	i
 8014ec6:	607b      	str	r3, [r7, #4]
}
 8014ec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014eca:	4b11      	ldr	r3, [pc, #68]	@ (8014f10 <vPortEnterCritical+0x64>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	3301      	adds	r3, #1
 8014ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8014f10 <vPortEnterCritical+0x64>)
 8014ed2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8014f10 <vPortEnterCritical+0x64>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	d112      	bne.n	8014f02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014edc:	4b0d      	ldr	r3, [pc, #52]	@ (8014f14 <vPortEnterCritical+0x68>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d00d      	beq.n	8014f02 <vPortEnterCritical+0x56>
	__asm volatile
 8014ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eea:	b672      	cpsid	i
 8014eec:	f383 8811 	msr	BASEPRI, r3
 8014ef0:	f3bf 8f6f 	isb	sy
 8014ef4:	f3bf 8f4f 	dsb	sy
 8014ef8:	b662      	cpsie	i
 8014efa:	603b      	str	r3, [r7, #0]
}
 8014efc:	bf00      	nop
 8014efe:	bf00      	nop
 8014f00:	e7fd      	b.n	8014efe <vPortEnterCritical+0x52>
	}
}
 8014f02:	bf00      	nop
 8014f04:	370c      	adds	r7, #12
 8014f06:	46bd      	mov	sp, r7
 8014f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0c:	4770      	bx	lr
 8014f0e:	bf00      	nop
 8014f10:	20000078 	.word	0x20000078
 8014f14:	e000ed04 	.word	0xe000ed04

08014f18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f1e:	4b13      	ldr	r3, [pc, #76]	@ (8014f6c <vPortExitCritical+0x54>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d10d      	bne.n	8014f42 <vPortExitCritical+0x2a>
	__asm volatile
 8014f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f2a:	b672      	cpsid	i
 8014f2c:	f383 8811 	msr	BASEPRI, r3
 8014f30:	f3bf 8f6f 	isb	sy
 8014f34:	f3bf 8f4f 	dsb	sy
 8014f38:	b662      	cpsie	i
 8014f3a:	607b      	str	r3, [r7, #4]
}
 8014f3c:	bf00      	nop
 8014f3e:	bf00      	nop
 8014f40:	e7fd      	b.n	8014f3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014f42:	4b0a      	ldr	r3, [pc, #40]	@ (8014f6c <vPortExitCritical+0x54>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	3b01      	subs	r3, #1
 8014f48:	4a08      	ldr	r2, [pc, #32]	@ (8014f6c <vPortExitCritical+0x54>)
 8014f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f4c:	4b07      	ldr	r3, [pc, #28]	@ (8014f6c <vPortExitCritical+0x54>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d105      	bne.n	8014f60 <vPortExitCritical+0x48>
 8014f54:	2300      	movs	r3, #0
 8014f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	f383 8811 	msr	BASEPRI, r3
}
 8014f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f60:	bf00      	nop
 8014f62:	370c      	adds	r7, #12
 8014f64:	46bd      	mov	sp, r7
 8014f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6a:	4770      	bx	lr
 8014f6c:	20000078 	.word	0x20000078

08014f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014f70:	f3ef 8009 	mrs	r0, PSP
 8014f74:	f3bf 8f6f 	isb	sy
 8014f78:	4b15      	ldr	r3, [pc, #84]	@ (8014fd0 <pxCurrentTCBConst>)
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	f01e 0f10 	tst.w	lr, #16
 8014f80:	bf08      	it	eq
 8014f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f8a:	6010      	str	r0, [r2, #0]
 8014f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014f94:	b672      	cpsid	i
 8014f96:	f380 8811 	msr	BASEPRI, r0
 8014f9a:	f3bf 8f4f 	dsb	sy
 8014f9e:	f3bf 8f6f 	isb	sy
 8014fa2:	b662      	cpsie	i
 8014fa4:	f7ff f8dc 	bl	8014160 <vTaskSwitchContext>
 8014fa8:	f04f 0000 	mov.w	r0, #0
 8014fac:	f380 8811 	msr	BASEPRI, r0
 8014fb0:	bc09      	pop	{r0, r3}
 8014fb2:	6819      	ldr	r1, [r3, #0]
 8014fb4:	6808      	ldr	r0, [r1, #0]
 8014fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fba:	f01e 0f10 	tst.w	lr, #16
 8014fbe:	bf08      	it	eq
 8014fc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014fc4:	f380 8809 	msr	PSP, r0
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	4770      	bx	lr
 8014fce:	bf00      	nop

08014fd0 <pxCurrentTCBConst>:
 8014fd0:	2000cabc 	.word	0x2000cabc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014fd4:	bf00      	nop
 8014fd6:	bf00      	nop

08014fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8014fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fe2:	b672      	cpsid	i
 8014fe4:	f383 8811 	msr	BASEPRI, r3
 8014fe8:	f3bf 8f6f 	isb	sy
 8014fec:	f3bf 8f4f 	dsb	sy
 8014ff0:	b662      	cpsie	i
 8014ff2:	607b      	str	r3, [r7, #4]
}
 8014ff4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ff6:	f7fe fff7 	bl	8013fe8 <xTaskIncrementTick>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d003      	beq.n	8015008 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015000:	4b06      	ldr	r3, [pc, #24]	@ (801501c <SysTick_Handler+0x44>)
 8015002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015006:	601a      	str	r2, [r3, #0]
 8015008:	2300      	movs	r3, #0
 801500a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	f383 8811 	msr	BASEPRI, r3
}
 8015012:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015014:	bf00      	nop
 8015016:	3708      	adds	r7, #8
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}
 801501c:	e000ed04 	.word	0xe000ed04

08015020 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015020:	b480      	push	{r7}
 8015022:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015024:	4b0b      	ldr	r3, [pc, #44]	@ (8015054 <vPortSetupTimerInterrupt+0x34>)
 8015026:	2200      	movs	r2, #0
 8015028:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801502a:	4b0b      	ldr	r3, [pc, #44]	@ (8015058 <vPortSetupTimerInterrupt+0x38>)
 801502c:	2200      	movs	r2, #0
 801502e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015030:	4b0a      	ldr	r3, [pc, #40]	@ (801505c <vPortSetupTimerInterrupt+0x3c>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	4a0a      	ldr	r2, [pc, #40]	@ (8015060 <vPortSetupTimerInterrupt+0x40>)
 8015036:	fba2 2303 	umull	r2, r3, r2, r3
 801503a:	099b      	lsrs	r3, r3, #6
 801503c:	4a09      	ldr	r2, [pc, #36]	@ (8015064 <vPortSetupTimerInterrupt+0x44>)
 801503e:	3b01      	subs	r3, #1
 8015040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015042:	4b04      	ldr	r3, [pc, #16]	@ (8015054 <vPortSetupTimerInterrupt+0x34>)
 8015044:	2207      	movs	r2, #7
 8015046:	601a      	str	r2, [r3, #0]
}
 8015048:	bf00      	nop
 801504a:	46bd      	mov	sp, r7
 801504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop
 8015054:	e000e010 	.word	0xe000e010
 8015058:	e000e018 	.word	0xe000e018
 801505c:	20000054 	.word	0x20000054
 8015060:	10624dd3 	.word	0x10624dd3
 8015064:	e000e014 	.word	0xe000e014

08015068 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015068:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015078 <vPortEnableVFP+0x10>
 801506c:	6801      	ldr	r1, [r0, #0]
 801506e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015072:	6001      	str	r1, [r0, #0]
 8015074:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015076:	bf00      	nop
 8015078:	e000ed88 	.word	0xe000ed88

0801507c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801507c:	b480      	push	{r7}
 801507e:	b085      	sub	sp, #20
 8015080:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015082:	f3ef 8305 	mrs	r3, IPSR
 8015086:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	2b0f      	cmp	r3, #15
 801508c:	d917      	bls.n	80150be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801508e:	4a1a      	ldr	r2, [pc, #104]	@ (80150f8 <vPortValidateInterruptPriority+0x7c>)
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	4413      	add	r3, r2
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015098:	4b18      	ldr	r3, [pc, #96]	@ (80150fc <vPortValidateInterruptPriority+0x80>)
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	7afa      	ldrb	r2, [r7, #11]
 801509e:	429a      	cmp	r2, r3
 80150a0:	d20d      	bcs.n	80150be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80150a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150a6:	b672      	cpsid	i
 80150a8:	f383 8811 	msr	BASEPRI, r3
 80150ac:	f3bf 8f6f 	isb	sy
 80150b0:	f3bf 8f4f 	dsb	sy
 80150b4:	b662      	cpsie	i
 80150b6:	607b      	str	r3, [r7, #4]
}
 80150b8:	bf00      	nop
 80150ba:	bf00      	nop
 80150bc:	e7fd      	b.n	80150ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80150be:	4b10      	ldr	r3, [pc, #64]	@ (8015100 <vPortValidateInterruptPriority+0x84>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80150c6:	4b0f      	ldr	r3, [pc, #60]	@ (8015104 <vPortValidateInterruptPriority+0x88>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d90d      	bls.n	80150ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80150ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d2:	b672      	cpsid	i
 80150d4:	f383 8811 	msr	BASEPRI, r3
 80150d8:	f3bf 8f6f 	isb	sy
 80150dc:	f3bf 8f4f 	dsb	sy
 80150e0:	b662      	cpsie	i
 80150e2:	603b      	str	r3, [r7, #0]
}
 80150e4:	bf00      	nop
 80150e6:	bf00      	nop
 80150e8:	e7fd      	b.n	80150e6 <vPortValidateInterruptPriority+0x6a>
	}
 80150ea:	bf00      	nop
 80150ec:	3714      	adds	r7, #20
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop
 80150f8:	e000e3f0 	.word	0xe000e3f0
 80150fc:	2000cc54 	.word	0x2000cc54
 8015100:	e000ed0c 	.word	0xe000ed0c
 8015104:	2000cc58 	.word	0x2000cc58

08015108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b08a      	sub	sp, #40	@ 0x28
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015110:	2300      	movs	r3, #0
 8015112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015114:	f7fe feaa 	bl	8013e6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015118:	4b5d      	ldr	r3, [pc, #372]	@ (8015290 <pvPortMalloc+0x188>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d101      	bne.n	8015124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015120:	f000 f920 	bl	8015364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015124:	4b5b      	ldr	r3, [pc, #364]	@ (8015294 <pvPortMalloc+0x18c>)
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4013      	ands	r3, r2
 801512c:	2b00      	cmp	r3, #0
 801512e:	f040 8094 	bne.w	801525a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d020      	beq.n	801517a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8015138:	2208      	movs	r2, #8
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	4413      	add	r3, r2
 801513e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f003 0307 	and.w	r3, r3, #7
 8015146:	2b00      	cmp	r3, #0
 8015148:	d017      	beq.n	801517a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f023 0307 	bic.w	r3, r3, #7
 8015150:	3308      	adds	r3, #8
 8015152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f003 0307 	and.w	r3, r3, #7
 801515a:	2b00      	cmp	r3, #0
 801515c:	d00d      	beq.n	801517a <pvPortMalloc+0x72>
	__asm volatile
 801515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015162:	b672      	cpsid	i
 8015164:	f383 8811 	msr	BASEPRI, r3
 8015168:	f3bf 8f6f 	isb	sy
 801516c:	f3bf 8f4f 	dsb	sy
 8015170:	b662      	cpsie	i
 8015172:	617b      	str	r3, [r7, #20]
}
 8015174:	bf00      	nop
 8015176:	bf00      	nop
 8015178:	e7fd      	b.n	8015176 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d06c      	beq.n	801525a <pvPortMalloc+0x152>
 8015180:	4b45      	ldr	r3, [pc, #276]	@ (8015298 <pvPortMalloc+0x190>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	687a      	ldr	r2, [r7, #4]
 8015186:	429a      	cmp	r2, r3
 8015188:	d867      	bhi.n	801525a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801518a:	4b44      	ldr	r3, [pc, #272]	@ (801529c <pvPortMalloc+0x194>)
 801518c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801518e:	4b43      	ldr	r3, [pc, #268]	@ (801529c <pvPortMalloc+0x194>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015194:	e004      	b.n	80151a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8015196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d903      	bls.n	80151b2 <pvPortMalloc+0xaa>
 80151aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d1f1      	bne.n	8015196 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80151b2:	4b37      	ldr	r3, [pc, #220]	@ (8015290 <pvPortMalloc+0x188>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d04e      	beq.n	801525a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80151bc:	6a3b      	ldr	r3, [r7, #32]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2208      	movs	r2, #8
 80151c2:	4413      	add	r3, r2
 80151c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80151c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	6a3b      	ldr	r3, [r7, #32]
 80151cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80151ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d0:	685a      	ldr	r2, [r3, #4]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	1ad2      	subs	r2, r2, r3
 80151d6:	2308      	movs	r3, #8
 80151d8:	005b      	lsls	r3, r3, #1
 80151da:	429a      	cmp	r2, r3
 80151dc:	d922      	bls.n	8015224 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80151de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	4413      	add	r3, r2
 80151e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80151e6:	69bb      	ldr	r3, [r7, #24]
 80151e8:	f003 0307 	and.w	r3, r3, #7
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d00d      	beq.n	801520c <pvPortMalloc+0x104>
	__asm volatile
 80151f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151f4:	b672      	cpsid	i
 80151f6:	f383 8811 	msr	BASEPRI, r3
 80151fa:	f3bf 8f6f 	isb	sy
 80151fe:	f3bf 8f4f 	dsb	sy
 8015202:	b662      	cpsie	i
 8015204:	613b      	str	r3, [r7, #16]
}
 8015206:	bf00      	nop
 8015208:	bf00      	nop
 801520a:	e7fd      	b.n	8015208 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801520e:	685a      	ldr	r2, [r3, #4]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	1ad2      	subs	r2, r2, r3
 8015214:	69bb      	ldr	r3, [r7, #24]
 8015216:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801521a:	687a      	ldr	r2, [r7, #4]
 801521c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801521e:	69b8      	ldr	r0, [r7, #24]
 8015220:	f000 f902 	bl	8015428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015224:	4b1c      	ldr	r3, [pc, #112]	@ (8015298 <pvPortMalloc+0x190>)
 8015226:	681a      	ldr	r2, [r3, #0]
 8015228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	1ad3      	subs	r3, r2, r3
 801522e:	4a1a      	ldr	r2, [pc, #104]	@ (8015298 <pvPortMalloc+0x190>)
 8015230:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015232:	4b19      	ldr	r3, [pc, #100]	@ (8015298 <pvPortMalloc+0x190>)
 8015234:	681a      	ldr	r2, [r3, #0]
 8015236:	4b1a      	ldr	r3, [pc, #104]	@ (80152a0 <pvPortMalloc+0x198>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	429a      	cmp	r2, r3
 801523c:	d203      	bcs.n	8015246 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801523e:	4b16      	ldr	r3, [pc, #88]	@ (8015298 <pvPortMalloc+0x190>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	4a17      	ldr	r2, [pc, #92]	@ (80152a0 <pvPortMalloc+0x198>)
 8015244:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015248:	685a      	ldr	r2, [r3, #4]
 801524a:	4b12      	ldr	r3, [pc, #72]	@ (8015294 <pvPortMalloc+0x18c>)
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	431a      	orrs	r2, r3
 8015250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015252:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015256:	2200      	movs	r2, #0
 8015258:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801525a:	f7fe fe15 	bl	8013e88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801525e:	69fb      	ldr	r3, [r7, #28]
 8015260:	f003 0307 	and.w	r3, r3, #7
 8015264:	2b00      	cmp	r3, #0
 8015266:	d00d      	beq.n	8015284 <pvPortMalloc+0x17c>
	__asm volatile
 8015268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801526c:	b672      	cpsid	i
 801526e:	f383 8811 	msr	BASEPRI, r3
 8015272:	f3bf 8f6f 	isb	sy
 8015276:	f3bf 8f4f 	dsb	sy
 801527a:	b662      	cpsie	i
 801527c:	60fb      	str	r3, [r7, #12]
}
 801527e:	bf00      	nop
 8015280:	bf00      	nop
 8015282:	e7fd      	b.n	8015280 <pvPortMalloc+0x178>
	return pvReturn;
 8015284:	69fb      	ldr	r3, [r7, #28]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3728      	adds	r7, #40	@ 0x28
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	20014c64 	.word	0x20014c64
 8015294:	20014c70 	.word	0x20014c70
 8015298:	20014c68 	.word	0x20014c68
 801529c:	20014c5c 	.word	0x20014c5c
 80152a0:	20014c6c 	.word	0x20014c6c

080152a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b086      	sub	sp, #24
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d04e      	beq.n	8015354 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80152b6:	2308      	movs	r3, #8
 80152b8:	425b      	negs	r3, r3
 80152ba:	697a      	ldr	r2, [r7, #20]
 80152bc:	4413      	add	r3, r2
 80152be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	685a      	ldr	r2, [r3, #4]
 80152c8:	4b24      	ldr	r3, [pc, #144]	@ (801535c <vPortFree+0xb8>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	4013      	ands	r3, r2
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d10d      	bne.n	80152ee <vPortFree+0x4a>
	__asm volatile
 80152d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152d6:	b672      	cpsid	i
 80152d8:	f383 8811 	msr	BASEPRI, r3
 80152dc:	f3bf 8f6f 	isb	sy
 80152e0:	f3bf 8f4f 	dsb	sy
 80152e4:	b662      	cpsie	i
 80152e6:	60fb      	str	r3, [r7, #12]
}
 80152e8:	bf00      	nop
 80152ea:	bf00      	nop
 80152ec:	e7fd      	b.n	80152ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80152ee:	693b      	ldr	r3, [r7, #16]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00d      	beq.n	8015312 <vPortFree+0x6e>
	__asm volatile
 80152f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152fa:	b672      	cpsid	i
 80152fc:	f383 8811 	msr	BASEPRI, r3
 8015300:	f3bf 8f6f 	isb	sy
 8015304:	f3bf 8f4f 	dsb	sy
 8015308:	b662      	cpsie	i
 801530a:	60bb      	str	r3, [r7, #8]
}
 801530c:	bf00      	nop
 801530e:	bf00      	nop
 8015310:	e7fd      	b.n	801530e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015312:	693b      	ldr	r3, [r7, #16]
 8015314:	685a      	ldr	r2, [r3, #4]
 8015316:	4b11      	ldr	r3, [pc, #68]	@ (801535c <vPortFree+0xb8>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	4013      	ands	r3, r2
 801531c:	2b00      	cmp	r3, #0
 801531e:	d019      	beq.n	8015354 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d115      	bne.n	8015354 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	4b0b      	ldr	r3, [pc, #44]	@ (801535c <vPortFree+0xb8>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	43db      	mvns	r3, r3
 8015332:	401a      	ands	r2, r3
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015338:	f7fe fd98 	bl	8013e6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	685a      	ldr	r2, [r3, #4]
 8015340:	4b07      	ldr	r3, [pc, #28]	@ (8015360 <vPortFree+0xbc>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	4413      	add	r3, r2
 8015346:	4a06      	ldr	r2, [pc, #24]	@ (8015360 <vPortFree+0xbc>)
 8015348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801534a:	6938      	ldr	r0, [r7, #16]
 801534c:	f000 f86c 	bl	8015428 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015350:	f7fe fd9a 	bl	8013e88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015354:	bf00      	nop
 8015356:	3718      	adds	r7, #24
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	20014c70 	.word	0x20014c70
 8015360:	20014c68 	.word	0x20014c68

08015364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015364:	b480      	push	{r7}
 8015366:	b085      	sub	sp, #20
 8015368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801536a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801536e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015370:	4b27      	ldr	r3, [pc, #156]	@ (8015410 <prvHeapInit+0xac>)
 8015372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	f003 0307 	and.w	r3, r3, #7
 801537a:	2b00      	cmp	r3, #0
 801537c:	d00c      	beq.n	8015398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	3307      	adds	r3, #7
 8015382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f023 0307 	bic.w	r3, r3, #7
 801538a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801538c:	68ba      	ldr	r2, [r7, #8]
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	1ad3      	subs	r3, r2, r3
 8015392:	4a1f      	ldr	r2, [pc, #124]	@ (8015410 <prvHeapInit+0xac>)
 8015394:	4413      	add	r3, r2
 8015396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801539c:	4a1d      	ldr	r2, [pc, #116]	@ (8015414 <prvHeapInit+0xb0>)
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80153a2:	4b1c      	ldr	r3, [pc, #112]	@ (8015414 <prvHeapInit+0xb0>)
 80153a4:	2200      	movs	r2, #0
 80153a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	68ba      	ldr	r2, [r7, #8]
 80153ac:	4413      	add	r3, r2
 80153ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80153b0:	2208      	movs	r2, #8
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	1a9b      	subs	r3, r3, r2
 80153b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	f023 0307 	bic.w	r3, r3, #7
 80153be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	4a15      	ldr	r2, [pc, #84]	@ (8015418 <prvHeapInit+0xb4>)
 80153c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80153c6:	4b14      	ldr	r3, [pc, #80]	@ (8015418 <prvHeapInit+0xb4>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2200      	movs	r2, #0
 80153cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80153ce:	4b12      	ldr	r3, [pc, #72]	@ (8015418 <prvHeapInit+0xb4>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	2200      	movs	r2, #0
 80153d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	68fa      	ldr	r2, [r7, #12]
 80153de:	1ad2      	subs	r2, r2, r3
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80153e4:	4b0c      	ldr	r3, [pc, #48]	@ (8015418 <prvHeapInit+0xb4>)
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	685b      	ldr	r3, [r3, #4]
 80153f0:	4a0a      	ldr	r2, [pc, #40]	@ (801541c <prvHeapInit+0xb8>)
 80153f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	4a09      	ldr	r2, [pc, #36]	@ (8015420 <prvHeapInit+0xbc>)
 80153fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80153fc:	4b09      	ldr	r3, [pc, #36]	@ (8015424 <prvHeapInit+0xc0>)
 80153fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015402:	601a      	str	r2, [r3, #0]
}
 8015404:	bf00      	nop
 8015406:	3714      	adds	r7, #20
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr
 8015410:	2000cc5c 	.word	0x2000cc5c
 8015414:	20014c5c 	.word	0x20014c5c
 8015418:	20014c64 	.word	0x20014c64
 801541c:	20014c6c 	.word	0x20014c6c
 8015420:	20014c68 	.word	0x20014c68
 8015424:	20014c70 	.word	0x20014c70

08015428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015428:	b480      	push	{r7}
 801542a:	b085      	sub	sp, #20
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015430:	4b28      	ldr	r3, [pc, #160]	@ (80154d4 <prvInsertBlockIntoFreeList+0xac>)
 8015432:	60fb      	str	r3, [r7, #12]
 8015434:	e002      	b.n	801543c <prvInsertBlockIntoFreeList+0x14>
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	60fb      	str	r3, [r7, #12]
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	429a      	cmp	r2, r3
 8015444:	d8f7      	bhi.n	8015436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	68ba      	ldr	r2, [r7, #8]
 8015450:	4413      	add	r3, r2
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	429a      	cmp	r2, r3
 8015456:	d108      	bne.n	801546a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	685a      	ldr	r2, [r3, #4]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	441a      	add	r2, r3
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	685b      	ldr	r3, [r3, #4]
 8015472:	68ba      	ldr	r2, [r7, #8]
 8015474:	441a      	add	r2, r3
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	429a      	cmp	r2, r3
 801547c:	d118      	bne.n	80154b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	681a      	ldr	r2, [r3, #0]
 8015482:	4b15      	ldr	r3, [pc, #84]	@ (80154d8 <prvInsertBlockIntoFreeList+0xb0>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	429a      	cmp	r2, r3
 8015488:	d00d      	beq.n	80154a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	685a      	ldr	r2, [r3, #4]
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	441a      	add	r2, r3
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	601a      	str	r2, [r3, #0]
 80154a4:	e008      	b.n	80154b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80154a6:	4b0c      	ldr	r3, [pc, #48]	@ (80154d8 <prvInsertBlockIntoFreeList+0xb0>)
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	601a      	str	r2, [r3, #0]
 80154ae:	e003      	b.n	80154b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80154b8:	68fa      	ldr	r2, [r7, #12]
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d002      	beq.n	80154c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80154c6:	bf00      	nop
 80154c8:	3714      	adds	r7, #20
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr
 80154d2:	bf00      	nop
 80154d4:	20014c5c 	.word	0x20014c5c
 80154d8:	20014c64 	.word	0x20014c64

080154dc <atof>:
 80154dc:	2100      	movs	r1, #0
 80154de:	f000 be03 	b.w	80160e8 <strtod>

080154e2 <sulp>:
 80154e2:	b570      	push	{r4, r5, r6, lr}
 80154e4:	4604      	mov	r4, r0
 80154e6:	460d      	mov	r5, r1
 80154e8:	ec45 4b10 	vmov	d0, r4, r5
 80154ec:	4616      	mov	r6, r2
 80154ee:	f001 ffff 	bl	80174f0 <__ulp>
 80154f2:	ec51 0b10 	vmov	r0, r1, d0
 80154f6:	b17e      	cbz	r6, 8015518 <sulp+0x36>
 80154f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80154fc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015500:	2b00      	cmp	r3, #0
 8015502:	dd09      	ble.n	8015518 <sulp+0x36>
 8015504:	051b      	lsls	r3, r3, #20
 8015506:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801550a:	2400      	movs	r4, #0
 801550c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8015510:	4622      	mov	r2, r4
 8015512:	462b      	mov	r3, r5
 8015514:	f7eb f890 	bl	8000638 <__aeabi_dmul>
 8015518:	ec41 0b10 	vmov	d0, r0, r1
 801551c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015520 <_strtod_l>:
 8015520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015524:	b09f      	sub	sp, #124	@ 0x7c
 8015526:	460c      	mov	r4, r1
 8015528:	9217      	str	r2, [sp, #92]	@ 0x5c
 801552a:	2200      	movs	r2, #0
 801552c:	921a      	str	r2, [sp, #104]	@ 0x68
 801552e:	9005      	str	r0, [sp, #20]
 8015530:	f04f 0a00 	mov.w	sl, #0
 8015534:	f04f 0b00 	mov.w	fp, #0
 8015538:	460a      	mov	r2, r1
 801553a:	9219      	str	r2, [sp, #100]	@ 0x64
 801553c:	7811      	ldrb	r1, [r2, #0]
 801553e:	292b      	cmp	r1, #43	@ 0x2b
 8015540:	d04a      	beq.n	80155d8 <_strtod_l+0xb8>
 8015542:	d838      	bhi.n	80155b6 <_strtod_l+0x96>
 8015544:	290d      	cmp	r1, #13
 8015546:	d832      	bhi.n	80155ae <_strtod_l+0x8e>
 8015548:	2908      	cmp	r1, #8
 801554a:	d832      	bhi.n	80155b2 <_strtod_l+0x92>
 801554c:	2900      	cmp	r1, #0
 801554e:	d03b      	beq.n	80155c8 <_strtod_l+0xa8>
 8015550:	2200      	movs	r2, #0
 8015552:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015554:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8015556:	782a      	ldrb	r2, [r5, #0]
 8015558:	2a30      	cmp	r2, #48	@ 0x30
 801555a:	f040 80b3 	bne.w	80156c4 <_strtod_l+0x1a4>
 801555e:	786a      	ldrb	r2, [r5, #1]
 8015560:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015564:	2a58      	cmp	r2, #88	@ 0x58
 8015566:	d16e      	bne.n	8015646 <_strtod_l+0x126>
 8015568:	9302      	str	r3, [sp, #8]
 801556a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801556c:	9301      	str	r3, [sp, #4]
 801556e:	ab1a      	add	r3, sp, #104	@ 0x68
 8015570:	9300      	str	r3, [sp, #0]
 8015572:	4a8e      	ldr	r2, [pc, #568]	@ (80157ac <_strtod_l+0x28c>)
 8015574:	9805      	ldr	r0, [sp, #20]
 8015576:	ab1b      	add	r3, sp, #108	@ 0x6c
 8015578:	a919      	add	r1, sp, #100	@ 0x64
 801557a:	f001 f8b3 	bl	80166e4 <__gethex>
 801557e:	f010 060f 	ands.w	r6, r0, #15
 8015582:	4604      	mov	r4, r0
 8015584:	d005      	beq.n	8015592 <_strtod_l+0x72>
 8015586:	2e06      	cmp	r6, #6
 8015588:	d128      	bne.n	80155dc <_strtod_l+0xbc>
 801558a:	3501      	adds	r5, #1
 801558c:	2300      	movs	r3, #0
 801558e:	9519      	str	r5, [sp, #100]	@ 0x64
 8015590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015594:	2b00      	cmp	r3, #0
 8015596:	f040 858e 	bne.w	80160b6 <_strtod_l+0xb96>
 801559a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801559c:	b1cb      	cbz	r3, 80155d2 <_strtod_l+0xb2>
 801559e:	4652      	mov	r2, sl
 80155a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80155a4:	ec43 2b10 	vmov	d0, r2, r3
 80155a8:	b01f      	add	sp, #124	@ 0x7c
 80155aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ae:	2920      	cmp	r1, #32
 80155b0:	d1ce      	bne.n	8015550 <_strtod_l+0x30>
 80155b2:	3201      	adds	r2, #1
 80155b4:	e7c1      	b.n	801553a <_strtod_l+0x1a>
 80155b6:	292d      	cmp	r1, #45	@ 0x2d
 80155b8:	d1ca      	bne.n	8015550 <_strtod_l+0x30>
 80155ba:	2101      	movs	r1, #1
 80155bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80155be:	1c51      	adds	r1, r2, #1
 80155c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80155c2:	7852      	ldrb	r2, [r2, #1]
 80155c4:	2a00      	cmp	r2, #0
 80155c6:	d1c5      	bne.n	8015554 <_strtod_l+0x34>
 80155c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80155ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	f040 8570 	bne.w	80160b2 <_strtod_l+0xb92>
 80155d2:	4652      	mov	r2, sl
 80155d4:	465b      	mov	r3, fp
 80155d6:	e7e5      	b.n	80155a4 <_strtod_l+0x84>
 80155d8:	2100      	movs	r1, #0
 80155da:	e7ef      	b.n	80155bc <_strtod_l+0x9c>
 80155dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80155de:	b13a      	cbz	r2, 80155f0 <_strtod_l+0xd0>
 80155e0:	2135      	movs	r1, #53	@ 0x35
 80155e2:	a81c      	add	r0, sp, #112	@ 0x70
 80155e4:	f002 f87e 	bl	80176e4 <__copybits>
 80155e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80155ea:	9805      	ldr	r0, [sp, #20]
 80155ec:	f001 fc4c 	bl	8016e88 <_Bfree>
 80155f0:	3e01      	subs	r6, #1
 80155f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80155f4:	2e04      	cmp	r6, #4
 80155f6:	d806      	bhi.n	8015606 <_strtod_l+0xe6>
 80155f8:	e8df f006 	tbb	[pc, r6]
 80155fc:	201d0314 	.word	0x201d0314
 8015600:	14          	.byte	0x14
 8015601:	00          	.byte	0x00
 8015602:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8015606:	05e1      	lsls	r1, r4, #23
 8015608:	bf48      	it	mi
 801560a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801560e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015612:	0d1b      	lsrs	r3, r3, #20
 8015614:	051b      	lsls	r3, r3, #20
 8015616:	2b00      	cmp	r3, #0
 8015618:	d1bb      	bne.n	8015592 <_strtod_l+0x72>
 801561a:	f000 ff6b 	bl	80164f4 <__errno>
 801561e:	2322      	movs	r3, #34	@ 0x22
 8015620:	6003      	str	r3, [r0, #0]
 8015622:	e7b6      	b.n	8015592 <_strtod_l+0x72>
 8015624:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015628:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801562c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015630:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015634:	e7e7      	b.n	8015606 <_strtod_l+0xe6>
 8015636:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80157b4 <_strtod_l+0x294>
 801563a:	e7e4      	b.n	8015606 <_strtod_l+0xe6>
 801563c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015640:	f04f 3aff 	mov.w	sl, #4294967295
 8015644:	e7df      	b.n	8015606 <_strtod_l+0xe6>
 8015646:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015648:	1c5a      	adds	r2, r3, #1
 801564a:	9219      	str	r2, [sp, #100]	@ 0x64
 801564c:	785b      	ldrb	r3, [r3, #1]
 801564e:	2b30      	cmp	r3, #48	@ 0x30
 8015650:	d0f9      	beq.n	8015646 <_strtod_l+0x126>
 8015652:	2b00      	cmp	r3, #0
 8015654:	d09d      	beq.n	8015592 <_strtod_l+0x72>
 8015656:	2301      	movs	r3, #1
 8015658:	9309      	str	r3, [sp, #36]	@ 0x24
 801565a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801565c:	930c      	str	r3, [sp, #48]	@ 0x30
 801565e:	2300      	movs	r3, #0
 8015660:	9308      	str	r3, [sp, #32]
 8015662:	930a      	str	r3, [sp, #40]	@ 0x28
 8015664:	461f      	mov	r7, r3
 8015666:	220a      	movs	r2, #10
 8015668:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801566a:	7805      	ldrb	r5, [r0, #0]
 801566c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8015670:	b2d9      	uxtb	r1, r3
 8015672:	2909      	cmp	r1, #9
 8015674:	d928      	bls.n	80156c8 <_strtod_l+0x1a8>
 8015676:	494e      	ldr	r1, [pc, #312]	@ (80157b0 <_strtod_l+0x290>)
 8015678:	2201      	movs	r2, #1
 801567a:	f000 feba 	bl	80163f2 <strncmp>
 801567e:	2800      	cmp	r0, #0
 8015680:	d032      	beq.n	80156e8 <_strtod_l+0x1c8>
 8015682:	2000      	movs	r0, #0
 8015684:	462a      	mov	r2, r5
 8015686:	4681      	mov	r9, r0
 8015688:	463d      	mov	r5, r7
 801568a:	4603      	mov	r3, r0
 801568c:	2a65      	cmp	r2, #101	@ 0x65
 801568e:	d001      	beq.n	8015694 <_strtod_l+0x174>
 8015690:	2a45      	cmp	r2, #69	@ 0x45
 8015692:	d114      	bne.n	80156be <_strtod_l+0x19e>
 8015694:	b91d      	cbnz	r5, 801569e <_strtod_l+0x17e>
 8015696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015698:	4302      	orrs	r2, r0
 801569a:	d095      	beq.n	80155c8 <_strtod_l+0xa8>
 801569c:	2500      	movs	r5, #0
 801569e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80156a0:	1c62      	adds	r2, r4, #1
 80156a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80156a4:	7862      	ldrb	r2, [r4, #1]
 80156a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80156a8:	d077      	beq.n	801579a <_strtod_l+0x27a>
 80156aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80156ac:	d07b      	beq.n	80157a6 <_strtod_l+0x286>
 80156ae:	f04f 0c00 	mov.w	ip, #0
 80156b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80156b6:	2909      	cmp	r1, #9
 80156b8:	f240 8082 	bls.w	80157c0 <_strtod_l+0x2a0>
 80156bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80156be:	f04f 0800 	mov.w	r8, #0
 80156c2:	e0a2      	b.n	801580a <_strtod_l+0x2ea>
 80156c4:	2300      	movs	r3, #0
 80156c6:	e7c7      	b.n	8015658 <_strtod_l+0x138>
 80156c8:	2f08      	cmp	r7, #8
 80156ca:	bfd5      	itete	le
 80156cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80156ce:	9908      	ldrgt	r1, [sp, #32]
 80156d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80156d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80156d8:	f100 0001 	add.w	r0, r0, #1
 80156dc:	bfd4      	ite	le
 80156de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80156e0:	9308      	strgt	r3, [sp, #32]
 80156e2:	3701      	adds	r7, #1
 80156e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80156e6:	e7bf      	b.n	8015668 <_strtod_l+0x148>
 80156e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80156ea:	1c5a      	adds	r2, r3, #1
 80156ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80156ee:	785a      	ldrb	r2, [r3, #1]
 80156f0:	b37f      	cbz	r7, 8015752 <_strtod_l+0x232>
 80156f2:	4681      	mov	r9, r0
 80156f4:	463d      	mov	r5, r7
 80156f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80156fa:	2b09      	cmp	r3, #9
 80156fc:	d912      	bls.n	8015724 <_strtod_l+0x204>
 80156fe:	2301      	movs	r3, #1
 8015700:	e7c4      	b.n	801568c <_strtod_l+0x16c>
 8015702:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015704:	1c5a      	adds	r2, r3, #1
 8015706:	9219      	str	r2, [sp, #100]	@ 0x64
 8015708:	785a      	ldrb	r2, [r3, #1]
 801570a:	3001      	adds	r0, #1
 801570c:	2a30      	cmp	r2, #48	@ 0x30
 801570e:	d0f8      	beq.n	8015702 <_strtod_l+0x1e2>
 8015710:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015714:	2b08      	cmp	r3, #8
 8015716:	f200 84d3 	bhi.w	80160c0 <_strtod_l+0xba0>
 801571a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801571c:	930c      	str	r3, [sp, #48]	@ 0x30
 801571e:	4681      	mov	r9, r0
 8015720:	2000      	movs	r0, #0
 8015722:	4605      	mov	r5, r0
 8015724:	3a30      	subs	r2, #48	@ 0x30
 8015726:	f100 0301 	add.w	r3, r0, #1
 801572a:	d02a      	beq.n	8015782 <_strtod_l+0x262>
 801572c:	4499      	add	r9, r3
 801572e:	eb00 0c05 	add.w	ip, r0, r5
 8015732:	462b      	mov	r3, r5
 8015734:	210a      	movs	r1, #10
 8015736:	4563      	cmp	r3, ip
 8015738:	d10d      	bne.n	8015756 <_strtod_l+0x236>
 801573a:	1c69      	adds	r1, r5, #1
 801573c:	4401      	add	r1, r0
 801573e:	4428      	add	r0, r5
 8015740:	2808      	cmp	r0, #8
 8015742:	dc16      	bgt.n	8015772 <_strtod_l+0x252>
 8015744:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015746:	230a      	movs	r3, #10
 8015748:	fb03 2300 	mla	r3, r3, r0, r2
 801574c:	930a      	str	r3, [sp, #40]	@ 0x28
 801574e:	2300      	movs	r3, #0
 8015750:	e018      	b.n	8015784 <_strtod_l+0x264>
 8015752:	4638      	mov	r0, r7
 8015754:	e7da      	b.n	801570c <_strtod_l+0x1ec>
 8015756:	2b08      	cmp	r3, #8
 8015758:	f103 0301 	add.w	r3, r3, #1
 801575c:	dc03      	bgt.n	8015766 <_strtod_l+0x246>
 801575e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8015760:	434e      	muls	r6, r1
 8015762:	960a      	str	r6, [sp, #40]	@ 0x28
 8015764:	e7e7      	b.n	8015736 <_strtod_l+0x216>
 8015766:	2b10      	cmp	r3, #16
 8015768:	bfde      	ittt	le
 801576a:	9e08      	ldrle	r6, [sp, #32]
 801576c:	434e      	mulle	r6, r1
 801576e:	9608      	strle	r6, [sp, #32]
 8015770:	e7e1      	b.n	8015736 <_strtod_l+0x216>
 8015772:	280f      	cmp	r0, #15
 8015774:	dceb      	bgt.n	801574e <_strtod_l+0x22e>
 8015776:	9808      	ldr	r0, [sp, #32]
 8015778:	230a      	movs	r3, #10
 801577a:	fb03 2300 	mla	r3, r3, r0, r2
 801577e:	9308      	str	r3, [sp, #32]
 8015780:	e7e5      	b.n	801574e <_strtod_l+0x22e>
 8015782:	4629      	mov	r1, r5
 8015784:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015786:	1c50      	adds	r0, r2, #1
 8015788:	9019      	str	r0, [sp, #100]	@ 0x64
 801578a:	7852      	ldrb	r2, [r2, #1]
 801578c:	4618      	mov	r0, r3
 801578e:	460d      	mov	r5, r1
 8015790:	e7b1      	b.n	80156f6 <_strtod_l+0x1d6>
 8015792:	f04f 0900 	mov.w	r9, #0
 8015796:	2301      	movs	r3, #1
 8015798:	e77d      	b.n	8015696 <_strtod_l+0x176>
 801579a:	f04f 0c00 	mov.w	ip, #0
 801579e:	1ca2      	adds	r2, r4, #2
 80157a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80157a2:	78a2      	ldrb	r2, [r4, #2]
 80157a4:	e785      	b.n	80156b2 <_strtod_l+0x192>
 80157a6:	f04f 0c01 	mov.w	ip, #1
 80157aa:	e7f8      	b.n	801579e <_strtod_l+0x27e>
 80157ac:	08018fdc 	.word	0x08018fdc
 80157b0:	08018fb8 	.word	0x08018fb8
 80157b4:	7ff00000 	.word	0x7ff00000
 80157b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80157ba:	1c51      	adds	r1, r2, #1
 80157bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80157be:	7852      	ldrb	r2, [r2, #1]
 80157c0:	2a30      	cmp	r2, #48	@ 0x30
 80157c2:	d0f9      	beq.n	80157b8 <_strtod_l+0x298>
 80157c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80157c8:	2908      	cmp	r1, #8
 80157ca:	f63f af78 	bhi.w	80156be <_strtod_l+0x19e>
 80157ce:	3a30      	subs	r2, #48	@ 0x30
 80157d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80157d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80157d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80157d6:	f04f 080a 	mov.w	r8, #10
 80157da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80157dc:	1c56      	adds	r6, r2, #1
 80157de:	9619      	str	r6, [sp, #100]	@ 0x64
 80157e0:	7852      	ldrb	r2, [r2, #1]
 80157e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80157e6:	f1be 0f09 	cmp.w	lr, #9
 80157ea:	d939      	bls.n	8015860 <_strtod_l+0x340>
 80157ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80157ee:	1a76      	subs	r6, r6, r1
 80157f0:	2e08      	cmp	r6, #8
 80157f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80157f6:	dc03      	bgt.n	8015800 <_strtod_l+0x2e0>
 80157f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80157fa:	4588      	cmp	r8, r1
 80157fc:	bfa8      	it	ge
 80157fe:	4688      	movge	r8, r1
 8015800:	f1bc 0f00 	cmp.w	ip, #0
 8015804:	d001      	beq.n	801580a <_strtod_l+0x2ea>
 8015806:	f1c8 0800 	rsb	r8, r8, #0
 801580a:	2d00      	cmp	r5, #0
 801580c:	d14e      	bne.n	80158ac <_strtod_l+0x38c>
 801580e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015810:	4308      	orrs	r0, r1
 8015812:	f47f aebe 	bne.w	8015592 <_strtod_l+0x72>
 8015816:	2b00      	cmp	r3, #0
 8015818:	f47f aed6 	bne.w	80155c8 <_strtod_l+0xa8>
 801581c:	2a69      	cmp	r2, #105	@ 0x69
 801581e:	d028      	beq.n	8015872 <_strtod_l+0x352>
 8015820:	dc25      	bgt.n	801586e <_strtod_l+0x34e>
 8015822:	2a49      	cmp	r2, #73	@ 0x49
 8015824:	d025      	beq.n	8015872 <_strtod_l+0x352>
 8015826:	2a4e      	cmp	r2, #78	@ 0x4e
 8015828:	f47f aece 	bne.w	80155c8 <_strtod_l+0xa8>
 801582c:	499b      	ldr	r1, [pc, #620]	@ (8015a9c <_strtod_l+0x57c>)
 801582e:	a819      	add	r0, sp, #100	@ 0x64
 8015830:	f001 f97a 	bl	8016b28 <__match>
 8015834:	2800      	cmp	r0, #0
 8015836:	f43f aec7 	beq.w	80155c8 <_strtod_l+0xa8>
 801583a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	2b28      	cmp	r3, #40	@ 0x28
 8015840:	d12e      	bne.n	80158a0 <_strtod_l+0x380>
 8015842:	4997      	ldr	r1, [pc, #604]	@ (8015aa0 <_strtod_l+0x580>)
 8015844:	aa1c      	add	r2, sp, #112	@ 0x70
 8015846:	a819      	add	r0, sp, #100	@ 0x64
 8015848:	f001 f982 	bl	8016b50 <__hexnan>
 801584c:	2805      	cmp	r0, #5
 801584e:	d127      	bne.n	80158a0 <_strtod_l+0x380>
 8015850:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015852:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8015856:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801585a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801585e:	e698      	b.n	8015592 <_strtod_l+0x72>
 8015860:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015862:	fb08 2101 	mla	r1, r8, r1, r2
 8015866:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801586a:	920e      	str	r2, [sp, #56]	@ 0x38
 801586c:	e7b5      	b.n	80157da <_strtod_l+0x2ba>
 801586e:	2a6e      	cmp	r2, #110	@ 0x6e
 8015870:	e7da      	b.n	8015828 <_strtod_l+0x308>
 8015872:	498c      	ldr	r1, [pc, #560]	@ (8015aa4 <_strtod_l+0x584>)
 8015874:	a819      	add	r0, sp, #100	@ 0x64
 8015876:	f001 f957 	bl	8016b28 <__match>
 801587a:	2800      	cmp	r0, #0
 801587c:	f43f aea4 	beq.w	80155c8 <_strtod_l+0xa8>
 8015880:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015882:	4989      	ldr	r1, [pc, #548]	@ (8015aa8 <_strtod_l+0x588>)
 8015884:	3b01      	subs	r3, #1
 8015886:	a819      	add	r0, sp, #100	@ 0x64
 8015888:	9319      	str	r3, [sp, #100]	@ 0x64
 801588a:	f001 f94d 	bl	8016b28 <__match>
 801588e:	b910      	cbnz	r0, 8015896 <_strtod_l+0x376>
 8015890:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015892:	3301      	adds	r3, #1
 8015894:	9319      	str	r3, [sp, #100]	@ 0x64
 8015896:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8015ab8 <_strtod_l+0x598>
 801589a:	f04f 0a00 	mov.w	sl, #0
 801589e:	e678      	b.n	8015592 <_strtod_l+0x72>
 80158a0:	4882      	ldr	r0, [pc, #520]	@ (8015aac <_strtod_l+0x58c>)
 80158a2:	f000 fe65 	bl	8016570 <nan>
 80158a6:	ec5b ab10 	vmov	sl, fp, d0
 80158aa:	e672      	b.n	8015592 <_strtod_l+0x72>
 80158ac:	eba8 0309 	sub.w	r3, r8, r9
 80158b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80158b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80158b4:	2f00      	cmp	r7, #0
 80158b6:	bf08      	it	eq
 80158b8:	462f      	moveq	r7, r5
 80158ba:	2d10      	cmp	r5, #16
 80158bc:	462c      	mov	r4, r5
 80158be:	bfa8      	it	ge
 80158c0:	2410      	movge	r4, #16
 80158c2:	f7ea fe3f 	bl	8000544 <__aeabi_ui2d>
 80158c6:	2d09      	cmp	r5, #9
 80158c8:	4682      	mov	sl, r0
 80158ca:	468b      	mov	fp, r1
 80158cc:	dc13      	bgt.n	80158f6 <_strtod_l+0x3d6>
 80158ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	f43f ae5e 	beq.w	8015592 <_strtod_l+0x72>
 80158d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158d8:	dd78      	ble.n	80159cc <_strtod_l+0x4ac>
 80158da:	2b16      	cmp	r3, #22
 80158dc:	dc5f      	bgt.n	801599e <_strtod_l+0x47e>
 80158de:	4974      	ldr	r1, [pc, #464]	@ (8015ab0 <_strtod_l+0x590>)
 80158e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80158e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158e8:	4652      	mov	r2, sl
 80158ea:	465b      	mov	r3, fp
 80158ec:	f7ea fea4 	bl	8000638 <__aeabi_dmul>
 80158f0:	4682      	mov	sl, r0
 80158f2:	468b      	mov	fp, r1
 80158f4:	e64d      	b.n	8015592 <_strtod_l+0x72>
 80158f6:	4b6e      	ldr	r3, [pc, #440]	@ (8015ab0 <_strtod_l+0x590>)
 80158f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80158fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015900:	f7ea fe9a 	bl	8000638 <__aeabi_dmul>
 8015904:	4682      	mov	sl, r0
 8015906:	9808      	ldr	r0, [sp, #32]
 8015908:	468b      	mov	fp, r1
 801590a:	f7ea fe1b 	bl	8000544 <__aeabi_ui2d>
 801590e:	4602      	mov	r2, r0
 8015910:	460b      	mov	r3, r1
 8015912:	4650      	mov	r0, sl
 8015914:	4659      	mov	r1, fp
 8015916:	f7ea fcd9 	bl	80002cc <__adddf3>
 801591a:	2d0f      	cmp	r5, #15
 801591c:	4682      	mov	sl, r0
 801591e:	468b      	mov	fp, r1
 8015920:	ddd5      	ble.n	80158ce <_strtod_l+0x3ae>
 8015922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015924:	1b2c      	subs	r4, r5, r4
 8015926:	441c      	add	r4, r3
 8015928:	2c00      	cmp	r4, #0
 801592a:	f340 8096 	ble.w	8015a5a <_strtod_l+0x53a>
 801592e:	f014 030f 	ands.w	r3, r4, #15
 8015932:	d00a      	beq.n	801594a <_strtod_l+0x42a>
 8015934:	495e      	ldr	r1, [pc, #376]	@ (8015ab0 <_strtod_l+0x590>)
 8015936:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801593a:	4652      	mov	r2, sl
 801593c:	465b      	mov	r3, fp
 801593e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015942:	f7ea fe79 	bl	8000638 <__aeabi_dmul>
 8015946:	4682      	mov	sl, r0
 8015948:	468b      	mov	fp, r1
 801594a:	f034 040f 	bics.w	r4, r4, #15
 801594e:	d073      	beq.n	8015a38 <_strtod_l+0x518>
 8015950:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8015954:	dd48      	ble.n	80159e8 <_strtod_l+0x4c8>
 8015956:	2400      	movs	r4, #0
 8015958:	46a0      	mov	r8, r4
 801595a:	940a      	str	r4, [sp, #40]	@ 0x28
 801595c:	46a1      	mov	r9, r4
 801595e:	9a05      	ldr	r2, [sp, #20]
 8015960:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015ab8 <_strtod_l+0x598>
 8015964:	2322      	movs	r3, #34	@ 0x22
 8015966:	6013      	str	r3, [r2, #0]
 8015968:	f04f 0a00 	mov.w	sl, #0
 801596c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801596e:	2b00      	cmp	r3, #0
 8015970:	f43f ae0f 	beq.w	8015592 <_strtod_l+0x72>
 8015974:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015976:	9805      	ldr	r0, [sp, #20]
 8015978:	f001 fa86 	bl	8016e88 <_Bfree>
 801597c:	9805      	ldr	r0, [sp, #20]
 801597e:	4649      	mov	r1, r9
 8015980:	f001 fa82 	bl	8016e88 <_Bfree>
 8015984:	9805      	ldr	r0, [sp, #20]
 8015986:	4641      	mov	r1, r8
 8015988:	f001 fa7e 	bl	8016e88 <_Bfree>
 801598c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801598e:	9805      	ldr	r0, [sp, #20]
 8015990:	f001 fa7a 	bl	8016e88 <_Bfree>
 8015994:	9805      	ldr	r0, [sp, #20]
 8015996:	4621      	mov	r1, r4
 8015998:	f001 fa76 	bl	8016e88 <_Bfree>
 801599c:	e5f9      	b.n	8015592 <_strtod_l+0x72>
 801599e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80159a4:	4293      	cmp	r3, r2
 80159a6:	dbbc      	blt.n	8015922 <_strtod_l+0x402>
 80159a8:	4c41      	ldr	r4, [pc, #260]	@ (8015ab0 <_strtod_l+0x590>)
 80159aa:	f1c5 050f 	rsb	r5, r5, #15
 80159ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80159b2:	4652      	mov	r2, sl
 80159b4:	465b      	mov	r3, fp
 80159b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159ba:	f7ea fe3d 	bl	8000638 <__aeabi_dmul>
 80159be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159c0:	1b5d      	subs	r5, r3, r5
 80159c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80159c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80159ca:	e78f      	b.n	80158ec <_strtod_l+0x3cc>
 80159cc:	3316      	adds	r3, #22
 80159ce:	dba8      	blt.n	8015922 <_strtod_l+0x402>
 80159d0:	4b37      	ldr	r3, [pc, #220]	@ (8015ab0 <_strtod_l+0x590>)
 80159d2:	eba9 0808 	sub.w	r8, r9, r8
 80159d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80159da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80159de:	4650      	mov	r0, sl
 80159e0:	4659      	mov	r1, fp
 80159e2:	f7ea ff53 	bl	800088c <__aeabi_ddiv>
 80159e6:	e783      	b.n	80158f0 <_strtod_l+0x3d0>
 80159e8:	4b32      	ldr	r3, [pc, #200]	@ (8015ab4 <_strtod_l+0x594>)
 80159ea:	9308      	str	r3, [sp, #32]
 80159ec:	2300      	movs	r3, #0
 80159ee:	1124      	asrs	r4, r4, #4
 80159f0:	4650      	mov	r0, sl
 80159f2:	4659      	mov	r1, fp
 80159f4:	461e      	mov	r6, r3
 80159f6:	2c01      	cmp	r4, #1
 80159f8:	dc21      	bgt.n	8015a3e <_strtod_l+0x51e>
 80159fa:	b10b      	cbz	r3, 8015a00 <_strtod_l+0x4e0>
 80159fc:	4682      	mov	sl, r0
 80159fe:	468b      	mov	fp, r1
 8015a00:	492c      	ldr	r1, [pc, #176]	@ (8015ab4 <_strtod_l+0x594>)
 8015a02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015a06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8015a0a:	4652      	mov	r2, sl
 8015a0c:	465b      	mov	r3, fp
 8015a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a12:	f7ea fe11 	bl	8000638 <__aeabi_dmul>
 8015a16:	4b28      	ldr	r3, [pc, #160]	@ (8015ab8 <_strtod_l+0x598>)
 8015a18:	460a      	mov	r2, r1
 8015a1a:	400b      	ands	r3, r1
 8015a1c:	4927      	ldr	r1, [pc, #156]	@ (8015abc <_strtod_l+0x59c>)
 8015a1e:	428b      	cmp	r3, r1
 8015a20:	4682      	mov	sl, r0
 8015a22:	d898      	bhi.n	8015956 <_strtod_l+0x436>
 8015a24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015a28:	428b      	cmp	r3, r1
 8015a2a:	bf86      	itte	hi
 8015a2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8015ac0 <_strtod_l+0x5a0>
 8015a30:	f04f 3aff 	movhi.w	sl, #4294967295
 8015a34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015a38:	2300      	movs	r3, #0
 8015a3a:	9308      	str	r3, [sp, #32]
 8015a3c:	e07a      	b.n	8015b34 <_strtod_l+0x614>
 8015a3e:	07e2      	lsls	r2, r4, #31
 8015a40:	d505      	bpl.n	8015a4e <_strtod_l+0x52e>
 8015a42:	9b08      	ldr	r3, [sp, #32]
 8015a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a48:	f7ea fdf6 	bl	8000638 <__aeabi_dmul>
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	9a08      	ldr	r2, [sp, #32]
 8015a50:	3208      	adds	r2, #8
 8015a52:	3601      	adds	r6, #1
 8015a54:	1064      	asrs	r4, r4, #1
 8015a56:	9208      	str	r2, [sp, #32]
 8015a58:	e7cd      	b.n	80159f6 <_strtod_l+0x4d6>
 8015a5a:	d0ed      	beq.n	8015a38 <_strtod_l+0x518>
 8015a5c:	4264      	negs	r4, r4
 8015a5e:	f014 020f 	ands.w	r2, r4, #15
 8015a62:	d00a      	beq.n	8015a7a <_strtod_l+0x55a>
 8015a64:	4b12      	ldr	r3, [pc, #72]	@ (8015ab0 <_strtod_l+0x590>)
 8015a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a6a:	4650      	mov	r0, sl
 8015a6c:	4659      	mov	r1, fp
 8015a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a72:	f7ea ff0b 	bl	800088c <__aeabi_ddiv>
 8015a76:	4682      	mov	sl, r0
 8015a78:	468b      	mov	fp, r1
 8015a7a:	1124      	asrs	r4, r4, #4
 8015a7c:	d0dc      	beq.n	8015a38 <_strtod_l+0x518>
 8015a7e:	2c1f      	cmp	r4, #31
 8015a80:	dd20      	ble.n	8015ac4 <_strtod_l+0x5a4>
 8015a82:	2400      	movs	r4, #0
 8015a84:	46a0      	mov	r8, r4
 8015a86:	940a      	str	r4, [sp, #40]	@ 0x28
 8015a88:	46a1      	mov	r9, r4
 8015a8a:	9a05      	ldr	r2, [sp, #20]
 8015a8c:	2322      	movs	r3, #34	@ 0x22
 8015a8e:	f04f 0a00 	mov.w	sl, #0
 8015a92:	f04f 0b00 	mov.w	fp, #0
 8015a96:	6013      	str	r3, [r2, #0]
 8015a98:	e768      	b.n	801596c <_strtod_l+0x44c>
 8015a9a:	bf00      	nop
 8015a9c:	08018fc3 	.word	0x08018fc3
 8015aa0:	08018fc8 	.word	0x08018fc8
 8015aa4:	08018fba 	.word	0x08018fba
 8015aa8:	08018fbd 	.word	0x08018fbd
 8015aac:	0801936e 	.word	0x0801936e
 8015ab0:	08019238 	.word	0x08019238
 8015ab4:	08019210 	.word	0x08019210
 8015ab8:	7ff00000 	.word	0x7ff00000
 8015abc:	7ca00000 	.word	0x7ca00000
 8015ac0:	7fefffff 	.word	0x7fefffff
 8015ac4:	f014 0310 	ands.w	r3, r4, #16
 8015ac8:	bf18      	it	ne
 8015aca:	236a      	movne	r3, #106	@ 0x6a
 8015acc:	4ea9      	ldr	r6, [pc, #676]	@ (8015d74 <_strtod_l+0x854>)
 8015ace:	9308      	str	r3, [sp, #32]
 8015ad0:	4650      	mov	r0, sl
 8015ad2:	4659      	mov	r1, fp
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	07e2      	lsls	r2, r4, #31
 8015ad8:	d504      	bpl.n	8015ae4 <_strtod_l+0x5c4>
 8015ada:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015ade:	f7ea fdab 	bl	8000638 <__aeabi_dmul>
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	1064      	asrs	r4, r4, #1
 8015ae6:	f106 0608 	add.w	r6, r6, #8
 8015aea:	d1f4      	bne.n	8015ad6 <_strtod_l+0x5b6>
 8015aec:	b10b      	cbz	r3, 8015af2 <_strtod_l+0x5d2>
 8015aee:	4682      	mov	sl, r0
 8015af0:	468b      	mov	fp, r1
 8015af2:	9b08      	ldr	r3, [sp, #32]
 8015af4:	b1b3      	cbz	r3, 8015b24 <_strtod_l+0x604>
 8015af6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015afa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	4659      	mov	r1, fp
 8015b02:	dd0f      	ble.n	8015b24 <_strtod_l+0x604>
 8015b04:	2b1f      	cmp	r3, #31
 8015b06:	dd55      	ble.n	8015bb4 <_strtod_l+0x694>
 8015b08:	2b34      	cmp	r3, #52	@ 0x34
 8015b0a:	bfde      	ittt	le
 8015b0c:	f04f 33ff 	movle.w	r3, #4294967295
 8015b10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8015b14:	4093      	lslle	r3, r2
 8015b16:	f04f 0a00 	mov.w	sl, #0
 8015b1a:	bfcc      	ite	gt
 8015b1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015b20:	ea03 0b01 	andle.w	fp, r3, r1
 8015b24:	2200      	movs	r2, #0
 8015b26:	2300      	movs	r3, #0
 8015b28:	4650      	mov	r0, sl
 8015b2a:	4659      	mov	r1, fp
 8015b2c:	f7ea ffec 	bl	8000b08 <__aeabi_dcmpeq>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	d1a6      	bne.n	8015a82 <_strtod_l+0x562>
 8015b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b36:	9300      	str	r3, [sp, #0]
 8015b38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015b3a:	9805      	ldr	r0, [sp, #20]
 8015b3c:	462b      	mov	r3, r5
 8015b3e:	463a      	mov	r2, r7
 8015b40:	f001 fa0a 	bl	8016f58 <__s2b>
 8015b44:	900a      	str	r0, [sp, #40]	@ 0x28
 8015b46:	2800      	cmp	r0, #0
 8015b48:	f43f af05 	beq.w	8015956 <_strtod_l+0x436>
 8015b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015b4e:	2a00      	cmp	r2, #0
 8015b50:	eba9 0308 	sub.w	r3, r9, r8
 8015b54:	bfa8      	it	ge
 8015b56:	2300      	movge	r3, #0
 8015b58:	9312      	str	r3, [sp, #72]	@ 0x48
 8015b5a:	2400      	movs	r4, #0
 8015b5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015b60:	9316      	str	r3, [sp, #88]	@ 0x58
 8015b62:	46a0      	mov	r8, r4
 8015b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b66:	9805      	ldr	r0, [sp, #20]
 8015b68:	6859      	ldr	r1, [r3, #4]
 8015b6a:	f001 f94d 	bl	8016e08 <_Balloc>
 8015b6e:	4681      	mov	r9, r0
 8015b70:	2800      	cmp	r0, #0
 8015b72:	f43f aef4 	beq.w	801595e <_strtod_l+0x43e>
 8015b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b78:	691a      	ldr	r2, [r3, #16]
 8015b7a:	3202      	adds	r2, #2
 8015b7c:	f103 010c 	add.w	r1, r3, #12
 8015b80:	0092      	lsls	r2, r2, #2
 8015b82:	300c      	adds	r0, #12
 8015b84:	f000 fce3 	bl	801654e <memcpy>
 8015b88:	ec4b ab10 	vmov	d0, sl, fp
 8015b8c:	9805      	ldr	r0, [sp, #20]
 8015b8e:	aa1c      	add	r2, sp, #112	@ 0x70
 8015b90:	a91b      	add	r1, sp, #108	@ 0x6c
 8015b92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015b96:	f001 fd1b 	bl	80175d0 <__d2b>
 8015b9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	f43f aede 	beq.w	801595e <_strtod_l+0x43e>
 8015ba2:	9805      	ldr	r0, [sp, #20]
 8015ba4:	2101      	movs	r1, #1
 8015ba6:	f001 fa6d 	bl	8017084 <__i2b>
 8015baa:	4680      	mov	r8, r0
 8015bac:	b948      	cbnz	r0, 8015bc2 <_strtod_l+0x6a2>
 8015bae:	f04f 0800 	mov.w	r8, #0
 8015bb2:	e6d4      	b.n	801595e <_strtod_l+0x43e>
 8015bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8015bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8015bbc:	ea03 0a0a 	and.w	sl, r3, sl
 8015bc0:	e7b0      	b.n	8015b24 <_strtod_l+0x604>
 8015bc2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015bc4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015bc6:	2d00      	cmp	r5, #0
 8015bc8:	bfab      	itete	ge
 8015bca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8015bcc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8015bce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015bd0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015bd2:	bfac      	ite	ge
 8015bd4:	18ef      	addge	r7, r5, r3
 8015bd6:	1b5e      	sublt	r6, r3, r5
 8015bd8:	9b08      	ldr	r3, [sp, #32]
 8015bda:	1aed      	subs	r5, r5, r3
 8015bdc:	4415      	add	r5, r2
 8015bde:	4b66      	ldr	r3, [pc, #408]	@ (8015d78 <_strtod_l+0x858>)
 8015be0:	3d01      	subs	r5, #1
 8015be2:	429d      	cmp	r5, r3
 8015be4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015be8:	da50      	bge.n	8015c8c <_strtod_l+0x76c>
 8015bea:	1b5b      	subs	r3, r3, r5
 8015bec:	2b1f      	cmp	r3, #31
 8015bee:	eba2 0203 	sub.w	r2, r2, r3
 8015bf2:	f04f 0101 	mov.w	r1, #1
 8015bf6:	dc3d      	bgt.n	8015c74 <_strtod_l+0x754>
 8015bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8015bfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015bfe:	2300      	movs	r3, #0
 8015c00:	9310      	str	r3, [sp, #64]	@ 0x40
 8015c02:	18bd      	adds	r5, r7, r2
 8015c04:	9b08      	ldr	r3, [sp, #32]
 8015c06:	42af      	cmp	r7, r5
 8015c08:	4416      	add	r6, r2
 8015c0a:	441e      	add	r6, r3
 8015c0c:	463b      	mov	r3, r7
 8015c0e:	bfa8      	it	ge
 8015c10:	462b      	movge	r3, r5
 8015c12:	42b3      	cmp	r3, r6
 8015c14:	bfa8      	it	ge
 8015c16:	4633      	movge	r3, r6
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	bfc2      	ittt	gt
 8015c1c:	1aed      	subgt	r5, r5, r3
 8015c1e:	1af6      	subgt	r6, r6, r3
 8015c20:	1aff      	subgt	r7, r7, r3
 8015c22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	dd16      	ble.n	8015c56 <_strtod_l+0x736>
 8015c28:	4641      	mov	r1, r8
 8015c2a:	9805      	ldr	r0, [sp, #20]
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	f001 fae9 	bl	8017204 <__pow5mult>
 8015c32:	4680      	mov	r8, r0
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d0ba      	beq.n	8015bae <_strtod_l+0x68e>
 8015c38:	4601      	mov	r1, r0
 8015c3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015c3c:	9805      	ldr	r0, [sp, #20]
 8015c3e:	f001 fa37 	bl	80170b0 <__multiply>
 8015c42:	900e      	str	r0, [sp, #56]	@ 0x38
 8015c44:	2800      	cmp	r0, #0
 8015c46:	f43f ae8a 	beq.w	801595e <_strtod_l+0x43e>
 8015c4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015c4c:	9805      	ldr	r0, [sp, #20]
 8015c4e:	f001 f91b 	bl	8016e88 <_Bfree>
 8015c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c54:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c56:	2d00      	cmp	r5, #0
 8015c58:	dc1d      	bgt.n	8015c96 <_strtod_l+0x776>
 8015c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	dd23      	ble.n	8015ca8 <_strtod_l+0x788>
 8015c60:	4649      	mov	r1, r9
 8015c62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015c64:	9805      	ldr	r0, [sp, #20]
 8015c66:	f001 facd 	bl	8017204 <__pow5mult>
 8015c6a:	4681      	mov	r9, r0
 8015c6c:	b9e0      	cbnz	r0, 8015ca8 <_strtod_l+0x788>
 8015c6e:	f04f 0900 	mov.w	r9, #0
 8015c72:	e674      	b.n	801595e <_strtod_l+0x43e>
 8015c74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8015c78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8015c7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8015c80:	35e2      	adds	r5, #226	@ 0xe2
 8015c82:	fa01 f305 	lsl.w	r3, r1, r5
 8015c86:	9310      	str	r3, [sp, #64]	@ 0x40
 8015c88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015c8a:	e7ba      	b.n	8015c02 <_strtod_l+0x6e2>
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015c90:	2301      	movs	r3, #1
 8015c92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015c94:	e7b5      	b.n	8015c02 <_strtod_l+0x6e2>
 8015c96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015c98:	9805      	ldr	r0, [sp, #20]
 8015c9a:	462a      	mov	r2, r5
 8015c9c:	f001 fb0c 	bl	80172b8 <__lshift>
 8015ca0:	901a      	str	r0, [sp, #104]	@ 0x68
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	d1d9      	bne.n	8015c5a <_strtod_l+0x73a>
 8015ca6:	e65a      	b.n	801595e <_strtod_l+0x43e>
 8015ca8:	2e00      	cmp	r6, #0
 8015caa:	dd07      	ble.n	8015cbc <_strtod_l+0x79c>
 8015cac:	4649      	mov	r1, r9
 8015cae:	9805      	ldr	r0, [sp, #20]
 8015cb0:	4632      	mov	r2, r6
 8015cb2:	f001 fb01 	bl	80172b8 <__lshift>
 8015cb6:	4681      	mov	r9, r0
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d0d8      	beq.n	8015c6e <_strtod_l+0x74e>
 8015cbc:	2f00      	cmp	r7, #0
 8015cbe:	dd08      	ble.n	8015cd2 <_strtod_l+0x7b2>
 8015cc0:	4641      	mov	r1, r8
 8015cc2:	9805      	ldr	r0, [sp, #20]
 8015cc4:	463a      	mov	r2, r7
 8015cc6:	f001 faf7 	bl	80172b8 <__lshift>
 8015cca:	4680      	mov	r8, r0
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	f43f ae46 	beq.w	801595e <_strtod_l+0x43e>
 8015cd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015cd4:	9805      	ldr	r0, [sp, #20]
 8015cd6:	464a      	mov	r2, r9
 8015cd8:	f001 fb76 	bl	80173c8 <__mdiff>
 8015cdc:	4604      	mov	r4, r0
 8015cde:	2800      	cmp	r0, #0
 8015ce0:	f43f ae3d 	beq.w	801595e <_strtod_l+0x43e>
 8015ce4:	68c3      	ldr	r3, [r0, #12]
 8015ce6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015ce8:	2300      	movs	r3, #0
 8015cea:	60c3      	str	r3, [r0, #12]
 8015cec:	4641      	mov	r1, r8
 8015cee:	f001 fb4f 	bl	8017390 <__mcmp>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	da46      	bge.n	8015d84 <_strtod_l+0x864>
 8015cf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cf8:	ea53 030a 	orrs.w	r3, r3, sl
 8015cfc:	d16c      	bne.n	8015dd8 <_strtod_l+0x8b8>
 8015cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d168      	bne.n	8015dd8 <_strtod_l+0x8b8>
 8015d06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015d0a:	0d1b      	lsrs	r3, r3, #20
 8015d0c:	051b      	lsls	r3, r3, #20
 8015d0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015d12:	d961      	bls.n	8015dd8 <_strtod_l+0x8b8>
 8015d14:	6963      	ldr	r3, [r4, #20]
 8015d16:	b913      	cbnz	r3, 8015d1e <_strtod_l+0x7fe>
 8015d18:	6923      	ldr	r3, [r4, #16]
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	dd5c      	ble.n	8015dd8 <_strtod_l+0x8b8>
 8015d1e:	4621      	mov	r1, r4
 8015d20:	2201      	movs	r2, #1
 8015d22:	9805      	ldr	r0, [sp, #20]
 8015d24:	f001 fac8 	bl	80172b8 <__lshift>
 8015d28:	4641      	mov	r1, r8
 8015d2a:	4604      	mov	r4, r0
 8015d2c:	f001 fb30 	bl	8017390 <__mcmp>
 8015d30:	2800      	cmp	r0, #0
 8015d32:	dd51      	ble.n	8015dd8 <_strtod_l+0x8b8>
 8015d34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015d38:	9a08      	ldr	r2, [sp, #32]
 8015d3a:	0d1b      	lsrs	r3, r3, #20
 8015d3c:	051b      	lsls	r3, r3, #20
 8015d3e:	2a00      	cmp	r2, #0
 8015d40:	d06b      	beq.n	8015e1a <_strtod_l+0x8fa>
 8015d42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015d46:	d868      	bhi.n	8015e1a <_strtod_l+0x8fa>
 8015d48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015d4c:	f67f ae9d 	bls.w	8015a8a <_strtod_l+0x56a>
 8015d50:	4b0a      	ldr	r3, [pc, #40]	@ (8015d7c <_strtod_l+0x85c>)
 8015d52:	4650      	mov	r0, sl
 8015d54:	4659      	mov	r1, fp
 8015d56:	2200      	movs	r2, #0
 8015d58:	f7ea fc6e 	bl	8000638 <__aeabi_dmul>
 8015d5c:	4b08      	ldr	r3, [pc, #32]	@ (8015d80 <_strtod_l+0x860>)
 8015d5e:	400b      	ands	r3, r1
 8015d60:	4682      	mov	sl, r0
 8015d62:	468b      	mov	fp, r1
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	f47f ae05 	bne.w	8015974 <_strtod_l+0x454>
 8015d6a:	9a05      	ldr	r2, [sp, #20]
 8015d6c:	2322      	movs	r3, #34	@ 0x22
 8015d6e:	6013      	str	r3, [r2, #0]
 8015d70:	e600      	b.n	8015974 <_strtod_l+0x454>
 8015d72:	bf00      	nop
 8015d74:	08018ff0 	.word	0x08018ff0
 8015d78:	fffffc02 	.word	0xfffffc02
 8015d7c:	39500000 	.word	0x39500000
 8015d80:	7ff00000 	.word	0x7ff00000
 8015d84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015d88:	d165      	bne.n	8015e56 <_strtod_l+0x936>
 8015d8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015d8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d90:	b35a      	cbz	r2, 8015dea <_strtod_l+0x8ca>
 8015d92:	4a9f      	ldr	r2, [pc, #636]	@ (8016010 <_strtod_l+0xaf0>)
 8015d94:	4293      	cmp	r3, r2
 8015d96:	d12b      	bne.n	8015df0 <_strtod_l+0x8d0>
 8015d98:	9b08      	ldr	r3, [sp, #32]
 8015d9a:	4651      	mov	r1, sl
 8015d9c:	b303      	cbz	r3, 8015de0 <_strtod_l+0x8c0>
 8015d9e:	4b9d      	ldr	r3, [pc, #628]	@ (8016014 <_strtod_l+0xaf4>)
 8015da0:	465a      	mov	r2, fp
 8015da2:	4013      	ands	r3, r2
 8015da4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015da8:	f04f 32ff 	mov.w	r2, #4294967295
 8015dac:	d81b      	bhi.n	8015de6 <_strtod_l+0x8c6>
 8015dae:	0d1b      	lsrs	r3, r3, #20
 8015db0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015db4:	fa02 f303 	lsl.w	r3, r2, r3
 8015db8:	4299      	cmp	r1, r3
 8015dba:	d119      	bne.n	8015df0 <_strtod_l+0x8d0>
 8015dbc:	4b96      	ldr	r3, [pc, #600]	@ (8016018 <_strtod_l+0xaf8>)
 8015dbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d102      	bne.n	8015dca <_strtod_l+0x8aa>
 8015dc4:	3101      	adds	r1, #1
 8015dc6:	f43f adca 	beq.w	801595e <_strtod_l+0x43e>
 8015dca:	4b92      	ldr	r3, [pc, #584]	@ (8016014 <_strtod_l+0xaf4>)
 8015dcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015dce:	401a      	ands	r2, r3
 8015dd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015dd4:	f04f 0a00 	mov.w	sl, #0
 8015dd8:	9b08      	ldr	r3, [sp, #32]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d1b8      	bne.n	8015d50 <_strtod_l+0x830>
 8015dde:	e5c9      	b.n	8015974 <_strtod_l+0x454>
 8015de0:	f04f 33ff 	mov.w	r3, #4294967295
 8015de4:	e7e8      	b.n	8015db8 <_strtod_l+0x898>
 8015de6:	4613      	mov	r3, r2
 8015de8:	e7e6      	b.n	8015db8 <_strtod_l+0x898>
 8015dea:	ea53 030a 	orrs.w	r3, r3, sl
 8015dee:	d0a1      	beq.n	8015d34 <_strtod_l+0x814>
 8015df0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015df2:	b1db      	cbz	r3, 8015e2c <_strtod_l+0x90c>
 8015df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015df6:	4213      	tst	r3, r2
 8015df8:	d0ee      	beq.n	8015dd8 <_strtod_l+0x8b8>
 8015dfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015dfc:	9a08      	ldr	r2, [sp, #32]
 8015dfe:	4650      	mov	r0, sl
 8015e00:	4659      	mov	r1, fp
 8015e02:	b1bb      	cbz	r3, 8015e34 <_strtod_l+0x914>
 8015e04:	f7ff fb6d 	bl	80154e2 <sulp>
 8015e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015e0c:	ec53 2b10 	vmov	r2, r3, d0
 8015e10:	f7ea fa5c 	bl	80002cc <__adddf3>
 8015e14:	4682      	mov	sl, r0
 8015e16:	468b      	mov	fp, r1
 8015e18:	e7de      	b.n	8015dd8 <_strtod_l+0x8b8>
 8015e1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015e1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015e22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015e26:	f04f 3aff 	mov.w	sl, #4294967295
 8015e2a:	e7d5      	b.n	8015dd8 <_strtod_l+0x8b8>
 8015e2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015e2e:	ea13 0f0a 	tst.w	r3, sl
 8015e32:	e7e1      	b.n	8015df8 <_strtod_l+0x8d8>
 8015e34:	f7ff fb55 	bl	80154e2 <sulp>
 8015e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015e3c:	ec53 2b10 	vmov	r2, r3, d0
 8015e40:	f7ea fa42 	bl	80002c8 <__aeabi_dsub>
 8015e44:	2200      	movs	r2, #0
 8015e46:	2300      	movs	r3, #0
 8015e48:	4682      	mov	sl, r0
 8015e4a:	468b      	mov	fp, r1
 8015e4c:	f7ea fe5c 	bl	8000b08 <__aeabi_dcmpeq>
 8015e50:	2800      	cmp	r0, #0
 8015e52:	d0c1      	beq.n	8015dd8 <_strtod_l+0x8b8>
 8015e54:	e619      	b.n	8015a8a <_strtod_l+0x56a>
 8015e56:	4641      	mov	r1, r8
 8015e58:	4620      	mov	r0, r4
 8015e5a:	f001 fc11 	bl	8017680 <__ratio>
 8015e5e:	ec57 6b10 	vmov	r6, r7, d0
 8015e62:	2200      	movs	r2, #0
 8015e64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015e68:	4630      	mov	r0, r6
 8015e6a:	4639      	mov	r1, r7
 8015e6c:	f7ea fe60 	bl	8000b30 <__aeabi_dcmple>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d06f      	beq.n	8015f54 <_strtod_l+0xa34>
 8015e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d17a      	bne.n	8015f70 <_strtod_l+0xa50>
 8015e7a:	f1ba 0f00 	cmp.w	sl, #0
 8015e7e:	d158      	bne.n	8015f32 <_strtod_l+0xa12>
 8015e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d15a      	bne.n	8015f40 <_strtod_l+0xa20>
 8015e8a:	4b64      	ldr	r3, [pc, #400]	@ (801601c <_strtod_l+0xafc>)
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	4630      	mov	r0, r6
 8015e90:	4639      	mov	r1, r7
 8015e92:	f7ea fe43 	bl	8000b1c <__aeabi_dcmplt>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d159      	bne.n	8015f4e <_strtod_l+0xa2e>
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	4639      	mov	r1, r7
 8015e9e:	4b60      	ldr	r3, [pc, #384]	@ (8016020 <_strtod_l+0xb00>)
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	f7ea fbc9 	bl	8000638 <__aeabi_dmul>
 8015ea6:	4606      	mov	r6, r0
 8015ea8:	460f      	mov	r7, r1
 8015eaa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015eae:	9606      	str	r6, [sp, #24]
 8015eb0:	9307      	str	r3, [sp, #28]
 8015eb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015eb6:	4d57      	ldr	r5, [pc, #348]	@ (8016014 <_strtod_l+0xaf4>)
 8015eb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ebe:	401d      	ands	r5, r3
 8015ec0:	4b58      	ldr	r3, [pc, #352]	@ (8016024 <_strtod_l+0xb04>)
 8015ec2:	429d      	cmp	r5, r3
 8015ec4:	f040 80b2 	bne.w	801602c <_strtod_l+0xb0c>
 8015ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015eca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015ece:	ec4b ab10 	vmov	d0, sl, fp
 8015ed2:	f001 fb0d 	bl	80174f0 <__ulp>
 8015ed6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015eda:	ec51 0b10 	vmov	r0, r1, d0
 8015ede:	f7ea fbab 	bl	8000638 <__aeabi_dmul>
 8015ee2:	4652      	mov	r2, sl
 8015ee4:	465b      	mov	r3, fp
 8015ee6:	f7ea f9f1 	bl	80002cc <__adddf3>
 8015eea:	460b      	mov	r3, r1
 8015eec:	4949      	ldr	r1, [pc, #292]	@ (8016014 <_strtod_l+0xaf4>)
 8015eee:	4a4e      	ldr	r2, [pc, #312]	@ (8016028 <_strtod_l+0xb08>)
 8015ef0:	4019      	ands	r1, r3
 8015ef2:	4291      	cmp	r1, r2
 8015ef4:	4682      	mov	sl, r0
 8015ef6:	d942      	bls.n	8015f7e <_strtod_l+0xa5e>
 8015ef8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015efa:	4b47      	ldr	r3, [pc, #284]	@ (8016018 <_strtod_l+0xaf8>)
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d103      	bne.n	8015f08 <_strtod_l+0x9e8>
 8015f00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f02:	3301      	adds	r3, #1
 8015f04:	f43f ad2b 	beq.w	801595e <_strtod_l+0x43e>
 8015f08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016018 <_strtod_l+0xaf8>
 8015f0c:	f04f 3aff 	mov.w	sl, #4294967295
 8015f10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015f12:	9805      	ldr	r0, [sp, #20]
 8015f14:	f000 ffb8 	bl	8016e88 <_Bfree>
 8015f18:	9805      	ldr	r0, [sp, #20]
 8015f1a:	4649      	mov	r1, r9
 8015f1c:	f000 ffb4 	bl	8016e88 <_Bfree>
 8015f20:	9805      	ldr	r0, [sp, #20]
 8015f22:	4641      	mov	r1, r8
 8015f24:	f000 ffb0 	bl	8016e88 <_Bfree>
 8015f28:	9805      	ldr	r0, [sp, #20]
 8015f2a:	4621      	mov	r1, r4
 8015f2c:	f000 ffac 	bl	8016e88 <_Bfree>
 8015f30:	e618      	b.n	8015b64 <_strtod_l+0x644>
 8015f32:	f1ba 0f01 	cmp.w	sl, #1
 8015f36:	d103      	bne.n	8015f40 <_strtod_l+0xa20>
 8015f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	f43f ada5 	beq.w	8015a8a <_strtod_l+0x56a>
 8015f40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015ff0 <_strtod_l+0xad0>
 8015f44:	4f35      	ldr	r7, [pc, #212]	@ (801601c <_strtod_l+0xafc>)
 8015f46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f4a:	2600      	movs	r6, #0
 8015f4c:	e7b1      	b.n	8015eb2 <_strtod_l+0x992>
 8015f4e:	4f34      	ldr	r7, [pc, #208]	@ (8016020 <_strtod_l+0xb00>)
 8015f50:	2600      	movs	r6, #0
 8015f52:	e7aa      	b.n	8015eaa <_strtod_l+0x98a>
 8015f54:	4b32      	ldr	r3, [pc, #200]	@ (8016020 <_strtod_l+0xb00>)
 8015f56:	4630      	mov	r0, r6
 8015f58:	4639      	mov	r1, r7
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f7ea fb6c 	bl	8000638 <__aeabi_dmul>
 8015f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f62:	4606      	mov	r6, r0
 8015f64:	460f      	mov	r7, r1
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d09f      	beq.n	8015eaa <_strtod_l+0x98a>
 8015f6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015f6e:	e7a0      	b.n	8015eb2 <_strtod_l+0x992>
 8015f70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015ff8 <_strtod_l+0xad8>
 8015f74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f78:	ec57 6b17 	vmov	r6, r7, d7
 8015f7c:	e799      	b.n	8015eb2 <_strtod_l+0x992>
 8015f7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015f82:	9b08      	ldr	r3, [sp, #32]
 8015f84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1c1      	bne.n	8015f10 <_strtod_l+0x9f0>
 8015f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015f90:	0d1b      	lsrs	r3, r3, #20
 8015f92:	051b      	lsls	r3, r3, #20
 8015f94:	429d      	cmp	r5, r3
 8015f96:	d1bb      	bne.n	8015f10 <_strtod_l+0x9f0>
 8015f98:	4630      	mov	r0, r6
 8015f9a:	4639      	mov	r1, r7
 8015f9c:	f7ea fe6e 	bl	8000c7c <__aeabi_d2lz>
 8015fa0:	f7ea fb1c 	bl	80005dc <__aeabi_l2d>
 8015fa4:	4602      	mov	r2, r0
 8015fa6:	460b      	mov	r3, r1
 8015fa8:	4630      	mov	r0, r6
 8015faa:	4639      	mov	r1, r7
 8015fac:	f7ea f98c 	bl	80002c8 <__aeabi_dsub>
 8015fb0:	460b      	mov	r3, r1
 8015fb2:	4602      	mov	r2, r0
 8015fb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015fb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fbe:	ea46 060a 	orr.w	r6, r6, sl
 8015fc2:	431e      	orrs	r6, r3
 8015fc4:	d06f      	beq.n	80160a6 <_strtod_l+0xb86>
 8015fc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8016000 <_strtod_l+0xae0>)
 8015fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fcc:	f7ea fda6 	bl	8000b1c <__aeabi_dcmplt>
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	f47f accf 	bne.w	8015974 <_strtod_l+0x454>
 8015fd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8016008 <_strtod_l+0xae8>)
 8015fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015fe0:	f7ea fdba 	bl	8000b58 <__aeabi_dcmpgt>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d093      	beq.n	8015f10 <_strtod_l+0x9f0>
 8015fe8:	e4c4      	b.n	8015974 <_strtod_l+0x454>
 8015fea:	bf00      	nop
 8015fec:	f3af 8000 	nop.w
 8015ff0:	00000000 	.word	0x00000000
 8015ff4:	bff00000 	.word	0xbff00000
 8015ff8:	00000000 	.word	0x00000000
 8015ffc:	3ff00000 	.word	0x3ff00000
 8016000:	94a03595 	.word	0x94a03595
 8016004:	3fdfffff 	.word	0x3fdfffff
 8016008:	35afe535 	.word	0x35afe535
 801600c:	3fe00000 	.word	0x3fe00000
 8016010:	000fffff 	.word	0x000fffff
 8016014:	7ff00000 	.word	0x7ff00000
 8016018:	7fefffff 	.word	0x7fefffff
 801601c:	3ff00000 	.word	0x3ff00000
 8016020:	3fe00000 	.word	0x3fe00000
 8016024:	7fe00000 	.word	0x7fe00000
 8016028:	7c9fffff 	.word	0x7c9fffff
 801602c:	9b08      	ldr	r3, [sp, #32]
 801602e:	b323      	cbz	r3, 801607a <_strtod_l+0xb5a>
 8016030:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016034:	d821      	bhi.n	801607a <_strtod_l+0xb5a>
 8016036:	a328      	add	r3, pc, #160	@ (adr r3, 80160d8 <_strtod_l+0xbb8>)
 8016038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603c:	4630      	mov	r0, r6
 801603e:	4639      	mov	r1, r7
 8016040:	f7ea fd76 	bl	8000b30 <__aeabi_dcmple>
 8016044:	b1a0      	cbz	r0, 8016070 <_strtod_l+0xb50>
 8016046:	4639      	mov	r1, r7
 8016048:	4630      	mov	r0, r6
 801604a:	f7ea fd8f 	bl	8000b6c <__aeabi_d2uiz>
 801604e:	2801      	cmp	r0, #1
 8016050:	bf38      	it	cc
 8016052:	2001      	movcc	r0, #1
 8016054:	f7ea fa76 	bl	8000544 <__aeabi_ui2d>
 8016058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801605a:	4606      	mov	r6, r0
 801605c:	460f      	mov	r7, r1
 801605e:	b9fb      	cbnz	r3, 80160a0 <_strtod_l+0xb80>
 8016060:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016064:	9014      	str	r0, [sp, #80]	@ 0x50
 8016066:	9315      	str	r3, [sp, #84]	@ 0x54
 8016068:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801606c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016070:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016072:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016076:	1b5b      	subs	r3, r3, r5
 8016078:	9311      	str	r3, [sp, #68]	@ 0x44
 801607a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801607e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016082:	f001 fa35 	bl	80174f0 <__ulp>
 8016086:	4650      	mov	r0, sl
 8016088:	ec53 2b10 	vmov	r2, r3, d0
 801608c:	4659      	mov	r1, fp
 801608e:	f7ea fad3 	bl	8000638 <__aeabi_dmul>
 8016092:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016096:	f7ea f919 	bl	80002cc <__adddf3>
 801609a:	4682      	mov	sl, r0
 801609c:	468b      	mov	fp, r1
 801609e:	e770      	b.n	8015f82 <_strtod_l+0xa62>
 80160a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80160a4:	e7e0      	b.n	8016068 <_strtod_l+0xb48>
 80160a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80160e0 <_strtod_l+0xbc0>)
 80160a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ac:	f7ea fd36 	bl	8000b1c <__aeabi_dcmplt>
 80160b0:	e798      	b.n	8015fe4 <_strtod_l+0xac4>
 80160b2:	2300      	movs	r3, #0
 80160b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80160b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80160b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80160ba:	6013      	str	r3, [r2, #0]
 80160bc:	f7ff ba6d 	b.w	801559a <_strtod_l+0x7a>
 80160c0:	2a65      	cmp	r2, #101	@ 0x65
 80160c2:	f43f ab66 	beq.w	8015792 <_strtod_l+0x272>
 80160c6:	2a45      	cmp	r2, #69	@ 0x45
 80160c8:	f43f ab63 	beq.w	8015792 <_strtod_l+0x272>
 80160cc:	2301      	movs	r3, #1
 80160ce:	f7ff bb9e 	b.w	801580e <_strtod_l+0x2ee>
 80160d2:	bf00      	nop
 80160d4:	f3af 8000 	nop.w
 80160d8:	ffc00000 	.word	0xffc00000
 80160dc:	41dfffff 	.word	0x41dfffff
 80160e0:	94a03595 	.word	0x94a03595
 80160e4:	3fcfffff 	.word	0x3fcfffff

080160e8 <strtod>:
 80160e8:	460a      	mov	r2, r1
 80160ea:	4601      	mov	r1, r0
 80160ec:	4802      	ldr	r0, [pc, #8]	@ (80160f8 <strtod+0x10>)
 80160ee:	4b03      	ldr	r3, [pc, #12]	@ (80160fc <strtod+0x14>)
 80160f0:	6800      	ldr	r0, [r0, #0]
 80160f2:	f7ff ba15 	b.w	8015520 <_strtod_l>
 80160f6:	bf00      	nop
 80160f8:	200001f4 	.word	0x200001f4
 80160fc:	20000088 	.word	0x20000088

08016100 <std>:
 8016100:	2300      	movs	r3, #0
 8016102:	b510      	push	{r4, lr}
 8016104:	4604      	mov	r4, r0
 8016106:	e9c0 3300 	strd	r3, r3, [r0]
 801610a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801610e:	6083      	str	r3, [r0, #8]
 8016110:	8181      	strh	r1, [r0, #12]
 8016112:	6643      	str	r3, [r0, #100]	@ 0x64
 8016114:	81c2      	strh	r2, [r0, #14]
 8016116:	6183      	str	r3, [r0, #24]
 8016118:	4619      	mov	r1, r3
 801611a:	2208      	movs	r2, #8
 801611c:	305c      	adds	r0, #92	@ 0x5c
 801611e:	f000 f942 	bl	80163a6 <memset>
 8016122:	4b0d      	ldr	r3, [pc, #52]	@ (8016158 <std+0x58>)
 8016124:	6263      	str	r3, [r4, #36]	@ 0x24
 8016126:	4b0d      	ldr	r3, [pc, #52]	@ (801615c <std+0x5c>)
 8016128:	62a3      	str	r3, [r4, #40]	@ 0x28
 801612a:	4b0d      	ldr	r3, [pc, #52]	@ (8016160 <std+0x60>)
 801612c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801612e:	4b0d      	ldr	r3, [pc, #52]	@ (8016164 <std+0x64>)
 8016130:	6323      	str	r3, [r4, #48]	@ 0x30
 8016132:	4b0d      	ldr	r3, [pc, #52]	@ (8016168 <std+0x68>)
 8016134:	6224      	str	r4, [r4, #32]
 8016136:	429c      	cmp	r4, r3
 8016138:	d006      	beq.n	8016148 <std+0x48>
 801613a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801613e:	4294      	cmp	r4, r2
 8016140:	d002      	beq.n	8016148 <std+0x48>
 8016142:	33d0      	adds	r3, #208	@ 0xd0
 8016144:	429c      	cmp	r4, r3
 8016146:	d105      	bne.n	8016154 <std+0x54>
 8016148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801614c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016150:	f000 b9fa 	b.w	8016548 <__retarget_lock_init_recursive>
 8016154:	bd10      	pop	{r4, pc}
 8016156:	bf00      	nop
 8016158:	080162ed 	.word	0x080162ed
 801615c:	0801630f 	.word	0x0801630f
 8016160:	08016347 	.word	0x08016347
 8016164:	0801636b 	.word	0x0801636b
 8016168:	20014c74 	.word	0x20014c74

0801616c <stdio_exit_handler>:
 801616c:	4a02      	ldr	r2, [pc, #8]	@ (8016178 <stdio_exit_handler+0xc>)
 801616e:	4903      	ldr	r1, [pc, #12]	@ (801617c <stdio_exit_handler+0x10>)
 8016170:	4803      	ldr	r0, [pc, #12]	@ (8016180 <stdio_exit_handler+0x14>)
 8016172:	f000 b869 	b.w	8016248 <_fwalk_sglue>
 8016176:	bf00      	nop
 8016178:	2000007c 	.word	0x2000007c
 801617c:	08017e59 	.word	0x08017e59
 8016180:	200001f8 	.word	0x200001f8

08016184 <cleanup_stdio>:
 8016184:	6841      	ldr	r1, [r0, #4]
 8016186:	4b0c      	ldr	r3, [pc, #48]	@ (80161b8 <cleanup_stdio+0x34>)
 8016188:	4299      	cmp	r1, r3
 801618a:	b510      	push	{r4, lr}
 801618c:	4604      	mov	r4, r0
 801618e:	d001      	beq.n	8016194 <cleanup_stdio+0x10>
 8016190:	f001 fe62 	bl	8017e58 <_fflush_r>
 8016194:	68a1      	ldr	r1, [r4, #8]
 8016196:	4b09      	ldr	r3, [pc, #36]	@ (80161bc <cleanup_stdio+0x38>)
 8016198:	4299      	cmp	r1, r3
 801619a:	d002      	beq.n	80161a2 <cleanup_stdio+0x1e>
 801619c:	4620      	mov	r0, r4
 801619e:	f001 fe5b 	bl	8017e58 <_fflush_r>
 80161a2:	68e1      	ldr	r1, [r4, #12]
 80161a4:	4b06      	ldr	r3, [pc, #24]	@ (80161c0 <cleanup_stdio+0x3c>)
 80161a6:	4299      	cmp	r1, r3
 80161a8:	d004      	beq.n	80161b4 <cleanup_stdio+0x30>
 80161aa:	4620      	mov	r0, r4
 80161ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161b0:	f001 be52 	b.w	8017e58 <_fflush_r>
 80161b4:	bd10      	pop	{r4, pc}
 80161b6:	bf00      	nop
 80161b8:	20014c74 	.word	0x20014c74
 80161bc:	20014cdc 	.word	0x20014cdc
 80161c0:	20014d44 	.word	0x20014d44

080161c4 <global_stdio_init.part.0>:
 80161c4:	b510      	push	{r4, lr}
 80161c6:	4b0b      	ldr	r3, [pc, #44]	@ (80161f4 <global_stdio_init.part.0+0x30>)
 80161c8:	4c0b      	ldr	r4, [pc, #44]	@ (80161f8 <global_stdio_init.part.0+0x34>)
 80161ca:	4a0c      	ldr	r2, [pc, #48]	@ (80161fc <global_stdio_init.part.0+0x38>)
 80161cc:	601a      	str	r2, [r3, #0]
 80161ce:	4620      	mov	r0, r4
 80161d0:	2200      	movs	r2, #0
 80161d2:	2104      	movs	r1, #4
 80161d4:	f7ff ff94 	bl	8016100 <std>
 80161d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80161dc:	2201      	movs	r2, #1
 80161de:	2109      	movs	r1, #9
 80161e0:	f7ff ff8e 	bl	8016100 <std>
 80161e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80161e8:	2202      	movs	r2, #2
 80161ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161ee:	2112      	movs	r1, #18
 80161f0:	f7ff bf86 	b.w	8016100 <std>
 80161f4:	20014dac 	.word	0x20014dac
 80161f8:	20014c74 	.word	0x20014c74
 80161fc:	0801616d 	.word	0x0801616d

08016200 <__sfp_lock_acquire>:
 8016200:	4801      	ldr	r0, [pc, #4]	@ (8016208 <__sfp_lock_acquire+0x8>)
 8016202:	f000 b9a2 	b.w	801654a <__retarget_lock_acquire_recursive>
 8016206:	bf00      	nop
 8016208:	20014db5 	.word	0x20014db5

0801620c <__sfp_lock_release>:
 801620c:	4801      	ldr	r0, [pc, #4]	@ (8016214 <__sfp_lock_release+0x8>)
 801620e:	f000 b99d 	b.w	801654c <__retarget_lock_release_recursive>
 8016212:	bf00      	nop
 8016214:	20014db5 	.word	0x20014db5

08016218 <__sinit>:
 8016218:	b510      	push	{r4, lr}
 801621a:	4604      	mov	r4, r0
 801621c:	f7ff fff0 	bl	8016200 <__sfp_lock_acquire>
 8016220:	6a23      	ldr	r3, [r4, #32]
 8016222:	b11b      	cbz	r3, 801622c <__sinit+0x14>
 8016224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016228:	f7ff bff0 	b.w	801620c <__sfp_lock_release>
 801622c:	4b04      	ldr	r3, [pc, #16]	@ (8016240 <__sinit+0x28>)
 801622e:	6223      	str	r3, [r4, #32]
 8016230:	4b04      	ldr	r3, [pc, #16]	@ (8016244 <__sinit+0x2c>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d1f5      	bne.n	8016224 <__sinit+0xc>
 8016238:	f7ff ffc4 	bl	80161c4 <global_stdio_init.part.0>
 801623c:	e7f2      	b.n	8016224 <__sinit+0xc>
 801623e:	bf00      	nop
 8016240:	08016185 	.word	0x08016185
 8016244:	20014dac 	.word	0x20014dac

08016248 <_fwalk_sglue>:
 8016248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801624c:	4607      	mov	r7, r0
 801624e:	4688      	mov	r8, r1
 8016250:	4614      	mov	r4, r2
 8016252:	2600      	movs	r6, #0
 8016254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016258:	f1b9 0901 	subs.w	r9, r9, #1
 801625c:	d505      	bpl.n	801626a <_fwalk_sglue+0x22>
 801625e:	6824      	ldr	r4, [r4, #0]
 8016260:	2c00      	cmp	r4, #0
 8016262:	d1f7      	bne.n	8016254 <_fwalk_sglue+0xc>
 8016264:	4630      	mov	r0, r6
 8016266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801626a:	89ab      	ldrh	r3, [r5, #12]
 801626c:	2b01      	cmp	r3, #1
 801626e:	d907      	bls.n	8016280 <_fwalk_sglue+0x38>
 8016270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016274:	3301      	adds	r3, #1
 8016276:	d003      	beq.n	8016280 <_fwalk_sglue+0x38>
 8016278:	4629      	mov	r1, r5
 801627a:	4638      	mov	r0, r7
 801627c:	47c0      	blx	r8
 801627e:	4306      	orrs	r6, r0
 8016280:	3568      	adds	r5, #104	@ 0x68
 8016282:	e7e9      	b.n	8016258 <_fwalk_sglue+0x10>

08016284 <sniprintf>:
 8016284:	b40c      	push	{r2, r3}
 8016286:	b530      	push	{r4, r5, lr}
 8016288:	4b17      	ldr	r3, [pc, #92]	@ (80162e8 <sniprintf+0x64>)
 801628a:	1e0c      	subs	r4, r1, #0
 801628c:	681d      	ldr	r5, [r3, #0]
 801628e:	b09d      	sub	sp, #116	@ 0x74
 8016290:	da08      	bge.n	80162a4 <sniprintf+0x20>
 8016292:	238b      	movs	r3, #139	@ 0x8b
 8016294:	602b      	str	r3, [r5, #0]
 8016296:	f04f 30ff 	mov.w	r0, #4294967295
 801629a:	b01d      	add	sp, #116	@ 0x74
 801629c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162a0:	b002      	add	sp, #8
 80162a2:	4770      	bx	lr
 80162a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80162a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80162ac:	bf14      	ite	ne
 80162ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80162b2:	4623      	moveq	r3, r4
 80162b4:	9304      	str	r3, [sp, #16]
 80162b6:	9307      	str	r3, [sp, #28]
 80162b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80162bc:	9002      	str	r0, [sp, #8]
 80162be:	9006      	str	r0, [sp, #24]
 80162c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80162c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80162c6:	ab21      	add	r3, sp, #132	@ 0x84
 80162c8:	a902      	add	r1, sp, #8
 80162ca:	4628      	mov	r0, r5
 80162cc:	9301      	str	r3, [sp, #4]
 80162ce:	f001 fab5 	bl	801783c <_svfiprintf_r>
 80162d2:	1c43      	adds	r3, r0, #1
 80162d4:	bfbc      	itt	lt
 80162d6:	238b      	movlt	r3, #139	@ 0x8b
 80162d8:	602b      	strlt	r3, [r5, #0]
 80162da:	2c00      	cmp	r4, #0
 80162dc:	d0dd      	beq.n	801629a <sniprintf+0x16>
 80162de:	9b02      	ldr	r3, [sp, #8]
 80162e0:	2200      	movs	r2, #0
 80162e2:	701a      	strb	r2, [r3, #0]
 80162e4:	e7d9      	b.n	801629a <sniprintf+0x16>
 80162e6:	bf00      	nop
 80162e8:	200001f4 	.word	0x200001f4

080162ec <__sread>:
 80162ec:	b510      	push	{r4, lr}
 80162ee:	460c      	mov	r4, r1
 80162f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162f4:	f000 f8da 	bl	80164ac <_read_r>
 80162f8:	2800      	cmp	r0, #0
 80162fa:	bfab      	itete	ge
 80162fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80162fe:	89a3      	ldrhlt	r3, [r4, #12]
 8016300:	181b      	addge	r3, r3, r0
 8016302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016306:	bfac      	ite	ge
 8016308:	6563      	strge	r3, [r4, #84]	@ 0x54
 801630a:	81a3      	strhlt	r3, [r4, #12]
 801630c:	bd10      	pop	{r4, pc}

0801630e <__swrite>:
 801630e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016312:	461f      	mov	r7, r3
 8016314:	898b      	ldrh	r3, [r1, #12]
 8016316:	05db      	lsls	r3, r3, #23
 8016318:	4605      	mov	r5, r0
 801631a:	460c      	mov	r4, r1
 801631c:	4616      	mov	r6, r2
 801631e:	d505      	bpl.n	801632c <__swrite+0x1e>
 8016320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016324:	2302      	movs	r3, #2
 8016326:	2200      	movs	r2, #0
 8016328:	f000 f8ae 	bl	8016488 <_lseek_r>
 801632c:	89a3      	ldrh	r3, [r4, #12]
 801632e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016336:	81a3      	strh	r3, [r4, #12]
 8016338:	4632      	mov	r2, r6
 801633a:	463b      	mov	r3, r7
 801633c:	4628      	mov	r0, r5
 801633e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016342:	f000 b8c5 	b.w	80164d0 <_write_r>

08016346 <__sseek>:
 8016346:	b510      	push	{r4, lr}
 8016348:	460c      	mov	r4, r1
 801634a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801634e:	f000 f89b 	bl	8016488 <_lseek_r>
 8016352:	1c43      	adds	r3, r0, #1
 8016354:	89a3      	ldrh	r3, [r4, #12]
 8016356:	bf15      	itete	ne
 8016358:	6560      	strne	r0, [r4, #84]	@ 0x54
 801635a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801635e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016362:	81a3      	strheq	r3, [r4, #12]
 8016364:	bf18      	it	ne
 8016366:	81a3      	strhne	r3, [r4, #12]
 8016368:	bd10      	pop	{r4, pc}

0801636a <__sclose>:
 801636a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801636e:	f000 b87b 	b.w	8016468 <_close_r>

08016372 <memmove>:
 8016372:	4288      	cmp	r0, r1
 8016374:	b510      	push	{r4, lr}
 8016376:	eb01 0402 	add.w	r4, r1, r2
 801637a:	d902      	bls.n	8016382 <memmove+0x10>
 801637c:	4284      	cmp	r4, r0
 801637e:	4623      	mov	r3, r4
 8016380:	d807      	bhi.n	8016392 <memmove+0x20>
 8016382:	1e43      	subs	r3, r0, #1
 8016384:	42a1      	cmp	r1, r4
 8016386:	d008      	beq.n	801639a <memmove+0x28>
 8016388:	f811 2b01 	ldrb.w	r2, [r1], #1
 801638c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016390:	e7f8      	b.n	8016384 <memmove+0x12>
 8016392:	4402      	add	r2, r0
 8016394:	4601      	mov	r1, r0
 8016396:	428a      	cmp	r2, r1
 8016398:	d100      	bne.n	801639c <memmove+0x2a>
 801639a:	bd10      	pop	{r4, pc}
 801639c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80163a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80163a4:	e7f7      	b.n	8016396 <memmove+0x24>

080163a6 <memset>:
 80163a6:	4402      	add	r2, r0
 80163a8:	4603      	mov	r3, r0
 80163aa:	4293      	cmp	r3, r2
 80163ac:	d100      	bne.n	80163b0 <memset+0xa>
 80163ae:	4770      	bx	lr
 80163b0:	f803 1b01 	strb.w	r1, [r3], #1
 80163b4:	e7f9      	b.n	80163aa <memset+0x4>

080163b6 <strchr>:
 80163b6:	b2c9      	uxtb	r1, r1
 80163b8:	4603      	mov	r3, r0
 80163ba:	4618      	mov	r0, r3
 80163bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163c0:	b112      	cbz	r2, 80163c8 <strchr+0x12>
 80163c2:	428a      	cmp	r2, r1
 80163c4:	d1f9      	bne.n	80163ba <strchr+0x4>
 80163c6:	4770      	bx	lr
 80163c8:	2900      	cmp	r1, #0
 80163ca:	bf18      	it	ne
 80163cc:	2000      	movne	r0, #0
 80163ce:	4770      	bx	lr

080163d0 <strcspn>:
 80163d0:	b570      	push	{r4, r5, r6, lr}
 80163d2:	4603      	mov	r3, r0
 80163d4:	461e      	mov	r6, r3
 80163d6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80163da:	b144      	cbz	r4, 80163ee <strcspn+0x1e>
 80163dc:	1e4a      	subs	r2, r1, #1
 80163de:	e001      	b.n	80163e4 <strcspn+0x14>
 80163e0:	42a5      	cmp	r5, r4
 80163e2:	d004      	beq.n	80163ee <strcspn+0x1e>
 80163e4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80163e8:	2d00      	cmp	r5, #0
 80163ea:	d1f9      	bne.n	80163e0 <strcspn+0x10>
 80163ec:	e7f2      	b.n	80163d4 <strcspn+0x4>
 80163ee:	1a30      	subs	r0, r6, r0
 80163f0:	bd70      	pop	{r4, r5, r6, pc}

080163f2 <strncmp>:
 80163f2:	b510      	push	{r4, lr}
 80163f4:	b16a      	cbz	r2, 8016412 <strncmp+0x20>
 80163f6:	3901      	subs	r1, #1
 80163f8:	1884      	adds	r4, r0, r2
 80163fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016402:	429a      	cmp	r2, r3
 8016404:	d103      	bne.n	801640e <strncmp+0x1c>
 8016406:	42a0      	cmp	r0, r4
 8016408:	d001      	beq.n	801640e <strncmp+0x1c>
 801640a:	2a00      	cmp	r2, #0
 801640c:	d1f5      	bne.n	80163fa <strncmp+0x8>
 801640e:	1ad0      	subs	r0, r2, r3
 8016410:	bd10      	pop	{r4, pc}
 8016412:	4610      	mov	r0, r2
 8016414:	e7fc      	b.n	8016410 <strncmp+0x1e>

08016416 <strncpy>:
 8016416:	b510      	push	{r4, lr}
 8016418:	3901      	subs	r1, #1
 801641a:	4603      	mov	r3, r0
 801641c:	b132      	cbz	r2, 801642c <strncpy+0x16>
 801641e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016422:	f803 4b01 	strb.w	r4, [r3], #1
 8016426:	3a01      	subs	r2, #1
 8016428:	2c00      	cmp	r4, #0
 801642a:	d1f7      	bne.n	801641c <strncpy+0x6>
 801642c:	441a      	add	r2, r3
 801642e:	2100      	movs	r1, #0
 8016430:	4293      	cmp	r3, r2
 8016432:	d100      	bne.n	8016436 <strncpy+0x20>
 8016434:	bd10      	pop	{r4, pc}
 8016436:	f803 1b01 	strb.w	r1, [r3], #1
 801643a:	e7f9      	b.n	8016430 <strncpy+0x1a>

0801643c <strstr>:
 801643c:	780a      	ldrb	r2, [r1, #0]
 801643e:	b570      	push	{r4, r5, r6, lr}
 8016440:	b96a      	cbnz	r2, 801645e <strstr+0x22>
 8016442:	bd70      	pop	{r4, r5, r6, pc}
 8016444:	429a      	cmp	r2, r3
 8016446:	d109      	bne.n	801645c <strstr+0x20>
 8016448:	460c      	mov	r4, r1
 801644a:	4605      	mov	r5, r0
 801644c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016450:	2b00      	cmp	r3, #0
 8016452:	d0f6      	beq.n	8016442 <strstr+0x6>
 8016454:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016458:	429e      	cmp	r6, r3
 801645a:	d0f7      	beq.n	801644c <strstr+0x10>
 801645c:	3001      	adds	r0, #1
 801645e:	7803      	ldrb	r3, [r0, #0]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d1ef      	bne.n	8016444 <strstr+0x8>
 8016464:	4618      	mov	r0, r3
 8016466:	e7ec      	b.n	8016442 <strstr+0x6>

08016468 <_close_r>:
 8016468:	b538      	push	{r3, r4, r5, lr}
 801646a:	4d06      	ldr	r5, [pc, #24]	@ (8016484 <_close_r+0x1c>)
 801646c:	2300      	movs	r3, #0
 801646e:	4604      	mov	r4, r0
 8016470:	4608      	mov	r0, r1
 8016472:	602b      	str	r3, [r5, #0]
 8016474:	f7f0 fd02 	bl	8006e7c <_close>
 8016478:	1c43      	adds	r3, r0, #1
 801647a:	d102      	bne.n	8016482 <_close_r+0x1a>
 801647c:	682b      	ldr	r3, [r5, #0]
 801647e:	b103      	cbz	r3, 8016482 <_close_r+0x1a>
 8016480:	6023      	str	r3, [r4, #0]
 8016482:	bd38      	pop	{r3, r4, r5, pc}
 8016484:	20014db0 	.word	0x20014db0

08016488 <_lseek_r>:
 8016488:	b538      	push	{r3, r4, r5, lr}
 801648a:	4d07      	ldr	r5, [pc, #28]	@ (80164a8 <_lseek_r+0x20>)
 801648c:	4604      	mov	r4, r0
 801648e:	4608      	mov	r0, r1
 8016490:	4611      	mov	r1, r2
 8016492:	2200      	movs	r2, #0
 8016494:	602a      	str	r2, [r5, #0]
 8016496:	461a      	mov	r2, r3
 8016498:	f7f0 fd17 	bl	8006eca <_lseek>
 801649c:	1c43      	adds	r3, r0, #1
 801649e:	d102      	bne.n	80164a6 <_lseek_r+0x1e>
 80164a0:	682b      	ldr	r3, [r5, #0]
 80164a2:	b103      	cbz	r3, 80164a6 <_lseek_r+0x1e>
 80164a4:	6023      	str	r3, [r4, #0]
 80164a6:	bd38      	pop	{r3, r4, r5, pc}
 80164a8:	20014db0 	.word	0x20014db0

080164ac <_read_r>:
 80164ac:	b538      	push	{r3, r4, r5, lr}
 80164ae:	4d07      	ldr	r5, [pc, #28]	@ (80164cc <_read_r+0x20>)
 80164b0:	4604      	mov	r4, r0
 80164b2:	4608      	mov	r0, r1
 80164b4:	4611      	mov	r1, r2
 80164b6:	2200      	movs	r2, #0
 80164b8:	602a      	str	r2, [r5, #0]
 80164ba:	461a      	mov	r2, r3
 80164bc:	f7f0 fca5 	bl	8006e0a <_read>
 80164c0:	1c43      	adds	r3, r0, #1
 80164c2:	d102      	bne.n	80164ca <_read_r+0x1e>
 80164c4:	682b      	ldr	r3, [r5, #0]
 80164c6:	b103      	cbz	r3, 80164ca <_read_r+0x1e>
 80164c8:	6023      	str	r3, [r4, #0]
 80164ca:	bd38      	pop	{r3, r4, r5, pc}
 80164cc:	20014db0 	.word	0x20014db0

080164d0 <_write_r>:
 80164d0:	b538      	push	{r3, r4, r5, lr}
 80164d2:	4d07      	ldr	r5, [pc, #28]	@ (80164f0 <_write_r+0x20>)
 80164d4:	4604      	mov	r4, r0
 80164d6:	4608      	mov	r0, r1
 80164d8:	4611      	mov	r1, r2
 80164da:	2200      	movs	r2, #0
 80164dc:	602a      	str	r2, [r5, #0]
 80164de:	461a      	mov	r2, r3
 80164e0:	f7f0 fcb0 	bl	8006e44 <_write>
 80164e4:	1c43      	adds	r3, r0, #1
 80164e6:	d102      	bne.n	80164ee <_write_r+0x1e>
 80164e8:	682b      	ldr	r3, [r5, #0]
 80164ea:	b103      	cbz	r3, 80164ee <_write_r+0x1e>
 80164ec:	6023      	str	r3, [r4, #0]
 80164ee:	bd38      	pop	{r3, r4, r5, pc}
 80164f0:	20014db0 	.word	0x20014db0

080164f4 <__errno>:
 80164f4:	4b01      	ldr	r3, [pc, #4]	@ (80164fc <__errno+0x8>)
 80164f6:	6818      	ldr	r0, [r3, #0]
 80164f8:	4770      	bx	lr
 80164fa:	bf00      	nop
 80164fc:	200001f4 	.word	0x200001f4

08016500 <__libc_init_array>:
 8016500:	b570      	push	{r4, r5, r6, lr}
 8016502:	4d0d      	ldr	r5, [pc, #52]	@ (8016538 <__libc_init_array+0x38>)
 8016504:	4c0d      	ldr	r4, [pc, #52]	@ (801653c <__libc_init_array+0x3c>)
 8016506:	1b64      	subs	r4, r4, r5
 8016508:	10a4      	asrs	r4, r4, #2
 801650a:	2600      	movs	r6, #0
 801650c:	42a6      	cmp	r6, r4
 801650e:	d109      	bne.n	8016524 <__libc_init_array+0x24>
 8016510:	4d0b      	ldr	r5, [pc, #44]	@ (8016540 <__libc_init_array+0x40>)
 8016512:	4c0c      	ldr	r4, [pc, #48]	@ (8016544 <__libc_init_array+0x44>)
 8016514:	f002 f854 	bl	80185c0 <_init>
 8016518:	1b64      	subs	r4, r4, r5
 801651a:	10a4      	asrs	r4, r4, #2
 801651c:	2600      	movs	r6, #0
 801651e:	42a6      	cmp	r6, r4
 8016520:	d105      	bne.n	801652e <__libc_init_array+0x2e>
 8016522:	bd70      	pop	{r4, r5, r6, pc}
 8016524:	f855 3b04 	ldr.w	r3, [r5], #4
 8016528:	4798      	blx	r3
 801652a:	3601      	adds	r6, #1
 801652c:	e7ee      	b.n	801650c <__libc_init_array+0xc>
 801652e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016532:	4798      	blx	r3
 8016534:	3601      	adds	r6, #1
 8016536:	e7f2      	b.n	801651e <__libc_init_array+0x1e>
 8016538:	08019378 	.word	0x08019378
 801653c:	08019378 	.word	0x08019378
 8016540:	08019378 	.word	0x08019378
 8016544:	0801937c 	.word	0x0801937c

08016548 <__retarget_lock_init_recursive>:
 8016548:	4770      	bx	lr

0801654a <__retarget_lock_acquire_recursive>:
 801654a:	4770      	bx	lr

0801654c <__retarget_lock_release_recursive>:
 801654c:	4770      	bx	lr

0801654e <memcpy>:
 801654e:	440a      	add	r2, r1
 8016550:	4291      	cmp	r1, r2
 8016552:	f100 33ff 	add.w	r3, r0, #4294967295
 8016556:	d100      	bne.n	801655a <memcpy+0xc>
 8016558:	4770      	bx	lr
 801655a:	b510      	push	{r4, lr}
 801655c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016564:	4291      	cmp	r1, r2
 8016566:	d1f9      	bne.n	801655c <memcpy+0xe>
 8016568:	bd10      	pop	{r4, pc}
 801656a:	0000      	movs	r0, r0
 801656c:	0000      	movs	r0, r0
	...

08016570 <nan>:
 8016570:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016578 <nan+0x8>
 8016574:	4770      	bx	lr
 8016576:	bf00      	nop
 8016578:	00000000 	.word	0x00000000
 801657c:	7ff80000 	.word	0x7ff80000

08016580 <_free_r>:
 8016580:	b538      	push	{r3, r4, r5, lr}
 8016582:	4605      	mov	r5, r0
 8016584:	2900      	cmp	r1, #0
 8016586:	d041      	beq.n	801660c <_free_r+0x8c>
 8016588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801658c:	1f0c      	subs	r4, r1, #4
 801658e:	2b00      	cmp	r3, #0
 8016590:	bfb8      	it	lt
 8016592:	18e4      	addlt	r4, r4, r3
 8016594:	f000 fc2c 	bl	8016df0 <__malloc_lock>
 8016598:	4a1d      	ldr	r2, [pc, #116]	@ (8016610 <_free_r+0x90>)
 801659a:	6813      	ldr	r3, [r2, #0]
 801659c:	b933      	cbnz	r3, 80165ac <_free_r+0x2c>
 801659e:	6063      	str	r3, [r4, #4]
 80165a0:	6014      	str	r4, [r2, #0]
 80165a2:	4628      	mov	r0, r5
 80165a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165a8:	f000 bc28 	b.w	8016dfc <__malloc_unlock>
 80165ac:	42a3      	cmp	r3, r4
 80165ae:	d908      	bls.n	80165c2 <_free_r+0x42>
 80165b0:	6820      	ldr	r0, [r4, #0]
 80165b2:	1821      	adds	r1, r4, r0
 80165b4:	428b      	cmp	r3, r1
 80165b6:	bf01      	itttt	eq
 80165b8:	6819      	ldreq	r1, [r3, #0]
 80165ba:	685b      	ldreq	r3, [r3, #4]
 80165bc:	1809      	addeq	r1, r1, r0
 80165be:	6021      	streq	r1, [r4, #0]
 80165c0:	e7ed      	b.n	801659e <_free_r+0x1e>
 80165c2:	461a      	mov	r2, r3
 80165c4:	685b      	ldr	r3, [r3, #4]
 80165c6:	b10b      	cbz	r3, 80165cc <_free_r+0x4c>
 80165c8:	42a3      	cmp	r3, r4
 80165ca:	d9fa      	bls.n	80165c2 <_free_r+0x42>
 80165cc:	6811      	ldr	r1, [r2, #0]
 80165ce:	1850      	adds	r0, r2, r1
 80165d0:	42a0      	cmp	r0, r4
 80165d2:	d10b      	bne.n	80165ec <_free_r+0x6c>
 80165d4:	6820      	ldr	r0, [r4, #0]
 80165d6:	4401      	add	r1, r0
 80165d8:	1850      	adds	r0, r2, r1
 80165da:	4283      	cmp	r3, r0
 80165dc:	6011      	str	r1, [r2, #0]
 80165de:	d1e0      	bne.n	80165a2 <_free_r+0x22>
 80165e0:	6818      	ldr	r0, [r3, #0]
 80165e2:	685b      	ldr	r3, [r3, #4]
 80165e4:	6053      	str	r3, [r2, #4]
 80165e6:	4408      	add	r0, r1
 80165e8:	6010      	str	r0, [r2, #0]
 80165ea:	e7da      	b.n	80165a2 <_free_r+0x22>
 80165ec:	d902      	bls.n	80165f4 <_free_r+0x74>
 80165ee:	230c      	movs	r3, #12
 80165f0:	602b      	str	r3, [r5, #0]
 80165f2:	e7d6      	b.n	80165a2 <_free_r+0x22>
 80165f4:	6820      	ldr	r0, [r4, #0]
 80165f6:	1821      	adds	r1, r4, r0
 80165f8:	428b      	cmp	r3, r1
 80165fa:	bf04      	itt	eq
 80165fc:	6819      	ldreq	r1, [r3, #0]
 80165fe:	685b      	ldreq	r3, [r3, #4]
 8016600:	6063      	str	r3, [r4, #4]
 8016602:	bf04      	itt	eq
 8016604:	1809      	addeq	r1, r1, r0
 8016606:	6021      	streq	r1, [r4, #0]
 8016608:	6054      	str	r4, [r2, #4]
 801660a:	e7ca      	b.n	80165a2 <_free_r+0x22>
 801660c:	bd38      	pop	{r3, r4, r5, pc}
 801660e:	bf00      	nop
 8016610:	20014dbc 	.word	0x20014dbc

08016614 <rshift>:
 8016614:	6903      	ldr	r3, [r0, #16]
 8016616:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801661a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801661e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016622:	f100 0414 	add.w	r4, r0, #20
 8016626:	dd45      	ble.n	80166b4 <rshift+0xa0>
 8016628:	f011 011f 	ands.w	r1, r1, #31
 801662c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016630:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016634:	d10c      	bne.n	8016650 <rshift+0x3c>
 8016636:	f100 0710 	add.w	r7, r0, #16
 801663a:	4629      	mov	r1, r5
 801663c:	42b1      	cmp	r1, r6
 801663e:	d334      	bcc.n	80166aa <rshift+0x96>
 8016640:	1a9b      	subs	r3, r3, r2
 8016642:	009b      	lsls	r3, r3, #2
 8016644:	1eea      	subs	r2, r5, #3
 8016646:	4296      	cmp	r6, r2
 8016648:	bf38      	it	cc
 801664a:	2300      	movcc	r3, #0
 801664c:	4423      	add	r3, r4
 801664e:	e015      	b.n	801667c <rshift+0x68>
 8016650:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016654:	f1c1 0820 	rsb	r8, r1, #32
 8016658:	40cf      	lsrs	r7, r1
 801665a:	f105 0e04 	add.w	lr, r5, #4
 801665e:	46a1      	mov	r9, r4
 8016660:	4576      	cmp	r6, lr
 8016662:	46f4      	mov	ip, lr
 8016664:	d815      	bhi.n	8016692 <rshift+0x7e>
 8016666:	1a9a      	subs	r2, r3, r2
 8016668:	0092      	lsls	r2, r2, #2
 801666a:	3a04      	subs	r2, #4
 801666c:	3501      	adds	r5, #1
 801666e:	42ae      	cmp	r6, r5
 8016670:	bf38      	it	cc
 8016672:	2200      	movcc	r2, #0
 8016674:	18a3      	adds	r3, r4, r2
 8016676:	50a7      	str	r7, [r4, r2]
 8016678:	b107      	cbz	r7, 801667c <rshift+0x68>
 801667a:	3304      	adds	r3, #4
 801667c:	1b1a      	subs	r2, r3, r4
 801667e:	42a3      	cmp	r3, r4
 8016680:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016684:	bf08      	it	eq
 8016686:	2300      	moveq	r3, #0
 8016688:	6102      	str	r2, [r0, #16]
 801668a:	bf08      	it	eq
 801668c:	6143      	streq	r3, [r0, #20]
 801668e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016692:	f8dc c000 	ldr.w	ip, [ip]
 8016696:	fa0c fc08 	lsl.w	ip, ip, r8
 801669a:	ea4c 0707 	orr.w	r7, ip, r7
 801669e:	f849 7b04 	str.w	r7, [r9], #4
 80166a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80166a6:	40cf      	lsrs	r7, r1
 80166a8:	e7da      	b.n	8016660 <rshift+0x4c>
 80166aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80166ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80166b2:	e7c3      	b.n	801663c <rshift+0x28>
 80166b4:	4623      	mov	r3, r4
 80166b6:	e7e1      	b.n	801667c <rshift+0x68>

080166b8 <__hexdig_fun>:
 80166b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80166bc:	2b09      	cmp	r3, #9
 80166be:	d802      	bhi.n	80166c6 <__hexdig_fun+0xe>
 80166c0:	3820      	subs	r0, #32
 80166c2:	b2c0      	uxtb	r0, r0
 80166c4:	4770      	bx	lr
 80166c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80166ca:	2b05      	cmp	r3, #5
 80166cc:	d801      	bhi.n	80166d2 <__hexdig_fun+0x1a>
 80166ce:	3847      	subs	r0, #71	@ 0x47
 80166d0:	e7f7      	b.n	80166c2 <__hexdig_fun+0xa>
 80166d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80166d6:	2b05      	cmp	r3, #5
 80166d8:	d801      	bhi.n	80166de <__hexdig_fun+0x26>
 80166da:	3827      	subs	r0, #39	@ 0x27
 80166dc:	e7f1      	b.n	80166c2 <__hexdig_fun+0xa>
 80166de:	2000      	movs	r0, #0
 80166e0:	4770      	bx	lr
	...

080166e4 <__gethex>:
 80166e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166e8:	b085      	sub	sp, #20
 80166ea:	468a      	mov	sl, r1
 80166ec:	9302      	str	r3, [sp, #8]
 80166ee:	680b      	ldr	r3, [r1, #0]
 80166f0:	9001      	str	r0, [sp, #4]
 80166f2:	4690      	mov	r8, r2
 80166f4:	1c9c      	adds	r4, r3, #2
 80166f6:	46a1      	mov	r9, r4
 80166f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80166fc:	2830      	cmp	r0, #48	@ 0x30
 80166fe:	d0fa      	beq.n	80166f6 <__gethex+0x12>
 8016700:	eba9 0303 	sub.w	r3, r9, r3
 8016704:	f1a3 0b02 	sub.w	fp, r3, #2
 8016708:	f7ff ffd6 	bl	80166b8 <__hexdig_fun>
 801670c:	4605      	mov	r5, r0
 801670e:	2800      	cmp	r0, #0
 8016710:	d168      	bne.n	80167e4 <__gethex+0x100>
 8016712:	49a0      	ldr	r1, [pc, #640]	@ (8016994 <__gethex+0x2b0>)
 8016714:	2201      	movs	r2, #1
 8016716:	4648      	mov	r0, r9
 8016718:	f7ff fe6b 	bl	80163f2 <strncmp>
 801671c:	4607      	mov	r7, r0
 801671e:	2800      	cmp	r0, #0
 8016720:	d167      	bne.n	80167f2 <__gethex+0x10e>
 8016722:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016726:	4626      	mov	r6, r4
 8016728:	f7ff ffc6 	bl	80166b8 <__hexdig_fun>
 801672c:	2800      	cmp	r0, #0
 801672e:	d062      	beq.n	80167f6 <__gethex+0x112>
 8016730:	4623      	mov	r3, r4
 8016732:	7818      	ldrb	r0, [r3, #0]
 8016734:	2830      	cmp	r0, #48	@ 0x30
 8016736:	4699      	mov	r9, r3
 8016738:	f103 0301 	add.w	r3, r3, #1
 801673c:	d0f9      	beq.n	8016732 <__gethex+0x4e>
 801673e:	f7ff ffbb 	bl	80166b8 <__hexdig_fun>
 8016742:	fab0 f580 	clz	r5, r0
 8016746:	096d      	lsrs	r5, r5, #5
 8016748:	f04f 0b01 	mov.w	fp, #1
 801674c:	464a      	mov	r2, r9
 801674e:	4616      	mov	r6, r2
 8016750:	3201      	adds	r2, #1
 8016752:	7830      	ldrb	r0, [r6, #0]
 8016754:	f7ff ffb0 	bl	80166b8 <__hexdig_fun>
 8016758:	2800      	cmp	r0, #0
 801675a:	d1f8      	bne.n	801674e <__gethex+0x6a>
 801675c:	498d      	ldr	r1, [pc, #564]	@ (8016994 <__gethex+0x2b0>)
 801675e:	2201      	movs	r2, #1
 8016760:	4630      	mov	r0, r6
 8016762:	f7ff fe46 	bl	80163f2 <strncmp>
 8016766:	2800      	cmp	r0, #0
 8016768:	d13f      	bne.n	80167ea <__gethex+0x106>
 801676a:	b944      	cbnz	r4, 801677e <__gethex+0x9a>
 801676c:	1c74      	adds	r4, r6, #1
 801676e:	4622      	mov	r2, r4
 8016770:	4616      	mov	r6, r2
 8016772:	3201      	adds	r2, #1
 8016774:	7830      	ldrb	r0, [r6, #0]
 8016776:	f7ff ff9f 	bl	80166b8 <__hexdig_fun>
 801677a:	2800      	cmp	r0, #0
 801677c:	d1f8      	bne.n	8016770 <__gethex+0x8c>
 801677e:	1ba4      	subs	r4, r4, r6
 8016780:	00a7      	lsls	r7, r4, #2
 8016782:	7833      	ldrb	r3, [r6, #0]
 8016784:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016788:	2b50      	cmp	r3, #80	@ 0x50
 801678a:	d13e      	bne.n	801680a <__gethex+0x126>
 801678c:	7873      	ldrb	r3, [r6, #1]
 801678e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016790:	d033      	beq.n	80167fa <__gethex+0x116>
 8016792:	2b2d      	cmp	r3, #45	@ 0x2d
 8016794:	d034      	beq.n	8016800 <__gethex+0x11c>
 8016796:	1c71      	adds	r1, r6, #1
 8016798:	2400      	movs	r4, #0
 801679a:	7808      	ldrb	r0, [r1, #0]
 801679c:	f7ff ff8c 	bl	80166b8 <__hexdig_fun>
 80167a0:	1e43      	subs	r3, r0, #1
 80167a2:	b2db      	uxtb	r3, r3
 80167a4:	2b18      	cmp	r3, #24
 80167a6:	d830      	bhi.n	801680a <__gethex+0x126>
 80167a8:	f1a0 0210 	sub.w	r2, r0, #16
 80167ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80167b0:	f7ff ff82 	bl	80166b8 <__hexdig_fun>
 80167b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80167b8:	fa5f fc8c 	uxtb.w	ip, ip
 80167bc:	f1bc 0f18 	cmp.w	ip, #24
 80167c0:	f04f 030a 	mov.w	r3, #10
 80167c4:	d91e      	bls.n	8016804 <__gethex+0x120>
 80167c6:	b104      	cbz	r4, 80167ca <__gethex+0xe6>
 80167c8:	4252      	negs	r2, r2
 80167ca:	4417      	add	r7, r2
 80167cc:	f8ca 1000 	str.w	r1, [sl]
 80167d0:	b1ed      	cbz	r5, 801680e <__gethex+0x12a>
 80167d2:	f1bb 0f00 	cmp.w	fp, #0
 80167d6:	bf0c      	ite	eq
 80167d8:	2506      	moveq	r5, #6
 80167da:	2500      	movne	r5, #0
 80167dc:	4628      	mov	r0, r5
 80167de:	b005      	add	sp, #20
 80167e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167e4:	2500      	movs	r5, #0
 80167e6:	462c      	mov	r4, r5
 80167e8:	e7b0      	b.n	801674c <__gethex+0x68>
 80167ea:	2c00      	cmp	r4, #0
 80167ec:	d1c7      	bne.n	801677e <__gethex+0x9a>
 80167ee:	4627      	mov	r7, r4
 80167f0:	e7c7      	b.n	8016782 <__gethex+0x9e>
 80167f2:	464e      	mov	r6, r9
 80167f4:	462f      	mov	r7, r5
 80167f6:	2501      	movs	r5, #1
 80167f8:	e7c3      	b.n	8016782 <__gethex+0x9e>
 80167fa:	2400      	movs	r4, #0
 80167fc:	1cb1      	adds	r1, r6, #2
 80167fe:	e7cc      	b.n	801679a <__gethex+0xb6>
 8016800:	2401      	movs	r4, #1
 8016802:	e7fb      	b.n	80167fc <__gethex+0x118>
 8016804:	fb03 0002 	mla	r0, r3, r2, r0
 8016808:	e7ce      	b.n	80167a8 <__gethex+0xc4>
 801680a:	4631      	mov	r1, r6
 801680c:	e7de      	b.n	80167cc <__gethex+0xe8>
 801680e:	eba6 0309 	sub.w	r3, r6, r9
 8016812:	3b01      	subs	r3, #1
 8016814:	4629      	mov	r1, r5
 8016816:	2b07      	cmp	r3, #7
 8016818:	dc0a      	bgt.n	8016830 <__gethex+0x14c>
 801681a:	9801      	ldr	r0, [sp, #4]
 801681c:	f000 faf4 	bl	8016e08 <_Balloc>
 8016820:	4604      	mov	r4, r0
 8016822:	b940      	cbnz	r0, 8016836 <__gethex+0x152>
 8016824:	4b5c      	ldr	r3, [pc, #368]	@ (8016998 <__gethex+0x2b4>)
 8016826:	4602      	mov	r2, r0
 8016828:	21e4      	movs	r1, #228	@ 0xe4
 801682a:	485c      	ldr	r0, [pc, #368]	@ (801699c <__gethex+0x2b8>)
 801682c:	f001 fb4c 	bl	8017ec8 <__assert_func>
 8016830:	3101      	adds	r1, #1
 8016832:	105b      	asrs	r3, r3, #1
 8016834:	e7ef      	b.n	8016816 <__gethex+0x132>
 8016836:	f100 0a14 	add.w	sl, r0, #20
 801683a:	2300      	movs	r3, #0
 801683c:	4655      	mov	r5, sl
 801683e:	469b      	mov	fp, r3
 8016840:	45b1      	cmp	r9, r6
 8016842:	d337      	bcc.n	80168b4 <__gethex+0x1d0>
 8016844:	f845 bb04 	str.w	fp, [r5], #4
 8016848:	eba5 050a 	sub.w	r5, r5, sl
 801684c:	10ad      	asrs	r5, r5, #2
 801684e:	6125      	str	r5, [r4, #16]
 8016850:	4658      	mov	r0, fp
 8016852:	f000 fbcb 	bl	8016fec <__hi0bits>
 8016856:	016d      	lsls	r5, r5, #5
 8016858:	f8d8 6000 	ldr.w	r6, [r8]
 801685c:	1a2d      	subs	r5, r5, r0
 801685e:	42b5      	cmp	r5, r6
 8016860:	dd54      	ble.n	801690c <__gethex+0x228>
 8016862:	1bad      	subs	r5, r5, r6
 8016864:	4629      	mov	r1, r5
 8016866:	4620      	mov	r0, r4
 8016868:	f000 ff5f 	bl	801772a <__any_on>
 801686c:	4681      	mov	r9, r0
 801686e:	b178      	cbz	r0, 8016890 <__gethex+0x1ac>
 8016870:	1e6b      	subs	r3, r5, #1
 8016872:	1159      	asrs	r1, r3, #5
 8016874:	f003 021f 	and.w	r2, r3, #31
 8016878:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801687c:	f04f 0901 	mov.w	r9, #1
 8016880:	fa09 f202 	lsl.w	r2, r9, r2
 8016884:	420a      	tst	r2, r1
 8016886:	d003      	beq.n	8016890 <__gethex+0x1ac>
 8016888:	454b      	cmp	r3, r9
 801688a:	dc36      	bgt.n	80168fa <__gethex+0x216>
 801688c:	f04f 0902 	mov.w	r9, #2
 8016890:	4629      	mov	r1, r5
 8016892:	4620      	mov	r0, r4
 8016894:	f7ff febe 	bl	8016614 <rshift>
 8016898:	442f      	add	r7, r5
 801689a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801689e:	42bb      	cmp	r3, r7
 80168a0:	da42      	bge.n	8016928 <__gethex+0x244>
 80168a2:	9801      	ldr	r0, [sp, #4]
 80168a4:	4621      	mov	r1, r4
 80168a6:	f000 faef 	bl	8016e88 <_Bfree>
 80168aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80168ac:	2300      	movs	r3, #0
 80168ae:	6013      	str	r3, [r2, #0]
 80168b0:	25a3      	movs	r5, #163	@ 0xa3
 80168b2:	e793      	b.n	80167dc <__gethex+0xf8>
 80168b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80168b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80168ba:	d012      	beq.n	80168e2 <__gethex+0x1fe>
 80168bc:	2b20      	cmp	r3, #32
 80168be:	d104      	bne.n	80168ca <__gethex+0x1e6>
 80168c0:	f845 bb04 	str.w	fp, [r5], #4
 80168c4:	f04f 0b00 	mov.w	fp, #0
 80168c8:	465b      	mov	r3, fp
 80168ca:	7830      	ldrb	r0, [r6, #0]
 80168cc:	9303      	str	r3, [sp, #12]
 80168ce:	f7ff fef3 	bl	80166b8 <__hexdig_fun>
 80168d2:	9b03      	ldr	r3, [sp, #12]
 80168d4:	f000 000f 	and.w	r0, r0, #15
 80168d8:	4098      	lsls	r0, r3
 80168da:	ea4b 0b00 	orr.w	fp, fp, r0
 80168de:	3304      	adds	r3, #4
 80168e0:	e7ae      	b.n	8016840 <__gethex+0x15c>
 80168e2:	45b1      	cmp	r9, r6
 80168e4:	d8ea      	bhi.n	80168bc <__gethex+0x1d8>
 80168e6:	492b      	ldr	r1, [pc, #172]	@ (8016994 <__gethex+0x2b0>)
 80168e8:	9303      	str	r3, [sp, #12]
 80168ea:	2201      	movs	r2, #1
 80168ec:	4630      	mov	r0, r6
 80168ee:	f7ff fd80 	bl	80163f2 <strncmp>
 80168f2:	9b03      	ldr	r3, [sp, #12]
 80168f4:	2800      	cmp	r0, #0
 80168f6:	d1e1      	bne.n	80168bc <__gethex+0x1d8>
 80168f8:	e7a2      	b.n	8016840 <__gethex+0x15c>
 80168fa:	1ea9      	subs	r1, r5, #2
 80168fc:	4620      	mov	r0, r4
 80168fe:	f000 ff14 	bl	801772a <__any_on>
 8016902:	2800      	cmp	r0, #0
 8016904:	d0c2      	beq.n	801688c <__gethex+0x1a8>
 8016906:	f04f 0903 	mov.w	r9, #3
 801690a:	e7c1      	b.n	8016890 <__gethex+0x1ac>
 801690c:	da09      	bge.n	8016922 <__gethex+0x23e>
 801690e:	1b75      	subs	r5, r6, r5
 8016910:	4621      	mov	r1, r4
 8016912:	9801      	ldr	r0, [sp, #4]
 8016914:	462a      	mov	r2, r5
 8016916:	f000 fccf 	bl	80172b8 <__lshift>
 801691a:	1b7f      	subs	r7, r7, r5
 801691c:	4604      	mov	r4, r0
 801691e:	f100 0a14 	add.w	sl, r0, #20
 8016922:	f04f 0900 	mov.w	r9, #0
 8016926:	e7b8      	b.n	801689a <__gethex+0x1b6>
 8016928:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801692c:	42bd      	cmp	r5, r7
 801692e:	dd6f      	ble.n	8016a10 <__gethex+0x32c>
 8016930:	1bed      	subs	r5, r5, r7
 8016932:	42ae      	cmp	r6, r5
 8016934:	dc34      	bgt.n	80169a0 <__gethex+0x2bc>
 8016936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801693a:	2b02      	cmp	r3, #2
 801693c:	d022      	beq.n	8016984 <__gethex+0x2a0>
 801693e:	2b03      	cmp	r3, #3
 8016940:	d024      	beq.n	801698c <__gethex+0x2a8>
 8016942:	2b01      	cmp	r3, #1
 8016944:	d115      	bne.n	8016972 <__gethex+0x28e>
 8016946:	42ae      	cmp	r6, r5
 8016948:	d113      	bne.n	8016972 <__gethex+0x28e>
 801694a:	2e01      	cmp	r6, #1
 801694c:	d10b      	bne.n	8016966 <__gethex+0x282>
 801694e:	9a02      	ldr	r2, [sp, #8]
 8016950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016954:	6013      	str	r3, [r2, #0]
 8016956:	2301      	movs	r3, #1
 8016958:	6123      	str	r3, [r4, #16]
 801695a:	f8ca 3000 	str.w	r3, [sl]
 801695e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016960:	2562      	movs	r5, #98	@ 0x62
 8016962:	601c      	str	r4, [r3, #0]
 8016964:	e73a      	b.n	80167dc <__gethex+0xf8>
 8016966:	1e71      	subs	r1, r6, #1
 8016968:	4620      	mov	r0, r4
 801696a:	f000 fede 	bl	801772a <__any_on>
 801696e:	2800      	cmp	r0, #0
 8016970:	d1ed      	bne.n	801694e <__gethex+0x26a>
 8016972:	9801      	ldr	r0, [sp, #4]
 8016974:	4621      	mov	r1, r4
 8016976:	f000 fa87 	bl	8016e88 <_Bfree>
 801697a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801697c:	2300      	movs	r3, #0
 801697e:	6013      	str	r3, [r2, #0]
 8016980:	2550      	movs	r5, #80	@ 0x50
 8016982:	e72b      	b.n	80167dc <__gethex+0xf8>
 8016984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016986:	2b00      	cmp	r3, #0
 8016988:	d1f3      	bne.n	8016972 <__gethex+0x28e>
 801698a:	e7e0      	b.n	801694e <__gethex+0x26a>
 801698c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801698e:	2b00      	cmp	r3, #0
 8016990:	d1dd      	bne.n	801694e <__gethex+0x26a>
 8016992:	e7ee      	b.n	8016972 <__gethex+0x28e>
 8016994:	08018fb8 	.word	0x08018fb8
 8016998:	08019121 	.word	0x08019121
 801699c:	08019132 	.word	0x08019132
 80169a0:	1e6f      	subs	r7, r5, #1
 80169a2:	f1b9 0f00 	cmp.w	r9, #0
 80169a6:	d130      	bne.n	8016a0a <__gethex+0x326>
 80169a8:	b127      	cbz	r7, 80169b4 <__gethex+0x2d0>
 80169aa:	4639      	mov	r1, r7
 80169ac:	4620      	mov	r0, r4
 80169ae:	f000 febc 	bl	801772a <__any_on>
 80169b2:	4681      	mov	r9, r0
 80169b4:	117a      	asrs	r2, r7, #5
 80169b6:	2301      	movs	r3, #1
 80169b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80169bc:	f007 071f 	and.w	r7, r7, #31
 80169c0:	40bb      	lsls	r3, r7
 80169c2:	4213      	tst	r3, r2
 80169c4:	4629      	mov	r1, r5
 80169c6:	4620      	mov	r0, r4
 80169c8:	bf18      	it	ne
 80169ca:	f049 0902 	orrne.w	r9, r9, #2
 80169ce:	f7ff fe21 	bl	8016614 <rshift>
 80169d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80169d6:	1b76      	subs	r6, r6, r5
 80169d8:	2502      	movs	r5, #2
 80169da:	f1b9 0f00 	cmp.w	r9, #0
 80169de:	d047      	beq.n	8016a70 <__gethex+0x38c>
 80169e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80169e4:	2b02      	cmp	r3, #2
 80169e6:	d015      	beq.n	8016a14 <__gethex+0x330>
 80169e8:	2b03      	cmp	r3, #3
 80169ea:	d017      	beq.n	8016a1c <__gethex+0x338>
 80169ec:	2b01      	cmp	r3, #1
 80169ee:	d109      	bne.n	8016a04 <__gethex+0x320>
 80169f0:	f019 0f02 	tst.w	r9, #2
 80169f4:	d006      	beq.n	8016a04 <__gethex+0x320>
 80169f6:	f8da 3000 	ldr.w	r3, [sl]
 80169fa:	ea49 0903 	orr.w	r9, r9, r3
 80169fe:	f019 0f01 	tst.w	r9, #1
 8016a02:	d10e      	bne.n	8016a22 <__gethex+0x33e>
 8016a04:	f045 0510 	orr.w	r5, r5, #16
 8016a08:	e032      	b.n	8016a70 <__gethex+0x38c>
 8016a0a:	f04f 0901 	mov.w	r9, #1
 8016a0e:	e7d1      	b.n	80169b4 <__gethex+0x2d0>
 8016a10:	2501      	movs	r5, #1
 8016a12:	e7e2      	b.n	80169da <__gethex+0x2f6>
 8016a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a16:	f1c3 0301 	rsb	r3, r3, #1
 8016a1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d0f0      	beq.n	8016a04 <__gethex+0x320>
 8016a22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016a26:	f104 0314 	add.w	r3, r4, #20
 8016a2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016a2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016a32:	f04f 0c00 	mov.w	ip, #0
 8016a36:	4618      	mov	r0, r3
 8016a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016a40:	d01b      	beq.n	8016a7a <__gethex+0x396>
 8016a42:	3201      	adds	r2, #1
 8016a44:	6002      	str	r2, [r0, #0]
 8016a46:	2d02      	cmp	r5, #2
 8016a48:	f104 0314 	add.w	r3, r4, #20
 8016a4c:	d13c      	bne.n	8016ac8 <__gethex+0x3e4>
 8016a4e:	f8d8 2000 	ldr.w	r2, [r8]
 8016a52:	3a01      	subs	r2, #1
 8016a54:	42b2      	cmp	r2, r6
 8016a56:	d109      	bne.n	8016a6c <__gethex+0x388>
 8016a58:	1171      	asrs	r1, r6, #5
 8016a5a:	2201      	movs	r2, #1
 8016a5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a60:	f006 061f 	and.w	r6, r6, #31
 8016a64:	fa02 f606 	lsl.w	r6, r2, r6
 8016a68:	421e      	tst	r6, r3
 8016a6a:	d13a      	bne.n	8016ae2 <__gethex+0x3fe>
 8016a6c:	f045 0520 	orr.w	r5, r5, #32
 8016a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a72:	601c      	str	r4, [r3, #0]
 8016a74:	9b02      	ldr	r3, [sp, #8]
 8016a76:	601f      	str	r7, [r3, #0]
 8016a78:	e6b0      	b.n	80167dc <__gethex+0xf8>
 8016a7a:	4299      	cmp	r1, r3
 8016a7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016a80:	d8d9      	bhi.n	8016a36 <__gethex+0x352>
 8016a82:	68a3      	ldr	r3, [r4, #8]
 8016a84:	459b      	cmp	fp, r3
 8016a86:	db17      	blt.n	8016ab8 <__gethex+0x3d4>
 8016a88:	6861      	ldr	r1, [r4, #4]
 8016a8a:	9801      	ldr	r0, [sp, #4]
 8016a8c:	3101      	adds	r1, #1
 8016a8e:	f000 f9bb 	bl	8016e08 <_Balloc>
 8016a92:	4681      	mov	r9, r0
 8016a94:	b918      	cbnz	r0, 8016a9e <__gethex+0x3ba>
 8016a96:	4b1a      	ldr	r3, [pc, #104]	@ (8016b00 <__gethex+0x41c>)
 8016a98:	4602      	mov	r2, r0
 8016a9a:	2184      	movs	r1, #132	@ 0x84
 8016a9c:	e6c5      	b.n	801682a <__gethex+0x146>
 8016a9e:	6922      	ldr	r2, [r4, #16]
 8016aa0:	3202      	adds	r2, #2
 8016aa2:	f104 010c 	add.w	r1, r4, #12
 8016aa6:	0092      	lsls	r2, r2, #2
 8016aa8:	300c      	adds	r0, #12
 8016aaa:	f7ff fd50 	bl	801654e <memcpy>
 8016aae:	4621      	mov	r1, r4
 8016ab0:	9801      	ldr	r0, [sp, #4]
 8016ab2:	f000 f9e9 	bl	8016e88 <_Bfree>
 8016ab6:	464c      	mov	r4, r9
 8016ab8:	6923      	ldr	r3, [r4, #16]
 8016aba:	1c5a      	adds	r2, r3, #1
 8016abc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016ac0:	6122      	str	r2, [r4, #16]
 8016ac2:	2201      	movs	r2, #1
 8016ac4:	615a      	str	r2, [r3, #20]
 8016ac6:	e7be      	b.n	8016a46 <__gethex+0x362>
 8016ac8:	6922      	ldr	r2, [r4, #16]
 8016aca:	455a      	cmp	r2, fp
 8016acc:	dd0b      	ble.n	8016ae6 <__gethex+0x402>
 8016ace:	2101      	movs	r1, #1
 8016ad0:	4620      	mov	r0, r4
 8016ad2:	f7ff fd9f 	bl	8016614 <rshift>
 8016ad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016ada:	3701      	adds	r7, #1
 8016adc:	42bb      	cmp	r3, r7
 8016ade:	f6ff aee0 	blt.w	80168a2 <__gethex+0x1be>
 8016ae2:	2501      	movs	r5, #1
 8016ae4:	e7c2      	b.n	8016a6c <__gethex+0x388>
 8016ae6:	f016 061f 	ands.w	r6, r6, #31
 8016aea:	d0fa      	beq.n	8016ae2 <__gethex+0x3fe>
 8016aec:	4453      	add	r3, sl
 8016aee:	f1c6 0620 	rsb	r6, r6, #32
 8016af2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016af6:	f000 fa79 	bl	8016fec <__hi0bits>
 8016afa:	42b0      	cmp	r0, r6
 8016afc:	dbe7      	blt.n	8016ace <__gethex+0x3ea>
 8016afe:	e7f0      	b.n	8016ae2 <__gethex+0x3fe>
 8016b00:	08019121 	.word	0x08019121

08016b04 <L_shift>:
 8016b04:	f1c2 0208 	rsb	r2, r2, #8
 8016b08:	0092      	lsls	r2, r2, #2
 8016b0a:	b570      	push	{r4, r5, r6, lr}
 8016b0c:	f1c2 0620 	rsb	r6, r2, #32
 8016b10:	6843      	ldr	r3, [r0, #4]
 8016b12:	6804      	ldr	r4, [r0, #0]
 8016b14:	fa03 f506 	lsl.w	r5, r3, r6
 8016b18:	432c      	orrs	r4, r5
 8016b1a:	40d3      	lsrs	r3, r2
 8016b1c:	6004      	str	r4, [r0, #0]
 8016b1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016b22:	4288      	cmp	r0, r1
 8016b24:	d3f4      	bcc.n	8016b10 <L_shift+0xc>
 8016b26:	bd70      	pop	{r4, r5, r6, pc}

08016b28 <__match>:
 8016b28:	b530      	push	{r4, r5, lr}
 8016b2a:	6803      	ldr	r3, [r0, #0]
 8016b2c:	3301      	adds	r3, #1
 8016b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b32:	b914      	cbnz	r4, 8016b3a <__match+0x12>
 8016b34:	6003      	str	r3, [r0, #0]
 8016b36:	2001      	movs	r0, #1
 8016b38:	bd30      	pop	{r4, r5, pc}
 8016b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016b42:	2d19      	cmp	r5, #25
 8016b44:	bf98      	it	ls
 8016b46:	3220      	addls	r2, #32
 8016b48:	42a2      	cmp	r2, r4
 8016b4a:	d0f0      	beq.n	8016b2e <__match+0x6>
 8016b4c:	2000      	movs	r0, #0
 8016b4e:	e7f3      	b.n	8016b38 <__match+0x10>

08016b50 <__hexnan>:
 8016b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b54:	680b      	ldr	r3, [r1, #0]
 8016b56:	6801      	ldr	r1, [r0, #0]
 8016b58:	115e      	asrs	r6, r3, #5
 8016b5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016b5e:	f013 031f 	ands.w	r3, r3, #31
 8016b62:	b087      	sub	sp, #28
 8016b64:	bf18      	it	ne
 8016b66:	3604      	addne	r6, #4
 8016b68:	2500      	movs	r5, #0
 8016b6a:	1f37      	subs	r7, r6, #4
 8016b6c:	4682      	mov	sl, r0
 8016b6e:	4690      	mov	r8, r2
 8016b70:	9301      	str	r3, [sp, #4]
 8016b72:	f846 5c04 	str.w	r5, [r6, #-4]
 8016b76:	46b9      	mov	r9, r7
 8016b78:	463c      	mov	r4, r7
 8016b7a:	9502      	str	r5, [sp, #8]
 8016b7c:	46ab      	mov	fp, r5
 8016b7e:	784a      	ldrb	r2, [r1, #1]
 8016b80:	1c4b      	adds	r3, r1, #1
 8016b82:	9303      	str	r3, [sp, #12]
 8016b84:	b342      	cbz	r2, 8016bd8 <__hexnan+0x88>
 8016b86:	4610      	mov	r0, r2
 8016b88:	9105      	str	r1, [sp, #20]
 8016b8a:	9204      	str	r2, [sp, #16]
 8016b8c:	f7ff fd94 	bl	80166b8 <__hexdig_fun>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d151      	bne.n	8016c38 <__hexnan+0xe8>
 8016b94:	9a04      	ldr	r2, [sp, #16]
 8016b96:	9905      	ldr	r1, [sp, #20]
 8016b98:	2a20      	cmp	r2, #32
 8016b9a:	d818      	bhi.n	8016bce <__hexnan+0x7e>
 8016b9c:	9b02      	ldr	r3, [sp, #8]
 8016b9e:	459b      	cmp	fp, r3
 8016ba0:	dd13      	ble.n	8016bca <__hexnan+0x7a>
 8016ba2:	454c      	cmp	r4, r9
 8016ba4:	d206      	bcs.n	8016bb4 <__hexnan+0x64>
 8016ba6:	2d07      	cmp	r5, #7
 8016ba8:	dc04      	bgt.n	8016bb4 <__hexnan+0x64>
 8016baa:	462a      	mov	r2, r5
 8016bac:	4649      	mov	r1, r9
 8016bae:	4620      	mov	r0, r4
 8016bb0:	f7ff ffa8 	bl	8016b04 <L_shift>
 8016bb4:	4544      	cmp	r4, r8
 8016bb6:	d952      	bls.n	8016c5e <__hexnan+0x10e>
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f1a4 0904 	sub.w	r9, r4, #4
 8016bbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8016bc2:	f8cd b008 	str.w	fp, [sp, #8]
 8016bc6:	464c      	mov	r4, r9
 8016bc8:	461d      	mov	r5, r3
 8016bca:	9903      	ldr	r1, [sp, #12]
 8016bcc:	e7d7      	b.n	8016b7e <__hexnan+0x2e>
 8016bce:	2a29      	cmp	r2, #41	@ 0x29
 8016bd0:	d157      	bne.n	8016c82 <__hexnan+0x132>
 8016bd2:	3102      	adds	r1, #2
 8016bd4:	f8ca 1000 	str.w	r1, [sl]
 8016bd8:	f1bb 0f00 	cmp.w	fp, #0
 8016bdc:	d051      	beq.n	8016c82 <__hexnan+0x132>
 8016bde:	454c      	cmp	r4, r9
 8016be0:	d206      	bcs.n	8016bf0 <__hexnan+0xa0>
 8016be2:	2d07      	cmp	r5, #7
 8016be4:	dc04      	bgt.n	8016bf0 <__hexnan+0xa0>
 8016be6:	462a      	mov	r2, r5
 8016be8:	4649      	mov	r1, r9
 8016bea:	4620      	mov	r0, r4
 8016bec:	f7ff ff8a 	bl	8016b04 <L_shift>
 8016bf0:	4544      	cmp	r4, r8
 8016bf2:	d936      	bls.n	8016c62 <__hexnan+0x112>
 8016bf4:	f1a8 0204 	sub.w	r2, r8, #4
 8016bf8:	4623      	mov	r3, r4
 8016bfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8016bfe:	f842 1f04 	str.w	r1, [r2, #4]!
 8016c02:	429f      	cmp	r7, r3
 8016c04:	d2f9      	bcs.n	8016bfa <__hexnan+0xaa>
 8016c06:	1b3b      	subs	r3, r7, r4
 8016c08:	f023 0303 	bic.w	r3, r3, #3
 8016c0c:	3304      	adds	r3, #4
 8016c0e:	3401      	adds	r4, #1
 8016c10:	3e03      	subs	r6, #3
 8016c12:	42b4      	cmp	r4, r6
 8016c14:	bf88      	it	hi
 8016c16:	2304      	movhi	r3, #4
 8016c18:	4443      	add	r3, r8
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	f843 2b04 	str.w	r2, [r3], #4
 8016c20:	429f      	cmp	r7, r3
 8016c22:	d2fb      	bcs.n	8016c1c <__hexnan+0xcc>
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	b91b      	cbnz	r3, 8016c30 <__hexnan+0xe0>
 8016c28:	4547      	cmp	r7, r8
 8016c2a:	d128      	bne.n	8016c7e <__hexnan+0x12e>
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	603b      	str	r3, [r7, #0]
 8016c30:	2005      	movs	r0, #5
 8016c32:	b007      	add	sp, #28
 8016c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c38:	3501      	adds	r5, #1
 8016c3a:	2d08      	cmp	r5, #8
 8016c3c:	f10b 0b01 	add.w	fp, fp, #1
 8016c40:	dd06      	ble.n	8016c50 <__hexnan+0x100>
 8016c42:	4544      	cmp	r4, r8
 8016c44:	d9c1      	bls.n	8016bca <__hexnan+0x7a>
 8016c46:	2300      	movs	r3, #0
 8016c48:	f844 3c04 	str.w	r3, [r4, #-4]
 8016c4c:	2501      	movs	r5, #1
 8016c4e:	3c04      	subs	r4, #4
 8016c50:	6822      	ldr	r2, [r4, #0]
 8016c52:	f000 000f 	and.w	r0, r0, #15
 8016c56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016c5a:	6020      	str	r0, [r4, #0]
 8016c5c:	e7b5      	b.n	8016bca <__hexnan+0x7a>
 8016c5e:	2508      	movs	r5, #8
 8016c60:	e7b3      	b.n	8016bca <__hexnan+0x7a>
 8016c62:	9b01      	ldr	r3, [sp, #4]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d0dd      	beq.n	8016c24 <__hexnan+0xd4>
 8016c68:	f1c3 0320 	rsb	r3, r3, #32
 8016c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8016c70:	40da      	lsrs	r2, r3
 8016c72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016c76:	4013      	ands	r3, r2
 8016c78:	f846 3c04 	str.w	r3, [r6, #-4]
 8016c7c:	e7d2      	b.n	8016c24 <__hexnan+0xd4>
 8016c7e:	3f04      	subs	r7, #4
 8016c80:	e7d0      	b.n	8016c24 <__hexnan+0xd4>
 8016c82:	2004      	movs	r0, #4
 8016c84:	e7d5      	b.n	8016c32 <__hexnan+0xe2>
	...

08016c88 <sbrk_aligned>:
 8016c88:	b570      	push	{r4, r5, r6, lr}
 8016c8a:	4e0f      	ldr	r6, [pc, #60]	@ (8016cc8 <sbrk_aligned+0x40>)
 8016c8c:	460c      	mov	r4, r1
 8016c8e:	6831      	ldr	r1, [r6, #0]
 8016c90:	4605      	mov	r5, r0
 8016c92:	b911      	cbnz	r1, 8016c9a <sbrk_aligned+0x12>
 8016c94:	f001 f908 	bl	8017ea8 <_sbrk_r>
 8016c98:	6030      	str	r0, [r6, #0]
 8016c9a:	4621      	mov	r1, r4
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	f001 f903 	bl	8017ea8 <_sbrk_r>
 8016ca2:	1c43      	adds	r3, r0, #1
 8016ca4:	d103      	bne.n	8016cae <sbrk_aligned+0x26>
 8016ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8016caa:	4620      	mov	r0, r4
 8016cac:	bd70      	pop	{r4, r5, r6, pc}
 8016cae:	1cc4      	adds	r4, r0, #3
 8016cb0:	f024 0403 	bic.w	r4, r4, #3
 8016cb4:	42a0      	cmp	r0, r4
 8016cb6:	d0f8      	beq.n	8016caa <sbrk_aligned+0x22>
 8016cb8:	1a21      	subs	r1, r4, r0
 8016cba:	4628      	mov	r0, r5
 8016cbc:	f001 f8f4 	bl	8017ea8 <_sbrk_r>
 8016cc0:	3001      	adds	r0, #1
 8016cc2:	d1f2      	bne.n	8016caa <sbrk_aligned+0x22>
 8016cc4:	e7ef      	b.n	8016ca6 <sbrk_aligned+0x1e>
 8016cc6:	bf00      	nop
 8016cc8:	20014db8 	.word	0x20014db8

08016ccc <_malloc_r>:
 8016ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cd0:	1ccd      	adds	r5, r1, #3
 8016cd2:	f025 0503 	bic.w	r5, r5, #3
 8016cd6:	3508      	adds	r5, #8
 8016cd8:	2d0c      	cmp	r5, #12
 8016cda:	bf38      	it	cc
 8016cdc:	250c      	movcc	r5, #12
 8016cde:	2d00      	cmp	r5, #0
 8016ce0:	4606      	mov	r6, r0
 8016ce2:	db01      	blt.n	8016ce8 <_malloc_r+0x1c>
 8016ce4:	42a9      	cmp	r1, r5
 8016ce6:	d904      	bls.n	8016cf2 <_malloc_r+0x26>
 8016ce8:	230c      	movs	r3, #12
 8016cea:	6033      	str	r3, [r6, #0]
 8016cec:	2000      	movs	r0, #0
 8016cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016dc8 <_malloc_r+0xfc>
 8016cf6:	f000 f87b 	bl	8016df0 <__malloc_lock>
 8016cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8016cfe:	461c      	mov	r4, r3
 8016d00:	bb44      	cbnz	r4, 8016d54 <_malloc_r+0x88>
 8016d02:	4629      	mov	r1, r5
 8016d04:	4630      	mov	r0, r6
 8016d06:	f7ff ffbf 	bl	8016c88 <sbrk_aligned>
 8016d0a:	1c43      	adds	r3, r0, #1
 8016d0c:	4604      	mov	r4, r0
 8016d0e:	d158      	bne.n	8016dc2 <_malloc_r+0xf6>
 8016d10:	f8d8 4000 	ldr.w	r4, [r8]
 8016d14:	4627      	mov	r7, r4
 8016d16:	2f00      	cmp	r7, #0
 8016d18:	d143      	bne.n	8016da2 <_malloc_r+0xd6>
 8016d1a:	2c00      	cmp	r4, #0
 8016d1c:	d04b      	beq.n	8016db6 <_malloc_r+0xea>
 8016d1e:	6823      	ldr	r3, [r4, #0]
 8016d20:	4639      	mov	r1, r7
 8016d22:	4630      	mov	r0, r6
 8016d24:	eb04 0903 	add.w	r9, r4, r3
 8016d28:	f001 f8be 	bl	8017ea8 <_sbrk_r>
 8016d2c:	4581      	cmp	r9, r0
 8016d2e:	d142      	bne.n	8016db6 <_malloc_r+0xea>
 8016d30:	6821      	ldr	r1, [r4, #0]
 8016d32:	1a6d      	subs	r5, r5, r1
 8016d34:	4629      	mov	r1, r5
 8016d36:	4630      	mov	r0, r6
 8016d38:	f7ff ffa6 	bl	8016c88 <sbrk_aligned>
 8016d3c:	3001      	adds	r0, #1
 8016d3e:	d03a      	beq.n	8016db6 <_malloc_r+0xea>
 8016d40:	6823      	ldr	r3, [r4, #0]
 8016d42:	442b      	add	r3, r5
 8016d44:	6023      	str	r3, [r4, #0]
 8016d46:	f8d8 3000 	ldr.w	r3, [r8]
 8016d4a:	685a      	ldr	r2, [r3, #4]
 8016d4c:	bb62      	cbnz	r2, 8016da8 <_malloc_r+0xdc>
 8016d4e:	f8c8 7000 	str.w	r7, [r8]
 8016d52:	e00f      	b.n	8016d74 <_malloc_r+0xa8>
 8016d54:	6822      	ldr	r2, [r4, #0]
 8016d56:	1b52      	subs	r2, r2, r5
 8016d58:	d420      	bmi.n	8016d9c <_malloc_r+0xd0>
 8016d5a:	2a0b      	cmp	r2, #11
 8016d5c:	d917      	bls.n	8016d8e <_malloc_r+0xc2>
 8016d5e:	1961      	adds	r1, r4, r5
 8016d60:	42a3      	cmp	r3, r4
 8016d62:	6025      	str	r5, [r4, #0]
 8016d64:	bf18      	it	ne
 8016d66:	6059      	strne	r1, [r3, #4]
 8016d68:	6863      	ldr	r3, [r4, #4]
 8016d6a:	bf08      	it	eq
 8016d6c:	f8c8 1000 	streq.w	r1, [r8]
 8016d70:	5162      	str	r2, [r4, r5]
 8016d72:	604b      	str	r3, [r1, #4]
 8016d74:	4630      	mov	r0, r6
 8016d76:	f000 f841 	bl	8016dfc <__malloc_unlock>
 8016d7a:	f104 000b 	add.w	r0, r4, #11
 8016d7e:	1d23      	adds	r3, r4, #4
 8016d80:	f020 0007 	bic.w	r0, r0, #7
 8016d84:	1ac2      	subs	r2, r0, r3
 8016d86:	bf1c      	itt	ne
 8016d88:	1a1b      	subne	r3, r3, r0
 8016d8a:	50a3      	strne	r3, [r4, r2]
 8016d8c:	e7af      	b.n	8016cee <_malloc_r+0x22>
 8016d8e:	6862      	ldr	r2, [r4, #4]
 8016d90:	42a3      	cmp	r3, r4
 8016d92:	bf0c      	ite	eq
 8016d94:	f8c8 2000 	streq.w	r2, [r8]
 8016d98:	605a      	strne	r2, [r3, #4]
 8016d9a:	e7eb      	b.n	8016d74 <_malloc_r+0xa8>
 8016d9c:	4623      	mov	r3, r4
 8016d9e:	6864      	ldr	r4, [r4, #4]
 8016da0:	e7ae      	b.n	8016d00 <_malloc_r+0x34>
 8016da2:	463c      	mov	r4, r7
 8016da4:	687f      	ldr	r7, [r7, #4]
 8016da6:	e7b6      	b.n	8016d16 <_malloc_r+0x4a>
 8016da8:	461a      	mov	r2, r3
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	42a3      	cmp	r3, r4
 8016dae:	d1fb      	bne.n	8016da8 <_malloc_r+0xdc>
 8016db0:	2300      	movs	r3, #0
 8016db2:	6053      	str	r3, [r2, #4]
 8016db4:	e7de      	b.n	8016d74 <_malloc_r+0xa8>
 8016db6:	230c      	movs	r3, #12
 8016db8:	6033      	str	r3, [r6, #0]
 8016dba:	4630      	mov	r0, r6
 8016dbc:	f000 f81e 	bl	8016dfc <__malloc_unlock>
 8016dc0:	e794      	b.n	8016cec <_malloc_r+0x20>
 8016dc2:	6005      	str	r5, [r0, #0]
 8016dc4:	e7d6      	b.n	8016d74 <_malloc_r+0xa8>
 8016dc6:	bf00      	nop
 8016dc8:	20014dbc 	.word	0x20014dbc

08016dcc <__ascii_mbtowc>:
 8016dcc:	b082      	sub	sp, #8
 8016dce:	b901      	cbnz	r1, 8016dd2 <__ascii_mbtowc+0x6>
 8016dd0:	a901      	add	r1, sp, #4
 8016dd2:	b142      	cbz	r2, 8016de6 <__ascii_mbtowc+0x1a>
 8016dd4:	b14b      	cbz	r3, 8016dea <__ascii_mbtowc+0x1e>
 8016dd6:	7813      	ldrb	r3, [r2, #0]
 8016dd8:	600b      	str	r3, [r1, #0]
 8016dda:	7812      	ldrb	r2, [r2, #0]
 8016ddc:	1e10      	subs	r0, r2, #0
 8016dde:	bf18      	it	ne
 8016de0:	2001      	movne	r0, #1
 8016de2:	b002      	add	sp, #8
 8016de4:	4770      	bx	lr
 8016de6:	4610      	mov	r0, r2
 8016de8:	e7fb      	b.n	8016de2 <__ascii_mbtowc+0x16>
 8016dea:	f06f 0001 	mvn.w	r0, #1
 8016dee:	e7f8      	b.n	8016de2 <__ascii_mbtowc+0x16>

08016df0 <__malloc_lock>:
 8016df0:	4801      	ldr	r0, [pc, #4]	@ (8016df8 <__malloc_lock+0x8>)
 8016df2:	f7ff bbaa 	b.w	801654a <__retarget_lock_acquire_recursive>
 8016df6:	bf00      	nop
 8016df8:	20014db4 	.word	0x20014db4

08016dfc <__malloc_unlock>:
 8016dfc:	4801      	ldr	r0, [pc, #4]	@ (8016e04 <__malloc_unlock+0x8>)
 8016dfe:	f7ff bba5 	b.w	801654c <__retarget_lock_release_recursive>
 8016e02:	bf00      	nop
 8016e04:	20014db4 	.word	0x20014db4

08016e08 <_Balloc>:
 8016e08:	b570      	push	{r4, r5, r6, lr}
 8016e0a:	69c6      	ldr	r6, [r0, #28]
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	460d      	mov	r5, r1
 8016e10:	b976      	cbnz	r6, 8016e30 <_Balloc+0x28>
 8016e12:	2010      	movs	r0, #16
 8016e14:	f001 f88a 	bl	8017f2c <malloc>
 8016e18:	4602      	mov	r2, r0
 8016e1a:	61e0      	str	r0, [r4, #28]
 8016e1c:	b920      	cbnz	r0, 8016e28 <_Balloc+0x20>
 8016e1e:	4b18      	ldr	r3, [pc, #96]	@ (8016e80 <_Balloc+0x78>)
 8016e20:	4818      	ldr	r0, [pc, #96]	@ (8016e84 <_Balloc+0x7c>)
 8016e22:	216b      	movs	r1, #107	@ 0x6b
 8016e24:	f001 f850 	bl	8017ec8 <__assert_func>
 8016e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e2c:	6006      	str	r6, [r0, #0]
 8016e2e:	60c6      	str	r6, [r0, #12]
 8016e30:	69e6      	ldr	r6, [r4, #28]
 8016e32:	68f3      	ldr	r3, [r6, #12]
 8016e34:	b183      	cbz	r3, 8016e58 <_Balloc+0x50>
 8016e36:	69e3      	ldr	r3, [r4, #28]
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016e3e:	b9b8      	cbnz	r0, 8016e70 <_Balloc+0x68>
 8016e40:	2101      	movs	r1, #1
 8016e42:	fa01 f605 	lsl.w	r6, r1, r5
 8016e46:	1d72      	adds	r2, r6, #5
 8016e48:	0092      	lsls	r2, r2, #2
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	f001 f85a 	bl	8017f04 <_calloc_r>
 8016e50:	b160      	cbz	r0, 8016e6c <_Balloc+0x64>
 8016e52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016e56:	e00e      	b.n	8016e76 <_Balloc+0x6e>
 8016e58:	2221      	movs	r2, #33	@ 0x21
 8016e5a:	2104      	movs	r1, #4
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f001 f851 	bl	8017f04 <_calloc_r>
 8016e62:	69e3      	ldr	r3, [r4, #28]
 8016e64:	60f0      	str	r0, [r6, #12]
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d1e4      	bne.n	8016e36 <_Balloc+0x2e>
 8016e6c:	2000      	movs	r0, #0
 8016e6e:	bd70      	pop	{r4, r5, r6, pc}
 8016e70:	6802      	ldr	r2, [r0, #0]
 8016e72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016e76:	2300      	movs	r3, #0
 8016e78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016e7c:	e7f7      	b.n	8016e6e <_Balloc+0x66>
 8016e7e:	bf00      	nop
 8016e80:	08019192 	.word	0x08019192
 8016e84:	080191a9 	.word	0x080191a9

08016e88 <_Bfree>:
 8016e88:	b570      	push	{r4, r5, r6, lr}
 8016e8a:	69c6      	ldr	r6, [r0, #28]
 8016e8c:	4605      	mov	r5, r0
 8016e8e:	460c      	mov	r4, r1
 8016e90:	b976      	cbnz	r6, 8016eb0 <_Bfree+0x28>
 8016e92:	2010      	movs	r0, #16
 8016e94:	f001 f84a 	bl	8017f2c <malloc>
 8016e98:	4602      	mov	r2, r0
 8016e9a:	61e8      	str	r0, [r5, #28]
 8016e9c:	b920      	cbnz	r0, 8016ea8 <_Bfree+0x20>
 8016e9e:	4b09      	ldr	r3, [pc, #36]	@ (8016ec4 <_Bfree+0x3c>)
 8016ea0:	4809      	ldr	r0, [pc, #36]	@ (8016ec8 <_Bfree+0x40>)
 8016ea2:	218f      	movs	r1, #143	@ 0x8f
 8016ea4:	f001 f810 	bl	8017ec8 <__assert_func>
 8016ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016eac:	6006      	str	r6, [r0, #0]
 8016eae:	60c6      	str	r6, [r0, #12]
 8016eb0:	b13c      	cbz	r4, 8016ec2 <_Bfree+0x3a>
 8016eb2:	69eb      	ldr	r3, [r5, #28]
 8016eb4:	6862      	ldr	r2, [r4, #4]
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016ebc:	6021      	str	r1, [r4, #0]
 8016ebe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016ec2:	bd70      	pop	{r4, r5, r6, pc}
 8016ec4:	08019192 	.word	0x08019192
 8016ec8:	080191a9 	.word	0x080191a9

08016ecc <__multadd>:
 8016ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ed0:	690d      	ldr	r5, [r1, #16]
 8016ed2:	4607      	mov	r7, r0
 8016ed4:	460c      	mov	r4, r1
 8016ed6:	461e      	mov	r6, r3
 8016ed8:	f101 0c14 	add.w	ip, r1, #20
 8016edc:	2000      	movs	r0, #0
 8016ede:	f8dc 3000 	ldr.w	r3, [ip]
 8016ee2:	b299      	uxth	r1, r3
 8016ee4:	fb02 6101 	mla	r1, r2, r1, r6
 8016ee8:	0c1e      	lsrs	r6, r3, #16
 8016eea:	0c0b      	lsrs	r3, r1, #16
 8016eec:	fb02 3306 	mla	r3, r2, r6, r3
 8016ef0:	b289      	uxth	r1, r1
 8016ef2:	3001      	adds	r0, #1
 8016ef4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016ef8:	4285      	cmp	r5, r0
 8016efa:	f84c 1b04 	str.w	r1, [ip], #4
 8016efe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016f02:	dcec      	bgt.n	8016ede <__multadd+0x12>
 8016f04:	b30e      	cbz	r6, 8016f4a <__multadd+0x7e>
 8016f06:	68a3      	ldr	r3, [r4, #8]
 8016f08:	42ab      	cmp	r3, r5
 8016f0a:	dc19      	bgt.n	8016f40 <__multadd+0x74>
 8016f0c:	6861      	ldr	r1, [r4, #4]
 8016f0e:	4638      	mov	r0, r7
 8016f10:	3101      	adds	r1, #1
 8016f12:	f7ff ff79 	bl	8016e08 <_Balloc>
 8016f16:	4680      	mov	r8, r0
 8016f18:	b928      	cbnz	r0, 8016f26 <__multadd+0x5a>
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8016f50 <__multadd+0x84>)
 8016f1e:	480d      	ldr	r0, [pc, #52]	@ (8016f54 <__multadd+0x88>)
 8016f20:	21ba      	movs	r1, #186	@ 0xba
 8016f22:	f000 ffd1 	bl	8017ec8 <__assert_func>
 8016f26:	6922      	ldr	r2, [r4, #16]
 8016f28:	3202      	adds	r2, #2
 8016f2a:	f104 010c 	add.w	r1, r4, #12
 8016f2e:	0092      	lsls	r2, r2, #2
 8016f30:	300c      	adds	r0, #12
 8016f32:	f7ff fb0c 	bl	801654e <memcpy>
 8016f36:	4621      	mov	r1, r4
 8016f38:	4638      	mov	r0, r7
 8016f3a:	f7ff ffa5 	bl	8016e88 <_Bfree>
 8016f3e:	4644      	mov	r4, r8
 8016f40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f44:	3501      	adds	r5, #1
 8016f46:	615e      	str	r6, [r3, #20]
 8016f48:	6125      	str	r5, [r4, #16]
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f50:	08019121 	.word	0x08019121
 8016f54:	080191a9 	.word	0x080191a9

08016f58 <__s2b>:
 8016f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f5c:	460c      	mov	r4, r1
 8016f5e:	4615      	mov	r5, r2
 8016f60:	461f      	mov	r7, r3
 8016f62:	2209      	movs	r2, #9
 8016f64:	3308      	adds	r3, #8
 8016f66:	4606      	mov	r6, r0
 8016f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8016f6c:	2100      	movs	r1, #0
 8016f6e:	2201      	movs	r2, #1
 8016f70:	429a      	cmp	r2, r3
 8016f72:	db09      	blt.n	8016f88 <__s2b+0x30>
 8016f74:	4630      	mov	r0, r6
 8016f76:	f7ff ff47 	bl	8016e08 <_Balloc>
 8016f7a:	b940      	cbnz	r0, 8016f8e <__s2b+0x36>
 8016f7c:	4602      	mov	r2, r0
 8016f7e:	4b19      	ldr	r3, [pc, #100]	@ (8016fe4 <__s2b+0x8c>)
 8016f80:	4819      	ldr	r0, [pc, #100]	@ (8016fe8 <__s2b+0x90>)
 8016f82:	21d3      	movs	r1, #211	@ 0xd3
 8016f84:	f000 ffa0 	bl	8017ec8 <__assert_func>
 8016f88:	0052      	lsls	r2, r2, #1
 8016f8a:	3101      	adds	r1, #1
 8016f8c:	e7f0      	b.n	8016f70 <__s2b+0x18>
 8016f8e:	9b08      	ldr	r3, [sp, #32]
 8016f90:	6143      	str	r3, [r0, #20]
 8016f92:	2d09      	cmp	r5, #9
 8016f94:	f04f 0301 	mov.w	r3, #1
 8016f98:	6103      	str	r3, [r0, #16]
 8016f9a:	dd16      	ble.n	8016fca <__s2b+0x72>
 8016f9c:	f104 0909 	add.w	r9, r4, #9
 8016fa0:	46c8      	mov	r8, r9
 8016fa2:	442c      	add	r4, r5
 8016fa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016fa8:	4601      	mov	r1, r0
 8016faa:	3b30      	subs	r3, #48	@ 0x30
 8016fac:	220a      	movs	r2, #10
 8016fae:	4630      	mov	r0, r6
 8016fb0:	f7ff ff8c 	bl	8016ecc <__multadd>
 8016fb4:	45a0      	cmp	r8, r4
 8016fb6:	d1f5      	bne.n	8016fa4 <__s2b+0x4c>
 8016fb8:	f1a5 0408 	sub.w	r4, r5, #8
 8016fbc:	444c      	add	r4, r9
 8016fbe:	1b2d      	subs	r5, r5, r4
 8016fc0:	1963      	adds	r3, r4, r5
 8016fc2:	42bb      	cmp	r3, r7
 8016fc4:	db04      	blt.n	8016fd0 <__s2b+0x78>
 8016fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fca:	340a      	adds	r4, #10
 8016fcc:	2509      	movs	r5, #9
 8016fce:	e7f6      	b.n	8016fbe <__s2b+0x66>
 8016fd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016fd4:	4601      	mov	r1, r0
 8016fd6:	3b30      	subs	r3, #48	@ 0x30
 8016fd8:	220a      	movs	r2, #10
 8016fda:	4630      	mov	r0, r6
 8016fdc:	f7ff ff76 	bl	8016ecc <__multadd>
 8016fe0:	e7ee      	b.n	8016fc0 <__s2b+0x68>
 8016fe2:	bf00      	nop
 8016fe4:	08019121 	.word	0x08019121
 8016fe8:	080191a9 	.word	0x080191a9

08016fec <__hi0bits>:
 8016fec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	bf36      	itet	cc
 8016ff4:	0403      	lslcc	r3, r0, #16
 8016ff6:	2000      	movcs	r0, #0
 8016ff8:	2010      	movcc	r0, #16
 8016ffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016ffe:	bf3c      	itt	cc
 8017000:	021b      	lslcc	r3, r3, #8
 8017002:	3008      	addcc	r0, #8
 8017004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017008:	bf3c      	itt	cc
 801700a:	011b      	lslcc	r3, r3, #4
 801700c:	3004      	addcc	r0, #4
 801700e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017012:	bf3c      	itt	cc
 8017014:	009b      	lslcc	r3, r3, #2
 8017016:	3002      	addcc	r0, #2
 8017018:	2b00      	cmp	r3, #0
 801701a:	db05      	blt.n	8017028 <__hi0bits+0x3c>
 801701c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017020:	f100 0001 	add.w	r0, r0, #1
 8017024:	bf08      	it	eq
 8017026:	2020      	moveq	r0, #32
 8017028:	4770      	bx	lr

0801702a <__lo0bits>:
 801702a:	6803      	ldr	r3, [r0, #0]
 801702c:	4602      	mov	r2, r0
 801702e:	f013 0007 	ands.w	r0, r3, #7
 8017032:	d00b      	beq.n	801704c <__lo0bits+0x22>
 8017034:	07d9      	lsls	r1, r3, #31
 8017036:	d421      	bmi.n	801707c <__lo0bits+0x52>
 8017038:	0798      	lsls	r0, r3, #30
 801703a:	bf49      	itett	mi
 801703c:	085b      	lsrmi	r3, r3, #1
 801703e:	089b      	lsrpl	r3, r3, #2
 8017040:	2001      	movmi	r0, #1
 8017042:	6013      	strmi	r3, [r2, #0]
 8017044:	bf5c      	itt	pl
 8017046:	6013      	strpl	r3, [r2, #0]
 8017048:	2002      	movpl	r0, #2
 801704a:	4770      	bx	lr
 801704c:	b299      	uxth	r1, r3
 801704e:	b909      	cbnz	r1, 8017054 <__lo0bits+0x2a>
 8017050:	0c1b      	lsrs	r3, r3, #16
 8017052:	2010      	movs	r0, #16
 8017054:	b2d9      	uxtb	r1, r3
 8017056:	b909      	cbnz	r1, 801705c <__lo0bits+0x32>
 8017058:	3008      	adds	r0, #8
 801705a:	0a1b      	lsrs	r3, r3, #8
 801705c:	0719      	lsls	r1, r3, #28
 801705e:	bf04      	itt	eq
 8017060:	091b      	lsreq	r3, r3, #4
 8017062:	3004      	addeq	r0, #4
 8017064:	0799      	lsls	r1, r3, #30
 8017066:	bf04      	itt	eq
 8017068:	089b      	lsreq	r3, r3, #2
 801706a:	3002      	addeq	r0, #2
 801706c:	07d9      	lsls	r1, r3, #31
 801706e:	d403      	bmi.n	8017078 <__lo0bits+0x4e>
 8017070:	085b      	lsrs	r3, r3, #1
 8017072:	f100 0001 	add.w	r0, r0, #1
 8017076:	d003      	beq.n	8017080 <__lo0bits+0x56>
 8017078:	6013      	str	r3, [r2, #0]
 801707a:	4770      	bx	lr
 801707c:	2000      	movs	r0, #0
 801707e:	4770      	bx	lr
 8017080:	2020      	movs	r0, #32
 8017082:	4770      	bx	lr

08017084 <__i2b>:
 8017084:	b510      	push	{r4, lr}
 8017086:	460c      	mov	r4, r1
 8017088:	2101      	movs	r1, #1
 801708a:	f7ff febd 	bl	8016e08 <_Balloc>
 801708e:	4602      	mov	r2, r0
 8017090:	b928      	cbnz	r0, 801709e <__i2b+0x1a>
 8017092:	4b05      	ldr	r3, [pc, #20]	@ (80170a8 <__i2b+0x24>)
 8017094:	4805      	ldr	r0, [pc, #20]	@ (80170ac <__i2b+0x28>)
 8017096:	f240 1145 	movw	r1, #325	@ 0x145
 801709a:	f000 ff15 	bl	8017ec8 <__assert_func>
 801709e:	2301      	movs	r3, #1
 80170a0:	6144      	str	r4, [r0, #20]
 80170a2:	6103      	str	r3, [r0, #16]
 80170a4:	bd10      	pop	{r4, pc}
 80170a6:	bf00      	nop
 80170a8:	08019121 	.word	0x08019121
 80170ac:	080191a9 	.word	0x080191a9

080170b0 <__multiply>:
 80170b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170b4:	4614      	mov	r4, r2
 80170b6:	690a      	ldr	r2, [r1, #16]
 80170b8:	6923      	ldr	r3, [r4, #16]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	bfa8      	it	ge
 80170be:	4623      	movge	r3, r4
 80170c0:	460f      	mov	r7, r1
 80170c2:	bfa4      	itt	ge
 80170c4:	460c      	movge	r4, r1
 80170c6:	461f      	movge	r7, r3
 80170c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80170cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80170d0:	68a3      	ldr	r3, [r4, #8]
 80170d2:	6861      	ldr	r1, [r4, #4]
 80170d4:	eb0a 0609 	add.w	r6, sl, r9
 80170d8:	42b3      	cmp	r3, r6
 80170da:	b085      	sub	sp, #20
 80170dc:	bfb8      	it	lt
 80170de:	3101      	addlt	r1, #1
 80170e0:	f7ff fe92 	bl	8016e08 <_Balloc>
 80170e4:	b930      	cbnz	r0, 80170f4 <__multiply+0x44>
 80170e6:	4602      	mov	r2, r0
 80170e8:	4b44      	ldr	r3, [pc, #272]	@ (80171fc <__multiply+0x14c>)
 80170ea:	4845      	ldr	r0, [pc, #276]	@ (8017200 <__multiply+0x150>)
 80170ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80170f0:	f000 feea 	bl	8017ec8 <__assert_func>
 80170f4:	f100 0514 	add.w	r5, r0, #20
 80170f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80170fc:	462b      	mov	r3, r5
 80170fe:	2200      	movs	r2, #0
 8017100:	4543      	cmp	r3, r8
 8017102:	d321      	bcc.n	8017148 <__multiply+0x98>
 8017104:	f107 0114 	add.w	r1, r7, #20
 8017108:	f104 0214 	add.w	r2, r4, #20
 801710c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017110:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017114:	9302      	str	r3, [sp, #8]
 8017116:	1b13      	subs	r3, r2, r4
 8017118:	3b15      	subs	r3, #21
 801711a:	f023 0303 	bic.w	r3, r3, #3
 801711e:	3304      	adds	r3, #4
 8017120:	f104 0715 	add.w	r7, r4, #21
 8017124:	42ba      	cmp	r2, r7
 8017126:	bf38      	it	cc
 8017128:	2304      	movcc	r3, #4
 801712a:	9301      	str	r3, [sp, #4]
 801712c:	9b02      	ldr	r3, [sp, #8]
 801712e:	9103      	str	r1, [sp, #12]
 8017130:	428b      	cmp	r3, r1
 8017132:	d80c      	bhi.n	801714e <__multiply+0x9e>
 8017134:	2e00      	cmp	r6, #0
 8017136:	dd03      	ble.n	8017140 <__multiply+0x90>
 8017138:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801713c:	2b00      	cmp	r3, #0
 801713e:	d05b      	beq.n	80171f8 <__multiply+0x148>
 8017140:	6106      	str	r6, [r0, #16]
 8017142:	b005      	add	sp, #20
 8017144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017148:	f843 2b04 	str.w	r2, [r3], #4
 801714c:	e7d8      	b.n	8017100 <__multiply+0x50>
 801714e:	f8b1 a000 	ldrh.w	sl, [r1]
 8017152:	f1ba 0f00 	cmp.w	sl, #0
 8017156:	d024      	beq.n	80171a2 <__multiply+0xf2>
 8017158:	f104 0e14 	add.w	lr, r4, #20
 801715c:	46a9      	mov	r9, r5
 801715e:	f04f 0c00 	mov.w	ip, #0
 8017162:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017166:	f8d9 3000 	ldr.w	r3, [r9]
 801716a:	fa1f fb87 	uxth.w	fp, r7
 801716e:	b29b      	uxth	r3, r3
 8017170:	fb0a 330b 	mla	r3, sl, fp, r3
 8017174:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017178:	f8d9 7000 	ldr.w	r7, [r9]
 801717c:	4463      	add	r3, ip
 801717e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017182:	fb0a c70b 	mla	r7, sl, fp, ip
 8017186:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801718a:	b29b      	uxth	r3, r3
 801718c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017190:	4572      	cmp	r2, lr
 8017192:	f849 3b04 	str.w	r3, [r9], #4
 8017196:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801719a:	d8e2      	bhi.n	8017162 <__multiply+0xb2>
 801719c:	9b01      	ldr	r3, [sp, #4]
 801719e:	f845 c003 	str.w	ip, [r5, r3]
 80171a2:	9b03      	ldr	r3, [sp, #12]
 80171a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80171a8:	3104      	adds	r1, #4
 80171aa:	f1b9 0f00 	cmp.w	r9, #0
 80171ae:	d021      	beq.n	80171f4 <__multiply+0x144>
 80171b0:	682b      	ldr	r3, [r5, #0]
 80171b2:	f104 0c14 	add.w	ip, r4, #20
 80171b6:	46ae      	mov	lr, r5
 80171b8:	f04f 0a00 	mov.w	sl, #0
 80171bc:	f8bc b000 	ldrh.w	fp, [ip]
 80171c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80171c4:	fb09 770b 	mla	r7, r9, fp, r7
 80171c8:	4457      	add	r7, sl
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80171d0:	f84e 3b04 	str.w	r3, [lr], #4
 80171d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80171d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80171dc:	f8be 3000 	ldrh.w	r3, [lr]
 80171e0:	fb09 330a 	mla	r3, r9, sl, r3
 80171e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80171e8:	4562      	cmp	r2, ip
 80171ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80171ee:	d8e5      	bhi.n	80171bc <__multiply+0x10c>
 80171f0:	9f01      	ldr	r7, [sp, #4]
 80171f2:	51eb      	str	r3, [r5, r7]
 80171f4:	3504      	adds	r5, #4
 80171f6:	e799      	b.n	801712c <__multiply+0x7c>
 80171f8:	3e01      	subs	r6, #1
 80171fa:	e79b      	b.n	8017134 <__multiply+0x84>
 80171fc:	08019121 	.word	0x08019121
 8017200:	080191a9 	.word	0x080191a9

08017204 <__pow5mult>:
 8017204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017208:	4615      	mov	r5, r2
 801720a:	f012 0203 	ands.w	r2, r2, #3
 801720e:	4607      	mov	r7, r0
 8017210:	460e      	mov	r6, r1
 8017212:	d007      	beq.n	8017224 <__pow5mult+0x20>
 8017214:	4c25      	ldr	r4, [pc, #148]	@ (80172ac <__pow5mult+0xa8>)
 8017216:	3a01      	subs	r2, #1
 8017218:	2300      	movs	r3, #0
 801721a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801721e:	f7ff fe55 	bl	8016ecc <__multadd>
 8017222:	4606      	mov	r6, r0
 8017224:	10ad      	asrs	r5, r5, #2
 8017226:	d03d      	beq.n	80172a4 <__pow5mult+0xa0>
 8017228:	69fc      	ldr	r4, [r7, #28]
 801722a:	b97c      	cbnz	r4, 801724c <__pow5mult+0x48>
 801722c:	2010      	movs	r0, #16
 801722e:	f000 fe7d 	bl	8017f2c <malloc>
 8017232:	4602      	mov	r2, r0
 8017234:	61f8      	str	r0, [r7, #28]
 8017236:	b928      	cbnz	r0, 8017244 <__pow5mult+0x40>
 8017238:	4b1d      	ldr	r3, [pc, #116]	@ (80172b0 <__pow5mult+0xac>)
 801723a:	481e      	ldr	r0, [pc, #120]	@ (80172b4 <__pow5mult+0xb0>)
 801723c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017240:	f000 fe42 	bl	8017ec8 <__assert_func>
 8017244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017248:	6004      	str	r4, [r0, #0]
 801724a:	60c4      	str	r4, [r0, #12]
 801724c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017254:	b94c      	cbnz	r4, 801726a <__pow5mult+0x66>
 8017256:	f240 2171 	movw	r1, #625	@ 0x271
 801725a:	4638      	mov	r0, r7
 801725c:	f7ff ff12 	bl	8017084 <__i2b>
 8017260:	2300      	movs	r3, #0
 8017262:	f8c8 0008 	str.w	r0, [r8, #8]
 8017266:	4604      	mov	r4, r0
 8017268:	6003      	str	r3, [r0, #0]
 801726a:	f04f 0900 	mov.w	r9, #0
 801726e:	07eb      	lsls	r3, r5, #31
 8017270:	d50a      	bpl.n	8017288 <__pow5mult+0x84>
 8017272:	4631      	mov	r1, r6
 8017274:	4622      	mov	r2, r4
 8017276:	4638      	mov	r0, r7
 8017278:	f7ff ff1a 	bl	80170b0 <__multiply>
 801727c:	4631      	mov	r1, r6
 801727e:	4680      	mov	r8, r0
 8017280:	4638      	mov	r0, r7
 8017282:	f7ff fe01 	bl	8016e88 <_Bfree>
 8017286:	4646      	mov	r6, r8
 8017288:	106d      	asrs	r5, r5, #1
 801728a:	d00b      	beq.n	80172a4 <__pow5mult+0xa0>
 801728c:	6820      	ldr	r0, [r4, #0]
 801728e:	b938      	cbnz	r0, 80172a0 <__pow5mult+0x9c>
 8017290:	4622      	mov	r2, r4
 8017292:	4621      	mov	r1, r4
 8017294:	4638      	mov	r0, r7
 8017296:	f7ff ff0b 	bl	80170b0 <__multiply>
 801729a:	6020      	str	r0, [r4, #0]
 801729c:	f8c0 9000 	str.w	r9, [r0]
 80172a0:	4604      	mov	r4, r0
 80172a2:	e7e4      	b.n	801726e <__pow5mult+0x6a>
 80172a4:	4630      	mov	r0, r6
 80172a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172aa:	bf00      	nop
 80172ac:	08019204 	.word	0x08019204
 80172b0:	08019192 	.word	0x08019192
 80172b4:	080191a9 	.word	0x080191a9

080172b8 <__lshift>:
 80172b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172bc:	460c      	mov	r4, r1
 80172be:	6849      	ldr	r1, [r1, #4]
 80172c0:	6923      	ldr	r3, [r4, #16]
 80172c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80172c6:	68a3      	ldr	r3, [r4, #8]
 80172c8:	4607      	mov	r7, r0
 80172ca:	4691      	mov	r9, r2
 80172cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80172d0:	f108 0601 	add.w	r6, r8, #1
 80172d4:	42b3      	cmp	r3, r6
 80172d6:	db0b      	blt.n	80172f0 <__lshift+0x38>
 80172d8:	4638      	mov	r0, r7
 80172da:	f7ff fd95 	bl	8016e08 <_Balloc>
 80172de:	4605      	mov	r5, r0
 80172e0:	b948      	cbnz	r0, 80172f6 <__lshift+0x3e>
 80172e2:	4602      	mov	r2, r0
 80172e4:	4b28      	ldr	r3, [pc, #160]	@ (8017388 <__lshift+0xd0>)
 80172e6:	4829      	ldr	r0, [pc, #164]	@ (801738c <__lshift+0xd4>)
 80172e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80172ec:	f000 fdec 	bl	8017ec8 <__assert_func>
 80172f0:	3101      	adds	r1, #1
 80172f2:	005b      	lsls	r3, r3, #1
 80172f4:	e7ee      	b.n	80172d4 <__lshift+0x1c>
 80172f6:	2300      	movs	r3, #0
 80172f8:	f100 0114 	add.w	r1, r0, #20
 80172fc:	f100 0210 	add.w	r2, r0, #16
 8017300:	4618      	mov	r0, r3
 8017302:	4553      	cmp	r3, sl
 8017304:	db33      	blt.n	801736e <__lshift+0xb6>
 8017306:	6920      	ldr	r0, [r4, #16]
 8017308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801730c:	f104 0314 	add.w	r3, r4, #20
 8017310:	f019 091f 	ands.w	r9, r9, #31
 8017314:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017318:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801731c:	d02b      	beq.n	8017376 <__lshift+0xbe>
 801731e:	f1c9 0e20 	rsb	lr, r9, #32
 8017322:	468a      	mov	sl, r1
 8017324:	2200      	movs	r2, #0
 8017326:	6818      	ldr	r0, [r3, #0]
 8017328:	fa00 f009 	lsl.w	r0, r0, r9
 801732c:	4310      	orrs	r0, r2
 801732e:	f84a 0b04 	str.w	r0, [sl], #4
 8017332:	f853 2b04 	ldr.w	r2, [r3], #4
 8017336:	459c      	cmp	ip, r3
 8017338:	fa22 f20e 	lsr.w	r2, r2, lr
 801733c:	d8f3      	bhi.n	8017326 <__lshift+0x6e>
 801733e:	ebac 0304 	sub.w	r3, ip, r4
 8017342:	3b15      	subs	r3, #21
 8017344:	f023 0303 	bic.w	r3, r3, #3
 8017348:	3304      	adds	r3, #4
 801734a:	f104 0015 	add.w	r0, r4, #21
 801734e:	4584      	cmp	ip, r0
 8017350:	bf38      	it	cc
 8017352:	2304      	movcc	r3, #4
 8017354:	50ca      	str	r2, [r1, r3]
 8017356:	b10a      	cbz	r2, 801735c <__lshift+0xa4>
 8017358:	f108 0602 	add.w	r6, r8, #2
 801735c:	3e01      	subs	r6, #1
 801735e:	4638      	mov	r0, r7
 8017360:	612e      	str	r6, [r5, #16]
 8017362:	4621      	mov	r1, r4
 8017364:	f7ff fd90 	bl	8016e88 <_Bfree>
 8017368:	4628      	mov	r0, r5
 801736a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801736e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017372:	3301      	adds	r3, #1
 8017374:	e7c5      	b.n	8017302 <__lshift+0x4a>
 8017376:	3904      	subs	r1, #4
 8017378:	f853 2b04 	ldr.w	r2, [r3], #4
 801737c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017380:	459c      	cmp	ip, r3
 8017382:	d8f9      	bhi.n	8017378 <__lshift+0xc0>
 8017384:	e7ea      	b.n	801735c <__lshift+0xa4>
 8017386:	bf00      	nop
 8017388:	08019121 	.word	0x08019121
 801738c:	080191a9 	.word	0x080191a9

08017390 <__mcmp>:
 8017390:	690a      	ldr	r2, [r1, #16]
 8017392:	4603      	mov	r3, r0
 8017394:	6900      	ldr	r0, [r0, #16]
 8017396:	1a80      	subs	r0, r0, r2
 8017398:	b530      	push	{r4, r5, lr}
 801739a:	d10e      	bne.n	80173ba <__mcmp+0x2a>
 801739c:	3314      	adds	r3, #20
 801739e:	3114      	adds	r1, #20
 80173a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80173a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80173a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80173ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80173b0:	4295      	cmp	r5, r2
 80173b2:	d003      	beq.n	80173bc <__mcmp+0x2c>
 80173b4:	d205      	bcs.n	80173c2 <__mcmp+0x32>
 80173b6:	f04f 30ff 	mov.w	r0, #4294967295
 80173ba:	bd30      	pop	{r4, r5, pc}
 80173bc:	42a3      	cmp	r3, r4
 80173be:	d3f3      	bcc.n	80173a8 <__mcmp+0x18>
 80173c0:	e7fb      	b.n	80173ba <__mcmp+0x2a>
 80173c2:	2001      	movs	r0, #1
 80173c4:	e7f9      	b.n	80173ba <__mcmp+0x2a>
	...

080173c8 <__mdiff>:
 80173c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173cc:	4689      	mov	r9, r1
 80173ce:	4606      	mov	r6, r0
 80173d0:	4611      	mov	r1, r2
 80173d2:	4648      	mov	r0, r9
 80173d4:	4614      	mov	r4, r2
 80173d6:	f7ff ffdb 	bl	8017390 <__mcmp>
 80173da:	1e05      	subs	r5, r0, #0
 80173dc:	d112      	bne.n	8017404 <__mdiff+0x3c>
 80173de:	4629      	mov	r1, r5
 80173e0:	4630      	mov	r0, r6
 80173e2:	f7ff fd11 	bl	8016e08 <_Balloc>
 80173e6:	4602      	mov	r2, r0
 80173e8:	b928      	cbnz	r0, 80173f6 <__mdiff+0x2e>
 80173ea:	4b3f      	ldr	r3, [pc, #252]	@ (80174e8 <__mdiff+0x120>)
 80173ec:	f240 2137 	movw	r1, #567	@ 0x237
 80173f0:	483e      	ldr	r0, [pc, #248]	@ (80174ec <__mdiff+0x124>)
 80173f2:	f000 fd69 	bl	8017ec8 <__assert_func>
 80173f6:	2301      	movs	r3, #1
 80173f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80173fc:	4610      	mov	r0, r2
 80173fe:	b003      	add	sp, #12
 8017400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017404:	bfbc      	itt	lt
 8017406:	464b      	movlt	r3, r9
 8017408:	46a1      	movlt	r9, r4
 801740a:	4630      	mov	r0, r6
 801740c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017410:	bfba      	itte	lt
 8017412:	461c      	movlt	r4, r3
 8017414:	2501      	movlt	r5, #1
 8017416:	2500      	movge	r5, #0
 8017418:	f7ff fcf6 	bl	8016e08 <_Balloc>
 801741c:	4602      	mov	r2, r0
 801741e:	b918      	cbnz	r0, 8017428 <__mdiff+0x60>
 8017420:	4b31      	ldr	r3, [pc, #196]	@ (80174e8 <__mdiff+0x120>)
 8017422:	f240 2145 	movw	r1, #581	@ 0x245
 8017426:	e7e3      	b.n	80173f0 <__mdiff+0x28>
 8017428:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801742c:	6926      	ldr	r6, [r4, #16]
 801742e:	60c5      	str	r5, [r0, #12]
 8017430:	f109 0310 	add.w	r3, r9, #16
 8017434:	f109 0514 	add.w	r5, r9, #20
 8017438:	f104 0e14 	add.w	lr, r4, #20
 801743c:	f100 0b14 	add.w	fp, r0, #20
 8017440:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017444:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017448:	9301      	str	r3, [sp, #4]
 801744a:	46d9      	mov	r9, fp
 801744c:	f04f 0c00 	mov.w	ip, #0
 8017450:	9b01      	ldr	r3, [sp, #4]
 8017452:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017456:	f853 af04 	ldr.w	sl, [r3, #4]!
 801745a:	9301      	str	r3, [sp, #4]
 801745c:	fa1f f38a 	uxth.w	r3, sl
 8017460:	4619      	mov	r1, r3
 8017462:	b283      	uxth	r3, r0
 8017464:	1acb      	subs	r3, r1, r3
 8017466:	0c00      	lsrs	r0, r0, #16
 8017468:	4463      	add	r3, ip
 801746a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801746e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017472:	b29b      	uxth	r3, r3
 8017474:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017478:	4576      	cmp	r6, lr
 801747a:	f849 3b04 	str.w	r3, [r9], #4
 801747e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017482:	d8e5      	bhi.n	8017450 <__mdiff+0x88>
 8017484:	1b33      	subs	r3, r6, r4
 8017486:	3b15      	subs	r3, #21
 8017488:	f023 0303 	bic.w	r3, r3, #3
 801748c:	3415      	adds	r4, #21
 801748e:	3304      	adds	r3, #4
 8017490:	42a6      	cmp	r6, r4
 8017492:	bf38      	it	cc
 8017494:	2304      	movcc	r3, #4
 8017496:	441d      	add	r5, r3
 8017498:	445b      	add	r3, fp
 801749a:	461e      	mov	r6, r3
 801749c:	462c      	mov	r4, r5
 801749e:	4544      	cmp	r4, r8
 80174a0:	d30e      	bcc.n	80174c0 <__mdiff+0xf8>
 80174a2:	f108 0103 	add.w	r1, r8, #3
 80174a6:	1b49      	subs	r1, r1, r5
 80174a8:	f021 0103 	bic.w	r1, r1, #3
 80174ac:	3d03      	subs	r5, #3
 80174ae:	45a8      	cmp	r8, r5
 80174b0:	bf38      	it	cc
 80174b2:	2100      	movcc	r1, #0
 80174b4:	440b      	add	r3, r1
 80174b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80174ba:	b191      	cbz	r1, 80174e2 <__mdiff+0x11a>
 80174bc:	6117      	str	r7, [r2, #16]
 80174be:	e79d      	b.n	80173fc <__mdiff+0x34>
 80174c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80174c4:	46e6      	mov	lr, ip
 80174c6:	0c08      	lsrs	r0, r1, #16
 80174c8:	fa1c fc81 	uxtah	ip, ip, r1
 80174cc:	4471      	add	r1, lr
 80174ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80174d2:	b289      	uxth	r1, r1
 80174d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80174d8:	f846 1b04 	str.w	r1, [r6], #4
 80174dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80174e0:	e7dd      	b.n	801749e <__mdiff+0xd6>
 80174e2:	3f01      	subs	r7, #1
 80174e4:	e7e7      	b.n	80174b6 <__mdiff+0xee>
 80174e6:	bf00      	nop
 80174e8:	08019121 	.word	0x08019121
 80174ec:	080191a9 	.word	0x080191a9

080174f0 <__ulp>:
 80174f0:	b082      	sub	sp, #8
 80174f2:	ed8d 0b00 	vstr	d0, [sp]
 80174f6:	9a01      	ldr	r2, [sp, #4]
 80174f8:	4b0f      	ldr	r3, [pc, #60]	@ (8017538 <__ulp+0x48>)
 80174fa:	4013      	ands	r3, r2
 80174fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017500:	2b00      	cmp	r3, #0
 8017502:	dc08      	bgt.n	8017516 <__ulp+0x26>
 8017504:	425b      	negs	r3, r3
 8017506:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801750a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801750e:	da04      	bge.n	801751a <__ulp+0x2a>
 8017510:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017514:	4113      	asrs	r3, r2
 8017516:	2200      	movs	r2, #0
 8017518:	e008      	b.n	801752c <__ulp+0x3c>
 801751a:	f1a2 0314 	sub.w	r3, r2, #20
 801751e:	2b1e      	cmp	r3, #30
 8017520:	bfda      	itte	le
 8017522:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017526:	40da      	lsrle	r2, r3
 8017528:	2201      	movgt	r2, #1
 801752a:	2300      	movs	r3, #0
 801752c:	4619      	mov	r1, r3
 801752e:	4610      	mov	r0, r2
 8017530:	ec41 0b10 	vmov	d0, r0, r1
 8017534:	b002      	add	sp, #8
 8017536:	4770      	bx	lr
 8017538:	7ff00000 	.word	0x7ff00000

0801753c <__b2d>:
 801753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017540:	6906      	ldr	r6, [r0, #16]
 8017542:	f100 0814 	add.w	r8, r0, #20
 8017546:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801754a:	1f37      	subs	r7, r6, #4
 801754c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017550:	4610      	mov	r0, r2
 8017552:	f7ff fd4b 	bl	8016fec <__hi0bits>
 8017556:	f1c0 0320 	rsb	r3, r0, #32
 801755a:	280a      	cmp	r0, #10
 801755c:	600b      	str	r3, [r1, #0]
 801755e:	491b      	ldr	r1, [pc, #108]	@ (80175cc <__b2d+0x90>)
 8017560:	dc15      	bgt.n	801758e <__b2d+0x52>
 8017562:	f1c0 0c0b 	rsb	ip, r0, #11
 8017566:	fa22 f30c 	lsr.w	r3, r2, ip
 801756a:	45b8      	cmp	r8, r7
 801756c:	ea43 0501 	orr.w	r5, r3, r1
 8017570:	bf34      	ite	cc
 8017572:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017576:	2300      	movcs	r3, #0
 8017578:	3015      	adds	r0, #21
 801757a:	fa02 f000 	lsl.w	r0, r2, r0
 801757e:	fa23 f30c 	lsr.w	r3, r3, ip
 8017582:	4303      	orrs	r3, r0
 8017584:	461c      	mov	r4, r3
 8017586:	ec45 4b10 	vmov	d0, r4, r5
 801758a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801758e:	45b8      	cmp	r8, r7
 8017590:	bf3a      	itte	cc
 8017592:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017596:	f1a6 0708 	subcc.w	r7, r6, #8
 801759a:	2300      	movcs	r3, #0
 801759c:	380b      	subs	r0, #11
 801759e:	d012      	beq.n	80175c6 <__b2d+0x8a>
 80175a0:	f1c0 0120 	rsb	r1, r0, #32
 80175a4:	fa23 f401 	lsr.w	r4, r3, r1
 80175a8:	4082      	lsls	r2, r0
 80175aa:	4322      	orrs	r2, r4
 80175ac:	4547      	cmp	r7, r8
 80175ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80175b2:	bf8c      	ite	hi
 80175b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80175b8:	2200      	movls	r2, #0
 80175ba:	4083      	lsls	r3, r0
 80175bc:	40ca      	lsrs	r2, r1
 80175be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80175c2:	4313      	orrs	r3, r2
 80175c4:	e7de      	b.n	8017584 <__b2d+0x48>
 80175c6:	ea42 0501 	orr.w	r5, r2, r1
 80175ca:	e7db      	b.n	8017584 <__b2d+0x48>
 80175cc:	3ff00000 	.word	0x3ff00000

080175d0 <__d2b>:
 80175d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80175d4:	460f      	mov	r7, r1
 80175d6:	2101      	movs	r1, #1
 80175d8:	ec59 8b10 	vmov	r8, r9, d0
 80175dc:	4616      	mov	r6, r2
 80175de:	f7ff fc13 	bl	8016e08 <_Balloc>
 80175e2:	4604      	mov	r4, r0
 80175e4:	b930      	cbnz	r0, 80175f4 <__d2b+0x24>
 80175e6:	4602      	mov	r2, r0
 80175e8:	4b23      	ldr	r3, [pc, #140]	@ (8017678 <__d2b+0xa8>)
 80175ea:	4824      	ldr	r0, [pc, #144]	@ (801767c <__d2b+0xac>)
 80175ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80175f0:	f000 fc6a 	bl	8017ec8 <__assert_func>
 80175f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80175f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80175fc:	b10d      	cbz	r5, 8017602 <__d2b+0x32>
 80175fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017602:	9301      	str	r3, [sp, #4]
 8017604:	f1b8 0300 	subs.w	r3, r8, #0
 8017608:	d023      	beq.n	8017652 <__d2b+0x82>
 801760a:	4668      	mov	r0, sp
 801760c:	9300      	str	r3, [sp, #0]
 801760e:	f7ff fd0c 	bl	801702a <__lo0bits>
 8017612:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017616:	b1d0      	cbz	r0, 801764e <__d2b+0x7e>
 8017618:	f1c0 0320 	rsb	r3, r0, #32
 801761c:	fa02 f303 	lsl.w	r3, r2, r3
 8017620:	430b      	orrs	r3, r1
 8017622:	40c2      	lsrs	r2, r0
 8017624:	6163      	str	r3, [r4, #20]
 8017626:	9201      	str	r2, [sp, #4]
 8017628:	9b01      	ldr	r3, [sp, #4]
 801762a:	61a3      	str	r3, [r4, #24]
 801762c:	2b00      	cmp	r3, #0
 801762e:	bf0c      	ite	eq
 8017630:	2201      	moveq	r2, #1
 8017632:	2202      	movne	r2, #2
 8017634:	6122      	str	r2, [r4, #16]
 8017636:	b1a5      	cbz	r5, 8017662 <__d2b+0x92>
 8017638:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801763c:	4405      	add	r5, r0
 801763e:	603d      	str	r5, [r7, #0]
 8017640:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017644:	6030      	str	r0, [r6, #0]
 8017646:	4620      	mov	r0, r4
 8017648:	b003      	add	sp, #12
 801764a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801764e:	6161      	str	r1, [r4, #20]
 8017650:	e7ea      	b.n	8017628 <__d2b+0x58>
 8017652:	a801      	add	r0, sp, #4
 8017654:	f7ff fce9 	bl	801702a <__lo0bits>
 8017658:	9b01      	ldr	r3, [sp, #4]
 801765a:	6163      	str	r3, [r4, #20]
 801765c:	3020      	adds	r0, #32
 801765e:	2201      	movs	r2, #1
 8017660:	e7e8      	b.n	8017634 <__d2b+0x64>
 8017662:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017666:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801766a:	6038      	str	r0, [r7, #0]
 801766c:	6918      	ldr	r0, [r3, #16]
 801766e:	f7ff fcbd 	bl	8016fec <__hi0bits>
 8017672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017676:	e7e5      	b.n	8017644 <__d2b+0x74>
 8017678:	08019121 	.word	0x08019121
 801767c:	080191a9 	.word	0x080191a9

08017680 <__ratio>:
 8017680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017684:	b085      	sub	sp, #20
 8017686:	e9cd 1000 	strd	r1, r0, [sp]
 801768a:	a902      	add	r1, sp, #8
 801768c:	f7ff ff56 	bl	801753c <__b2d>
 8017690:	9800      	ldr	r0, [sp, #0]
 8017692:	a903      	add	r1, sp, #12
 8017694:	ec55 4b10 	vmov	r4, r5, d0
 8017698:	f7ff ff50 	bl	801753c <__b2d>
 801769c:	9b01      	ldr	r3, [sp, #4]
 801769e:	6919      	ldr	r1, [r3, #16]
 80176a0:	9b00      	ldr	r3, [sp, #0]
 80176a2:	691b      	ldr	r3, [r3, #16]
 80176a4:	1ac9      	subs	r1, r1, r3
 80176a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80176aa:	1a9b      	subs	r3, r3, r2
 80176ac:	ec5b ab10 	vmov	sl, fp, d0
 80176b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	bfce      	itee	gt
 80176b8:	462a      	movgt	r2, r5
 80176ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80176be:	465a      	movle	r2, fp
 80176c0:	462f      	mov	r7, r5
 80176c2:	46d9      	mov	r9, fp
 80176c4:	bfcc      	ite	gt
 80176c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80176ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80176ce:	464b      	mov	r3, r9
 80176d0:	4652      	mov	r2, sl
 80176d2:	4620      	mov	r0, r4
 80176d4:	4639      	mov	r1, r7
 80176d6:	f7e9 f8d9 	bl	800088c <__aeabi_ddiv>
 80176da:	ec41 0b10 	vmov	d0, r0, r1
 80176de:	b005      	add	sp, #20
 80176e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080176e4 <__copybits>:
 80176e4:	3901      	subs	r1, #1
 80176e6:	b570      	push	{r4, r5, r6, lr}
 80176e8:	1149      	asrs	r1, r1, #5
 80176ea:	6914      	ldr	r4, [r2, #16]
 80176ec:	3101      	adds	r1, #1
 80176ee:	f102 0314 	add.w	r3, r2, #20
 80176f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80176f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80176fa:	1f05      	subs	r5, r0, #4
 80176fc:	42a3      	cmp	r3, r4
 80176fe:	d30c      	bcc.n	801771a <__copybits+0x36>
 8017700:	1aa3      	subs	r3, r4, r2
 8017702:	3b11      	subs	r3, #17
 8017704:	f023 0303 	bic.w	r3, r3, #3
 8017708:	3211      	adds	r2, #17
 801770a:	42a2      	cmp	r2, r4
 801770c:	bf88      	it	hi
 801770e:	2300      	movhi	r3, #0
 8017710:	4418      	add	r0, r3
 8017712:	2300      	movs	r3, #0
 8017714:	4288      	cmp	r0, r1
 8017716:	d305      	bcc.n	8017724 <__copybits+0x40>
 8017718:	bd70      	pop	{r4, r5, r6, pc}
 801771a:	f853 6b04 	ldr.w	r6, [r3], #4
 801771e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017722:	e7eb      	b.n	80176fc <__copybits+0x18>
 8017724:	f840 3b04 	str.w	r3, [r0], #4
 8017728:	e7f4      	b.n	8017714 <__copybits+0x30>

0801772a <__any_on>:
 801772a:	f100 0214 	add.w	r2, r0, #20
 801772e:	6900      	ldr	r0, [r0, #16]
 8017730:	114b      	asrs	r3, r1, #5
 8017732:	4298      	cmp	r0, r3
 8017734:	b510      	push	{r4, lr}
 8017736:	db11      	blt.n	801775c <__any_on+0x32>
 8017738:	dd0a      	ble.n	8017750 <__any_on+0x26>
 801773a:	f011 011f 	ands.w	r1, r1, #31
 801773e:	d007      	beq.n	8017750 <__any_on+0x26>
 8017740:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017744:	fa24 f001 	lsr.w	r0, r4, r1
 8017748:	fa00 f101 	lsl.w	r1, r0, r1
 801774c:	428c      	cmp	r4, r1
 801774e:	d10b      	bne.n	8017768 <__any_on+0x3e>
 8017750:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017754:	4293      	cmp	r3, r2
 8017756:	d803      	bhi.n	8017760 <__any_on+0x36>
 8017758:	2000      	movs	r0, #0
 801775a:	bd10      	pop	{r4, pc}
 801775c:	4603      	mov	r3, r0
 801775e:	e7f7      	b.n	8017750 <__any_on+0x26>
 8017760:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017764:	2900      	cmp	r1, #0
 8017766:	d0f5      	beq.n	8017754 <__any_on+0x2a>
 8017768:	2001      	movs	r0, #1
 801776a:	e7f6      	b.n	801775a <__any_on+0x30>

0801776c <__ascii_wctomb>:
 801776c:	4603      	mov	r3, r0
 801776e:	4608      	mov	r0, r1
 8017770:	b141      	cbz	r1, 8017784 <__ascii_wctomb+0x18>
 8017772:	2aff      	cmp	r2, #255	@ 0xff
 8017774:	d904      	bls.n	8017780 <__ascii_wctomb+0x14>
 8017776:	228a      	movs	r2, #138	@ 0x8a
 8017778:	601a      	str	r2, [r3, #0]
 801777a:	f04f 30ff 	mov.w	r0, #4294967295
 801777e:	4770      	bx	lr
 8017780:	700a      	strb	r2, [r1, #0]
 8017782:	2001      	movs	r0, #1
 8017784:	4770      	bx	lr

08017786 <__ssputs_r>:
 8017786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801778a:	688e      	ldr	r6, [r1, #8]
 801778c:	461f      	mov	r7, r3
 801778e:	42be      	cmp	r6, r7
 8017790:	680b      	ldr	r3, [r1, #0]
 8017792:	4682      	mov	sl, r0
 8017794:	460c      	mov	r4, r1
 8017796:	4690      	mov	r8, r2
 8017798:	d82d      	bhi.n	80177f6 <__ssputs_r+0x70>
 801779a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801779e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80177a2:	d026      	beq.n	80177f2 <__ssputs_r+0x6c>
 80177a4:	6965      	ldr	r5, [r4, #20]
 80177a6:	6909      	ldr	r1, [r1, #16]
 80177a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80177ac:	eba3 0901 	sub.w	r9, r3, r1
 80177b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80177b4:	1c7b      	adds	r3, r7, #1
 80177b6:	444b      	add	r3, r9
 80177b8:	106d      	asrs	r5, r5, #1
 80177ba:	429d      	cmp	r5, r3
 80177bc:	bf38      	it	cc
 80177be:	461d      	movcc	r5, r3
 80177c0:	0553      	lsls	r3, r2, #21
 80177c2:	d527      	bpl.n	8017814 <__ssputs_r+0x8e>
 80177c4:	4629      	mov	r1, r5
 80177c6:	f7ff fa81 	bl	8016ccc <_malloc_r>
 80177ca:	4606      	mov	r6, r0
 80177cc:	b360      	cbz	r0, 8017828 <__ssputs_r+0xa2>
 80177ce:	6921      	ldr	r1, [r4, #16]
 80177d0:	464a      	mov	r2, r9
 80177d2:	f7fe febc 	bl	801654e <memcpy>
 80177d6:	89a3      	ldrh	r3, [r4, #12]
 80177d8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80177dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80177e0:	81a3      	strh	r3, [r4, #12]
 80177e2:	6126      	str	r6, [r4, #16]
 80177e4:	6165      	str	r5, [r4, #20]
 80177e6:	444e      	add	r6, r9
 80177e8:	eba5 0509 	sub.w	r5, r5, r9
 80177ec:	6026      	str	r6, [r4, #0]
 80177ee:	60a5      	str	r5, [r4, #8]
 80177f0:	463e      	mov	r6, r7
 80177f2:	42be      	cmp	r6, r7
 80177f4:	d900      	bls.n	80177f8 <__ssputs_r+0x72>
 80177f6:	463e      	mov	r6, r7
 80177f8:	6820      	ldr	r0, [r4, #0]
 80177fa:	4632      	mov	r2, r6
 80177fc:	4641      	mov	r1, r8
 80177fe:	f7fe fdb8 	bl	8016372 <memmove>
 8017802:	68a3      	ldr	r3, [r4, #8]
 8017804:	1b9b      	subs	r3, r3, r6
 8017806:	60a3      	str	r3, [r4, #8]
 8017808:	6823      	ldr	r3, [r4, #0]
 801780a:	4433      	add	r3, r6
 801780c:	6023      	str	r3, [r4, #0]
 801780e:	2000      	movs	r0, #0
 8017810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017814:	462a      	mov	r2, r5
 8017816:	f000 fb91 	bl	8017f3c <_realloc_r>
 801781a:	4606      	mov	r6, r0
 801781c:	2800      	cmp	r0, #0
 801781e:	d1e0      	bne.n	80177e2 <__ssputs_r+0x5c>
 8017820:	6921      	ldr	r1, [r4, #16]
 8017822:	4650      	mov	r0, sl
 8017824:	f7fe feac 	bl	8016580 <_free_r>
 8017828:	230c      	movs	r3, #12
 801782a:	f8ca 3000 	str.w	r3, [sl]
 801782e:	89a3      	ldrh	r3, [r4, #12]
 8017830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017834:	81a3      	strh	r3, [r4, #12]
 8017836:	f04f 30ff 	mov.w	r0, #4294967295
 801783a:	e7e9      	b.n	8017810 <__ssputs_r+0x8a>

0801783c <_svfiprintf_r>:
 801783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017840:	4698      	mov	r8, r3
 8017842:	898b      	ldrh	r3, [r1, #12]
 8017844:	061b      	lsls	r3, r3, #24
 8017846:	b09d      	sub	sp, #116	@ 0x74
 8017848:	4607      	mov	r7, r0
 801784a:	460d      	mov	r5, r1
 801784c:	4614      	mov	r4, r2
 801784e:	d510      	bpl.n	8017872 <_svfiprintf_r+0x36>
 8017850:	690b      	ldr	r3, [r1, #16]
 8017852:	b973      	cbnz	r3, 8017872 <_svfiprintf_r+0x36>
 8017854:	2140      	movs	r1, #64	@ 0x40
 8017856:	f7ff fa39 	bl	8016ccc <_malloc_r>
 801785a:	6028      	str	r0, [r5, #0]
 801785c:	6128      	str	r0, [r5, #16]
 801785e:	b930      	cbnz	r0, 801786e <_svfiprintf_r+0x32>
 8017860:	230c      	movs	r3, #12
 8017862:	603b      	str	r3, [r7, #0]
 8017864:	f04f 30ff 	mov.w	r0, #4294967295
 8017868:	b01d      	add	sp, #116	@ 0x74
 801786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801786e:	2340      	movs	r3, #64	@ 0x40
 8017870:	616b      	str	r3, [r5, #20]
 8017872:	2300      	movs	r3, #0
 8017874:	9309      	str	r3, [sp, #36]	@ 0x24
 8017876:	2320      	movs	r3, #32
 8017878:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801787c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017880:	2330      	movs	r3, #48	@ 0x30
 8017882:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017a20 <_svfiprintf_r+0x1e4>
 8017886:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801788a:	f04f 0901 	mov.w	r9, #1
 801788e:	4623      	mov	r3, r4
 8017890:	469a      	mov	sl, r3
 8017892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017896:	b10a      	cbz	r2, 801789c <_svfiprintf_r+0x60>
 8017898:	2a25      	cmp	r2, #37	@ 0x25
 801789a:	d1f9      	bne.n	8017890 <_svfiprintf_r+0x54>
 801789c:	ebba 0b04 	subs.w	fp, sl, r4
 80178a0:	d00b      	beq.n	80178ba <_svfiprintf_r+0x7e>
 80178a2:	465b      	mov	r3, fp
 80178a4:	4622      	mov	r2, r4
 80178a6:	4629      	mov	r1, r5
 80178a8:	4638      	mov	r0, r7
 80178aa:	f7ff ff6c 	bl	8017786 <__ssputs_r>
 80178ae:	3001      	adds	r0, #1
 80178b0:	f000 80a7 	beq.w	8017a02 <_svfiprintf_r+0x1c6>
 80178b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80178b6:	445a      	add	r2, fp
 80178b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80178ba:	f89a 3000 	ldrb.w	r3, [sl]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	f000 809f 	beq.w	8017a02 <_svfiprintf_r+0x1c6>
 80178c4:	2300      	movs	r3, #0
 80178c6:	f04f 32ff 	mov.w	r2, #4294967295
 80178ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178ce:	f10a 0a01 	add.w	sl, sl, #1
 80178d2:	9304      	str	r3, [sp, #16]
 80178d4:	9307      	str	r3, [sp, #28]
 80178d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80178da:	931a      	str	r3, [sp, #104]	@ 0x68
 80178dc:	4654      	mov	r4, sl
 80178de:	2205      	movs	r2, #5
 80178e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178e4:	484e      	ldr	r0, [pc, #312]	@ (8017a20 <_svfiprintf_r+0x1e4>)
 80178e6:	f7e8 fc9b 	bl	8000220 <memchr>
 80178ea:	9a04      	ldr	r2, [sp, #16]
 80178ec:	b9d8      	cbnz	r0, 8017926 <_svfiprintf_r+0xea>
 80178ee:	06d0      	lsls	r0, r2, #27
 80178f0:	bf44      	itt	mi
 80178f2:	2320      	movmi	r3, #32
 80178f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178f8:	0711      	lsls	r1, r2, #28
 80178fa:	bf44      	itt	mi
 80178fc:	232b      	movmi	r3, #43	@ 0x2b
 80178fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017902:	f89a 3000 	ldrb.w	r3, [sl]
 8017906:	2b2a      	cmp	r3, #42	@ 0x2a
 8017908:	d015      	beq.n	8017936 <_svfiprintf_r+0xfa>
 801790a:	9a07      	ldr	r2, [sp, #28]
 801790c:	4654      	mov	r4, sl
 801790e:	2000      	movs	r0, #0
 8017910:	f04f 0c0a 	mov.w	ip, #10
 8017914:	4621      	mov	r1, r4
 8017916:	f811 3b01 	ldrb.w	r3, [r1], #1
 801791a:	3b30      	subs	r3, #48	@ 0x30
 801791c:	2b09      	cmp	r3, #9
 801791e:	d94b      	bls.n	80179b8 <_svfiprintf_r+0x17c>
 8017920:	b1b0      	cbz	r0, 8017950 <_svfiprintf_r+0x114>
 8017922:	9207      	str	r2, [sp, #28]
 8017924:	e014      	b.n	8017950 <_svfiprintf_r+0x114>
 8017926:	eba0 0308 	sub.w	r3, r0, r8
 801792a:	fa09 f303 	lsl.w	r3, r9, r3
 801792e:	4313      	orrs	r3, r2
 8017930:	9304      	str	r3, [sp, #16]
 8017932:	46a2      	mov	sl, r4
 8017934:	e7d2      	b.n	80178dc <_svfiprintf_r+0xa0>
 8017936:	9b03      	ldr	r3, [sp, #12]
 8017938:	1d19      	adds	r1, r3, #4
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	9103      	str	r1, [sp, #12]
 801793e:	2b00      	cmp	r3, #0
 8017940:	bfbb      	ittet	lt
 8017942:	425b      	neglt	r3, r3
 8017944:	f042 0202 	orrlt.w	r2, r2, #2
 8017948:	9307      	strge	r3, [sp, #28]
 801794a:	9307      	strlt	r3, [sp, #28]
 801794c:	bfb8      	it	lt
 801794e:	9204      	strlt	r2, [sp, #16]
 8017950:	7823      	ldrb	r3, [r4, #0]
 8017952:	2b2e      	cmp	r3, #46	@ 0x2e
 8017954:	d10a      	bne.n	801796c <_svfiprintf_r+0x130>
 8017956:	7863      	ldrb	r3, [r4, #1]
 8017958:	2b2a      	cmp	r3, #42	@ 0x2a
 801795a:	d132      	bne.n	80179c2 <_svfiprintf_r+0x186>
 801795c:	9b03      	ldr	r3, [sp, #12]
 801795e:	1d1a      	adds	r2, r3, #4
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	9203      	str	r2, [sp, #12]
 8017964:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017968:	3402      	adds	r4, #2
 801796a:	9305      	str	r3, [sp, #20]
 801796c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017a30 <_svfiprintf_r+0x1f4>
 8017970:	7821      	ldrb	r1, [r4, #0]
 8017972:	2203      	movs	r2, #3
 8017974:	4650      	mov	r0, sl
 8017976:	f7e8 fc53 	bl	8000220 <memchr>
 801797a:	b138      	cbz	r0, 801798c <_svfiprintf_r+0x150>
 801797c:	9b04      	ldr	r3, [sp, #16]
 801797e:	eba0 000a 	sub.w	r0, r0, sl
 8017982:	2240      	movs	r2, #64	@ 0x40
 8017984:	4082      	lsls	r2, r0
 8017986:	4313      	orrs	r3, r2
 8017988:	3401      	adds	r4, #1
 801798a:	9304      	str	r3, [sp, #16]
 801798c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017990:	4824      	ldr	r0, [pc, #144]	@ (8017a24 <_svfiprintf_r+0x1e8>)
 8017992:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017996:	2206      	movs	r2, #6
 8017998:	f7e8 fc42 	bl	8000220 <memchr>
 801799c:	2800      	cmp	r0, #0
 801799e:	d036      	beq.n	8017a0e <_svfiprintf_r+0x1d2>
 80179a0:	4b21      	ldr	r3, [pc, #132]	@ (8017a28 <_svfiprintf_r+0x1ec>)
 80179a2:	bb1b      	cbnz	r3, 80179ec <_svfiprintf_r+0x1b0>
 80179a4:	9b03      	ldr	r3, [sp, #12]
 80179a6:	3307      	adds	r3, #7
 80179a8:	f023 0307 	bic.w	r3, r3, #7
 80179ac:	3308      	adds	r3, #8
 80179ae:	9303      	str	r3, [sp, #12]
 80179b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179b2:	4433      	add	r3, r6
 80179b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80179b6:	e76a      	b.n	801788e <_svfiprintf_r+0x52>
 80179b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80179bc:	460c      	mov	r4, r1
 80179be:	2001      	movs	r0, #1
 80179c0:	e7a8      	b.n	8017914 <_svfiprintf_r+0xd8>
 80179c2:	2300      	movs	r3, #0
 80179c4:	3401      	adds	r4, #1
 80179c6:	9305      	str	r3, [sp, #20]
 80179c8:	4619      	mov	r1, r3
 80179ca:	f04f 0c0a 	mov.w	ip, #10
 80179ce:	4620      	mov	r0, r4
 80179d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179d4:	3a30      	subs	r2, #48	@ 0x30
 80179d6:	2a09      	cmp	r2, #9
 80179d8:	d903      	bls.n	80179e2 <_svfiprintf_r+0x1a6>
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d0c6      	beq.n	801796c <_svfiprintf_r+0x130>
 80179de:	9105      	str	r1, [sp, #20]
 80179e0:	e7c4      	b.n	801796c <_svfiprintf_r+0x130>
 80179e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80179e6:	4604      	mov	r4, r0
 80179e8:	2301      	movs	r3, #1
 80179ea:	e7f0      	b.n	80179ce <_svfiprintf_r+0x192>
 80179ec:	ab03      	add	r3, sp, #12
 80179ee:	9300      	str	r3, [sp, #0]
 80179f0:	462a      	mov	r2, r5
 80179f2:	4b0e      	ldr	r3, [pc, #56]	@ (8017a2c <_svfiprintf_r+0x1f0>)
 80179f4:	a904      	add	r1, sp, #16
 80179f6:	4638      	mov	r0, r7
 80179f8:	f3af 8000 	nop.w
 80179fc:	1c42      	adds	r2, r0, #1
 80179fe:	4606      	mov	r6, r0
 8017a00:	d1d6      	bne.n	80179b0 <_svfiprintf_r+0x174>
 8017a02:	89ab      	ldrh	r3, [r5, #12]
 8017a04:	065b      	lsls	r3, r3, #25
 8017a06:	f53f af2d 	bmi.w	8017864 <_svfiprintf_r+0x28>
 8017a0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a0c:	e72c      	b.n	8017868 <_svfiprintf_r+0x2c>
 8017a0e:	ab03      	add	r3, sp, #12
 8017a10:	9300      	str	r3, [sp, #0]
 8017a12:	462a      	mov	r2, r5
 8017a14:	4b05      	ldr	r3, [pc, #20]	@ (8017a2c <_svfiprintf_r+0x1f0>)
 8017a16:	a904      	add	r1, sp, #16
 8017a18:	4638      	mov	r0, r7
 8017a1a:	f000 f879 	bl	8017b10 <_printf_i>
 8017a1e:	e7ed      	b.n	80179fc <_svfiprintf_r+0x1c0>
 8017a20:	08019300 	.word	0x08019300
 8017a24:	0801930a 	.word	0x0801930a
 8017a28:	00000000 	.word	0x00000000
 8017a2c:	08017787 	.word	0x08017787
 8017a30:	08019306 	.word	0x08019306

08017a34 <_printf_common>:
 8017a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a38:	4616      	mov	r6, r2
 8017a3a:	4698      	mov	r8, r3
 8017a3c:	688a      	ldr	r2, [r1, #8]
 8017a3e:	690b      	ldr	r3, [r1, #16]
 8017a40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017a44:	4293      	cmp	r3, r2
 8017a46:	bfb8      	it	lt
 8017a48:	4613      	movlt	r3, r2
 8017a4a:	6033      	str	r3, [r6, #0]
 8017a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017a50:	4607      	mov	r7, r0
 8017a52:	460c      	mov	r4, r1
 8017a54:	b10a      	cbz	r2, 8017a5a <_printf_common+0x26>
 8017a56:	3301      	adds	r3, #1
 8017a58:	6033      	str	r3, [r6, #0]
 8017a5a:	6823      	ldr	r3, [r4, #0]
 8017a5c:	0699      	lsls	r1, r3, #26
 8017a5e:	bf42      	ittt	mi
 8017a60:	6833      	ldrmi	r3, [r6, #0]
 8017a62:	3302      	addmi	r3, #2
 8017a64:	6033      	strmi	r3, [r6, #0]
 8017a66:	6825      	ldr	r5, [r4, #0]
 8017a68:	f015 0506 	ands.w	r5, r5, #6
 8017a6c:	d106      	bne.n	8017a7c <_printf_common+0x48>
 8017a6e:	f104 0a19 	add.w	sl, r4, #25
 8017a72:	68e3      	ldr	r3, [r4, #12]
 8017a74:	6832      	ldr	r2, [r6, #0]
 8017a76:	1a9b      	subs	r3, r3, r2
 8017a78:	42ab      	cmp	r3, r5
 8017a7a:	dc26      	bgt.n	8017aca <_printf_common+0x96>
 8017a7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017a80:	6822      	ldr	r2, [r4, #0]
 8017a82:	3b00      	subs	r3, #0
 8017a84:	bf18      	it	ne
 8017a86:	2301      	movne	r3, #1
 8017a88:	0692      	lsls	r2, r2, #26
 8017a8a:	d42b      	bmi.n	8017ae4 <_printf_common+0xb0>
 8017a8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017a90:	4641      	mov	r1, r8
 8017a92:	4638      	mov	r0, r7
 8017a94:	47c8      	blx	r9
 8017a96:	3001      	adds	r0, #1
 8017a98:	d01e      	beq.n	8017ad8 <_printf_common+0xa4>
 8017a9a:	6823      	ldr	r3, [r4, #0]
 8017a9c:	6922      	ldr	r2, [r4, #16]
 8017a9e:	f003 0306 	and.w	r3, r3, #6
 8017aa2:	2b04      	cmp	r3, #4
 8017aa4:	bf02      	ittt	eq
 8017aa6:	68e5      	ldreq	r5, [r4, #12]
 8017aa8:	6833      	ldreq	r3, [r6, #0]
 8017aaa:	1aed      	subeq	r5, r5, r3
 8017aac:	68a3      	ldr	r3, [r4, #8]
 8017aae:	bf0c      	ite	eq
 8017ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ab4:	2500      	movne	r5, #0
 8017ab6:	4293      	cmp	r3, r2
 8017ab8:	bfc4      	itt	gt
 8017aba:	1a9b      	subgt	r3, r3, r2
 8017abc:	18ed      	addgt	r5, r5, r3
 8017abe:	2600      	movs	r6, #0
 8017ac0:	341a      	adds	r4, #26
 8017ac2:	42b5      	cmp	r5, r6
 8017ac4:	d11a      	bne.n	8017afc <_printf_common+0xc8>
 8017ac6:	2000      	movs	r0, #0
 8017ac8:	e008      	b.n	8017adc <_printf_common+0xa8>
 8017aca:	2301      	movs	r3, #1
 8017acc:	4652      	mov	r2, sl
 8017ace:	4641      	mov	r1, r8
 8017ad0:	4638      	mov	r0, r7
 8017ad2:	47c8      	blx	r9
 8017ad4:	3001      	adds	r0, #1
 8017ad6:	d103      	bne.n	8017ae0 <_printf_common+0xac>
 8017ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8017adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ae0:	3501      	adds	r5, #1
 8017ae2:	e7c6      	b.n	8017a72 <_printf_common+0x3e>
 8017ae4:	18e1      	adds	r1, r4, r3
 8017ae6:	1c5a      	adds	r2, r3, #1
 8017ae8:	2030      	movs	r0, #48	@ 0x30
 8017aea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017aee:	4422      	add	r2, r4
 8017af0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017af4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017af8:	3302      	adds	r3, #2
 8017afa:	e7c7      	b.n	8017a8c <_printf_common+0x58>
 8017afc:	2301      	movs	r3, #1
 8017afe:	4622      	mov	r2, r4
 8017b00:	4641      	mov	r1, r8
 8017b02:	4638      	mov	r0, r7
 8017b04:	47c8      	blx	r9
 8017b06:	3001      	adds	r0, #1
 8017b08:	d0e6      	beq.n	8017ad8 <_printf_common+0xa4>
 8017b0a:	3601      	adds	r6, #1
 8017b0c:	e7d9      	b.n	8017ac2 <_printf_common+0x8e>
	...

08017b10 <_printf_i>:
 8017b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b14:	7e0f      	ldrb	r7, [r1, #24]
 8017b16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017b18:	2f78      	cmp	r7, #120	@ 0x78
 8017b1a:	4691      	mov	r9, r2
 8017b1c:	4680      	mov	r8, r0
 8017b1e:	460c      	mov	r4, r1
 8017b20:	469a      	mov	sl, r3
 8017b22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017b26:	d807      	bhi.n	8017b38 <_printf_i+0x28>
 8017b28:	2f62      	cmp	r7, #98	@ 0x62
 8017b2a:	d80a      	bhi.n	8017b42 <_printf_i+0x32>
 8017b2c:	2f00      	cmp	r7, #0
 8017b2e:	f000 80d2 	beq.w	8017cd6 <_printf_i+0x1c6>
 8017b32:	2f58      	cmp	r7, #88	@ 0x58
 8017b34:	f000 80b9 	beq.w	8017caa <_printf_i+0x19a>
 8017b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017b40:	e03a      	b.n	8017bb8 <_printf_i+0xa8>
 8017b42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017b46:	2b15      	cmp	r3, #21
 8017b48:	d8f6      	bhi.n	8017b38 <_printf_i+0x28>
 8017b4a:	a101      	add	r1, pc, #4	@ (adr r1, 8017b50 <_printf_i+0x40>)
 8017b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b50:	08017ba9 	.word	0x08017ba9
 8017b54:	08017bbd 	.word	0x08017bbd
 8017b58:	08017b39 	.word	0x08017b39
 8017b5c:	08017b39 	.word	0x08017b39
 8017b60:	08017b39 	.word	0x08017b39
 8017b64:	08017b39 	.word	0x08017b39
 8017b68:	08017bbd 	.word	0x08017bbd
 8017b6c:	08017b39 	.word	0x08017b39
 8017b70:	08017b39 	.word	0x08017b39
 8017b74:	08017b39 	.word	0x08017b39
 8017b78:	08017b39 	.word	0x08017b39
 8017b7c:	08017cbd 	.word	0x08017cbd
 8017b80:	08017be7 	.word	0x08017be7
 8017b84:	08017c77 	.word	0x08017c77
 8017b88:	08017b39 	.word	0x08017b39
 8017b8c:	08017b39 	.word	0x08017b39
 8017b90:	08017cdf 	.word	0x08017cdf
 8017b94:	08017b39 	.word	0x08017b39
 8017b98:	08017be7 	.word	0x08017be7
 8017b9c:	08017b39 	.word	0x08017b39
 8017ba0:	08017b39 	.word	0x08017b39
 8017ba4:	08017c7f 	.word	0x08017c7f
 8017ba8:	6833      	ldr	r3, [r6, #0]
 8017baa:	1d1a      	adds	r2, r3, #4
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	6032      	str	r2, [r6, #0]
 8017bb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017bb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017bb8:	2301      	movs	r3, #1
 8017bba:	e09d      	b.n	8017cf8 <_printf_i+0x1e8>
 8017bbc:	6833      	ldr	r3, [r6, #0]
 8017bbe:	6820      	ldr	r0, [r4, #0]
 8017bc0:	1d19      	adds	r1, r3, #4
 8017bc2:	6031      	str	r1, [r6, #0]
 8017bc4:	0606      	lsls	r6, r0, #24
 8017bc6:	d501      	bpl.n	8017bcc <_printf_i+0xbc>
 8017bc8:	681d      	ldr	r5, [r3, #0]
 8017bca:	e003      	b.n	8017bd4 <_printf_i+0xc4>
 8017bcc:	0645      	lsls	r5, r0, #25
 8017bce:	d5fb      	bpl.n	8017bc8 <_printf_i+0xb8>
 8017bd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017bd4:	2d00      	cmp	r5, #0
 8017bd6:	da03      	bge.n	8017be0 <_printf_i+0xd0>
 8017bd8:	232d      	movs	r3, #45	@ 0x2d
 8017bda:	426d      	negs	r5, r5
 8017bdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017be0:	4859      	ldr	r0, [pc, #356]	@ (8017d48 <_printf_i+0x238>)
 8017be2:	230a      	movs	r3, #10
 8017be4:	e011      	b.n	8017c0a <_printf_i+0xfa>
 8017be6:	6821      	ldr	r1, [r4, #0]
 8017be8:	6833      	ldr	r3, [r6, #0]
 8017bea:	0608      	lsls	r0, r1, #24
 8017bec:	f853 5b04 	ldr.w	r5, [r3], #4
 8017bf0:	d402      	bmi.n	8017bf8 <_printf_i+0xe8>
 8017bf2:	0649      	lsls	r1, r1, #25
 8017bf4:	bf48      	it	mi
 8017bf6:	b2ad      	uxthmi	r5, r5
 8017bf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8017bfa:	4853      	ldr	r0, [pc, #332]	@ (8017d48 <_printf_i+0x238>)
 8017bfc:	6033      	str	r3, [r6, #0]
 8017bfe:	bf14      	ite	ne
 8017c00:	230a      	movne	r3, #10
 8017c02:	2308      	moveq	r3, #8
 8017c04:	2100      	movs	r1, #0
 8017c06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017c0a:	6866      	ldr	r6, [r4, #4]
 8017c0c:	60a6      	str	r6, [r4, #8]
 8017c0e:	2e00      	cmp	r6, #0
 8017c10:	bfa2      	ittt	ge
 8017c12:	6821      	ldrge	r1, [r4, #0]
 8017c14:	f021 0104 	bicge.w	r1, r1, #4
 8017c18:	6021      	strge	r1, [r4, #0]
 8017c1a:	b90d      	cbnz	r5, 8017c20 <_printf_i+0x110>
 8017c1c:	2e00      	cmp	r6, #0
 8017c1e:	d04b      	beq.n	8017cb8 <_printf_i+0x1a8>
 8017c20:	4616      	mov	r6, r2
 8017c22:	fbb5 f1f3 	udiv	r1, r5, r3
 8017c26:	fb03 5711 	mls	r7, r3, r1, r5
 8017c2a:	5dc7      	ldrb	r7, [r0, r7]
 8017c2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017c30:	462f      	mov	r7, r5
 8017c32:	42bb      	cmp	r3, r7
 8017c34:	460d      	mov	r5, r1
 8017c36:	d9f4      	bls.n	8017c22 <_printf_i+0x112>
 8017c38:	2b08      	cmp	r3, #8
 8017c3a:	d10b      	bne.n	8017c54 <_printf_i+0x144>
 8017c3c:	6823      	ldr	r3, [r4, #0]
 8017c3e:	07df      	lsls	r7, r3, #31
 8017c40:	d508      	bpl.n	8017c54 <_printf_i+0x144>
 8017c42:	6923      	ldr	r3, [r4, #16]
 8017c44:	6861      	ldr	r1, [r4, #4]
 8017c46:	4299      	cmp	r1, r3
 8017c48:	bfde      	ittt	le
 8017c4a:	2330      	movle	r3, #48	@ 0x30
 8017c4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017c50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017c54:	1b92      	subs	r2, r2, r6
 8017c56:	6122      	str	r2, [r4, #16]
 8017c58:	f8cd a000 	str.w	sl, [sp]
 8017c5c:	464b      	mov	r3, r9
 8017c5e:	aa03      	add	r2, sp, #12
 8017c60:	4621      	mov	r1, r4
 8017c62:	4640      	mov	r0, r8
 8017c64:	f7ff fee6 	bl	8017a34 <_printf_common>
 8017c68:	3001      	adds	r0, #1
 8017c6a:	d14a      	bne.n	8017d02 <_printf_i+0x1f2>
 8017c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c70:	b004      	add	sp, #16
 8017c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c76:	6823      	ldr	r3, [r4, #0]
 8017c78:	f043 0320 	orr.w	r3, r3, #32
 8017c7c:	6023      	str	r3, [r4, #0]
 8017c7e:	4833      	ldr	r0, [pc, #204]	@ (8017d4c <_printf_i+0x23c>)
 8017c80:	2778      	movs	r7, #120	@ 0x78
 8017c82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017c86:	6823      	ldr	r3, [r4, #0]
 8017c88:	6831      	ldr	r1, [r6, #0]
 8017c8a:	061f      	lsls	r7, r3, #24
 8017c8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017c90:	d402      	bmi.n	8017c98 <_printf_i+0x188>
 8017c92:	065f      	lsls	r7, r3, #25
 8017c94:	bf48      	it	mi
 8017c96:	b2ad      	uxthmi	r5, r5
 8017c98:	6031      	str	r1, [r6, #0]
 8017c9a:	07d9      	lsls	r1, r3, #31
 8017c9c:	bf44      	itt	mi
 8017c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8017ca2:	6023      	strmi	r3, [r4, #0]
 8017ca4:	b11d      	cbz	r5, 8017cae <_printf_i+0x19e>
 8017ca6:	2310      	movs	r3, #16
 8017ca8:	e7ac      	b.n	8017c04 <_printf_i+0xf4>
 8017caa:	4827      	ldr	r0, [pc, #156]	@ (8017d48 <_printf_i+0x238>)
 8017cac:	e7e9      	b.n	8017c82 <_printf_i+0x172>
 8017cae:	6823      	ldr	r3, [r4, #0]
 8017cb0:	f023 0320 	bic.w	r3, r3, #32
 8017cb4:	6023      	str	r3, [r4, #0]
 8017cb6:	e7f6      	b.n	8017ca6 <_printf_i+0x196>
 8017cb8:	4616      	mov	r6, r2
 8017cba:	e7bd      	b.n	8017c38 <_printf_i+0x128>
 8017cbc:	6833      	ldr	r3, [r6, #0]
 8017cbe:	6825      	ldr	r5, [r4, #0]
 8017cc0:	6961      	ldr	r1, [r4, #20]
 8017cc2:	1d18      	adds	r0, r3, #4
 8017cc4:	6030      	str	r0, [r6, #0]
 8017cc6:	062e      	lsls	r6, r5, #24
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	d501      	bpl.n	8017cd0 <_printf_i+0x1c0>
 8017ccc:	6019      	str	r1, [r3, #0]
 8017cce:	e002      	b.n	8017cd6 <_printf_i+0x1c6>
 8017cd0:	0668      	lsls	r0, r5, #25
 8017cd2:	d5fb      	bpl.n	8017ccc <_printf_i+0x1bc>
 8017cd4:	8019      	strh	r1, [r3, #0]
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	6123      	str	r3, [r4, #16]
 8017cda:	4616      	mov	r6, r2
 8017cdc:	e7bc      	b.n	8017c58 <_printf_i+0x148>
 8017cde:	6833      	ldr	r3, [r6, #0]
 8017ce0:	1d1a      	adds	r2, r3, #4
 8017ce2:	6032      	str	r2, [r6, #0]
 8017ce4:	681e      	ldr	r6, [r3, #0]
 8017ce6:	6862      	ldr	r2, [r4, #4]
 8017ce8:	2100      	movs	r1, #0
 8017cea:	4630      	mov	r0, r6
 8017cec:	f7e8 fa98 	bl	8000220 <memchr>
 8017cf0:	b108      	cbz	r0, 8017cf6 <_printf_i+0x1e6>
 8017cf2:	1b80      	subs	r0, r0, r6
 8017cf4:	6060      	str	r0, [r4, #4]
 8017cf6:	6863      	ldr	r3, [r4, #4]
 8017cf8:	6123      	str	r3, [r4, #16]
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d00:	e7aa      	b.n	8017c58 <_printf_i+0x148>
 8017d02:	6923      	ldr	r3, [r4, #16]
 8017d04:	4632      	mov	r2, r6
 8017d06:	4649      	mov	r1, r9
 8017d08:	4640      	mov	r0, r8
 8017d0a:	47d0      	blx	sl
 8017d0c:	3001      	adds	r0, #1
 8017d0e:	d0ad      	beq.n	8017c6c <_printf_i+0x15c>
 8017d10:	6823      	ldr	r3, [r4, #0]
 8017d12:	079b      	lsls	r3, r3, #30
 8017d14:	d413      	bmi.n	8017d3e <_printf_i+0x22e>
 8017d16:	68e0      	ldr	r0, [r4, #12]
 8017d18:	9b03      	ldr	r3, [sp, #12]
 8017d1a:	4298      	cmp	r0, r3
 8017d1c:	bfb8      	it	lt
 8017d1e:	4618      	movlt	r0, r3
 8017d20:	e7a6      	b.n	8017c70 <_printf_i+0x160>
 8017d22:	2301      	movs	r3, #1
 8017d24:	4632      	mov	r2, r6
 8017d26:	4649      	mov	r1, r9
 8017d28:	4640      	mov	r0, r8
 8017d2a:	47d0      	blx	sl
 8017d2c:	3001      	adds	r0, #1
 8017d2e:	d09d      	beq.n	8017c6c <_printf_i+0x15c>
 8017d30:	3501      	adds	r5, #1
 8017d32:	68e3      	ldr	r3, [r4, #12]
 8017d34:	9903      	ldr	r1, [sp, #12]
 8017d36:	1a5b      	subs	r3, r3, r1
 8017d38:	42ab      	cmp	r3, r5
 8017d3a:	dcf2      	bgt.n	8017d22 <_printf_i+0x212>
 8017d3c:	e7eb      	b.n	8017d16 <_printf_i+0x206>
 8017d3e:	2500      	movs	r5, #0
 8017d40:	f104 0619 	add.w	r6, r4, #25
 8017d44:	e7f5      	b.n	8017d32 <_printf_i+0x222>
 8017d46:	bf00      	nop
 8017d48:	08019311 	.word	0x08019311
 8017d4c:	08019322 	.word	0x08019322

08017d50 <__sflush_r>:
 8017d50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d58:	0716      	lsls	r6, r2, #28
 8017d5a:	4605      	mov	r5, r0
 8017d5c:	460c      	mov	r4, r1
 8017d5e:	d454      	bmi.n	8017e0a <__sflush_r+0xba>
 8017d60:	684b      	ldr	r3, [r1, #4]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	dc02      	bgt.n	8017d6c <__sflush_r+0x1c>
 8017d66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	dd48      	ble.n	8017dfe <__sflush_r+0xae>
 8017d6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d6e:	2e00      	cmp	r6, #0
 8017d70:	d045      	beq.n	8017dfe <__sflush_r+0xae>
 8017d72:	2300      	movs	r3, #0
 8017d74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017d78:	682f      	ldr	r7, [r5, #0]
 8017d7a:	6a21      	ldr	r1, [r4, #32]
 8017d7c:	602b      	str	r3, [r5, #0]
 8017d7e:	d030      	beq.n	8017de2 <__sflush_r+0x92>
 8017d80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017d82:	89a3      	ldrh	r3, [r4, #12]
 8017d84:	0759      	lsls	r1, r3, #29
 8017d86:	d505      	bpl.n	8017d94 <__sflush_r+0x44>
 8017d88:	6863      	ldr	r3, [r4, #4]
 8017d8a:	1ad2      	subs	r2, r2, r3
 8017d8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017d8e:	b10b      	cbz	r3, 8017d94 <__sflush_r+0x44>
 8017d90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017d92:	1ad2      	subs	r2, r2, r3
 8017d94:	2300      	movs	r3, #0
 8017d96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d98:	6a21      	ldr	r1, [r4, #32]
 8017d9a:	4628      	mov	r0, r5
 8017d9c:	47b0      	blx	r6
 8017d9e:	1c43      	adds	r3, r0, #1
 8017da0:	89a3      	ldrh	r3, [r4, #12]
 8017da2:	d106      	bne.n	8017db2 <__sflush_r+0x62>
 8017da4:	6829      	ldr	r1, [r5, #0]
 8017da6:	291d      	cmp	r1, #29
 8017da8:	d82b      	bhi.n	8017e02 <__sflush_r+0xb2>
 8017daa:	4a2a      	ldr	r2, [pc, #168]	@ (8017e54 <__sflush_r+0x104>)
 8017dac:	410a      	asrs	r2, r1
 8017dae:	07d6      	lsls	r6, r2, #31
 8017db0:	d427      	bmi.n	8017e02 <__sflush_r+0xb2>
 8017db2:	2200      	movs	r2, #0
 8017db4:	6062      	str	r2, [r4, #4]
 8017db6:	04d9      	lsls	r1, r3, #19
 8017db8:	6922      	ldr	r2, [r4, #16]
 8017dba:	6022      	str	r2, [r4, #0]
 8017dbc:	d504      	bpl.n	8017dc8 <__sflush_r+0x78>
 8017dbe:	1c42      	adds	r2, r0, #1
 8017dc0:	d101      	bne.n	8017dc6 <__sflush_r+0x76>
 8017dc2:	682b      	ldr	r3, [r5, #0]
 8017dc4:	b903      	cbnz	r3, 8017dc8 <__sflush_r+0x78>
 8017dc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8017dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017dca:	602f      	str	r7, [r5, #0]
 8017dcc:	b1b9      	cbz	r1, 8017dfe <__sflush_r+0xae>
 8017dce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017dd2:	4299      	cmp	r1, r3
 8017dd4:	d002      	beq.n	8017ddc <__sflush_r+0x8c>
 8017dd6:	4628      	mov	r0, r5
 8017dd8:	f7fe fbd2 	bl	8016580 <_free_r>
 8017ddc:	2300      	movs	r3, #0
 8017dde:	6363      	str	r3, [r4, #52]	@ 0x34
 8017de0:	e00d      	b.n	8017dfe <__sflush_r+0xae>
 8017de2:	2301      	movs	r3, #1
 8017de4:	4628      	mov	r0, r5
 8017de6:	47b0      	blx	r6
 8017de8:	4602      	mov	r2, r0
 8017dea:	1c50      	adds	r0, r2, #1
 8017dec:	d1c9      	bne.n	8017d82 <__sflush_r+0x32>
 8017dee:	682b      	ldr	r3, [r5, #0]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d0c6      	beq.n	8017d82 <__sflush_r+0x32>
 8017df4:	2b1d      	cmp	r3, #29
 8017df6:	d001      	beq.n	8017dfc <__sflush_r+0xac>
 8017df8:	2b16      	cmp	r3, #22
 8017dfa:	d11e      	bne.n	8017e3a <__sflush_r+0xea>
 8017dfc:	602f      	str	r7, [r5, #0]
 8017dfe:	2000      	movs	r0, #0
 8017e00:	e022      	b.n	8017e48 <__sflush_r+0xf8>
 8017e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e06:	b21b      	sxth	r3, r3
 8017e08:	e01b      	b.n	8017e42 <__sflush_r+0xf2>
 8017e0a:	690f      	ldr	r7, [r1, #16]
 8017e0c:	2f00      	cmp	r7, #0
 8017e0e:	d0f6      	beq.n	8017dfe <__sflush_r+0xae>
 8017e10:	0793      	lsls	r3, r2, #30
 8017e12:	680e      	ldr	r6, [r1, #0]
 8017e14:	bf08      	it	eq
 8017e16:	694b      	ldreq	r3, [r1, #20]
 8017e18:	600f      	str	r7, [r1, #0]
 8017e1a:	bf18      	it	ne
 8017e1c:	2300      	movne	r3, #0
 8017e1e:	eba6 0807 	sub.w	r8, r6, r7
 8017e22:	608b      	str	r3, [r1, #8]
 8017e24:	f1b8 0f00 	cmp.w	r8, #0
 8017e28:	dde9      	ble.n	8017dfe <__sflush_r+0xae>
 8017e2a:	6a21      	ldr	r1, [r4, #32]
 8017e2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017e2e:	4643      	mov	r3, r8
 8017e30:	463a      	mov	r2, r7
 8017e32:	4628      	mov	r0, r5
 8017e34:	47b0      	blx	r6
 8017e36:	2800      	cmp	r0, #0
 8017e38:	dc08      	bgt.n	8017e4c <__sflush_r+0xfc>
 8017e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e42:	81a3      	strh	r3, [r4, #12]
 8017e44:	f04f 30ff 	mov.w	r0, #4294967295
 8017e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e4c:	4407      	add	r7, r0
 8017e4e:	eba8 0800 	sub.w	r8, r8, r0
 8017e52:	e7e7      	b.n	8017e24 <__sflush_r+0xd4>
 8017e54:	dfbffffe 	.word	0xdfbffffe

08017e58 <_fflush_r>:
 8017e58:	b538      	push	{r3, r4, r5, lr}
 8017e5a:	690b      	ldr	r3, [r1, #16]
 8017e5c:	4605      	mov	r5, r0
 8017e5e:	460c      	mov	r4, r1
 8017e60:	b913      	cbnz	r3, 8017e68 <_fflush_r+0x10>
 8017e62:	2500      	movs	r5, #0
 8017e64:	4628      	mov	r0, r5
 8017e66:	bd38      	pop	{r3, r4, r5, pc}
 8017e68:	b118      	cbz	r0, 8017e72 <_fflush_r+0x1a>
 8017e6a:	6a03      	ldr	r3, [r0, #32]
 8017e6c:	b90b      	cbnz	r3, 8017e72 <_fflush_r+0x1a>
 8017e6e:	f7fe f9d3 	bl	8016218 <__sinit>
 8017e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d0f3      	beq.n	8017e62 <_fflush_r+0xa>
 8017e7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017e7c:	07d0      	lsls	r0, r2, #31
 8017e7e:	d404      	bmi.n	8017e8a <_fflush_r+0x32>
 8017e80:	0599      	lsls	r1, r3, #22
 8017e82:	d402      	bmi.n	8017e8a <_fflush_r+0x32>
 8017e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e86:	f7fe fb60 	bl	801654a <__retarget_lock_acquire_recursive>
 8017e8a:	4628      	mov	r0, r5
 8017e8c:	4621      	mov	r1, r4
 8017e8e:	f7ff ff5f 	bl	8017d50 <__sflush_r>
 8017e92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017e94:	07da      	lsls	r2, r3, #31
 8017e96:	4605      	mov	r5, r0
 8017e98:	d4e4      	bmi.n	8017e64 <_fflush_r+0xc>
 8017e9a:	89a3      	ldrh	r3, [r4, #12]
 8017e9c:	059b      	lsls	r3, r3, #22
 8017e9e:	d4e1      	bmi.n	8017e64 <_fflush_r+0xc>
 8017ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ea2:	f7fe fb53 	bl	801654c <__retarget_lock_release_recursive>
 8017ea6:	e7dd      	b.n	8017e64 <_fflush_r+0xc>

08017ea8 <_sbrk_r>:
 8017ea8:	b538      	push	{r3, r4, r5, lr}
 8017eaa:	4d06      	ldr	r5, [pc, #24]	@ (8017ec4 <_sbrk_r+0x1c>)
 8017eac:	2300      	movs	r3, #0
 8017eae:	4604      	mov	r4, r0
 8017eb0:	4608      	mov	r0, r1
 8017eb2:	602b      	str	r3, [r5, #0]
 8017eb4:	f7ef f816 	bl	8006ee4 <_sbrk>
 8017eb8:	1c43      	adds	r3, r0, #1
 8017eba:	d102      	bne.n	8017ec2 <_sbrk_r+0x1a>
 8017ebc:	682b      	ldr	r3, [r5, #0]
 8017ebe:	b103      	cbz	r3, 8017ec2 <_sbrk_r+0x1a>
 8017ec0:	6023      	str	r3, [r4, #0]
 8017ec2:	bd38      	pop	{r3, r4, r5, pc}
 8017ec4:	20014db0 	.word	0x20014db0

08017ec8 <__assert_func>:
 8017ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017eca:	4614      	mov	r4, r2
 8017ecc:	461a      	mov	r2, r3
 8017ece:	4b09      	ldr	r3, [pc, #36]	@ (8017ef4 <__assert_func+0x2c>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	4605      	mov	r5, r0
 8017ed4:	68d8      	ldr	r0, [r3, #12]
 8017ed6:	b954      	cbnz	r4, 8017eee <__assert_func+0x26>
 8017ed8:	4b07      	ldr	r3, [pc, #28]	@ (8017ef8 <__assert_func+0x30>)
 8017eda:	461c      	mov	r4, r3
 8017edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017ee0:	9100      	str	r1, [sp, #0]
 8017ee2:	462b      	mov	r3, r5
 8017ee4:	4905      	ldr	r1, [pc, #20]	@ (8017efc <__assert_func+0x34>)
 8017ee6:	f000 f857 	bl	8017f98 <fiprintf>
 8017eea:	f000 f867 	bl	8017fbc <abort>
 8017eee:	4b04      	ldr	r3, [pc, #16]	@ (8017f00 <__assert_func+0x38>)
 8017ef0:	e7f4      	b.n	8017edc <__assert_func+0x14>
 8017ef2:	bf00      	nop
 8017ef4:	200001f4 	.word	0x200001f4
 8017ef8:	0801936e 	.word	0x0801936e
 8017efc:	08019340 	.word	0x08019340
 8017f00:	08019333 	.word	0x08019333

08017f04 <_calloc_r>:
 8017f04:	b570      	push	{r4, r5, r6, lr}
 8017f06:	fba1 5402 	umull	r5, r4, r1, r2
 8017f0a:	b93c      	cbnz	r4, 8017f1c <_calloc_r+0x18>
 8017f0c:	4629      	mov	r1, r5
 8017f0e:	f7fe fedd 	bl	8016ccc <_malloc_r>
 8017f12:	4606      	mov	r6, r0
 8017f14:	b928      	cbnz	r0, 8017f22 <_calloc_r+0x1e>
 8017f16:	2600      	movs	r6, #0
 8017f18:	4630      	mov	r0, r6
 8017f1a:	bd70      	pop	{r4, r5, r6, pc}
 8017f1c:	220c      	movs	r2, #12
 8017f1e:	6002      	str	r2, [r0, #0]
 8017f20:	e7f9      	b.n	8017f16 <_calloc_r+0x12>
 8017f22:	462a      	mov	r2, r5
 8017f24:	4621      	mov	r1, r4
 8017f26:	f7fe fa3e 	bl	80163a6 <memset>
 8017f2a:	e7f5      	b.n	8017f18 <_calloc_r+0x14>

08017f2c <malloc>:
 8017f2c:	4b02      	ldr	r3, [pc, #8]	@ (8017f38 <malloc+0xc>)
 8017f2e:	4601      	mov	r1, r0
 8017f30:	6818      	ldr	r0, [r3, #0]
 8017f32:	f7fe becb 	b.w	8016ccc <_malloc_r>
 8017f36:	bf00      	nop
 8017f38:	200001f4 	.word	0x200001f4

08017f3c <_realloc_r>:
 8017f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f40:	4680      	mov	r8, r0
 8017f42:	4615      	mov	r5, r2
 8017f44:	460c      	mov	r4, r1
 8017f46:	b921      	cbnz	r1, 8017f52 <_realloc_r+0x16>
 8017f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f4c:	4611      	mov	r1, r2
 8017f4e:	f7fe bebd 	b.w	8016ccc <_malloc_r>
 8017f52:	b92a      	cbnz	r2, 8017f60 <_realloc_r+0x24>
 8017f54:	f7fe fb14 	bl	8016580 <_free_r>
 8017f58:	2400      	movs	r4, #0
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f60:	f000 f833 	bl	8017fca <_malloc_usable_size_r>
 8017f64:	4285      	cmp	r5, r0
 8017f66:	4606      	mov	r6, r0
 8017f68:	d802      	bhi.n	8017f70 <_realloc_r+0x34>
 8017f6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017f6e:	d8f4      	bhi.n	8017f5a <_realloc_r+0x1e>
 8017f70:	4629      	mov	r1, r5
 8017f72:	4640      	mov	r0, r8
 8017f74:	f7fe feaa 	bl	8016ccc <_malloc_r>
 8017f78:	4607      	mov	r7, r0
 8017f7a:	2800      	cmp	r0, #0
 8017f7c:	d0ec      	beq.n	8017f58 <_realloc_r+0x1c>
 8017f7e:	42b5      	cmp	r5, r6
 8017f80:	462a      	mov	r2, r5
 8017f82:	4621      	mov	r1, r4
 8017f84:	bf28      	it	cs
 8017f86:	4632      	movcs	r2, r6
 8017f88:	f7fe fae1 	bl	801654e <memcpy>
 8017f8c:	4621      	mov	r1, r4
 8017f8e:	4640      	mov	r0, r8
 8017f90:	f7fe faf6 	bl	8016580 <_free_r>
 8017f94:	463c      	mov	r4, r7
 8017f96:	e7e0      	b.n	8017f5a <_realloc_r+0x1e>

08017f98 <fiprintf>:
 8017f98:	b40e      	push	{r1, r2, r3}
 8017f9a:	b503      	push	{r0, r1, lr}
 8017f9c:	4601      	mov	r1, r0
 8017f9e:	ab03      	add	r3, sp, #12
 8017fa0:	4805      	ldr	r0, [pc, #20]	@ (8017fb8 <fiprintf+0x20>)
 8017fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fa6:	6800      	ldr	r0, [r0, #0]
 8017fa8:	9301      	str	r3, [sp, #4]
 8017faa:	f000 f83f 	bl	801802c <_vfiprintf_r>
 8017fae:	b002      	add	sp, #8
 8017fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017fb4:	b003      	add	sp, #12
 8017fb6:	4770      	bx	lr
 8017fb8:	200001f4 	.word	0x200001f4

08017fbc <abort>:
 8017fbc:	b508      	push	{r3, lr}
 8017fbe:	2006      	movs	r0, #6
 8017fc0:	f000 fa08 	bl	80183d4 <raise>
 8017fc4:	2001      	movs	r0, #1
 8017fc6:	f7ee ff15 	bl	8006df4 <_exit>

08017fca <_malloc_usable_size_r>:
 8017fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fce:	1f18      	subs	r0, r3, #4
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	bfbc      	itt	lt
 8017fd4:	580b      	ldrlt	r3, [r1, r0]
 8017fd6:	18c0      	addlt	r0, r0, r3
 8017fd8:	4770      	bx	lr

08017fda <__sfputc_r>:
 8017fda:	6893      	ldr	r3, [r2, #8]
 8017fdc:	3b01      	subs	r3, #1
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	b410      	push	{r4}
 8017fe2:	6093      	str	r3, [r2, #8]
 8017fe4:	da08      	bge.n	8017ff8 <__sfputc_r+0x1e>
 8017fe6:	6994      	ldr	r4, [r2, #24]
 8017fe8:	42a3      	cmp	r3, r4
 8017fea:	db01      	blt.n	8017ff0 <__sfputc_r+0x16>
 8017fec:	290a      	cmp	r1, #10
 8017fee:	d103      	bne.n	8017ff8 <__sfputc_r+0x1e>
 8017ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ff4:	f000 b932 	b.w	801825c <__swbuf_r>
 8017ff8:	6813      	ldr	r3, [r2, #0]
 8017ffa:	1c58      	adds	r0, r3, #1
 8017ffc:	6010      	str	r0, [r2, #0]
 8017ffe:	7019      	strb	r1, [r3, #0]
 8018000:	4608      	mov	r0, r1
 8018002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018006:	4770      	bx	lr

08018008 <__sfputs_r>:
 8018008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801800a:	4606      	mov	r6, r0
 801800c:	460f      	mov	r7, r1
 801800e:	4614      	mov	r4, r2
 8018010:	18d5      	adds	r5, r2, r3
 8018012:	42ac      	cmp	r4, r5
 8018014:	d101      	bne.n	801801a <__sfputs_r+0x12>
 8018016:	2000      	movs	r0, #0
 8018018:	e007      	b.n	801802a <__sfputs_r+0x22>
 801801a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801801e:	463a      	mov	r2, r7
 8018020:	4630      	mov	r0, r6
 8018022:	f7ff ffda 	bl	8017fda <__sfputc_r>
 8018026:	1c43      	adds	r3, r0, #1
 8018028:	d1f3      	bne.n	8018012 <__sfputs_r+0xa>
 801802a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801802c <_vfiprintf_r>:
 801802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018030:	460d      	mov	r5, r1
 8018032:	b09d      	sub	sp, #116	@ 0x74
 8018034:	4614      	mov	r4, r2
 8018036:	4698      	mov	r8, r3
 8018038:	4606      	mov	r6, r0
 801803a:	b118      	cbz	r0, 8018044 <_vfiprintf_r+0x18>
 801803c:	6a03      	ldr	r3, [r0, #32]
 801803e:	b90b      	cbnz	r3, 8018044 <_vfiprintf_r+0x18>
 8018040:	f7fe f8ea 	bl	8016218 <__sinit>
 8018044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018046:	07d9      	lsls	r1, r3, #31
 8018048:	d405      	bmi.n	8018056 <_vfiprintf_r+0x2a>
 801804a:	89ab      	ldrh	r3, [r5, #12]
 801804c:	059a      	lsls	r2, r3, #22
 801804e:	d402      	bmi.n	8018056 <_vfiprintf_r+0x2a>
 8018050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018052:	f7fe fa7a 	bl	801654a <__retarget_lock_acquire_recursive>
 8018056:	89ab      	ldrh	r3, [r5, #12]
 8018058:	071b      	lsls	r3, r3, #28
 801805a:	d501      	bpl.n	8018060 <_vfiprintf_r+0x34>
 801805c:	692b      	ldr	r3, [r5, #16]
 801805e:	b99b      	cbnz	r3, 8018088 <_vfiprintf_r+0x5c>
 8018060:	4629      	mov	r1, r5
 8018062:	4630      	mov	r0, r6
 8018064:	f000 f938 	bl	80182d8 <__swsetup_r>
 8018068:	b170      	cbz	r0, 8018088 <_vfiprintf_r+0x5c>
 801806a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801806c:	07dc      	lsls	r4, r3, #31
 801806e:	d504      	bpl.n	801807a <_vfiprintf_r+0x4e>
 8018070:	f04f 30ff 	mov.w	r0, #4294967295
 8018074:	b01d      	add	sp, #116	@ 0x74
 8018076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801807a:	89ab      	ldrh	r3, [r5, #12]
 801807c:	0598      	lsls	r0, r3, #22
 801807e:	d4f7      	bmi.n	8018070 <_vfiprintf_r+0x44>
 8018080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018082:	f7fe fa63 	bl	801654c <__retarget_lock_release_recursive>
 8018086:	e7f3      	b.n	8018070 <_vfiprintf_r+0x44>
 8018088:	2300      	movs	r3, #0
 801808a:	9309      	str	r3, [sp, #36]	@ 0x24
 801808c:	2320      	movs	r3, #32
 801808e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018092:	f8cd 800c 	str.w	r8, [sp, #12]
 8018096:	2330      	movs	r3, #48	@ 0x30
 8018098:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018248 <_vfiprintf_r+0x21c>
 801809c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80180a0:	f04f 0901 	mov.w	r9, #1
 80180a4:	4623      	mov	r3, r4
 80180a6:	469a      	mov	sl, r3
 80180a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180ac:	b10a      	cbz	r2, 80180b2 <_vfiprintf_r+0x86>
 80180ae:	2a25      	cmp	r2, #37	@ 0x25
 80180b0:	d1f9      	bne.n	80180a6 <_vfiprintf_r+0x7a>
 80180b2:	ebba 0b04 	subs.w	fp, sl, r4
 80180b6:	d00b      	beq.n	80180d0 <_vfiprintf_r+0xa4>
 80180b8:	465b      	mov	r3, fp
 80180ba:	4622      	mov	r2, r4
 80180bc:	4629      	mov	r1, r5
 80180be:	4630      	mov	r0, r6
 80180c0:	f7ff ffa2 	bl	8018008 <__sfputs_r>
 80180c4:	3001      	adds	r0, #1
 80180c6:	f000 80a7 	beq.w	8018218 <_vfiprintf_r+0x1ec>
 80180ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80180cc:	445a      	add	r2, fp
 80180ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80180d0:	f89a 3000 	ldrb.w	r3, [sl]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	f000 809f 	beq.w	8018218 <_vfiprintf_r+0x1ec>
 80180da:	2300      	movs	r3, #0
 80180dc:	f04f 32ff 	mov.w	r2, #4294967295
 80180e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180e4:	f10a 0a01 	add.w	sl, sl, #1
 80180e8:	9304      	str	r3, [sp, #16]
 80180ea:	9307      	str	r3, [sp, #28]
 80180ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80180f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80180f2:	4654      	mov	r4, sl
 80180f4:	2205      	movs	r2, #5
 80180f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180fa:	4853      	ldr	r0, [pc, #332]	@ (8018248 <_vfiprintf_r+0x21c>)
 80180fc:	f7e8 f890 	bl	8000220 <memchr>
 8018100:	9a04      	ldr	r2, [sp, #16]
 8018102:	b9d8      	cbnz	r0, 801813c <_vfiprintf_r+0x110>
 8018104:	06d1      	lsls	r1, r2, #27
 8018106:	bf44      	itt	mi
 8018108:	2320      	movmi	r3, #32
 801810a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801810e:	0713      	lsls	r3, r2, #28
 8018110:	bf44      	itt	mi
 8018112:	232b      	movmi	r3, #43	@ 0x2b
 8018114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018118:	f89a 3000 	ldrb.w	r3, [sl]
 801811c:	2b2a      	cmp	r3, #42	@ 0x2a
 801811e:	d015      	beq.n	801814c <_vfiprintf_r+0x120>
 8018120:	9a07      	ldr	r2, [sp, #28]
 8018122:	4654      	mov	r4, sl
 8018124:	2000      	movs	r0, #0
 8018126:	f04f 0c0a 	mov.w	ip, #10
 801812a:	4621      	mov	r1, r4
 801812c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018130:	3b30      	subs	r3, #48	@ 0x30
 8018132:	2b09      	cmp	r3, #9
 8018134:	d94b      	bls.n	80181ce <_vfiprintf_r+0x1a2>
 8018136:	b1b0      	cbz	r0, 8018166 <_vfiprintf_r+0x13a>
 8018138:	9207      	str	r2, [sp, #28]
 801813a:	e014      	b.n	8018166 <_vfiprintf_r+0x13a>
 801813c:	eba0 0308 	sub.w	r3, r0, r8
 8018140:	fa09 f303 	lsl.w	r3, r9, r3
 8018144:	4313      	orrs	r3, r2
 8018146:	9304      	str	r3, [sp, #16]
 8018148:	46a2      	mov	sl, r4
 801814a:	e7d2      	b.n	80180f2 <_vfiprintf_r+0xc6>
 801814c:	9b03      	ldr	r3, [sp, #12]
 801814e:	1d19      	adds	r1, r3, #4
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	9103      	str	r1, [sp, #12]
 8018154:	2b00      	cmp	r3, #0
 8018156:	bfbb      	ittet	lt
 8018158:	425b      	neglt	r3, r3
 801815a:	f042 0202 	orrlt.w	r2, r2, #2
 801815e:	9307      	strge	r3, [sp, #28]
 8018160:	9307      	strlt	r3, [sp, #28]
 8018162:	bfb8      	it	lt
 8018164:	9204      	strlt	r2, [sp, #16]
 8018166:	7823      	ldrb	r3, [r4, #0]
 8018168:	2b2e      	cmp	r3, #46	@ 0x2e
 801816a:	d10a      	bne.n	8018182 <_vfiprintf_r+0x156>
 801816c:	7863      	ldrb	r3, [r4, #1]
 801816e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018170:	d132      	bne.n	80181d8 <_vfiprintf_r+0x1ac>
 8018172:	9b03      	ldr	r3, [sp, #12]
 8018174:	1d1a      	adds	r2, r3, #4
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	9203      	str	r2, [sp, #12]
 801817a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801817e:	3402      	adds	r4, #2
 8018180:	9305      	str	r3, [sp, #20]
 8018182:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018258 <_vfiprintf_r+0x22c>
 8018186:	7821      	ldrb	r1, [r4, #0]
 8018188:	2203      	movs	r2, #3
 801818a:	4650      	mov	r0, sl
 801818c:	f7e8 f848 	bl	8000220 <memchr>
 8018190:	b138      	cbz	r0, 80181a2 <_vfiprintf_r+0x176>
 8018192:	9b04      	ldr	r3, [sp, #16]
 8018194:	eba0 000a 	sub.w	r0, r0, sl
 8018198:	2240      	movs	r2, #64	@ 0x40
 801819a:	4082      	lsls	r2, r0
 801819c:	4313      	orrs	r3, r2
 801819e:	3401      	adds	r4, #1
 80181a0:	9304      	str	r3, [sp, #16]
 80181a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181a6:	4829      	ldr	r0, [pc, #164]	@ (801824c <_vfiprintf_r+0x220>)
 80181a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80181ac:	2206      	movs	r2, #6
 80181ae:	f7e8 f837 	bl	8000220 <memchr>
 80181b2:	2800      	cmp	r0, #0
 80181b4:	d03f      	beq.n	8018236 <_vfiprintf_r+0x20a>
 80181b6:	4b26      	ldr	r3, [pc, #152]	@ (8018250 <_vfiprintf_r+0x224>)
 80181b8:	bb1b      	cbnz	r3, 8018202 <_vfiprintf_r+0x1d6>
 80181ba:	9b03      	ldr	r3, [sp, #12]
 80181bc:	3307      	adds	r3, #7
 80181be:	f023 0307 	bic.w	r3, r3, #7
 80181c2:	3308      	adds	r3, #8
 80181c4:	9303      	str	r3, [sp, #12]
 80181c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181c8:	443b      	add	r3, r7
 80181ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80181cc:	e76a      	b.n	80180a4 <_vfiprintf_r+0x78>
 80181ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80181d2:	460c      	mov	r4, r1
 80181d4:	2001      	movs	r0, #1
 80181d6:	e7a8      	b.n	801812a <_vfiprintf_r+0xfe>
 80181d8:	2300      	movs	r3, #0
 80181da:	3401      	adds	r4, #1
 80181dc:	9305      	str	r3, [sp, #20]
 80181de:	4619      	mov	r1, r3
 80181e0:	f04f 0c0a 	mov.w	ip, #10
 80181e4:	4620      	mov	r0, r4
 80181e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181ea:	3a30      	subs	r2, #48	@ 0x30
 80181ec:	2a09      	cmp	r2, #9
 80181ee:	d903      	bls.n	80181f8 <_vfiprintf_r+0x1cc>
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d0c6      	beq.n	8018182 <_vfiprintf_r+0x156>
 80181f4:	9105      	str	r1, [sp, #20]
 80181f6:	e7c4      	b.n	8018182 <_vfiprintf_r+0x156>
 80181f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80181fc:	4604      	mov	r4, r0
 80181fe:	2301      	movs	r3, #1
 8018200:	e7f0      	b.n	80181e4 <_vfiprintf_r+0x1b8>
 8018202:	ab03      	add	r3, sp, #12
 8018204:	9300      	str	r3, [sp, #0]
 8018206:	462a      	mov	r2, r5
 8018208:	4b12      	ldr	r3, [pc, #72]	@ (8018254 <_vfiprintf_r+0x228>)
 801820a:	a904      	add	r1, sp, #16
 801820c:	4630      	mov	r0, r6
 801820e:	f3af 8000 	nop.w
 8018212:	4607      	mov	r7, r0
 8018214:	1c78      	adds	r0, r7, #1
 8018216:	d1d6      	bne.n	80181c6 <_vfiprintf_r+0x19a>
 8018218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801821a:	07d9      	lsls	r1, r3, #31
 801821c:	d405      	bmi.n	801822a <_vfiprintf_r+0x1fe>
 801821e:	89ab      	ldrh	r3, [r5, #12]
 8018220:	059a      	lsls	r2, r3, #22
 8018222:	d402      	bmi.n	801822a <_vfiprintf_r+0x1fe>
 8018224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018226:	f7fe f991 	bl	801654c <__retarget_lock_release_recursive>
 801822a:	89ab      	ldrh	r3, [r5, #12]
 801822c:	065b      	lsls	r3, r3, #25
 801822e:	f53f af1f 	bmi.w	8018070 <_vfiprintf_r+0x44>
 8018232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018234:	e71e      	b.n	8018074 <_vfiprintf_r+0x48>
 8018236:	ab03      	add	r3, sp, #12
 8018238:	9300      	str	r3, [sp, #0]
 801823a:	462a      	mov	r2, r5
 801823c:	4b05      	ldr	r3, [pc, #20]	@ (8018254 <_vfiprintf_r+0x228>)
 801823e:	a904      	add	r1, sp, #16
 8018240:	4630      	mov	r0, r6
 8018242:	f7ff fc65 	bl	8017b10 <_printf_i>
 8018246:	e7e4      	b.n	8018212 <_vfiprintf_r+0x1e6>
 8018248:	08019300 	.word	0x08019300
 801824c:	0801930a 	.word	0x0801930a
 8018250:	00000000 	.word	0x00000000
 8018254:	08018009 	.word	0x08018009
 8018258:	08019306 	.word	0x08019306

0801825c <__swbuf_r>:
 801825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801825e:	460e      	mov	r6, r1
 8018260:	4614      	mov	r4, r2
 8018262:	4605      	mov	r5, r0
 8018264:	b118      	cbz	r0, 801826e <__swbuf_r+0x12>
 8018266:	6a03      	ldr	r3, [r0, #32]
 8018268:	b90b      	cbnz	r3, 801826e <__swbuf_r+0x12>
 801826a:	f7fd ffd5 	bl	8016218 <__sinit>
 801826e:	69a3      	ldr	r3, [r4, #24]
 8018270:	60a3      	str	r3, [r4, #8]
 8018272:	89a3      	ldrh	r3, [r4, #12]
 8018274:	071a      	lsls	r2, r3, #28
 8018276:	d501      	bpl.n	801827c <__swbuf_r+0x20>
 8018278:	6923      	ldr	r3, [r4, #16]
 801827a:	b943      	cbnz	r3, 801828e <__swbuf_r+0x32>
 801827c:	4621      	mov	r1, r4
 801827e:	4628      	mov	r0, r5
 8018280:	f000 f82a 	bl	80182d8 <__swsetup_r>
 8018284:	b118      	cbz	r0, 801828e <__swbuf_r+0x32>
 8018286:	f04f 37ff 	mov.w	r7, #4294967295
 801828a:	4638      	mov	r0, r7
 801828c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801828e:	6823      	ldr	r3, [r4, #0]
 8018290:	6922      	ldr	r2, [r4, #16]
 8018292:	1a98      	subs	r0, r3, r2
 8018294:	6963      	ldr	r3, [r4, #20]
 8018296:	b2f6      	uxtb	r6, r6
 8018298:	4283      	cmp	r3, r0
 801829a:	4637      	mov	r7, r6
 801829c:	dc05      	bgt.n	80182aa <__swbuf_r+0x4e>
 801829e:	4621      	mov	r1, r4
 80182a0:	4628      	mov	r0, r5
 80182a2:	f7ff fdd9 	bl	8017e58 <_fflush_r>
 80182a6:	2800      	cmp	r0, #0
 80182a8:	d1ed      	bne.n	8018286 <__swbuf_r+0x2a>
 80182aa:	68a3      	ldr	r3, [r4, #8]
 80182ac:	3b01      	subs	r3, #1
 80182ae:	60a3      	str	r3, [r4, #8]
 80182b0:	6823      	ldr	r3, [r4, #0]
 80182b2:	1c5a      	adds	r2, r3, #1
 80182b4:	6022      	str	r2, [r4, #0]
 80182b6:	701e      	strb	r6, [r3, #0]
 80182b8:	6962      	ldr	r2, [r4, #20]
 80182ba:	1c43      	adds	r3, r0, #1
 80182bc:	429a      	cmp	r2, r3
 80182be:	d004      	beq.n	80182ca <__swbuf_r+0x6e>
 80182c0:	89a3      	ldrh	r3, [r4, #12]
 80182c2:	07db      	lsls	r3, r3, #31
 80182c4:	d5e1      	bpl.n	801828a <__swbuf_r+0x2e>
 80182c6:	2e0a      	cmp	r6, #10
 80182c8:	d1df      	bne.n	801828a <__swbuf_r+0x2e>
 80182ca:	4621      	mov	r1, r4
 80182cc:	4628      	mov	r0, r5
 80182ce:	f7ff fdc3 	bl	8017e58 <_fflush_r>
 80182d2:	2800      	cmp	r0, #0
 80182d4:	d0d9      	beq.n	801828a <__swbuf_r+0x2e>
 80182d6:	e7d6      	b.n	8018286 <__swbuf_r+0x2a>

080182d8 <__swsetup_r>:
 80182d8:	b538      	push	{r3, r4, r5, lr}
 80182da:	4b29      	ldr	r3, [pc, #164]	@ (8018380 <__swsetup_r+0xa8>)
 80182dc:	4605      	mov	r5, r0
 80182de:	6818      	ldr	r0, [r3, #0]
 80182e0:	460c      	mov	r4, r1
 80182e2:	b118      	cbz	r0, 80182ec <__swsetup_r+0x14>
 80182e4:	6a03      	ldr	r3, [r0, #32]
 80182e6:	b90b      	cbnz	r3, 80182ec <__swsetup_r+0x14>
 80182e8:	f7fd ff96 	bl	8016218 <__sinit>
 80182ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182f0:	0719      	lsls	r1, r3, #28
 80182f2:	d422      	bmi.n	801833a <__swsetup_r+0x62>
 80182f4:	06da      	lsls	r2, r3, #27
 80182f6:	d407      	bmi.n	8018308 <__swsetup_r+0x30>
 80182f8:	2209      	movs	r2, #9
 80182fa:	602a      	str	r2, [r5, #0]
 80182fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018300:	81a3      	strh	r3, [r4, #12]
 8018302:	f04f 30ff 	mov.w	r0, #4294967295
 8018306:	e033      	b.n	8018370 <__swsetup_r+0x98>
 8018308:	0758      	lsls	r0, r3, #29
 801830a:	d512      	bpl.n	8018332 <__swsetup_r+0x5a>
 801830c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801830e:	b141      	cbz	r1, 8018322 <__swsetup_r+0x4a>
 8018310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018314:	4299      	cmp	r1, r3
 8018316:	d002      	beq.n	801831e <__swsetup_r+0x46>
 8018318:	4628      	mov	r0, r5
 801831a:	f7fe f931 	bl	8016580 <_free_r>
 801831e:	2300      	movs	r3, #0
 8018320:	6363      	str	r3, [r4, #52]	@ 0x34
 8018322:	89a3      	ldrh	r3, [r4, #12]
 8018324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018328:	81a3      	strh	r3, [r4, #12]
 801832a:	2300      	movs	r3, #0
 801832c:	6063      	str	r3, [r4, #4]
 801832e:	6923      	ldr	r3, [r4, #16]
 8018330:	6023      	str	r3, [r4, #0]
 8018332:	89a3      	ldrh	r3, [r4, #12]
 8018334:	f043 0308 	orr.w	r3, r3, #8
 8018338:	81a3      	strh	r3, [r4, #12]
 801833a:	6923      	ldr	r3, [r4, #16]
 801833c:	b94b      	cbnz	r3, 8018352 <__swsetup_r+0x7a>
 801833e:	89a3      	ldrh	r3, [r4, #12]
 8018340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018348:	d003      	beq.n	8018352 <__swsetup_r+0x7a>
 801834a:	4621      	mov	r1, r4
 801834c:	4628      	mov	r0, r5
 801834e:	f000 f883 	bl	8018458 <__smakebuf_r>
 8018352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018356:	f013 0201 	ands.w	r2, r3, #1
 801835a:	d00a      	beq.n	8018372 <__swsetup_r+0x9a>
 801835c:	2200      	movs	r2, #0
 801835e:	60a2      	str	r2, [r4, #8]
 8018360:	6962      	ldr	r2, [r4, #20]
 8018362:	4252      	negs	r2, r2
 8018364:	61a2      	str	r2, [r4, #24]
 8018366:	6922      	ldr	r2, [r4, #16]
 8018368:	b942      	cbnz	r2, 801837c <__swsetup_r+0xa4>
 801836a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801836e:	d1c5      	bne.n	80182fc <__swsetup_r+0x24>
 8018370:	bd38      	pop	{r3, r4, r5, pc}
 8018372:	0799      	lsls	r1, r3, #30
 8018374:	bf58      	it	pl
 8018376:	6962      	ldrpl	r2, [r4, #20]
 8018378:	60a2      	str	r2, [r4, #8]
 801837a:	e7f4      	b.n	8018366 <__swsetup_r+0x8e>
 801837c:	2000      	movs	r0, #0
 801837e:	e7f7      	b.n	8018370 <__swsetup_r+0x98>
 8018380:	200001f4 	.word	0x200001f4

08018384 <_raise_r>:
 8018384:	291f      	cmp	r1, #31
 8018386:	b538      	push	{r3, r4, r5, lr}
 8018388:	4605      	mov	r5, r0
 801838a:	460c      	mov	r4, r1
 801838c:	d904      	bls.n	8018398 <_raise_r+0x14>
 801838e:	2316      	movs	r3, #22
 8018390:	6003      	str	r3, [r0, #0]
 8018392:	f04f 30ff 	mov.w	r0, #4294967295
 8018396:	bd38      	pop	{r3, r4, r5, pc}
 8018398:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801839a:	b112      	cbz	r2, 80183a2 <_raise_r+0x1e>
 801839c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80183a0:	b94b      	cbnz	r3, 80183b6 <_raise_r+0x32>
 80183a2:	4628      	mov	r0, r5
 80183a4:	f000 f830 	bl	8018408 <_getpid_r>
 80183a8:	4622      	mov	r2, r4
 80183aa:	4601      	mov	r1, r0
 80183ac:	4628      	mov	r0, r5
 80183ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183b2:	f000 b817 	b.w	80183e4 <_kill_r>
 80183b6:	2b01      	cmp	r3, #1
 80183b8:	d00a      	beq.n	80183d0 <_raise_r+0x4c>
 80183ba:	1c59      	adds	r1, r3, #1
 80183bc:	d103      	bne.n	80183c6 <_raise_r+0x42>
 80183be:	2316      	movs	r3, #22
 80183c0:	6003      	str	r3, [r0, #0]
 80183c2:	2001      	movs	r0, #1
 80183c4:	e7e7      	b.n	8018396 <_raise_r+0x12>
 80183c6:	2100      	movs	r1, #0
 80183c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80183cc:	4620      	mov	r0, r4
 80183ce:	4798      	blx	r3
 80183d0:	2000      	movs	r0, #0
 80183d2:	e7e0      	b.n	8018396 <_raise_r+0x12>

080183d4 <raise>:
 80183d4:	4b02      	ldr	r3, [pc, #8]	@ (80183e0 <raise+0xc>)
 80183d6:	4601      	mov	r1, r0
 80183d8:	6818      	ldr	r0, [r3, #0]
 80183da:	f7ff bfd3 	b.w	8018384 <_raise_r>
 80183de:	bf00      	nop
 80183e0:	200001f4 	.word	0x200001f4

080183e4 <_kill_r>:
 80183e4:	b538      	push	{r3, r4, r5, lr}
 80183e6:	4d07      	ldr	r5, [pc, #28]	@ (8018404 <_kill_r+0x20>)
 80183e8:	2300      	movs	r3, #0
 80183ea:	4604      	mov	r4, r0
 80183ec:	4608      	mov	r0, r1
 80183ee:	4611      	mov	r1, r2
 80183f0:	602b      	str	r3, [r5, #0]
 80183f2:	f7ee fcef 	bl	8006dd4 <_kill>
 80183f6:	1c43      	adds	r3, r0, #1
 80183f8:	d102      	bne.n	8018400 <_kill_r+0x1c>
 80183fa:	682b      	ldr	r3, [r5, #0]
 80183fc:	b103      	cbz	r3, 8018400 <_kill_r+0x1c>
 80183fe:	6023      	str	r3, [r4, #0]
 8018400:	bd38      	pop	{r3, r4, r5, pc}
 8018402:	bf00      	nop
 8018404:	20014db0 	.word	0x20014db0

08018408 <_getpid_r>:
 8018408:	f7ee bcdc 	b.w	8006dc4 <_getpid>

0801840c <__swhatbuf_r>:
 801840c:	b570      	push	{r4, r5, r6, lr}
 801840e:	460c      	mov	r4, r1
 8018410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018414:	2900      	cmp	r1, #0
 8018416:	b096      	sub	sp, #88	@ 0x58
 8018418:	4615      	mov	r5, r2
 801841a:	461e      	mov	r6, r3
 801841c:	da0d      	bge.n	801843a <__swhatbuf_r+0x2e>
 801841e:	89a3      	ldrh	r3, [r4, #12]
 8018420:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018424:	f04f 0100 	mov.w	r1, #0
 8018428:	bf14      	ite	ne
 801842a:	2340      	movne	r3, #64	@ 0x40
 801842c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018430:	2000      	movs	r0, #0
 8018432:	6031      	str	r1, [r6, #0]
 8018434:	602b      	str	r3, [r5, #0]
 8018436:	b016      	add	sp, #88	@ 0x58
 8018438:	bd70      	pop	{r4, r5, r6, pc}
 801843a:	466a      	mov	r2, sp
 801843c:	f000 f848 	bl	80184d0 <_fstat_r>
 8018440:	2800      	cmp	r0, #0
 8018442:	dbec      	blt.n	801841e <__swhatbuf_r+0x12>
 8018444:	9901      	ldr	r1, [sp, #4]
 8018446:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801844a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801844e:	4259      	negs	r1, r3
 8018450:	4159      	adcs	r1, r3
 8018452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018456:	e7eb      	b.n	8018430 <__swhatbuf_r+0x24>

08018458 <__smakebuf_r>:
 8018458:	898b      	ldrh	r3, [r1, #12]
 801845a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801845c:	079d      	lsls	r5, r3, #30
 801845e:	4606      	mov	r6, r0
 8018460:	460c      	mov	r4, r1
 8018462:	d507      	bpl.n	8018474 <__smakebuf_r+0x1c>
 8018464:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018468:	6023      	str	r3, [r4, #0]
 801846a:	6123      	str	r3, [r4, #16]
 801846c:	2301      	movs	r3, #1
 801846e:	6163      	str	r3, [r4, #20]
 8018470:	b003      	add	sp, #12
 8018472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018474:	ab01      	add	r3, sp, #4
 8018476:	466a      	mov	r2, sp
 8018478:	f7ff ffc8 	bl	801840c <__swhatbuf_r>
 801847c:	9f00      	ldr	r7, [sp, #0]
 801847e:	4605      	mov	r5, r0
 8018480:	4639      	mov	r1, r7
 8018482:	4630      	mov	r0, r6
 8018484:	f7fe fc22 	bl	8016ccc <_malloc_r>
 8018488:	b948      	cbnz	r0, 801849e <__smakebuf_r+0x46>
 801848a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801848e:	059a      	lsls	r2, r3, #22
 8018490:	d4ee      	bmi.n	8018470 <__smakebuf_r+0x18>
 8018492:	f023 0303 	bic.w	r3, r3, #3
 8018496:	f043 0302 	orr.w	r3, r3, #2
 801849a:	81a3      	strh	r3, [r4, #12]
 801849c:	e7e2      	b.n	8018464 <__smakebuf_r+0xc>
 801849e:	89a3      	ldrh	r3, [r4, #12]
 80184a0:	6020      	str	r0, [r4, #0]
 80184a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184a6:	81a3      	strh	r3, [r4, #12]
 80184a8:	9b01      	ldr	r3, [sp, #4]
 80184aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80184ae:	b15b      	cbz	r3, 80184c8 <__smakebuf_r+0x70>
 80184b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184b4:	4630      	mov	r0, r6
 80184b6:	f000 f81d 	bl	80184f4 <_isatty_r>
 80184ba:	b128      	cbz	r0, 80184c8 <__smakebuf_r+0x70>
 80184bc:	89a3      	ldrh	r3, [r4, #12]
 80184be:	f023 0303 	bic.w	r3, r3, #3
 80184c2:	f043 0301 	orr.w	r3, r3, #1
 80184c6:	81a3      	strh	r3, [r4, #12]
 80184c8:	89a3      	ldrh	r3, [r4, #12]
 80184ca:	431d      	orrs	r5, r3
 80184cc:	81a5      	strh	r5, [r4, #12]
 80184ce:	e7cf      	b.n	8018470 <__smakebuf_r+0x18>

080184d0 <_fstat_r>:
 80184d0:	b538      	push	{r3, r4, r5, lr}
 80184d2:	4d07      	ldr	r5, [pc, #28]	@ (80184f0 <_fstat_r+0x20>)
 80184d4:	2300      	movs	r3, #0
 80184d6:	4604      	mov	r4, r0
 80184d8:	4608      	mov	r0, r1
 80184da:	4611      	mov	r1, r2
 80184dc:	602b      	str	r3, [r5, #0]
 80184de:	f7ee fcd9 	bl	8006e94 <_fstat>
 80184e2:	1c43      	adds	r3, r0, #1
 80184e4:	d102      	bne.n	80184ec <_fstat_r+0x1c>
 80184e6:	682b      	ldr	r3, [r5, #0]
 80184e8:	b103      	cbz	r3, 80184ec <_fstat_r+0x1c>
 80184ea:	6023      	str	r3, [r4, #0]
 80184ec:	bd38      	pop	{r3, r4, r5, pc}
 80184ee:	bf00      	nop
 80184f0:	20014db0 	.word	0x20014db0

080184f4 <_isatty_r>:
 80184f4:	b538      	push	{r3, r4, r5, lr}
 80184f6:	4d06      	ldr	r5, [pc, #24]	@ (8018510 <_isatty_r+0x1c>)
 80184f8:	2300      	movs	r3, #0
 80184fa:	4604      	mov	r4, r0
 80184fc:	4608      	mov	r0, r1
 80184fe:	602b      	str	r3, [r5, #0]
 8018500:	f7ee fcd8 	bl	8006eb4 <_isatty>
 8018504:	1c43      	adds	r3, r0, #1
 8018506:	d102      	bne.n	801850e <_isatty_r+0x1a>
 8018508:	682b      	ldr	r3, [r5, #0]
 801850a:	b103      	cbz	r3, 801850e <_isatty_r+0x1a>
 801850c:	6023      	str	r3, [r4, #0]
 801850e:	bd38      	pop	{r3, r4, r5, pc}
 8018510:	20014db0 	.word	0x20014db0

08018514 <fmaxf>:
 8018514:	b508      	push	{r3, lr}
 8018516:	ed2d 8b02 	vpush	{d8}
 801851a:	eeb0 8a40 	vmov.f32	s16, s0
 801851e:	eef0 8a60 	vmov.f32	s17, s1
 8018522:	f000 f831 	bl	8018588 <__fpclassifyf>
 8018526:	b930      	cbnz	r0, 8018536 <fmaxf+0x22>
 8018528:	eeb0 8a68 	vmov.f32	s16, s17
 801852c:	eeb0 0a48 	vmov.f32	s0, s16
 8018530:	ecbd 8b02 	vpop	{d8}
 8018534:	bd08      	pop	{r3, pc}
 8018536:	eeb0 0a68 	vmov.f32	s0, s17
 801853a:	f000 f825 	bl	8018588 <__fpclassifyf>
 801853e:	2800      	cmp	r0, #0
 8018540:	d0f4      	beq.n	801852c <fmaxf+0x18>
 8018542:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801854a:	dded      	ble.n	8018528 <fmaxf+0x14>
 801854c:	e7ee      	b.n	801852c <fmaxf+0x18>

0801854e <fminf>:
 801854e:	b508      	push	{r3, lr}
 8018550:	ed2d 8b02 	vpush	{d8}
 8018554:	eeb0 8a40 	vmov.f32	s16, s0
 8018558:	eef0 8a60 	vmov.f32	s17, s1
 801855c:	f000 f814 	bl	8018588 <__fpclassifyf>
 8018560:	b930      	cbnz	r0, 8018570 <fminf+0x22>
 8018562:	eeb0 8a68 	vmov.f32	s16, s17
 8018566:	eeb0 0a48 	vmov.f32	s0, s16
 801856a:	ecbd 8b02 	vpop	{d8}
 801856e:	bd08      	pop	{r3, pc}
 8018570:	eeb0 0a68 	vmov.f32	s0, s17
 8018574:	f000 f808 	bl	8018588 <__fpclassifyf>
 8018578:	2800      	cmp	r0, #0
 801857a:	d0f4      	beq.n	8018566 <fminf+0x18>
 801857c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018584:	d5ed      	bpl.n	8018562 <fminf+0x14>
 8018586:	e7ee      	b.n	8018566 <fminf+0x18>

08018588 <__fpclassifyf>:
 8018588:	ee10 3a10 	vmov	r3, s0
 801858c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8018590:	d00d      	beq.n	80185ae <__fpclassifyf+0x26>
 8018592:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8018596:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801859a:	d30a      	bcc.n	80185b2 <__fpclassifyf+0x2a>
 801859c:	4b07      	ldr	r3, [pc, #28]	@ (80185bc <__fpclassifyf+0x34>)
 801859e:	1e42      	subs	r2, r0, #1
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d908      	bls.n	80185b6 <__fpclassifyf+0x2e>
 80185a4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80185a8:	4258      	negs	r0, r3
 80185aa:	4158      	adcs	r0, r3
 80185ac:	4770      	bx	lr
 80185ae:	2002      	movs	r0, #2
 80185b0:	4770      	bx	lr
 80185b2:	2004      	movs	r0, #4
 80185b4:	4770      	bx	lr
 80185b6:	2003      	movs	r0, #3
 80185b8:	4770      	bx	lr
 80185ba:	bf00      	nop
 80185bc:	007ffffe 	.word	0x007ffffe

080185c0 <_init>:
 80185c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185c2:	bf00      	nop
 80185c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185c6:	bc08      	pop	{r3}
 80185c8:	469e      	mov	lr, r3
 80185ca:	4770      	bx	lr

080185cc <_fini>:
 80185cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185ce:	bf00      	nop
 80185d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185d2:	bc08      	pop	{r3}
 80185d4:	469e      	mov	lr, r3
 80185d6:	4770      	bx	lr
