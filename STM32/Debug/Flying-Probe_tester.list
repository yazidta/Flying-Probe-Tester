
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800bea8  0800bea8  0000cea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c560  0800c560  0000e0c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c560  0800c560  0000d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c568  0800c568  0000e0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c568  0800c568  0000d568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c56c  0800c56c  0000d56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800c570  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fcc  200000c0  0800c630  0000e0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000108c  0800c630  0000f08c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023328  00000000  00000000  0000e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004add  00000000  00000000  00031418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  00035ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001571  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b240  00000000  00000000  00039021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029397  00000000  00000000  00064261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9905  00000000  00000000  0008d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186efd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000799c  00000000  00000000  00186f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018e8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be90 	.word	0x0800be90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800be90 	.word	0x0800be90

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f006 ff2d 	bl	8007424 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f006 ff93 	bl	8007504 <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f004 fa93 	bl	8004ba4 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000dc 	.word	0x200000dc

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <LCD_I2C_Cursor+0x30>)
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	78bb      	ldrb	r3, [r7, #2]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	3b80      	subs	r3, #128	@ 0x80
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff68 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800c508 	.word	0x0800c508

080007d4 <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d90a      	bls.n	8000800 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	3b02      	subs	r3, #2
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	78bb      	ldrb	r3, [r7, #2]
 80007f2:	3314      	adds	r3, #20
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffd1 	bl	80007a0 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 80007fe:	e005      	b.n	800080c <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8000800:	78ba      	ldrb	r2, [r7, #2]
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffca 	bl	80007a0 <LCD_I2C_Cursor>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ff3a 	bl	8000698 <__lcd_i2c_write_command>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3340      	adds	r3, #64	@ 0x40
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff ff26 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
 8000850:	e00a      	b.n	8000868 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff ff2b 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	3301      	adds	r3, #1
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d9f1      	bls.n	8000852 <LCD_I2C_DefineChar+0x26>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 8000886:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8000888:	69b8      	ldr	r0, [r7, #24]
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000892:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	461a      	mov	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffbf 	bl	800082c <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]
 80008b2:	e025      	b.n	8000900 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	3303      	adds	r3, #3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff88 	bl	80007d4 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff5b 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe6b 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	3303      	adds	r3, #3
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff75 	bl	80007d4 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fedf 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 80008fa:	7ffb      	ldrb	r3, [r7, #31]
 80008fc:	3301      	adds	r3, #1
 80008fe:	77fb      	strb	r3, [r7, #31]
 8000900:	7ffa      	ldrb	r2, [r7, #31]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3d5      	bcc.n	80008b4 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800beb4 	.word	0x0800beb4
 8000918:	0800bec0 	.word	0x0800bec0

0800091c <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t CurrentPosition;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e07d      	b.n	8000a26 <HAL_TIM_PWM_PulseFinishedCallback+0x10a>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4942      	ldr	r1, [pc, #264]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2064      	movs	r0, #100	@ 0x64
 8000934:	fb00 f303 	mul.w	r3, r0, r3
 8000938:	440b      	add	r3, r1
 800093a:	330c      	adds	r3, #12
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	429a      	cmp	r2, r3
 8000942:	d16d      	bne.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  motors[i].stepsTaken++;
 8000944:	4a3c      	ldr	r2, [pc, #240]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2164      	movs	r1, #100	@ 0x64
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	4413      	add	r3, r2
 8000950:	3344      	adds	r3, #68	@ 0x44
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	4938      	ldr	r1, [pc, #224]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2064      	movs	r0, #100	@ 0x64
 800095c:	fb00 f303 	mul.w	r3, r0, r3
 8000960:	440b      	add	r3, r1
 8000962:	3344      	adds	r3, #68	@ 0x44
 8000964:	601a      	str	r2, [r3, #0]
		  stepsTaken[i] = motors[i].stepsTaken;
 8000966:	4a34      	ldr	r2, [pc, #208]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2164      	movs	r1, #100	@ 0x64
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	4413      	add	r3, r2
 8000972:	3344      	adds	r3, #68	@ 0x44
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4931      	ldr	r1, [pc, #196]	@ (8000a3c <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 800097e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2164      	movs	r1, #100	@ 0x64
 8000984:	fb01 f303 	mul.w	r3, r1, r3
 8000988:	4413      	add	r3, r2
 800098a:	331c      	adds	r3, #28
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	492a      	ldr	r1, [pc, #168]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2064      	movs	r0, #100	@ 0x64
 8000994:	fb00 f303 	mul.w	r3, r0, r3
 8000998:	440b      	add	r3, r1
 800099a:	3320      	adds	r3, #32
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	4610      	mov	r0, r2
 80009a2:	f004 f819 	bl	80049d8 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d111      	bne.n	80009d0 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		  motors[i].StepsFront++;
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2164      	movs	r1, #100	@ 0x64
 80009b2:	fb01 f303 	mul.w	r3, r1, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	3358      	adds	r3, #88	@ 0x58
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	491e      	ldr	r1, [pc, #120]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2064      	movs	r0, #100	@ 0x64
 80009c4:	fb00 f303 	mul.w	r3, r0, r3
 80009c8:	440b      	add	r3, r1
 80009ca:	3358      	adds	r3, #88	@ 0x58
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e027      	b.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2164      	movs	r1, #100	@ 0x64
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	4413      	add	r3, r2
 80009dc:	331c      	adds	r3, #28
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4915      	ldr	r1, [pc, #84]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2064      	movs	r0, #100	@ 0x64
 80009e6:	fb00 f303 	mul.w	r3, r0, r3
 80009ea:	440b      	add	r3, r1
 80009ec:	3320      	adds	r3, #32
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4610      	mov	r0, r2
 80009f4:	f003 fff0 	bl	80049d8 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>

			  		  motors[i].StepsBack++;
 80009fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2164      	movs	r1, #100	@ 0x64
 8000a04:	fb01 f303 	mul.w	r3, r1, r3
 8000a08:	4413      	add	r3, r2
 8000a0a:	335c      	adds	r3, #92	@ 0x5c
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	4909      	ldr	r1, [pc, #36]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2064      	movs	r0, #100	@ 0x64
 8000a16:	fb00 f303 	mul.w	r3, r0, r3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	335c      	adds	r3, #92	@ 0x5c
 8000a1e:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	f77f af7e 	ble.w	800092a <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		 }
      }

    }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000d3c 	.word	0x20000d3c
 8000a3c:	200000e4 	.word	0x200000e4

08000a40 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69d8      	ldr	r0, [r3, #28]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	8c1b      	ldrh	r3, [r3, #32]
 8000a54:	78fa      	ldrb	r2, [r7, #3]
 8000a56:	4619      	mov	r1, r3
 8000a58:	f003 ffd6 	bl	8004a08 <HAL_GPIO_WritePin>
    direction = state;
 8000a5c:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <TMC2209_SetDirection+0x2c>)
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000e2 	.word	0x200000e2

08000a70 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a84:	78fa      	ldrb	r2, [r7, #3]
 8000a86:	4619      	mov	r1, r3
 8000a88:	f003 ffbe 	bl	8004a08 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 8000aa6:	f005 fa77 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abc:	3b01      	subs	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d106      	bne.n	8000ae8 <TMC2209_SetSpeed+0x54>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	0852      	lsrs	r2, r2, #1
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ae6:	e031      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d106      	bne.n	8000afe <TMC2209_SetSpeed+0x6a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	085b      	lsrs	r3, r3, #1
 8000afa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000afc:	e026      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	d106      	bne.n	8000b14 <TMC2209_SetSpeed+0x80>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	085b      	lsrs	r3, r3, #1
 8000b10:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b12:	e01b      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b0c      	cmp	r3, #12
 8000b1a:	d106      	bne.n	8000b2a <TMC2209_SetSpeed+0x96>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	085b      	lsrs	r3, r3, #1
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b28:	e010      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d106      	bne.n	8000b40 <TMC2209_SetSpeed+0xac>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b3e:	e005      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff80 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f006 ff86 	bl	8007a84 <HAL_TIM_PWM_Stop_IT>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000b94:	2100      	movs	r1, #0
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff6a 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f006 fe28 	bl	80077f4 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <TMC2209_CountSteps>:
    motor->isStepping = true;
}



static void TMC2209_CountSteps(Motor *motor, uint32_t totalSteps){ // Static for now unless we need to expose it later
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	motor->nextTotalSteps = totalSteps;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	649a      	str	r2, [r3, #72]	@ 0x48
	motor->stepsTaken = 0;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	645a      	str	r2, [r3, #68]	@ 0x44
	while (motor->stepsTaken < motor->nextTotalSteps); // Wait until we reach required steps
 8000bca:	bf00      	nop
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3f8      	bcc.n	8000bcc <TMC2209_CountSteps+0x18>
	//HAL_Delay(1); // To not fad the cpu --NOTE: CHECK IF THERE SHOULD BE A DELAY
	motor->nextTotalSteps = 0;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <TMC2209_Step>:

	TMC2209_Stop(motor);

}

void TMC2209_Step(Motor *motor, uint32_t steps){ // This doesn't work anymore since we have MoveTo
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	TMC2209_Start(motor);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffc2 	bl	8000b80 <TMC2209_Start>
	TMC2209_CountSteps(motor, steps);
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffd8 	bl	8000bb4 <TMC2209_CountSteps>
	TMC2209_Stop(motor);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ffa5 	bl	8000b54 <TMC2209_Stop>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <debug_print>:
    }
    (void)dummy;
}


void debug_print(const char* msg) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff faf7 	bl	8000210 <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <debug_print+0x28>)
 8000c2e:	f008 f97b 	bl	8008f28 <HAL_UART_Transmit>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200005bc 	.word	0x200005bc

08000c40 <debug_print_hex>:

 void debug_print_hex(uint8_t* data, uint8_t length) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0c4      	sub	sp, #272	@ 0x110
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c4e:	6018      	str	r0, [r3, #0]
 8000c50:	460a      	mov	r2, r1
 8000c52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c56:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000c5a:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    char* ptr = buffer;
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    ptr += sprintf(ptr, "[");
 8000c64:	4924      	ldr	r1, [pc, #144]	@ (8000cf8 <debug_print_hex+0xb8>)
 8000c66:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000c6a:	f00a fc1b 	bl	800b4a4 <siprintf>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c76:	4413      	add	r3, r2
 8000c78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for(uint8_t i = 0; i < length; i++) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
 8000c82:	e01a      	b.n	8000cba <debug_print_hex+0x7a>
        ptr += sprintf(ptr, "%02X ", data[i]);
 8000c84:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000c88:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c8c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c90:	6812      	ldr	r2, [r2, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	4918      	ldr	r1, [pc, #96]	@ (8000cfc <debug_print_hex+0xbc>)
 8000c9a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000c9e:	f00a fc01 	bl	800b4a4 <siprintf>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000caa:	4413      	add	r3, r2
 8000cac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for(uint8_t i = 0; i < length; i++) {
 8000cb0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
 8000cba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cbe:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000cc2:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3db      	bcc.n	8000c84 <debug_print_hex+0x44>
    }
    ptr += sprintf(ptr, "]\r\n");
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <debug_print_hex+0xc0>)
 8000cce:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000cd2:	f00a fbe7 	bl	800b4a4 <siprintf>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cde:	4413      	add	r3, r2
 8000ce0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    debug_print(buffer);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff93 	bl	8000c14 <debug_print>
}
 8000cee:	bf00      	nop
 8000cf0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	0800bfe0 	.word	0x0800bfe0
 8000cfc:	0800bfe4 	.word	0x0800bfe4
 8000d00:	0800bfec 	.word	0x0800bfec

08000d04 <calculate_CRC>:

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	73bb      	strb	r3, [r7, #14]
 8000d18:	e027      	b.n	8000d6a <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	733b      	strb	r3, [r7, #12]
 8000d28:	e019      	b.n	8000d5e <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	09db      	lsrs	r3, r3, #7
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d007      	beq.n	8000d4c <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	f083 0307 	eor.w	r3, r3, #7
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e002      	b.n	8000d52 <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8000d52:	7b7b      	ldrb	r3, [r7, #13]
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000d58:	7b3b      	ldrb	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	733b      	strb	r3, [r7, #12]
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	d9e2      	bls.n	8000d2a <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	3301      	adds	r3, #1
 8000d68:	73bb      	strb	r3, [r7, #14]
 8000d6a:	7bba      	ldrb	r2, [r7, #14]
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d3d3      	bcc.n	8000d1a <calculate_CRC+0x16>
        }
    }
    return crc;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <TMC2209_WaitForReply>:




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8000d88:	f002 ff2e 	bl	8003be8 <HAL_GetTick>
 8000d8c:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 8000d8e:	e00c      	b.n	8000daa <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 8000d90:	f002 ff2a 	bl	8003be8 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d204      	bcs.n	8000daa <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 8000da0:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <TMC2209_WaitForReply+0x44>)
 8000da2:	f7ff ff37 	bl	8000c14 <debug_print>
             return 0; // Timeout
 8000da6:	2300      	movs	r3, #0
 8000da8:	e008      	b.n	8000dbc <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <TMC2209_WaitForReply+0x48>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0ed      	beq.n	8000d90 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8000db4:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <TMC2209_WaitForReply+0x48>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 8000dba:	2301      	movs	r3, #1
 }
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	0800bff0 	.word	0x0800bff0
 8000dc8:	20000108 	.word	0x20000108

08000dcc <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	603b      	str	r3, [r7, #0]
	uint8_t flag = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	6858      	ldr	r0, [r3, #4]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	f008 f89c 	bl	8008f28 <HAL_UART_Transmit>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <TMC2209_sendCommand+0x34>
         debug_print("Failed to send command.\r\n");
 8000df6:	481a      	ldr	r0, [pc, #104]	@ (8000e60 <TMC2209_sendCommand+0x94>)
 8000df8:	f7ff ff0c 	bl	8000c14 <debug_print>
         return 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e02a      	b.n	8000e56 <TMC2209_sendCommand+0x8a>
     }


     if(readLength){
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d026      	beq.n	8000e54 <TMC2209_sendCommand+0x88>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	6858      	ldr	r0, [r3, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	4913      	ldr	r1, [pc, #76]	@ (8000e64 <TMC2209_sendCommand+0x98>)
 8000e16:	f008 f910 	bl	800903a <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 8000e1a:	20c8      	movs	r0, #200	@ 0xc8
 8000e1c:	f7ff ffb0 	bl	8000d80 <TMC2209_WaitForReply>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d104      	bne.n	8000e30 <TMC2209_sendCommand+0x64>
         debug_print("No reply received.\r\n");
 8000e26:	4810      	ldr	r0, [pc, #64]	@ (8000e68 <TMC2209_sendCommand+0x9c>)
 8000e28:	f7ff fef4 	bl	8000c14 <debug_print>
         return 0; // command failed
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e012      	b.n	8000e56 <TMC2209_sendCommand+0x8a>
     }
     /// DEBUG ///
     // Send transmitted data -- Note: this can't be called before receiving or else it will interfere with huart2

     debug_print("Data Transmitted: ");
 8000e30:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <TMC2209_sendCommand+0xa0>)
 8000e32:	f7ff feef 	bl	8000c14 <debug_print>
     debug_print_hex(command, writeLength);
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f7ff feff 	bl	8000c40 <debug_print_hex>
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
 8000e42:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <TMC2209_sendCommand+0xa4>)
 8000e44:	f7ff fee6 	bl	8000c14 <debug_print>
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
 8000e48:	2108      	movs	r1, #8
 8000e4a:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <TMC2209_sendCommand+0xa8>)
 8000e4c:	f7ff fef8 	bl	8000c40 <debug_print_hex>

     return rxBuffer; // Success
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <TMC2209_sendCommand+0xa8>)
 8000e52:	e000      	b.n	8000e56 <TMC2209_sendCommand+0x8a>
     }

     return flag;
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	0800c010 	.word	0x0800c010
 8000e64:	200000f4 	.word	0x200000f4
 8000e68:	0800c02c 	.word	0x0800c02c
 8000e6c:	0800c044 	.word	0x0800c044
 8000e70:	0800c058 	.word	0x0800c058
 8000e74:	20000100 	.word	0x20000100

08000e78 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	460b      	mov	r3, r1
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8000e86:	2305      	movs	r3, #5
 8000e88:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	7a1b      	ldrb	r3, [r3, #8]
 8000e8e:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8000e90:	7afb      	ldrb	r3, [r7, #11]
 8000e92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	0e1b      	lsrs	r3, r3, #24
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	141b      	asrs	r3, r3, #16
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	121b      	asrs	r3, r3, #8
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff20 	bl	8000d04 <calculate_CRC>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8000ec8:	f107 0010 	add.w	r0, r7, #16
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	f7ff ff7b 	bl	8000dcc <TMC2209_sendCommand>

 }
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
 	uint8_t read_request_command[8] = { 0 };
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]

// 	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
// 		return tmc2209->config->shadowRegister[address];

 	read_request_command[0] = SYNC;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7a1b      	ldrb	r3, [r3, #8]
 8000efc:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2103      	movs	r1, #3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fefb 	bl	8000d04 <calculate_CRC>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 8000f12:	f107 000c 	add.w	r0, r7, #12
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2208      	movs	r2, #8
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f7ff ff56 	bl	8000dcc <TMC2209_sendCommand>
 8000f20:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d00c      	beq.n	8000f44 <TMC2209_readInit+0x64>
 		// If first byte equals 0 then it means no reply so return
 		if (verifyBuffer[0] == 0)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <TMC2209_readInit+0x58>
 			return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e03e      	b.n	8000fb6 <TMC2209_readInit+0xd6>
 		debug_print("Invalid data received!(SYNC Byte)\r\n");
 8000f38:	4821      	ldr	r0, [pc, #132]	@ (8000fc0 <TMC2209_readInit+0xe0>)
 8000f3a:	f7ff fe6b 	bl	8000c14 <debug_print>
 		return -1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e038      	b.n	8000fb6 <TMC2209_readInit+0xd6>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2bff      	cmp	r3, #255	@ 0xff
 8000f4c:	d005      	beq.n	8000f5a <TMC2209_readInit+0x7a>
 		debug_print("Invalid data received!(MCU Address)\r\n");
 8000f4e:	481d      	ldr	r0, [pc, #116]	@ (8000fc4 <TMC2209_readInit+0xe4>)
 8000f50:	f7ff fe60 	bl	8000c14 <debug_print>
 		return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	e02d      	b.n	8000fb6 <TMC2209_readInit+0xd6>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	78fa      	ldrb	r2, [r7, #3]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d005      	beq.n	8000f72 <TMC2209_readInit+0x92>
 		debug_print("Invalid data received!(Register Address)\r\n");
 8000f66:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <TMC2209_readInit+0xe8>)
 8000f68:	f7ff fe54 	bl	8000c14 <debug_print>
 		return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	e021      	b.n	8000fb6 <TMC2209_readInit+0xd6>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3307      	adds	r3, #7
 8000f76:	781c      	ldrb	r4, [r3, #0]
 8000f78:	2107      	movs	r1, #7
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff fec2 	bl	8000d04 <calculate_CRC>
 8000f80:	4603      	mov	r3, r0
 8000f82:	429c      	cmp	r4, r3
 8000f84:	d005      	beq.n	8000f92 <TMC2209_readInit+0xb2>
 		debug_print("Invalid data received!(CRC)\r\n");
 8000f86:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <TMC2209_readInit+0xec>)
 8000f88:	f7ff fe44 	bl	8000c14 <debug_print>
 		return -1;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	e011      	b.n	8000fb6 <TMC2209_readInit+0xd6>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3303      	adds	r3, #3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	061a      	lsls	r2, r3, #24
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	041b      	lsls	r3, r3, #16
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3305      	adds	r3, #5
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	4313      	orrs	r3, r2
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	3206      	adds	r2, #6
 8000fb2:	7812      	ldrb	r2, [r2, #0]
 8000fb4:	4313      	orrs	r3, r2
 }
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	0800c06c 	.word	0x0800c06c
 8000fc4:	0800c090 	.word	0x0800c090
 8000fc8:	0800c0b8 	.word	0x0800c0b8
 8000fcc:	0800c0e4 	.word	0x0800c0e4

08000fd0 <setMicrosteppingResolution>:

 }


// Function to set the microstepping resolution through UART
void setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ac      	sub	sp, #176	@ 0xb0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f002 fe0f 	bl	8003c00 <HAL_Delay>
    uint8_t driverID = tmc2209->driver.id;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
    char debug_msg[150];

    snprintf(debug_msg, sizeof(debug_msg), "----- Setting Microstepping For Driver ID: %u -----\r\n", driverID);
 8000fea:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8000fee:	f107 0008 	add.w	r0, r7, #8
 8000ff2:	4a6d      	ldr	r2, [pc, #436]	@ (80011a8 <setMicrosteppingResolution+0x1d8>)
 8000ff4:	2196      	movs	r1, #150	@ 0x96
 8000ff6:	f00a fa21 	bl	800b43c <sniprintf>
    debug_print(debug_msg);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fe08 	bl	8000c14 <debug_print>
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	2296      	movs	r2, #150	@ 0x96
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f00a fa69 	bl	800b4e4 <memset>
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8001012:	2380      	movs	r3, #128	@ 0x80
 8001014:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8001018:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800101c:	461a      	mov	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <TMC2209_writeInit>

    HAL_Delay(2);
 8001026:	2002      	movs	r0, #2
 8001028:	f002 fdea 	bl	8003c00 <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 800102c:	216c      	movs	r1, #108	@ 0x6c
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ff56 	bl	8000ee0 <TMC2209_readInit>
 8001034:	4603      	mov	r3, r0
 8001036:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 800103a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800103e:	0e1b      	lsrs	r3, r3, #24
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001050:	d053      	beq.n	80010fa <setMicrosteppingResolution+0x12a>
 8001052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001056:	dc74      	bgt.n	8001142 <setMicrosteppingResolution+0x172>
 8001058:	2b80      	cmp	r3, #128	@ 0x80
 800105a:	d052      	beq.n	8001102 <setMicrosteppingResolution+0x132>
 800105c:	2b80      	cmp	r3, #128	@ 0x80
 800105e:	dc70      	bgt.n	8001142 <setMicrosteppingResolution+0x172>
 8001060:	2b20      	cmp	r3, #32
 8001062:	dc47      	bgt.n	80010f4 <setMicrosteppingResolution+0x124>
 8001064:	2b00      	cmp	r3, #0
 8001066:	dd6c      	ble.n	8001142 <setMicrosteppingResolution+0x172>
 8001068:	3b01      	subs	r3, #1
 800106a:	2b1f      	cmp	r3, #31
 800106c:	d869      	bhi.n	8001142 <setMicrosteppingResolution+0x172>
 800106e:	a201      	add	r2, pc, #4	@ (adr r2, 8001074 <setMicrosteppingResolution+0xa4>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	0800113b 	.word	0x0800113b
 8001078:	08001133 	.word	0x08001133
 800107c:	08001143 	.word	0x08001143
 8001080:	0800112b 	.word	0x0800112b
 8001084:	08001143 	.word	0x08001143
 8001088:	08001143 	.word	0x08001143
 800108c:	08001143 	.word	0x08001143
 8001090:	08001123 	.word	0x08001123
 8001094:	08001143 	.word	0x08001143
 8001098:	08001143 	.word	0x08001143
 800109c:	08001143 	.word	0x08001143
 80010a0:	08001143 	.word	0x08001143
 80010a4:	08001143 	.word	0x08001143
 80010a8:	08001143 	.word	0x08001143
 80010ac:	08001143 	.word	0x08001143
 80010b0:	0800111b 	.word	0x0800111b
 80010b4:	08001143 	.word	0x08001143
 80010b8:	08001143 	.word	0x08001143
 80010bc:	08001143 	.word	0x08001143
 80010c0:	08001143 	.word	0x08001143
 80010c4:	08001143 	.word	0x08001143
 80010c8:	08001143 	.word	0x08001143
 80010cc:	08001143 	.word	0x08001143
 80010d0:	08001143 	.word	0x08001143
 80010d4:	08001143 	.word	0x08001143
 80010d8:	08001143 	.word	0x08001143
 80010dc:	08001143 	.word	0x08001143
 80010e0:	08001143 	.word	0x08001143
 80010e4:	08001143 	.word	0x08001143
 80010e8:	08001143 	.word	0x08001143
 80010ec:	08001143 	.word	0x08001143
 80010f0:	08001113 	.word	0x08001113
 80010f4:	2b40      	cmp	r3, #64	@ 0x40
 80010f6:	d008      	beq.n	800110a <setMicrosteppingResolution+0x13a>
 80010f8:	e023      	b.n	8001142 <setMicrosteppingResolution+0x172>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001100:	e024      	b.n	800114c <setMicrosteppingResolution+0x17c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 8001102:	2301      	movs	r3, #1
 8001104:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001108:	e020      	b.n	800114c <setMicrosteppingResolution+0x17c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 800110a:	2302      	movs	r3, #2
 800110c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001110:	e01c      	b.n	800114c <setMicrosteppingResolution+0x17c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 8001112:	2303      	movs	r3, #3
 8001114:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001118:	e018      	b.n	800114c <setMicrosteppingResolution+0x17c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 800111a:	2304      	movs	r3, #4
 800111c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001120:	e014      	b.n	800114c <setMicrosteppingResolution+0x17c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 8001122:	2305      	movs	r3, #5
 8001124:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001128:	e010      	b.n	800114c <setMicrosteppingResolution+0x17c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 800112a:	2306      	movs	r3, #6
 800112c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001130:	e00c      	b.n	800114c <setMicrosteppingResolution+0x17c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 8001132:	2307      	movs	r3, #7
 8001134:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001138:	e008      	b.n	800114c <setMicrosteppingResolution+0x17c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 800113a:	2308      	movs	r3, #8
 800113c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001140:	e004      	b.n	800114c <setMicrosteppingResolution+0x17c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 8001142:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001146:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 800114a:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 800114c:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 8001150:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001154:	429a      	cmp	r2, r3
 8001156:	d103      	bne.n	8001160 <setMicrosteppingResolution+0x190>
        debug_print("Resolution unchanged, no update needed.\n");
 8001158:	4814      	ldr	r0, [pc, #80]	@ (80011ac <setMicrosteppingResolution+0x1dc>)
 800115a:	f7ff fd5b 	bl	8000c14 <debug_print>
 800115e:	e01f      	b.n	80011a0 <setMicrosteppingResolution+0x1d0>
        return;
    }
    HAL_Delay(2);
 8001160:	2002      	movs	r0, #2
 8001162:	f002 fd4d 	bl	8003c00 <HAL_Delay>
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8001166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800116a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800116e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001172:	061b      	lsls	r3, r3, #24
 8001174:	4313      	orrs	r3, r2
 8001176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 800117a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800117e:	461a      	mov	r2, r3
 8001180:	216c      	movs	r1, #108	@ 0x6c
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fe78 	bl	8000e78 <TMC2209_writeInit>

    // Debug
    sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <setMicrosteppingResolution+0x1e0>)
 8001190:	4618      	mov	r0, r3
 8001192:	f00a f987 	bl	800b4a4 <siprintf>
    debug_print(debug_msg);
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fd3a 	bl	8000c14 <debug_print>

}
 80011a0:	37b0      	adds	r7, #176	@ 0xb0
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	0800c2c8 	.word	0x0800c2c8
 80011ac:	0800c300 	.word	0x0800c300
 80011b0:	0800c32c 	.word	0x0800c32c

080011b4 <checkMicrosteppingResolution>:


uint16_t checkMicrosteppingResolution(Motor *tmc2209) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0aa      	sub	sp, #168	@ 0xa8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	HAL_Delay(2);
 80011bc:	2002      	movs	r0, #2
 80011be:	f002 fd1f 	bl	8003c00 <HAL_Delay>
    // Read the CHOPCONF register
    uint32_t chopconf = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 80011c2:	216c      	movs	r1, #108	@ 0x6c
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fe8b 	bl	8000ee0 <TMC2209_readInit>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    // Extract the MRES bits (bits 24–27 in CHOPCONF)
    uint8_t mres = (chopconf >> 24) & 0x0F;
 80011d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011d4:	0e1b      	lsrs	r3, r3, #24
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    // Calculate the current microstepping resolution
    uint16_t resolution;
    switch (mres) {
 80011e0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d83a      	bhi.n	800125e <checkMicrosteppingResolution+0xaa>
 80011e8:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <checkMicrosteppingResolution+0x3c>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001215 	.word	0x08001215
 80011f4:	0800121f 	.word	0x0800121f
 80011f8:	08001227 	.word	0x08001227
 80011fc:	0800122f 	.word	0x0800122f
 8001200:	08001237 	.word	0x08001237
 8001204:	0800123f 	.word	0x0800123f
 8001208:	08001247 	.word	0x08001247
 800120c:	0800124f 	.word	0x0800124f
 8001210:	08001257 	.word	0x08001257
        case 0x00: resolution = 256; break;
 8001214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001218:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800121c:	e022      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        case 0x01: resolution = 128; break;
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001224:	e01e      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        case 0x02: resolution = 64; break;
 8001226:	2340      	movs	r3, #64	@ 0x40
 8001228:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800122c:	e01a      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        case 0x03: resolution = 32; break;
 800122e:	2320      	movs	r3, #32
 8001230:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001234:	e016      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        case 0x04: resolution = 16; break;
 8001236:	2310      	movs	r3, #16
 8001238:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800123c:	e012      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        case 0x05: resolution = 8; break;
 800123e:	2308      	movs	r3, #8
 8001240:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001244:	e00e      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        case 0x06: resolution = 4; break;
 8001246:	2304      	movs	r3, #4
 8001248:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800124c:	e00a      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        case 0x07: resolution = 2; break;
 800124e:	2302      	movs	r3, #2
 8001250:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001254:	e006      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        case 0x08: resolution = 1; break;
 8001256:	2301      	movs	r3, #1
 8001258:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800125c:	e002      	b.n	8001264 <checkMicrosteppingResolution+0xb0>
        default: resolution = 0; // Unknown value
 800125e:	2300      	movs	r3, #0
 8001260:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    }

    // Debug
    char debug_msg[150];
    uint8_t driverID = tmc2209->driver.id;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    sprintf(debug_msg, "Current microstepping resolution for Driver ID: %u, Resolution: %u\n", driverID, resolution);
 800126c:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8001270:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8001274:	f107 0008 	add.w	r0, r7, #8
 8001278:	4906      	ldr	r1, [pc, #24]	@ (8001294 <checkMicrosteppingResolution+0xe0>)
 800127a:	f00a f913 	bl	800b4a4 <siprintf>
    debug_print(debug_msg);
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fcc6 	bl	8000c14 <debug_print>
    return resolution;
 8001288:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
}
 800128c:	4618      	mov	r0, r3
 800128e:	37a8      	adds	r7, #168	@ 0xa8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	0800c358 	.word	0x0800c358

08001298 <configureGCONF>:
    debug_print(debug_msg);

    return irun_value;
}

void configureGCONF(Motor *tmc2209) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f002 fcad 	bl	8003c00 <HAL_Delay>
    uint32_t gconf = 0x000000C0; // pdn_disable = 1, mstep_reg_select = 1
 80012a6:	23c0      	movs	r3, #192	@ 0xc0
 80012a8:	60fb      	str	r3, [r7, #12]
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	461a      	mov	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fde1 	bl	8000e78 <TMC2209_writeInit>
    HAL_Delay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f002 fca2 	bl	8003c00 <HAL_Delay>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <MotorsHoming>:
    }
}



void MotorsHoming(Motor *motor){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<4; i++){
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e156      	b.n	8001580 <MotorsHoming+0x2bc>
		if(i == 0){
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d13f      	bne.n	8001358 <MotorsHoming+0x94>
			TMC2209_SetDirection(&motor[0],0);
 80012d8:	2100      	movs	r1, #0
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fbb0 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[0],16000);
 80012e0:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fbd5 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0){
 80012ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ee:	48a9      	ldr	r0, [pc, #676]	@ (8001594 <MotorsHoming+0x2d0>)
 80012f0:	f000 fc2a 	bl	8001b48 <IsSensorTriggered>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d028      	beq.n	8001352 <MotorsHoming+0x8e>
					TMC2209_Start(&motor[0]);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fc3d 	bl	8000b80 <TMC2209_Start>
					while(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0);
 8001306:	bf00      	nop
 8001308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800130c:	48a1      	ldr	r0, [pc, #644]	@ (8001594 <MotorsHoming+0x2d0>)
 800130e:	f000 fc1b 	bl	8001b48 <IsSensorTriggered>
 8001312:	4603      	mov	r3, r0
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f4      	bne.n	8001308 <MotorsHoming+0x44>
					if((IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 1)){
 800131e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001322:	489c      	ldr	r0, [pc, #624]	@ (8001594 <MotorsHoming+0x2d0>)
 8001324:	f000 fc10 	bl	8001b48 <IsSensorTriggered>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d011      	beq.n	8001352 <MotorsHoming+0x8e>
						TMC2209_Stop(&motor[0]);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fc10 	bl	8000b54 <TMC2209_Stop>
						motor[0].currentPositionMM = 0;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	64da      	str	r2, [r3, #76]	@ 0x4c
						motor[0].stepsTaken = 0;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44
						motor[i].StepsBack = 0;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2264      	movs	r2, #100	@ 0x64
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	2200      	movs	r2, #0
 8001350:	65da      	str	r2, [r3, #92]	@ 0x5c

					}

				}
			TMC2209_Stop(&motor[0]);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fbfe 	bl	8000b54 <TMC2209_Stop>

		}
		if(i == 1){
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d153      	bne.n	8001406 <MotorsHoming+0x142>
			TMC2209_SetDirection(&motor[1],1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3364      	adds	r3, #100	@ 0x64
 8001362:	2101      	movs	r1, #1
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fb6b 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[1],10000);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3364      	adds	r3, #100	@ 0x64
 800136e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fb8e 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0){
 8001378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137c:	4886      	ldr	r0, [pc, #536]	@ (8001598 <MotorsHoming+0x2d4>)
 800137e:	f000 fbe3 	bl	8001b48 <IsSensorTriggered>
 8001382:	4603      	mov	r3, r0
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d036      	beq.n	80013fc <MotorsHoming+0x138>
				TMC2209_Start(&motor[1]);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3364      	adds	r3, #100	@ 0x64
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fbf4 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0);
 8001398:	bf00      	nop
 800139a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800139e:	487e      	ldr	r0, [pc, #504]	@ (8001598 <MotorsHoming+0x2d4>)
 80013a0:	f000 fbd2 	bl	8001b48 <IsSensorTriggered>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f083 0301 	eor.w	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f4      	bne.n	800139a <MotorsHoming+0xd6>
				if((IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 1)){
 80013b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b4:	4878      	ldr	r0, [pc, #480]	@ (8001598 <MotorsHoming+0x2d4>)
 80013b6:	f000 fbc7 	bl	8001b48 <IsSensorTriggered>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01d      	beq.n	80013fc <MotorsHoming+0x138>
					TMC2209_Stop(&motor[1]);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3364      	adds	r3, #100	@ 0x64
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fbc5 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2264      	movs	r2, #100	@ 0x64
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2264      	movs	r2, #100	@ 0x64
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	2200      	movs	r2, #0
 80013ea:	645a      	str	r2, [r3, #68]	@ 0x44
	                motor[i].StepsFront = 0;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2264      	movs	r2, #100	@ 0x64
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	2200      	movs	r2, #0
 80013fa:	659a      	str	r2, [r3, #88]	@ 0x58
				}
			}
			TMC2209_Stop(&motor[1]);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3364      	adds	r3, #100	@ 0x64
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fba7 	bl	8000b54 <TMC2209_Stop>
		}
		if(i == 2){
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d15b      	bne.n	80014c4 <MotorsHoming+0x200>
			TMC2209_SetDirection(&motor[2],1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	33c8      	adds	r3, #200	@ 0xc8
 8001410:	2101      	movs	r1, #1
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb14 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[2],16000);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	33c8      	adds	r3, #200	@ 0xc8
 800141c:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fb37 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0){
 8001426:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800142a:	485a      	ldr	r0, [pc, #360]	@ (8001594 <MotorsHoming+0x2d0>)
 800142c:	f000 fb8c 	bl	8001b48 <IsSensorTriggered>
 8001430:	4603      	mov	r3, r0
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d03e      	beq.n	80014ba <MotorsHoming+0x1f6>
				TMC2209_Start(&motor[2]);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	33c8      	adds	r3, #200	@ 0xc8
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fb9d 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0);
 8001446:	bf00      	nop
 8001448:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800144c:	4851      	ldr	r0, [pc, #324]	@ (8001594 <MotorsHoming+0x2d0>)
 800144e:	f000 fb7b 	bl	8001b48 <IsSensorTriggered>
 8001452:	4603      	mov	r3, r0
 8001454:	f083 0301 	eor.w	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f4      	bne.n	8001448 <MotorsHoming+0x184>
				if((IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 1)){
 800145e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001462:	484c      	ldr	r0, [pc, #304]	@ (8001594 <MotorsHoming+0x2d0>)
 8001464:	f000 fb70 	bl	8001b48 <IsSensorTriggered>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d025      	beq.n	80014ba <MotorsHoming+0x1f6>
					TMC2209_Stop(&motor[2]);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	33c8      	adds	r3, #200	@ 0xc8
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb6e 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2264      	movs	r2, #100	@ 0x64
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2264      	movs	r2, #100	@ 0x64
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	2200      	movs	r2, #0
 8001498:	645a      	str	r2, [r3, #68]	@ 0x44
				    motor[i].StepsFront = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2264      	movs	r2, #100	@ 0x64
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	2200      	movs	r2, #0
 80014a8:	659a      	str	r2, [r3, #88]	@ 0x58
				    motor[i].StepsBack = 0;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2264      	movs	r2, #100	@ 0x64
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	2200      	movs	r2, #0
 80014b8:	65da      	str	r2, [r3, #92]	@ 0x5c

				}
			}
			TMC2209_Stop(&motor[2]);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	33c8      	adds	r3, #200	@ 0xc8
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb48 	bl	8000b54 <TMC2209_Stop>
	}
		if(i == 3){
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d157      	bne.n	800157a <MotorsHoming+0x2b6>
			TMC2209_SetDirection(&motor[3],0);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fab4 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[3],10000);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80014de:	f242 7110 	movw	r1, #10000	@ 0x2710
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fad6 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0){
 80014e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014ec:	482a      	ldr	r0, [pc, #168]	@ (8001598 <MotorsHoming+0x2d4>)
 80014ee:	f000 fb2b 	bl	8001b48 <IsSensorTriggered>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d037      	beq.n	800156e <MotorsHoming+0x2aa>
				TMC2209_Start(&motor[3]);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb3b 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0);
 800150a:	bf00      	nop
 800150c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001510:	4821      	ldr	r0, [pc, #132]	@ (8001598 <MotorsHoming+0x2d4>)
 8001512:	f000 fb19 	bl	8001b48 <IsSensorTriggered>
 8001516:	4603      	mov	r3, r0
 8001518:	f083 0301 	eor.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f4      	bne.n	800150c <MotorsHoming+0x248>
				if((IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 1)){
 8001522:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001526:	481c      	ldr	r0, [pc, #112]	@ (8001598 <MotorsHoming+0x2d4>)
 8001528:	f000 fb0e 	bl	8001b48 <IsSensorTriggered>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d01d      	beq.n	800156e <MotorsHoming+0x2aa>
					TMC2209_Stop(&motor[3]);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fb0b 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 450;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2264      	movs	r2, #100	@ 0x64
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a14      	ldr	r2, [pc, #80]	@ (800159c <MotorsHoming+0x2d8>)
 800154c:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2264      	movs	r2, #100	@ 0x64
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	@ 0x44
				    motor[i].StepsBack = 0;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2264      	movs	r2, #100	@ 0x64
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	2200      	movs	r2, #0
 800156c:	65da      	str	r2, [r3, #92]	@ 0x5c
				}
			}
			TMC2209_Stop(&motor[3]);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff faed 	bl	8000b54 <TMC2209_Stop>
	for(int i = 0; i<4; i++){
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3301      	adds	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b03      	cmp	r3, #3
 8001584:	f77f aea5 	ble.w	80012d2 <MotorsHoming+0xe>




}
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40021400 	.word	0x40021400
 800159c:	43e10000 	.word	0x43e10000

080015a0 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	e1fa      	b.n	80019a2 <initializeMotors+0x402>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x00; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 80015ac:	4ab8      	ldr	r2, [pc, #736]	@ (8001890 <initializeMotors+0x2f0>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2164      	movs	r1, #100	@ 0x64
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	3308      	adds	r3, #8
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	4ab3      	ldr	r2, [pc, #716]	@ (8001890 <initializeMotors+0x2f0>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2164      	movs	r1, #100	@ 0x64
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	4602      	mov	r2, r0
 80015d0:	701a      	strb	r2, [r3, #0]

        motors[i].stepsTaken = 0;
 80015d2:	4aaf      	ldr	r2, [pc, #700]	@ (8001890 <initializeMotors+0x2f0>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2164      	movs	r1, #100	@ 0x64
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	3344      	adds	r3, #68	@ 0x44
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 80015e4:	4aaa      	ldr	r2, [pc, #680]	@ (8001890 <initializeMotors+0x2f0>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2164      	movs	r1, #100	@ 0x64
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	3348      	adds	r3, #72	@ 0x48
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 80015f6:	4aa6      	ldr	r2, [pc, #664]	@ (8001890 <initializeMotors+0x2f0>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2164      	movs	r1, #100	@ 0x64
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	334c      	adds	r3, #76	@ 0x4c
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 800160a:	4aa1      	ldr	r2, [pc, #644]	@ (8001890 <initializeMotors+0x2f0>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2164      	movs	r1, #100	@ 0x64
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	4413      	add	r3, r2
 8001616:	3350      	adds	r3, #80	@ 0x50
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 800161e:	4a9c      	ldr	r2, [pc, #624]	@ (8001890 <initializeMotors+0x2f0>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2164      	movs	r1, #100	@ 0x64
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	3354      	adds	r3, #84	@ 0x54
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d166      	bne.n	8001704 <initializeMotors+0x164>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8001636:	4a96      	ldr	r2, [pc, #600]	@ (8001890 <initializeMotors+0x2f0>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2164      	movs	r1, #100	@ 0x64
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4413      	add	r3, r2
 8001642:	330c      	adds	r3, #12
 8001644:	4a93      	ldr	r2, [pc, #588]	@ (8001894 <initializeMotors+0x2f4>)
 8001646:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8001648:	4a91      	ldr	r2, [pc, #580]	@ (8001890 <initializeMotors+0x2f0>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2164      	movs	r1, #100	@ 0x64
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	3310      	adds	r3, #16
 8001656:	2208      	movs	r2, #8
 8001658:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 16;
 800165a:	4a8d      	ldr	r2, [pc, #564]	@ (8001890 <initializeMotors+0x2f0>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2164      	movs	r1, #100	@ 0x64
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	3302      	adds	r3, #2
 8001668:	2210      	movs	r2, #16
 800166a:	801a      	strh	r2, [r3, #0]
        motors[i].driver.huart = &huart2;
 800166c:	4a88      	ldr	r2, [pc, #544]	@ (8001890 <initializeMotors+0x2f0>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2164      	movs	r1, #100	@ 0x64
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	3304      	adds	r3, #4
 800167a:	4a87      	ldr	r2, [pc, #540]	@ (8001898 <initializeMotors+0x2f8>)
 800167c:	601a      	str	r2, [r3, #0]
        motors[i].stepsPerRevolution = 400;
 800167e:	4a84      	ldr	r2, [pc, #528]	@ (8001890 <initializeMotors+0x2f0>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2164      	movs	r1, #100	@ 0x64
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	333c      	adds	r3, #60	@ 0x3c
 800168c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001690:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = STEP1_GPIO_Port;
 8001692:	4a7f      	ldr	r2, [pc, #508]	@ (8001890 <initializeMotors+0x2f0>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2164      	movs	r1, #100	@ 0x64
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	3314      	adds	r3, #20
 80016a0:	4a7e      	ldr	r2, [pc, #504]	@ (800189c <initializeMotors+0x2fc>)
 80016a2:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = STEP1_Pin;
 80016a4:	4a7a      	ldr	r2, [pc, #488]	@ (8001890 <initializeMotors+0x2f0>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2164      	movs	r1, #100	@ 0x64
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	3318      	adds	r3, #24
 80016b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b6:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = DIR1_GPIO_Port;
 80016b8:	4a75      	ldr	r2, [pc, #468]	@ (8001890 <initializeMotors+0x2f0>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2164      	movs	r1, #100	@ 0x64
 80016be:	fb01 f303 	mul.w	r3, r1, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	331c      	adds	r3, #28
 80016c6:	4a76      	ldr	r2, [pc, #472]	@ (80018a0 <initializeMotors+0x300>)
 80016c8:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = DIR1_Pin;
 80016ca:	4a71      	ldr	r2, [pc, #452]	@ (8001890 <initializeMotors+0x2f0>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2164      	movs	r1, #100	@ 0x64
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	3320      	adds	r3, #32
 80016d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016dc:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = ENN1_GPIO_Port;
 80016de:	4a6c      	ldr	r2, [pc, #432]	@ (8001890 <initializeMotors+0x2f0>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2164      	movs	r1, #100	@ 0x64
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3324      	adds	r3, #36	@ 0x24
 80016ec:	4a6b      	ldr	r2, [pc, #428]	@ (800189c <initializeMotors+0x2fc>)
 80016ee:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = ENN1_Pin;
 80016f0:	4a67      	ldr	r2, [pc, #412]	@ (8001890 <initializeMotors+0x2f0>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2164      	movs	r1, #100	@ 0x64
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	3328      	adds	r3, #40	@ 0x28
 80016fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001702:	801a      	strh	r2, [r3, #0]

        }


        if(i == 1){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d165      	bne.n	80017d6 <initializeMotors+0x236>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim1;				 // TIMER HANDLER
 800170a:	4a61      	ldr	r2, [pc, #388]	@ (8001890 <initializeMotors+0x2f0>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2164      	movs	r1, #100	@ 0x64
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	330c      	adds	r3, #12
 8001718:	4a62      	ldr	r2, [pc, #392]	@ (80018a4 <initializeMotors+0x304>)
 800171a:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_4; // PWM channel for motor 1
 800171c:	4a5c      	ldr	r2, [pc, #368]	@ (8001890 <initializeMotors+0x2f0>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2164      	movs	r1, #100	@ 0x64
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3310      	adds	r3, #16
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 800172e:	4a58      	ldr	r2, [pc, #352]	@ (8001890 <initializeMotors+0x2f0>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2164      	movs	r1, #100	@ 0x64
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	3302      	adds	r3, #2
 800173c:	2210      	movs	r2, #16
 800173e:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart4;
 8001740:	4a53      	ldr	r2, [pc, #332]	@ (8001890 <initializeMotors+0x2f0>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2164      	movs	r1, #100	@ 0x64
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	3304      	adds	r3, #4
 800174e:	4a56      	ldr	r2, [pc, #344]	@ (80018a8 <initializeMotors+0x308>)
 8001750:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8001752:	4a4f      	ldr	r2, [pc, #316]	@ (8001890 <initializeMotors+0x2f0>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2164      	movs	r1, #100	@ 0x64
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	333c      	adds	r3, #60	@ 0x3c
 8001760:	22c8      	movs	r2, #200	@ 0xc8
 8001762:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP2_GPIO_Port;
 8001764:	4a4a      	ldr	r2, [pc, #296]	@ (8001890 <initializeMotors+0x2f0>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2164      	movs	r1, #100	@ 0x64
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3314      	adds	r3, #20
 8001772:	4a4b      	ldr	r2, [pc, #300]	@ (80018a0 <initializeMotors+0x300>)
 8001774:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP2_Pin;
 8001776:	4a46      	ldr	r2, [pc, #280]	@ (8001890 <initializeMotors+0x2f0>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2164      	movs	r1, #100	@ 0x64
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	3318      	adds	r3, #24
 8001784:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001788:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR2_GPIO_Port;
 800178a:	4a41      	ldr	r2, [pc, #260]	@ (8001890 <initializeMotors+0x2f0>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2164      	movs	r1, #100	@ 0x64
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	331c      	adds	r3, #28
 8001798:	4a41      	ldr	r2, [pc, #260]	@ (80018a0 <initializeMotors+0x300>)
 800179a:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR2_Pin;
 800179c:	4a3c      	ldr	r2, [pc, #240]	@ (8001890 <initializeMotors+0x2f0>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2164      	movs	r1, #100	@ 0x64
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3320      	adds	r3, #32
 80017aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017ae:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN2_GPIO_Port;
 80017b0:	4a37      	ldr	r2, [pc, #220]	@ (8001890 <initializeMotors+0x2f0>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2164      	movs	r1, #100	@ 0x64
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3324      	adds	r3, #36	@ 0x24
 80017be:	4a38      	ldr	r2, [pc, #224]	@ (80018a0 <initializeMotors+0x300>)
 80017c0:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN2_Pin;
 80017c2:	4a33      	ldr	r2, [pc, #204]	@ (8001890 <initializeMotors+0x2f0>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2164      	movs	r1, #100	@ 0x64
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3328      	adds	r3, #40	@ 0x28
 80017d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d4:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d178      	bne.n	80018ce <initializeMotors+0x32e>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim5;				 // TIMER HANDLER
 80017dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001890 <initializeMotors+0x2f0>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2164      	movs	r1, #100	@ 0x64
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	330c      	adds	r3, #12
 80017ea:	4a30      	ldr	r2, [pc, #192]	@ (80018ac <initializeMotors+0x30c>)
 80017ec:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 80017ee:	4a28      	ldr	r2, [pc, #160]	@ (8001890 <initializeMotors+0x2f0>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2164      	movs	r1, #100	@ 0x64
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3310      	adds	r3, #16
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 8001800:	4a23      	ldr	r2, [pc, #140]	@ (8001890 <initializeMotors+0x2f0>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2164      	movs	r1, #100	@ 0x64
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	3302      	adds	r3, #2
 800180e:	2210      	movs	r2, #16
 8001810:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 8001812:	4a1f      	ldr	r2, [pc, #124]	@ (8001890 <initializeMotors+0x2f0>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2164      	movs	r1, #100	@ 0x64
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4413      	add	r3, r2
 800181e:	3304      	adds	r3, #4
 8001820:	4a23      	ldr	r2, [pc, #140]	@ (80018b0 <initializeMotors+0x310>)
 8001822:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 8001824:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <initializeMotors+0x2f0>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2164      	movs	r1, #100	@ 0x64
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	333c      	adds	r3, #60	@ 0x3c
 8001832:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001836:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = STEP3_GPIO_Port;
 8001838:	4a15      	ldr	r2, [pc, #84]	@ (8001890 <initializeMotors+0x2f0>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2164      	movs	r1, #100	@ 0x64
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3314      	adds	r3, #20
 8001846:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <initializeMotors+0x314>)
 8001848:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP3_Pin;
 800184a:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <initializeMotors+0x2f0>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2164      	movs	r1, #100	@ 0x64
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3318      	adds	r3, #24
 8001858:	2201      	movs	r2, #1
 800185a:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR3_GPIO_Port;
 800185c:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <initializeMotors+0x2f0>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2164      	movs	r1, #100	@ 0x64
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	331c      	adds	r3, #28
 800186a:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <initializeMotors+0x300>)
 800186c:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR3_Pin;
 800186e:	4a08      	ldr	r2, [pc, #32]	@ (8001890 <initializeMotors+0x2f0>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2164      	movs	r1, #100	@ 0x64
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3320      	adds	r3, #32
 800187c:	2204      	movs	r2, #4
 800187e:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN3_GPIO_Port;
 8001880:	4a03      	ldr	r2, [pc, #12]	@ (8001890 <initializeMotors+0x2f0>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2164      	movs	r1, #100	@ 0x64
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3324      	adds	r3, #36	@ 0x24
 800188e:	e013      	b.n	80018b8 <initializeMotors+0x318>
 8001890:	20000d3c 	.word	0x20000d3c
 8001894:	20000210 	.word	0x20000210
 8001898:	20000534 	.word	0x20000534
 800189c:	40020400 	.word	0x40020400
 80018a0:	40021000 	.word	0x40021000
 80018a4:	200001c4 	.word	0x200001c4
 80018a8:	20000424 	.word	0x20000424
 80018ac:	200002f4 	.word	0x200002f4
 80018b0:	200004ac 	.word	0x200004ac
 80018b4:	40020000 	.word	0x40020000
 80018b8:	4a3f      	ldr	r2, [pc, #252]	@ (80019b8 <initializeMotors+0x418>)
 80018ba:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN3_Pin;
 80018bc:	4a3f      	ldr	r2, [pc, #252]	@ (80019bc <initializeMotors+0x41c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2164      	movs	r1, #100	@ 0x64
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	3328      	adds	r3, #40	@ 0x28
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	801a      	strh	r2, [r3, #0]


        }

        if(i == 3){
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d163      	bne.n	800199c <initializeMotors+0x3fc>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 80018d4:	4a39      	ldr	r2, [pc, #228]	@ (80019bc <initializeMotors+0x41c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2164      	movs	r1, #100	@ 0x64
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	330c      	adds	r3, #12
 80018e2:	4a37      	ldr	r2, [pc, #220]	@ (80019c0 <initializeMotors+0x420>)
 80018e4:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 80018e6:	4a35      	ldr	r2, [pc, #212]	@ (80019bc <initializeMotors+0x41c>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2164      	movs	r1, #100	@ 0x64
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3310      	adds	r3, #16
 80018f4:	2208      	movs	r2, #8
 80018f6:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80018f8:	4a30      	ldr	r2, [pc, #192]	@ (80019bc <initializeMotors+0x41c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2164      	movs	r1, #100	@ 0x64
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3302      	adds	r3, #2
 8001906:	2210      	movs	r2, #16
 8001908:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 800190a:	4a2c      	ldr	r2, [pc, #176]	@ (80019bc <initializeMotors+0x41c>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2164      	movs	r1, #100	@ 0x64
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	3304      	adds	r3, #4
 8001918:	4a2a      	ldr	r2, [pc, #168]	@ (80019c4 <initializeMotors+0x424>)
 800191a:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 800191c:	4a27      	ldr	r2, [pc, #156]	@ (80019bc <initializeMotors+0x41c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2164      	movs	r1, #100	@ 0x64
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	333c      	adds	r3, #60	@ 0x3c
 800192a:	22c8      	movs	r2, #200	@ 0xc8
 800192c:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP4_GPIO_Port;
 800192e:	4a23      	ldr	r2, [pc, #140]	@ (80019bc <initializeMotors+0x41c>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2164      	movs	r1, #100	@ 0x64
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	3314      	adds	r3, #20
 800193c:	4a22      	ldr	r2, [pc, #136]	@ (80019c8 <initializeMotors+0x428>)
 800193e:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP4_Pin;
 8001940:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <initializeMotors+0x41c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2164      	movs	r1, #100	@ 0x64
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3318      	adds	r3, #24
 800194e:	2201      	movs	r2, #1
 8001950:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR4_GPIO_Port;
 8001952:	4a1a      	ldr	r2, [pc, #104]	@ (80019bc <initializeMotors+0x41c>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2164      	movs	r1, #100	@ 0x64
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	331c      	adds	r3, #28
 8001960:	4a15      	ldr	r2, [pc, #84]	@ (80019b8 <initializeMotors+0x418>)
 8001962:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR4_Pin;
 8001964:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <initializeMotors+0x41c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2164      	movs	r1, #100	@ 0x64
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3320      	adds	r3, #32
 8001972:	2201      	movs	r2, #1
 8001974:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN4_GPIO_Port;
 8001976:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <initializeMotors+0x41c>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2164      	movs	r1, #100	@ 0x64
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3324      	adds	r3, #36	@ 0x24
 8001984:	4a0c      	ldr	r2, [pc, #48]	@ (80019b8 <initializeMotors+0x418>)
 8001986:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN4_Pin;
 8001988:	4a0c      	ldr	r2, [pc, #48]	@ (80019bc <initializeMotors+0x41c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2164      	movs	r1, #100	@ 0x64
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	3328      	adds	r3, #40	@ 0x28
 8001996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800199a:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3301      	adds	r3, #1
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	f77f ae01 	ble.w	80015ac <initializeMotors+0xc>


    }


}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000
 80019bc:	20000d3c 	.word	0x20000d3c
 80019c0:	2000025c 	.word	0x2000025c
 80019c4:	20000644 	.word	0x20000644
 80019c8:	40020400 	.word	0x40020400

080019cc <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    axis->motors[1]->currentPositionMM = 0;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	8852      	ldrh	r2, [r2, #2]
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40
    axis->stepPerUnit = totalStepsPerRevolution / circumference;;
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f103 0014 	add.w	r0, r3, #20
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <initializeAxis+0x98>)
 8001a3a:	210a      	movs	r1, #10
 8001a3c:	f009 fcfe 	bl	800b43c <sniprintf>
    if (motor2 != NULL) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <initializeAxis+0x90>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f103 001e 	add.w	r0, r3, #30
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	4a03      	ldr	r2, [pc, #12]	@ (8001a64 <initializeAxis+0x98>)
 8001a56:	210a      	movs	r1, #10
 8001a58:	f009 fcf0 	bl	800b43c <sniprintf>
    }
}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0800c4f8 	.word	0x0800c4f8

08001a68 <initializeSystem>:

void initializeSystem(){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af02      	add	r7, sp, #8
    // X-axis
    initializeAxis(&axes[0], &motors[0],&motors[2], 40, "Y");
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <initializeSystem+0x2c>)
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2328      	movs	r3, #40	@ 0x28
 8001a74:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <initializeSystem+0x30>)
 8001a76:	4909      	ldr	r1, [pc, #36]	@ (8001a9c <initializeSystem+0x34>)
 8001a78:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <initializeSystem+0x38>)
 8001a7a:	f7ff ffa7 	bl	80019cc <initializeAxis>
    initializeAxis(&axes[1], &motors[1],&motors[3], 8, "X");
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <initializeSystem+0x3c>)
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2308      	movs	r3, #8
 8001a84:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <initializeSystem+0x40>)
 8001a86:	4909      	ldr	r1, [pc, #36]	@ (8001aac <initializeSystem+0x44>)
 8001a88:	4809      	ldr	r0, [pc, #36]	@ (8001ab0 <initializeSystem+0x48>)
 8001a8a:	f7ff ff9f 	bl	80019cc <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[1], &motors[1], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	0800c500 	.word	0x0800c500
 8001a98:	20000e04 	.word	0x20000e04
 8001a9c:	20000d3c 	.word	0x20000d3c
 8001aa0:	20000ecc 	.word	0x20000ecc
 8001aa4:	0800c504 	.word	0x0800c504
 8001aa8:	20000e68 	.word	0x20000e68
 8001aac:	20000da0 	.word	0x20000da0
 8001ab0:	20000ef4 	.word	0x20000ef4

08001ab4 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	213c      	movs	r1, #60	@ 0x3c
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 f952 	bl	8007d6c <HAL_TIM_Encoder_Start>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <CheckConnection>:



#include "extras.h"

bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo1){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, 50);
 8001ada:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001b34 <CheckConnection+0x64>
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8ec 	bl	8001cbc <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 52);
 8001ae4:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001b38 <CheckConnection+0x68>
 8001ae8:	6838      	ldr	r0, [r7, #0]
 8001aea:	f000 f8e7 	bl	8001cbc <SERVO_WritePosition>
	HAL_Delay(2000);
 8001aee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001af2:	f002 f885 	bl	8003c00 <HAL_Delay>
	bool x =0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin) == GPIO_PIN_SET){
 8001afa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001afe:	480f      	ldr	r0, [pc, #60]	@ (8001b3c <CheckConnection+0x6c>)
 8001b00:	f002 ff6a 	bl	80049d8 <HAL_GPIO_ReadPin>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <CheckConnection+0x40>
	     x = true;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	e001      	b.n	8001b14 <CheckConnection+0x44>
	}
	else{
		 x=false;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
	}
	SERVO_WritePosition(hservo, 90);
 8001b14:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001b40 <CheckConnection+0x70>
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f8cf 	bl	8001cbc <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 92);
 8001b1e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001b44 <CheckConnection+0x74>
 8001b22:	6838      	ldr	r0, [r7, #0]
 8001b24:	f000 f8ca 	bl	8001cbc <SERVO_WritePosition>
	return x;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	42480000 	.word	0x42480000
 8001b38:	42500000 	.word	0x42500000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	42b40000 	.word	0x42b40000
 8001b44:	42b80000 	.word	0x42b80000

08001b48 <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f002 ff3d 	bl	80049d8 <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <IsSensorTriggered+0x24>
    	return false;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e000      	b.n	8001b6e <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 8001b6c:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b84:	eeb0 0a67 	vmov.f32	s0, s15
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f80d 	bl	8001ba8 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f005 fd31 	bl	8007600 <HAL_TIM_PWM_Start>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8001bb4:	edd7 7a00 	vldr	s15, [r7]
 8001bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d503      	bpl.n	8001bca <PWM_WriteDuty+0x22>
    duty = 0.0;
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e00a      	b.n	8001be0 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8001bca:	edd7 7a00 	vldr	s15, [r7]
 8001bce:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001c8c <PWM_WriteDuty+0xe4>
 8001bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dd01      	ble.n	8001be0 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c90 <PWM_WriteDuty+0xe8>)
 8001bde:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	3301      	adds	r3, #1
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bf8:	edd7 7a00 	vldr	s15, [r7]
 8001bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c00:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001c8c <PWM_WriteDuty+0xe4>
 8001c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0c:	ee17 3a90 	vmov	r3, s15
 8001c10:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <PWM_WriteDuty+0x7e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c24:	e02c      	b.n	8001c80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d105      	bne.n	8001c3a <PWM_WriteDuty+0x92>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c38:	e022      	b.n	8001c80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d105      	bne.n	8001c4e <PWM_WriteDuty+0xa6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001c4c:	e018      	b.n	8001c80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d105      	bne.n	8001c62 <PWM_WriteDuty+0xba>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c60:	e00e      	b.n	8001c80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d105      	bne.n	8001c76 <PWM_WriteDuty+0xce>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001c74:	e004      	b.n	8001c80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	42c80000 	.word	0x42c80000
 8001c90:	42c80000 	.word	0x42c80000

08001c94 <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 70.0f);
 8001c9c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001cb8 <SERVO_Init+0x24>
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f80b 	bl	8001cbc <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff64 	bl	8001b76 <PWM_Init>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	428c0000 	.word	0x428c0000

08001cbc <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8001cc8:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001d24 <SERVO_WritePosition+0x68>
 8001ccc:	ed97 0a00 	vldr	s0, [r7]
 8001cd0:	f00a f8a5 	bl	800be1e <fminf>
 8001cd4:	eef0 7a40 	vmov.f32	s15, s0
 8001cd8:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001d28 <SERVO_WritePosition+0x6c>
 8001cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce0:	f00a f880 	bl	800bde4 <fmaxf>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cf4:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001d24 <SERVO_WritePosition+0x68>
 8001cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cfc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d04:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d0c:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff46 	bl	8001ba8 <PWM_WriteDuty>
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	43340000 	.word	0x43340000
 8001d28:	00000000 	.word	0x00000000

08001d2c <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0f      	ldr	r2, [pc, #60]	@ (8001d78 <HAL_UART_RxCpltCallback+0x4c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00e      	beq.n	8001d5c <HAL_UART_RxCpltCallback+0x30>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0e      	ldr	r2, [pc, #56]	@ (8001d7c <HAL_UART_RxCpltCallback+0x50>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_UART_RxCpltCallback+0x30>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <HAL_UART_RxCpltCallback+0x54>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_UART_RxCpltCallback+0x30>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <HAL_UART_RxCpltCallback+0x58>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <HAL_UART_RxCpltCallback+0x42>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_UART_RxCpltCallback+0x5c>)
 8001d5e:	2209      	movs	r2, #9
 8001d60:	4619      	mov	r1, r3
 8001d62:	480a      	ldr	r0, [pc, #40]	@ (8001d8c <HAL_UART_RxCpltCallback+0x60>)
 8001d64:	f009 fbf2 	bl	800b54c <memcpy>
        rxBufferReady = 1;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_UART_RxCpltCallback+0x64>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]

    }

    // TODO: UART callback for read from PCB2Gcode

}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40004400 	.word	0x40004400
 8001d7c:	40011400 	.word	0x40011400
 8001d80:	40004c00 	.word	0x40004c00
 8001d84:	40005000 	.word	0x40005000
 8001d88:	200000f5 	.word	0x200000f5
 8001d8c:	20000100 	.word	0x20000100
 8001d90:	20000108 	.word	0x20000108

08001d94 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001da4:	d102      	bne.n	8001dac <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Disable further interrupts for the button

        // Reset the motor steps and trigger motion
    	Flag = 1;
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <HAL_GPIO_EXTI_Callback+0x24>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]


        // Re-enable the interrupt after the motion is complete (done in a later step)

}
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	20000d30 	.word	0x20000d30

08001dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc0:	f001 fec1 	bl	8003b46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc4:	f000 f8f2 	bl	8001fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc8:	f000 fe70 	bl	8002aac <MX_GPIO_Init>
  MX_DMA_Init();
 8001dcc:	f000 fe2c 	bl	8002a28 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001dd0:	f000 fd9c 	bl	800290c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001dd4:	f000 fdfa 	bl	80029cc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8001dd8:	f000 fc22 	bl	8002620 <MX_TIM7_Init>
  MX_TIM4_Init();
 8001ddc:	f000 fb6e 	bl	80024bc <MX_TIM4_Init>
  MX_TIM2_Init();
 8001de0:	f000 fa7c 	bl	80022dc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001de4:	f000 fd62 	bl	80028ac <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001de8:	f008 fd7e 	bl	800a8e8 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001dec:	f000 f98c 	bl	8002108 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001df0:	f000 faec 	bl	80023cc <MX_TIM3_Init>
  MX_TIM14_Init();
 8001df4:	f000 fcac 	bl	8002750 <MX_TIM14_Init>
  MX_TIM5_Init();
 8001df8:	f000 fbb6 	bl	8002568 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001dfc:	f000 fc46 	bl	800268c <MX_TIM9_Init>
  MX_I2C1_Init();
 8001e00:	f000 f942 	bl	8002088 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001e04:	f000 fdb2 	bl	800296c <MX_USART6_UART_Init>
  MX_UART4_Init();
 8001e08:	f000 fcf0 	bl	80027ec <MX_UART4_Init>
  MX_UART5_Init();
 8001e0c:	f000 fd1e 	bl	800284c <MX_UART5_Init>
  MX_TIM1_Init();
 8001e10:	f000 f9b8 	bl	8002184 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(&hservo1);
 8001e14:	4854      	ldr	r0, [pc, #336]	@ (8001f68 <main+0x1ac>)
 8001e16:	f7ff ff3d 	bl	8001c94 <SERVO_Init>
  SERVO_Init(&hservo2);
 8001e1a:	4854      	ldr	r0, [pc, #336]	@ (8001f6c <main+0x1b0>)
 8001e1c:	f7ff ff3a 	bl	8001c94 <SERVO_Init>

  initializeMotors();
 8001e20:	f7ff fbbe 	bl	80015a0 <initializeMotors>
  initializeSystem();
 8001e24:	f7ff fe20 	bl	8001a68 <initializeSystem>
   ENC_Init(&henc1);
 8001e28:	4851      	ldr	r0, [pc, #324]	@ (8001f70 <main+0x1b4>)
 8001e2a:	f7ff fe43 	bl	8001ab4 <ENC_Init>
   //HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);



// TMC2209_setMotorsConfiguration(motors,8,1);
	configureGCONF(&motors[3]);
 8001e2e:	4851      	ldr	r0, [pc, #324]	@ (8001f74 <main+0x1b8>)
 8001e30:	f7ff fa32 	bl	8001298 <configureGCONF>
  setMicrosteppingResolution(&motors[3], 16);
 8001e34:	2110      	movs	r1, #16
 8001e36:	484f      	ldr	r0, [pc, #316]	@ (8001f74 <main+0x1b8>)
 8001e38:	f7ff f8ca 	bl	8000fd0 <setMicrosteppingResolution>
  checkMicrosteppingResolution(&motors[3]);
 8001e3c:	484d      	ldr	r0, [pc, #308]	@ (8001f74 <main+0x1b8>)
 8001e3e:	f7ff f9b9 	bl	80011b4 <checkMicrosteppingResolution>
	configureGCONF(&motors[2]);
 8001e42:	484d      	ldr	r0, [pc, #308]	@ (8001f78 <main+0x1bc>)
 8001e44:	f7ff fa28 	bl	8001298 <configureGCONF>
setMicrosteppingResolution(&motors[2], 16);
 8001e48:	2110      	movs	r1, #16
 8001e4a:	484b      	ldr	r0, [pc, #300]	@ (8001f78 <main+0x1bc>)
 8001e4c:	f7ff f8c0 	bl	8000fd0 <setMicrosteppingResolution>
checkMicrosteppingResolution(&motors[2]);
 8001e50:	4849      	ldr	r0, [pc, #292]	@ (8001f78 <main+0x1bc>)
 8001e52:	f7ff f9af 	bl	80011b4 <checkMicrosteppingResolution>
configureGCONF(&motors[0]);
 8001e56:	4849      	ldr	r0, [pc, #292]	@ (8001f7c <main+0x1c0>)
 8001e58:	f7ff fa1e 	bl	8001298 <configureGCONF>
setMicrosteppingResolution(&motors[0], 16);
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	4847      	ldr	r0, [pc, #284]	@ (8001f7c <main+0x1c0>)
 8001e60:	f7ff f8b6 	bl	8000fd0 <setMicrosteppingResolution>
checkMicrosteppingResolution(&motors[0]);
 8001e64:	4845      	ldr	r0, [pc, #276]	@ (8001f7c <main+0x1c0>)
 8001e66:	f7ff f9a5 	bl	80011b4 <checkMicrosteppingResolution>
//   TMC2209_enable_PDNuart(&motors[0]);
//   TMC2209_read_ifcnt(&motors[0]);
//   TMC2209_SetSpreadCycle(&motors[0], 1);
  // configureGCONF(&motors[2]);
   TMC2209_SetSpeed(&motors[0], 15000);
 8001e6a:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001e6e:	4843      	ldr	r0, [pc, #268]	@ (8001f7c <main+0x1c0>)
 8001e70:	f7fe fe10 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[1], 15000);
 8001e74:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001e78:	4841      	ldr	r0, [pc, #260]	@ (8001f80 <main+0x1c4>)
 8001e7a:	f7fe fe0b 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[2], 15000);
 8001e7e:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001e82:	483d      	ldr	r0, [pc, #244]	@ (8001f78 <main+0x1bc>)
 8001e84:	f7fe fe06 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[3], 15000);
 8001e88:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001e8c:	4839      	ldr	r0, [pc, #228]	@ (8001f74 <main+0x1b8>)
 8001e8e:	f7fe fe01 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetDirection(&motors[2], 0);
 8001e92:	2100      	movs	r1, #0
 8001e94:	4838      	ldr	r0, [pc, #224]	@ (8001f78 <main+0x1bc>)
 8001e96:	f7fe fdd3 	bl	8000a40 <TMC2209_SetDirection>
   TMC2209_Step(&motors[0], 10000);
 8001e9a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001e9e:	4837      	ldr	r0, [pc, #220]	@ (8001f7c <main+0x1c0>)
 8001ea0:	f7fe fea4 	bl	8000bec <TMC2209_Step>
   //TMC2209_Step(&motors[1], 6000);
   TMC2209_Step(&motors[2], 6000);
 8001ea4:	f241 7170 	movw	r1, #6000	@ 0x1770
 8001ea8:	4833      	ldr	r0, [pc, #204]	@ (8001f78 <main+0x1bc>)
 8001eaa:	f7fe fe9f 	bl	8000bec <TMC2209_Step>
   TMC2209_Step(&motors[3], 6000);
 8001eae:	f241 7170 	movw	r1, #6000	@ 0x1770
 8001eb2:	4830      	ldr	r0, [pc, #192]	@ (8001f74 <main+0x1b8>)
 8001eb4:	f7fe fe9a 	bl	8000bec <TMC2209_Step>


  // TMC2209_Step(&motors[2], 10000);
  // TMC2209_Step(&motors[3], 1000);

   LCD_I2C_Init(&hlcd3);
 8001eb8:	4832      	ldr	r0, [pc, #200]	@ (8001f84 <main+0x1c8>)
 8001eba:	f7fe fc0d 	bl	80006d8 <LCD_I2C_Init>
   LCD_I2C_Clear(&hlcd3);
 8001ebe:	4831      	ldr	r0, [pc, #196]	@ (8001f84 <main+0x1c8>)
 8001ec0:	f7fe fca8 	bl	8000814 <LCD_I2C_Clear>
   LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	482f      	ldr	r0, [pc, #188]	@ (8001f84 <main+0x1c8>)
 8001ec8:	f7fe fcd6 	bl	8000878 <LCD_I2C_DisplaySequentialGlossyText>

   spiPre = SD_SPI_HANDLE.Instance->CR1;
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f88 <main+0x1cc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f8c <main+0x1d0>)
 8001ed4:	6013      	str	r3, [r2, #0]

   //sd_card_read_gcode();
   spiPre = SD_SPI_HANDLE.Instance->CR1;
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f88 <main+0x1cc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f8c <main+0x1d0>)
 8001ede:	6013      	str	r3, [r2, #0]
   //TMC2209_MoveTo(&axes[0], 0, 100); // Axis X, Motor X1*/
   //TMC2209_MoveTo(&axes[1], 0, -100); // Axis X, Motor X1
 // Axis X, Motor X1
   //TMC2209_Step(&motors[1], 3200);
//   TMC2209_SetDirection(&motors[0], dir);
     TMC2209_SetSpeed(&motors[0], 25000);
 8001ee0:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8001ee4:	4825      	ldr	r0, [pc, #148]	@ (8001f7c <main+0x1c0>)
 8001ee6:	f7fe fdd5 	bl	8000a94 <TMC2209_SetSpeed>
//   TMC2209_SetDirection(&motors[1], dir);
     TMC2209_SetSpeed(&motors[1], 12000);
 8001eea:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8001eee:	4824      	ldr	r0, [pc, #144]	@ (8001f80 <main+0x1c4>)
 8001ef0:	f7fe fdd0 	bl	8000a94 <TMC2209_SetSpeed>
//   TMC2209_SetDirection(&motors[2], dir);
   TMC2209_SetSpeed(&motors[2], 25000);
 8001ef4:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8001ef8:	481f      	ldr	r0, [pc, #124]	@ (8001f78 <main+0x1bc>)
 8001efa:	f7fe fdcb 	bl	8000a94 <TMC2209_SetSpeed>
   //TMC2209_Step(&motors[3], 6400);
   //TMC2209_EnableDriver(&motors[0], 1);
   //TMC2209_EnableDriver(&motors[1], 1);
   //TMC2209_EnableDriver(&motors[2], 1);
   //TMC2209_EnableDriver(&motors[3], 1);
   CheckConnection(&hservo2,&hservo1);
 8001efe:	491a      	ldr	r1, [pc, #104]	@ (8001f68 <main+0x1ac>)
 8001f00:	481a      	ldr	r0, [pc, #104]	@ (8001f6c <main+0x1b0>)
 8001f02:	f7ff fde5 	bl	8001ad0 <CheckConnection>
//   HAL_Delay(300);
//   SERVO_WritePosition(&hservo2, 40);
//   HAL_Delay(300);
   while (1){

      if (Flag) // Adjust based on button state
 8001f06:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <main+0x1d4>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <main+0x160>
    	         //TMC2209_Step(&motors[1], 16000);
    	         //TMC2209_Start(&motors[0]);
    	         //TMC2209_Start(&motors[1]);


    	         MotorsHoming(&motors);
 8001f10:	481a      	ldr	r0, [pc, #104]	@ (8001f7c <main+0x1c0>)
 8001f12:	f7ff f9d7 	bl	80012c4 <MotorsHoming>
//    	         stepsTaken[0] = 0;
//    	         HAL_Delay(200);
    	         //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
    	  	  	 Flag = 0;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <main+0x1d4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]

      }
      //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
//
     es = IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin);
 8001f1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f20:	481c      	ldr	r0, [pc, #112]	@ (8001f94 <main+0x1d8>)
 8001f22:	f7ff fe11 	bl	8001b48 <IsSensorTriggered>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <main+0x1dc>)
 8001f2c:	701a      	strb	r2, [r3, #0]
      x = IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin);
 8001f2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f32:	481a      	ldr	r0, [pc, #104]	@ (8001f9c <main+0x1e0>)
 8001f34:	f7ff fe08 	bl	8001b48 <IsSensorTriggered>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <main+0x1e4>)
 8001f3e:	701a      	strb	r2, [r3, #0]
      sensorX1=IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin);
 8001f40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f44:	4813      	ldr	r0, [pc, #76]	@ (8001f94 <main+0x1d8>)
 8001f46:	f7ff fdff 	bl	8001b48 <IsSensorTriggered>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <main+0x1e8>)
 8001f50:	701a      	strb	r2, [r3, #0]
      xx =IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin);
 8001f52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f56:	4811      	ldr	r0, [pc, #68]	@ (8001f9c <main+0x1e0>)
 8001f58:	f7ff fdf6 	bl	8001b48 <IsSensorTriggered>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <main+0x1ec>)
 8001f62:	701a      	strb	r2, [r3, #0]
      if (Flag) // Adjust based on button state
 8001f64:	e7cf      	b.n	8001f06 <main+0x14a>
 8001f66:	bf00      	nop
 8001f68:	2000002c 	.word	0x2000002c
 8001f6c:	2000003c 	.word	0x2000003c
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000e68 	.word	0x20000e68
 8001f78:	20000e04 	.word	0x20000e04
 8001f7c:	20000d3c 	.word	0x20000d3c
 8001f80:	20000da0 	.word	0x20000da0
 8001f84:	20000018 	.word	0x20000018
 8001f88:	20000160 	.word	0x20000160
 8001f8c:	20000d34 	.word	0x20000d34
 8001f90:	20000d30 	.word	0x20000d30
 8001f94:	40021400 	.word	0x40021400
 8001f98:	20000d2c 	.word	0x20000d2c
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	20000d2d 	.word	0x20000d2d
 8001fa4:	20000d2f 	.word	0x20000d2f
 8001fa8:	20000d2e 	.word	0x20000d2e

08001fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b094      	sub	sp, #80	@ 0x50
 8001fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb2:	f107 0320 	add.w	r3, r7, #32
 8001fb6:	2230      	movs	r2, #48	@ 0x30
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f009 fa92 	bl	800b4e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fd0:	f003 faec 	bl	80055ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <SystemClock_Config+0xd4>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	4a29      	ldr	r2, [pc, #164]	@ (8002080 <SystemClock_Config+0xd4>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe0:	4b27      	ldr	r3, [pc, #156]	@ (8002080 <SystemClock_Config+0xd4>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <SystemClock_Config+0xd8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a24      	ldr	r2, [pc, #144]	@ (8002084 <SystemClock_Config+0xd8>)
 8001ff2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <SystemClock_Config+0xd8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002004:	2301      	movs	r3, #1
 8002006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002008:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200e:	2302      	movs	r3, #2
 8002010:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002012:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002018:	2304      	movs	r3, #4
 800201a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800201c:	23d8      	movs	r3, #216	@ 0xd8
 800201e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002020:	2302      	movs	r3, #2
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002024:	2309      	movs	r3, #9
 8002026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fb1d 	bl	800566c <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002038:	f000 fe54 	bl	8002ce4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800203c:	f003 fac6 	bl	80055cc <HAL_PWREx_EnableOverDrive>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002046:	f000 fe4d 	bl	8002ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204a:	230f      	movs	r3, #15
 800204c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204e:	2302      	movs	r3, #2
 8002050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002056:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800205a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800205c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002060:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	2107      	movs	r1, #7
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fda3 	bl	8005bb4 <HAL_RCC_ClockConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002074:	f000 fe36 	bl	8002ce4 <Error_Handler>
  }
}
 8002078:	bf00      	nop
 800207a:	3750      	adds	r7, #80	@ 0x50
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	40007000 	.word	0x40007000

08002088 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <MX_I2C1_Init+0x74>)
 800208e:	4a1c      	ldr	r2, [pc, #112]	@ (8002100 <MX_I2C1_Init+0x78>)
 8002090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002092:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <MX_I2C1_Init+0x74>)
 8002094:	4a1b      	ldr	r2, [pc, #108]	@ (8002104 <MX_I2C1_Init+0x7c>)
 8002096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <MX_I2C1_Init+0x74>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020b6:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020c2:	480e      	ldr	r0, [pc, #56]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020c4:	f002 fcd2 	bl	8004a6c <HAL_I2C_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020ce:	f000 fe09 	bl	8002ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020d2:	2100      	movs	r1, #0
 80020d4:	4809      	ldr	r0, [pc, #36]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020d6:	f003 f897 	bl	8005208 <HAL_I2CEx_ConfigAnalogFilter>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020e0:	f000 fe00 	bl	8002ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020e4:	2100      	movs	r1, #0
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020e8:	f003 f8d9 	bl	800529e <HAL_I2CEx_ConfigDigitalFilter>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020f2:	f000 fdf7 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000010c 	.word	0x2000010c
 8002100:	40005400 	.word	0x40005400
 8002104:	20404768 	.word	0x20404768

08002108 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <MX_SPI2_Init+0x74>)
 800210e:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <MX_SPI2_Init+0x78>)
 8002110:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002112:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <MX_SPI2_Init+0x74>)
 8002114:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002118:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800211a:	4b18      	ldr	r3, [pc, #96]	@ (800217c <MX_SPI2_Init+0x74>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002120:	4b16      	ldr	r3, [pc, #88]	@ (800217c <MX_SPI2_Init+0x74>)
 8002122:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002126:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002128:	4b14      	ldr	r3, [pc, #80]	@ (800217c <MX_SPI2_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800212e:	4b13      	ldr	r3, [pc, #76]	@ (800217c <MX_SPI2_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <MX_SPI2_Init+0x74>)
 8002136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800213a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <MX_SPI2_Init+0x74>)
 800213e:	2238      	movs	r2, #56	@ 0x38
 8002140:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_SPI2_Init+0x74>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_SPI2_Init+0x74>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <MX_SPI2_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_SPI2_Init+0x74>)
 8002156:	2207      	movs	r2, #7
 8002158:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <MX_SPI2_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_SPI2_Init+0x74>)
 8002162:	2208      	movs	r2, #8
 8002164:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <MX_SPI2_Init+0x74>)
 8002168:	f004 fb3a 	bl	80067e0 <HAL_SPI_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002172:	f000 fdb7 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000160 	.word	0x20000160
 8002180:	40003800 	.word	0x40003800

08002184 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b09a      	sub	sp, #104	@ 0x68
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
 80021b4:	615a      	str	r2, [r3, #20]
 80021b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	222c      	movs	r2, #44	@ 0x2c
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f009 f990 	bl	800b4e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021c4:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80021c6:	4a44      	ldr	r2, [pc, #272]	@ (80022d8 <MX_TIM1_Init+0x154>)
 80021c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 80021ca:	4b42      	ldr	r3, [pc, #264]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80021cc:	22d7      	movs	r2, #215	@ 0xd7
 80021ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b40      	ldr	r3, [pc, #256]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80021d6:	4b3f      	ldr	r3, [pc, #252]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80021d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021e4:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b3a      	ldr	r3, [pc, #232]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021f0:	4838      	ldr	r0, [pc, #224]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80021f2:	f005 f8bf 	bl	8007374 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80021fc:	f000 fd72 	bl	8002ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002204:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002206:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800220a:	4619      	mov	r1, r3
 800220c:	4831      	ldr	r0, [pc, #196]	@ (80022d4 <MX_TIM1_Init+0x150>)
 800220e:	f006 f857 	bl	80082c0 <HAL_TIM_ConfigClockSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002218:	f000 fd64 	bl	8002ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800221c:	482d      	ldr	r0, [pc, #180]	@ (80022d4 <MX_TIM1_Init+0x150>)
 800221e:	f005 f998 	bl	8007552 <HAL_TIM_PWM_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002228:	f000 fd5c 	bl	8002ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002238:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800223c:	4619      	mov	r1, r3
 800223e:	4825      	ldr	r0, [pc, #148]	@ (80022d4 <MX_TIM1_Init+0x150>)
 8002240:	f006 fcfa 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800224a:	f000 fd4b 	bl	8002ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224e:	2360      	movs	r3, #96	@ 0x60
 8002250:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8002252:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002256:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002258:	2300      	movs	r3, #0
 800225a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002268:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800226c:	220c      	movs	r2, #12
 800226e:	4619      	mov	r1, r3
 8002270:	4818      	ldr	r0, [pc, #96]	@ (80022d4 <MX_TIM1_Init+0x150>)
 8002272:	f005 ff11 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800227c:	f000 fd32 	bl	8002ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002294:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002298:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80022b6:	f006 fd4d 	bl	8008d54 <HAL_TIMEx_ConfigBreakDeadTime>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80022c0:	f000 fd10 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022c4:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <MX_TIM1_Init+0x150>)
 80022c6:	f000 ff13 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 80022ca:	bf00      	nop
 80022cc:	3768      	adds	r7, #104	@ 0x68
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200001c4 	.word	0x200001c4
 80022d8:	40010000 	.word	0x40010000

080022dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08e      	sub	sp, #56	@ 0x38
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fc:	463b      	mov	r3, r7
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]
 800230a:	615a      	str	r2, [r3, #20]
 800230c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800230e:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <MX_TIM2_Init+0xec>)
 8002310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002314:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 8002316:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <MX_TIM2_Init+0xec>)
 8002318:	22d7      	movs	r2, #215	@ 0xd7
 800231a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <MX_TIM2_Init+0xec>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002322:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <MX_TIM2_Init+0xec>)
 8002324:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <MX_TIM2_Init+0xec>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <MX_TIM2_Init+0xec>)
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002336:	4824      	ldr	r0, [pc, #144]	@ (80023c8 <MX_TIM2_Init+0xec>)
 8002338:	f005 f81c 	bl	8007374 <HAL_TIM_Base_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002342:	f000 fccf 	bl	8002ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002346:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800234c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002350:	4619      	mov	r1, r3
 8002352:	481d      	ldr	r0, [pc, #116]	@ (80023c8 <MX_TIM2_Init+0xec>)
 8002354:	f005 ffb4 	bl	80082c0 <HAL_TIM_ConfigClockSource>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800235e:	f000 fcc1 	bl	8002ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002362:	4819      	ldr	r0, [pc, #100]	@ (80023c8 <MX_TIM2_Init+0xec>)
 8002364:	f005 f8f5 	bl	8007552 <HAL_TIM_PWM_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800236e:	f000 fcb9 	bl	8002ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	4619      	mov	r1, r3
 8002380:	4811      	ldr	r0, [pc, #68]	@ (80023c8 <MX_TIM2_Init+0xec>)
 8002382:	f006 fc59 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800238c:	f000 fcaa 	bl	8002ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002390:	2360      	movs	r3, #96	@ 0x60
 8002392:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002394:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002398:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023a2:	463b      	mov	r3, r7
 80023a4:	2208      	movs	r2, #8
 80023a6:	4619      	mov	r1, r3
 80023a8:	4807      	ldr	r0, [pc, #28]	@ (80023c8 <MX_TIM2_Init+0xec>)
 80023aa:	f005 fe75 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80023b4:	f000 fc96 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023b8:	4803      	ldr	r0, [pc, #12]	@ (80023c8 <MX_TIM2_Init+0xec>)
 80023ba:	f000 fe99 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 80023be:	bf00      	nop
 80023c0:	3738      	adds	r7, #56	@ 0x38
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000210 	.word	0x20000210

080023cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	@ 0x38
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ec:	463b      	mov	r3, r7
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	611a      	str	r2, [r3, #16]
 80023fa:	615a      	str	r2, [r3, #20]
 80023fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023fe:	4b2d      	ldr	r3, [pc, #180]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002400:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <MX_TIM3_Init+0xec>)
 8002402:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8002404:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002406:	22d7      	movs	r2, #215	@ 0xd7
 8002408:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b2a      	ldr	r3, [pc, #168]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002410:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002412:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002416:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002418:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241e:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002424:	4823      	ldr	r0, [pc, #140]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002426:	f004 ffa5 	bl	8007374 <HAL_TIM_Base_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002430:	f000 fc58 	bl	8002ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800243a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800243e:	4619      	mov	r1, r3
 8002440:	481c      	ldr	r0, [pc, #112]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002442:	f005 ff3d 	bl	80082c0 <HAL_TIM_ConfigClockSource>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800244c:	f000 fc4a 	bl	8002ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002450:	4818      	ldr	r0, [pc, #96]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002452:	f005 f87e 	bl	8007552 <HAL_TIM_PWM_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800245c:	f000 fc42 	bl	8002ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	4619      	mov	r1, r3
 800246e:	4811      	ldr	r0, [pc, #68]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002470:	f006 fbe2 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800247a:	f000 fc33 	bl	8002ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247e:	2360      	movs	r3, #96	@ 0x60
 8002480:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002482:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002486:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002490:	463b      	mov	r3, r7
 8002492:	2208      	movs	r2, #8
 8002494:	4619      	mov	r1, r3
 8002496:	4807      	ldr	r0, [pc, #28]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 8002498:	f005 fdfe 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80024a2:	f000 fc1f 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024a6:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <MX_TIM3_Init+0xe8>)
 80024a8:	f000 fe22 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 80024ac:	bf00      	nop
 80024ae:	3738      	adds	r7, #56	@ 0x38
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000025c 	.word	0x2000025c
 80024b8:	40000400 	.word	0x40000400

080024bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	@ 0x30
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	2224      	movs	r2, #36	@ 0x24
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f009 f80a 	bl	800b4e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d0:	463b      	mov	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <MX_TIM4_Init+0xa4>)
 80024dc:	4a21      	ldr	r2, [pc, #132]	@ (8002564 <MX_TIM4_Init+0xa8>)
 80024de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <MX_TIM4_Init+0xa4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <MX_TIM4_Init+0xa4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <MX_TIM4_Init+0xa4>)
 80024ee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80024f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <MX_TIM4_Init+0xa4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <MX_TIM4_Init+0xa4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002500:	2303      	movs	r3, #3
 8002502:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002508:	2301      	movs	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002510:	230f      	movs	r3, #15
 8002512:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002520:	230f      	movs	r3, #15
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	4619      	mov	r1, r3
 800252a:	480d      	ldr	r0, [pc, #52]	@ (8002560 <MX_TIM4_Init+0xa4>)
 800252c:	f005 fb78 	bl	8007c20 <HAL_TIM_Encoder_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002536:	f000 fbd5 	bl	8002ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002542:	463b      	mov	r3, r7
 8002544:	4619      	mov	r1, r3
 8002546:	4806      	ldr	r0, [pc, #24]	@ (8002560 <MX_TIM4_Init+0xa4>)
 8002548:	f006 fb76 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002552:	f000 fbc7 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	3730      	adds	r7, #48	@ 0x30
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200002a8 	.word	0x200002a8
 8002564:	40000800 	.word	0x40000800

08002568 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257a:	463b      	mov	r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
 8002588:	615a      	str	r2, [r3, #20]
 800258a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800258c:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <MX_TIM5_Init+0xb0>)
 800258e:	4a23      	ldr	r2, [pc, #140]	@ (800261c <MX_TIM5_Init+0xb4>)
 8002590:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 8002592:	4b21      	ldr	r3, [pc, #132]	@ (8002618 <MX_TIM5_Init+0xb0>)
 8002594:	22d7      	movs	r2, #215	@ 0xd7
 8002596:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <MX_TIM5_Init+0xb0>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <MX_TIM5_Init+0xb0>)
 80025a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <MX_TIM5_Init+0xb0>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <MX_TIM5_Init+0xb0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80025b2:	4819      	ldr	r0, [pc, #100]	@ (8002618 <MX_TIM5_Init+0xb0>)
 80025b4:	f004 ffcd 	bl	8007552 <HAL_TIM_PWM_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80025be:	f000 fb91 	bl	8002ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025ca:	f107 031c 	add.w	r3, r7, #28
 80025ce:	4619      	mov	r1, r3
 80025d0:	4811      	ldr	r0, [pc, #68]	@ (8002618 <MX_TIM5_Init+0xb0>)
 80025d2:	f006 fb31 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80025dc:	f000 fb82 	bl	8002ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e0:	2360      	movs	r3, #96	@ 0x60
 80025e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80025e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80025e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	2200      	movs	r2, #0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4807      	ldr	r0, [pc, #28]	@ (8002618 <MX_TIM5_Init+0xb0>)
 80025fa:	f005 fd4d 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002604:	f000 fb6e 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002608:	4803      	ldr	r0, [pc, #12]	@ (8002618 <MX_TIM5_Init+0xb0>)
 800260a:	f000 fd71 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	@ 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200002f4 	.word	0x200002f4
 800261c:	40000c00 	.word	0x40000c00

08002620 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <MX_TIM7_Init+0x64>)
 8002632:	4a15      	ldr	r2, [pc, #84]	@ (8002688 <MX_TIM7_Init+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8002636:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <MX_TIM7_Init+0x64>)
 8002638:	22d7      	movs	r2, #215	@ 0xd7
 800263a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MX_TIM7_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <MX_TIM7_Init+0x64>)
 8002644:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002648:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <MX_TIM7_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <MX_TIM7_Init+0x64>)
 8002652:	f004 fe8f 	bl	8007374 <HAL_TIM_Base_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800265c:	f000 fb42 	bl	8002ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	4619      	mov	r1, r3
 800266c:	4805      	ldr	r0, [pc, #20]	@ (8002684 <MX_TIM7_Init+0x64>)
 800266e:	f006 fae3 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002678:	f000 fb34 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000340 	.word	0x20000340
 8002688:	40001400 	.word	0x40001400

0800268c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	@ 0x30
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002692:	f107 0320 	add.w	r3, r7, #32
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]
 80026ae:	615a      	str	r2, [r3, #20]
 80026b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80026b2:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <MX_TIM9_Init+0xbc>)
 80026b4:	4a25      	ldr	r2, [pc, #148]	@ (800274c <MX_TIM9_Init+0xc0>)
 80026b6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80026b8:	4b23      	ldr	r3, [pc, #140]	@ (8002748 <MX_TIM9_Init+0xbc>)
 80026ba:	226b      	movs	r2, #107	@ 0x6b
 80026bc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <MX_TIM9_Init+0xbc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 80026c4:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <MX_TIM9_Init+0xbc>)
 80026c6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80026ca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002748 <MX_TIM9_Init+0xbc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <MX_TIM9_Init+0xbc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80026d8:	481b      	ldr	r0, [pc, #108]	@ (8002748 <MX_TIM9_Init+0xbc>)
 80026da:	f004 fe4b 	bl	8007374 <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80026e4:	f000 fafe 	bl	8002ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	4619      	mov	r1, r3
 80026f4:	4814      	ldr	r0, [pc, #80]	@ (8002748 <MX_TIM9_Init+0xbc>)
 80026f6:	f005 fde3 	bl	80082c0 <HAL_TIM_ConfigClockSource>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002700:	f000 faf0 	bl	8002ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002704:	4810      	ldr	r0, [pc, #64]	@ (8002748 <MX_TIM9_Init+0xbc>)
 8002706:	f004 ff24 	bl	8007552 <HAL_TIM_PWM_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002710:	f000 fae8 	bl	8002ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002714:	2360      	movs	r3, #96	@ 0x60
 8002716:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002718:	230a      	movs	r3, #10
 800271a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2200      	movs	r2, #0
 8002728:	4619      	mov	r1, r3
 800272a:	4807      	ldr	r0, [pc, #28]	@ (8002748 <MX_TIM9_Init+0xbc>)
 800272c:	f005 fcb4 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002736:	f000 fad5 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800273a:	4803      	ldr	r0, [pc, #12]	@ (8002748 <MX_TIM9_Init+0xbc>)
 800273c:	f000 fcd8 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 8002740:	bf00      	nop
 8002742:	3730      	adds	r7, #48	@ 0x30
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000038c 	.word	0x2000038c
 800274c:	40014000 	.word	0x40014000

08002750 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
 8002764:	615a      	str	r2, [r3, #20]
 8002766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002768:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <MX_TIM14_Init+0x94>)
 800276a:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <MX_TIM14_Init+0x98>)
 800276c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 800276e:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <MX_TIM14_Init+0x94>)
 8002770:	226b      	movs	r2, #107	@ 0x6b
 8002772:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <MX_TIM14_Init+0x94>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <MX_TIM14_Init+0x94>)
 800277c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002780:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <MX_TIM14_Init+0x94>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <MX_TIM14_Init+0x94>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800278e:	4815      	ldr	r0, [pc, #84]	@ (80027e4 <MX_TIM14_Init+0x94>)
 8002790:	f004 fdf0 	bl	8007374 <HAL_TIM_Base_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800279a:	f000 faa3 	bl	8002ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800279e:	4811      	ldr	r0, [pc, #68]	@ (80027e4 <MX_TIM14_Init+0x94>)
 80027a0:	f004 fed7 	bl	8007552 <HAL_TIM_PWM_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80027aa:	f000 fa9b 	bl	8002ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ae:	2360      	movs	r3, #96	@ 0x60
 80027b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80027b2:	230a      	movs	r3, #10
 80027b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4807      	ldr	r0, [pc, #28]	@ (80027e4 <MX_TIM14_Init+0x94>)
 80027c6:	f005 fc67 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80027d0:	f000 fa88 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80027d4:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <MX_TIM14_Init+0x94>)
 80027d6:	f000 fc8b 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200003d8 	.word	0x200003d8
 80027e8:	40002000 	.word	0x40002000

080027ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <MX_UART4_Init+0x58>)
 80027f2:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <MX_UART4_Init+0x5c>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027f6:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <MX_UART4_Init+0x58>)
 80027f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <MX_UART4_Init+0x58>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <MX_UART4_Init+0x58>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <MX_UART4_Init+0x58>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <MX_UART4_Init+0x58>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <MX_UART4_Init+0x58>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <MX_UART4_Init+0x58>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <MX_UART4_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <MX_UART4_Init+0x58>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	@ (8002844 <MX_UART4_Init+0x58>)
 8002830:	f006 fb2c 	bl	8008e8c <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800283a:	f000 fa53 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000424 	.word	0x20000424
 8002848:	40004c00 	.word	0x40004c00

0800284c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <MX_UART5_Init+0x58>)
 8002852:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <MX_UART5_Init+0x5c>)
 8002854:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <MX_UART5_Init+0x58>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <MX_UART5_Init+0x58>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <MX_UART5_Init+0x58>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <MX_UART5_Init+0x58>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <MX_UART5_Init+0x58>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <MX_UART5_Init+0x58>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <MX_UART5_Init+0x58>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002882:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <MX_UART5_Init+0x58>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <MX_UART5_Init+0x58>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <MX_UART5_Init+0x58>)
 8002890:	f006 fafc 	bl	8008e8c <HAL_UART_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800289a:	f000 fa23 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200004ac 	.word	0x200004ac
 80028a8:	40005000 	.word	0x40005000

080028ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028b0:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028b2:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <MX_USART2_UART_Init+0x5c>)
 80028b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028d2:	220c      	movs	r2, #12
 80028d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028dc:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ee:	4805      	ldr	r0, [pc, #20]	@ (8002904 <MX_USART2_UART_Init+0x58>)
 80028f0:	f006 facc 	bl	8008e8c <HAL_UART_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80028fa:	f000 f9f3 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000534 	.word	0x20000534
 8002908:	40004400 	.word	0x40004400

0800290c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 8002912:	4a15      	ldr	r2, [pc, #84]	@ (8002968 <MX_USART3_UART_Init+0x5c>)
 8002914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8002916:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 8002918:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 800291c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800294e:	4805      	ldr	r0, [pc, #20]	@ (8002964 <MX_USART3_UART_Init+0x58>)
 8002950:	f006 fa9c 	bl	8008e8c <HAL_UART_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800295a:	f000 f9c3 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200005bc 	.word	0x200005bc
 8002968:	40004800 	.word	0x40004800

0800296c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002970:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 8002972:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <MX_USART6_UART_Init+0x5c>)
 8002974:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002976:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 8002978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800297c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 8002992:	220c      	movs	r2, #12
 8002994:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <MX_USART6_UART_Init+0x58>)
 80029b0:	f006 fa6c 	bl	8008e8c <HAL_UART_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80029ba:	f000 f993 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000644 	.word	0x20000644
 80029c8:	40011400 	.word	0x40011400

080029cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80029d0:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80029d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80029d8:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029da:	2206      	movs	r2, #6
 80029dc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80029de:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029e0:	2202      	movs	r2, #2
 80029e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029ec:	2202      	movs	r2, #2
 80029ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a0e:	4805      	ldr	r0, [pc, #20]	@ (8002a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a10:	f002 fc91 	bl	8005336 <HAL_PCD_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002a1a:	f000 f963 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000084c 	.word	0x2000084c

08002a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <MX_DMA_Init+0x80>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <MX_DMA_Init+0x80>)
 8002a34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <MX_DMA_Init+0x80>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a46:	4b18      	ldr	r3, [pc, #96]	@ (8002aa8 <MX_DMA_Init+0x80>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	4a17      	ldr	r2, [pc, #92]	@ (8002aa8 <MX_DMA_Init+0x80>)
 8002a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <MX_DMA_Init+0x80>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	200b      	movs	r0, #11
 8002a64:	f001 f9cb 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a68:	200b      	movs	r0, #11
 8002a6a:	f001 f9e4 	bl	8003e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	200d      	movs	r0, #13
 8002a74:	f001 f9c3 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002a78:	200d      	movs	r0, #13
 8002a7a:	f001 f9dc 	bl	8003e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	2010      	movs	r0, #16
 8002a84:	f001 f9bb 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002a88:	2010      	movs	r0, #16
 8002a8a:	f001 f9d4 	bl	8003e36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	2039      	movs	r0, #57	@ 0x39
 8002a94:	f001 f9b3 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002a98:	2039      	movs	r0, #57	@ 0x39
 8002a9a:	f001 f9cc 	bl	8003e36 <HAL_NVIC_EnableIRQ>

}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800

08002aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08e      	sub	sp, #56	@ 0x38
 8002ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac2:	4b81      	ldr	r3, [pc, #516]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4a80      	ldr	r2, [pc, #512]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ace:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	4a7a      	ldr	r2, [pc, #488]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae6:	4b78      	ldr	r3, [pc, #480]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af2:	4b75      	ldr	r3, [pc, #468]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a74      	ldr	r2, [pc, #464]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002af8:	f043 0320 	orr.w	r3, r3, #32
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b72      	ldr	r3, [pc, #456]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b16:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b69      	ldr	r3, [pc, #420]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	4a68      	ldr	r2, [pc, #416]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2e:	4b66      	ldr	r3, [pc, #408]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	4b63      	ldr	r3, [pc, #396]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	4a62      	ldr	r2, [pc, #392]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b46:	4b60      	ldr	r3, [pc, #384]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b52:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	4a5c      	ldr	r2, [pc, #368]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b6a:	4b57      	ldr	r3, [pc, #348]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	4a56      	ldr	r2, [pc, #344]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b76:	4b54      	ldr	r3, [pc, #336]	@ (8002cc8 <MX_GPIO_Init+0x21c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8002b82:	2200      	movs	r2, #0
 8002b84:	f249 5185 	movw	r1, #38277	@ 0x9585
 8002b88:	4850      	ldr	r0, [pc, #320]	@ (8002ccc <MX_GPIO_Init+0x220>)
 8002b8a:	f001 ff3d 	bl	8004a08 <HAL_GPIO_WritePin>
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENN1_Pin|SPI_cs_Pin, GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002b94:	484e      	ldr	r0, [pc, #312]	@ (8002cd0 <MX_GPIO_Init+0x224>)
 8002b96:	f001 ff37 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2140      	movs	r1, #64	@ 0x40
 8002b9e:	484d      	ldr	r0, [pc, #308]	@ (8002cd4 <MX_GPIO_Init+0x228>)
 8002ba0:	f001 ff32 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR3_Pin ENN3_Pin ENN4_Pin ENN2_Pin
                           DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8002ba4:	f249 5385 	movw	r3, #38277	@ 0x9585
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002baa:	2301      	movs	r3, #1
 8002bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4843      	ldr	r0, [pc, #268]	@ (8002ccc <MX_GPIO_Init+0x220>)
 8002bbe:	f001 fd5f 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002bc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	483f      	ldr	r0, [pc, #252]	@ (8002cd8 <MX_GPIO_Init+0x22c>)
 8002bda:	f001 fd51 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnDown_Pin BtnUp_Pin EndStop1_Pin EndStop4_Pin
                           BtnDownF15_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin|BtnUp_Pin|EndStop1_Pin|EndStop4_Pin
 8002bde:	f24e 0303 	movw	r3, #57347	@ 0xe003
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BtnDownF15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	483a      	ldr	r0, [pc, #232]	@ (8002cdc <MX_GPIO_Init+0x230>)
 8002bf4:	f001 fd44 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnLeft_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin|USB_OverCurrent_Pin;
 8002bf8:	2381      	movs	r3, #129	@ 0x81
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4832      	ldr	r0, [pc, #200]	@ (8002cd4 <MX_GPIO_Init+0x228>)
 8002c0c:	f001 fd38 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop2_Pin EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop2_Pin|EndStop3_Pin;
 8002c10:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c22:	4619      	mov	r1, r3
 8002c24:	4829      	ldr	r0, [pc, #164]	@ (8002ccc <MX_GPIO_Init+0x220>)
 8002c26:	f001 fd2b 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8002c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8002c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4823      	ldr	r0, [pc, #140]	@ (8002ccc <MX_GPIO_Init+0x220>)
 8002c40:	f001 fd1e 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENN1_Pin SPI_cs_Pin */
  GPIO_InitStruct.Pin = ENN1_Pin|SPI_cs_Pin;
 8002c44:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	481c      	ldr	r0, [pc, #112]	@ (8002cd0 <MX_GPIO_Init+0x224>)
 8002c5e:	f001 fd0f 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBtn_Pin */
  GPIO_InitStruct.Pin = EncoderBtn_Pin;
 8002c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EncoderBtn_GPIO_Port, &GPIO_InitStruct);
 8002c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c74:	4619      	mov	r1, r3
 8002c76:	481a      	ldr	r0, [pc, #104]	@ (8002ce0 <MX_GPIO_Init+0x234>)
 8002c78:	f001 fd02 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002c7c:	2340      	movs	r3, #64	@ 0x40
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c90:	4619      	mov	r1, r3
 8002c92:	4810      	ldr	r0, [pc, #64]	@ (8002cd4 <MX_GPIO_Init+0x228>)
 8002c94:	f001 fcf4 	bl	8004680 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnCtr_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin|BtnRight_Pin;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca8:	4619      	mov	r1, r3
 8002caa:	480d      	ldr	r0, [pc, #52]	@ (8002ce0 <MX_GPIO_Init+0x234>)
 8002cac:	f001 fce8 	bl	8004680 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2028      	movs	r0, #40	@ 0x28
 8002cb6:	f001 f8a2 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cba:	2028      	movs	r0, #40	@ 0x28
 8002cbc:	f001 f8bb 	bl	8003e36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cc0:	bf00      	nop
 8002cc2:	3738      	adds	r7, #56	@ 0x38
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40021800 	.word	0x40021800
 8002cd8:	40020800 	.word	0x40020800
 8002cdc:	40021400 	.word	0x40021400
 8002ce0:	40020c00 	.word	0x40020c00

08002ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce8:	b672      	cpsid	i
}
 8002cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <Error_Handler+0x8>

08002cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <HAL_MspInit+0x44>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8002d34 <HAL_MspInit+0x44>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d02:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <HAL_MspInit+0x44>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_MspInit+0x44>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	4a08      	ldr	r2, [pc, #32]	@ (8002d34 <HAL_MspInit+0x44>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1a:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <HAL_MspInit+0x44>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0aa      	sub	sp, #168	@ 0xa8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	2284      	movs	r2, #132	@ 0x84
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f008 fbc3 	bl	800b4e4 <memset>
  if(hi2c->Instance==I2C1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a22      	ldr	r2, [pc, #136]	@ (8002dec <HAL_I2C_MspInit+0xb4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d13c      	bne.n	8002de2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d72:	f107 0310 	add.w	r3, r7, #16
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 f942 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002d82:	f7ff ffaf 	bl	8002ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d86:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <HAL_I2C_MspInit+0xb8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a19      	ldr	r2, [pc, #100]	@ (8002df0 <HAL_I2C_MspInit+0xb8>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <HAL_I2C_MspInit+0xb8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002d9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002da2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da6:	2312      	movs	r3, #18
 8002da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002db8:	2304      	movs	r3, #4
 8002dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	480b      	ldr	r0, [pc, #44]	@ (8002df4 <HAL_I2C_MspInit+0xbc>)
 8002dc6:	f001 fc5b 	bl	8004680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_I2C_MspInit+0xb8>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	4a08      	ldr	r2, [pc, #32]	@ (8002df0 <HAL_I2C_MspInit+0xb8>)
 8002dd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_I2C_MspInit+0xb8>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002de2:	bf00      	nop
 8002de4:	37a8      	adds	r7, #168	@ 0xa8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40005400 	.word	0x40005400
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020400 	.word	0x40020400

08002df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	@ 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a25      	ldr	r2, [pc, #148]	@ (8002eac <HAL_SPI_MspInit+0xb4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d144      	bne.n	8002ea4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e1a:	4b25      	ldr	r3, [pc, #148]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	4a24      	ldr	r2, [pc, #144]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e26:	4b22      	ldr	r3, [pc, #136]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e32:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4a18      	ldr	r2, [pc, #96]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e56:	4b16      	ldr	r3, [pc, #88]	@ (8002eb0 <HAL_SPI_MspInit+0xb8>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e62:	2304      	movs	r3, #4
 8002e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e72:	2305      	movs	r3, #5
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e76:	f107 0314 	add.w	r3, r7, #20
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	480d      	ldr	r0, [pc, #52]	@ (8002eb4 <HAL_SPI_MspInit+0xbc>)
 8002e7e:	f001 fbff 	bl	8004680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e82:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e90:	2303      	movs	r3, #3
 8002e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e94:	2305      	movs	r3, #5
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4806      	ldr	r0, [pc, #24]	@ (8002eb8 <HAL_SPI_MspInit+0xc0>)
 8002ea0:	f001 fbee 	bl	8004680 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002ea4:	bf00      	nop
 8002ea6:	3728      	adds	r7, #40	@ 0x28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40003800 	.word	0x40003800
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020800 	.word	0x40020800
 8002eb8:	40020400 	.word	0x40020400

08002ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff4 <HAL_TIM_Base_MspInit+0x138>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d11c      	bne.n	8002f08 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ece:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	4a49      	ldr	r2, [pc, #292]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eda:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2018      	movs	r0, #24
 8002eec:	f000 ff87 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ef0:	2018      	movs	r0, #24
 8002ef2:	f000 ffa0 	bl	8003e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2019      	movs	r0, #25
 8002efc:	f000 ff7f 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f00:	2019      	movs	r0, #25
 8002f02:	f000 ff98 	bl	8003e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002f06:	e070      	b.n	8002fea <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f10:	d114      	bne.n	8002f3c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f12:	4b39      	ldr	r3, [pc, #228]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	4a38      	ldr	r2, [pc, #224]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f1e:	4b36      	ldr	r3, [pc, #216]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	201c      	movs	r0, #28
 8002f30:	f000 ff65 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f34:	201c      	movs	r0, #28
 8002f36:	f000 ff7e 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 8002f3a:	e056      	b.n	8002fea <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2e      	ldr	r2, [pc, #184]	@ (8002ffc <HAL_TIM_Base_MspInit+0x140>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d114      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f46:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b29      	ldr	r3, [pc, #164]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	201d      	movs	r0, #29
 8002f64:	f000 ff4b 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f68:	201d      	movs	r0, #29
 8002f6a:	f000 ff64 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 8002f6e:	e03c      	b.n	8002fea <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM7)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a22      	ldr	r2, [pc, #136]	@ (8003000 <HAL_TIM_Base_MspInit+0x144>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f80:	f043 0320 	orr.w	r3, r3, #32
 8002f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f86:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
}
 8002f92:	e02a      	b.n	8002fea <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1a      	ldr	r2, [pc, #104]	@ (8003004 <HAL_TIM_Base_MspInit+0x148>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d114      	bne.n	8002fc8 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002f9e:	4b16      	ldr	r3, [pc, #88]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	4a15      	ldr	r2, [pc, #84]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002faa:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2018      	movs	r0, #24
 8002fbc:	f000 ff1f 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002fc0:	2018      	movs	r0, #24
 8002fc2:	f000 ff38 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 8002fc6:	e010      	b.n	8002fea <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8003008 <HAL_TIM_Base_MspInit+0x14c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10b      	bne.n	8002fea <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002fd2:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	4a08      	ldr	r2, [pc, #32]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
}
 8002fea:	bf00      	nop
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40000400 	.word	0x40000400
 8003000:	40001400 	.word	0x40001400
 8003004:	40014000 	.word	0x40014000
 8003008:	40002000 	.word	0x40002000

0800300c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	@ 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1b      	ldr	r2, [pc, #108]	@ (8003098 <HAL_TIM_Encoder_MspInit+0x8c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d130      	bne.n	8003090 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800302e:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_TIM_Encoder_MspInit+0x90>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <HAL_TIM_Encoder_MspInit+0x90>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6413      	str	r3, [r2, #64]	@ 0x40
 800303a:	4b18      	ldr	r3, [pc, #96]	@ (800309c <HAL_TIM_Encoder_MspInit+0x90>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003046:	4b15      	ldr	r3, [pc, #84]	@ (800309c <HAL_TIM_Encoder_MspInit+0x90>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a14      	ldr	r2, [pc, #80]	@ (800309c <HAL_TIM_Encoder_MspInit+0x90>)
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_TIM_Encoder_MspInit+0x90>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 800305e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003070:	2302      	movs	r3, #2
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4619      	mov	r1, r3
 800307a:	4809      	ldr	r0, [pc, #36]	@ (80030a0 <HAL_TIM_Encoder_MspInit+0x94>)
 800307c:	f001 fb00 	bl	8004680 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	201e      	movs	r0, #30
 8003086:	f000 feba 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800308a:	201e      	movs	r0, #30
 800308c:	f000 fed3 	bl	8003e36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003090:	bf00      	nop
 8003092:	3728      	adds	r7, #40	@ 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40000800 	.word	0x40000800
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020c00 	.word	0x40020c00

080030a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0d      	ldr	r2, [pc, #52]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x44>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d113      	bne.n	80030de <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <HAL_TIM_PWM_MspInit+0x48>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	4a0c      	ldr	r2, [pc, #48]	@ (80030ec <HAL_TIM_PWM_MspInit+0x48>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c2:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <HAL_TIM_PWM_MspInit+0x48>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	2032      	movs	r0, #50	@ 0x32
 80030d4:	f000 fe93 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80030d8:	2032      	movs	r0, #50	@ 0x32
 80030da:	f000 feac 	bl	8003e36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08e      	sub	sp, #56	@ 0x38
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a67      	ldr	r2, [pc, #412]	@ (80032ac <HAL_TIM_MspPostInit+0x1bc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d11d      	bne.n	800314e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003112:	4b67      	ldr	r3, [pc, #412]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a66      	ldr	r2, [pc, #408]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 8003118:	f043 0310 	orr.w	r3, r3, #16
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b64      	ldr	r3, [pc, #400]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	623b      	str	r3, [r7, #32]
 8003128:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 800312a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800313c:	2301      	movs	r3, #1
 800313e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8003140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003144:	4619      	mov	r1, r3
 8003146:	485b      	ldr	r0, [pc, #364]	@ (80032b4 <HAL_TIM_MspPostInit+0x1c4>)
 8003148:	f001 fa9a 	bl	8004680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800314c:	e0a9      	b.n	80032a2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003156:	d11d      	bne.n	8003194 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	4b55      	ldr	r3, [pc, #340]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	4a54      	ldr	r2, [pc, #336]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	6313      	str	r3, [r2, #48]	@ 0x30
 8003164:	4b52      	ldr	r3, [pc, #328]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8003170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003182:	2301      	movs	r3, #1
 8003184:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800318a:	4619      	mov	r1, r3
 800318c:	484a      	ldr	r0, [pc, #296]	@ (80032b8 <HAL_TIM_MspPostInit+0x1c8>)
 800318e:	f001 fa77 	bl	8004680 <HAL_GPIO_Init>
}
 8003192:	e086      	b.n	80032a2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a48      	ldr	r2, [pc, #288]	@ (80032bc <HAL_TIM_MspPostInit+0x1cc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d11c      	bne.n	80031d8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319e:	4b44      	ldr	r3, [pc, #272]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	4a43      	ldr	r2, [pc, #268]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031aa:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP4_Pin;
 80031b6:	2301      	movs	r3, #1
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031c6:	2302      	movs	r3, #2
 80031c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80031ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ce:	4619      	mov	r1, r3
 80031d0:	4839      	ldr	r0, [pc, #228]	@ (80032b8 <HAL_TIM_MspPostInit+0x1c8>)
 80031d2:	f001 fa55 	bl	8004680 <HAL_GPIO_Init>
}
 80031d6:	e064      	b.n	80032a2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM5)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a38      	ldr	r2, [pc, #224]	@ (80032c0 <HAL_TIM_MspPostInit+0x1d0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d11c      	bne.n	800321c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e2:	4b33      	ldr	r3, [pc, #204]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	4a32      	ldr	r2, [pc, #200]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ee:	4b30      	ldr	r3, [pc, #192]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP3_Pin;
 80031fa:	2301      	movs	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2300      	movs	r3, #0
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800320a:	2302      	movs	r3, #2
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003212:	4619      	mov	r1, r3
 8003214:	482b      	ldr	r0, [pc, #172]	@ (80032c4 <HAL_TIM_MspPostInit+0x1d4>)
 8003216:	f001 fa33 	bl	8004680 <HAL_GPIO_Init>
}
 800321a:	e042      	b.n	80032a2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a29      	ldr	r2, [pc, #164]	@ (80032c8 <HAL_TIM_MspPostInit+0x1d8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d11c      	bne.n	8003260 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003226:	4b22      	ldr	r3, [pc, #136]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	4a21      	ldr	r2, [pc, #132]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 800322c:	f043 0310 	orr.w	r3, r3, #16
 8003230:	6313      	str	r3, [r2, #48]	@ 0x30
 8003232:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2PWM_Pin;
 800323e:	2320      	movs	r3, #32
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800324e:	2303      	movs	r3, #3
 8003250:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2PWM_GPIO_Port, &GPIO_InitStruct);
 8003252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003256:	4619      	mov	r1, r3
 8003258:	4816      	ldr	r0, [pc, #88]	@ (80032b4 <HAL_TIM_MspPostInit+0x1c4>)
 800325a:	f001 fa11 	bl	8004680 <HAL_GPIO_Init>
}
 800325e:	e020      	b.n	80032a2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM14)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_TIM_MspPostInit+0x1dc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d11b      	bne.n	80032a2 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	4a10      	ldr	r2, [pc, #64]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6313      	str	r3, [r2, #48]	@ 0x30
 8003276:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <HAL_TIM_MspPostInit+0x1c0>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003292:	2309      	movs	r3, #9
 8003294:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 8003296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800329a:	4619      	mov	r1, r3
 800329c:	4809      	ldr	r0, [pc, #36]	@ (80032c4 <HAL_TIM_MspPostInit+0x1d4>)
 800329e:	f001 f9ef 	bl	8004680 <HAL_GPIO_Init>
}
 80032a2:	bf00      	nop
 80032a4:	3738      	adds	r7, #56	@ 0x38
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40020000 	.word	0x40020000
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40002000 	.word	0x40002000

080032d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0b4      	sub	sp, #208	@ 0xd0
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032ec:	2284      	movs	r2, #132	@ 0x84
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f008 f8f7 	bl	800b4e4 <memset>
  if(huart->Instance==UART4)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a8a      	ldr	r2, [pc, #552]	@ (8003524 <HAL_UART_MspInit+0x254>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d174      	bne.n	80033ea <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003304:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800330c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003310:	4618      	mov	r0, r3
 8003312:	f002 fe75 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800331c:	f7ff fce2 	bl	8002ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003320:	4b81      	ldr	r3, [pc, #516]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003324:	4a80      	ldr	r2, [pc, #512]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003326:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800332a:	6413      	str	r3, [r2, #64]	@ 0x40
 800332c:	4b7e      	ldr	r3, [pc, #504]	@ (8003528 <HAL_UART_MspInit+0x258>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003334:	637b      	str	r3, [r7, #52]	@ 0x34
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003338:	4b7b      	ldr	r3, [pc, #492]	@ (8003528 <HAL_UART_MspInit+0x258>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333c:	4a7a      	ldr	r2, [pc, #488]	@ (8003528 <HAL_UART_MspInit+0x258>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6313      	str	r3, [r2, #48]	@ 0x30
 8003344:	4b78      	ldr	r3, [pc, #480]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
 800334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003350:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003354:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800336a:	2308      	movs	r3, #8
 800336c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003370:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003374:	4619      	mov	r1, r3
 8003376:	486d      	ldr	r0, [pc, #436]	@ (800352c <HAL_UART_MspInit+0x25c>)
 8003378:	f001 f982 	bl	8004680 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800337c:	4b6c      	ldr	r3, [pc, #432]	@ (8003530 <HAL_UART_MspInit+0x260>)
 800337e:	4a6d      	ldr	r2, [pc, #436]	@ (8003534 <HAL_UART_MspInit+0x264>)
 8003380:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003382:	4b6b      	ldr	r3, [pc, #428]	@ (8003530 <HAL_UART_MspInit+0x260>)
 8003384:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003388:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800338a:	4b69      	ldr	r3, [pc, #420]	@ (8003530 <HAL_UART_MspInit+0x260>)
 800338c:	2200      	movs	r2, #0
 800338e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003390:	4b67      	ldr	r3, [pc, #412]	@ (8003530 <HAL_UART_MspInit+0x260>)
 8003392:	2200      	movs	r2, #0
 8003394:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003396:	4b66      	ldr	r3, [pc, #408]	@ (8003530 <HAL_UART_MspInit+0x260>)
 8003398:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800339c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800339e:	4b64      	ldr	r3, [pc, #400]	@ (8003530 <HAL_UART_MspInit+0x260>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a4:	4b62      	ldr	r3, [pc, #392]	@ (8003530 <HAL_UART_MspInit+0x260>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80033aa:	4b61      	ldr	r3, [pc, #388]	@ (8003530 <HAL_UART_MspInit+0x260>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003530 <HAL_UART_MspInit+0x260>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003530 <HAL_UART_MspInit+0x260>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80033bc:	485c      	ldr	r0, [pc, #368]	@ (8003530 <HAL_UART_MspInit+0x260>)
 80033be:	f000 fd55 	bl	8003e6c <HAL_DMA_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80033c8:	f7ff fc8c 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a58      	ldr	r2, [pc, #352]	@ (8003530 <HAL_UART_MspInit+0x260>)
 80033d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80033d2:	4a57      	ldr	r2, [pc, #348]	@ (8003530 <HAL_UART_MspInit+0x260>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	2034      	movs	r0, #52	@ 0x34
 80033de:	f000 fd0e 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033e2:	2034      	movs	r0, #52	@ 0x34
 80033e4:	f000 fd27 	bl	8003e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80033e8:	e1e2      	b.n	80037b0 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==UART5)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a52      	ldr	r2, [pc, #328]	@ (8003538 <HAL_UART_MspInit+0x268>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	f040 80a9 	bne.w	8003548 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80033f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003402:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003406:	4618      	mov	r0, r3
 8003408:	f002 fdfa 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8003412:	f7ff fc67 	bl	8002ce4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003416:	4b44      	ldr	r3, [pc, #272]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	4a43      	ldr	r2, [pc, #268]	@ (8003528 <HAL_UART_MspInit+0x258>)
 800341c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003420:	6413      	str	r3, [r2, #64]	@ 0x40
 8003422:	4b41      	ldr	r3, [pc, #260]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800342c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342e:	4b3e      	ldr	r3, [pc, #248]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4a3d      	ldr	r2, [pc, #244]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_UART_MspInit+0x258>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003446:	4b38      	ldr	r3, [pc, #224]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	4a37      	ldr	r2, [pc, #220]	@ (8003528 <HAL_UART_MspInit+0x258>)
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	6313      	str	r3, [r2, #48]	@ 0x30
 8003452:	4b35      	ldr	r3, [pc, #212]	@ (8003528 <HAL_UART_MspInit+0x258>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800345e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003462:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003472:	2303      	movs	r3, #3
 8003474:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003478:	2308      	movs	r3, #8
 800347a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003482:	4619      	mov	r1, r3
 8003484:	4829      	ldr	r0, [pc, #164]	@ (800352c <HAL_UART_MspInit+0x25c>)
 8003486:	f001 f8fb 	bl	8004680 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800348a:	2304      	movs	r3, #4
 800348c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80034a2:	2308      	movs	r3, #8
 80034a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034a8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80034ac:	4619      	mov	r1, r3
 80034ae:	4823      	ldr	r0, [pc, #140]	@ (800353c <HAL_UART_MspInit+0x26c>)
 80034b0:	f001 f8e6 	bl	8004680 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80034b4:	4b22      	ldr	r3, [pc, #136]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034b6:	4a23      	ldr	r2, [pc, #140]	@ (8003544 <HAL_UART_MspInit+0x274>)
 80034b8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80034ba:	4b21      	ldr	r3, [pc, #132]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034c0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034d4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034dc:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034de:	2200      	movs	r2, #0
 80034e0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80034e2:	4b17      	ldr	r3, [pc, #92]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034e8:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ee:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80034f4:	4812      	ldr	r0, [pc, #72]	@ (8003540 <HAL_UART_MspInit+0x270>)
 80034f6:	f000 fcb9 	bl	8003e6c <HAL_DMA_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8003500:	f7ff fbf0 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a0e      	ldr	r2, [pc, #56]	@ (8003540 <HAL_UART_MspInit+0x270>)
 8003508:	675a      	str	r2, [r3, #116]	@ 0x74
 800350a:	4a0d      	ldr	r2, [pc, #52]	@ (8003540 <HAL_UART_MspInit+0x270>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	2100      	movs	r1, #0
 8003514:	2035      	movs	r0, #53	@ 0x35
 8003516:	f000 fc72 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800351a:	2035      	movs	r0, #53	@ 0x35
 800351c:	f000 fc8b 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 8003520:	e146      	b.n	80037b0 <HAL_UART_MspInit+0x4e0>
 8003522:	bf00      	nop
 8003524:	40004c00 	.word	0x40004c00
 8003528:	40023800 	.word	0x40023800
 800352c:	40020800 	.word	0x40020800
 8003530:	200006cc 	.word	0x200006cc
 8003534:	40026040 	.word	0x40026040
 8003538:	40005000 	.word	0x40005000
 800353c:	40020c00 	.word	0x40020c00
 8003540:	2000072c 	.word	0x2000072c
 8003544:	40026010 	.word	0x40026010
  else if(huart->Instance==USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a9a      	ldr	r2, [pc, #616]	@ (80037b8 <HAL_UART_MspInit+0x4e8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d172      	bne.n	8003638 <HAL_UART_MspInit+0x368>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800355c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003560:	4618      	mov	r0, r3
 8003562:	f002 fd4d 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 800356c:	f7ff fbba 	bl	8002ce4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003570:	4b92      	ldr	r3, [pc, #584]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	4a91      	ldr	r2, [pc, #580]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357a:	6413      	str	r3, [r2, #64]	@ 0x40
 800357c:	4b8f      	ldr	r3, [pc, #572]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003584:	623b      	str	r3, [r7, #32]
 8003586:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003588:	4b8c      	ldr	r3, [pc, #560]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	4a8b      	ldr	r2, [pc, #556]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 800358e:	f043 0308 	orr.w	r3, r3, #8
 8003592:	6313      	str	r3, [r2, #48]	@ 0x30
 8003594:	4b89      	ldr	r3, [pc, #548]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035a0:	2360      	movs	r3, #96	@ 0x60
 80035a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b2:	2303      	movs	r3, #3
 80035b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035b8:	2307      	movs	r3, #7
 80035ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035be:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80035c2:	4619      	mov	r1, r3
 80035c4:	487e      	ldr	r0, [pc, #504]	@ (80037c0 <HAL_UART_MspInit+0x4f0>)
 80035c6:	f001 f85b 	bl	8004680 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80035ca:	4b7e      	ldr	r3, [pc, #504]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 80035cc:	4a7e      	ldr	r2, [pc, #504]	@ (80037c8 <HAL_UART_MspInit+0x4f8>)
 80035ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80035d0:	4b7c      	ldr	r3, [pc, #496]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 80035d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80035d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035d8:	4b7a      	ldr	r3, [pc, #488]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035de:	4b79      	ldr	r3, [pc, #484]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035e4:	4b77      	ldr	r3, [pc, #476]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 80035e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ec:	4b75      	ldr	r3, [pc, #468]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035f2:	4b74      	ldr	r3, [pc, #464]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035f8:	4b72      	ldr	r3, [pc, #456]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035fe:	4b71      	ldr	r3, [pc, #452]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 8003600:	2200      	movs	r2, #0
 8003602:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003604:	4b6f      	ldr	r3, [pc, #444]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 8003606:	2200      	movs	r2, #0
 8003608:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800360a:	486e      	ldr	r0, [pc, #440]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 800360c:	f000 fc2e 	bl	8003e6c <HAL_DMA_Init>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8003616:	f7ff fb65 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a69      	ldr	r2, [pc, #420]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 800361e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003620:	4a68      	ldr	r2, [pc, #416]	@ (80037c4 <HAL_UART_MspInit+0x4f4>)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	2026      	movs	r0, #38	@ 0x26
 800362c:	f000 fbe7 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003630:	2026      	movs	r0, #38	@ 0x26
 8003632:	f000 fc00 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 8003636:	e0bb      	b.n	80037b0 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==USART3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a63      	ldr	r2, [pc, #396]	@ (80037cc <HAL_UART_MspInit+0x4fc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d13e      	bne.n	80036c0 <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003646:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800364e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003652:	4618      	mov	r0, r3
 8003654:	f002 fcd4 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_UART_MspInit+0x392>
      Error_Handler();
 800365e:	f7ff fb41 	bl	8002ce4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003662:	4b56      	ldr	r3, [pc, #344]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	4a55      	ldr	r2, [pc, #340]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800366c:	6413      	str	r3, [r2, #64]	@ 0x40
 800366e:	4b53      	ldr	r3, [pc, #332]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800367a:	4b50      	ldr	r3, [pc, #320]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	4a4f      	ldr	r2, [pc, #316]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003680:	f043 0308 	orr.w	r3, r3, #8
 8003684:	6313      	str	r3, [r2, #48]	@ 0x30
 8003686:	4b4d      	ldr	r3, [pc, #308]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003692:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003696:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369a:	2302      	movs	r3, #2
 800369c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a6:	2303      	movs	r3, #3
 80036a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036ac:	2307      	movs	r3, #7
 80036ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80036b6:	4619      	mov	r1, r3
 80036b8:	4841      	ldr	r0, [pc, #260]	@ (80037c0 <HAL_UART_MspInit+0x4f0>)
 80036ba:	f000 ffe1 	bl	8004680 <HAL_GPIO_Init>
}
 80036be:	e077      	b.n	80037b0 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==USART6)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a42      	ldr	r2, [pc, #264]	@ (80037d0 <HAL_UART_MspInit+0x500>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d172      	bne.n	80037b0 <HAL_UART_MspInit+0x4e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80036ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 fc90 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_UART_MspInit+0x41a>
      Error_Handler();
 80036e6:	f7ff fafd 	bl	8002ce4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036ea:	4b34      	ldr	r3, [pc, #208]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	4a33      	ldr	r2, [pc, #204]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 80036f0:	f043 0320 	orr.w	r3, r3, #32
 80036f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f6:	4b31      	ldr	r3, [pc, #196]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	4b2e      	ldr	r3, [pc, #184]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	4a2d      	ldr	r2, [pc, #180]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	6313      	str	r3, [r2, #48]	@ 0x30
 800370e:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <HAL_UART_MspInit+0x4ec>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800371a:	23c0      	movs	r3, #192	@ 0xc0
 800371c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003732:	2308      	movs	r3, #8
 8003734:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003738:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800373c:	4619      	mov	r1, r3
 800373e:	4825      	ldr	r0, [pc, #148]	@ (80037d4 <HAL_UART_MspInit+0x504>)
 8003740:	f000 ff9e 	bl	8004680 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003744:	4b24      	ldr	r3, [pc, #144]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 8003746:	4a25      	ldr	r2, [pc, #148]	@ (80037dc <HAL_UART_MspInit+0x50c>)
 8003748:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800374a:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 800374c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003750:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003752:	4b21      	ldr	r3, [pc, #132]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003758:	4b1f      	ldr	r3, [pc, #124]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800375e:	4b1e      	ldr	r3, [pc, #120]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 8003760:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003764:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003766:	4b1c      	ldr	r3, [pc, #112]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 8003768:	2200      	movs	r2, #0
 800376a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800376c:	4b1a      	ldr	r3, [pc, #104]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 800376e:	2200      	movs	r2, #0
 8003770:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 8003774:	2200      	movs	r2, #0
 8003776:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003778:	4b17      	ldr	r3, [pc, #92]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 800377a:	2200      	movs	r2, #0
 800377c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800377e:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 8003780:	2200      	movs	r2, #0
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003784:	4814      	ldr	r0, [pc, #80]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 8003786:	f000 fb71 	bl	8003e6c <HAL_DMA_Init>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 8003790:	f7ff faa8 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a10      	ldr	r2, [pc, #64]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 8003798:	675a      	str	r2, [r3, #116]	@ 0x74
 800379a:	4a0f      	ldr	r2, [pc, #60]	@ (80037d8 <HAL_UART_MspInit+0x508>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80037a0:	2200      	movs	r2, #0
 80037a2:	2100      	movs	r1, #0
 80037a4:	2047      	movs	r0, #71	@ 0x47
 80037a6:	f000 fb2a 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80037aa:	2047      	movs	r0, #71	@ 0x47
 80037ac:	f000 fb43 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 80037b0:	bf00      	nop
 80037b2:	37d0      	adds	r7, #208	@ 0xd0
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40004400 	.word	0x40004400
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020c00 	.word	0x40020c00
 80037c4:	2000078c 	.word	0x2000078c
 80037c8:	40026088 	.word	0x40026088
 80037cc:	40004800 	.word	0x40004800
 80037d0:	40011400 	.word	0x40011400
 80037d4:	40020800 	.word	0x40020800
 80037d8:	200007ec 	.word	0x200007ec
 80037dc:	40026428 	.word	0x40026428

080037e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b0ac      	sub	sp, #176	@ 0xb0
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037f8:	f107 0318 	add.w	r3, r7, #24
 80037fc:	2284      	movs	r2, #132	@ 0x84
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f007 fe6f 	bl	800b4e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380e:	d159      	bne.n	80038c4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003810:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003814:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800381c:	f107 0318 	add.w	r3, r7, #24
 8003820:	4618      	mov	r0, r3
 8003822:	f002 fbed 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800382c:	f7ff fa5a 	bl	8002ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003830:	4b26      	ldr	r3, [pc, #152]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	4a25      	ldr	r2, [pc, #148]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6313      	str	r3, [r2, #48]	@ 0x30
 800383c:	4b23      	ldr	r3, [pc, #140]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003848:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800384c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385c:	2303      	movs	r3, #3
 800385e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003862:	230a      	movs	r3, #10
 8003864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003868:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800386c:	4619      	mov	r1, r3
 800386e:	4818      	ldr	r0, [pc, #96]	@ (80038d0 <HAL_PCD_MspInit+0xf0>)
 8003870:	f000 ff06 	bl	8004680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003874:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003888:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800388c:	4619      	mov	r1, r3
 800388e:	4810      	ldr	r0, [pc, #64]	@ (80038d0 <HAL_PCD_MspInit+0xf0>)
 8003890:	f000 fef6 	bl	8004680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003894:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 8003896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003898:	4a0c      	ldr	r2, [pc, #48]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 800389a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389e:	6353      	str	r3, [r2, #52]	@ 0x34
 80038a0:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 80038a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	4a06      	ldr	r2, [pc, #24]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 80038b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80038b8:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <HAL_PCD_MspInit+0xec>)
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80038c4:	bf00      	nop
 80038c6:	37b0      	adds	r7, #176	@ 0xb0
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000

080038d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <NMI_Handler+0x4>

080038dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <HardFault_Handler+0x4>

080038e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <MemManage_Handler+0x4>

080038ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <BusFault_Handler+0x4>

080038f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <UsageFault_Handler+0x4>

080038fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800392a:	f000 f949 	bl	8003bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003938:	4802      	ldr	r0, [pc, #8]	@ (8003944 <DMA1_Stream0_IRQHandler+0x10>)
 800393a:	f000 fc37 	bl	80041ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	2000072c 	.word	0x2000072c

08003948 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800394c:	4802      	ldr	r0, [pc, #8]	@ (8003958 <DMA1_Stream2_IRQHandler+0x10>)
 800394e:	f000 fc2d 	bl	80041ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200006cc 	.word	0x200006cc

0800395c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003960:	4802      	ldr	r0, [pc, #8]	@ (800396c <DMA1_Stream5_IRQHandler+0x10>)
 8003962:	f000 fc23 	bl	80041ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2000078c 	.word	0x2000078c

08003970 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003974:	4803      	ldr	r0, [pc, #12]	@ (8003984 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003976:	f004 fa87 	bl	8007e88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800397a:	4803      	ldr	r0, [pc, #12]	@ (8003988 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800397c:	f004 fa84 	bl	8007e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	200001c4 	.word	0x200001c4
 8003988:	2000038c 	.word	0x2000038c

0800398c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003990:	4802      	ldr	r0, [pc, #8]	@ (800399c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003992:	f004 fa79 	bl	8007e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200001c4 	.word	0x200001c4

080039a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039a4:	4802      	ldr	r0, [pc, #8]	@ (80039b0 <TIM2_IRQHandler+0x10>)
 80039a6:	f004 fa6f 	bl	8007e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000210 	.word	0x20000210

080039b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039b8:	4802      	ldr	r0, [pc, #8]	@ (80039c4 <TIM3_IRQHandler+0x10>)
 80039ba:	f004 fa65 	bl	8007e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000025c 	.word	0x2000025c

080039c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039cc:	4802      	ldr	r0, [pc, #8]	@ (80039d8 <TIM4_IRQHandler+0x10>)
 80039ce:	f004 fa5b 	bl	8007e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200002a8 	.word	0x200002a8

080039dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039e0:	4802      	ldr	r0, [pc, #8]	@ (80039ec <USART2_IRQHandler+0x10>)
 80039e2:	f005 fb6f 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000534 	.word	0x20000534

080039f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80039f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80039f8:	f001 f820 	bl	8004a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003a04:	4802      	ldr	r0, [pc, #8]	@ (8003a10 <TIM5_IRQHandler+0x10>)
 8003a06:	f004 fa3f 	bl	8007e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200002f4 	.word	0x200002f4

08003a14 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003a18:	4802      	ldr	r0, [pc, #8]	@ (8003a24 <UART4_IRQHandler+0x10>)
 8003a1a:	f005 fb53 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000424 	.word	0x20000424

08003a28 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003a2c:	4802      	ldr	r0, [pc, #8]	@ (8003a38 <UART5_IRQHandler+0x10>)
 8003a2e:	f005 fb49 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200004ac 	.word	0x200004ac

08003a3c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003a40:	4802      	ldr	r0, [pc, #8]	@ (8003a4c <DMA2_Stream1_IRQHandler+0x10>)
 8003a42:	f000 fbb3 	bl	80041ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200007ec 	.word	0x200007ec

08003a50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003a54:	4802      	ldr	r0, [pc, #8]	@ (8003a60 <USART6_IRQHandler+0x10>)
 8003a56:	f005 fb35 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000644 	.word	0x20000644

08003a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <_sbrk+0x5c>)
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <_sbrk+0x60>)
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a78:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <_sbrk+0x64>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a80:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <_sbrk+0x64>)
 8003a82:	4a12      	ldr	r2, [pc, #72]	@ (8003acc <_sbrk+0x68>)
 8003a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <_sbrk+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d207      	bcs.n	8003aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a94:	f007 fd2e 	bl	800b4f4 <__errno>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	e009      	b.n	8003ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa4:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <_sbrk+0x64>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <_sbrk+0x64>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	4a05      	ldr	r2, [pc, #20]	@ (8003ac8 <_sbrk+0x64>)
 8003ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20050000 	.word	0x20050000
 8003ac4:	00000400 	.word	0x00000400
 8003ac8:	20000f1c 	.word	0x20000f1c
 8003acc:	20001090 	.word	0x20001090

08003ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ad4:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <SystemInit+0x20>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ada:	4a05      	ldr	r2, [pc, #20]	@ (8003af0 <SystemInit+0x20>)
 8003adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000ed00 	.word	0xe000ed00

08003af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8003af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003af8:	f7ff ffea 	bl	8003ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003afc:	480c      	ldr	r0, [pc, #48]	@ (8003b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003afe:	490d      	ldr	r1, [pc, #52]	@ (8003b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b00:	4a0d      	ldr	r2, [pc, #52]	@ (8003b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b04:	e002      	b.n	8003b0c <LoopCopyDataInit>

08003b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b0a:	3304      	adds	r3, #4

08003b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b10:	d3f9      	bcc.n	8003b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b12:	4a0a      	ldr	r2, [pc, #40]	@ (8003b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b14:	4c0a      	ldr	r4, [pc, #40]	@ (8003b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b18:	e001      	b.n	8003b1e <LoopFillZerobss>

08003b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b1c:	3204      	adds	r2, #4

08003b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b20:	d3fb      	bcc.n	8003b1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003b22:	f007 fced 	bl	800b500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b26:	f7fe f949 	bl	8001dbc <main>
  bx  lr    
 8003b2a:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8003b2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b34:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8003b38:	0800c570 	.word	0x0800c570
  ldr r2, =_sbss
 8003b3c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8003b40:	2000108c 	.word	0x2000108c

08003b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b44:	e7fe      	b.n	8003b44 <ADC_IRQHandler>

08003b46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4a:	2003      	movs	r0, #3
 8003b4c:	f000 f94c 	bl	8003de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f000 f805 	bl	8003b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b56:	f7ff f8cb 	bl	8002cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b68:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <HAL_InitTick+0x54>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <HAL_InitTick+0x58>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f967 	bl	8003e52 <HAL_SYSTICK_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00e      	b.n	8003bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d80a      	bhi.n	8003baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b94:	2200      	movs	r2, #0
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	f000 f92f 	bl	8003dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba0:	4a06      	ldr	r2, [pc, #24]	@ (8003bbc <HAL_InitTick+0x5c>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	2000004c 	.word	0x2000004c
 8003bb8:	20000054 	.word	0x20000054
 8003bbc:	20000050 	.word	0x20000050

08003bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_IncTick+0x20>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <HAL_IncTick+0x24>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <HAL_IncTick+0x24>)
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000054 	.word	0x20000054
 8003be4:	20000f20 	.word	0x20000f20

08003be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return uwTick;
 8003bec:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <HAL_GetTick+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000f20 	.word	0x20000f20

08003c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff ffee 	bl	8003be8 <HAL_GetTick>
 8003c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d005      	beq.n	8003c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <HAL_Delay+0x44>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c26:	bf00      	nop
 8003c28:	f7ff ffde 	bl	8003be8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d8f7      	bhi.n	8003c28 <HAL_Delay+0x28>
  {
  }
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000054 	.word	0x20000054

08003c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <__NVIC_SetPriorityGrouping+0x40>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c76:	4a04      	ldr	r2, [pc, #16]	@ (8003c88 <__NVIC_SetPriorityGrouping+0x40>)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	60d3      	str	r3, [r2, #12]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00
 8003c8c:	05fa0000 	.word	0x05fa0000

08003c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c94:	4b04      	ldr	r3, [pc, #16]	@ (8003ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 0307 	and.w	r3, r3, #7
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0b      	blt.n	8003cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4907      	ldr	r1, [pc, #28]	@ (8003ce4 <__NVIC_EnableIRQ+0x38>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000e100 	.word	0xe000e100

08003ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	6039      	str	r1, [r7, #0]
 8003cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	db0a      	blt.n	8003d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	490c      	ldr	r1, [pc, #48]	@ (8003d34 <__NVIC_SetPriority+0x4c>)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	0112      	lsls	r2, r2, #4
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d10:	e00a      	b.n	8003d28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4908      	ldr	r1, [pc, #32]	@ (8003d38 <__NVIC_SetPriority+0x50>)
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	3b04      	subs	r3, #4
 8003d20:	0112      	lsls	r2, r2, #4
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	440b      	add	r3, r1
 8003d26:	761a      	strb	r2, [r3, #24]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000e100 	.word	0xe000e100
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	@ 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f1c3 0307 	rsb	r3, r3, #7
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	bf28      	it	cs
 8003d5a:	2304      	movcs	r3, #4
 8003d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d902      	bls.n	8003d6c <NVIC_EncodePriority+0x30>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3b03      	subs	r3, #3
 8003d6a:	e000      	b.n	8003d6e <NVIC_EncodePriority+0x32>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	401a      	ands	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d84:	f04f 31ff 	mov.w	r1, #4294967295
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	43d9      	mvns	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d94:	4313      	orrs	r3, r2
         );
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3724      	adds	r7, #36	@ 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003db4:	d301      	bcc.n	8003dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003db6:	2301      	movs	r3, #1
 8003db8:	e00f      	b.n	8003dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dba:	4a0a      	ldr	r2, [pc, #40]	@ (8003de4 <SysTick_Config+0x40>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	f7ff ff8e 	bl	8003ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dcc:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <SysTick_Config+0x40>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd2:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <SysTick_Config+0x40>)
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	e000e010 	.word	0xe000e010

08003de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff29 	bl	8003c48 <__NVIC_SetPriorityGrouping>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	4603      	mov	r3, r0
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e10:	f7ff ff3e 	bl	8003c90 <__NVIC_GetPriorityGrouping>
 8003e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f7ff ff8e 	bl	8003d3c <NVIC_EncodePriority>
 8003e20:	4602      	mov	r2, r0
 8003e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff5d 	bl	8003ce8 <__NVIC_SetPriority>
}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff31 	bl	8003cac <__NVIC_EnableIRQ>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffa2 	bl	8003da4 <SysTick_Config>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e78:	f7ff feb6 	bl	8003be8 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e099      	b.n	8003fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea8:	e00f      	b.n	8003eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eaa:	f7ff fe9d 	bl	8003be8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d908      	bls.n	8003eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e078      	b.n	8003fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e8      	bne.n	8003eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4b38      	ldr	r3, [pc, #224]	@ (8003fc4 <HAL_DMA_Init+0x158>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d117      	bne.n	8003f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fb09 	bl	8004588 <DMA_CheckFifoParam>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2240      	movs	r2, #64	@ 0x40
 8003f80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e016      	b.n	8003fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fac0 	bl	800451c <DMA_CalcBaseAndBitshift>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa4:	223f      	movs	r2, #63	@ 0x3f
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	f010803f 	.word	0xf010803f

08003fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_DMA_Start_IT+0x26>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e048      	b.n	8004080 <HAL_DMA_Start_IT+0xb8>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d137      	bne.n	8004072 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fa52 	bl	80044c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004020:	223f      	movs	r2, #63	@ 0x3f
 8004022:	409a      	lsls	r2, r3
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0216 	orr.w	r2, r2, #22
 8004036:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004046:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0208 	orr.w	r2, r2, #8
 800405e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e005      	b.n	800407e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004096:	f7ff fda7 	bl	8003be8 <HAL_GetTick>
 800409a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d008      	beq.n	80040ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2280      	movs	r2, #128	@ 0x80
 80040ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e052      	b.n	8004160 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0216 	bic.w	r2, r2, #22
 80040c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <HAL_DMA_Abort+0x62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0208 	bic.w	r2, r2, #8
 80040f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800410a:	e013      	b.n	8004134 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800410c:	f7ff fd6c 	bl	8003be8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b05      	cmp	r3, #5
 8004118:	d90c      	bls.n	8004134 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2203      	movs	r2, #3
 8004124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e015      	b.n	8004160 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e4      	bne.n	800410c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004146:	223f      	movs	r2, #63	@ 0x3f
 8004148:	409a      	lsls	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d004      	beq.n	8004186 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2280      	movs	r2, #128	@ 0x80
 8004180:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e00c      	b.n	80041a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2205      	movs	r2, #5
 800418a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80041b8:	4b8e      	ldr	r3, [pc, #568]	@ (80043f4 <HAL_DMA_IRQHandler+0x248>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a8e      	ldr	r2, [pc, #568]	@ (80043f8 <HAL_DMA_IRQHandler+0x24c>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	0a9b      	lsrs	r3, r3, #10
 80041c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d6:	2208      	movs	r2, #8
 80041d8:	409a      	lsls	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01a      	beq.n	8004218 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d013      	beq.n	8004218 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0204 	bic.w	r2, r2, #4
 80041fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004204:	2208      	movs	r2, #8
 8004206:	409a      	lsls	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	f043 0201 	orr.w	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	2201      	movs	r2, #1
 800421e:	409a      	lsls	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004246:	f043 0202 	orr.w	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	2204      	movs	r2, #4
 8004254:	409a      	lsls	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d012      	beq.n	8004284 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	2204      	movs	r2, #4
 8004272:	409a      	lsls	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	f043 0204 	orr.w	r2, r3, #4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	2210      	movs	r2, #16
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d043      	beq.n	800431c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d03c      	beq.n	800431c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a6:	2210      	movs	r2, #16
 80042a8:	409a      	lsls	r2, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d024      	beq.n	800431c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	4798      	blx	r3
 80042da:	e01f      	b.n	800431c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
 80042ec:	e016      	b.n	800431c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0208 	bic.w	r2, r2, #8
 800430a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	2220      	movs	r2, #32
 8004322:	409a      	lsls	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 808f 	beq.w	800444c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8087 	beq.w	800444c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004342:	2220      	movs	r2, #32
 8004344:	409a      	lsls	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b05      	cmp	r3, #5
 8004354:	d136      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0216 	bic.w	r2, r2, #22
 8004364:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004374:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <HAL_DMA_IRQHandler+0x1da>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0208 	bic.w	r2, r2, #8
 8004394:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439a:	223f      	movs	r2, #63	@ 0x3f
 800439c:	409a      	lsls	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d07e      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
        }
        return;
 80043c2:	e079      	b.n	80044b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01d      	beq.n	800440e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10d      	bne.n	80043fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d031      	beq.n	800444c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
 80043f0:	e02c      	b.n	800444c <HAL_DMA_IRQHandler+0x2a0>
 80043f2:	bf00      	nop
 80043f4:	2000004c 	.word	0x2000004c
 80043f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d023      	beq.n	800444c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
 800440c:	e01e      	b.n	800444c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10f      	bne.n	800443c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0210 	bic.w	r2, r2, #16
 800442a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d032      	beq.n	80044ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d022      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2205      	movs	r2, #5
 8004464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	3301      	adds	r3, #1
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	429a      	cmp	r2, r3
 8004482:	d307      	bcc.n	8004494 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f2      	bne.n	8004478 <HAL_DMA_IRQHandler+0x2cc>
 8004492:	e000      	b.n	8004496 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004494:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
 80044b6:	e000      	b.n	80044ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80044b8:	bf00      	nop
    }
  }
}
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b40      	cmp	r3, #64	@ 0x40
 80044ec:	d108      	bne.n	8004500 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044fe:	e007      	b.n	8004510 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	60da      	str	r2, [r3, #12]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	3b10      	subs	r3, #16
 800452c:	4a13      	ldr	r2, [pc, #76]	@ (800457c <DMA_CalcBaseAndBitshift+0x60>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004536:	4a12      	ldr	r2, [pc, #72]	@ (8004580 <DMA_CalcBaseAndBitshift+0x64>)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b03      	cmp	r3, #3
 8004548:	d908      	bls.n	800455c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <DMA_CalcBaseAndBitshift+0x68>)
 8004552:	4013      	ands	r3, r2
 8004554:	1d1a      	adds	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	659a      	str	r2, [r3, #88]	@ 0x58
 800455a:	e006      	b.n	800456a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	4b08      	ldr	r3, [pc, #32]	@ (8004584 <DMA_CalcBaseAndBitshift+0x68>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	aaaaaaab 	.word	0xaaaaaaab
 8004580:	0800c524 	.word	0x0800c524
 8004584:	fffffc00 	.word	0xfffffc00

08004588 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004598:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d11f      	bne.n	80045e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d856      	bhi.n	8004656 <DMA_CheckFifoParam+0xce>
 80045a8:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <DMA_CheckFifoParam+0x28>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045d3 	.word	0x080045d3
 80045b8:	080045c1 	.word	0x080045c1
 80045bc:	08004657 	.word	0x08004657
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d046      	beq.n	800465a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d0:	e043      	b.n	800465a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045da:	d140      	bne.n	800465e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e0:	e03d      	b.n	800465e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ea:	d121      	bne.n	8004630 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d837      	bhi.n	8004662 <DMA_CheckFifoParam+0xda>
 80045f2:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <DMA_CheckFifoParam+0x70>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004609 	.word	0x08004609
 80045fc:	0800460f 	.word	0x0800460f
 8004600:	08004609 	.word	0x08004609
 8004604:	08004621 	.word	0x08004621
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      break;
 800460c:	e030      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d025      	beq.n	8004666 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461e:	e022      	b.n	8004666 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004628:	d11f      	bne.n	800466a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800462e:	e01c      	b.n	800466a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d903      	bls.n	800463e <DMA_CheckFifoParam+0xb6>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d003      	beq.n	8004644 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800463c:	e018      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
      break;
 8004642:	e015      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00e      	beq.n	800466e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e00b      	b.n	800466e <DMA_CheckFifoParam+0xe6>
      break;
 8004656:	bf00      	nop
 8004658:	e00a      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e008      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
 8004660:	e006      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 8004662:	bf00      	nop
 8004664:	e004      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
 8004668:	e002      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;   
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 800466e:	bf00      	nop
    }
  } 
  
  return status; 
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop

08004680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	@ 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e175      	b.n	800498c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046a0:	2201      	movs	r2, #1
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	f040 8164 	bne.w	8004986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d005      	beq.n	80046d6 <HAL_GPIO_Init+0x56>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d130      	bne.n	8004738 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	2203      	movs	r2, #3
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800470c:	2201      	movs	r2, #1
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 0201 	and.w	r2, r3, #1
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b03      	cmp	r3, #3
 8004742:	d017      	beq.n	8004774 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	2203      	movs	r2, #3
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d123      	bne.n	80047c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	08da      	lsrs	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3208      	adds	r2, #8
 8004788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	220f      	movs	r2, #15
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	08da      	lsrs	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3208      	adds	r2, #8
 80047c2:	69b9      	ldr	r1, [r7, #24]
 80047c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	2203      	movs	r2, #3
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 0203 	and.w	r2, r3, #3
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80be 	beq.w	8004986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480a:	4b66      	ldr	r3, [pc, #408]	@ (80049a4 <HAL_GPIO_Init+0x324>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480e:	4a65      	ldr	r2, [pc, #404]	@ (80049a4 <HAL_GPIO_Init+0x324>)
 8004810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004814:	6453      	str	r3, [r2, #68]	@ 0x44
 8004816:	4b63      	ldr	r3, [pc, #396]	@ (80049a4 <HAL_GPIO_Init+0x324>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004822:	4a61      	ldr	r2, [pc, #388]	@ (80049a8 <HAL_GPIO_Init+0x328>)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	3302      	adds	r3, #2
 800482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	220f      	movs	r2, #15
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4013      	ands	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a58      	ldr	r2, [pc, #352]	@ (80049ac <HAL_GPIO_Init+0x32c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d037      	beq.n	80048be <HAL_GPIO_Init+0x23e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a57      	ldr	r2, [pc, #348]	@ (80049b0 <HAL_GPIO_Init+0x330>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_GPIO_Init+0x23a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a56      	ldr	r2, [pc, #344]	@ (80049b4 <HAL_GPIO_Init+0x334>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02b      	beq.n	80048b6 <HAL_GPIO_Init+0x236>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a55      	ldr	r2, [pc, #340]	@ (80049b8 <HAL_GPIO_Init+0x338>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d025      	beq.n	80048b2 <HAL_GPIO_Init+0x232>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a54      	ldr	r2, [pc, #336]	@ (80049bc <HAL_GPIO_Init+0x33c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01f      	beq.n	80048ae <HAL_GPIO_Init+0x22e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a53      	ldr	r2, [pc, #332]	@ (80049c0 <HAL_GPIO_Init+0x340>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d019      	beq.n	80048aa <HAL_GPIO_Init+0x22a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a52      	ldr	r2, [pc, #328]	@ (80049c4 <HAL_GPIO_Init+0x344>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x226>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a51      	ldr	r2, [pc, #324]	@ (80049c8 <HAL_GPIO_Init+0x348>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00d      	beq.n	80048a2 <HAL_GPIO_Init+0x222>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a50      	ldr	r2, [pc, #320]	@ (80049cc <HAL_GPIO_Init+0x34c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <HAL_GPIO_Init+0x21e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a4f      	ldr	r2, [pc, #316]	@ (80049d0 <HAL_GPIO_Init+0x350>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_GPIO_Init+0x21a>
 8004896:	2309      	movs	r3, #9
 8004898:	e012      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 800489a:	230a      	movs	r3, #10
 800489c:	e010      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 800489e:	2308      	movs	r3, #8
 80048a0:	e00e      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048a2:	2307      	movs	r3, #7
 80048a4:	e00c      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048a6:	2306      	movs	r3, #6
 80048a8:	e00a      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048aa:	2305      	movs	r3, #5
 80048ac:	e008      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048ae:	2304      	movs	r3, #4
 80048b0:	e006      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048b2:	2303      	movs	r3, #3
 80048b4:	e004      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e002      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048be:	2300      	movs	r3, #0
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	f002 0203 	and.w	r2, r2, #3
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	4093      	lsls	r3, r2
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048d0:	4935      	ldr	r1, [pc, #212]	@ (80049a8 <HAL_GPIO_Init+0x328>)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	3302      	adds	r3, #2
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048de:	4b3d      	ldr	r3, [pc, #244]	@ (80049d4 <HAL_GPIO_Init+0x354>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004902:	4a34      	ldr	r2, [pc, #208]	@ (80049d4 <HAL_GPIO_Init+0x354>)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004908:	4b32      	ldr	r3, [pc, #200]	@ (80049d4 <HAL_GPIO_Init+0x354>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800492c:	4a29      	ldr	r2, [pc, #164]	@ (80049d4 <HAL_GPIO_Init+0x354>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004932:	4b28      	ldr	r3, [pc, #160]	@ (80049d4 <HAL_GPIO_Init+0x354>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004956:	4a1f      	ldr	r2, [pc, #124]	@ (80049d4 <HAL_GPIO_Init+0x354>)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800495c:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <HAL_GPIO_Init+0x354>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004980:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <HAL_GPIO_Init+0x354>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3301      	adds	r3, #1
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b0f      	cmp	r3, #15
 8004990:	f67f ae86 	bls.w	80046a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	3724      	adds	r7, #36	@ 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40013800 	.word	0x40013800
 80049ac:	40020000 	.word	0x40020000
 80049b0:	40020400 	.word	0x40020400
 80049b4:	40020800 	.word	0x40020800
 80049b8:	40020c00 	.word	0x40020c00
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40021400 	.word	0x40021400
 80049c4:	40021800 	.word	0x40021800
 80049c8:	40021c00 	.word	0x40021c00
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40022400 	.word	0x40022400
 80049d4:	40013c00 	.word	0x40013c00

080049d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	887b      	ldrh	r3, [r7, #2]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	e001      	b.n	80049fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	807b      	strh	r3, [r7, #2]
 8004a14:	4613      	mov	r3, r2
 8004a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a18:	787b      	ldrb	r3, [r7, #1]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a1e:	887a      	ldrh	r2, [r7, #2]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a24:	e003      	b.n	8004a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a26:	887b      	ldrh	r3, [r7, #2]
 8004a28:	041a      	lsls	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	619a      	str	r2, [r3, #24]
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
	...

08004a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a46:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d006      	beq.n	8004a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a52:	4a05      	ldr	r2, [pc, #20]	@ (8004a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fd f99a 	bl	8001d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40013c00 	.word	0x40013c00

08004a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e08b      	b.n	8004b96 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fe f950 	bl	8002d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2224      	movs	r2, #36	@ 0x24
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d107      	bne.n	8004ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	e006      	b.n	8004af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d108      	bne.n	8004b0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b0a:	605a      	str	r2, [r3, #4]
 8004b0c:	e007      	b.n	8004b1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba0 <HAL_I2C_Init+0x134>)
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	02008000 	.word	0x02008000

08004ba4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	817b      	strh	r3, [r7, #10]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	f040 80fd 	bne.w	8004dc0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_I2C_Master_Transmit+0x30>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0f6      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x21e>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bdc:	f7ff f804 	bl	8003be8 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2319      	movs	r3, #25
 8004be8:	2201      	movs	r2, #1
 8004bea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f914 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0e1      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2221      	movs	r2, #33	@ 0x21
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2210      	movs	r2, #16
 8004c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	893a      	ldrh	r2, [r7, #8]
 8004c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2bff      	cmp	r3, #255	@ 0xff
 8004c2e:	d906      	bls.n	8004c3e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	22ff      	movs	r2, #255	@ 0xff
 8004c34:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004c36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e007      	b.n	8004c4e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004c48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c4c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d024      	beq.n	8004ca0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	8979      	ldrh	r1, [r7, #10]
 8004c92:	4b4e      	ldr	r3, [pc, #312]	@ (8004dcc <HAL_I2C_Master_Transmit+0x228>)
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fa83 	bl	80051a4 <I2C_TransferConfig>
 8004c9e:	e066      	b.n	8004d6e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	8979      	ldrh	r1, [r7, #10]
 8004ca8:	4b48      	ldr	r3, [pc, #288]	@ (8004dcc <HAL_I2C_Master_Transmit+0x228>)
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fa78 	bl	80051a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004cb4:	e05b      	b.n	8004d6e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	6a39      	ldr	r1, [r7, #32]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f907 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07b      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d034      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0x1ca>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d130      	bne.n	8004d6e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2200      	movs	r2, #0
 8004d14:	2180      	movs	r1, #128	@ 0x80
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f880 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e04d      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2bff      	cmp	r3, #255	@ 0xff
 8004d2e:	d90e      	bls.n	8004d4e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	22ff      	movs	r2, #255	@ 0xff
 8004d34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	8979      	ldrh	r1, [r7, #10]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fa2c 	bl	80051a4 <I2C_TransferConfig>
 8004d4c:	e00f      	b.n	8004d6e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	2300      	movs	r3, #0
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fa1b 	bl	80051a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d19e      	bne.n	8004cb6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	6a39      	ldr	r1, [r7, #32]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f8ed 	bl	8004f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e01a      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2220      	movs	r2, #32
 8004d92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <HAL_I2C_Master_Transmit+0x22c>)
 8004da0:	400b      	ands	r3, r1
 8004da2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e000      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	80002000 	.word	0x80002000
 8004dd0:	fe00e800 	.word	0xfe00e800

08004dd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d103      	bne.n	8004df2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d007      	beq.n	8004e10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	619a      	str	r2, [r3, #24]
  }
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e2c:	e03b      	b.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f8d6 	bl	8004fe4 <I2C_IsErrorOccurred>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e041      	b.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d02d      	beq.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fe fecd 	bl	8003be8 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d122      	bne.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d113      	bne.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e00f      	b.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d0b4      	beq.n	8004e2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eda:	e033      	b.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f87f 	bl	8004fe4 <I2C_IsErrorOccurred>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e031      	b.n	8004f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d025      	beq.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef8:	f7fe fe76 	bl	8003be8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d302      	bcc.n	8004f0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d11a      	bne.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d013      	beq.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e007      	b.n	8004f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d1c4      	bne.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f68:	e02f      	b.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f838 	bl	8004fe4 <I2C_IsErrorOccurred>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e02d      	b.n	8004fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7e:	f7fe fe33 	bl	8003be8 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11a      	bne.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d013      	beq.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e007      	b.n	8004fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d1c8      	bne.n	8004f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	@ 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d068      	beq.n	80050e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2210      	movs	r2, #16
 8005016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005018:	e049      	b.n	80050ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d045      	beq.n	80050ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005022:	f7fe fde1 	bl	8003be8 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <I2C_IsErrorOccurred+0x54>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d13a      	bne.n	80050ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800504a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800505a:	d121      	bne.n	80050a0 <I2C_IsErrorOccurred+0xbc>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005062:	d01d      	beq.n	80050a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b20      	cmp	r3, #32
 8005068:	d01a      	beq.n	80050a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800507a:	f7fe fdb5 	bl	8003be8 <HAL_GetTick>
 800507e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005080:	e00e      	b.n	80050a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005082:	f7fe fdb1 	bl	8003be8 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b19      	cmp	r3, #25
 800508e:	d907      	bls.n	80050a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	f043 0320 	orr.w	r3, r3, #32
 8005096:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800509e:	e006      	b.n	80050ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d1e9      	bne.n	8005082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d003      	beq.n	80050c4 <I2C_IsErrorOccurred+0xe0>
 80050bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0aa      	beq.n	800501a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2220      	movs	r2, #32
 80050d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	f043 0304 	orr.w	r3, r3, #4
 80050da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f043 0308 	orr.w	r3, r3, #8
 800511c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	f043 0302 	orr.w	r3, r3, #2
 800513e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01c      	beq.n	8005192 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff fe3b 	bl	8004dd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b0d      	ldr	r3, [pc, #52]	@ (80051a0 <I2C_IsErrorOccurred+0x1bc>)
 800516a:	400b      	ands	r3, r1
 800516c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005196:	4618      	mov	r0, r3
 8005198:	3728      	adds	r7, #40	@ 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	fe00e800 	.word	0xfe00e800

080051a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	817b      	strh	r3, [r7, #10]
 80051b2:	4613      	mov	r3, r2
 80051b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051b6:	897b      	ldrh	r3, [r7, #10]
 80051b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051bc:	7a7b      	ldrb	r3, [r7, #9]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	0d5b      	lsrs	r3, r3, #21
 80051de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80051e2:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <I2C_TransferConfig+0x60>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	43db      	mvns	r3, r3
 80051e8:	ea02 0103 	and.w	r1, r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	03ff63ff 	.word	0x03ff63ff

08005208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b20      	cmp	r3, #32
 800521c:	d138      	bne.n	8005290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005228:	2302      	movs	r3, #2
 800522a:	e032      	b.n	8005292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2224      	movs	r2, #36	@ 0x24
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800525a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6819      	ldr	r1, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d139      	bne.n	8005328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052be:	2302      	movs	r3, #2
 80052c0:	e033      	b.n	800532a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2224      	movs	r2, #36	@ 0x24
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80052f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b086      	sub	sp, #24
 800533a:	af02      	add	r7, sp, #8
 800533c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e108      	b.n	800555a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fe fa3c 	bl	80037e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2203      	movs	r2, #3
 800536c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005376:	d102      	bne.n	800537e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f005 f81a 	bl	800a3bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7c1a      	ldrb	r2, [r3, #16]
 8005390:	f88d 2000 	strb.w	r2, [sp]
 8005394:	3304      	adds	r3, #4
 8005396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005398:	f004 ffb6 	bl	800a308 <USB_CoreInit>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0d5      	b.n	800555a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f005 f812 	bl	800a3de <USB_SetCurrentMode>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0c6      	b.n	800555a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e04a      	b.n	8005468 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3315      	adds	r3, #21
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053e6:	7bfa      	ldrb	r2, [r7, #15]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	3314      	adds	r3, #20
 80053f6:	7bfa      	ldrb	r2, [r7, #15]
 80053f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	b298      	uxth	r0, r3
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	332e      	adds	r3, #46	@ 0x2e
 800540e:	4602      	mov	r2, r0
 8005410:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005412:	7bfa      	ldrb	r2, [r7, #15]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3318      	adds	r3, #24
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	331c      	adds	r3, #28
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800543a:	7bfa      	ldrb	r2, [r7, #15]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3320      	adds	r3, #32
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800544e:	7bfa      	ldrb	r2, [r7, #15]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3324      	adds	r3, #36	@ 0x24
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	3301      	adds	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	791b      	ldrb	r3, [r3, #4]
 800546c:	7bfa      	ldrb	r2, [r7, #15]
 800546e:	429a      	cmp	r2, r3
 8005470:	d3af      	bcc.n	80053d2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
 8005476:	e044      	b.n	8005502 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800548e:	7bfa      	ldrb	r2, [r7, #15]
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054a4:	7bfa      	ldrb	r2, [r7, #15]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054ba:	7bfa      	ldrb	r2, [r7, #15]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054d0:	7bfa      	ldrb	r2, [r7, #15]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054e6:	7bfa      	ldrb	r2, [r7, #15]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	3301      	adds	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	791b      	ldrb	r3, [r3, #4]
 8005506:	7bfa      	ldrb	r2, [r7, #15]
 8005508:	429a      	cmp	r2, r3
 800550a:	d3b5      	bcc.n	8005478 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7c1a      	ldrb	r2, [r3, #16]
 8005514:	f88d 2000 	strb.w	r2, [sp]
 8005518:	3304      	adds	r3, #4
 800551a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800551c:	f004 ffac 	bl	800a478 <USB_DevInit>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e013      	b.n	800555a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7b1b      	ldrb	r3, [r3, #12]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d102      	bne.n	800554e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f80b 	bl	8005564 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f005 f967 	bl	800a826 <USB_DevDisconnect>

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005592:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005594:	4313      	orrs	r3, r2
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	10000003 	.word	0x10000003

080055ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a04      	ldr	r2, [pc, #16]	@ (80055c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40007000 	.word	0x40007000

080055cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	4b23      	ldr	r3, [pc, #140]	@ (8005664 <HAL_PWREx_EnableOverDrive+0x98>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	4a22      	ldr	r2, [pc, #136]	@ (8005664 <HAL_PWREx_EnableOverDrive+0x98>)
 80055dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80055e2:	4b20      	ldr	r3, [pc, #128]	@ (8005664 <HAL_PWREx_EnableOverDrive+0x98>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80055ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005668 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055fa:	f7fe faf5 	bl	8003be8 <HAL_GetTick>
 80055fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005600:	e009      	b.n	8005616 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005602:	f7fe faf1 	bl	8003be8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005610:	d901      	bls.n	8005616 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e022      	b.n	800565c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005616:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005622:	d1ee      	bne.n	8005602 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005624:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a0f      	ldr	r2, [pc, #60]	@ (8005668 <HAL_PWREx_EnableOverDrive+0x9c>)
 800562a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800562e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005630:	f7fe fada 	bl	8003be8 <HAL_GetTick>
 8005634:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005636:	e009      	b.n	800564c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005638:	f7fe fad6 	bl	8003be8 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005646:	d901      	bls.n	800564c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e007      	b.n	800565c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800564c:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <HAL_PWREx_EnableOverDrive+0x9c>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005658:	d1ee      	bne.n	8005638 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40023800 	.word	0x40023800
 8005668:	40007000 	.word	0x40007000

0800566c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005674:	2300      	movs	r3, #0
 8005676:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e291      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8087 	beq.w	800579e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005690:	4b96      	ldr	r3, [pc, #600]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	2b04      	cmp	r3, #4
 800569a:	d00c      	beq.n	80056b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800569c:	4b93      	ldr	r3, [pc, #588]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d112      	bne.n	80056ce <HAL_RCC_OscConfig+0x62>
 80056a8:	4b90      	ldr	r3, [pc, #576]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056b4:	d10b      	bne.n	80056ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b6:	4b8d      	ldr	r3, [pc, #564]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d06c      	beq.n	800579c <HAL_RCC_OscConfig+0x130>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d168      	bne.n	800579c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e26b      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d6:	d106      	bne.n	80056e6 <HAL_RCC_OscConfig+0x7a>
 80056d8:	4b84      	ldr	r3, [pc, #528]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a83      	ldr	r2, [pc, #524]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80056de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	e02e      	b.n	8005744 <HAL_RCC_OscConfig+0xd8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0x9c>
 80056ee:	4b7f      	ldr	r3, [pc, #508]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a7e      	ldr	r2, [pc, #504]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b7c      	ldr	r3, [pc, #496]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a7b      	ldr	r2, [pc, #492]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005700:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e01d      	b.n	8005744 <HAL_RCC_OscConfig+0xd8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005710:	d10c      	bne.n	800572c <HAL_RCC_OscConfig+0xc0>
 8005712:	4b76      	ldr	r3, [pc, #472]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a75      	ldr	r2, [pc, #468]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	4b73      	ldr	r3, [pc, #460]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a72      	ldr	r2, [pc, #456]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	e00b      	b.n	8005744 <HAL_RCC_OscConfig+0xd8>
 800572c:	4b6f      	ldr	r3, [pc, #444]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a6e      	ldr	r2, [pc, #440]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	4b6c      	ldr	r3, [pc, #432]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a6b      	ldr	r2, [pc, #428]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 800573e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d013      	beq.n	8005774 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fe fa4c 	bl	8003be8 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005754:	f7fe fa48 	bl	8003be8 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	@ 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e21f      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005766:	4b61      	ldr	r3, [pc, #388]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0xe8>
 8005772:	e014      	b.n	800579e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fe fa38 	bl	8003be8 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800577c:	f7fe fa34 	bl	8003be8 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b64      	cmp	r3, #100	@ 0x64
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e20b      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800578e:	4b57      	ldr	r3, [pc, #348]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x110>
 800579a:	e000      	b.n	800579e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d069      	beq.n	800587e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057aa:	4b50      	ldr	r3, [pc, #320]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057b6:	4b4d      	ldr	r3, [pc, #308]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d11c      	bne.n	80057fc <HAL_RCC_OscConfig+0x190>
 80057c2:	4b4a      	ldr	r3, [pc, #296]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d116      	bne.n	80057fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ce:	4b47      	ldr	r3, [pc, #284]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <HAL_RCC_OscConfig+0x17a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d001      	beq.n	80057e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e1df      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e6:	4b41      	ldr	r3, [pc, #260]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	493d      	ldr	r1, [pc, #244]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fa:	e040      	b.n	800587e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d023      	beq.n	800584c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005804:	4b39      	ldr	r3, [pc, #228]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a38      	ldr	r2, [pc, #224]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fe f9ea 	bl	8003be8 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005818:	f7fe f9e6 	bl	8003be8 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e1bd      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582a:	4b30      	ldr	r3, [pc, #192]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005836:	4b2d      	ldr	r3, [pc, #180]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4929      	ldr	r1, [pc, #164]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005846:	4313      	orrs	r3, r2
 8005848:	600b      	str	r3, [r1, #0]
 800584a:	e018      	b.n	800587e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584c:	4b27      	ldr	r3, [pc, #156]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a26      	ldr	r2, [pc, #152]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005858:	f7fe f9c6 	bl	8003be8 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005860:	f7fe f9c2 	bl	8003be8 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e199      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005872:	4b1e      	ldr	r3, [pc, #120]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d038      	beq.n	80058fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d019      	beq.n	80058c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005892:	4b16      	ldr	r3, [pc, #88]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005896:	4a15      	ldr	r2, [pc, #84]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589e:	f7fe f9a3 	bl	8003be8 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a6:	f7fe f99f 	bl	8003be8 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e176      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80058ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x23a>
 80058c4:	e01a      	b.n	80058fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c6:	4b09      	ldr	r3, [pc, #36]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80058c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ca:	4a08      	ldr	r2, [pc, #32]	@ (80058ec <HAL_RCC_OscConfig+0x280>)
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d2:	f7fe f989 	bl	8003be8 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058da:	f7fe f985 	bl	8003be8 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d903      	bls.n	80058f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e15c      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
 80058ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f0:	4b91      	ldr	r3, [pc, #580]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80058f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ee      	bne.n	80058da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80a4 	beq.w	8005a52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590a:	4b8b      	ldr	r3, [pc, #556]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10d      	bne.n	8005932 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005916:	4b88      	ldr	r3, [pc, #544]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	4a87      	ldr	r2, [pc, #540]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005920:	6413      	str	r3, [r2, #64]	@ 0x40
 8005922:	4b85      	ldr	r3, [pc, #532]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005932:	4b82      	ldr	r3, [pc, #520]	@ (8005b3c <HAL_RCC_OscConfig+0x4d0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d118      	bne.n	8005970 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800593e:	4b7f      	ldr	r3, [pc, #508]	@ (8005b3c <HAL_RCC_OscConfig+0x4d0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a7e      	ldr	r2, [pc, #504]	@ (8005b3c <HAL_RCC_OscConfig+0x4d0>)
 8005944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800594a:	f7fe f94d 	bl	8003be8 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005952:	f7fe f949 	bl	8003be8 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b64      	cmp	r3, #100	@ 0x64
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e120      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005964:	4b75      	ldr	r3, [pc, #468]	@ (8005b3c <HAL_RCC_OscConfig+0x4d0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d106      	bne.n	8005986 <HAL_RCC_OscConfig+0x31a>
 8005978:	4b6f      	ldr	r3, [pc, #444]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597c:	4a6e      	ldr	r2, [pc, #440]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6713      	str	r3, [r2, #112]	@ 0x70
 8005984:	e02d      	b.n	80059e2 <HAL_RCC_OscConfig+0x376>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x33c>
 800598e:	4b6a      	ldr	r3, [pc, #424]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005992:	4a69      	ldr	r2, [pc, #420]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	6713      	str	r3, [r2, #112]	@ 0x70
 800599a:	4b67      	ldr	r3, [pc, #412]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599e:	4a66      	ldr	r2, [pc, #408]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a6:	e01c      	b.n	80059e2 <HAL_RCC_OscConfig+0x376>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b05      	cmp	r3, #5
 80059ae:	d10c      	bne.n	80059ca <HAL_RCC_OscConfig+0x35e>
 80059b0:	4b61      	ldr	r3, [pc, #388]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b4:	4a60      	ldr	r2, [pc, #384]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059b6:	f043 0304 	orr.w	r3, r3, #4
 80059ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80059bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059c8:	e00b      	b.n	80059e2 <HAL_RCC_OscConfig+0x376>
 80059ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ce:	4a5a      	ldr	r2, [pc, #360]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d6:	4b58      	ldr	r3, [pc, #352]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059da:	4a57      	ldr	r2, [pc, #348]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 80059dc:	f023 0304 	bic.w	r3, r3, #4
 80059e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d015      	beq.n	8005a16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ea:	f7fe f8fd 	bl	8003be8 <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f0:	e00a      	b.n	8005a08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f2:	f7fe f8f9 	bl	8003be8 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e0ce      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a08:	4b4b      	ldr	r3, [pc, #300]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0ee      	beq.n	80059f2 <HAL_RCC_OscConfig+0x386>
 8005a14:	e014      	b.n	8005a40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fe f8e7 	bl	8003be8 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fe f8e3 	bl	8003be8 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0b8      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a34:	4b40      	ldr	r3, [pc, #256]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ee      	bne.n	8005a1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d105      	bne.n	8005a52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a46:	4b3c      	ldr	r3, [pc, #240]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a50:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 80a4 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a5c:	4b36      	ldr	r3, [pc, #216]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 030c 	and.w	r3, r3, #12
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d06b      	beq.n	8005b40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d149      	bne.n	8005b04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a70:	4b31      	ldr	r3, [pc, #196]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a30      	ldr	r2, [pc, #192]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005a76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fe f8b4 	bl	8003be8 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a84:	f7fe f8b0 	bl	8003be8 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e087      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a96:	4b28      	ldr	r3, [pc, #160]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69da      	ldr	r2, [r3, #28]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	019b      	lsls	r3, r3, #6
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	3b01      	subs	r3, #1
 8005abc:	041b      	lsls	r3, r3, #16
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	061b      	lsls	r3, r3, #24
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005aca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ace:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad0:	4b19      	ldr	r3, [pc, #100]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fe f884 	bl	8003be8 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae4:	f7fe f880 	bl	8003be8 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e057      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af6:	4b10      	ldr	r3, [pc, #64]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x478>
 8005b02:	e04f      	b.n	8005ba4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b04:	4b0c      	ldr	r3, [pc, #48]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0b      	ldr	r2, [pc, #44]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b10:	f7fe f86a 	bl	8003be8 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fe f866 	bl	8003be8 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e03d      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2a:	4b03      	ldr	r3, [pc, #12]	@ (8005b38 <HAL_RCC_OscConfig+0x4cc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4ac>
 8005b36:	e035      	b.n	8005ba4 <HAL_RCC_OscConfig+0x538>
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005b40:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <HAL_RCC_OscConfig+0x544>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d028      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d121      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d11a      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d111      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40023800 	.word	0x40023800

08005bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0d0      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d910      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bda:	4b67      	ldr	r3, [pc, #412]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 020f 	bic.w	r2, r3, #15
 8005be2:	4965      	ldr	r1, [pc, #404]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bea:	4b63      	ldr	r3, [pc, #396]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0b8      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c14:	4b59      	ldr	r3, [pc, #356]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a58      	ldr	r2, [pc, #352]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c2c:	4b53      	ldr	r3, [pc, #332]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4a52      	ldr	r2, [pc, #328]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c38:	4b50      	ldr	r3, [pc, #320]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	494d      	ldr	r1, [pc, #308]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d040      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	4b47      	ldr	r3, [pc, #284]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d115      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e07f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d107      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c76:	4b41      	ldr	r3, [pc, #260]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e073      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c86:	4b3d      	ldr	r3, [pc, #244]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e06b      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c96:	4b39      	ldr	r3, [pc, #228]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f023 0203 	bic.w	r2, r3, #3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4936      	ldr	r1, [pc, #216]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca8:	f7fd ff9e 	bl	8003be8 <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	e00a      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb0:	f7fd ff9a 	bl	8003be8 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e053      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 020c 	and.w	r2, r3, #12
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d1eb      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b27      	ldr	r3, [pc, #156]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d210      	bcs.n	8005d08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b24      	ldr	r3, [pc, #144]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 020f 	bic.w	r2, r3, #15
 8005cee:	4922      	ldr	r1, [pc, #136]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e032      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4b19      	ldr	r3, [pc, #100]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4916      	ldr	r1, [pc, #88]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d32:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	490e      	ldr	r1, [pc, #56]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d46:	f000 f821 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	490a      	ldr	r1, [pc, #40]	@ (8005d80 <HAL_RCC_ClockConfig+0x1cc>)
 8005d58:	5ccb      	ldrb	r3, [r1, r3]
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	4a09      	ldr	r2, [pc, #36]	@ (8005d84 <HAL_RCC_ClockConfig+0x1d0>)
 8005d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <HAL_RCC_ClockConfig+0x1d4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd fefa 	bl	8003b60 <HAL_InitTick>

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40023c00 	.word	0x40023c00
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	0800c50c 	.word	0x0800c50c
 8005d84:	2000004c 	.word	0x2000004c
 8005d88:	20000050 	.word	0x20000050

08005d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d90:	b094      	sub	sp, #80	@ 0x50
 8005d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d98:	2300      	movs	r3, #0
 8005d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005da4:	4b79      	ldr	r3, [pc, #484]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d00d      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x40>
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	f200 80e1 	bhi.w	8005f78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d003      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dbe:	e0db      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dc0:	4b73      	ldr	r3, [pc, #460]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dc4:	e0db      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dc6:	4b73      	ldr	r3, [pc, #460]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dca:	e0d8      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d063      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	2200      	movs	r2, #0
 8005dea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005df6:	2300      	movs	r3, #0
 8005df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005dfe:	4622      	mov	r2, r4
 8005e00:	462b      	mov	r3, r5
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f04f 0100 	mov.w	r1, #0
 8005e0a:	0159      	lsls	r1, r3, #5
 8005e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e10:	0150      	lsls	r0, r2, #5
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4621      	mov	r1, r4
 8005e18:	1a51      	subs	r1, r2, r1
 8005e1a:	6139      	str	r1, [r7, #16]
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e30:	4659      	mov	r1, fp
 8005e32:	018b      	lsls	r3, r1, #6
 8005e34:	4651      	mov	r1, sl
 8005e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	018a      	lsls	r2, r1, #6
 8005e3e:	4651      	mov	r1, sl
 8005e40:	ebb2 0801 	subs.w	r8, r2, r1
 8005e44:	4659      	mov	r1, fp
 8005e46:	eb63 0901 	sbc.w	r9, r3, r1
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e5e:	4690      	mov	r8, r2
 8005e60:	4699      	mov	r9, r3
 8005e62:	4623      	mov	r3, r4
 8005e64:	eb18 0303 	adds.w	r3, r8, r3
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	eb49 0303 	adc.w	r3, r9, r3
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e7e:	4629      	mov	r1, r5
 8005e80:	024b      	lsls	r3, r1, #9
 8005e82:	4621      	mov	r1, r4
 8005e84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e88:	4621      	mov	r1, r4
 8005e8a:	024a      	lsls	r2, r1, #9
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e92:	2200      	movs	r2, #0
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e9c:	f7fa fa10 	bl	80002c0 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ea8:	e058      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eaa:	4b38      	ldr	r3, [pc, #224]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	f04f 0000 	mov.w	r0, #0
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	0159      	lsls	r1, r3, #5
 8005ed2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ed6:	0150      	lsls	r0, r2, #5
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4641      	mov	r1, r8
 8005ede:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ef4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ef8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005efc:	ebb2 040a 	subs.w	r4, r2, sl
 8005f00:	eb63 050b 	sbc.w	r5, r3, fp
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	00eb      	lsls	r3, r5, #3
 8005f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f12:	00e2      	lsls	r2, r4, #3
 8005f14:	4614      	mov	r4, r2
 8005f16:	461d      	mov	r5, r3
 8005f18:	4643      	mov	r3, r8
 8005f1a:	18e3      	adds	r3, r4, r3
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	464b      	mov	r3, r9
 8005f20:	eb45 0303 	adc.w	r3, r5, r3
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f32:	4629      	mov	r1, r5
 8005f34:	028b      	lsls	r3, r1, #10
 8005f36:	4621      	mov	r1, r4
 8005f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	028a      	lsls	r2, r1, #10
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f46:	2200      	movs	r2, #0
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	61fa      	str	r2, [r7, #28]
 8005f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f50:	f7fa f9b6 	bl	80002c0 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	0c1b      	lsrs	r3, r3, #16
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	3301      	adds	r3, #1
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f76:	e002      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3750      	adds	r7, #80	@ 0x50
 8005f84:	46bd      	mov	sp, r7
 8005f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	007a1200 	.word	0x007a1200

08005f98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	2000004c 	.word	0x2000004c

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b05      	ldr	r3, [pc, #20]	@ (8005fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0a9b      	lsrs	r3, r3, #10
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4903      	ldr	r1, [pc, #12]	@ (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	0800c51c 	.word	0x0800c51c

08005fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fdc:	f7ff ffdc 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0b5b      	lsrs	r3, r3, #13
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	@ (8005ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	0800c51c 	.word	0x0800c51c

08006000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d012      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006028:	4b69      	ldr	r3, [pc, #420]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a68      	ldr	r2, [pc, #416]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006032:	6093      	str	r3, [r2, #8]
 8006034:	4b66      	ldr	r3, [pc, #408]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603c:	4964      	ldr	r1, [pc, #400]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800604a:	2301      	movs	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d017      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800605a:	4b5d      	ldr	r3, [pc, #372]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006060:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	4959      	ldr	r1, [pc, #356]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006078:	d101      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800607a:	2301      	movs	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006086:	2301      	movs	r3, #1
 8006088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d017      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006096:	4b4e      	ldr	r3, [pc, #312]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800609c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	494a      	ldr	r1, [pc, #296]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060b4:	d101      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80060b6:	2301      	movs	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 808b 	beq.w	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e4:	4b3a      	ldr	r3, [pc, #232]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	4a39      	ldr	r2, [pc, #228]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80060f0:	4b37      	ldr	r3, [pc, #220]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060fc:	4b35      	ldr	r3, [pc, #212]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a34      	ldr	r2, [pc, #208]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006108:	f7fd fd6e 	bl	8003be8 <HAL_GetTick>
 800610c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006110:	f7fd fd6a 	bl	8003be8 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	@ 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e357      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006122:	4b2c      	ldr	r3, [pc, #176]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800612e:	4b28      	ldr	r3, [pc, #160]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006136:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d035      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d02e      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800614c:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006154:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006156:	4b1e      	ldr	r3, [pc, #120]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	4a1d      	ldr	r2, [pc, #116]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006160:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006166:	4a1a      	ldr	r2, [pc, #104]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800616c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800616e:	4a18      	ldr	r2, [pc, #96]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006174:	4b16      	ldr	r3, [pc, #88]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	d114      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fd fd32 	bl	8003be8 <HAL_GetTick>
 8006184:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006186:	e00a      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006188:	f7fd fd2e 	bl	8003be8 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e319      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800619e:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0ee      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061b6:	d111      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80061b8:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80061c4:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061c6:	400b      	ands	r3, r1
 80061c8:	4901      	ldr	r1, [pc, #4]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
 80061ce:	e00b      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061d0:	40023800 	.word	0x40023800
 80061d4:	40007000 	.word	0x40007000
 80061d8:	0ffffcff 	.word	0x0ffffcff
 80061dc:	4baa      	ldr	r3, [pc, #680]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4aa9      	ldr	r2, [pc, #676]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80061e6:	6093      	str	r3, [r2, #8]
 80061e8:	4ba7      	ldr	r3, [pc, #668]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f4:	49a4      	ldr	r1, [pc, #656]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	d010      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006206:	4ba0      	ldr	r3, [pc, #640]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800620c:	4a9e      	ldr	r2, [pc, #632]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006212:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006216:	4b9c      	ldr	r3, [pc, #624]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006218:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006220:	4999      	ldr	r1, [pc, #612]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006234:	4b94      	ldr	r3, [pc, #592]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006242:	4991      	ldr	r1, [pc, #580]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006256:	4b8c      	ldr	r3, [pc, #560]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006264:	4988      	ldr	r1, [pc, #544]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006278:	4b83      	ldr	r3, [pc, #524]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006286:	4980      	ldr	r1, [pc, #512]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800629a:	4b7b      	ldr	r3, [pc, #492]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a8:	4977      	ldr	r1, [pc, #476]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062bc:	4b72      	ldr	r3, [pc, #456]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c2:	f023 0203 	bic.w	r2, r3, #3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ca:	496f      	ldr	r1, [pc, #444]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062de:	4b6a      	ldr	r3, [pc, #424]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e4:	f023 020c 	bic.w	r2, r3, #12
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ec:	4966      	ldr	r1, [pc, #408]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006300:	4b61      	ldr	r3, [pc, #388]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800630e:	495e      	ldr	r1, [pc, #376]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006322:	4b59      	ldr	r3, [pc, #356]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006328:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006330:	4955      	ldr	r1, [pc, #340]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006344:	4b50      	ldr	r3, [pc, #320]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006352:	494d      	ldr	r1, [pc, #308]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006366:	4b48      	ldr	r3, [pc, #288]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	4944      	ldr	r1, [pc, #272]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006388:	4b3f      	ldr	r3, [pc, #252]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006396:	493c      	ldr	r1, [pc, #240]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80063aa:	4b37      	ldr	r3, [pc, #220]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b8:	4933      	ldr	r1, [pc, #204]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063da:	492b      	ldr	r1, [pc, #172]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d011      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80063ee:	4b26      	ldr	r3, [pc, #152]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063fc:	4922      	ldr	r1, [pc, #136]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800640c:	d101      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800640e:	2301      	movs	r3, #1
 8006410:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800641e:	2301      	movs	r3, #1
 8006420:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800642e:	4b16      	ldr	r3, [pc, #88]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006434:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643c:	4912      	ldr	r1, [pc, #72]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006450:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006456:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006460:	4909      	ldr	r1, [pc, #36]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d006      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80d9 	beq.w	800662e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800647c:	4b02      	ldr	r3, [pc, #8]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a01      	ldr	r2, [pc, #4]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006482:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006486:	e001      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006488:	40023800 	.word	0x40023800
 800648c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648e:	f7fd fbab 	bl	8003be8 <HAL_GetTick>
 8006492:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006494:	e008      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006496:	f7fd fba7 	bl	8003be8 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b64      	cmp	r3, #100	@ 0x64
 80064a2:	d901      	bls.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e194      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a8:	4b6c      	ldr	r3, [pc, #432]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f0      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d021      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11d      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064c8:	4b64      	ldr	r3, [pc, #400]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ce:	0c1b      	lsrs	r3, r3, #16
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064d6:	4b61      	ldr	r3, [pc, #388]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064dc:	0e1b      	lsrs	r3, r3, #24
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	019a      	lsls	r2, r3, #6
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	061b      	lsls	r3, r3, #24
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	071b      	lsls	r3, r3, #28
 80064fc:	4957      	ldr	r1, [pc, #348]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006518:	d00a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02e      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800652e:	d129      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006530:	4b4a      	ldr	r3, [pc, #296]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006536:	0c1b      	lsrs	r3, r3, #16
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800653e:	4b47      	ldr	r3, [pc, #284]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006544:	0f1b      	lsrs	r3, r3, #28
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	019a      	lsls	r2, r3, #6
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	041b      	lsls	r3, r3, #16
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	061b      	lsls	r3, r3, #24
 800655e:	431a      	orrs	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	071b      	lsls	r3, r3, #28
 8006564:	493d      	ldr	r1, [pc, #244]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800656c:	4b3b      	ldr	r3, [pc, #236]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800656e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006572:	f023 021f 	bic.w	r2, r3, #31
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	3b01      	subs	r3, #1
 800657c:	4937      	ldr	r1, [pc, #220]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01d      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006590:	4b32      	ldr	r3, [pc, #200]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006596:	0e1b      	lsrs	r3, r3, #24
 8006598:	f003 030f 	and.w	r3, r3, #15
 800659c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800659e:	4b2f      	ldr	r3, [pc, #188]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a4:	0f1b      	lsrs	r3, r3, #28
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	019a      	lsls	r2, r3, #6
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	431a      	orrs	r2, r3
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	061b      	lsls	r3, r3, #24
 80065be:	431a      	orrs	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	071b      	lsls	r3, r3, #28
 80065c4:	4925      	ldr	r1, [pc, #148]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d011      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	019a      	lsls	r2, r3, #6
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	061b      	lsls	r3, r3, #24
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	071b      	lsls	r3, r3, #28
 80065f4:	4919      	ldr	r1, [pc, #100]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065fc:	4b17      	ldr	r3, [pc, #92]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a16      	ldr	r2, [pc, #88]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006602:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006608:	f7fd faee 	bl	8003be8 <HAL_GetTick>
 800660c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006610:	f7fd faea 	bl	8003be8 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	@ 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e0d7      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006622:	4b0e      	ldr	r3, [pc, #56]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b01      	cmp	r3, #1
 8006632:	f040 80cd 	bne.w	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006636:	4b09      	ldr	r3, [pc, #36]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a08      	ldr	r2, [pc, #32]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800663c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006642:	f7fd fad1 	bl	8003be8 <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006648:	e00a      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800664a:	f7fd facd 	bl	8003be8 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b64      	cmp	r3, #100	@ 0x64
 8006656:	d903      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e0ba      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800665c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006660:	4b5e      	ldr	r3, [pc, #376]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800666c:	d0ed      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800668a:	2b00      	cmp	r3, #0
 800668c:	d02e      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d12a      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006696:	4b51      	ldr	r3, [pc, #324]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669c:	0c1b      	lsrs	r3, r3, #16
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066a4:	4b4d      	ldr	r3, [pc, #308]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066aa:	0f1b      	lsrs	r3, r3, #28
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	019a      	lsls	r2, r3, #6
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	071b      	lsls	r3, r3, #28
 80066ca:	4944      	ldr	r1, [pc, #272]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066d2:	4b42      	ldr	r3, [pc, #264]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	3b01      	subs	r3, #1
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	493d      	ldr	r1, [pc, #244]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d022      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006700:	d11d      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006702:	4b36      	ldr	r3, [pc, #216]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006708:	0e1b      	lsrs	r3, r3, #24
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006710:	4b32      	ldr	r3, [pc, #200]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006716:	0f1b      	lsrs	r3, r3, #28
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	019a      	lsls	r2, r3, #6
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	431a      	orrs	r2, r3
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	061b      	lsls	r3, r3, #24
 8006730:	431a      	orrs	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	071b      	lsls	r3, r3, #28
 8006736:	4929      	ldr	r1, [pc, #164]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d028      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800674a:	4b24      	ldr	r3, [pc, #144]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006750:	0e1b      	lsrs	r3, r3, #24
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006758:	4b20      	ldr	r3, [pc, #128]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675e:	0c1b      	lsrs	r3, r3, #16
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	019a      	lsls	r2, r3, #6
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	431a      	orrs	r2, r3
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	061b      	lsls	r3, r3, #24
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	071b      	lsls	r3, r3, #28
 800677e:	4917      	ldr	r1, [pc, #92]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006786:	4b15      	ldr	r3, [pc, #84]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800678c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	4911      	ldr	r1, [pc, #68]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800679c:	4b0f      	ldr	r3, [pc, #60]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0e      	ldr	r2, [pc, #56]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067a8:	f7fd fa1e 	bl	8003be8 <HAL_GetTick>
 80067ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067b0:	f7fd fa1a 	bl	8003be8 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	@ 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e007      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067c2:	4b06      	ldr	r3, [pc, #24]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ce:	d1ef      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800

080067e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e09d      	b.n	800692e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d108      	bne.n	800680c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006802:	d009      	beq.n	8006818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	61da      	str	r2, [r3, #28]
 800680a:	e005      	b.n	8006818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fc fae0 	bl	8002df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800684e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006858:	d902      	bls.n	8006860 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e002      	b.n	8006866 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006864:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800686e:	d007      	beq.n	8006880 <HAL_SPI_Init+0xa0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006878:	d002      	beq.n	8006880 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c2:	ea42 0103 	orr.w	r1, r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	0c1b      	lsrs	r3, r3, #16
 80068dc:	f003 0204 	and.w	r2, r3, #4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80068fc:	ea42 0103 	orr.w	r1, r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69da      	ldr	r2, [r3, #28]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800691c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b088      	sub	sp, #32
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	4613      	mov	r3, r2
 8006944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_SPI_Transmit+0x22>
 8006954:	2302      	movs	r3, #2
 8006956:	e15f      	b.n	8006c18 <HAL_SPI_Transmit+0x2e2>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006960:	f7fd f942 	bl	8003be8 <HAL_GetTick>
 8006964:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d002      	beq.n	800697c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006976:	2302      	movs	r3, #2
 8006978:	77fb      	strb	r3, [r7, #31]
    goto error;
 800697a:	e148      	b.n	8006c0e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_SPI_Transmit+0x52>
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d102      	bne.n	800698e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800698c:	e13f      	b.n	8006c0e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2203      	movs	r2, #3
 8006992:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	88fa      	ldrh	r2, [r7, #6]
 80069a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	88fa      	ldrh	r2, [r7, #6]
 80069ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d8:	d10f      	bne.n	80069fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a04:	2b40      	cmp	r3, #64	@ 0x40
 8006a06:	d007      	beq.n	8006a18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a20:	d94f      	bls.n	8006ac2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_SPI_Transmit+0xfa>
 8006a2a:	8afb      	ldrh	r3, [r7, #22]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d142      	bne.n	8006ab6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	881a      	ldrh	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a40:	1c9a      	adds	r2, r3, #2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a54:	e02f      	b.n	8006ab6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d112      	bne.n	8006a8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a68:	881a      	ldrh	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a74:	1c9a      	adds	r2, r3, #2
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a88:	e015      	b.n	8006ab6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a8a:	f7fd f8ad 	bl	8003be8 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d803      	bhi.n	8006aa2 <HAL_SPI_Transmit+0x16c>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d102      	bne.n	8006aa8 <HAL_SPI_Transmit+0x172>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006ab4:	e0ab      	b.n	8006c0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1ca      	bne.n	8006a56 <HAL_SPI_Transmit+0x120>
 8006ac0:	e080      	b.n	8006bc4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_SPI_Transmit+0x19a>
 8006aca:	8afb      	ldrh	r3, [r7, #22]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d174      	bne.n	8006bba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d912      	bls.n	8006b00 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ade:	881a      	ldrh	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	1c9a      	adds	r2, r3, #2
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b02      	subs	r3, #2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006afe:	e05c      	b.n	8006bba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	7812      	ldrb	r2, [r2, #0]
 8006b0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b26:	e048      	b.n	8006bba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d12b      	bne.n	8006b8e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d912      	bls.n	8006b66 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b44:	881a      	ldrh	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	1c9a      	adds	r2, r3, #2
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b02      	subs	r3, #2
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b64:	e029      	b.n	8006bba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b8c:	e015      	b.n	8006bba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8e:	f7fd f82b 	bl	8003be8 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d803      	bhi.n	8006ba6 <HAL_SPI_Transmit+0x270>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d102      	bne.n	8006bac <HAL_SPI_Transmit+0x276>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006bb8:	e029      	b.n	8006c0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1b1      	bne.n	8006b28 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fb69 	bl	80072a0 <SPI_EndRxTxTransaction>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006be2:	2300      	movs	r3, #0
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e003      	b.n	8006c0e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	@ 0x28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_SPI_TransmitReceive+0x26>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e20a      	b.n	800705c <HAL_SPI_TransmitReceive+0x43c>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c4e:	f7fc ffcb 	bl	8003be8 <HAL_GetTick>
 8006c52:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c5a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006c62:	887b      	ldrh	r3, [r7, #2]
 8006c64:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006c66:	887b      	ldrh	r3, [r7, #2]
 8006c68:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c6a:	7efb      	ldrb	r3, [r7, #27]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d00e      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x6e>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c76:	d106      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x66>
 8006c80:	7efb      	ldrb	r3, [r7, #27]
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d003      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006c86:	2302      	movs	r3, #2
 8006c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006c8c:	e1e0      	b.n	8007050 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_SPI_TransmitReceive+0x80>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_SPI_TransmitReceive+0x80>
 8006c9a:	887b      	ldrh	r3, [r7, #2]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d103      	bne.n	8006ca8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006ca6:	e1d3      	b.n	8007050 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d003      	beq.n	8006cbc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2205      	movs	r2, #5
 8006cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	887a      	ldrh	r2, [r7, #2]
 8006ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	887a      	ldrh	r2, [r7, #2]
 8006cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	887a      	ldrh	r2, [r7, #2]
 8006ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cfe:	d802      	bhi.n	8006d06 <HAL_SPI_TransmitReceive+0xe6>
 8006d00:	8a3b      	ldrh	r3, [r7, #16]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d908      	bls.n	8006d18 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	e007      	b.n	8006d28 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d26:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d32:	2b40      	cmp	r3, #64	@ 0x40
 8006d34:	d007      	beq.n	8006d46 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d4e:	f240 8081 	bls.w	8006e54 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x140>
 8006d5a:	8a7b      	ldrh	r3, [r7, #18]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d16d      	bne.n	8006e3c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d64:	881a      	ldrh	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d70:	1c9a      	adds	r2, r3, #2
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d84:	e05a      	b.n	8006e3c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d11b      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x1ac>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d016      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x1ac>
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d113      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da8:	881a      	ldrh	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db4:	1c9a      	adds	r2, r3, #2
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d11c      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x1f4>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d016      	beq.n	8006e14 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df0:	b292      	uxth	r2, r2
 8006df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df8:	1c9a      	adds	r2, r3, #2
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e10:	2301      	movs	r3, #1
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e14:	f7fc fee8 	bl	8003be8 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d80b      	bhi.n	8006e3c <HAL_SPI_TransmitReceive+0x21c>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d007      	beq.n	8006e3c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006e3a:	e109      	b.n	8007050 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d19f      	bne.n	8006d86 <HAL_SPI_TransmitReceive+0x166>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d199      	bne.n	8006d86 <HAL_SPI_TransmitReceive+0x166>
 8006e52:	e0e3      	b.n	800701c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x244>
 8006e5c:	8a7b      	ldrh	r3, [r7, #18]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	f040 80cf 	bne.w	8007002 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d912      	bls.n	8006e94 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	881a      	ldrh	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	1c9a      	adds	r2, r3, #2
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b02      	subs	r3, #2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e92:	e0b6      	b.n	8007002 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eba:	e0a2      	b.n	8007002 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d134      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x314>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d02f      	beq.n	8006f34 <HAL_SPI_TransmitReceive+0x314>
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d12c      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d912      	bls.n	8006f0a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	881a      	ldrh	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef4:	1c9a      	adds	r2, r3, #2
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b02      	subs	r3, #2
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f08:	e012      	b.n	8006f30 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	7812      	ldrb	r2, [r2, #0]
 8006f16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d148      	bne.n	8006fd4 <HAL_SPI_TransmitReceive+0x3b4>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d042      	beq.n	8006fd4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d923      	bls.n	8006fa2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f64:	b292      	uxth	r2, r2
 8006f66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b02      	subs	r3, #2
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d81f      	bhi.n	8006fd0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f9e:	605a      	str	r2, [r3, #4]
 8006fa0:	e016      	b.n	8006fd0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f103 020c 	add.w	r2, r3, #12
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fd4:	f7fc fe08 	bl	8003be8 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d803      	bhi.n	8006fec <HAL_SPI_TransmitReceive+0x3cc>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d102      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x3d2>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d107      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007000:	e026      	b.n	8007050 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	f47f af57 	bne.w	8006ebc <HAL_SPI_TransmitReceive+0x29c>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	f47f af50 	bne.w	8006ebc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f93d 	bl	80072a0 <SPI_EndRxTxTransaction>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007046:	e003      	b.n	8007050 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007058:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800705c:	4618      	mov	r0, r3
 800705e:	3728      	adds	r7, #40	@ 0x28
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007074:	f7fc fdb8 	bl	8003be8 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707c:	1a9b      	subs	r3, r3, r2
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4413      	add	r3, r2
 8007082:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007084:	f7fc fdb0 	bl	8003be8 <HAL_GetTick>
 8007088:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800708a:	4b39      	ldr	r3, [pc, #228]	@ (8007170 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	015b      	lsls	r3, r3, #5
 8007090:	0d1b      	lsrs	r3, r3, #20
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	fb02 f303 	mul.w	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800709a:	e054      	b.n	8007146 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d050      	beq.n	8007146 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070a4:	f7fc fda0 	bl	8003be8 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d902      	bls.n	80070ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d13d      	bne.n	8007136 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070d2:	d111      	bne.n	80070f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070dc:	d004      	beq.n	80070e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e6:	d107      	bne.n	80070f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007100:	d10f      	bne.n	8007122 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007120:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e017      	b.n	8007166 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	3b01      	subs	r3, #1
 8007144:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4013      	ands	r3, r2
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	429a      	cmp	r2, r3
 8007154:	bf0c      	ite	eq
 8007156:	2301      	moveq	r3, #1
 8007158:	2300      	movne	r3, #0
 800715a:	b2db      	uxtb	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	429a      	cmp	r2, r3
 8007162:	d19b      	bne.n	800709c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000004c 	.word	0x2000004c

08007174 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08a      	sub	sp, #40	@ 0x28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007182:	2300      	movs	r3, #0
 8007184:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007186:	f7fc fd2f 	bl	8003be8 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	1a9b      	subs	r3, r3, r2
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	4413      	add	r3, r2
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007196:	f7fc fd27 	bl	8003be8 <HAL_GetTick>
 800719a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80071a4:	4b3d      	ldr	r3, [pc, #244]	@ (800729c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	00da      	lsls	r2, r3, #3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	0d1b      	lsrs	r3, r3, #20
 80071b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80071bc:	e060      	b.n	8007280 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80071c4:	d107      	bne.n	80071d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d050      	beq.n	8007280 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071de:	f7fc fd03 	bl	8003be8 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d902      	bls.n	80071f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d13d      	bne.n	8007270 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007202:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800720c:	d111      	bne.n	8007232 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007216:	d004      	beq.n	8007222 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007220:	d107      	bne.n	8007232 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007230:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800723a:	d10f      	bne.n	800725c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800725a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e010      	b.n	8007292 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	3b01      	subs	r3, #1
 800727e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4013      	ands	r3, r2
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d196      	bne.n	80071be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3728      	adds	r7, #40	@ 0x28
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	2000004c 	.word	0x2000004c

080072a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff ff5b 	bl	8007174 <SPI_WaitFifoStateUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072c8:	f043 0220 	orr.w	r2, r3, #32
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e046      	b.n	8007362 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072d4:	4b25      	ldr	r3, [pc, #148]	@ (800736c <SPI_EndRxTxTransaction+0xcc>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a25      	ldr	r2, [pc, #148]	@ (8007370 <SPI_EndRxTxTransaction+0xd0>)
 80072da:	fba2 2303 	umull	r2, r3, r2, r3
 80072de:	0d5b      	lsrs	r3, r3, #21
 80072e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072e4:	fb02 f303 	mul.w	r3, r2, r3
 80072e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072f2:	d112      	bne.n	800731a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2200      	movs	r2, #0
 80072fc:	2180      	movs	r1, #128	@ 0x80
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff feb0 	bl	8007064 <SPI_WaitFlagStateUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d016      	beq.n	8007338 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800730e:	f043 0220 	orr.w	r2, r3, #32
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e023      	b.n	8007362 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	3b01      	subs	r3, #1
 8007324:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007330:	2b80      	cmp	r3, #128	@ 0x80
 8007332:	d0f2      	beq.n	800731a <SPI_EndRxTxTransaction+0x7a>
 8007334:	e000      	b.n	8007338 <SPI_EndRxTxTransaction+0x98>
        break;
 8007336:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2200      	movs	r2, #0
 8007340:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff ff15 	bl	8007174 <SPI_WaitFifoStateUntilTimeout>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007354:	f043 0220 	orr.w	r2, r3, #32
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e000      	b.n	8007362 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	2000004c 	.word	0x2000004c
 8007370:	165e9f81 	.word	0x165e9f81

08007374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e049      	b.n	800741a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fb fd8e 	bl	8002ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f001 f876 	bl	80084a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	d001      	beq.n	800743c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e04c      	b.n	80074d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a26      	ldr	r2, [pc, #152]	@ (80074e4 <HAL_TIM_Base_Start+0xc0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d022      	beq.n	8007494 <HAL_TIM_Base_Start+0x70>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007456:	d01d      	beq.n	8007494 <HAL_TIM_Base_Start+0x70>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a22      	ldr	r2, [pc, #136]	@ (80074e8 <HAL_TIM_Base_Start+0xc4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d018      	beq.n	8007494 <HAL_TIM_Base_Start+0x70>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a21      	ldr	r2, [pc, #132]	@ (80074ec <HAL_TIM_Base_Start+0xc8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <HAL_TIM_Base_Start+0x70>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1f      	ldr	r2, [pc, #124]	@ (80074f0 <HAL_TIM_Base_Start+0xcc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00e      	beq.n	8007494 <HAL_TIM_Base_Start+0x70>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1e      	ldr	r2, [pc, #120]	@ (80074f4 <HAL_TIM_Base_Start+0xd0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d009      	beq.n	8007494 <HAL_TIM_Base_Start+0x70>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1c      	ldr	r2, [pc, #112]	@ (80074f8 <HAL_TIM_Base_Start+0xd4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <HAL_TIM_Base_Start+0x70>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1b      	ldr	r2, [pc, #108]	@ (80074fc <HAL_TIM_Base_Start+0xd8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d115      	bne.n	80074c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	4b19      	ldr	r3, [pc, #100]	@ (8007500 <HAL_TIM_Base_Start+0xdc>)
 800749c:	4013      	ands	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b06      	cmp	r3, #6
 80074a4:	d015      	beq.n	80074d2 <HAL_TIM_Base_Start+0xae>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ac:	d011      	beq.n	80074d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0201 	orr.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074be:	e008      	b.n	80074d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0201 	orr.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	e000      	b.n	80074d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40000400 	.word	0x40000400
 80074ec:	40000800 	.word	0x40000800
 80074f0:	40000c00 	.word	0x40000c00
 80074f4:	40010400 	.word	0x40010400
 80074f8:	40014000 	.word	0x40014000
 80074fc:	40001800 	.word	0x40001800
 8007500:	00010007 	.word	0x00010007

08007504 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a1a      	ldr	r2, [r3, #32]
 8007512:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10f      	bne.n	800753c <HAL_TIM_Base_Stop+0x38>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	f240 4344 	movw	r3, #1092	@ 0x444
 8007526:	4013      	ands	r3, r2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d107      	bne.n	800753c <HAL_TIM_Base_Stop+0x38>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0201 	bic.w	r2, r2, #1
 800753a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e049      	b.n	80075f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7fb fd93 	bl	80030a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3304      	adds	r3, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f000 ff87 	bl	80084a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <HAL_TIM_PWM_Start+0x24>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	e03c      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b04      	cmp	r3, #4
 8007628:	d109      	bne.n	800763e <HAL_TIM_PWM_Start+0x3e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	bf14      	ite	ne
 8007636:	2301      	movne	r3, #1
 8007638:	2300      	moveq	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	e02f      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b08      	cmp	r3, #8
 8007642:	d109      	bne.n	8007658 <HAL_TIM_PWM_Start+0x58>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	bf14      	ite	ne
 8007650:	2301      	movne	r3, #1
 8007652:	2300      	moveq	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	e022      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b0c      	cmp	r3, #12
 800765c:	d109      	bne.n	8007672 <HAL_TIM_PWM_Start+0x72>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	bf14      	ite	ne
 800766a:	2301      	movne	r3, #1
 800766c:	2300      	moveq	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	e015      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b10      	cmp	r3, #16
 8007676:	d109      	bne.n	800768c <HAL_TIM_PWM_Start+0x8c>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e008      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	bf14      	ite	ne
 8007698:	2301      	movne	r3, #1
 800769a:	2300      	moveq	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e092      	b.n	80077cc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <HAL_TIM_PWM_Start+0xb6>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b4:	e023      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d104      	bne.n	80076c6 <HAL_TIM_PWM_Start+0xc6>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076c4:	e01b      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d104      	bne.n	80076d6 <HAL_TIM_PWM_Start+0xd6>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076d4:	e013      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b0c      	cmp	r3, #12
 80076da:	d104      	bne.n	80076e6 <HAL_TIM_PWM_Start+0xe6>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076e4:	e00b      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d104      	bne.n	80076f6 <HAL_TIM_PWM_Start+0xf6>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076f4:	e003      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2202      	movs	r2, #2
 80076fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2201      	movs	r2, #1
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f001 fa70 	bl	8008bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a30      	ldr	r2, [pc, #192]	@ (80077d4 <HAL_TIM_PWM_Start+0x1d4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <HAL_TIM_PWM_Start+0x120>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a2f      	ldr	r2, [pc, #188]	@ (80077d8 <HAL_TIM_PWM_Start+0x1d8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d101      	bne.n	8007724 <HAL_TIM_PWM_Start+0x124>
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <HAL_TIM_PWM_Start+0x126>
 8007724:	2300      	movs	r3, #0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007738:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a25      	ldr	r2, [pc, #148]	@ (80077d4 <HAL_TIM_PWM_Start+0x1d4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d022      	beq.n	800778a <HAL_TIM_PWM_Start+0x18a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800774c:	d01d      	beq.n	800778a <HAL_TIM_PWM_Start+0x18a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a22      	ldr	r2, [pc, #136]	@ (80077dc <HAL_TIM_PWM_Start+0x1dc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d018      	beq.n	800778a <HAL_TIM_PWM_Start+0x18a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a20      	ldr	r2, [pc, #128]	@ (80077e0 <HAL_TIM_PWM_Start+0x1e0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d013      	beq.n	800778a <HAL_TIM_PWM_Start+0x18a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1f      	ldr	r2, [pc, #124]	@ (80077e4 <HAL_TIM_PWM_Start+0x1e4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00e      	beq.n	800778a <HAL_TIM_PWM_Start+0x18a>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a19      	ldr	r2, [pc, #100]	@ (80077d8 <HAL_TIM_PWM_Start+0x1d8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d009      	beq.n	800778a <HAL_TIM_PWM_Start+0x18a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1b      	ldr	r2, [pc, #108]	@ (80077e8 <HAL_TIM_PWM_Start+0x1e8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d004      	beq.n	800778a <HAL_TIM_PWM_Start+0x18a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a19      	ldr	r2, [pc, #100]	@ (80077ec <HAL_TIM_PWM_Start+0x1ec>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d115      	bne.n	80077b6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	4b17      	ldr	r3, [pc, #92]	@ (80077f0 <HAL_TIM_PWM_Start+0x1f0>)
 8007792:	4013      	ands	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b06      	cmp	r3, #6
 800779a:	d015      	beq.n	80077c8 <HAL_TIM_PWM_Start+0x1c8>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a2:	d011      	beq.n	80077c8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b4:	e008      	b.n	80077c8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0201 	orr.w	r2, r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e000      	b.n	80077ca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40010000 	.word	0x40010000
 80077d8:	40010400 	.word	0x40010400
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40014000 	.word	0x40014000
 80077ec:	40001800 	.word	0x40001800
 80077f0:	00010007 	.word	0x00010007

080077f4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <HAL_TIM_PWM_Start_IT+0x28>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	bf14      	ite	ne
 8007814:	2301      	movne	r3, #1
 8007816:	2300      	moveq	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	e03c      	b.n	8007896 <HAL_TIM_PWM_Start_IT+0xa2>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b04      	cmp	r3, #4
 8007820:	d109      	bne.n	8007836 <HAL_TIM_PWM_Start_IT+0x42>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b01      	cmp	r3, #1
 800782c:	bf14      	ite	ne
 800782e:	2301      	movne	r3, #1
 8007830:	2300      	moveq	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	e02f      	b.n	8007896 <HAL_TIM_PWM_Start_IT+0xa2>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b08      	cmp	r3, #8
 800783a:	d109      	bne.n	8007850 <HAL_TIM_PWM_Start_IT+0x5c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b01      	cmp	r3, #1
 8007846:	bf14      	ite	ne
 8007848:	2301      	movne	r3, #1
 800784a:	2300      	moveq	r3, #0
 800784c:	b2db      	uxtb	r3, r3
 800784e:	e022      	b.n	8007896 <HAL_TIM_PWM_Start_IT+0xa2>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b0c      	cmp	r3, #12
 8007854:	d109      	bne.n	800786a <HAL_TIM_PWM_Start_IT+0x76>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b01      	cmp	r3, #1
 8007860:	bf14      	ite	ne
 8007862:	2301      	movne	r3, #1
 8007864:	2300      	moveq	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	e015      	b.n	8007896 <HAL_TIM_PWM_Start_IT+0xa2>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b10      	cmp	r3, #16
 800786e:	d109      	bne.n	8007884 <HAL_TIM_PWM_Start_IT+0x90>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	bf14      	ite	ne
 800787c:	2301      	movne	r3, #1
 800787e:	2300      	moveq	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	e008      	b.n	8007896 <HAL_TIM_PWM_Start_IT+0xa2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b01      	cmp	r3, #1
 800788e:	bf14      	ite	ne
 8007890:	2301      	movne	r3, #1
 8007892:	2300      	moveq	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e0dd      	b.n	8007a5a <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_PWM_Start_IT+0xba>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078ac:	e023      	b.n	80078f6 <HAL_TIM_PWM_Start_IT+0x102>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d104      	bne.n	80078be <HAL_TIM_PWM_Start_IT+0xca>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078bc:	e01b      	b.n	80078f6 <HAL_TIM_PWM_Start_IT+0x102>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d104      	bne.n	80078ce <HAL_TIM_PWM_Start_IT+0xda>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078cc:	e013      	b.n	80078f6 <HAL_TIM_PWM_Start_IT+0x102>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d104      	bne.n	80078de <HAL_TIM_PWM_Start_IT+0xea>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078dc:	e00b      	b.n	80078f6 <HAL_TIM_PWM_Start_IT+0x102>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	d104      	bne.n	80078ee <HAL_TIM_PWM_Start_IT+0xfa>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078ec:	e003      	b.n	80078f6 <HAL_TIM_PWM_Start_IT+0x102>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b0c      	cmp	r3, #12
 80078fa:	d841      	bhi.n	8007980 <HAL_TIM_PWM_Start_IT+0x18c>
 80078fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007904 <HAL_TIM_PWM_Start_IT+0x110>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007939 	.word	0x08007939
 8007908:	08007981 	.word	0x08007981
 800790c:	08007981 	.word	0x08007981
 8007910:	08007981 	.word	0x08007981
 8007914:	0800794b 	.word	0x0800794b
 8007918:	08007981 	.word	0x08007981
 800791c:	08007981 	.word	0x08007981
 8007920:	08007981 	.word	0x08007981
 8007924:	0800795d 	.word	0x0800795d
 8007928:	08007981 	.word	0x08007981
 800792c:	08007981 	.word	0x08007981
 8007930:	08007981 	.word	0x08007981
 8007934:	0800796f 	.word	0x0800796f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0202 	orr.w	r2, r2, #2
 8007946:	60da      	str	r2, [r3, #12]
      break;
 8007948:	e01d      	b.n	8007986 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0204 	orr.w	r2, r2, #4
 8007958:	60da      	str	r2, [r3, #12]
      break;
 800795a:	e014      	b.n	8007986 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0208 	orr.w	r2, r2, #8
 800796a:	60da      	str	r2, [r3, #12]
      break;
 800796c:	e00b      	b.n	8007986 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0210 	orr.w	r2, r2, #16
 800797c:	60da      	str	r2, [r3, #12]
      break;
 800797e:	e002      	b.n	8007986 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
      break;
 8007984:	bf00      	nop
  }

  if (status == HAL_OK)
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d165      	bne.n	8007a58 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2201      	movs	r2, #1
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f001 f929 	bl	8008bec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a31      	ldr	r2, [pc, #196]	@ (8007a64 <HAL_TIM_PWM_Start_IT+0x270>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d004      	beq.n	80079ae <HAL_TIM_PWM_Start_IT+0x1ba>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007a68 <HAL_TIM_PWM_Start_IT+0x274>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d101      	bne.n	80079b2 <HAL_TIM_PWM_Start_IT+0x1be>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_TIM_PWM_Start_IT+0x1c0>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d007      	beq.n	80079c8 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a25      	ldr	r2, [pc, #148]	@ (8007a64 <HAL_TIM_PWM_Start_IT+0x270>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d022      	beq.n	8007a18 <HAL_TIM_PWM_Start_IT+0x224>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079da:	d01d      	beq.n	8007a18 <HAL_TIM_PWM_Start_IT+0x224>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a22      	ldr	r2, [pc, #136]	@ (8007a6c <HAL_TIM_PWM_Start_IT+0x278>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d018      	beq.n	8007a18 <HAL_TIM_PWM_Start_IT+0x224>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a21      	ldr	r2, [pc, #132]	@ (8007a70 <HAL_TIM_PWM_Start_IT+0x27c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d013      	beq.n	8007a18 <HAL_TIM_PWM_Start_IT+0x224>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007a74 <HAL_TIM_PWM_Start_IT+0x280>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00e      	beq.n	8007a18 <HAL_TIM_PWM_Start_IT+0x224>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007a68 <HAL_TIM_PWM_Start_IT+0x274>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d009      	beq.n	8007a18 <HAL_TIM_PWM_Start_IT+0x224>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1b      	ldr	r2, [pc, #108]	@ (8007a78 <HAL_TIM_PWM_Start_IT+0x284>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d004      	beq.n	8007a18 <HAL_TIM_PWM_Start_IT+0x224>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a1a      	ldr	r2, [pc, #104]	@ (8007a7c <HAL_TIM_PWM_Start_IT+0x288>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d115      	bne.n	8007a44 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	4b18      	ldr	r3, [pc, #96]	@ (8007a80 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b06      	cmp	r3, #6
 8007a28:	d015      	beq.n	8007a56 <HAL_TIM_PWM_Start_IT+0x262>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a30:	d011      	beq.n	8007a56 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0201 	orr.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a42:	e008      	b.n	8007a56 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e000      	b.n	8007a58 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a56:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40000800 	.word	0x40000800
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	40014000 	.word	0x40014000
 8007a7c:	40001800 	.word	0x40001800
 8007a80:	00010007 	.word	0x00010007

08007a84 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b0c      	cmp	r3, #12
 8007a96:	d841      	bhi.n	8007b1c <HAL_TIM_PWM_Stop_IT+0x98>
 8007a98:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007ad5 	.word	0x08007ad5
 8007aa4:	08007b1d 	.word	0x08007b1d
 8007aa8:	08007b1d 	.word	0x08007b1d
 8007aac:	08007b1d 	.word	0x08007b1d
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	08007b1d 	.word	0x08007b1d
 8007ab8:	08007b1d 	.word	0x08007b1d
 8007abc:	08007b1d 	.word	0x08007b1d
 8007ac0:	08007af9 	.word	0x08007af9
 8007ac4:	08007b1d 	.word	0x08007b1d
 8007ac8:	08007b1d 	.word	0x08007b1d
 8007acc:	08007b1d 	.word	0x08007b1d
 8007ad0:	08007b0b 	.word	0x08007b0b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0202 	bic.w	r2, r2, #2
 8007ae2:	60da      	str	r2, [r3, #12]
      break;
 8007ae4:	e01d      	b.n	8007b22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0204 	bic.w	r2, r2, #4
 8007af4:	60da      	str	r2, [r3, #12]
      break;
 8007af6:	e014      	b.n	8007b22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0208 	bic.w	r2, r2, #8
 8007b06:	60da      	str	r2, [r3, #12]
      break;
 8007b08:	e00b      	b.n	8007b22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0210 	bic.w	r2, r2, #16
 8007b18:	60da      	str	r2, [r3, #12]
      break;
 8007b1a:	e002      	b.n	8007b22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b20:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d171      	bne.n	8007c0c <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f001 f85b 	bl	8008bec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a37      	ldr	r2, [pc, #220]	@ (8007c18 <HAL_TIM_PWM_Stop_IT+0x194>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d004      	beq.n	8007b4a <HAL_TIM_PWM_Stop_IT+0xc6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a35      	ldr	r2, [pc, #212]	@ (8007c1c <HAL_TIM_PWM_Stop_IT+0x198>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d101      	bne.n	8007b4e <HAL_TIM_PWM_Stop_IT+0xca>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <HAL_TIM_PWM_Stop_IT+0xcc>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d017      	beq.n	8007b84 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6a1a      	ldr	r2, [r3, #32]
 8007b5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10f      	bne.n	8007b84 <HAL_TIM_PWM_Stop_IT+0x100>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6a1a      	ldr	r2, [r3, #32]
 8007b6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <HAL_TIM_PWM_Stop_IT+0x100>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b82:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6a1a      	ldr	r2, [r3, #32]
 8007b8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10f      	bne.n	8007bb4 <HAL_TIM_PWM_Stop_IT+0x130>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6a1a      	ldr	r2, [r3, #32]
 8007b9a:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d107      	bne.n	8007bb4 <HAL_TIM_PWM_Stop_IT+0x130>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0201 	bic.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d104      	bne.n	8007bc4 <HAL_TIM_PWM_Stop_IT+0x140>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bc2:	e023      	b.n	8007c0c <HAL_TIM_PWM_Stop_IT+0x188>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d104      	bne.n	8007bd4 <HAL_TIM_PWM_Stop_IT+0x150>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bd2:	e01b      	b.n	8007c0c <HAL_TIM_PWM_Stop_IT+0x188>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d104      	bne.n	8007be4 <HAL_TIM_PWM_Stop_IT+0x160>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be2:	e013      	b.n	8007c0c <HAL_TIM_PWM_Stop_IT+0x188>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b0c      	cmp	r3, #12
 8007be8:	d104      	bne.n	8007bf4 <HAL_TIM_PWM_Stop_IT+0x170>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bf2:	e00b      	b.n	8007c0c <HAL_TIM_PWM_Stop_IT+0x188>
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2b10      	cmp	r3, #16
 8007bf8:	d104      	bne.n	8007c04 <HAL_TIM_PWM_Stop_IT+0x180>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c02:	e003      	b.n	8007c0c <HAL_TIM_PWM_Stop_IT+0x188>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	40010000 	.word	0x40010000
 8007c1c:	40010400 	.word	0x40010400

08007c20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e08f      	b.n	8007d54 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d106      	bne.n	8007c4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7fb f9df 	bl	800300c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6899      	ldr	r1, [r3, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	4b3e      	ldr	r3, [pc, #248]	@ (8007d5c <HAL_TIM_Encoder_Init+0x13c>)
 8007c62:	400b      	ands	r3, r1
 8007c64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f000 fc17 	bl	80084a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4b31      	ldr	r3, [pc, #196]	@ (8007d60 <HAL_TIM_Encoder_Init+0x140>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	4313      	orrs	r3, r2
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d64 <HAL_TIM_Encoder_Init+0x144>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8007d68 <HAL_TIM_Encoder_Init+0x148>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	011a      	lsls	r2, r3, #4
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	031b      	lsls	r3, r3, #12
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007cee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007cf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	4313      	orrs	r3, r2
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	fffebff8 	.word	0xfffebff8
 8007d60:	fffffcfc 	.word	0xfffffcfc
 8007d64:	fffff3f3 	.word	0xfffff3f3
 8007d68:	ffff0f0f 	.word	0xffff0f0f

08007d6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d110      	bne.n	8007dbe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d102      	bne.n	8007da8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007da2:	7b7b      	ldrb	r3, [r7, #13]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d001      	beq.n	8007dac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e069      	b.n	8007e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dbc:	e031      	b.n	8007e22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d110      	bne.n	8007de6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d102      	bne.n	8007dd0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dca:	7b3b      	ldrb	r3, [r7, #12]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d001      	beq.n	8007dd4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e055      	b.n	8007e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007de4:	e01d      	b.n	8007e22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d108      	bne.n	8007dfe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d105      	bne.n	8007dfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007df2:	7b7b      	ldrb	r3, [r7, #13]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d102      	bne.n	8007dfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007df8:	7b3b      	ldrb	r3, [r7, #12]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d001      	beq.n	8007e02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e03e      	b.n	8007e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2202      	movs	r2, #2
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2202      	movs	r2, #2
 8007e16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <HAL_TIM_Encoder_Start+0xc4>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d008      	beq.n	8007e40 <HAL_TIM_Encoder_Start+0xd4>
 8007e2e:	e00f      	b.n	8007e50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2201      	movs	r2, #1
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fed7 	bl	8008bec <TIM_CCxChannelCmd>
      break;
 8007e3e:	e016      	b.n	8007e6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2201      	movs	r2, #1
 8007e46:	2104      	movs	r1, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fecf 	bl	8008bec <TIM_CCxChannelCmd>
      break;
 8007e4e:	e00e      	b.n	8007e6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fec7 	bl	8008bec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2201      	movs	r2, #1
 8007e64:	2104      	movs	r1, #4
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fec0 	bl	8008bec <TIM_CCxChannelCmd>
      break;
 8007e6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0201 	orr.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d020      	beq.n	8007eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01b      	beq.n	8007eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0202 	mvn.w	r2, #2
 8007ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fad2 	bl	800847c <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fac4 	bl	8008468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7f8 fd1b 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d020      	beq.n	8007f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01b      	beq.n	8007f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0204 	mvn.w	r2, #4
 8007f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 faac 	bl	800847c <HAL_TIM_IC_CaptureCallback>
 8007f24:	e005      	b.n	8007f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa9e 	bl	8008468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7f8 fcf5 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 0308 	and.w	r3, r3, #8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d020      	beq.n	8007f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01b      	beq.n	8007f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0208 	mvn.w	r2, #8
 8007f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2204      	movs	r2, #4
 8007f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa86 	bl	800847c <HAL_TIM_IC_CaptureCallback>
 8007f70:	e005      	b.n	8007f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fa78 	bl	8008468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7f8 fccf 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f003 0310 	and.w	r3, r3, #16
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d020      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01b      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0210 	mvn.w	r2, #16
 8007fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa60 	bl	800847c <HAL_TIM_IC_CaptureCallback>
 8007fbc:	e005      	b.n	8007fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa52 	bl	8008468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7f8 fca9 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0201 	mvn.w	r2, #1
 8007fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa30 	bl	8008454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00c      	beq.n	8008022 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800801a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 ff21 	bl	8008e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800803e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 ff19 	bl	8008e78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fa13 	bl	8008490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f06f 0220 	mvn.w	r2, #32
 8008086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fee1 	bl	8008e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800808e:	bf00      	nop
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e0ff      	b.n	80082b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b14      	cmp	r3, #20
 80080c2:	f200 80f0 	bhi.w	80082a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080c6:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	08008121 	.word	0x08008121
 80080d0:	080082a7 	.word	0x080082a7
 80080d4:	080082a7 	.word	0x080082a7
 80080d8:	080082a7 	.word	0x080082a7
 80080dc:	08008161 	.word	0x08008161
 80080e0:	080082a7 	.word	0x080082a7
 80080e4:	080082a7 	.word	0x080082a7
 80080e8:	080082a7 	.word	0x080082a7
 80080ec:	080081a3 	.word	0x080081a3
 80080f0:	080082a7 	.word	0x080082a7
 80080f4:	080082a7 	.word	0x080082a7
 80080f8:	080082a7 	.word	0x080082a7
 80080fc:	080081e3 	.word	0x080081e3
 8008100:	080082a7 	.word	0x080082a7
 8008104:	080082a7 	.word	0x080082a7
 8008108:	080082a7 	.word	0x080082a7
 800810c:	08008225 	.word	0x08008225
 8008110:	080082a7 	.word	0x080082a7
 8008114:	080082a7 	.word	0x080082a7
 8008118:	080082a7 	.word	0x080082a7
 800811c:	08008265 	.word	0x08008265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fa68 	bl	80085fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0208 	orr.w	r2, r2, #8
 800813a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0204 	bic.w	r2, r2, #4
 800814a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6999      	ldr	r1, [r3, #24]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	619a      	str	r2, [r3, #24]
      break;
 800815e:	e0a5      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68b9      	ldr	r1, [r7, #8]
 8008166:	4618      	mov	r0, r3
 8008168:	f000 faba 	bl	80086e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800817a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800818a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6999      	ldr	r1, [r3, #24]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	021a      	lsls	r2, r3, #8
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	619a      	str	r2, [r3, #24]
      break;
 80081a0:	e084      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fb11 	bl	80087d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69da      	ldr	r2, [r3, #28]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f042 0208 	orr.w	r2, r2, #8
 80081bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0204 	bic.w	r2, r2, #4
 80081cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69d9      	ldr	r1, [r3, #28]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	61da      	str	r2, [r3, #28]
      break;
 80081e0:	e064      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fb67 	bl	80088bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69da      	ldr	r2, [r3, #28]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800820c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69d9      	ldr	r1, [r3, #28]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	021a      	lsls	r2, r3, #8
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	61da      	str	r2, [r3, #28]
      break;
 8008222:	e043      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fb9e 	bl	800896c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0208 	orr.w	r2, r2, #8
 800823e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0204 	bic.w	r2, r2, #4
 800824e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008262:	e023      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68b9      	ldr	r1, [r7, #8]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fbd0 	bl	8008a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800827e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800828e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	021a      	lsls	r2, r3, #8
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80082a4:	e002      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
      break;
 80082aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop

080082c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_TIM_ConfigClockSource+0x1c>
 80082d8:	2302      	movs	r3, #2
 80082da:	e0b4      	b.n	8008446 <HAL_TIM_ConfigClockSource+0x186>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	4b56      	ldr	r3, [pc, #344]	@ (8008450 <HAL_TIM_ConfigClockSource+0x190>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008314:	d03e      	beq.n	8008394 <HAL_TIM_ConfigClockSource+0xd4>
 8008316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800831a:	f200 8087 	bhi.w	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008322:	f000 8086 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x172>
 8008326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800832a:	d87f      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800832c:	2b70      	cmp	r3, #112	@ 0x70
 800832e:	d01a      	beq.n	8008366 <HAL_TIM_ConfigClockSource+0xa6>
 8008330:	2b70      	cmp	r3, #112	@ 0x70
 8008332:	d87b      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 8008334:	2b60      	cmp	r3, #96	@ 0x60
 8008336:	d050      	beq.n	80083da <HAL_TIM_ConfigClockSource+0x11a>
 8008338:	2b60      	cmp	r3, #96	@ 0x60
 800833a:	d877      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800833c:	2b50      	cmp	r3, #80	@ 0x50
 800833e:	d03c      	beq.n	80083ba <HAL_TIM_ConfigClockSource+0xfa>
 8008340:	2b50      	cmp	r3, #80	@ 0x50
 8008342:	d873      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 8008344:	2b40      	cmp	r3, #64	@ 0x40
 8008346:	d058      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x13a>
 8008348:	2b40      	cmp	r3, #64	@ 0x40
 800834a:	d86f      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800834c:	2b30      	cmp	r3, #48	@ 0x30
 800834e:	d064      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x15a>
 8008350:	2b30      	cmp	r3, #48	@ 0x30
 8008352:	d86b      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 8008354:	2b20      	cmp	r3, #32
 8008356:	d060      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x15a>
 8008358:	2b20      	cmp	r3, #32
 800835a:	d867      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d05c      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x15a>
 8008360:	2b10      	cmp	r3, #16
 8008362:	d05a      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x15a>
 8008364:	e062      	b.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008376:	f000 fc19 	bl	8008bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	609a      	str	r2, [r3, #8]
      break;
 8008392:	e04f      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083a4:	f000 fc02 	bl	8008bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083b6:	609a      	str	r2, [r3, #8]
      break;
 80083b8:	e03c      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c6:	461a      	mov	r2, r3
 80083c8:	f000 fb76 	bl	8008ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2150      	movs	r1, #80	@ 0x50
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fbcf 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 80083d8:	e02c      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083e6:	461a      	mov	r2, r3
 80083e8:	f000 fb95 	bl	8008b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2160      	movs	r1, #96	@ 0x60
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fbbf 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 80083f8:	e01c      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008406:	461a      	mov	r2, r3
 8008408:	f000 fb56 	bl	8008ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2140      	movs	r1, #64	@ 0x40
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fbaf 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 8008418:	e00c      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f000 fba6 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 800842a:	e003      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	73fb      	strb	r3, [r7, #15]
      break;
 8008430:	e000      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	fffeff88 	.word	0xfffeff88

08008454 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a46      	ldr	r2, [pc, #280]	@ (80085d0 <TIM_Base_SetConfig+0x12c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d013      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c2:	d00f      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a43      	ldr	r2, [pc, #268]	@ (80085d4 <TIM_Base_SetConfig+0x130>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00b      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a42      	ldr	r2, [pc, #264]	@ (80085d8 <TIM_Base_SetConfig+0x134>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d007      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a41      	ldr	r2, [pc, #260]	@ (80085dc <TIM_Base_SetConfig+0x138>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d003      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a40      	ldr	r2, [pc, #256]	@ (80085e0 <TIM_Base_SetConfig+0x13c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d108      	bne.n	80084f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a35      	ldr	r2, [pc, #212]	@ (80085d0 <TIM_Base_SetConfig+0x12c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d02b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008504:	d027      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a32      	ldr	r2, [pc, #200]	@ (80085d4 <TIM_Base_SetConfig+0x130>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d023      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a31      	ldr	r2, [pc, #196]	@ (80085d8 <TIM_Base_SetConfig+0x134>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d01f      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a30      	ldr	r2, [pc, #192]	@ (80085dc <TIM_Base_SetConfig+0x138>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d01b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a2f      	ldr	r2, [pc, #188]	@ (80085e0 <TIM_Base_SetConfig+0x13c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d017      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a2e      	ldr	r2, [pc, #184]	@ (80085e4 <TIM_Base_SetConfig+0x140>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d013      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a2d      	ldr	r2, [pc, #180]	@ (80085e8 <TIM_Base_SetConfig+0x144>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00f      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a2c      	ldr	r2, [pc, #176]	@ (80085ec <TIM_Base_SetConfig+0x148>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a2b      	ldr	r2, [pc, #172]	@ (80085f0 <TIM_Base_SetConfig+0x14c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d007      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a2a      	ldr	r2, [pc, #168]	@ (80085f4 <TIM_Base_SetConfig+0x150>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a29      	ldr	r2, [pc, #164]	@ (80085f8 <TIM_Base_SetConfig+0x154>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d108      	bne.n	8008568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800855c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a10      	ldr	r2, [pc, #64]	@ (80085d0 <TIM_Base_SetConfig+0x12c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <TIM_Base_SetConfig+0xf8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a12      	ldr	r2, [pc, #72]	@ (80085e0 <TIM_Base_SetConfig+0x13c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d103      	bne.n	80085a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d105      	bne.n	80085c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f023 0201 	bic.w	r2, r3, #1
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	611a      	str	r2, [r3, #16]
  }
}
 80085c2:	bf00      	nop
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40000400 	.word	0x40000400
 80085d8:	40000800 	.word	0x40000800
 80085dc:	40000c00 	.word	0x40000c00
 80085e0:	40010400 	.word	0x40010400
 80085e4:	40014000 	.word	0x40014000
 80085e8:	40014400 	.word	0x40014400
 80085ec:	40014800 	.word	0x40014800
 80085f0:	40001800 	.word	0x40001800
 80085f4:	40001c00 	.word	0x40001c00
 80085f8:	40002000 	.word	0x40002000

080085fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	f023 0201 	bic.w	r2, r3, #1
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	4b2b      	ldr	r3, [pc, #172]	@ (80086d4 <TIM_OC1_SetConfig+0xd8>)
 8008628:	4013      	ands	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0303 	bic.w	r3, r3, #3
 8008632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f023 0302 	bic.w	r3, r3, #2
 8008644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a21      	ldr	r2, [pc, #132]	@ (80086d8 <TIM_OC1_SetConfig+0xdc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_OC1_SetConfig+0x64>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a20      	ldr	r2, [pc, #128]	@ (80086dc <TIM_OC1_SetConfig+0xe0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d10c      	bne.n	800867a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 0308 	bic.w	r3, r3, #8
 8008666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f023 0304 	bic.w	r3, r3, #4
 8008678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a16      	ldr	r2, [pc, #88]	@ (80086d8 <TIM_OC1_SetConfig+0xdc>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d003      	beq.n	800868a <TIM_OC1_SetConfig+0x8e>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a15      	ldr	r2, [pc, #84]	@ (80086dc <TIM_OC1_SetConfig+0xe0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d111      	bne.n	80086ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	621a      	str	r2, [r3, #32]
}
 80086c8:	bf00      	nop
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	fffeff8f 	.word	0xfffeff8f
 80086d8:	40010000 	.word	0x40010000
 80086dc:	40010400 	.word	0x40010400

080086e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	f023 0210 	bic.w	r2, r3, #16
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4b2e      	ldr	r3, [pc, #184]	@ (80087c4 <TIM_OC2_SetConfig+0xe4>)
 800870c:	4013      	ands	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0320 	bic.w	r3, r3, #32
 800872a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a23      	ldr	r2, [pc, #140]	@ (80087c8 <TIM_OC2_SetConfig+0xe8>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d003      	beq.n	8008748 <TIM_OC2_SetConfig+0x68>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a22      	ldr	r2, [pc, #136]	@ (80087cc <TIM_OC2_SetConfig+0xec>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d10d      	bne.n	8008764 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800874e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008762:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a18      	ldr	r2, [pc, #96]	@ (80087c8 <TIM_OC2_SetConfig+0xe8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_OC2_SetConfig+0x94>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <TIM_OC2_SetConfig+0xec>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d113      	bne.n	800879c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800877a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	feff8fff 	.word	0xfeff8fff
 80087c8:	40010000 	.word	0x40010000
 80087cc:	40010400 	.word	0x40010400

080087d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4b2d      	ldr	r3, [pc, #180]	@ (80088b0 <TIM_OC3_SetConfig+0xe0>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a22      	ldr	r2, [pc, #136]	@ (80088b4 <TIM_OC3_SetConfig+0xe4>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d003      	beq.n	8008836 <TIM_OC3_SetConfig+0x66>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a21      	ldr	r2, [pc, #132]	@ (80088b8 <TIM_OC3_SetConfig+0xe8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d10d      	bne.n	8008852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800883c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	021b      	lsls	r3, r3, #8
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a17      	ldr	r2, [pc, #92]	@ (80088b4 <TIM_OC3_SetConfig+0xe4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d003      	beq.n	8008862 <TIM_OC3_SetConfig+0x92>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a16      	ldr	r2, [pc, #88]	@ (80088b8 <TIM_OC3_SetConfig+0xe8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d113      	bne.n	800888a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	621a      	str	r2, [r3, #32]
}
 80088a4:	bf00      	nop
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	fffeff8f 	.word	0xfffeff8f
 80088b4:	40010000 	.word	0x40010000
 80088b8:	40010400 	.word	0x40010400

080088bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008960 <TIM_OC4_SetConfig+0xa4>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	021b      	lsls	r3, r3, #8
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	031b      	lsls	r3, r3, #12
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	4313      	orrs	r3, r2
 8008912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a13      	ldr	r2, [pc, #76]	@ (8008964 <TIM_OC4_SetConfig+0xa8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d003      	beq.n	8008924 <TIM_OC4_SetConfig+0x68>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a12      	ldr	r2, [pc, #72]	@ (8008968 <TIM_OC4_SetConfig+0xac>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d109      	bne.n	8008938 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800892a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	019b      	lsls	r3, r3, #6
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	621a      	str	r2, [r3, #32]
}
 8008952:	bf00      	nop
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	feff8fff 	.word	0xfeff8fff
 8008964:	40010000 	.word	0x40010000
 8008968:	40010400 	.word	0x40010400

0800896c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4b1b      	ldr	r3, [pc, #108]	@ (8008a04 <TIM_OC5_SetConfig+0x98>)
 8008998:	4013      	ands	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80089ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	041b      	lsls	r3, r3, #16
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a12      	ldr	r2, [pc, #72]	@ (8008a08 <TIM_OC5_SetConfig+0x9c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d003      	beq.n	80089ca <TIM_OC5_SetConfig+0x5e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a11      	ldr	r2, [pc, #68]	@ (8008a0c <TIM_OC5_SetConfig+0xa0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d109      	bne.n	80089de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	021b      	lsls	r3, r3, #8
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	fffeff8f 	.word	0xfffeff8f
 8008a08:	40010000 	.word	0x40010000
 8008a0c:	40010400 	.word	0x40010400

08008a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8008aac <TIM_OC6_SetConfig+0x9c>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	021b      	lsls	r3, r3, #8
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	051b      	lsls	r3, r3, #20
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a13      	ldr	r2, [pc, #76]	@ (8008ab0 <TIM_OC6_SetConfig+0xa0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_OC6_SetConfig+0x60>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a12      	ldr	r2, [pc, #72]	@ (8008ab4 <TIM_OC6_SetConfig+0xa4>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d109      	bne.n	8008a84 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	029b      	lsls	r3, r3, #10
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	621a      	str	r2, [r3, #32]
}
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	feff8fff 	.word	0xfeff8fff
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40010400 	.word	0x40010400

08008ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	f023 0201 	bic.w	r2, r3, #1
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f023 030a 	bic.w	r3, r3, #10
 8008af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	621a      	str	r2, [r3, #32]
}
 8008b0a:	bf00      	nop
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b087      	sub	sp, #28
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	f023 0210 	bic.w	r2, r3, #16
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	031b      	lsls	r3, r3, #12
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	621a      	str	r2, [r3, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f043 0307 	orr.w	r3, r3, #7
 8008b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	609a      	str	r2, [r3, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	021a      	lsls	r2, r3, #8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	609a      	str	r2, [r3, #8]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f003 031f 	and.w	r3, r3, #31
 8008bfe:	2201      	movs	r2, #1
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1a      	ldr	r2, [r3, #32]
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	401a      	ands	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f003 031f 	and.w	r3, r3, #31
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	431a      	orrs	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e06d      	b.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a30      	ldr	r2, [pc, #192]	@ (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d004      	beq.n	8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d108      	bne.n	8008c96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a20      	ldr	r2, [pc, #128]	@ (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d022      	beq.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc2:	d01d      	beq.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d018      	beq.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d013      	beq.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8008d48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00e      	beq.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a15      	ldr	r2, [pc, #84]	@ (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d009      	beq.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a16      	ldr	r2, [pc, #88]	@ (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d004      	beq.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a15      	ldr	r2, [pc, #84]	@ (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d10c      	bne.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	40010000 	.word	0x40010000
 8008d3c:	40010400 	.word	0x40010400
 8008d40:	40000400 	.word	0x40000400
 8008d44:	40000800 	.word	0x40000800
 8008d48:	40000c00 	.word	0x40000c00
 8008d4c:	40014000 	.word	0x40014000
 8008d50:	40001800 	.word	0x40001800

08008d54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e065      	b.n	8008e3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	041b      	lsls	r3, r3, #16
 8008de6:	4313      	orrs	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a16      	ldr	r2, [pc, #88]	@ (8008e48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d004      	beq.n	8008dfe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a14      	ldr	r2, [pc, #80]	@ (8008e4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d115      	bne.n	8008e2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	051b      	lsls	r3, r3, #20
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40010400 	.word	0x40010400

08008e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e040      	b.n	8008f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fa fa0e 	bl	80032d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2224      	movs	r2, #36	@ 0x24
 8008eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0201 	bic.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d002      	beq.n	8008ed8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fe56 	bl	8009b84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fbef 	bl	80096bc <UART_SetConfig>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d101      	bne.n	8008ee8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e01b      	b.n	8008f20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0201 	orr.w	r2, r2, #1
 8008f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fed5 	bl	8009cc8 <UART_CheckIdleState>
 8008f1e:	4603      	mov	r3, r0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08a      	sub	sp, #40	@ 0x28
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	4613      	mov	r3, r2
 8008f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f3c:	2b20      	cmp	r3, #32
 8008f3e:	d177      	bne.n	8009030 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <HAL_UART_Transmit+0x24>
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e070      	b.n	8009032 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2221      	movs	r2, #33	@ 0x21
 8008f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f5e:	f7fa fe43 	bl	8003be8 <HAL_GetTick>
 8008f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	88fa      	ldrh	r2, [r7, #6]
 8008f68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f7c:	d108      	bne.n	8008f90 <HAL_UART_Transmit+0x68>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	61bb      	str	r3, [r7, #24]
 8008f8e:	e003      	b.n	8008f98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f98:	e02f      	b.n	8008ffa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2180      	movs	r1, #128	@ 0x80
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fee6 	bl	8009d76 <UART_WaitOnFlagUntilTimeout>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e03b      	b.n	8009032 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10b      	bne.n	8008fd8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	e007      	b.n	8008fe8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	781a      	ldrb	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1c9      	bne.n	8008f9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2200      	movs	r2, #0
 800900e:	2140      	movs	r1, #64	@ 0x40
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 feb0 	bl	8009d76 <UART_WaitOnFlagUntilTimeout>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d004      	beq.n	8009026 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2220      	movs	r2, #32
 8009020:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e005      	b.n	8009032 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2220      	movs	r2, #32
 800902a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	e000      	b.n	8009032 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009030:	2302      	movs	r3, #2
  }
}
 8009032:	4618      	mov	r0, r3
 8009034:	3720      	adds	r7, #32
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b08a      	sub	sp, #40	@ 0x28
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	4613      	mov	r3, r2
 8009046:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800904e:	2b20      	cmp	r3, #32
 8009050:	d132      	bne.n	80090b8 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_UART_Receive_DMA+0x24>
 8009058:	88fb      	ldrh	r3, [r7, #6]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e02b      	b.n	80090ba <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d018      	beq.n	80090a8 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	e853 3f00 	ldrex	r3, [r3]
 8009082:	613b      	str	r3, [r7, #16]
   return(result);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800908a:	627b      	str	r3, [r7, #36]	@ 0x24
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	623b      	str	r3, [r7, #32]
 8009096:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009098:	69f9      	ldr	r1, [r7, #28]
 800909a:	6a3a      	ldr	r2, [r7, #32]
 800909c:	e841 2300 	strex	r3, r2, [r1]
 80090a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1e6      	bne.n	8009076 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80090a8:	88fb      	ldrh	r3, [r7, #6]
 80090aa:	461a      	mov	r2, r3
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fece 	bl	8009e50 <UART_Start_Receive_DMA>
 80090b4:	4603      	mov	r3, r0
 80090b6:	e000      	b.n	80090ba <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80090b8:	2302      	movs	r3, #2
  }
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3728      	adds	r7, #40	@ 0x28
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b0ba      	sub	sp, #232	@ 0xe8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80090ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80090f2:	4013      	ands	r3, r2
 80090f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80090f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d115      	bne.n	800912c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00f      	beq.n	800912c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800910c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009110:	f003 0320 	and.w	r3, r3, #32
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 8297 	beq.w	8009650 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	4798      	blx	r3
      }
      return;
 800912a:	e291      	b.n	8009650 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800912c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 8117 	beq.w	8009364 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009146:	4b85      	ldr	r3, [pc, #532]	@ (800935c <HAL_UART_IRQHandler+0x298>)
 8009148:	4013      	ands	r3, r2
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 810a 	beq.w	8009364 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d011      	beq.n	8009180 <HAL_UART_IRQHandler+0xbc>
 800915c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00b      	beq.n	8009180 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2201      	movs	r2, #1
 800916e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009176:	f043 0201 	orr.w	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009184:	f003 0302 	and.w	r3, r3, #2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d011      	beq.n	80091b0 <HAL_UART_IRQHandler+0xec>
 800918c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2202      	movs	r2, #2
 800919e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091a6:	f043 0204 	orr.w	r2, r3, #4
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d011      	beq.n	80091e0 <HAL_UART_IRQHandler+0x11c>
 80091bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00b      	beq.n	80091e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2204      	movs	r2, #4
 80091ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091d6:	f043 0202 	orr.w	r2, r3, #2
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e4:	f003 0308 	and.w	r3, r3, #8
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d017      	beq.n	800921c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80091ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f0:	f003 0320 	and.w	r3, r3, #32
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d105      	bne.n	8009204 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80091f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2208      	movs	r2, #8
 800920a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009212:	f043 0208 	orr.w	r2, r3, #8
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800921c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009224:	2b00      	cmp	r3, #0
 8009226:	d012      	beq.n	800924e <HAL_UART_IRQHandler+0x18a>
 8009228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800922c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00c      	beq.n	800924e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800923c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009244:	f043 0220 	orr.w	r2, r3, #32
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 81fd 	beq.w	8009654 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00d      	beq.n	8009282 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	d007      	beq.n	8009282 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009296:	2b40      	cmp	r3, #64	@ 0x40
 8009298:	d005      	beq.n	80092a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800929a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800929e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d04f      	beq.n	8009346 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fe98 	bl	8009fdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b6:	2b40      	cmp	r3, #64	@ 0x40
 80092b8:	d141      	bne.n	800933e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3308      	adds	r3, #8
 80092c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3308      	adds	r3, #8
 80092e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80092ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80092f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80092fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1d9      	bne.n	80092ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800930a:	2b00      	cmp	r3, #0
 800930c:	d013      	beq.n	8009336 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009312:	4a13      	ldr	r2, [pc, #76]	@ (8009360 <HAL_UART_IRQHandler+0x29c>)
 8009314:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800931a:	4618      	mov	r0, r3
 800931c:	f7fa ff24 	bl	8004168 <HAL_DMA_Abort_IT>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d017      	beq.n	8009356 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800932a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009334:	e00f      	b.n	8009356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f9aa 	bl	8009690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933c:	e00b      	b.n	8009356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f9a6 	bl	8009690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009344:	e007      	b.n	8009356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f9a2 	bl	8009690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009354:	e17e      	b.n	8009654 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009356:	bf00      	nop
    return;
 8009358:	e17c      	b.n	8009654 <HAL_UART_IRQHandler+0x590>
 800935a:	bf00      	nop
 800935c:	04000120 	.word	0x04000120
 8009360:	0800a289 	.word	0x0800a289

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009368:	2b01      	cmp	r3, #1
 800936a:	f040 814c 	bne.w	8009606 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800936e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009372:	f003 0310 	and.w	r3, r3, #16
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 8145 	beq.w	8009606 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800937c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009380:	f003 0310 	and.w	r3, r3, #16
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 813e 	beq.w	8009606 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2210      	movs	r2, #16
 8009390:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939c:	2b40      	cmp	r3, #64	@ 0x40
 800939e:	f040 80b6 	bne.w	800950e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8150 	beq.w	8009658 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80093be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093c2:	429a      	cmp	r2, r3
 80093c4:	f080 8148 	bcs.w	8009658 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093dc:	f000 8086 	beq.w	80094ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80093f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800940a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800940e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1da      	bne.n	80093e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3308      	adds	r3, #8
 8009430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800943a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800943c:	f023 0301 	bic.w	r3, r3, #1
 8009440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3308      	adds	r3, #8
 800944a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800944e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e1      	bne.n	800942a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800947c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800948a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800948c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e3      	bne.n	8009466 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094bc:	f023 0310 	bic.w	r3, r3, #16
 80094c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e4      	bne.n	80094ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fa fdce 	bl	8004088 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80094fe:	b29b      	uxth	r3, r3
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	b29b      	uxth	r3, r3
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f8cc 	bl	80096a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800950c:	e0a4      	b.n	8009658 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800951a:	b29b      	uxth	r3, r3
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009528:	b29b      	uxth	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 8096 	beq.w	800965c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8091 	beq.w	800965c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800954e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800955c:	647b      	str	r3, [r7, #68]	@ 0x44
 800955e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800956a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e4      	bne.n	800953a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3308      	adds	r3, #8
 8009576:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	623b      	str	r3, [r7, #32]
   return(result);
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3308      	adds	r3, #8
 8009590:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009594:	633a      	str	r2, [r7, #48]	@ 0x30
 8009596:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800959a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e3      	bne.n	8009570 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f023 0310 	bic.w	r3, r3, #16
 80095d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	461a      	mov	r2, r3
 80095da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	69b9      	ldr	r1, [r7, #24]
 80095e4:	69fa      	ldr	r2, [r7, #28]
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	617b      	str	r3, [r7, #20]
   return(result);
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e4      	bne.n	80095bc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f850 	bl	80096a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009604:	e02a      	b.n	800965c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00e      	beq.n	8009630 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800961a:	2b00      	cmp	r3, #0
 800961c:	d008      	beq.n	8009630 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01c      	beq.n	8009660 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	4798      	blx	r3
    }
    return;
 800962e:	e017      	b.n	8009660 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009638:	2b00      	cmp	r3, #0
 800963a:	d012      	beq.n	8009662 <HAL_UART_IRQHandler+0x59e>
 800963c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00c      	beq.n	8009662 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fe33 	bl	800a2b4 <UART_EndTransmit_IT>
    return;
 800964e:	e008      	b.n	8009662 <HAL_UART_IRQHandler+0x59e>
      return;
 8009650:	bf00      	nop
 8009652:	e006      	b.n	8009662 <HAL_UART_IRQHandler+0x59e>
    return;
 8009654:	bf00      	nop
 8009656:	e004      	b.n	8009662 <HAL_UART_IRQHandler+0x59e>
      return;
 8009658:	bf00      	nop
 800965a:	e002      	b.n	8009662 <HAL_UART_IRQHandler+0x59e>
      return;
 800965c:	bf00      	nop
 800965e:	e000      	b.n	8009662 <HAL_UART_IRQHandler+0x59e>
    return;
 8009660:	bf00      	nop
  }

}
 8009662:	37e8      	adds	r7, #232	@ 0xe8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	689a      	ldr	r2, [r3, #8]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	431a      	orrs	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	4313      	orrs	r3, r2
 80096de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	4ba6      	ldr	r3, [pc, #664]	@ (8009980 <UART_SetConfig+0x2c4>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6812      	ldr	r2, [r2, #0]
 80096ee:	6979      	ldr	r1, [r7, #20]
 80096f0:	430b      	orrs	r3, r1
 80096f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	430a      	orrs	r2, r1
 800972c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a94      	ldr	r2, [pc, #592]	@ (8009984 <UART_SetConfig+0x2c8>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d120      	bne.n	800977a <UART_SetConfig+0xbe>
 8009738:	4b93      	ldr	r3, [pc, #588]	@ (8009988 <UART_SetConfig+0x2cc>)
 800973a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800973e:	f003 0303 	and.w	r3, r3, #3
 8009742:	2b03      	cmp	r3, #3
 8009744:	d816      	bhi.n	8009774 <UART_SetConfig+0xb8>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <UART_SetConfig+0x90>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	0800975d 	.word	0x0800975d
 8009750:	08009769 	.word	0x08009769
 8009754:	08009763 	.word	0x08009763
 8009758:	0800976f 	.word	0x0800976f
 800975c:	2301      	movs	r3, #1
 800975e:	77fb      	strb	r3, [r7, #31]
 8009760:	e150      	b.n	8009a04 <UART_SetConfig+0x348>
 8009762:	2302      	movs	r3, #2
 8009764:	77fb      	strb	r3, [r7, #31]
 8009766:	e14d      	b.n	8009a04 <UART_SetConfig+0x348>
 8009768:	2304      	movs	r3, #4
 800976a:	77fb      	strb	r3, [r7, #31]
 800976c:	e14a      	b.n	8009a04 <UART_SetConfig+0x348>
 800976e:	2308      	movs	r3, #8
 8009770:	77fb      	strb	r3, [r7, #31]
 8009772:	e147      	b.n	8009a04 <UART_SetConfig+0x348>
 8009774:	2310      	movs	r3, #16
 8009776:	77fb      	strb	r3, [r7, #31]
 8009778:	e144      	b.n	8009a04 <UART_SetConfig+0x348>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a83      	ldr	r2, [pc, #524]	@ (800998c <UART_SetConfig+0x2d0>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d132      	bne.n	80097ea <UART_SetConfig+0x12e>
 8009784:	4b80      	ldr	r3, [pc, #512]	@ (8009988 <UART_SetConfig+0x2cc>)
 8009786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800978a:	f003 030c 	and.w	r3, r3, #12
 800978e:	2b0c      	cmp	r3, #12
 8009790:	d828      	bhi.n	80097e4 <UART_SetConfig+0x128>
 8009792:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <UART_SetConfig+0xdc>)
 8009794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009798:	080097cd 	.word	0x080097cd
 800979c:	080097e5 	.word	0x080097e5
 80097a0:	080097e5 	.word	0x080097e5
 80097a4:	080097e5 	.word	0x080097e5
 80097a8:	080097d9 	.word	0x080097d9
 80097ac:	080097e5 	.word	0x080097e5
 80097b0:	080097e5 	.word	0x080097e5
 80097b4:	080097e5 	.word	0x080097e5
 80097b8:	080097d3 	.word	0x080097d3
 80097bc:	080097e5 	.word	0x080097e5
 80097c0:	080097e5 	.word	0x080097e5
 80097c4:	080097e5 	.word	0x080097e5
 80097c8:	080097df 	.word	0x080097df
 80097cc:	2300      	movs	r3, #0
 80097ce:	77fb      	strb	r3, [r7, #31]
 80097d0:	e118      	b.n	8009a04 <UART_SetConfig+0x348>
 80097d2:	2302      	movs	r3, #2
 80097d4:	77fb      	strb	r3, [r7, #31]
 80097d6:	e115      	b.n	8009a04 <UART_SetConfig+0x348>
 80097d8:	2304      	movs	r3, #4
 80097da:	77fb      	strb	r3, [r7, #31]
 80097dc:	e112      	b.n	8009a04 <UART_SetConfig+0x348>
 80097de:	2308      	movs	r3, #8
 80097e0:	77fb      	strb	r3, [r7, #31]
 80097e2:	e10f      	b.n	8009a04 <UART_SetConfig+0x348>
 80097e4:	2310      	movs	r3, #16
 80097e6:	77fb      	strb	r3, [r7, #31]
 80097e8:	e10c      	b.n	8009a04 <UART_SetConfig+0x348>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a68      	ldr	r2, [pc, #416]	@ (8009990 <UART_SetConfig+0x2d4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d120      	bne.n	8009836 <UART_SetConfig+0x17a>
 80097f4:	4b64      	ldr	r3, [pc, #400]	@ (8009988 <UART_SetConfig+0x2cc>)
 80097f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80097fe:	2b30      	cmp	r3, #48	@ 0x30
 8009800:	d013      	beq.n	800982a <UART_SetConfig+0x16e>
 8009802:	2b30      	cmp	r3, #48	@ 0x30
 8009804:	d814      	bhi.n	8009830 <UART_SetConfig+0x174>
 8009806:	2b20      	cmp	r3, #32
 8009808:	d009      	beq.n	800981e <UART_SetConfig+0x162>
 800980a:	2b20      	cmp	r3, #32
 800980c:	d810      	bhi.n	8009830 <UART_SetConfig+0x174>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <UART_SetConfig+0x15c>
 8009812:	2b10      	cmp	r3, #16
 8009814:	d006      	beq.n	8009824 <UART_SetConfig+0x168>
 8009816:	e00b      	b.n	8009830 <UART_SetConfig+0x174>
 8009818:	2300      	movs	r3, #0
 800981a:	77fb      	strb	r3, [r7, #31]
 800981c:	e0f2      	b.n	8009a04 <UART_SetConfig+0x348>
 800981e:	2302      	movs	r3, #2
 8009820:	77fb      	strb	r3, [r7, #31]
 8009822:	e0ef      	b.n	8009a04 <UART_SetConfig+0x348>
 8009824:	2304      	movs	r3, #4
 8009826:	77fb      	strb	r3, [r7, #31]
 8009828:	e0ec      	b.n	8009a04 <UART_SetConfig+0x348>
 800982a:	2308      	movs	r3, #8
 800982c:	77fb      	strb	r3, [r7, #31]
 800982e:	e0e9      	b.n	8009a04 <UART_SetConfig+0x348>
 8009830:	2310      	movs	r3, #16
 8009832:	77fb      	strb	r3, [r7, #31]
 8009834:	e0e6      	b.n	8009a04 <UART_SetConfig+0x348>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a56      	ldr	r2, [pc, #344]	@ (8009994 <UART_SetConfig+0x2d8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d120      	bne.n	8009882 <UART_SetConfig+0x1c6>
 8009840:	4b51      	ldr	r3, [pc, #324]	@ (8009988 <UART_SetConfig+0x2cc>)
 8009842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009846:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800984a:	2bc0      	cmp	r3, #192	@ 0xc0
 800984c:	d013      	beq.n	8009876 <UART_SetConfig+0x1ba>
 800984e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009850:	d814      	bhi.n	800987c <UART_SetConfig+0x1c0>
 8009852:	2b80      	cmp	r3, #128	@ 0x80
 8009854:	d009      	beq.n	800986a <UART_SetConfig+0x1ae>
 8009856:	2b80      	cmp	r3, #128	@ 0x80
 8009858:	d810      	bhi.n	800987c <UART_SetConfig+0x1c0>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <UART_SetConfig+0x1a8>
 800985e:	2b40      	cmp	r3, #64	@ 0x40
 8009860:	d006      	beq.n	8009870 <UART_SetConfig+0x1b4>
 8009862:	e00b      	b.n	800987c <UART_SetConfig+0x1c0>
 8009864:	2300      	movs	r3, #0
 8009866:	77fb      	strb	r3, [r7, #31]
 8009868:	e0cc      	b.n	8009a04 <UART_SetConfig+0x348>
 800986a:	2302      	movs	r3, #2
 800986c:	77fb      	strb	r3, [r7, #31]
 800986e:	e0c9      	b.n	8009a04 <UART_SetConfig+0x348>
 8009870:	2304      	movs	r3, #4
 8009872:	77fb      	strb	r3, [r7, #31]
 8009874:	e0c6      	b.n	8009a04 <UART_SetConfig+0x348>
 8009876:	2308      	movs	r3, #8
 8009878:	77fb      	strb	r3, [r7, #31]
 800987a:	e0c3      	b.n	8009a04 <UART_SetConfig+0x348>
 800987c:	2310      	movs	r3, #16
 800987e:	77fb      	strb	r3, [r7, #31]
 8009880:	e0c0      	b.n	8009a04 <UART_SetConfig+0x348>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a44      	ldr	r2, [pc, #272]	@ (8009998 <UART_SetConfig+0x2dc>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d125      	bne.n	80098d8 <UART_SetConfig+0x21c>
 800988c:	4b3e      	ldr	r3, [pc, #248]	@ (8009988 <UART_SetConfig+0x2cc>)
 800988e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800989a:	d017      	beq.n	80098cc <UART_SetConfig+0x210>
 800989c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098a0:	d817      	bhi.n	80098d2 <UART_SetConfig+0x216>
 80098a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a6:	d00b      	beq.n	80098c0 <UART_SetConfig+0x204>
 80098a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ac:	d811      	bhi.n	80098d2 <UART_SetConfig+0x216>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <UART_SetConfig+0x1fe>
 80098b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b6:	d006      	beq.n	80098c6 <UART_SetConfig+0x20a>
 80098b8:	e00b      	b.n	80098d2 <UART_SetConfig+0x216>
 80098ba:	2300      	movs	r3, #0
 80098bc:	77fb      	strb	r3, [r7, #31]
 80098be:	e0a1      	b.n	8009a04 <UART_SetConfig+0x348>
 80098c0:	2302      	movs	r3, #2
 80098c2:	77fb      	strb	r3, [r7, #31]
 80098c4:	e09e      	b.n	8009a04 <UART_SetConfig+0x348>
 80098c6:	2304      	movs	r3, #4
 80098c8:	77fb      	strb	r3, [r7, #31]
 80098ca:	e09b      	b.n	8009a04 <UART_SetConfig+0x348>
 80098cc:	2308      	movs	r3, #8
 80098ce:	77fb      	strb	r3, [r7, #31]
 80098d0:	e098      	b.n	8009a04 <UART_SetConfig+0x348>
 80098d2:	2310      	movs	r3, #16
 80098d4:	77fb      	strb	r3, [r7, #31]
 80098d6:	e095      	b.n	8009a04 <UART_SetConfig+0x348>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a2f      	ldr	r2, [pc, #188]	@ (800999c <UART_SetConfig+0x2e0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d125      	bne.n	800992e <UART_SetConfig+0x272>
 80098e2:	4b29      	ldr	r3, [pc, #164]	@ (8009988 <UART_SetConfig+0x2cc>)
 80098e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098f0:	d017      	beq.n	8009922 <UART_SetConfig+0x266>
 80098f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098f6:	d817      	bhi.n	8009928 <UART_SetConfig+0x26c>
 80098f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098fc:	d00b      	beq.n	8009916 <UART_SetConfig+0x25a>
 80098fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009902:	d811      	bhi.n	8009928 <UART_SetConfig+0x26c>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <UART_SetConfig+0x254>
 8009908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800990c:	d006      	beq.n	800991c <UART_SetConfig+0x260>
 800990e:	e00b      	b.n	8009928 <UART_SetConfig+0x26c>
 8009910:	2301      	movs	r3, #1
 8009912:	77fb      	strb	r3, [r7, #31]
 8009914:	e076      	b.n	8009a04 <UART_SetConfig+0x348>
 8009916:	2302      	movs	r3, #2
 8009918:	77fb      	strb	r3, [r7, #31]
 800991a:	e073      	b.n	8009a04 <UART_SetConfig+0x348>
 800991c:	2304      	movs	r3, #4
 800991e:	77fb      	strb	r3, [r7, #31]
 8009920:	e070      	b.n	8009a04 <UART_SetConfig+0x348>
 8009922:	2308      	movs	r3, #8
 8009924:	77fb      	strb	r3, [r7, #31]
 8009926:	e06d      	b.n	8009a04 <UART_SetConfig+0x348>
 8009928:	2310      	movs	r3, #16
 800992a:	77fb      	strb	r3, [r7, #31]
 800992c:	e06a      	b.n	8009a04 <UART_SetConfig+0x348>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a1b      	ldr	r2, [pc, #108]	@ (80099a0 <UART_SetConfig+0x2e4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d138      	bne.n	80099aa <UART_SetConfig+0x2ee>
 8009938:	4b13      	ldr	r3, [pc, #76]	@ (8009988 <UART_SetConfig+0x2cc>)
 800993a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800993e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009942:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009946:	d017      	beq.n	8009978 <UART_SetConfig+0x2bc>
 8009948:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800994c:	d82a      	bhi.n	80099a4 <UART_SetConfig+0x2e8>
 800994e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009952:	d00b      	beq.n	800996c <UART_SetConfig+0x2b0>
 8009954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009958:	d824      	bhi.n	80099a4 <UART_SetConfig+0x2e8>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <UART_SetConfig+0x2aa>
 800995e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009962:	d006      	beq.n	8009972 <UART_SetConfig+0x2b6>
 8009964:	e01e      	b.n	80099a4 <UART_SetConfig+0x2e8>
 8009966:	2300      	movs	r3, #0
 8009968:	77fb      	strb	r3, [r7, #31]
 800996a:	e04b      	b.n	8009a04 <UART_SetConfig+0x348>
 800996c:	2302      	movs	r3, #2
 800996e:	77fb      	strb	r3, [r7, #31]
 8009970:	e048      	b.n	8009a04 <UART_SetConfig+0x348>
 8009972:	2304      	movs	r3, #4
 8009974:	77fb      	strb	r3, [r7, #31]
 8009976:	e045      	b.n	8009a04 <UART_SetConfig+0x348>
 8009978:	2308      	movs	r3, #8
 800997a:	77fb      	strb	r3, [r7, #31]
 800997c:	e042      	b.n	8009a04 <UART_SetConfig+0x348>
 800997e:	bf00      	nop
 8009980:	efff69f3 	.word	0xefff69f3
 8009984:	40011000 	.word	0x40011000
 8009988:	40023800 	.word	0x40023800
 800998c:	40004400 	.word	0x40004400
 8009990:	40004800 	.word	0x40004800
 8009994:	40004c00 	.word	0x40004c00
 8009998:	40005000 	.word	0x40005000
 800999c:	40011400 	.word	0x40011400
 80099a0:	40007800 	.word	0x40007800
 80099a4:	2310      	movs	r3, #16
 80099a6:	77fb      	strb	r3, [r7, #31]
 80099a8:	e02c      	b.n	8009a04 <UART_SetConfig+0x348>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a72      	ldr	r2, [pc, #456]	@ (8009b78 <UART_SetConfig+0x4bc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d125      	bne.n	8009a00 <UART_SetConfig+0x344>
 80099b4:	4b71      	ldr	r3, [pc, #452]	@ (8009b7c <UART_SetConfig+0x4c0>)
 80099b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80099be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80099c2:	d017      	beq.n	80099f4 <UART_SetConfig+0x338>
 80099c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80099c8:	d817      	bhi.n	80099fa <UART_SetConfig+0x33e>
 80099ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099ce:	d00b      	beq.n	80099e8 <UART_SetConfig+0x32c>
 80099d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d4:	d811      	bhi.n	80099fa <UART_SetConfig+0x33e>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <UART_SetConfig+0x326>
 80099da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099de:	d006      	beq.n	80099ee <UART_SetConfig+0x332>
 80099e0:	e00b      	b.n	80099fa <UART_SetConfig+0x33e>
 80099e2:	2300      	movs	r3, #0
 80099e4:	77fb      	strb	r3, [r7, #31]
 80099e6:	e00d      	b.n	8009a04 <UART_SetConfig+0x348>
 80099e8:	2302      	movs	r3, #2
 80099ea:	77fb      	strb	r3, [r7, #31]
 80099ec:	e00a      	b.n	8009a04 <UART_SetConfig+0x348>
 80099ee:	2304      	movs	r3, #4
 80099f0:	77fb      	strb	r3, [r7, #31]
 80099f2:	e007      	b.n	8009a04 <UART_SetConfig+0x348>
 80099f4:	2308      	movs	r3, #8
 80099f6:	77fb      	strb	r3, [r7, #31]
 80099f8:	e004      	b.n	8009a04 <UART_SetConfig+0x348>
 80099fa:	2310      	movs	r3, #16
 80099fc:	77fb      	strb	r3, [r7, #31]
 80099fe:	e001      	b.n	8009a04 <UART_SetConfig+0x348>
 8009a00:	2310      	movs	r3, #16
 8009a02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a0c:	d15b      	bne.n	8009ac6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009a0e:	7ffb      	ldrb	r3, [r7, #31]
 8009a10:	2b08      	cmp	r3, #8
 8009a12:	d828      	bhi.n	8009a66 <UART_SetConfig+0x3aa>
 8009a14:	a201      	add	r2, pc, #4	@ (adr r2, 8009a1c <UART_SetConfig+0x360>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009a41 	.word	0x08009a41
 8009a20:	08009a49 	.word	0x08009a49
 8009a24:	08009a51 	.word	0x08009a51
 8009a28:	08009a67 	.word	0x08009a67
 8009a2c:	08009a57 	.word	0x08009a57
 8009a30:	08009a67 	.word	0x08009a67
 8009a34:	08009a67 	.word	0x08009a67
 8009a38:	08009a67 	.word	0x08009a67
 8009a3c:	08009a5f 	.word	0x08009a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a40:	f7fc fab6 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8009a44:	61b8      	str	r0, [r7, #24]
        break;
 8009a46:	e013      	b.n	8009a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a48:	f7fc fac6 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 8009a4c:	61b8      	str	r0, [r7, #24]
        break;
 8009a4e:	e00f      	b.n	8009a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a50:	4b4b      	ldr	r3, [pc, #300]	@ (8009b80 <UART_SetConfig+0x4c4>)
 8009a52:	61bb      	str	r3, [r7, #24]
        break;
 8009a54:	e00c      	b.n	8009a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a56:	f7fc f999 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8009a5a:	61b8      	str	r0, [r7, #24]
        break;
 8009a5c:	e008      	b.n	8009a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a62:	61bb      	str	r3, [r7, #24]
        break;
 8009a64:	e004      	b.n	8009a70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8009a6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d074      	beq.n	8009b60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	005a      	lsls	r2, r3, #1
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	085b      	lsrs	r3, r3, #1
 8009a80:	441a      	add	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2b0f      	cmp	r3, #15
 8009a90:	d916      	bls.n	8009ac0 <UART_SetConfig+0x404>
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a98:	d212      	bcs.n	8009ac0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	f023 030f 	bic.w	r3, r3, #15
 8009aa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	085b      	lsrs	r3, r3, #1
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	89fb      	ldrh	r3, [r7, #14]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	89fa      	ldrh	r2, [r7, #14]
 8009abc:	60da      	str	r2, [r3, #12]
 8009abe:	e04f      	b.n	8009b60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	77bb      	strb	r3, [r7, #30]
 8009ac4:	e04c      	b.n	8009b60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ac6:	7ffb      	ldrb	r3, [r7, #31]
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d828      	bhi.n	8009b1e <UART_SetConfig+0x462>
 8009acc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <UART_SetConfig+0x418>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009b01 	.word	0x08009b01
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	08009b1f 	.word	0x08009b1f
 8009ae4:	08009b0f 	.word	0x08009b0f
 8009ae8:	08009b1f 	.word	0x08009b1f
 8009aec:	08009b1f 	.word	0x08009b1f
 8009af0:	08009b1f 	.word	0x08009b1f
 8009af4:	08009b17 	.word	0x08009b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009af8:	f7fc fa5a 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8009afc:	61b8      	str	r0, [r7, #24]
        break;
 8009afe:	e013      	b.n	8009b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b00:	f7fc fa6a 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 8009b04:	61b8      	str	r0, [r7, #24]
        break;
 8009b06:	e00f      	b.n	8009b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b08:	4b1d      	ldr	r3, [pc, #116]	@ (8009b80 <UART_SetConfig+0x4c4>)
 8009b0a:	61bb      	str	r3, [r7, #24]
        break;
 8009b0c:	e00c      	b.n	8009b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0e:	f7fc f93d 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8009b12:	61b8      	str	r0, [r7, #24]
        break;
 8009b14:	e008      	b.n	8009b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b1a:	61bb      	str	r3, [r7, #24]
        break;
 8009b1c:	e004      	b.n	8009b28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	77bb      	strb	r3, [r7, #30]
        break;
 8009b26:	bf00      	nop
    }

    if (pclk != 0U)
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d018      	beq.n	8009b60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	085a      	lsrs	r2, r3, #1
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	441a      	add	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b0f      	cmp	r3, #15
 8009b46:	d909      	bls.n	8009b5c <UART_SetConfig+0x4a0>
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b4e:	d205      	bcs.n	8009b5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	60da      	str	r2, [r3, #12]
 8009b5a:	e001      	b.n	8009b60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009b6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3720      	adds	r7, #32
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40007c00 	.word	0x40007c00
 8009b7c:	40023800 	.word	0x40023800
 8009b80:	00f42400 	.word	0x00f42400

08009b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b90:	f003 0308 	and.w	r3, r3, #8
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00a      	beq.n	8009bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00a      	beq.n	8009bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00a      	beq.n	8009c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	430a      	orrs	r2, r1
 8009c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c18:	f003 0310 	and.w	r3, r3, #16
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00a      	beq.n	8009c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d01a      	beq.n	8009c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c82:	d10a      	bne.n	8009c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00a      	beq.n	8009cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	605a      	str	r2, [r3, #4]
  }
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08c      	sub	sp, #48	@ 0x30
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cd8:	f7f9 ff86 	bl	8003be8 <HAL_GetTick>
 8009cdc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d12e      	bne.n	8009d4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f83b 	bl	8009d76 <UART_WaitOnFlagUntilTimeout>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d021      	beq.n	8009d4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	e853 3f00 	ldrex	r3, [r3]
 8009d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d1a:	623b      	str	r3, [r7, #32]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	461a      	mov	r2, r3
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	61fb      	str	r3, [r7, #28]
 8009d26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d28:	69b9      	ldr	r1, [r7, #24]
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	e841 2300 	strex	r3, r2, [r1]
 8009d30:	617b      	str	r3, [r7, #20]
   return(result);
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e6      	bne.n	8009d06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e011      	b.n	8009d6e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3728      	adds	r7, #40	@ 0x28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	603b      	str	r3, [r7, #0]
 8009d82:	4613      	mov	r3, r2
 8009d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d86:	e04f      	b.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8e:	d04b      	beq.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d90:	f7f9 ff2a 	bl	8003be8 <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d302      	bcc.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e04e      	b.n	8009e48 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d037      	beq.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b80      	cmp	r3, #128	@ 0x80
 8009dbc:	d034      	beq.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b40      	cmp	r3, #64	@ 0x40
 8009dc2:	d031      	beq.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b08      	cmp	r3, #8
 8009dd0:	d110      	bne.n	8009df4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2208      	movs	r2, #8
 8009dd8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 f8fe 	bl	8009fdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2208      	movs	r2, #8
 8009de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e029      	b.n	8009e48 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e02:	d111      	bne.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f000 f8e4 	bl	8009fdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e00f      	b.n	8009e48 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69da      	ldr	r2, [r3, #28]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	4013      	ands	r3, r2
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	bf0c      	ite	eq
 8009e38:	2301      	moveq	r3, #1
 8009e3a:	2300      	movne	r3, #0
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d0a0      	beq.n	8009d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b096      	sub	sp, #88	@ 0x58
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	88fa      	ldrh	r2, [r7, #6]
 8009e68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2222      	movs	r2, #34	@ 0x22
 8009e78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d028      	beq.n	8009ed6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e88:	4a3e      	ldr	r2, [pc, #248]	@ (8009f84 <UART_Start_Receive_DMA+0x134>)
 8009e8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e90:	4a3d      	ldr	r2, [pc, #244]	@ (8009f88 <UART_Start_Receive_DMA+0x138>)
 8009e92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e98:	4a3c      	ldr	r2, [pc, #240]	@ (8009f8c <UART_Start_Receive_DMA+0x13c>)
 8009e9a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3324      	adds	r3, #36	@ 0x24
 8009eae:	4619      	mov	r1, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	f7fa f886 	bl	8003fc8 <HAL_DMA_Start_IT>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2210      	movs	r2, #16
 8009ec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e051      	b.n	8009f7a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d018      	beq.n	8009f10 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009efc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009efe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e6      	bne.n	8009ede <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3308      	adds	r3, #8
 8009f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f30:	637a      	str	r2, [r7, #52]	@ 0x34
 8009f32:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e5      	bne.n	8009f10 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3308      	adds	r3, #8
 8009f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	e853 3f00 	ldrex	r3, [r3]
 8009f52:	613b      	str	r3, [r7, #16]
   return(result);
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3308      	adds	r3, #8
 8009f62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f64:	623a      	str	r2, [r7, #32]
 8009f66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f68:	69f9      	ldr	r1, [r7, #28]
 8009f6a:	6a3a      	ldr	r2, [r7, #32]
 8009f6c:	e841 2300 	strex	r3, r2, [r1]
 8009f70:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1e5      	bne.n	8009f44 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3758      	adds	r7, #88	@ 0x58
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	0800a0a5 	.word	0x0800a0a5
 8009f88:	0800a1cd 	.word	0x0800a1cd
 8009f8c:	0800a20b 	.word	0x0800a20b

08009f90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b089      	sub	sp, #36	@ 0x24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009fac:	61fb      	str	r3, [r7, #28]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	6979      	ldr	r1, [r7, #20]
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e6      	bne.n	8009f98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009fd0:	bf00      	nop
 8009fd2:	3724      	adds	r7, #36	@ 0x24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b095      	sub	sp, #84	@ 0x54
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a002:	643b      	str	r3, [r7, #64]	@ 0x40
 800a004:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a008:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e6      	bne.n	8009fe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6a3b      	ldr	r3, [r7, #32]
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	61fb      	str	r3, [r7, #28]
   return(result);
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a038:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a03c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e5      	bne.n	800a016 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d118      	bne.n	800a084 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f023 0310 	bic.w	r3, r3, #16
 800a066:	647b      	str	r3, [r7, #68]	@ 0x44
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a070:	61bb      	str	r3, [r7, #24]
 800a072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6979      	ldr	r1, [r7, #20]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	613b      	str	r3, [r7, #16]
   return(result);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e6      	bne.n	800a052 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a098:	bf00      	nop
 800a09a:	3754      	adds	r7, #84	@ 0x54
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b09c      	sub	sp, #112	@ 0x70
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0ba:	d071      	beq.n	800a1a0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a0bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a0e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e6      	bne.n	800a0c4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a108:	f023 0301 	bic.w	r3, r3, #1
 800a10c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a10e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3308      	adds	r3, #8
 800a114:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a116:	647a      	str	r2, [r7, #68]	@ 0x44
 800a118:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a11c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e5      	bne.n	800a0f6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a12a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3308      	adds	r3, #8
 800a130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	623b      	str	r3, [r7, #32]
   return(result);
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a140:	663b      	str	r3, [r7, #96]	@ 0x60
 800a142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3308      	adds	r3, #8
 800a148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a14a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e5      	bne.n	800a12a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a15e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a160:	2220      	movs	r2, #32
 800a162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d118      	bne.n	800a1a0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a16e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f023 0310 	bic.w	r3, r3, #16
 800a182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a18c:	61fb      	str	r3, [r7, #28]
 800a18e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a190:	69b9      	ldr	r1, [r7, #24]
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	e841 2300 	strex	r3, r2, [r1]
 800a198:	617b      	str	r3, [r7, #20]
   return(result);
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e6      	bne.n	800a16e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d107      	bne.n	800a1be <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1b8:	f7ff fa74 	bl	80096a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1bc:	e002      	b.n	800a1c4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a1be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1c0:	f7f7 fdb4 	bl	8001d2c <HAL_UART_RxCpltCallback>
}
 800a1c4:	bf00      	nop
 800a1c6:	3770      	adds	r7, #112	@ 0x70
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d109      	bne.n	800a1fc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f7ff fa55 	bl	80096a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1fa:	e002      	b.n	800a202 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7ff fa3d 	bl	800967c <HAL_UART_RxHalfCpltCallback>
}
 800a202:	bf00      	nop
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b086      	sub	sp, #24
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a216:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a21c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a224:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a230:	2b80      	cmp	r3, #128	@ 0x80
 800a232:	d109      	bne.n	800a248 <UART_DMAError+0x3e>
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	2b21      	cmp	r3, #33	@ 0x21
 800a238:	d106      	bne.n	800a248 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a242:	6978      	ldr	r0, [r7, #20]
 800a244:	f7ff fea4 	bl	8009f90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a252:	2b40      	cmp	r3, #64	@ 0x40
 800a254:	d109      	bne.n	800a26a <UART_DMAError+0x60>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b22      	cmp	r3, #34	@ 0x22
 800a25a:	d106      	bne.n	800a26a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2200      	movs	r2, #0
 800a260:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a264:	6978      	ldr	r0, [r7, #20]
 800a266:	f7ff feb9 	bl	8009fdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a270:	f043 0210 	orr.w	r2, r3, #16
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	f7ff fa08 	bl	8009690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a280:	bf00      	nop
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a294:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7ff f9f2 	bl	8009690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ac:	bf00      	nop
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2d0:	61fb      	str	r3, [r7, #28]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6979      	ldr	r1, [r7, #20]
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e6      	bne.n	800a2bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff f9b4 	bl	8009668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a300:	bf00      	nop
 800a302:	3720      	adds	r7, #32
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a308:	b084      	sub	sp, #16
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	f107 001c 	add.w	r0, r7, #28
 800a316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a31a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d121      	bne.n	800a366 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a326:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	4b21      	ldr	r3, [pc, #132]	@ (800a3b8 <USB_CoreInit+0xb0>)
 800a334:	4013      	ands	r3, r2
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a346:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d105      	bne.n	800a35a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fa92 	bl	800a884 <USB_CoreReset>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]
 800a364:	e010      	b.n	800a388 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa86 	bl	800a884 <USB_CoreReset>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a380:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a388:	7fbb      	ldrb	r3, [r7, #30]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d10b      	bne.n	800a3a6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	f043 0206 	orr.w	r2, r3, #6
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	f043 0220 	orr.w	r2, r3, #32
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3b2:	b004      	add	sp, #16
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	ffbdffbf 	.word	0xffbdffbf

0800a3bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f023 0201 	bic.w	r2, r3, #1
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a3fa:	78fb      	ldrb	r3, [r7, #3]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d115      	bne.n	800a42c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a40c:	200a      	movs	r0, #10
 800a40e:	f7f9 fbf7 	bl	8003c00 <HAL_Delay>
      ms += 10U;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	330a      	adds	r3, #10
 800a416:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fa25 	bl	800a868 <USB_GetMode>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b01      	cmp	r3, #1
 800a422:	d01e      	beq.n	800a462 <USB_SetCurrentMode+0x84>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2bc7      	cmp	r3, #199	@ 0xc7
 800a428:	d9f0      	bls.n	800a40c <USB_SetCurrentMode+0x2e>
 800a42a:	e01a      	b.n	800a462 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d115      	bne.n	800a45e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a43e:	200a      	movs	r0, #10
 800a440:	f7f9 fbde 	bl	8003c00 <HAL_Delay>
      ms += 10U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	330a      	adds	r3, #10
 800a448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fa0c 	bl	800a868 <USB_GetMode>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d005      	beq.n	800a462 <USB_SetCurrentMode+0x84>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2bc7      	cmp	r3, #199	@ 0xc7
 800a45a:	d9f0      	bls.n	800a43e <USB_SetCurrentMode+0x60>
 800a45c:	e001      	b.n	800a462 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e005      	b.n	800a46e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2bc8      	cmp	r3, #200	@ 0xc8
 800a466:	d101      	bne.n	800a46c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e000      	b.n	800a46e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a478:	b084      	sub	sp, #16
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b086      	sub	sp, #24
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a492:	2300      	movs	r3, #0
 800a494:	613b      	str	r3, [r7, #16]
 800a496:	e009      	b.n	800a4ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	3340      	adds	r3, #64	@ 0x40
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4413      	add	r3, r2
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	613b      	str	r3, [r7, #16]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	2b0e      	cmp	r3, #14
 800a4b0:	d9f2      	bls.n	800a498 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a4b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d11c      	bne.n	800a4f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4c8:	f043 0302 	orr.w	r3, r3, #2
 800a4cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	e005      	b.n	800a500 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a506:	461a      	mov	r2, r3
 800a508:	2300      	movs	r3, #0
 800a50a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a50c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a510:	2b01      	cmp	r3, #1
 800a512:	d10d      	bne.n	800a530 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d104      	bne.n	800a526 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a51c:	2100      	movs	r1, #0
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f968 	bl	800a7f4 <USB_SetDevSpeed>
 800a524:	e008      	b.n	800a538 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a526:	2101      	movs	r1, #1
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f963 	bl	800a7f4 <USB_SetDevSpeed>
 800a52e:	e003      	b.n	800a538 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a530:	2103      	movs	r1, #3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f95e 	bl	800a7f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a538:	2110      	movs	r1, #16
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f8fa 	bl	800a734 <USB_FlushTxFifo>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f924 	bl	800a798 <USB_FlushRxFifo>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a560:	461a      	mov	r2, r3
 800a562:	2300      	movs	r3, #0
 800a564:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a56c:	461a      	mov	r2, r3
 800a56e:	2300      	movs	r3, #0
 800a570:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a578:	461a      	mov	r2, r3
 800a57a:	2300      	movs	r3, #0
 800a57c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a57e:	2300      	movs	r3, #0
 800a580:	613b      	str	r3, [r7, #16]
 800a582:	e043      	b.n	800a60c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a596:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a59a:	d118      	bne.n	800a5ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10a      	bne.n	800a5b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	015a      	lsls	r2, r3, #5
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	e013      	b.n	800a5e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	e008      	b.n	800a5e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5da:	461a      	mov	r2, r3
 800a5dc:	2300      	movs	r3, #0
 800a5de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5fe:	461a      	mov	r2, r3
 800a600:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a604:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	3301      	adds	r3, #1
 800a60a:	613b      	str	r3, [r7, #16]
 800a60c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a610:	461a      	mov	r2, r3
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	4293      	cmp	r3, r2
 800a616:	d3b5      	bcc.n	800a584 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a618:	2300      	movs	r3, #0
 800a61a:	613b      	str	r3, [r7, #16]
 800a61c:	e043      	b.n	800a6a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a630:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a634:	d118      	bne.n	800a668 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a648:	461a      	mov	r2, r3
 800a64a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	e013      	b.n	800a67a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a65e:	461a      	mov	r2, r3
 800a660:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a664:	6013      	str	r3, [r2, #0]
 800a666:	e008      	b.n	800a67a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a674:	461a      	mov	r2, r3
 800a676:	2300      	movs	r3, #0
 800a678:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4413      	add	r3, r2
 800a682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a686:	461a      	mov	r2, r3
 800a688:	2300      	movs	r3, #0
 800a68a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a698:	461a      	mov	r2, r3
 800a69a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a69e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	613b      	str	r3, [r7, #16]
 800a6a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d3b5      	bcc.n	800a61e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a6d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a6d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d105      	bne.n	800a6e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	f043 0210 	orr.w	r2, r3, #16
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a72c <USB_DevInit+0x2b4>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a6f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d005      	beq.n	800a708 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	f043 0208 	orr.w	r2, r3, #8
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a708:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d105      	bne.n	800a71c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	699a      	ldr	r2, [r3, #24]
 800a714:	4b06      	ldr	r3, [pc, #24]	@ (800a730 <USB_DevInit+0x2b8>)
 800a716:	4313      	orrs	r3, r2
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a728:	b004      	add	sp, #16
 800a72a:	4770      	bx	lr
 800a72c:	803c3800 	.word	0x803c3800
 800a730:	40000004 	.word	0x40000004

0800a734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3301      	adds	r3, #1
 800a746:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a74e:	d901      	bls.n	800a754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e01b      	b.n	800a78c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	daf2      	bge.n	800a742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	019b      	lsls	r3, r3, #6
 800a764:	f043 0220 	orr.w	r2, r3, #32
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a778:	d901      	bls.n	800a77e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e006      	b.n	800a78c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f003 0320 	and.w	r3, r3, #32
 800a786:	2b20      	cmp	r3, #32
 800a788:	d0f0      	beq.n	800a76c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7b0:	d901      	bls.n	800a7b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e018      	b.n	800a7e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	daf2      	bge.n	800a7a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2210      	movs	r2, #16
 800a7c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7d4:	d901      	bls.n	800a7da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e006      	b.n	800a7e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	f003 0310 	and.w	r3, r3, #16
 800a7e2:	2b10      	cmp	r3, #16
 800a7e4:	d0f0      	beq.n	800a7c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3714      	adds	r7, #20
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	68f9      	ldr	r1, [r7, #12]
 800a810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a814:	4313      	orrs	r3, r2
 800a816:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a840:	f023 0303 	bic.w	r3, r3, #3
 800a844:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a854:	f043 0302 	orr.w	r3, r3, #2
 800a858:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	f003 0301 	and.w	r3, r3, #1
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3301      	adds	r3, #1
 800a894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a89c:	d901      	bls.n	800a8a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e01b      	b.n	800a8da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	daf2      	bge.n	800a890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	f043 0201 	orr.w	r2, r3, #1
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8c6:	d901      	bls.n	800a8cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e006      	b.n	800a8da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d0f0      	beq.n	800a8ba <USB_CoreReset+0x36>

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a8ec:	4904      	ldr	r1, [pc, #16]	@ (800a900 <MX_FATFS_Init+0x18>)
 800a8ee:	4805      	ldr	r0, [pc, #20]	@ (800a904 <MX_FATFS_Init+0x1c>)
 800a8f0:	f000 fd94 	bl	800b41c <FATFS_LinkDriver>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	4b03      	ldr	r3, [pc, #12]	@ (800a908 <MX_FATFS_Init+0x20>)
 800a8fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a8fc:	bf00      	nop
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20000f28 	.word	0x20000f28
 800a904:	20000058 	.word	0x20000058
 800a908:	20000f24 	.word	0x20000f24

0800a90c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a916:	79fb      	ldrb	r3, [r7, #7]
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 f9d7 	bl	800accc <USER_SPI_initialize>
 800a91e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a920:	4618      	mov	r0, r3
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	4603      	mov	r3, r0
 800a930:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a932:	79fb      	ldrb	r3, [r7, #7]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 fabd 	bl	800aeb4 <USER_SPI_status>
 800a93a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60b9      	str	r1, [r7, #8]
 800a94c:	607a      	str	r2, [r7, #4]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800a954:	7bf8      	ldrb	r0, [r7, #15]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	f000 fac0 	bl	800aee0 <USER_SPI_read>
 800a960:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
 800a976:	4603      	mov	r3, r0
 800a978:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a97a:	7bf8      	ldrb	r0, [r7, #15]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	68b9      	ldr	r1, [r7, #8]
 800a982:	f000 fb13 	bl	800afac <USER_SPI_write>
 800a986:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	603a      	str	r2, [r7, #0]
 800a99a:	71fb      	strb	r3, [r7, #7]
 800a99c:	460b      	mov	r3, r1
 800a99e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a9a0:	79b9      	ldrb	r1, [r7, #6]
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 fb7c 	bl	800b0a4 <USER_SPI_ioctl>
 800a9ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a9c0:	f7f9 f912 	bl	8003be8 <HAL_GetTick>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	4a04      	ldr	r2, [pc, #16]	@ (800a9d8 <SPI_Timer_On+0x20>)
 800a9c8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a9ca:	4a04      	ldr	r2, [pc, #16]	@ (800a9dc <SPI_Timer_On+0x24>)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6013      	str	r3, [r2, #0]
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	20000f30 	.word	0x20000f30
 800a9dc:	20000f34 	.word	0x20000f34

0800a9e0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a9e4:	f7f9 f900 	bl	8003be8 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	4b06      	ldr	r3, [pc, #24]	@ (800aa04 <SPI_Timer_Status+0x24>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	1ad2      	subs	r2, r2, r3
 800a9f0:	4b05      	ldr	r3, [pc, #20]	@ (800aa08 <SPI_Timer_Status+0x28>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	bf34      	ite	cc
 800a9f8:	2301      	movcc	r3, #1
 800a9fa:	2300      	movcs	r3, #0
 800a9fc:	b2db      	uxtb	r3, r3
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20000f30 	.word	0x20000f30
 800aa08:	20000f34 	.word	0x20000f34

0800aa0c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af02      	add	r7, sp, #8
 800aa12:	4603      	mov	r3, r0
 800aa14:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800aa16:	f107 020f 	add.w	r2, r7, #15
 800aa1a:	1df9      	adds	r1, r7, #7
 800aa1c:	2332      	movs	r3, #50	@ 0x32
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	2301      	movs	r3, #1
 800aa22:	4804      	ldr	r0, [pc, #16]	@ (800aa34 <xchg_spi+0x28>)
 800aa24:	f7fc f8fc 	bl	8006c20 <HAL_SPI_TransmitReceive>
    return rxDat;
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20000160 	.word	0x20000160

0800aa38 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800aa38:	b590      	push	{r4, r7, lr}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
 800aa46:	e00a      	b.n	800aa5e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	18d4      	adds	r4, r2, r3
 800aa4e:	20ff      	movs	r0, #255	@ 0xff
 800aa50:	f7ff ffdc 	bl	800aa0c <xchg_spi>
 800aa54:	4603      	mov	r3, r0
 800aa56:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d3f0      	bcc.n	800aa48 <rcvr_spi_multi+0x10>
	}
}
 800aa66:	bf00      	nop
 800aa68:	bf00      	nop
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd90      	pop	{r4, r7, pc}

0800aa70 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4803      	ldr	r0, [pc, #12]	@ (800aa94 <xmit_spi_multi+0x24>)
 800aa86:	f7fb ff56 	bl	8006936 <HAL_SPI_Transmit>
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20000160 	.word	0x20000160

0800aa98 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800aaa0:	f7f9 f8a2 	bl	8003be8 <HAL_GetTick>
 800aaa4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800aaaa:	20ff      	movs	r0, #255	@ 0xff
 800aaac:	f7ff ffae 	bl	800aa0c <xchg_spi>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	2bff      	cmp	r3, #255	@ 0xff
 800aab8:	d007      	beq.n	800aaca <wait_ready+0x32>
 800aaba:	f7f9 f895 	bl	8003be8 <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d8ef      	bhi.n	800aaaa <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
 800aacc:	2bff      	cmp	r3, #255	@ 0xff
 800aace:	bf0c      	ite	eq
 800aad0:	2301      	moveq	r3, #1
 800aad2:	2300      	movne	r3, #0
 800aad4:	b2db      	uxtb	r3, r3
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800aae4:	2201      	movs	r2, #1
 800aae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aaea:	4804      	ldr	r0, [pc, #16]	@ (800aafc <despiselect+0x1c>)
 800aaec:	f7f9 ff8c 	bl	8004a08 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800aaf0:	20ff      	movs	r0, #255	@ 0xff
 800aaf2:	f7ff ff8b 	bl	800aa0c <xchg_spi>

}
 800aaf6:	bf00      	nop
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	40020400 	.word	0x40020400

0800ab00 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800ab04:	2200      	movs	r2, #0
 800ab06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ab0a:	480a      	ldr	r0, [pc, #40]	@ (800ab34 <spiselect+0x34>)
 800ab0c:	f7f9 ff7c 	bl	8004a08 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800ab10:	20ff      	movs	r0, #255	@ 0xff
 800ab12:	f7ff ff7b 	bl	800aa0c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800ab16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ab1a:	f7ff ffbd 	bl	800aa98 <wait_ready>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <spiselect+0x28>
 800ab24:	2301      	movs	r3, #1
 800ab26:	e002      	b.n	800ab2e <spiselect+0x2e>

	despiselect();
 800ab28:	f7ff ffda 	bl	800aae0 <despiselect>
	return 0;	/* Timeout */
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	40020400 	.word	0x40020400

0800ab38 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800ab42:	20c8      	movs	r0, #200	@ 0xc8
 800ab44:	f7ff ff38 	bl	800a9b8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800ab48:	20ff      	movs	r0, #255	@ 0xff
 800ab4a:	f7ff ff5f 	bl	800aa0c <xchg_spi>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
 800ab54:	2bff      	cmp	r3, #255	@ 0xff
 800ab56:	d104      	bne.n	800ab62 <rcvr_datablock+0x2a>
 800ab58:	f7ff ff42 	bl	800a9e0 <SPI_Timer_Status>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1f2      	bne.n	800ab48 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	2bfe      	cmp	r3, #254	@ 0xfe
 800ab66:	d001      	beq.n	800ab6c <rcvr_datablock+0x34>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e00a      	b.n	800ab82 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff ff62 	bl	800aa38 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800ab74:	20ff      	movs	r0, #255	@ 0xff
 800ab76:	f7ff ff49 	bl	800aa0c <xchg_spi>
 800ab7a:	20ff      	movs	r0, #255	@ 0xff
 800ab7c:	f7ff ff46 	bl	800aa0c <xchg_spi>

	return 1;						/* Function succeeded */
 800ab80:	2301      	movs	r3, #1
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	460b      	mov	r3, r1
 800ab94:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800ab96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ab9a:	f7ff ff7d 	bl	800aa98 <wait_ready>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <xmit_datablock+0x1e>
 800aba4:	2300      	movs	r3, #0
 800aba6:	e01e      	b.n	800abe6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff ff2e 	bl	800aa0c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	2bfd      	cmp	r3, #253	@ 0xfd
 800abb4:	d016      	beq.n	800abe4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800abb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff ff58 	bl	800aa70 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800abc0:	20ff      	movs	r0, #255	@ 0xff
 800abc2:	f7ff ff23 	bl	800aa0c <xchg_spi>
 800abc6:	20ff      	movs	r0, #255	@ 0xff
 800abc8:	f7ff ff20 	bl	800aa0c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800abcc:	20ff      	movs	r0, #255	@ 0xff
 800abce:	f7ff ff1d 	bl	800aa0c <xchg_spi>
 800abd2:	4603      	mov	r3, r0
 800abd4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
 800abd8:	f003 031f 	and.w	r3, r3, #31
 800abdc:	2b05      	cmp	r3, #5
 800abde:	d001      	beq.n	800abe4 <xmit_datablock+0x5a>
 800abe0:	2300      	movs	r3, #0
 800abe2:	e000      	b.n	800abe6 <xmit_datablock+0x5c>
	}
	return 1;
 800abe4:	2301      	movs	r3, #1
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b084      	sub	sp, #16
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	4603      	mov	r3, r0
 800abf6:	6039      	str	r1, [r7, #0]
 800abf8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800abfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da0e      	bge.n	800ac20 <send_cmd+0x32>
		cmd &= 0x7F;
 800ac02:	79fb      	ldrb	r3, [r7, #7]
 800ac04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac08:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	2037      	movs	r0, #55	@ 0x37
 800ac0e:	f7ff ffee 	bl	800abee <send_cmd>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d901      	bls.n	800ac20 <send_cmd+0x32>
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	e051      	b.n	800acc4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	2b0c      	cmp	r3, #12
 800ac24:	d008      	beq.n	800ac38 <send_cmd+0x4a>
		despiselect();
 800ac26:	f7ff ff5b 	bl	800aae0 <despiselect>
		if (!spiselect()) return 0xFF;
 800ac2a:	f7ff ff69 	bl	800ab00 <spiselect>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <send_cmd+0x4a>
 800ac34:	23ff      	movs	r3, #255	@ 0xff
 800ac36:	e045      	b.n	800acc4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff fee3 	bl	800aa0c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	0e1b      	lsrs	r3, r3, #24
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff fedd 	bl	800aa0c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	0c1b      	lsrs	r3, r3, #16
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7ff fed7 	bl	800aa0c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	0a1b      	lsrs	r3, r3, #8
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff fed1 	bl	800aa0c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff fecc 	bl	800aa0c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ac74:	2301      	movs	r3, #1
 800ac76:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ac78:	79fb      	ldrb	r3, [r7, #7]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <send_cmd+0x94>
 800ac7e:	2395      	movs	r3, #149	@ 0x95
 800ac80:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d101      	bne.n	800ac8c <send_cmd+0x9e>
 800ac88:	2387      	movs	r3, #135	@ 0x87
 800ac8a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff febc 	bl	800aa0c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800ac94:	79fb      	ldrb	r3, [r7, #7]
 800ac96:	2b0c      	cmp	r3, #12
 800ac98:	d102      	bne.n	800aca0 <send_cmd+0xb2>
 800ac9a:	20ff      	movs	r0, #255	@ 0xff
 800ac9c:	f7ff feb6 	bl	800aa0c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800aca0:	230a      	movs	r3, #10
 800aca2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800aca4:	20ff      	movs	r0, #255	@ 0xff
 800aca6:	f7ff feb1 	bl	800aa0c <xchg_spi>
 800acaa:	4603      	mov	r3, r0
 800acac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800acae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	da05      	bge.n	800acc2 <send_cmd+0xd4>
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
 800acb8:	3b01      	subs	r3, #1
 800acba:	73fb      	strb	r3, [r7, #15]
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f0      	bne.n	800aca4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800acc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800accc:	b590      	push	{r4, r7, lr}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <USER_SPI_initialize+0x14>
 800acdc:	2301      	movs	r3, #1
 800acde:	e0dc      	b.n	800ae9a <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800ace0:	4b70      	ldr	r3, [pc, #448]	@ (800aea4 <USER_SPI_initialize+0x1d8>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <USER_SPI_initialize+0x2a>
 800acee:	4b6d      	ldr	r3, [pc, #436]	@ (800aea4 <USER_SPI_initialize+0x1d8>)
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	e0d1      	b.n	800ae9a <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800acf6:	4b6b      	ldr	r3, [pc, #428]	@ (800aea4 <USER_SPI_initialize+0x1d8>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	461a      	mov	r2, r3
 800acfe:	4b6a      	ldr	r3, [pc, #424]	@ (800aea8 <USER_SPI_initialize+0x1dc>)
 800ad00:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800ad02:	4b6a      	ldr	r3, [pc, #424]	@ (800aeac <USER_SPI_initialize+0x1e0>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800ad0c:	4b67      	ldr	r3, [pc, #412]	@ (800aeac <USER_SPI_initialize+0x1e0>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800ad14:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800ad16:	230a      	movs	r3, #10
 800ad18:	73fb      	strb	r3, [r7, #15]
 800ad1a:	e005      	b.n	800ad28 <USER_SPI_initialize+0x5c>
 800ad1c:	20ff      	movs	r0, #255	@ 0xff
 800ad1e:	f7ff fe75 	bl	800aa0c <xchg_spi>
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	73fb      	strb	r3, [r7, #15]
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1f6      	bne.n	800ad1c <USER_SPI_initialize+0x50>

	ty = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800ad32:	2100      	movs	r1, #0
 800ad34:	2000      	movs	r0, #0
 800ad36:	f7ff ff5a 	bl	800abee <send_cmd>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	f040 808b 	bne.w	800ae58 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800ad42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ad46:	f7ff fe37 	bl	800a9b8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800ad4a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800ad4e:	2008      	movs	r0, #8
 800ad50:	f7ff ff4d 	bl	800abee <send_cmd>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d151      	bne.n	800adfe <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]
 800ad5e:	e00d      	b.n	800ad7c <USER_SPI_initialize+0xb0>
 800ad60:	7bfc      	ldrb	r4, [r7, #15]
 800ad62:	20ff      	movs	r0, #255	@ 0xff
 800ad64:	f7ff fe52 	bl	800aa0c <xchg_spi>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f104 0310 	add.w	r3, r4, #16
 800ad70:	443b      	add	r3, r7
 800ad72:	f803 2c08 	strb.w	r2, [r3, #-8]
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	73fb      	strb	r3, [r7, #15]
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d9ee      	bls.n	800ad60 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800ad82:	7abb      	ldrb	r3, [r7, #10]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d167      	bne.n	800ae58 <USER_SPI_initialize+0x18c>
 800ad88:	7afb      	ldrb	r3, [r7, #11]
 800ad8a:	2baa      	cmp	r3, #170	@ 0xaa
 800ad8c:	d164      	bne.n	800ae58 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800ad8e:	bf00      	nop
 800ad90:	f7ff fe26 	bl	800a9e0 <SPI_Timer_Status>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d007      	beq.n	800adaa <USER_SPI_initialize+0xde>
 800ad9a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ad9e:	20a9      	movs	r0, #169	@ 0xa9
 800ada0:	f7ff ff25 	bl	800abee <send_cmd>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1f2      	bne.n	800ad90 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800adaa:	f7ff fe19 	bl	800a9e0 <SPI_Timer_Status>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d051      	beq.n	800ae58 <USER_SPI_initialize+0x18c>
 800adb4:	2100      	movs	r1, #0
 800adb6:	203a      	movs	r0, #58	@ 0x3a
 800adb8:	f7ff ff19 	bl	800abee <send_cmd>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d14a      	bne.n	800ae58 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]
 800adc6:	e00d      	b.n	800ade4 <USER_SPI_initialize+0x118>
 800adc8:	7bfc      	ldrb	r4, [r7, #15]
 800adca:	20ff      	movs	r0, #255	@ 0xff
 800adcc:	f7ff fe1e 	bl	800aa0c <xchg_spi>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	f104 0310 	add.w	r3, r4, #16
 800add8:	443b      	add	r3, r7
 800adda:	f803 2c08 	strb.w	r2, [r3, #-8]
 800adde:	7bfb      	ldrb	r3, [r7, #15]
 800ade0:	3301      	adds	r3, #1
 800ade2:	73fb      	strb	r3, [r7, #15]
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d9ee      	bls.n	800adc8 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800adea:	7a3b      	ldrb	r3, [r7, #8]
 800adec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <USER_SPI_initialize+0x12c>
 800adf4:	230c      	movs	r3, #12
 800adf6:	e000      	b.n	800adfa <USER_SPI_initialize+0x12e>
 800adf8:	2304      	movs	r3, #4
 800adfa:	737b      	strb	r3, [r7, #13]
 800adfc:	e02c      	b.n	800ae58 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800adfe:	2100      	movs	r1, #0
 800ae00:	20a9      	movs	r0, #169	@ 0xa9
 800ae02:	f7ff fef4 	bl	800abee <send_cmd>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d804      	bhi.n	800ae16 <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	737b      	strb	r3, [r7, #13]
 800ae10:	23a9      	movs	r3, #169	@ 0xa9
 800ae12:	73bb      	strb	r3, [r7, #14]
 800ae14:	e003      	b.n	800ae1e <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800ae16:	2301      	movs	r3, #1
 800ae18:	737b      	strb	r3, [r7, #13]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800ae1e:	bf00      	nop
 800ae20:	f7ff fdde 	bl	800a9e0 <SPI_Timer_Status>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d007      	beq.n	800ae3a <USER_SPI_initialize+0x16e>
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff fedd 	bl	800abee <send_cmd>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1f2      	bne.n	800ae20 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800ae3a:	f7ff fdd1 	bl	800a9e0 <SPI_Timer_Status>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <USER_SPI_initialize+0x188>
 800ae44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ae48:	2010      	movs	r0, #16
 800ae4a:	f7ff fed0 	bl	800abee <send_cmd>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <USER_SPI_initialize+0x18c>
				ty = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800ae58:	4a15      	ldr	r2, [pc, #84]	@ (800aeb0 <USER_SPI_initialize+0x1e4>)
 800ae5a:	7b7b      	ldrb	r3, [r7, #13]
 800ae5c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800ae5e:	f7ff fe3f 	bl	800aae0 <despiselect>

	if (ty) {			/* OK */
 800ae62:	7b7b      	ldrb	r3, [r7, #13]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d012      	beq.n	800ae8e <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800ae68:	4b10      	ldr	r3, [pc, #64]	@ (800aeac <USER_SPI_initialize+0x1e0>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800ae72:	4b0e      	ldr	r3, [pc, #56]	@ (800aeac <USER_SPI_initialize+0x1e0>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0210 	orr.w	r2, r2, #16
 800ae7a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800ae7c:	4b09      	ldr	r3, [pc, #36]	@ (800aea4 <USER_SPI_initialize+0x1d8>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	f023 0301 	bic.w	r3, r3, #1
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	4b06      	ldr	r3, [pc, #24]	@ (800aea4 <USER_SPI_initialize+0x1d8>)
 800ae8a:	701a      	strb	r2, [r3, #0]
 800ae8c:	e002      	b.n	800ae94 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800ae8e:	4b05      	ldr	r3, [pc, #20]	@ (800aea4 <USER_SPI_initialize+0x1d8>)
 800ae90:	2201      	movs	r2, #1
 800ae92:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800ae94:	4b03      	ldr	r3, [pc, #12]	@ (800aea4 <USER_SPI_initialize+0x1d8>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b2db      	uxtb	r3, r3
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd90      	pop	{r4, r7, pc}
 800aea2:	bf00      	nop
 800aea4:	2000006c 	.word	0x2000006c
 800aea8:	20000d38 	.word	0x20000d38
 800aeac:	20000160 	.word	0x20000160
 800aeb0:	20000f2c 	.word	0x20000f2c

0800aeb4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <USER_SPI_status+0x14>
 800aec4:	2301      	movs	r3, #1
 800aec6:	e002      	b.n	800aece <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800aec8:	4b04      	ldr	r3, [pc, #16]	@ (800aedc <USER_SPI_status+0x28>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	b2db      	uxtb	r3, r3
}
 800aece:	4618      	mov	r0, r3
 800aed0:	370c      	adds	r7, #12
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	2000006c 	.word	0x2000006c

0800aee0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d102      	bne.n	800aefc <USER_SPI_read+0x1c>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <USER_SPI_read+0x20>
 800aefc:	2304      	movs	r3, #4
 800aefe:	e04d      	b.n	800af9c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800af00:	4b28      	ldr	r3, [pc, #160]	@ (800afa4 <USER_SPI_read+0xc4>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	b2db      	uxtb	r3, r3
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <USER_SPI_read+0x32>
 800af0e:	2303      	movs	r3, #3
 800af10:	e044      	b.n	800af9c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800af12:	4b25      	ldr	r3, [pc, #148]	@ (800afa8 <USER_SPI_read+0xc8>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	f003 0308 	and.w	r3, r3, #8
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d102      	bne.n	800af24 <USER_SPI_read+0x44>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	025b      	lsls	r3, r3, #9
 800af22:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d111      	bne.n	800af4e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800af2a:	6879      	ldr	r1, [r7, #4]
 800af2c:	2011      	movs	r0, #17
 800af2e:	f7ff fe5e 	bl	800abee <send_cmd>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d129      	bne.n	800af8c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800af38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af3c:	68b8      	ldr	r0, [r7, #8]
 800af3e:	f7ff fdfb 	bl	800ab38 <rcvr_datablock>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d021      	beq.n	800af8c <USER_SPI_read+0xac>
			count = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	e01e      	b.n	800af8c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800af4e:	6879      	ldr	r1, [r7, #4]
 800af50:	2012      	movs	r0, #18
 800af52:	f7ff fe4c 	bl	800abee <send_cmd>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d117      	bne.n	800af8c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800af5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af60:	68b8      	ldr	r0, [r7, #8]
 800af62:	f7ff fde9 	bl	800ab38 <rcvr_datablock>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00a      	beq.n	800af82 <USER_SPI_read+0xa2>
				buff += 512;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800af72:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	3b01      	subs	r3, #1
 800af78:	603b      	str	r3, [r7, #0]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1ed      	bne.n	800af5c <USER_SPI_read+0x7c>
 800af80:	e000      	b.n	800af84 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800af82:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800af84:	2100      	movs	r1, #0
 800af86:	200c      	movs	r0, #12
 800af88:	f7ff fe31 	bl	800abee <send_cmd>
		}
	}
	despiselect();
 800af8c:	f7ff fda8 	bl	800aae0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	bf14      	ite	ne
 800af96:	2301      	movne	r3, #1
 800af98:	2300      	moveq	r3, #0
 800af9a:	b2db      	uxtb	r3, r3
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	2000006c 	.word	0x2000006c
 800afa8:	20000f2c 	.word	0x20000f2c

0800afac <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60b9      	str	r1, [r7, #8]
 800afb4:	607a      	str	r2, [r7, #4]
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d102      	bne.n	800afc8 <USER_SPI_write+0x1c>
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <USER_SPI_write+0x20>
 800afc8:	2304      	movs	r3, #4
 800afca:	e063      	b.n	800b094 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800afcc:	4b33      	ldr	r3, [pc, #204]	@ (800b09c <USER_SPI_write+0xf0>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <USER_SPI_write+0x32>
 800afda:	2303      	movs	r3, #3
 800afdc:	e05a      	b.n	800b094 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800afde:	4b2f      	ldr	r3, [pc, #188]	@ (800b09c <USER_SPI_write+0xf0>)
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <USER_SPI_write+0x44>
 800afec:	2302      	movs	r3, #2
 800afee:	e051      	b.n	800b094 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800aff0:	4b2b      	ldr	r3, [pc, #172]	@ (800b0a0 <USER_SPI_write+0xf4>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f003 0308 	and.w	r3, r3, #8
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <USER_SPI_write+0x56>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	025b      	lsls	r3, r3, #9
 800b000:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d110      	bne.n	800b02a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	2018      	movs	r0, #24
 800b00c:	f7ff fdef 	bl	800abee <send_cmd>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d136      	bne.n	800b084 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b016:	21fe      	movs	r1, #254	@ 0xfe
 800b018:	68b8      	ldr	r0, [r7, #8]
 800b01a:	f7ff fdb6 	bl	800ab8a <xmit_datablock>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d02f      	beq.n	800b084 <USER_SPI_write+0xd8>
			count = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	603b      	str	r3, [r7, #0]
 800b028:	e02c      	b.n	800b084 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b02a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0a0 <USER_SPI_write+0xf4>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 0306 	and.w	r3, r3, #6
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <USER_SPI_write+0x92>
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	2097      	movs	r0, #151	@ 0x97
 800b03a:	f7ff fdd8 	bl	800abee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	2019      	movs	r0, #25
 800b042:	f7ff fdd4 	bl	800abee <send_cmd>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11b      	bne.n	800b084 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b04c:	21fc      	movs	r1, #252	@ 0xfc
 800b04e:	68b8      	ldr	r0, [r7, #8]
 800b050:	f7ff fd9b 	bl	800ab8a <xmit_datablock>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <USER_SPI_write+0xc4>
				buff += 512;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b060:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	3b01      	subs	r3, #1
 800b066:	603b      	str	r3, [r7, #0]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1ee      	bne.n	800b04c <USER_SPI_write+0xa0>
 800b06e:	e000      	b.n	800b072 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b070:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b072:	21fd      	movs	r1, #253	@ 0xfd
 800b074:	2000      	movs	r0, #0
 800b076:	f7ff fd88 	bl	800ab8a <xmit_datablock>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <USER_SPI_write+0xd8>
 800b080:	2301      	movs	r3, #1
 800b082:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b084:	f7ff fd2c 	bl	800aae0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	bf14      	ite	ne
 800b08e:	2301      	movne	r3, #1
 800b090:	2300      	moveq	r3, #0
 800b092:	b2db      	uxtb	r3, r3
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	2000006c 	.word	0x2000006c
 800b0a0:	20000f2c 	.word	0x20000f2c

0800b0a4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08c      	sub	sp, #48	@ 0x30
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	603a      	str	r2, [r7, #0]
 800b0ae:	71fb      	strb	r3, [r7, #7]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <USER_SPI_ioctl+0x1a>
 800b0ba:	2304      	movs	r3, #4
 800b0bc:	e15a      	b.n	800b374 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b0be:	4baf      	ldr	r3, [pc, #700]	@ (800b37c <USER_SPI_ioctl+0x2d8>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	f003 0301 	and.w	r3, r3, #1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <USER_SPI_ioctl+0x2c>
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e151      	b.n	800b374 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800b0d6:	79bb      	ldrb	r3, [r7, #6]
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	f200 8136 	bhi.w	800b34a <USER_SPI_ioctl+0x2a6>
 800b0de:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e4 <USER_SPI_ioctl+0x40>)
 800b0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e4:	0800b0f9 	.word	0x0800b0f9
 800b0e8:	0800b10d 	.word	0x0800b10d
 800b0ec:	0800b34b 	.word	0x0800b34b
 800b0f0:	0800b1b9 	.word	0x0800b1b9
 800b0f4:	0800b2af 	.word	0x0800b2af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b0f8:	f7ff fd02 	bl	800ab00 <spiselect>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8127 	beq.w	800b352 <USER_SPI_ioctl+0x2ae>
 800b104:	2300      	movs	r3, #0
 800b106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b10a:	e122      	b.n	800b352 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b10c:	2100      	movs	r1, #0
 800b10e:	2009      	movs	r0, #9
 800b110:	f7ff fd6d 	bl	800abee <send_cmd>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	f040 811d 	bne.w	800b356 <USER_SPI_ioctl+0x2b2>
 800b11c:	f107 030c 	add.w	r3, r7, #12
 800b120:	2110      	movs	r1, #16
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff fd08 	bl	800ab38 <rcvr_datablock>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 8113 	beq.w	800b356 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b130:	7b3b      	ldrb	r3, [r7, #12]
 800b132:	099b      	lsrs	r3, r3, #6
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b01      	cmp	r3, #1
 800b138:	d111      	bne.n	800b15e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b13a:	7d7b      	ldrb	r3, [r7, #21]
 800b13c:	461a      	mov	r2, r3
 800b13e:	7d3b      	ldrb	r3, [r7, #20]
 800b140:	021b      	lsls	r3, r3, #8
 800b142:	4413      	add	r3, r2
 800b144:	461a      	mov	r2, r3
 800b146:	7cfb      	ldrb	r3, [r7, #19]
 800b148:	041b      	lsls	r3, r3, #16
 800b14a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b14e:	4413      	add	r3, r2
 800b150:	3301      	adds	r3, #1
 800b152:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	029a      	lsls	r2, r3, #10
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	601a      	str	r2, [r3, #0]
 800b15c:	e028      	b.n	800b1b0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b15e:	7c7b      	ldrb	r3, [r7, #17]
 800b160:	f003 030f 	and.w	r3, r3, #15
 800b164:	b2da      	uxtb	r2, r3
 800b166:	7dbb      	ldrb	r3, [r7, #22]
 800b168:	09db      	lsrs	r3, r3, #7
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	4413      	add	r3, r2
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	7d7b      	ldrb	r3, [r7, #21]
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	b2db      	uxtb	r3, r3
 800b176:	f003 0306 	and.w	r3, r3, #6
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	3302      	adds	r3, #2
 800b182:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b186:	7d3b      	ldrb	r3, [r7, #20]
 800b188:	099b      	lsrs	r3, r3, #6
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	461a      	mov	r2, r3
 800b18e:	7cfb      	ldrb	r3, [r7, #19]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	441a      	add	r2, r3
 800b194:	7cbb      	ldrb	r3, [r7, #18]
 800b196:	029b      	lsls	r3, r3, #10
 800b198:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b19c:	4413      	add	r3, r2
 800b19e:	3301      	adds	r3, #1
 800b1a0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b1a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b1a6:	3b09      	subs	r3, #9
 800b1a8:	69fa      	ldr	r2, [r7, #28]
 800b1aa:	409a      	lsls	r2, r3
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b1b6:	e0ce      	b.n	800b356 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b1b8:	4b71      	ldr	r3, [pc, #452]	@ (800b380 <USER_SPI_ioctl+0x2dc>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d031      	beq.n	800b228 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	208d      	movs	r0, #141	@ 0x8d
 800b1c8:	f7ff fd11 	bl	800abee <send_cmd>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f040 80c3 	bne.w	800b35a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b1d4:	20ff      	movs	r0, #255	@ 0xff
 800b1d6:	f7ff fc19 	bl	800aa0c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b1da:	f107 030c 	add.w	r3, r7, #12
 800b1de:	2110      	movs	r1, #16
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff fca9 	bl	800ab38 <rcvr_datablock>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 80b6 	beq.w	800b35a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b1ee:	2330      	movs	r3, #48	@ 0x30
 800b1f0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b1f4:	e007      	b.n	800b206 <USER_SPI_ioctl+0x162>
 800b1f6:	20ff      	movs	r0, #255	@ 0xff
 800b1f8:	f7ff fc08 	bl	800aa0c <xchg_spi>
 800b1fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b200:	3b01      	subs	r3, #1
 800b202:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b206:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1f3      	bne.n	800b1f6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b20e:	7dbb      	ldrb	r3, [r7, #22]
 800b210:	091b      	lsrs	r3, r3, #4
 800b212:	b2db      	uxtb	r3, r3
 800b214:	461a      	mov	r2, r3
 800b216:	2310      	movs	r3, #16
 800b218:	fa03 f202 	lsl.w	r2, r3, r2
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b226:	e098      	b.n	800b35a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b228:	2100      	movs	r1, #0
 800b22a:	2009      	movs	r0, #9
 800b22c:	f7ff fcdf 	bl	800abee <send_cmd>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	f040 8091 	bne.w	800b35a <USER_SPI_ioctl+0x2b6>
 800b238:	f107 030c 	add.w	r3, r7, #12
 800b23c:	2110      	movs	r1, #16
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fc7a 	bl	800ab38 <rcvr_datablock>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 8087 	beq.w	800b35a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b24c:	4b4c      	ldr	r3, [pc, #304]	@ (800b380 <USER_SPI_ioctl+0x2dc>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	2b00      	cmp	r3, #0
 800b256:	d012      	beq.n	800b27e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b258:	7dbb      	ldrb	r3, [r7, #22]
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b260:	7dfa      	ldrb	r2, [r7, #23]
 800b262:	09d2      	lsrs	r2, r2, #7
 800b264:	b2d2      	uxtb	r2, r2
 800b266:	4413      	add	r3, r2
 800b268:	1c5a      	adds	r2, r3, #1
 800b26a:	7e7b      	ldrb	r3, [r7, #25]
 800b26c:	099b      	lsrs	r3, r3, #6
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	3b01      	subs	r3, #1
 800b272:	fa02 f303 	lsl.w	r3, r2, r3
 800b276:	461a      	mov	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	e013      	b.n	800b2a6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b27e:	7dbb      	ldrb	r3, [r7, #22]
 800b280:	109b      	asrs	r3, r3, #2
 800b282:	b29b      	uxth	r3, r3
 800b284:	f003 031f 	and.w	r3, r3, #31
 800b288:	3301      	adds	r3, #1
 800b28a:	7dfa      	ldrb	r2, [r7, #23]
 800b28c:	00d2      	lsls	r2, r2, #3
 800b28e:	f002 0218 	and.w	r2, r2, #24
 800b292:	7df9      	ldrb	r1, [r7, #23]
 800b294:	0949      	lsrs	r1, r1, #5
 800b296:	b2c9      	uxtb	r1, r1
 800b298:	440a      	add	r2, r1
 800b29a:	3201      	adds	r2, #1
 800b29c:	fb02 f303 	mul.w	r3, r2, r3
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b2ac:	e055      	b.n	800b35a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b2ae:	4b34      	ldr	r3, [pc, #208]	@ (800b380 <USER_SPI_ioctl+0x2dc>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	f003 0306 	and.w	r3, r3, #6
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d051      	beq.n	800b35e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b2ba:	f107 020c 	add.w	r2, r7, #12
 800b2be:	79fb      	ldrb	r3, [r7, #7]
 800b2c0:	210b      	movs	r1, #11
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff feee 	bl	800b0a4 <USER_SPI_ioctl>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d149      	bne.n	800b362 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b2ce:	7b3b      	ldrb	r3, [r7, #12]
 800b2d0:	099b      	lsrs	r3, r3, #6
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d104      	bne.n	800b2e2 <USER_SPI_ioctl+0x23e>
 800b2d8:	7dbb      	ldrb	r3, [r7, #22]
 800b2da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d041      	beq.n	800b366 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	623b      	str	r3, [r7, #32]
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800b2f2:	4b23      	ldr	r3, [pc, #140]	@ (800b380 <USER_SPI_ioctl+0x2dc>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	f003 0308 	and.w	r3, r3, #8
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d105      	bne.n	800b30a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b300:	025b      	lsls	r3, r3, #9
 800b302:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b306:	025b      	lsls	r3, r3, #9
 800b308:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b30a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b30c:	2020      	movs	r0, #32
 800b30e:	f7ff fc6e 	bl	800abee <send_cmd>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d128      	bne.n	800b36a <USER_SPI_ioctl+0x2c6>
 800b318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b31a:	2021      	movs	r0, #33	@ 0x21
 800b31c:	f7ff fc67 	bl	800abee <send_cmd>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d121      	bne.n	800b36a <USER_SPI_ioctl+0x2c6>
 800b326:	2100      	movs	r1, #0
 800b328:	2026      	movs	r0, #38	@ 0x26
 800b32a:	f7ff fc60 	bl	800abee <send_cmd>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d11a      	bne.n	800b36a <USER_SPI_ioctl+0x2c6>
 800b334:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b338:	f7ff fbae 	bl	800aa98 <wait_ready>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d013      	beq.n	800b36a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b342:	2300      	movs	r3, #0
 800b344:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b348:	e00f      	b.n	800b36a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b34a:	2304      	movs	r3, #4
 800b34c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b350:	e00c      	b.n	800b36c <USER_SPI_ioctl+0x2c8>
		break;
 800b352:	bf00      	nop
 800b354:	e00a      	b.n	800b36c <USER_SPI_ioctl+0x2c8>
		break;
 800b356:	bf00      	nop
 800b358:	e008      	b.n	800b36c <USER_SPI_ioctl+0x2c8>
		break;
 800b35a:	bf00      	nop
 800b35c:	e006      	b.n	800b36c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b35e:	bf00      	nop
 800b360:	e004      	b.n	800b36c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b362:	bf00      	nop
 800b364:	e002      	b.n	800b36c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b366:	bf00      	nop
 800b368:	e000      	b.n	800b36c <USER_SPI_ioctl+0x2c8>
		break;
 800b36a:	bf00      	nop
	}

	despiselect();
 800b36c:	f7ff fbb8 	bl	800aae0 <despiselect>

	return res;
 800b370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b374:	4618      	mov	r0, r3
 800b376:	3730      	adds	r7, #48	@ 0x30
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	2000006c 	.word	0x2000006c
 800b380:	20000f2c 	.word	0x20000f2c

0800b384 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b384:	b480      	push	{r7}
 800b386:	b087      	sub	sp, #28
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4613      	mov	r3, r2
 800b390:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b392:	2301      	movs	r3, #1
 800b394:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b39a:	4b1f      	ldr	r3, [pc, #124]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b39c:	7a5b      	ldrb	r3, [r3, #9]
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d131      	bne.n	800b408 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b3a4:	4b1c      	ldr	r3, [pc, #112]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b3a6:	7a5b      	ldrb	r3, [r3, #9]
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b3b2:	4b19      	ldr	r3, [pc, #100]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b3b4:	7a5b      	ldrb	r3, [r3, #9]
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	4a17      	ldr	r2, [pc, #92]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b3c2:	4b15      	ldr	r3, [pc, #84]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b3c4:	7a5b      	ldrb	r3, [r3, #9]
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4b13      	ldr	r3, [pc, #76]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b3cc:	4413      	add	r3, r2
 800b3ce:	79fa      	ldrb	r2, [r7, #7]
 800b3d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b3d2:	4b11      	ldr	r3, [pc, #68]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b3d4:	7a5b      	ldrb	r3, [r3, #9]
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	b2d1      	uxtb	r1, r2
 800b3dc:	4a0e      	ldr	r2, [pc, #56]	@ (800b418 <FATFS_LinkDriverEx+0x94>)
 800b3de:	7251      	strb	r1, [r2, #9]
 800b3e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b3e2:	7dbb      	ldrb	r3, [r7, #22]
 800b3e4:	3330      	adds	r3, #48	@ 0x30
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	223a      	movs	r2, #58	@ 0x3a
 800b3f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	3302      	adds	r3, #2
 800b3f8:	222f      	movs	r2, #47	@ 0x2f
 800b3fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	3303      	adds	r3, #3
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b408:	7dfb      	ldrb	r3, [r7, #23]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	371c      	adds	r7, #28
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	20000f38 	.word	0x20000f38

0800b41c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b426:	2200      	movs	r2, #0
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7ff ffaa 	bl	800b384 <FATFS_LinkDriverEx>
 800b430:	4603      	mov	r3, r0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
	...

0800b43c <sniprintf>:
 800b43c:	b40c      	push	{r2, r3}
 800b43e:	b530      	push	{r4, r5, lr}
 800b440:	4b17      	ldr	r3, [pc, #92]	@ (800b4a0 <sniprintf+0x64>)
 800b442:	1e0c      	subs	r4, r1, #0
 800b444:	681d      	ldr	r5, [r3, #0]
 800b446:	b09d      	sub	sp, #116	@ 0x74
 800b448:	da08      	bge.n	800b45c <sniprintf+0x20>
 800b44a:	238b      	movs	r3, #139	@ 0x8b
 800b44c:	602b      	str	r3, [r5, #0]
 800b44e:	f04f 30ff 	mov.w	r0, #4294967295
 800b452:	b01d      	add	sp, #116	@ 0x74
 800b454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b458:	b002      	add	sp, #8
 800b45a:	4770      	bx	lr
 800b45c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b460:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b464:	bf14      	ite	ne
 800b466:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b46a:	4623      	moveq	r3, r4
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	9307      	str	r3, [sp, #28]
 800b470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b474:	9002      	str	r0, [sp, #8]
 800b476:	9006      	str	r0, [sp, #24]
 800b478:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b47c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b47e:	ab21      	add	r3, sp, #132	@ 0x84
 800b480:	a902      	add	r1, sp, #8
 800b482:	4628      	mov	r0, r5
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	f000 f9c3 	bl	800b810 <_svfiprintf_r>
 800b48a:	1c43      	adds	r3, r0, #1
 800b48c:	bfbc      	itt	lt
 800b48e:	238b      	movlt	r3, #139	@ 0x8b
 800b490:	602b      	strlt	r3, [r5, #0]
 800b492:	2c00      	cmp	r4, #0
 800b494:	d0dd      	beq.n	800b452 <sniprintf+0x16>
 800b496:	9b02      	ldr	r3, [sp, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	e7d9      	b.n	800b452 <sniprintf+0x16>
 800b49e:	bf00      	nop
 800b4a0:	20000070 	.word	0x20000070

0800b4a4 <siprintf>:
 800b4a4:	b40e      	push	{r1, r2, r3}
 800b4a6:	b500      	push	{lr}
 800b4a8:	b09c      	sub	sp, #112	@ 0x70
 800b4aa:	ab1d      	add	r3, sp, #116	@ 0x74
 800b4ac:	9002      	str	r0, [sp, #8]
 800b4ae:	9006      	str	r0, [sp, #24]
 800b4b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4b4:	4809      	ldr	r0, [pc, #36]	@ (800b4dc <siprintf+0x38>)
 800b4b6:	9107      	str	r1, [sp, #28]
 800b4b8:	9104      	str	r1, [sp, #16]
 800b4ba:	4909      	ldr	r1, [pc, #36]	@ (800b4e0 <siprintf+0x3c>)
 800b4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c0:	9105      	str	r1, [sp, #20]
 800b4c2:	6800      	ldr	r0, [r0, #0]
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	a902      	add	r1, sp, #8
 800b4c8:	f000 f9a2 	bl	800b810 <_svfiprintf_r>
 800b4cc:	9b02      	ldr	r3, [sp, #8]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	b01c      	add	sp, #112	@ 0x70
 800b4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4d8:	b003      	add	sp, #12
 800b4da:	4770      	bx	lr
 800b4dc:	20000070 	.word	0x20000070
 800b4e0:	ffff0208 	.word	0xffff0208

0800b4e4 <memset>:
 800b4e4:	4402      	add	r2, r0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d100      	bne.n	800b4ee <memset+0xa>
 800b4ec:	4770      	bx	lr
 800b4ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b4f2:	e7f9      	b.n	800b4e8 <memset+0x4>

0800b4f4 <__errno>:
 800b4f4:	4b01      	ldr	r3, [pc, #4]	@ (800b4fc <__errno+0x8>)
 800b4f6:	6818      	ldr	r0, [r3, #0]
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	20000070 	.word	0x20000070

0800b500 <__libc_init_array>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	4d0d      	ldr	r5, [pc, #52]	@ (800b538 <__libc_init_array+0x38>)
 800b504:	4c0d      	ldr	r4, [pc, #52]	@ (800b53c <__libc_init_array+0x3c>)
 800b506:	1b64      	subs	r4, r4, r5
 800b508:	10a4      	asrs	r4, r4, #2
 800b50a:	2600      	movs	r6, #0
 800b50c:	42a6      	cmp	r6, r4
 800b50e:	d109      	bne.n	800b524 <__libc_init_array+0x24>
 800b510:	4d0b      	ldr	r5, [pc, #44]	@ (800b540 <__libc_init_array+0x40>)
 800b512:	4c0c      	ldr	r4, [pc, #48]	@ (800b544 <__libc_init_array+0x44>)
 800b514:	f000 fcbc 	bl	800be90 <_init>
 800b518:	1b64      	subs	r4, r4, r5
 800b51a:	10a4      	asrs	r4, r4, #2
 800b51c:	2600      	movs	r6, #0
 800b51e:	42a6      	cmp	r6, r4
 800b520:	d105      	bne.n	800b52e <__libc_init_array+0x2e>
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	f855 3b04 	ldr.w	r3, [r5], #4
 800b528:	4798      	blx	r3
 800b52a:	3601      	adds	r6, #1
 800b52c:	e7ee      	b.n	800b50c <__libc_init_array+0xc>
 800b52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b532:	4798      	blx	r3
 800b534:	3601      	adds	r6, #1
 800b536:	e7f2      	b.n	800b51e <__libc_init_array+0x1e>
 800b538:	0800c568 	.word	0x0800c568
 800b53c:	0800c568 	.word	0x0800c568
 800b540:	0800c568 	.word	0x0800c568
 800b544:	0800c56c 	.word	0x0800c56c

0800b548 <__retarget_lock_acquire_recursive>:
 800b548:	4770      	bx	lr

0800b54a <__retarget_lock_release_recursive>:
 800b54a:	4770      	bx	lr

0800b54c <memcpy>:
 800b54c:	440a      	add	r2, r1
 800b54e:	4291      	cmp	r1, r2
 800b550:	f100 33ff 	add.w	r3, r0, #4294967295
 800b554:	d100      	bne.n	800b558 <memcpy+0xc>
 800b556:	4770      	bx	lr
 800b558:	b510      	push	{r4, lr}
 800b55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b562:	4291      	cmp	r1, r2
 800b564:	d1f9      	bne.n	800b55a <memcpy+0xe>
 800b566:	bd10      	pop	{r4, pc}

0800b568 <_free_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4605      	mov	r5, r0
 800b56c:	2900      	cmp	r1, #0
 800b56e:	d041      	beq.n	800b5f4 <_free_r+0x8c>
 800b570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b574:	1f0c      	subs	r4, r1, #4
 800b576:	2b00      	cmp	r3, #0
 800b578:	bfb8      	it	lt
 800b57a:	18e4      	addlt	r4, r4, r3
 800b57c:	f000 f8e0 	bl	800b740 <__malloc_lock>
 800b580:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f8 <_free_r+0x90>)
 800b582:	6813      	ldr	r3, [r2, #0]
 800b584:	b933      	cbnz	r3, 800b594 <_free_r+0x2c>
 800b586:	6063      	str	r3, [r4, #4]
 800b588:	6014      	str	r4, [r2, #0]
 800b58a:	4628      	mov	r0, r5
 800b58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b590:	f000 b8dc 	b.w	800b74c <__malloc_unlock>
 800b594:	42a3      	cmp	r3, r4
 800b596:	d908      	bls.n	800b5aa <_free_r+0x42>
 800b598:	6820      	ldr	r0, [r4, #0]
 800b59a:	1821      	adds	r1, r4, r0
 800b59c:	428b      	cmp	r3, r1
 800b59e:	bf01      	itttt	eq
 800b5a0:	6819      	ldreq	r1, [r3, #0]
 800b5a2:	685b      	ldreq	r3, [r3, #4]
 800b5a4:	1809      	addeq	r1, r1, r0
 800b5a6:	6021      	streq	r1, [r4, #0]
 800b5a8:	e7ed      	b.n	800b586 <_free_r+0x1e>
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	b10b      	cbz	r3, 800b5b4 <_free_r+0x4c>
 800b5b0:	42a3      	cmp	r3, r4
 800b5b2:	d9fa      	bls.n	800b5aa <_free_r+0x42>
 800b5b4:	6811      	ldr	r1, [r2, #0]
 800b5b6:	1850      	adds	r0, r2, r1
 800b5b8:	42a0      	cmp	r0, r4
 800b5ba:	d10b      	bne.n	800b5d4 <_free_r+0x6c>
 800b5bc:	6820      	ldr	r0, [r4, #0]
 800b5be:	4401      	add	r1, r0
 800b5c0:	1850      	adds	r0, r2, r1
 800b5c2:	4283      	cmp	r3, r0
 800b5c4:	6011      	str	r1, [r2, #0]
 800b5c6:	d1e0      	bne.n	800b58a <_free_r+0x22>
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	6053      	str	r3, [r2, #4]
 800b5ce:	4408      	add	r0, r1
 800b5d0:	6010      	str	r0, [r2, #0]
 800b5d2:	e7da      	b.n	800b58a <_free_r+0x22>
 800b5d4:	d902      	bls.n	800b5dc <_free_r+0x74>
 800b5d6:	230c      	movs	r3, #12
 800b5d8:	602b      	str	r3, [r5, #0]
 800b5da:	e7d6      	b.n	800b58a <_free_r+0x22>
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	1821      	adds	r1, r4, r0
 800b5e0:	428b      	cmp	r3, r1
 800b5e2:	bf04      	itt	eq
 800b5e4:	6819      	ldreq	r1, [r3, #0]
 800b5e6:	685b      	ldreq	r3, [r3, #4]
 800b5e8:	6063      	str	r3, [r4, #4]
 800b5ea:	bf04      	itt	eq
 800b5ec:	1809      	addeq	r1, r1, r0
 800b5ee:	6021      	streq	r1, [r4, #0]
 800b5f0:	6054      	str	r4, [r2, #4]
 800b5f2:	e7ca      	b.n	800b58a <_free_r+0x22>
 800b5f4:	bd38      	pop	{r3, r4, r5, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20001088 	.word	0x20001088

0800b5fc <sbrk_aligned>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	4e0f      	ldr	r6, [pc, #60]	@ (800b63c <sbrk_aligned+0x40>)
 800b600:	460c      	mov	r4, r1
 800b602:	6831      	ldr	r1, [r6, #0]
 800b604:	4605      	mov	r5, r0
 800b606:	b911      	cbnz	r1, 800b60e <sbrk_aligned+0x12>
 800b608:	f000 fba6 	bl	800bd58 <_sbrk_r>
 800b60c:	6030      	str	r0, [r6, #0]
 800b60e:	4621      	mov	r1, r4
 800b610:	4628      	mov	r0, r5
 800b612:	f000 fba1 	bl	800bd58 <_sbrk_r>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d103      	bne.n	800b622 <sbrk_aligned+0x26>
 800b61a:	f04f 34ff 	mov.w	r4, #4294967295
 800b61e:	4620      	mov	r0, r4
 800b620:	bd70      	pop	{r4, r5, r6, pc}
 800b622:	1cc4      	adds	r4, r0, #3
 800b624:	f024 0403 	bic.w	r4, r4, #3
 800b628:	42a0      	cmp	r0, r4
 800b62a:	d0f8      	beq.n	800b61e <sbrk_aligned+0x22>
 800b62c:	1a21      	subs	r1, r4, r0
 800b62e:	4628      	mov	r0, r5
 800b630:	f000 fb92 	bl	800bd58 <_sbrk_r>
 800b634:	3001      	adds	r0, #1
 800b636:	d1f2      	bne.n	800b61e <sbrk_aligned+0x22>
 800b638:	e7ef      	b.n	800b61a <sbrk_aligned+0x1e>
 800b63a:	bf00      	nop
 800b63c:	20001084 	.word	0x20001084

0800b640 <_malloc_r>:
 800b640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b644:	1ccd      	adds	r5, r1, #3
 800b646:	f025 0503 	bic.w	r5, r5, #3
 800b64a:	3508      	adds	r5, #8
 800b64c:	2d0c      	cmp	r5, #12
 800b64e:	bf38      	it	cc
 800b650:	250c      	movcc	r5, #12
 800b652:	2d00      	cmp	r5, #0
 800b654:	4606      	mov	r6, r0
 800b656:	db01      	blt.n	800b65c <_malloc_r+0x1c>
 800b658:	42a9      	cmp	r1, r5
 800b65a:	d904      	bls.n	800b666 <_malloc_r+0x26>
 800b65c:	230c      	movs	r3, #12
 800b65e:	6033      	str	r3, [r6, #0]
 800b660:	2000      	movs	r0, #0
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b73c <_malloc_r+0xfc>
 800b66a:	f000 f869 	bl	800b740 <__malloc_lock>
 800b66e:	f8d8 3000 	ldr.w	r3, [r8]
 800b672:	461c      	mov	r4, r3
 800b674:	bb44      	cbnz	r4, 800b6c8 <_malloc_r+0x88>
 800b676:	4629      	mov	r1, r5
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff ffbf 	bl	800b5fc <sbrk_aligned>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	4604      	mov	r4, r0
 800b682:	d158      	bne.n	800b736 <_malloc_r+0xf6>
 800b684:	f8d8 4000 	ldr.w	r4, [r8]
 800b688:	4627      	mov	r7, r4
 800b68a:	2f00      	cmp	r7, #0
 800b68c:	d143      	bne.n	800b716 <_malloc_r+0xd6>
 800b68e:	2c00      	cmp	r4, #0
 800b690:	d04b      	beq.n	800b72a <_malloc_r+0xea>
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	4639      	mov	r1, r7
 800b696:	4630      	mov	r0, r6
 800b698:	eb04 0903 	add.w	r9, r4, r3
 800b69c:	f000 fb5c 	bl	800bd58 <_sbrk_r>
 800b6a0:	4581      	cmp	r9, r0
 800b6a2:	d142      	bne.n	800b72a <_malloc_r+0xea>
 800b6a4:	6821      	ldr	r1, [r4, #0]
 800b6a6:	1a6d      	subs	r5, r5, r1
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7ff ffa6 	bl	800b5fc <sbrk_aligned>
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d03a      	beq.n	800b72a <_malloc_r+0xea>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	442b      	add	r3, r5
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	bb62      	cbnz	r2, 800b71c <_malloc_r+0xdc>
 800b6c2:	f8c8 7000 	str.w	r7, [r8]
 800b6c6:	e00f      	b.n	800b6e8 <_malloc_r+0xa8>
 800b6c8:	6822      	ldr	r2, [r4, #0]
 800b6ca:	1b52      	subs	r2, r2, r5
 800b6cc:	d420      	bmi.n	800b710 <_malloc_r+0xd0>
 800b6ce:	2a0b      	cmp	r2, #11
 800b6d0:	d917      	bls.n	800b702 <_malloc_r+0xc2>
 800b6d2:	1961      	adds	r1, r4, r5
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	6025      	str	r5, [r4, #0]
 800b6d8:	bf18      	it	ne
 800b6da:	6059      	strne	r1, [r3, #4]
 800b6dc:	6863      	ldr	r3, [r4, #4]
 800b6de:	bf08      	it	eq
 800b6e0:	f8c8 1000 	streq.w	r1, [r8]
 800b6e4:	5162      	str	r2, [r4, r5]
 800b6e6:	604b      	str	r3, [r1, #4]
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f000 f82f 	bl	800b74c <__malloc_unlock>
 800b6ee:	f104 000b 	add.w	r0, r4, #11
 800b6f2:	1d23      	adds	r3, r4, #4
 800b6f4:	f020 0007 	bic.w	r0, r0, #7
 800b6f8:	1ac2      	subs	r2, r0, r3
 800b6fa:	bf1c      	itt	ne
 800b6fc:	1a1b      	subne	r3, r3, r0
 800b6fe:	50a3      	strne	r3, [r4, r2]
 800b700:	e7af      	b.n	800b662 <_malloc_r+0x22>
 800b702:	6862      	ldr	r2, [r4, #4]
 800b704:	42a3      	cmp	r3, r4
 800b706:	bf0c      	ite	eq
 800b708:	f8c8 2000 	streq.w	r2, [r8]
 800b70c:	605a      	strne	r2, [r3, #4]
 800b70e:	e7eb      	b.n	800b6e8 <_malloc_r+0xa8>
 800b710:	4623      	mov	r3, r4
 800b712:	6864      	ldr	r4, [r4, #4]
 800b714:	e7ae      	b.n	800b674 <_malloc_r+0x34>
 800b716:	463c      	mov	r4, r7
 800b718:	687f      	ldr	r7, [r7, #4]
 800b71a:	e7b6      	b.n	800b68a <_malloc_r+0x4a>
 800b71c:	461a      	mov	r2, r3
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	42a3      	cmp	r3, r4
 800b722:	d1fb      	bne.n	800b71c <_malloc_r+0xdc>
 800b724:	2300      	movs	r3, #0
 800b726:	6053      	str	r3, [r2, #4]
 800b728:	e7de      	b.n	800b6e8 <_malloc_r+0xa8>
 800b72a:	230c      	movs	r3, #12
 800b72c:	6033      	str	r3, [r6, #0]
 800b72e:	4630      	mov	r0, r6
 800b730:	f000 f80c 	bl	800b74c <__malloc_unlock>
 800b734:	e794      	b.n	800b660 <_malloc_r+0x20>
 800b736:	6005      	str	r5, [r0, #0]
 800b738:	e7d6      	b.n	800b6e8 <_malloc_r+0xa8>
 800b73a:	bf00      	nop
 800b73c:	20001088 	.word	0x20001088

0800b740 <__malloc_lock>:
 800b740:	4801      	ldr	r0, [pc, #4]	@ (800b748 <__malloc_lock+0x8>)
 800b742:	f7ff bf01 	b.w	800b548 <__retarget_lock_acquire_recursive>
 800b746:	bf00      	nop
 800b748:	20001080 	.word	0x20001080

0800b74c <__malloc_unlock>:
 800b74c:	4801      	ldr	r0, [pc, #4]	@ (800b754 <__malloc_unlock+0x8>)
 800b74e:	f7ff befc 	b.w	800b54a <__retarget_lock_release_recursive>
 800b752:	bf00      	nop
 800b754:	20001080 	.word	0x20001080

0800b758 <__ssputs_r>:
 800b758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b75c:	688e      	ldr	r6, [r1, #8]
 800b75e:	461f      	mov	r7, r3
 800b760:	42be      	cmp	r6, r7
 800b762:	680b      	ldr	r3, [r1, #0]
 800b764:	4682      	mov	sl, r0
 800b766:	460c      	mov	r4, r1
 800b768:	4690      	mov	r8, r2
 800b76a:	d82d      	bhi.n	800b7c8 <__ssputs_r+0x70>
 800b76c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b770:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b774:	d026      	beq.n	800b7c4 <__ssputs_r+0x6c>
 800b776:	6965      	ldr	r5, [r4, #20]
 800b778:	6909      	ldr	r1, [r1, #16]
 800b77a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b77e:	eba3 0901 	sub.w	r9, r3, r1
 800b782:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b786:	1c7b      	adds	r3, r7, #1
 800b788:	444b      	add	r3, r9
 800b78a:	106d      	asrs	r5, r5, #1
 800b78c:	429d      	cmp	r5, r3
 800b78e:	bf38      	it	cc
 800b790:	461d      	movcc	r5, r3
 800b792:	0553      	lsls	r3, r2, #21
 800b794:	d527      	bpl.n	800b7e6 <__ssputs_r+0x8e>
 800b796:	4629      	mov	r1, r5
 800b798:	f7ff ff52 	bl	800b640 <_malloc_r>
 800b79c:	4606      	mov	r6, r0
 800b79e:	b360      	cbz	r0, 800b7fa <__ssputs_r+0xa2>
 800b7a0:	6921      	ldr	r1, [r4, #16]
 800b7a2:	464a      	mov	r2, r9
 800b7a4:	f7ff fed2 	bl	800b54c <memcpy>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	6126      	str	r6, [r4, #16]
 800b7b6:	6165      	str	r5, [r4, #20]
 800b7b8:	444e      	add	r6, r9
 800b7ba:	eba5 0509 	sub.w	r5, r5, r9
 800b7be:	6026      	str	r6, [r4, #0]
 800b7c0:	60a5      	str	r5, [r4, #8]
 800b7c2:	463e      	mov	r6, r7
 800b7c4:	42be      	cmp	r6, r7
 800b7c6:	d900      	bls.n	800b7ca <__ssputs_r+0x72>
 800b7c8:	463e      	mov	r6, r7
 800b7ca:	6820      	ldr	r0, [r4, #0]
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	4641      	mov	r1, r8
 800b7d0:	f000 faa8 	bl	800bd24 <memmove>
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	1b9b      	subs	r3, r3, r6
 800b7d8:	60a3      	str	r3, [r4, #8]
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	4433      	add	r3, r6
 800b7de:	6023      	str	r3, [r4, #0]
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e6:	462a      	mov	r2, r5
 800b7e8:	f000 fac6 	bl	800bd78 <_realloc_r>
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d1e0      	bne.n	800b7b4 <__ssputs_r+0x5c>
 800b7f2:	6921      	ldr	r1, [r4, #16]
 800b7f4:	4650      	mov	r0, sl
 800b7f6:	f7ff feb7 	bl	800b568 <_free_r>
 800b7fa:	230c      	movs	r3, #12
 800b7fc:	f8ca 3000 	str.w	r3, [sl]
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b806:	81a3      	strh	r3, [r4, #12]
 800b808:	f04f 30ff 	mov.w	r0, #4294967295
 800b80c:	e7e9      	b.n	800b7e2 <__ssputs_r+0x8a>
	...

0800b810 <_svfiprintf_r>:
 800b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	4698      	mov	r8, r3
 800b816:	898b      	ldrh	r3, [r1, #12]
 800b818:	061b      	lsls	r3, r3, #24
 800b81a:	b09d      	sub	sp, #116	@ 0x74
 800b81c:	4607      	mov	r7, r0
 800b81e:	460d      	mov	r5, r1
 800b820:	4614      	mov	r4, r2
 800b822:	d510      	bpl.n	800b846 <_svfiprintf_r+0x36>
 800b824:	690b      	ldr	r3, [r1, #16]
 800b826:	b973      	cbnz	r3, 800b846 <_svfiprintf_r+0x36>
 800b828:	2140      	movs	r1, #64	@ 0x40
 800b82a:	f7ff ff09 	bl	800b640 <_malloc_r>
 800b82e:	6028      	str	r0, [r5, #0]
 800b830:	6128      	str	r0, [r5, #16]
 800b832:	b930      	cbnz	r0, 800b842 <_svfiprintf_r+0x32>
 800b834:	230c      	movs	r3, #12
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	f04f 30ff 	mov.w	r0, #4294967295
 800b83c:	b01d      	add	sp, #116	@ 0x74
 800b83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b842:	2340      	movs	r3, #64	@ 0x40
 800b844:	616b      	str	r3, [r5, #20]
 800b846:	2300      	movs	r3, #0
 800b848:	9309      	str	r3, [sp, #36]	@ 0x24
 800b84a:	2320      	movs	r3, #32
 800b84c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b850:	f8cd 800c 	str.w	r8, [sp, #12]
 800b854:	2330      	movs	r3, #48	@ 0x30
 800b856:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9f4 <_svfiprintf_r+0x1e4>
 800b85a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b85e:	f04f 0901 	mov.w	r9, #1
 800b862:	4623      	mov	r3, r4
 800b864:	469a      	mov	sl, r3
 800b866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86a:	b10a      	cbz	r2, 800b870 <_svfiprintf_r+0x60>
 800b86c:	2a25      	cmp	r2, #37	@ 0x25
 800b86e:	d1f9      	bne.n	800b864 <_svfiprintf_r+0x54>
 800b870:	ebba 0b04 	subs.w	fp, sl, r4
 800b874:	d00b      	beq.n	800b88e <_svfiprintf_r+0x7e>
 800b876:	465b      	mov	r3, fp
 800b878:	4622      	mov	r2, r4
 800b87a:	4629      	mov	r1, r5
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff ff6b 	bl	800b758 <__ssputs_r>
 800b882:	3001      	adds	r0, #1
 800b884:	f000 80a7 	beq.w	800b9d6 <_svfiprintf_r+0x1c6>
 800b888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b88a:	445a      	add	r2, fp
 800b88c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b88e:	f89a 3000 	ldrb.w	r3, [sl]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f000 809f 	beq.w	800b9d6 <_svfiprintf_r+0x1c6>
 800b898:	2300      	movs	r3, #0
 800b89a:	f04f 32ff 	mov.w	r2, #4294967295
 800b89e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8a2:	f10a 0a01 	add.w	sl, sl, #1
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	9307      	str	r3, [sp, #28]
 800b8aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8b0:	4654      	mov	r4, sl
 800b8b2:	2205      	movs	r2, #5
 800b8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b8:	484e      	ldr	r0, [pc, #312]	@ (800b9f4 <_svfiprintf_r+0x1e4>)
 800b8ba:	f7f4 fcb1 	bl	8000220 <memchr>
 800b8be:	9a04      	ldr	r2, [sp, #16]
 800b8c0:	b9d8      	cbnz	r0, 800b8fa <_svfiprintf_r+0xea>
 800b8c2:	06d0      	lsls	r0, r2, #27
 800b8c4:	bf44      	itt	mi
 800b8c6:	2320      	movmi	r3, #32
 800b8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8cc:	0711      	lsls	r1, r2, #28
 800b8ce:	bf44      	itt	mi
 800b8d0:	232b      	movmi	r3, #43	@ 0x2b
 800b8d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8dc:	d015      	beq.n	800b90a <_svfiprintf_r+0xfa>
 800b8de:	9a07      	ldr	r2, [sp, #28]
 800b8e0:	4654      	mov	r4, sl
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	f04f 0c0a 	mov.w	ip, #10
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ee:	3b30      	subs	r3, #48	@ 0x30
 800b8f0:	2b09      	cmp	r3, #9
 800b8f2:	d94b      	bls.n	800b98c <_svfiprintf_r+0x17c>
 800b8f4:	b1b0      	cbz	r0, 800b924 <_svfiprintf_r+0x114>
 800b8f6:	9207      	str	r2, [sp, #28]
 800b8f8:	e014      	b.n	800b924 <_svfiprintf_r+0x114>
 800b8fa:	eba0 0308 	sub.w	r3, r0, r8
 800b8fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b902:	4313      	orrs	r3, r2
 800b904:	9304      	str	r3, [sp, #16]
 800b906:	46a2      	mov	sl, r4
 800b908:	e7d2      	b.n	800b8b0 <_svfiprintf_r+0xa0>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	1d19      	adds	r1, r3, #4
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	9103      	str	r1, [sp, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	bfbb      	ittet	lt
 800b916:	425b      	neglt	r3, r3
 800b918:	f042 0202 	orrlt.w	r2, r2, #2
 800b91c:	9307      	strge	r3, [sp, #28]
 800b91e:	9307      	strlt	r3, [sp, #28]
 800b920:	bfb8      	it	lt
 800b922:	9204      	strlt	r2, [sp, #16]
 800b924:	7823      	ldrb	r3, [r4, #0]
 800b926:	2b2e      	cmp	r3, #46	@ 0x2e
 800b928:	d10a      	bne.n	800b940 <_svfiprintf_r+0x130>
 800b92a:	7863      	ldrb	r3, [r4, #1]
 800b92c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b92e:	d132      	bne.n	800b996 <_svfiprintf_r+0x186>
 800b930:	9b03      	ldr	r3, [sp, #12]
 800b932:	1d1a      	adds	r2, r3, #4
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	9203      	str	r2, [sp, #12]
 800b938:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b93c:	3402      	adds	r4, #2
 800b93e:	9305      	str	r3, [sp, #20]
 800b940:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba04 <_svfiprintf_r+0x1f4>
 800b944:	7821      	ldrb	r1, [r4, #0]
 800b946:	2203      	movs	r2, #3
 800b948:	4650      	mov	r0, sl
 800b94a:	f7f4 fc69 	bl	8000220 <memchr>
 800b94e:	b138      	cbz	r0, 800b960 <_svfiprintf_r+0x150>
 800b950:	9b04      	ldr	r3, [sp, #16]
 800b952:	eba0 000a 	sub.w	r0, r0, sl
 800b956:	2240      	movs	r2, #64	@ 0x40
 800b958:	4082      	lsls	r2, r0
 800b95a:	4313      	orrs	r3, r2
 800b95c:	3401      	adds	r4, #1
 800b95e:	9304      	str	r3, [sp, #16]
 800b960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b964:	4824      	ldr	r0, [pc, #144]	@ (800b9f8 <_svfiprintf_r+0x1e8>)
 800b966:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b96a:	2206      	movs	r2, #6
 800b96c:	f7f4 fc58 	bl	8000220 <memchr>
 800b970:	2800      	cmp	r0, #0
 800b972:	d036      	beq.n	800b9e2 <_svfiprintf_r+0x1d2>
 800b974:	4b21      	ldr	r3, [pc, #132]	@ (800b9fc <_svfiprintf_r+0x1ec>)
 800b976:	bb1b      	cbnz	r3, 800b9c0 <_svfiprintf_r+0x1b0>
 800b978:	9b03      	ldr	r3, [sp, #12]
 800b97a:	3307      	adds	r3, #7
 800b97c:	f023 0307 	bic.w	r3, r3, #7
 800b980:	3308      	adds	r3, #8
 800b982:	9303      	str	r3, [sp, #12]
 800b984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b986:	4433      	add	r3, r6
 800b988:	9309      	str	r3, [sp, #36]	@ 0x24
 800b98a:	e76a      	b.n	800b862 <_svfiprintf_r+0x52>
 800b98c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b990:	460c      	mov	r4, r1
 800b992:	2001      	movs	r0, #1
 800b994:	e7a8      	b.n	800b8e8 <_svfiprintf_r+0xd8>
 800b996:	2300      	movs	r3, #0
 800b998:	3401      	adds	r4, #1
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	4619      	mov	r1, r3
 800b99e:	f04f 0c0a 	mov.w	ip, #10
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9a8:	3a30      	subs	r2, #48	@ 0x30
 800b9aa:	2a09      	cmp	r2, #9
 800b9ac:	d903      	bls.n	800b9b6 <_svfiprintf_r+0x1a6>
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0c6      	beq.n	800b940 <_svfiprintf_r+0x130>
 800b9b2:	9105      	str	r1, [sp, #20]
 800b9b4:	e7c4      	b.n	800b940 <_svfiprintf_r+0x130>
 800b9b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e7f0      	b.n	800b9a2 <_svfiprintf_r+0x192>
 800b9c0:	ab03      	add	r3, sp, #12
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	462a      	mov	r2, r5
 800b9c6:	4b0e      	ldr	r3, [pc, #56]	@ (800ba00 <_svfiprintf_r+0x1f0>)
 800b9c8:	a904      	add	r1, sp, #16
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	f3af 8000 	nop.w
 800b9d0:	1c42      	adds	r2, r0, #1
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	d1d6      	bne.n	800b984 <_svfiprintf_r+0x174>
 800b9d6:	89ab      	ldrh	r3, [r5, #12]
 800b9d8:	065b      	lsls	r3, r3, #25
 800b9da:	f53f af2d 	bmi.w	800b838 <_svfiprintf_r+0x28>
 800b9de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9e0:	e72c      	b.n	800b83c <_svfiprintf_r+0x2c>
 800b9e2:	ab03      	add	r3, sp, #12
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	462a      	mov	r2, r5
 800b9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ba00 <_svfiprintf_r+0x1f0>)
 800b9ea:	a904      	add	r1, sp, #16
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	f000 f879 	bl	800bae4 <_printf_i>
 800b9f2:	e7ed      	b.n	800b9d0 <_svfiprintf_r+0x1c0>
 800b9f4:	0800c52c 	.word	0x0800c52c
 800b9f8:	0800c536 	.word	0x0800c536
 800b9fc:	00000000 	.word	0x00000000
 800ba00:	0800b759 	.word	0x0800b759
 800ba04:	0800c532 	.word	0x0800c532

0800ba08 <_printf_common>:
 800ba08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0c:	4616      	mov	r6, r2
 800ba0e:	4698      	mov	r8, r3
 800ba10:	688a      	ldr	r2, [r1, #8]
 800ba12:	690b      	ldr	r3, [r1, #16]
 800ba14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	bfb8      	it	lt
 800ba1c:	4613      	movlt	r3, r2
 800ba1e:	6033      	str	r3, [r6, #0]
 800ba20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba24:	4607      	mov	r7, r0
 800ba26:	460c      	mov	r4, r1
 800ba28:	b10a      	cbz	r2, 800ba2e <_printf_common+0x26>
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	6033      	str	r3, [r6, #0]
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	0699      	lsls	r1, r3, #26
 800ba32:	bf42      	ittt	mi
 800ba34:	6833      	ldrmi	r3, [r6, #0]
 800ba36:	3302      	addmi	r3, #2
 800ba38:	6033      	strmi	r3, [r6, #0]
 800ba3a:	6825      	ldr	r5, [r4, #0]
 800ba3c:	f015 0506 	ands.w	r5, r5, #6
 800ba40:	d106      	bne.n	800ba50 <_printf_common+0x48>
 800ba42:	f104 0a19 	add.w	sl, r4, #25
 800ba46:	68e3      	ldr	r3, [r4, #12]
 800ba48:	6832      	ldr	r2, [r6, #0]
 800ba4a:	1a9b      	subs	r3, r3, r2
 800ba4c:	42ab      	cmp	r3, r5
 800ba4e:	dc26      	bgt.n	800ba9e <_printf_common+0x96>
 800ba50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba54:	6822      	ldr	r2, [r4, #0]
 800ba56:	3b00      	subs	r3, #0
 800ba58:	bf18      	it	ne
 800ba5a:	2301      	movne	r3, #1
 800ba5c:	0692      	lsls	r2, r2, #26
 800ba5e:	d42b      	bmi.n	800bab8 <_printf_common+0xb0>
 800ba60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba64:	4641      	mov	r1, r8
 800ba66:	4638      	mov	r0, r7
 800ba68:	47c8      	blx	r9
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	d01e      	beq.n	800baac <_printf_common+0xa4>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	6922      	ldr	r2, [r4, #16]
 800ba72:	f003 0306 	and.w	r3, r3, #6
 800ba76:	2b04      	cmp	r3, #4
 800ba78:	bf02      	ittt	eq
 800ba7a:	68e5      	ldreq	r5, [r4, #12]
 800ba7c:	6833      	ldreq	r3, [r6, #0]
 800ba7e:	1aed      	subeq	r5, r5, r3
 800ba80:	68a3      	ldr	r3, [r4, #8]
 800ba82:	bf0c      	ite	eq
 800ba84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba88:	2500      	movne	r5, #0
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	bfc4      	itt	gt
 800ba8e:	1a9b      	subgt	r3, r3, r2
 800ba90:	18ed      	addgt	r5, r5, r3
 800ba92:	2600      	movs	r6, #0
 800ba94:	341a      	adds	r4, #26
 800ba96:	42b5      	cmp	r5, r6
 800ba98:	d11a      	bne.n	800bad0 <_printf_common+0xc8>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	e008      	b.n	800bab0 <_printf_common+0xa8>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	4652      	mov	r2, sl
 800baa2:	4641      	mov	r1, r8
 800baa4:	4638      	mov	r0, r7
 800baa6:	47c8      	blx	r9
 800baa8:	3001      	adds	r0, #1
 800baaa:	d103      	bne.n	800bab4 <_printf_common+0xac>
 800baac:	f04f 30ff 	mov.w	r0, #4294967295
 800bab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab4:	3501      	adds	r5, #1
 800bab6:	e7c6      	b.n	800ba46 <_printf_common+0x3e>
 800bab8:	18e1      	adds	r1, r4, r3
 800baba:	1c5a      	adds	r2, r3, #1
 800babc:	2030      	movs	r0, #48	@ 0x30
 800babe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bac2:	4422      	add	r2, r4
 800bac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bacc:	3302      	adds	r3, #2
 800bace:	e7c7      	b.n	800ba60 <_printf_common+0x58>
 800bad0:	2301      	movs	r3, #1
 800bad2:	4622      	mov	r2, r4
 800bad4:	4641      	mov	r1, r8
 800bad6:	4638      	mov	r0, r7
 800bad8:	47c8      	blx	r9
 800bada:	3001      	adds	r0, #1
 800badc:	d0e6      	beq.n	800baac <_printf_common+0xa4>
 800bade:	3601      	adds	r6, #1
 800bae0:	e7d9      	b.n	800ba96 <_printf_common+0x8e>
	...

0800bae4 <_printf_i>:
 800bae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bae8:	7e0f      	ldrb	r7, [r1, #24]
 800baea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800baec:	2f78      	cmp	r7, #120	@ 0x78
 800baee:	4691      	mov	r9, r2
 800baf0:	4680      	mov	r8, r0
 800baf2:	460c      	mov	r4, r1
 800baf4:	469a      	mov	sl, r3
 800baf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bafa:	d807      	bhi.n	800bb0c <_printf_i+0x28>
 800bafc:	2f62      	cmp	r7, #98	@ 0x62
 800bafe:	d80a      	bhi.n	800bb16 <_printf_i+0x32>
 800bb00:	2f00      	cmp	r7, #0
 800bb02:	f000 80d2 	beq.w	800bcaa <_printf_i+0x1c6>
 800bb06:	2f58      	cmp	r7, #88	@ 0x58
 800bb08:	f000 80b9 	beq.w	800bc7e <_printf_i+0x19a>
 800bb0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb14:	e03a      	b.n	800bb8c <_printf_i+0xa8>
 800bb16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb1a:	2b15      	cmp	r3, #21
 800bb1c:	d8f6      	bhi.n	800bb0c <_printf_i+0x28>
 800bb1e:	a101      	add	r1, pc, #4	@ (adr r1, 800bb24 <_printf_i+0x40>)
 800bb20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb24:	0800bb7d 	.word	0x0800bb7d
 800bb28:	0800bb91 	.word	0x0800bb91
 800bb2c:	0800bb0d 	.word	0x0800bb0d
 800bb30:	0800bb0d 	.word	0x0800bb0d
 800bb34:	0800bb0d 	.word	0x0800bb0d
 800bb38:	0800bb0d 	.word	0x0800bb0d
 800bb3c:	0800bb91 	.word	0x0800bb91
 800bb40:	0800bb0d 	.word	0x0800bb0d
 800bb44:	0800bb0d 	.word	0x0800bb0d
 800bb48:	0800bb0d 	.word	0x0800bb0d
 800bb4c:	0800bb0d 	.word	0x0800bb0d
 800bb50:	0800bc91 	.word	0x0800bc91
 800bb54:	0800bbbb 	.word	0x0800bbbb
 800bb58:	0800bc4b 	.word	0x0800bc4b
 800bb5c:	0800bb0d 	.word	0x0800bb0d
 800bb60:	0800bb0d 	.word	0x0800bb0d
 800bb64:	0800bcb3 	.word	0x0800bcb3
 800bb68:	0800bb0d 	.word	0x0800bb0d
 800bb6c:	0800bbbb 	.word	0x0800bbbb
 800bb70:	0800bb0d 	.word	0x0800bb0d
 800bb74:	0800bb0d 	.word	0x0800bb0d
 800bb78:	0800bc53 	.word	0x0800bc53
 800bb7c:	6833      	ldr	r3, [r6, #0]
 800bb7e:	1d1a      	adds	r2, r3, #4
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6032      	str	r2, [r6, #0]
 800bb84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e09d      	b.n	800bccc <_printf_i+0x1e8>
 800bb90:	6833      	ldr	r3, [r6, #0]
 800bb92:	6820      	ldr	r0, [r4, #0]
 800bb94:	1d19      	adds	r1, r3, #4
 800bb96:	6031      	str	r1, [r6, #0]
 800bb98:	0606      	lsls	r6, r0, #24
 800bb9a:	d501      	bpl.n	800bba0 <_printf_i+0xbc>
 800bb9c:	681d      	ldr	r5, [r3, #0]
 800bb9e:	e003      	b.n	800bba8 <_printf_i+0xc4>
 800bba0:	0645      	lsls	r5, r0, #25
 800bba2:	d5fb      	bpl.n	800bb9c <_printf_i+0xb8>
 800bba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	da03      	bge.n	800bbb4 <_printf_i+0xd0>
 800bbac:	232d      	movs	r3, #45	@ 0x2d
 800bbae:	426d      	negs	r5, r5
 800bbb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbb4:	4859      	ldr	r0, [pc, #356]	@ (800bd1c <_printf_i+0x238>)
 800bbb6:	230a      	movs	r3, #10
 800bbb8:	e011      	b.n	800bbde <_printf_i+0xfa>
 800bbba:	6821      	ldr	r1, [r4, #0]
 800bbbc:	6833      	ldr	r3, [r6, #0]
 800bbbe:	0608      	lsls	r0, r1, #24
 800bbc0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbc4:	d402      	bmi.n	800bbcc <_printf_i+0xe8>
 800bbc6:	0649      	lsls	r1, r1, #25
 800bbc8:	bf48      	it	mi
 800bbca:	b2ad      	uxthmi	r5, r5
 800bbcc:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbce:	4853      	ldr	r0, [pc, #332]	@ (800bd1c <_printf_i+0x238>)
 800bbd0:	6033      	str	r3, [r6, #0]
 800bbd2:	bf14      	ite	ne
 800bbd4:	230a      	movne	r3, #10
 800bbd6:	2308      	moveq	r3, #8
 800bbd8:	2100      	movs	r1, #0
 800bbda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbde:	6866      	ldr	r6, [r4, #4]
 800bbe0:	60a6      	str	r6, [r4, #8]
 800bbe2:	2e00      	cmp	r6, #0
 800bbe4:	bfa2      	ittt	ge
 800bbe6:	6821      	ldrge	r1, [r4, #0]
 800bbe8:	f021 0104 	bicge.w	r1, r1, #4
 800bbec:	6021      	strge	r1, [r4, #0]
 800bbee:	b90d      	cbnz	r5, 800bbf4 <_printf_i+0x110>
 800bbf0:	2e00      	cmp	r6, #0
 800bbf2:	d04b      	beq.n	800bc8c <_printf_i+0x1a8>
 800bbf4:	4616      	mov	r6, r2
 800bbf6:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbfa:	fb03 5711 	mls	r7, r3, r1, r5
 800bbfe:	5dc7      	ldrb	r7, [r0, r7]
 800bc00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc04:	462f      	mov	r7, r5
 800bc06:	42bb      	cmp	r3, r7
 800bc08:	460d      	mov	r5, r1
 800bc0a:	d9f4      	bls.n	800bbf6 <_printf_i+0x112>
 800bc0c:	2b08      	cmp	r3, #8
 800bc0e:	d10b      	bne.n	800bc28 <_printf_i+0x144>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	07df      	lsls	r7, r3, #31
 800bc14:	d508      	bpl.n	800bc28 <_printf_i+0x144>
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	6861      	ldr	r1, [r4, #4]
 800bc1a:	4299      	cmp	r1, r3
 800bc1c:	bfde      	ittt	le
 800bc1e:	2330      	movle	r3, #48	@ 0x30
 800bc20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc24:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc28:	1b92      	subs	r2, r2, r6
 800bc2a:	6122      	str	r2, [r4, #16]
 800bc2c:	f8cd a000 	str.w	sl, [sp]
 800bc30:	464b      	mov	r3, r9
 800bc32:	aa03      	add	r2, sp, #12
 800bc34:	4621      	mov	r1, r4
 800bc36:	4640      	mov	r0, r8
 800bc38:	f7ff fee6 	bl	800ba08 <_printf_common>
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	d14a      	bne.n	800bcd6 <_printf_i+0x1f2>
 800bc40:	f04f 30ff 	mov.w	r0, #4294967295
 800bc44:	b004      	add	sp, #16
 800bc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	f043 0320 	orr.w	r3, r3, #32
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	4833      	ldr	r0, [pc, #204]	@ (800bd20 <_printf_i+0x23c>)
 800bc54:	2778      	movs	r7, #120	@ 0x78
 800bc56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc5a:	6823      	ldr	r3, [r4, #0]
 800bc5c:	6831      	ldr	r1, [r6, #0]
 800bc5e:	061f      	lsls	r7, r3, #24
 800bc60:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc64:	d402      	bmi.n	800bc6c <_printf_i+0x188>
 800bc66:	065f      	lsls	r7, r3, #25
 800bc68:	bf48      	it	mi
 800bc6a:	b2ad      	uxthmi	r5, r5
 800bc6c:	6031      	str	r1, [r6, #0]
 800bc6e:	07d9      	lsls	r1, r3, #31
 800bc70:	bf44      	itt	mi
 800bc72:	f043 0320 	orrmi.w	r3, r3, #32
 800bc76:	6023      	strmi	r3, [r4, #0]
 800bc78:	b11d      	cbz	r5, 800bc82 <_printf_i+0x19e>
 800bc7a:	2310      	movs	r3, #16
 800bc7c:	e7ac      	b.n	800bbd8 <_printf_i+0xf4>
 800bc7e:	4827      	ldr	r0, [pc, #156]	@ (800bd1c <_printf_i+0x238>)
 800bc80:	e7e9      	b.n	800bc56 <_printf_i+0x172>
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	f023 0320 	bic.w	r3, r3, #32
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	e7f6      	b.n	800bc7a <_printf_i+0x196>
 800bc8c:	4616      	mov	r6, r2
 800bc8e:	e7bd      	b.n	800bc0c <_printf_i+0x128>
 800bc90:	6833      	ldr	r3, [r6, #0]
 800bc92:	6825      	ldr	r5, [r4, #0]
 800bc94:	6961      	ldr	r1, [r4, #20]
 800bc96:	1d18      	adds	r0, r3, #4
 800bc98:	6030      	str	r0, [r6, #0]
 800bc9a:	062e      	lsls	r6, r5, #24
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	d501      	bpl.n	800bca4 <_printf_i+0x1c0>
 800bca0:	6019      	str	r1, [r3, #0]
 800bca2:	e002      	b.n	800bcaa <_printf_i+0x1c6>
 800bca4:	0668      	lsls	r0, r5, #25
 800bca6:	d5fb      	bpl.n	800bca0 <_printf_i+0x1bc>
 800bca8:	8019      	strh	r1, [r3, #0]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6123      	str	r3, [r4, #16]
 800bcae:	4616      	mov	r6, r2
 800bcb0:	e7bc      	b.n	800bc2c <_printf_i+0x148>
 800bcb2:	6833      	ldr	r3, [r6, #0]
 800bcb4:	1d1a      	adds	r2, r3, #4
 800bcb6:	6032      	str	r2, [r6, #0]
 800bcb8:	681e      	ldr	r6, [r3, #0]
 800bcba:	6862      	ldr	r2, [r4, #4]
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7f4 faae 	bl	8000220 <memchr>
 800bcc4:	b108      	cbz	r0, 800bcca <_printf_i+0x1e6>
 800bcc6:	1b80      	subs	r0, r0, r6
 800bcc8:	6060      	str	r0, [r4, #4]
 800bcca:	6863      	ldr	r3, [r4, #4]
 800bccc:	6123      	str	r3, [r4, #16]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcd4:	e7aa      	b.n	800bc2c <_printf_i+0x148>
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	4632      	mov	r2, r6
 800bcda:	4649      	mov	r1, r9
 800bcdc:	4640      	mov	r0, r8
 800bcde:	47d0      	blx	sl
 800bce0:	3001      	adds	r0, #1
 800bce2:	d0ad      	beq.n	800bc40 <_printf_i+0x15c>
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	079b      	lsls	r3, r3, #30
 800bce8:	d413      	bmi.n	800bd12 <_printf_i+0x22e>
 800bcea:	68e0      	ldr	r0, [r4, #12]
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	4298      	cmp	r0, r3
 800bcf0:	bfb8      	it	lt
 800bcf2:	4618      	movlt	r0, r3
 800bcf4:	e7a6      	b.n	800bc44 <_printf_i+0x160>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4632      	mov	r2, r6
 800bcfa:	4649      	mov	r1, r9
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	47d0      	blx	sl
 800bd00:	3001      	adds	r0, #1
 800bd02:	d09d      	beq.n	800bc40 <_printf_i+0x15c>
 800bd04:	3501      	adds	r5, #1
 800bd06:	68e3      	ldr	r3, [r4, #12]
 800bd08:	9903      	ldr	r1, [sp, #12]
 800bd0a:	1a5b      	subs	r3, r3, r1
 800bd0c:	42ab      	cmp	r3, r5
 800bd0e:	dcf2      	bgt.n	800bcf6 <_printf_i+0x212>
 800bd10:	e7eb      	b.n	800bcea <_printf_i+0x206>
 800bd12:	2500      	movs	r5, #0
 800bd14:	f104 0619 	add.w	r6, r4, #25
 800bd18:	e7f5      	b.n	800bd06 <_printf_i+0x222>
 800bd1a:	bf00      	nop
 800bd1c:	0800c53d 	.word	0x0800c53d
 800bd20:	0800c54e 	.word	0x0800c54e

0800bd24 <memmove>:
 800bd24:	4288      	cmp	r0, r1
 800bd26:	b510      	push	{r4, lr}
 800bd28:	eb01 0402 	add.w	r4, r1, r2
 800bd2c:	d902      	bls.n	800bd34 <memmove+0x10>
 800bd2e:	4284      	cmp	r4, r0
 800bd30:	4623      	mov	r3, r4
 800bd32:	d807      	bhi.n	800bd44 <memmove+0x20>
 800bd34:	1e43      	subs	r3, r0, #1
 800bd36:	42a1      	cmp	r1, r4
 800bd38:	d008      	beq.n	800bd4c <memmove+0x28>
 800bd3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd42:	e7f8      	b.n	800bd36 <memmove+0x12>
 800bd44:	4402      	add	r2, r0
 800bd46:	4601      	mov	r1, r0
 800bd48:	428a      	cmp	r2, r1
 800bd4a:	d100      	bne.n	800bd4e <memmove+0x2a>
 800bd4c:	bd10      	pop	{r4, pc}
 800bd4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd56:	e7f7      	b.n	800bd48 <memmove+0x24>

0800bd58 <_sbrk_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4d06      	ldr	r5, [pc, #24]	@ (800bd74 <_sbrk_r+0x1c>)
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	4604      	mov	r4, r0
 800bd60:	4608      	mov	r0, r1
 800bd62:	602b      	str	r3, [r5, #0]
 800bd64:	f7f7 fe7e 	bl	8003a64 <_sbrk>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d102      	bne.n	800bd72 <_sbrk_r+0x1a>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <_sbrk_r+0x1a>
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	2000107c 	.word	0x2000107c

0800bd78 <_realloc_r>:
 800bd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	4615      	mov	r5, r2
 800bd80:	460c      	mov	r4, r1
 800bd82:	b921      	cbnz	r1, 800bd8e <_realloc_r+0x16>
 800bd84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd88:	4611      	mov	r1, r2
 800bd8a:	f7ff bc59 	b.w	800b640 <_malloc_r>
 800bd8e:	b92a      	cbnz	r2, 800bd9c <_realloc_r+0x24>
 800bd90:	f7ff fbea 	bl	800b568 <_free_r>
 800bd94:	2400      	movs	r4, #0
 800bd96:	4620      	mov	r0, r4
 800bd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9c:	f000 f81a 	bl	800bdd4 <_malloc_usable_size_r>
 800bda0:	4285      	cmp	r5, r0
 800bda2:	4606      	mov	r6, r0
 800bda4:	d802      	bhi.n	800bdac <_realloc_r+0x34>
 800bda6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bdaa:	d8f4      	bhi.n	800bd96 <_realloc_r+0x1e>
 800bdac:	4629      	mov	r1, r5
 800bdae:	4640      	mov	r0, r8
 800bdb0:	f7ff fc46 	bl	800b640 <_malloc_r>
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d0ec      	beq.n	800bd94 <_realloc_r+0x1c>
 800bdba:	42b5      	cmp	r5, r6
 800bdbc:	462a      	mov	r2, r5
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	bf28      	it	cs
 800bdc2:	4632      	movcs	r2, r6
 800bdc4:	f7ff fbc2 	bl	800b54c <memcpy>
 800bdc8:	4621      	mov	r1, r4
 800bdca:	4640      	mov	r0, r8
 800bdcc:	f7ff fbcc 	bl	800b568 <_free_r>
 800bdd0:	463c      	mov	r4, r7
 800bdd2:	e7e0      	b.n	800bd96 <_realloc_r+0x1e>

0800bdd4 <_malloc_usable_size_r>:
 800bdd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd8:	1f18      	subs	r0, r3, #4
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	bfbc      	itt	lt
 800bdde:	580b      	ldrlt	r3, [r1, r0]
 800bde0:	18c0      	addlt	r0, r0, r3
 800bde2:	4770      	bx	lr

0800bde4 <fmaxf>:
 800bde4:	b508      	push	{r3, lr}
 800bde6:	ed2d 8b02 	vpush	{d8}
 800bdea:	eeb0 8a40 	vmov.f32	s16, s0
 800bdee:	eef0 8a60 	vmov.f32	s17, s1
 800bdf2:	f000 f831 	bl	800be58 <__fpclassifyf>
 800bdf6:	b930      	cbnz	r0, 800be06 <fmaxf+0x22>
 800bdf8:	eeb0 8a68 	vmov.f32	s16, s17
 800bdfc:	eeb0 0a48 	vmov.f32	s0, s16
 800be00:	ecbd 8b02 	vpop	{d8}
 800be04:	bd08      	pop	{r3, pc}
 800be06:	eeb0 0a68 	vmov.f32	s0, s17
 800be0a:	f000 f825 	bl	800be58 <__fpclassifyf>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d0f4      	beq.n	800bdfc <fmaxf+0x18>
 800be12:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800be16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be1a:	dded      	ble.n	800bdf8 <fmaxf+0x14>
 800be1c:	e7ee      	b.n	800bdfc <fmaxf+0x18>

0800be1e <fminf>:
 800be1e:	b508      	push	{r3, lr}
 800be20:	ed2d 8b02 	vpush	{d8}
 800be24:	eeb0 8a40 	vmov.f32	s16, s0
 800be28:	eef0 8a60 	vmov.f32	s17, s1
 800be2c:	f000 f814 	bl	800be58 <__fpclassifyf>
 800be30:	b930      	cbnz	r0, 800be40 <fminf+0x22>
 800be32:	eeb0 8a68 	vmov.f32	s16, s17
 800be36:	eeb0 0a48 	vmov.f32	s0, s16
 800be3a:	ecbd 8b02 	vpop	{d8}
 800be3e:	bd08      	pop	{r3, pc}
 800be40:	eeb0 0a68 	vmov.f32	s0, s17
 800be44:	f000 f808 	bl	800be58 <__fpclassifyf>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d0f4      	beq.n	800be36 <fminf+0x18>
 800be4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800be50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be54:	d5ed      	bpl.n	800be32 <fminf+0x14>
 800be56:	e7ee      	b.n	800be36 <fminf+0x18>

0800be58 <__fpclassifyf>:
 800be58:	ee10 3a10 	vmov	r3, s0
 800be5c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800be60:	d00d      	beq.n	800be7e <__fpclassifyf+0x26>
 800be62:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800be66:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800be6a:	d30a      	bcc.n	800be82 <__fpclassifyf+0x2a>
 800be6c:	4b07      	ldr	r3, [pc, #28]	@ (800be8c <__fpclassifyf+0x34>)
 800be6e:	1e42      	subs	r2, r0, #1
 800be70:	429a      	cmp	r2, r3
 800be72:	d908      	bls.n	800be86 <__fpclassifyf+0x2e>
 800be74:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800be78:	4258      	negs	r0, r3
 800be7a:	4158      	adcs	r0, r3
 800be7c:	4770      	bx	lr
 800be7e:	2002      	movs	r0, #2
 800be80:	4770      	bx	lr
 800be82:	2004      	movs	r0, #4
 800be84:	4770      	bx	lr
 800be86:	2003      	movs	r0, #3
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	007ffffe 	.word	0x007ffffe

0800be90 <_init>:
 800be90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be92:	bf00      	nop
 800be94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be96:	bc08      	pop	{r3}
 800be98:	469e      	mov	lr, r3
 800be9a:	4770      	bx	lr

0800be9c <_fini>:
 800be9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9e:	bf00      	nop
 800bea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bea2:	bc08      	pop	{r3}
 800bea4:	469e      	mov	lr, r3
 800bea6:	4770      	bx	lr
