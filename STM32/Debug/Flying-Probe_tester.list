
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dc8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa0  08011f98  08011f98  00012f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f38  08012f38  00014238  2**0
                  CONTENTS
  4 .ARM          00000008  08012f38  08012f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f40  08012f40  00014238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f40  08012f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012f44  08012f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  08012f48  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027d0  20000238  08013180  00014238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a08  08013180  00014a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026651  00000000  00000000  00014268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051f5  00000000  00000000  0003a8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  0003fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d8  00000000  00000000  00041980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cffe  00000000  00000000  00043158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f6b8  00000000  00000000  00070156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc334  00000000  00000000  0009f80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019bb42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000955c  00000000  00000000  0019bb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001a50e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000238 	.word	0x20000238
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011f80 	.word	0x08011f80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000023c 	.word	0x2000023c
 800020c:	08011f80 	.word	0x08011f80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9a0 	b.w	8000fd0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d14e      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d20:	4694      	mov	ip, r2
 8000d22:	458c      	cmp	ip, r1
 8000d24:	4686      	mov	lr, r0
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	d962      	bls.n	8000df2 <__udivmoddi4+0xde>
 8000d2c:	b14a      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d2e:	f1c2 0320 	rsb	r3, r2, #32
 8000d32:	4091      	lsls	r1, r2
 8000d34:	fa20 f303 	lsr.w	r3, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	4319      	orrs	r1, r3
 8000d3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f f68c 	uxth.w	r6, ip
 8000d4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb07 1114 	mls	r1, r7, r4, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb04 f106 	mul.w	r1, r4, r6
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6a:	f080 8112 	bcs.w	8000f92 <__udivmoddi4+0x27e>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 810f 	bls.w	8000f92 <__udivmoddi4+0x27e>
 8000d74:	3c02      	subs	r4, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a59      	subs	r1, r3, r1
 8000d7a:	fa1f f38e 	uxth.w	r3, lr
 8000d7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d82:	fb07 1110 	mls	r1, r7, r0, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb00 f606 	mul.w	r6, r0, r6
 8000d8e:	429e      	cmp	r6, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x94>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9a:	f080 80fc 	bcs.w	8000f96 <__udivmoddi4+0x282>
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	f240 80f9 	bls.w	8000f96 <__udivmoddi4+0x282>
 8000da4:	4463      	add	r3, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	1b9b      	subs	r3, r3, r6
 8000daa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa6>
 8000db2:	40d3      	lsrs	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xba>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb4>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa6>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x150>
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xcc>
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	f0c0 80f0 	bcc.w	8000fc0 <__udivmoddi4+0x2ac>
 8000de0:	1a86      	subs	r6, r0, r2
 8000de2:	eb64 0303 	sbc.w	r3, r4, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d0e6      	beq.n	8000dba <__udivmoddi4+0xa6>
 8000dec:	e9c5 6300 	strd	r6, r3, [r5]
 8000df0:	e7e3      	b.n	8000dba <__udivmoddi4+0xa6>
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x204>
 8000df8:	eba1 040c 	sub.w	r4, r1, ip
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa1f f78c 	uxth.w	r7, ip
 8000e04:	2101      	movs	r1, #1
 8000e06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb07 f006 	mul.w	r0, r7, r6
 8000e1a:	4298      	cmp	r0, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x11c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x11a>
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	f200 80cd 	bhi.w	8000fc8 <__udivmoddi4+0x2b4>
 8000e2e:	4626      	mov	r6, r4
 8000e30:	1a1c      	subs	r4, r3, r0
 8000e32:	fa1f f38e 	uxth.w	r3, lr
 8000e36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e42:	fb00 f707 	mul.w	r7, r0, r7
 8000e46:	429f      	cmp	r7, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x148>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x146>
 8000e54:	429f      	cmp	r7, r3
 8000e56:	f200 80b0 	bhi.w	8000fba <__udivmoddi4+0x2a6>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	1bdb      	subs	r3, r3, r7
 8000e5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x9c>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e74:	fa04 f301 	lsl.w	r3, r4, r1
 8000e78:	ea43 030c 	orr.w	r3, r3, ip
 8000e7c:	40f4      	lsrs	r4, r6
 8000e7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e82:	0c38      	lsrs	r0, r7, #16
 8000e84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e88:	fbb4 fef0 	udiv	lr, r4, r0
 8000e8c:	fa1f fc87 	uxth.w	ip, r7
 8000e90:	fb00 441e 	mls	r4, r0, lr, r4
 8000e94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e98:	fb0e f90c 	mul.w	r9, lr, ip
 8000e9c:	45a1      	cmp	r9, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d90a      	bls.n	8000eba <__udivmoddi4+0x1a6>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eaa:	f080 8084 	bcs.w	8000fb6 <__udivmoddi4+0x2a2>
 8000eae:	45a1      	cmp	r9, r4
 8000eb0:	f240 8081 	bls.w	8000fb6 <__udivmoddi4+0x2a2>
 8000eb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	eba4 0409 	sub.w	r4, r4, r9
 8000ebe:	fa1f f983 	uxth.w	r9, r3
 8000ec2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ec6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ece:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x1d2>
 8000ed6:	193c      	adds	r4, r7, r4
 8000ed8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000edc:	d267      	bcs.n	8000fae <__udivmoddi4+0x29a>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d965      	bls.n	8000fae <__udivmoddi4+0x29a>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eea:	fba0 9302 	umull	r9, r3, r0, r2
 8000eee:	eba4 040c 	sub.w	r4, r4, ip
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	46ce      	mov	lr, r9
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	d351      	bcc.n	8000f9e <__udivmoddi4+0x28a>
 8000efa:	d04e      	beq.n	8000f9a <__udivmoddi4+0x286>
 8000efc:	b155      	cbz	r5, 8000f14 <__udivmoddi4+0x200>
 8000efe:	ebb8 030e 	subs.w	r3, r8, lr
 8000f02:	eb64 040c 	sbc.w	r4, r4, ip
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	40cb      	lsrs	r3, r1
 8000f0c:	431e      	orrs	r6, r3
 8000f0e:	40cc      	lsrs	r4, r1
 8000f10:	e9c5 6400 	strd	r6, r4, [r5]
 8000f14:	2100      	movs	r1, #0
 8000f16:	e750      	b.n	8000dba <__udivmoddi4+0xa6>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f24:	fa24 f303 	lsr.w	r3, r4, r3
 8000f28:	4094      	lsls	r4, r2
 8000f2a:	430c      	orrs	r4, r1
 8000f2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f40:	0c23      	lsrs	r3, r4, #16
 8000f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f46:	fb00 f107 	mul.w	r1, r0, r7
 8000f4a:	4299      	cmp	r1, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x24c>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f56:	d22c      	bcs.n	8000fb2 <__udivmoddi4+0x29e>
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	d92a      	bls.n	8000fb2 <__udivmoddi4+0x29e>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	b2a4      	uxth	r4, r4
 8000f64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f68:	fb08 3311 	mls	r3, r8, r1, r3
 8000f6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f70:	fb01 f307 	mul.w	r3, r1, r7
 8000f74:	42a3      	cmp	r3, r4
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x276>
 8000f78:	eb1c 0404 	adds.w	r4, ip, r4
 8000f7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f80:	d213      	bcs.n	8000faa <__udivmoddi4+0x296>
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	d911      	bls.n	8000faa <__udivmoddi4+0x296>
 8000f86:	3902      	subs	r1, #2
 8000f88:	4464      	add	r4, ip
 8000f8a:	1ae4      	subs	r4, r4, r3
 8000f8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f90:	e739      	b.n	8000e06 <__udivmoddi4+0xf2>
 8000f92:	4604      	mov	r4, r0
 8000f94:	e6f0      	b.n	8000d78 <__udivmoddi4+0x64>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e706      	b.n	8000da8 <__udivmoddi4+0x94>
 8000f9a:	45c8      	cmp	r8, r9
 8000f9c:	d2ae      	bcs.n	8000efc <__udivmoddi4+0x1e8>
 8000f9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fa6:	3801      	subs	r0, #1
 8000fa8:	e7a8      	b.n	8000efc <__udivmoddi4+0x1e8>
 8000faa:	4631      	mov	r1, r6
 8000fac:	e7ed      	b.n	8000f8a <__udivmoddi4+0x276>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e799      	b.n	8000ee6 <__udivmoddi4+0x1d2>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	e7d4      	b.n	8000f60 <__udivmoddi4+0x24c>
 8000fb6:	46d6      	mov	lr, sl
 8000fb8:	e77f      	b.n	8000eba <__udivmoddi4+0x1a6>
 8000fba:	4463      	add	r3, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e74d      	b.n	8000e5c <__udivmoddi4+0x148>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e70f      	b.n	8000de8 <__udivmoddi4+0xd4>
 8000fc8:	3e02      	subs	r6, #2
 8000fca:	4463      	add	r3, ip
 8000fcc:	e730      	b.n	8000e30 <__udivmoddi4+0x11c>
 8000fce:	bf00      	nop

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f007 f989 	bl	8008300 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000fee:	bf00      	nop
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3f9      	bcc.n	8000ff0 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f007 f9ef 	bl	80083e0 <HAL_TIM_Base_Stop>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
 8001018:	4613      	mov	r3, r2
 800101a:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 800101c:	78bb      	ldrb	r3, [r7, #2]
 800101e:	f023 030f 	bic.w	r3, r3, #15
 8001022:	b2da      	uxtb	r2, r3
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	4313      	orrs	r3, r2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f043 030c 	orr.w	r3, r3, #12
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001032:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <__lcd_i2c_write+0xac>)
 800103a:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 800103c:	78bb      	ldrb	r3, [r7, #2]
 800103e:	f023 030f 	bic.w	r3, r3, #15
 8001042:	b2da      	uxtb	r2, r3
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	4313      	orrs	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001052:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001054:	78bb      	ldrb	r3, [r7, #2]
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	b2da      	uxtb	r2, r3
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	4313      	orrs	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f043 030c 	orr.w	r3, r3, #12
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001068:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <__lcd_i2c_write+0xac>)
 800106c:	78da      	ldrb	r2, [r3, #3]
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001070:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001072:	78bb      	ldrb	r3, [r7, #2]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	b2da      	uxtb	r2, r3
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	4313      	orrs	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001086:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	889b      	ldrh	r3, [r3, #4]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b299      	uxth	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2306      	movs	r3, #6
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <__lcd_i2c_write+0xac>)
 800109e:	f004 fcef 	bl	8005a80 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2132      	movs	r1, #50	@ 0x32
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff93 	bl	8000fd4 <__lcd_delay_us>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000254 	.word	0x20000254

080010bc <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff9c 	bl	800100c <__lcd_i2c_write>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	2101      	movs	r1, #1
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff8c 	bl	800100c <__lcd_i2c_write>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff61 	bl	8000fd4 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8001112:	2103      	movs	r1, #3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffd1 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff56 	bl	8000fd4 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8001128:	2103      	movs	r1, #3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffc6 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff4b 	bl	8000fd4 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800113e:	2103      	movs	r1, #3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffbb 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff40 	bl	8000fd4 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8001154:	2102      	movs	r1, #2
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff35 	bl	8000fd4 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 800116a:	2128      	movs	r1, #40	@ 0x28
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffa5 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 8001172:	210c      	movs	r1, #12
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ffa1 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 800117a:	2101      	movs	r1, #1
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff9d 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff22 	bl	8000fd4 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 8001190:	2106      	movs	r1, #6
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff92 	bl	80010bc <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	741a      	strb	r2, [r3, #16]
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff90 	bl	80010dc <__lcd_i2c_write_data>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
 80011d0:	4613      	mov	r3, r2
 80011d2:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	4a07      	ldr	r2, [pc, #28]	@ (80011f4 <LCD_I2C_Cursor+0x30>)
 80011d8:	5cd2      	ldrb	r2, [r2, r3]
 80011da:	78bb      	ldrb	r3, [r7, #2]
 80011dc:	4413      	add	r3, r2
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	3b80      	subs	r3, #128	@ 0x80
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff68 	bl	80010bc <__lcd_i2c_write_command>
  #endif
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	08012718 	.word	0x08012718

080011f8 <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
 8001204:	4613      	mov	r3, r2
 8001206:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d90a      	bls.n	8001224 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	3b02      	subs	r3, #2
 8001212:	b2d9      	uxtb	r1, r3
 8001214:	78bb      	ldrb	r3, [r7, #2]
 8001216:	3314      	adds	r3, #20
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffd1 	bl	80011c4 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 8001222:	e005      	b.n	8001230 <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8001224:	78ba      	ldrb	r2, [r7, #2]
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffca 	bl	80011c4 <LCD_I2C_Cursor>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 8001240:	2101      	movs	r1, #1
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff3a 	bl	80010bc <__lcd_i2c_write_command>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	460b      	mov	r3, r1
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3340      	adds	r3, #64	@ 0x40
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff ff26 	bl	80010bc <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 8001270:	2300      	movs	r3, #0
 8001272:	75fb      	strb	r3, [r7, #23]
 8001274:	e00a      	b.n	800128c <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff ff2b 	bl	80010dc <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	3301      	adds	r3, #1
 800128a:	75fb      	strb	r3, [r7, #23]
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b07      	cmp	r3, #7
 8001290:	d9f1      	bls.n	8001276 <LCD_I2C_DefineChar+0x26>
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 80012a8:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 80012aa:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 80012ac:	69b8      	ldr	r0, [r7, #24]
 80012ae:	f7fe ffaf 	bl	8000210 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 80012b6:	4a21      	ldr	r2, [pc, #132]	@ (800133c <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c0:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	461a      	mov	r2, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ffbf 	bl	8001250 <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	77fb      	strb	r3, [r7, #31]
 80012d6:	e025      	b.n	8001324 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	3303      	adds	r3, #3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	4619      	mov	r1, r3
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff88 	bl	80011f8 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff5b 	bl	80011a6 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe6b 	bl	8000fd4 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80012fe:	7ffb      	ldrb	r3, [r7, #31]
 8001300:	3303      	adds	r3, #3
 8001302:	b2da      	uxtb	r2, r3
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff75 	bl	80011f8 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fedf 	bl	80010dc <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	3301      	adds	r3, #1
 8001322:	77fb      	strb	r3, [r7, #31]
 8001324:	7ffa      	ldrb	r2, [r7, #31]
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3d5      	bcc.n	80012d8 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	08011fa4 	.word	0x08011fa4
 800133c:	08011fb0 	.word	0x08011fb0

08001340 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t CurrentPosition;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e07d      	b.n	800144a <HAL_TIM_PWM_PulseFinishedCallback+0x10a>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4942      	ldr	r1, [pc, #264]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2064      	movs	r0, #100	@ 0x64
 8001358:	fb00 f303 	mul.w	r3, r0, r3
 800135c:	440b      	add	r3, r1
 800135e:	330c      	adds	r3, #12
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d16d      	bne.n	8001444 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  motors[i].stepsTaken++;
 8001368:	4a3c      	ldr	r2, [pc, #240]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2164      	movs	r1, #100	@ 0x64
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	3344      	adds	r3, #68	@ 0x44
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	4938      	ldr	r1, [pc, #224]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2064      	movs	r0, #100	@ 0x64
 8001380:	fb00 f303 	mul.w	r3, r0, r3
 8001384:	440b      	add	r3, r1
 8001386:	3344      	adds	r3, #68	@ 0x44
 8001388:	601a      	str	r2, [r3, #0]
		  stepsTaken[i] = motors[i].stepsTaken;
 800138a:	4a34      	ldr	r2, [pc, #208]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2164      	movs	r1, #100	@ 0x64
 8001390:	fb01 f303 	mul.w	r3, r1, r3
 8001394:	4413      	add	r3, r2
 8001396:	3344      	adds	r3, #68	@ 0x44
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4931      	ldr	r1, [pc, #196]	@ (8001460 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 80013a2:	4a2e      	ldr	r2, [pc, #184]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2164      	movs	r1, #100	@ 0x64
 80013a8:	fb01 f303 	mul.w	r3, r1, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	331c      	adds	r3, #28
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	492a      	ldr	r1, [pc, #168]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2064      	movs	r0, #100	@ 0x64
 80013b8:	fb00 f303 	mul.w	r3, r0, r3
 80013bc:	440b      	add	r3, r1
 80013be:	3320      	adds	r3, #32
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	f004 fa75 	bl	80058b4 <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d111      	bne.n	80013f4 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		  motors[i].StepsFront++;
 80013d0:	4a22      	ldr	r2, [pc, #136]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2164      	movs	r1, #100	@ 0x64
 80013d6:	fb01 f303 	mul.w	r3, r1, r3
 80013da:	4413      	add	r3, r2
 80013dc:	3358      	adds	r3, #88	@ 0x58
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	491e      	ldr	r1, [pc, #120]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2064      	movs	r0, #100	@ 0x64
 80013e8:	fb00 f303 	mul.w	r3, r0, r3
 80013ec:	440b      	add	r3, r1
 80013ee:	3358      	adds	r3, #88	@ 0x58
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e027      	b.n	8001444 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 80013f4:	4a19      	ldr	r2, [pc, #100]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2164      	movs	r1, #100	@ 0x64
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	331c      	adds	r3, #28
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4915      	ldr	r1, [pc, #84]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2064      	movs	r0, #100	@ 0x64
 800140a:	fb00 f303 	mul.w	r3, r0, r3
 800140e:	440b      	add	r3, r1
 8001410:	3320      	adds	r3, #32
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f004 fa4c 	bl	80058b4 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d110      	bne.n	8001444 <HAL_TIM_PWM_PulseFinishedCallback+0x104>

			  		  motors[i].StepsBack++;
 8001422:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2164      	movs	r1, #100	@ 0x64
 8001428:	fb01 f303 	mul.w	r3, r1, r3
 800142c:	4413      	add	r3, r2
 800142e:	335c      	adds	r3, #92	@ 0x5c
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	4909      	ldr	r1, [pc, #36]	@ (800145c <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2064      	movs	r0, #100	@ 0x64
 800143a:	fb00 f303 	mul.w	r3, r0, r3
 800143e:	440b      	add	r3, r1
 8001440:	335c      	adds	r3, #92	@ 0x5c
 8001442:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b03      	cmp	r3, #3
 800144e:	f77f af7e 	ble.w	800134e <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		 }
      }

    }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000248c 	.word	0x2000248c
 8001460:	20000288 	.word	0x20000288

08001464 <HAL_UART_RxCpltCallback>:

// UART callback for read from TMC2209
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <HAL_UART_RxCpltCallback+0x44>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d112      	bne.n	800149c <HAL_UART_RxCpltCallback+0x38>
        for (uint8_t i = 0; i < TMC_REPLY_SIZE + 1 ; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e009      	b.n	8001490 <HAL_UART_RxCpltCallback+0x2c>
            rxBuffer[i] = rxData[i + 1];
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	490a      	ldr	r1, [pc, #40]	@ (80014ac <HAL_UART_RxCpltCallback+0x48>)
 8001484:	5c89      	ldrb	r1, [r1, r2]
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <HAL_UART_RxCpltCallback+0x4c>)
 8001488:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < TMC_REPLY_SIZE + 1 ; i++) {
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	3301      	adds	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b08      	cmp	r3, #8
 8001494:	d9f2      	bls.n	800147c <HAL_UART_RxCpltCallback+0x18>
        }
        rxBufferReady = 1;
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <HAL_UART_RxCpltCallback+0x50>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
    }
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40004400 	.word	0x40004400
 80014ac:	2000025c 	.word	0x2000025c
 80014b0:	20000268 	.word	0x20000268
 80014b4:	20000270 	.word	0x20000270

080014b8 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69d8      	ldr	r0, [r3, #28]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	8c1b      	ldrh	r3, [r3, #32]
 80014cc:	78fa      	ldrb	r2, [r7, #3]
 80014ce:	4619      	mov	r1, r3
 80014d0:	f004 fa08 	bl	80058e4 <HAL_GPIO_WritePin>
    direction = state;
 80014d4:	4a03      	ldr	r2, [pc, #12]	@ (80014e4 <TMC2209_SetDirection+0x2c>)
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	7013      	strb	r3, [r2, #0]
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000285 	.word	0x20000285

080014e8 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014fc:	78fa      	ldrb	r2, [r7, #3]
 80014fe:	4619      	mov	r1, r3
 8001500:	f004 f9f0 	bl	80058e4 <HAL_GPIO_WritePin>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 800151e:	f005 fca9 	bl	8006e74 <HAL_RCC_GetHCLKFreq>
 8001522:	4602      	mov	r2, r0
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <TMC2209_SetSpeed+0x54>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	0852      	lsrs	r2, r2, #1
 800155c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800155e:	e031      	b.n	80015c4 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d106      	bne.n	8001576 <TMC2209_SetSpeed+0x6a>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001574:	e026      	b.n	80015c4 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b08      	cmp	r3, #8
 800157c:	d106      	bne.n	800158c <TMC2209_SetSpeed+0x80>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800158a:	e01b      	b.n	80015c4 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d106      	bne.n	80015a2 <TMC2209_SetSpeed+0x96>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015a0:	e010      	b.n	80015c4 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d106      	bne.n	80015b8 <TMC2209_SetSpeed+0xac>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80015b6:	e005      	b.n	80015c4 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80015c4:	bf00      	nop
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 80015e0:	2101      	movs	r1, #1
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff80 	bl	80014e8 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f007 f9b8 	bl	8008960 <HAL_TIM_PWM_Stop_IT>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 800160c:	2100      	movs	r1, #0
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff6a 	bl	80014e8 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f007 f85a 	bl	80086d0 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <TMC2209_Start_C>:
void TMC2209_Start_C(Motor *motor) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	60bb      	str	r3, [r7, #8]
   //motor->stepsTaken = 0;
	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8001640:	2100      	movs	r1, #0
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff50 	bl	80014e8 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f007 f840 	bl	80086d0 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <debug_print>:
    }
}



 void debug_print(const char* msg) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 200);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7fe fdd1 	bl	8000210 <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	b29a      	uxth	r2, r3
 8001672:	23c8      	movs	r3, #200	@ 0xc8
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4803      	ldr	r0, [pc, #12]	@ (8001684 <debug_print+0x24>)
 8001678:	f008 fb46 	bl	8009d08 <HAL_UART_Transmit>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20001eb4 	.word	0x20001eb4

08001688 <debug_print_hex>:

 void debug_print_hex(uint8_t* data, uint8_t length) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b09e      	sub	sp, #120	@ 0x78
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
    char buffer[100];
    char* ptr = buffer;
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	677b      	str	r3, [r7, #116]	@ 0x74

    ptr += sprintf(ptr, "[");
 800169a:	491c      	ldr	r1, [pc, #112]	@ (800170c <debug_print_hex+0x84>)
 800169c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800169e:	f00e faed 	bl	800fc7c <siprintf>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016a8:	4413      	add	r3, r2
 80016aa:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80016b2:	e013      	b.n	80016dc <debug_print_hex+0x54>
        ptr += sprintf(ptr, "%02X ", data[i]);
 80016b4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	4913      	ldr	r1, [pc, #76]	@ (8001710 <debug_print_hex+0x88>)
 80016c2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80016c4:	f00e fada 	bl	800fc7c <siprintf>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ce:	4413      	add	r3, r2
 80016d0:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 80016d2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80016d6:	3301      	adds	r3, #1
 80016d8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80016dc:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3e6      	bcc.n	80016b4 <debug_print_hex+0x2c>
    }
    ptr += sprintf(ptr, "]\r\n");
 80016e6:	490b      	ldr	r1, [pc, #44]	@ (8001714 <debug_print_hex+0x8c>)
 80016e8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80016ea:	f00e fac7 	bl	800fc7c <siprintf>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016f4:	4413      	add	r3, r2
 80016f6:	677b      	str	r3, [r7, #116]	@ 0x74

    debug_print(buffer);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ffaf 	bl	8001660 <debug_print>
}
 8001702:	bf00      	nop
 8001704:	3778      	adds	r7, #120	@ 0x78
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	080120b4 	.word	0x080120b4
 8001710:	080120b8 	.word	0x080120b8
 8001714:	080120c0 	.word	0x080120c0

08001718 <calculate_CRC>:

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8001728:	2300      	movs	r3, #0
 800172a:	73bb      	strb	r3, [r7, #14]
 800172c:	e027      	b.n	800177e <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8001738:	2300      	movs	r3, #0
 800173a:	733b      	strb	r3, [r7, #12]
 800173c:	e019      	b.n	8001772 <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	09db      	lsrs	r3, r3, #7
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	7b7b      	ldrb	r3, [r7, #13]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	429a      	cmp	r2, r3
 800174e:	d007      	beq.n	8001760 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	b25b      	sxtb	r3, r3
 8001756:	f083 0307 	eor.w	r3, r3, #7
 800175a:	b25b      	sxtb	r3, r3
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e002      	b.n	8001766 <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8001766:	7b7b      	ldrb	r3, [r7, #13]
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 800176c:	7b3b      	ldrb	r3, [r7, #12]
 800176e:	3301      	adds	r3, #1
 8001770:	733b      	strb	r3, [r7, #12]
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	2b07      	cmp	r3, #7
 8001776:	d9e2      	bls.n	800173e <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	3301      	adds	r3, #1
 800177c:	73bb      	strb	r3, [r7, #14]
 800177e:	7bba      	ldrb	r2, [r7, #14]
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	429a      	cmp	r2, r3
 8001784:	d3d3      	bcc.n	800172e <calculate_CRC+0x16>
        }
    }
    return crc;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <TMC2209_WaitForReply>:
}




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 800179c:	f003 f992 	bl	8004ac4 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 80017a2:	e00c      	b.n	80017be <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 80017a4:	f003 f98e 	bl	8004ac4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d204      	bcs.n	80017be <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 80017b4:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <TMC2209_WaitForReply+0x44>)
 80017b6:	f7ff ff53 	bl	8001660 <debug_print>
             return 0; // Timeout
 80017ba:	2300      	movs	r3, #0
 80017bc:	e008      	b.n	80017d0 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <TMC2209_WaitForReply+0x48>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ed      	beq.n	80017a4 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <TMC2209_WaitForReply+0x48>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 80017ce:	2301      	movs	r3, #1
 }
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	080120e0 	.word	0x080120e0
 80017dc:	20000270 	.word	0x20000270

080017e0 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	uint8_t flag = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	75fb      	strb	r3, [r7, #23]
	//clear_UART_buffers(&huart2);
	HAL_Delay(1);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f003 f973 	bl	8004adc <HAL_Delay>
     // Send the command
     if (HAL_UART_Transmit(&huart2, command, writeLength, 10) != HAL_OK) {
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	230a      	movs	r3, #10
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	481c      	ldr	r0, [pc, #112]	@ (8001870 <TMC2209_sendCommand+0x90>)
 8001800:	f008 fa82 	bl	8009d08 <HAL_UART_Transmit>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <TMC2209_sendCommand+0x34>
         debug_print("Failed to send command.\r\n");
 800180a:	481a      	ldr	r0, [pc, #104]	@ (8001874 <TMC2209_sendCommand+0x94>)
 800180c:	f7ff ff28 	bl	8001660 <debug_print>
         return 0;
 8001810:	2300      	movs	r3, #0
 8001812:	e029      	b.n	8001868 <TMC2209_sendCommand+0x88>
     }


     if(readLength){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d025      	beq.n	8001866 <TMC2209_sendCommand+0x86>

     // Wait for reply
     HAL_UART_Receive_DMA(&huart2, rxData, readLength + 1);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	b29b      	uxth	r3, r3
 800181e:	3301      	adds	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	4914      	ldr	r1, [pc, #80]	@ (8001878 <TMC2209_sendCommand+0x98>)
 8001826:	4812      	ldr	r0, [pc, #72]	@ (8001870 <TMC2209_sendCommand+0x90>)
 8001828:	f008 faf7 	bl	8009e1a <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 800182c:	20c8      	movs	r0, #200	@ 0xc8
 800182e:	f7ff ffb1 	bl	8001794 <TMC2209_WaitForReply>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <TMC2209_sendCommand+0x62>
         debug_print("No reply received.\r\n");
 8001838:	4810      	ldr	r0, [pc, #64]	@ (800187c <TMC2209_sendCommand+0x9c>)
 800183a:	f7ff ff11 	bl	8001660 <debug_print>
         return 0; // command failed
 800183e:	2300      	movs	r3, #0
 8001840:	e012      	b.n	8001868 <TMC2209_sendCommand+0x88>
     }
     // Send transmitted data -- Note: this can't be called before receiving or else it will interfere with huart2
     debug_print("Data Transmitted: ");
 8001842:	480f      	ldr	r0, [pc, #60]	@ (8001880 <TMC2209_sendCommand+0xa0>)
 8001844:	f7ff ff0c 	bl	8001660 <debug_print>
     debug_print_hex(command, writeLength);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4619      	mov	r1, r3
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f7ff ff1a 	bl	8001688 <debug_print_hex>
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
 8001854:	480b      	ldr	r0, [pc, #44]	@ (8001884 <TMC2209_sendCommand+0xa4>)
 8001856:	f7ff ff03 	bl	8001660 <debug_print>
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
 800185a:	2108      	movs	r1, #8
 800185c:	480a      	ldr	r0, [pc, #40]	@ (8001888 <TMC2209_sendCommand+0xa8>)
 800185e:	f7ff ff13 	bl	8001688 <debug_print_hex>

     return rxBuffer; // Success
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <TMC2209_sendCommand+0xa8>)
 8001864:	e000      	b.n	8001868 <TMC2209_sendCommand+0x88>
     }

     return flag;
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 }
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20001e2c 	.word	0x20001e2c
 8001874:	08012100 	.word	0x08012100
 8001878:	2000025c 	.word	0x2000025c
 800187c:	0801211c 	.word	0x0801211c
 8001880:	08012134 	.word	0x08012134
 8001884:	08012148 	.word	0x08012148
 8001888:	20000268 	.word	0x20000268

0800188c <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	460b      	mov	r3, r1
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 800189a:	2305      	movs	r3, #5
 800189c:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	7a1b      	ldrb	r3, [r3, #8]
 80018a2:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	0e1b      	lsrs	r3, r3, #24
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	141b      	asrs	r3, r3, #16
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	121b      	asrs	r3, r3, #8
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2107      	movs	r1, #7
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff20 	bl	8001718 <calculate_CRC>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2200      	movs	r2, #0
 80018e2:	2108      	movs	r1, #8
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff7b 	bl	80017e0 <TMC2209_sendCommand>

 }
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
 	uint8_t read_request_command[8] = { 0 };
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]

// 	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
// 		return tmc2209->config->shadowRegister[address];

 	read_request_command[0] = SYNC;
 8001908:	2305      	movs	r3, #5
 800190a:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7a1b      	ldrb	r3, [r3, #8]
 8001910:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2103      	movs	r1, #3
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fefb 	bl	8001718 <calculate_CRC>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2208      	movs	r2, #8
 800192c:	2104      	movs	r1, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff56 	bl	80017e0 <TMC2209_sendCommand>
 8001934:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d00c      	beq.n	8001958 <TMC2209_readInit+0x64>
 		// If first byte equals 0 then it means no reply so return
 		if (verifyBuffer[0] == 0)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <TMC2209_readInit+0x58>
 			return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e03e      	b.n	80019ca <TMC2209_readInit+0xd6>
 		debug_print("Invalid data received!(SYNC Byte)\r\n");
 800194c:	4821      	ldr	r0, [pc, #132]	@ (80019d4 <TMC2209_readInit+0xe0>)
 800194e:	f7ff fe87 	bl	8001660 <debug_print>
 		return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e038      	b.n	80019ca <TMC2209_readInit+0xd6>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2bff      	cmp	r3, #255	@ 0xff
 8001960:	d005      	beq.n	800196e <TMC2209_readInit+0x7a>
 		debug_print("Invalid data received!(MCU Address)\r\n");
 8001962:	481d      	ldr	r0, [pc, #116]	@ (80019d8 <TMC2209_readInit+0xe4>)
 8001964:	f7ff fe7c 	bl	8001660 <debug_print>
 		return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	e02d      	b.n	80019ca <TMC2209_readInit+0xd6>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3302      	adds	r3, #2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	429a      	cmp	r2, r3
 8001978:	d005      	beq.n	8001986 <TMC2209_readInit+0x92>
 		debug_print("Invalid data received!(Register Address)\r\n");
 800197a:	4818      	ldr	r0, [pc, #96]	@ (80019dc <TMC2209_readInit+0xe8>)
 800197c:	f7ff fe70 	bl	8001660 <debug_print>
 		return -1;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e021      	b.n	80019ca <TMC2209_readInit+0xd6>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3307      	adds	r3, #7
 800198a:	781c      	ldrb	r4, [r3, #0]
 800198c:	2107      	movs	r1, #7
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff fec2 	bl	8001718 <calculate_CRC>
 8001994:	4603      	mov	r3, r0
 8001996:	429c      	cmp	r4, r3
 8001998:	d005      	beq.n	80019a6 <TMC2209_readInit+0xb2>
 		debug_print("Invalid data received!(CRC)\r\n");
 800199a:	4811      	ldr	r0, [pc, #68]	@ (80019e0 <TMC2209_readInit+0xec>)
 800199c:	f7ff fe60 	bl	8001660 <debug_print>
 		return -1;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	e011      	b.n	80019ca <TMC2209_readInit+0xd6>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3303      	adds	r3, #3
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	061a      	lsls	r2, r3, #24
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3304      	adds	r3, #4
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	431a      	orrs	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3305      	adds	r3, #5
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	4313      	orrs	r3, r2
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	3206      	adds	r2, #6
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	4313      	orrs	r3, r2
 }
 80019ca:	4618      	mov	r0, r3
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	0801215c 	.word	0x0801215c
 80019d8:	08012180 	.word	0x08012180
 80019dc:	080121a8 	.word	0x080121a8
 80019e0:	080121d4 	.word	0x080121d4

080019e4 <TMC2209_SetSpreadCycle>:


uint8_t TMC2209_SetSpreadCycle(Motor *motor, uint8_t enable) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
	uint32_t gconf;
	uint32_t check_gconf;

	debug_print("Read current SpreadCycle value...");
 80019f0:	4821      	ldr	r0, [pc, #132]	@ (8001a78 <TMC2209_SetSpreadCycle+0x94>)
 80019f2:	f7ff fe35 	bl	8001660 <debug_print>
	gconf = TMC2209_readInit(motor, TMC2209_REG_GCONF);
 80019f6:	2100      	movs	r1, #0
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff7b 	bl	80018f4 <TMC2209_readInit>
 80019fe:	4603      	mov	r3, r0
 8001a00:	60fb      	str	r3, [r7, #12]

    if(gconf == TMC_ERROR){
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d105      	bne.n	8001a16 <TMC2209_SetSpreadCycle+0x32>
    	debug_print("Failed to set SpreadCycle Mode!(Invalid Reply 1)\r\n");
 8001a0a:	481c      	ldr	r0, [pc, #112]	@ (8001a7c <TMC2209_SetSpreadCycle+0x98>)
 8001a0c:	f7ff fe28 	bl	8001660 <debug_print>
    	return gconf;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	e02b      	b.n	8001a6e <TMC2209_SetSpreadCycle+0x8a>
    }

    check_gconf = gconf;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
    if(enable) {
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <TMC2209_SetSpreadCycle+0x46>
    	gconf |= (1 << TMC2209_EN_SPREADCYCLE_POS);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e003      	b.n	8001a32 <TMC2209_SetSpreadCycle+0x4e>
    } else {
    	gconf &= ~(1 << TMC2209_EN_SPREADCYCLE_POS);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	60fb      	str	r3, [r7, #12]
    }

    if(gconf == check_gconf){ //Setpread is already EN/DIS ABLED so skip and return
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d104      	bne.n	8001a44 <TMC2209_SetSpreadCycle+0x60>
    	debug_print("Failed to set SpreadCycle Mode! (Spread is already on that Mode!)\r\n");
 8001a3a:	4811      	ldr	r0, [pc, #68]	@ (8001a80 <TMC2209_SetSpreadCycle+0x9c>)
 8001a3c:	f7ff fe10 	bl	8001660 <debug_print>
    	return enable;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	e014      	b.n	8001a6e <TMC2209_SetSpreadCycle+0x8a>
    }

    TMC2209_writeInit(motor, TMC2209_REG_GCONF, gconf);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	461a      	mov	r2, r3
 8001a48:	2100      	movs	r1, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff1e 	bl	800188c <TMC2209_writeInit>

    check_gconf = TMC2209_readInit(motor, TMC2209_REG_GCONF);
 8001a50:	2100      	movs	r1, #0
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff4e 	bl	80018f4 <TMC2209_readInit>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60bb      	str	r3, [r7, #8]
    if(check_gconf != gconf){
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d002      	beq.n	8001a6a <TMC2209_SetSpreadCycle+0x86>
    	debug_print("Failed to set SpreadCycle Mode!(invalid Reply 2)\r\n");
 8001a64:	4807      	ldr	r0, [pc, #28]	@ (8001a84 <TMC2209_SetSpreadCycle+0xa0>)
 8001a66:	f7ff fdfb 	bl	8001660 <debug_print>
    }
    return check_gconf;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	b2db      	uxtb	r3, r3
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	080121f4 	.word	0x080121f4
 8001a7c:	08012218 	.word	0x08012218
 8001a80:	0801224c 	.word	0x0801224c
 8001a84:	08012290 	.word	0x08012290

08001a88 <TMC2209_enable_PDNuart>:
    }

    return spreadCycleEnabled; // Return 1 if SpreadCycle is enabled, 0 otherwise
}

void TMC2209_enable_PDNuart(Motor *tmc2209){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	  // Enable the driver by writing to the GCONF register
	  debug_print("Enabling driver via GCONF register...\r\n");
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <TMC2209_enable_PDNuart+0x20>)
 8001a92:	f7ff fde5 	bl	8001660 <debug_print>
	  TMC2209_writeInit(tmc2209, 0x00, 0x00000040); // Set `pdn_disable = 1` in GCONF
 8001a96:	2240      	movs	r2, #64	@ 0x40
 8001a98:	2100      	movs	r1, #0
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fef6 	bl	800188c <TMC2209_writeInit>
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08012314 	.word	0x08012314

08001aac <setMicrosteppingResolution>:

 }


// Function to set the microstepping resolution through UART
void setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b094      	sub	sp, #80	@ 0x50
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8001abe:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fee0 	bl	800188c <TMC2209_writeInit>


    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8001acc:	216c      	movs	r1, #108	@ 0x6c
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff10 	bl	80018f4 <TMC2209_readInit>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	64bb      	str	r3, [r7, #72]	@ 0x48


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8001ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ada:	0e1b      	lsrs	r3, r3, #24
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aec:	d053      	beq.n	8001b96 <setMicrosteppingResolution+0xea>
 8001aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001af2:	dc74      	bgt.n	8001bde <setMicrosteppingResolution+0x132>
 8001af4:	2b80      	cmp	r3, #128	@ 0x80
 8001af6:	d052      	beq.n	8001b9e <setMicrosteppingResolution+0xf2>
 8001af8:	2b80      	cmp	r3, #128	@ 0x80
 8001afa:	dc70      	bgt.n	8001bde <setMicrosteppingResolution+0x132>
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	dc47      	bgt.n	8001b90 <setMicrosteppingResolution+0xe4>
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	dd6c      	ble.n	8001bde <setMicrosteppingResolution+0x132>
 8001b04:	3b01      	subs	r3, #1
 8001b06:	2b1f      	cmp	r3, #31
 8001b08:	d869      	bhi.n	8001bde <setMicrosteppingResolution+0x132>
 8001b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b10 <setMicrosteppingResolution+0x64>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001bd7 	.word	0x08001bd7
 8001b14:	08001bcf 	.word	0x08001bcf
 8001b18:	08001bdf 	.word	0x08001bdf
 8001b1c:	08001bc7 	.word	0x08001bc7
 8001b20:	08001bdf 	.word	0x08001bdf
 8001b24:	08001bdf 	.word	0x08001bdf
 8001b28:	08001bdf 	.word	0x08001bdf
 8001b2c:	08001bbf 	.word	0x08001bbf
 8001b30:	08001bdf 	.word	0x08001bdf
 8001b34:	08001bdf 	.word	0x08001bdf
 8001b38:	08001bdf 	.word	0x08001bdf
 8001b3c:	08001bdf 	.word	0x08001bdf
 8001b40:	08001bdf 	.word	0x08001bdf
 8001b44:	08001bdf 	.word	0x08001bdf
 8001b48:	08001bdf 	.word	0x08001bdf
 8001b4c:	08001bb7 	.word	0x08001bb7
 8001b50:	08001bdf 	.word	0x08001bdf
 8001b54:	08001bdf 	.word	0x08001bdf
 8001b58:	08001bdf 	.word	0x08001bdf
 8001b5c:	08001bdf 	.word	0x08001bdf
 8001b60:	08001bdf 	.word	0x08001bdf
 8001b64:	08001bdf 	.word	0x08001bdf
 8001b68:	08001bdf 	.word	0x08001bdf
 8001b6c:	08001bdf 	.word	0x08001bdf
 8001b70:	08001bdf 	.word	0x08001bdf
 8001b74:	08001bdf 	.word	0x08001bdf
 8001b78:	08001bdf 	.word	0x08001bdf
 8001b7c:	08001bdf 	.word	0x08001bdf
 8001b80:	08001bdf 	.word	0x08001bdf
 8001b84:	08001bdf 	.word	0x08001bdf
 8001b88:	08001bdf 	.word	0x08001bdf
 8001b8c:	08001baf 	.word	0x08001baf
 8001b90:	2b40      	cmp	r3, #64	@ 0x40
 8001b92:	d008      	beq.n	8001ba6 <setMicrosteppingResolution+0xfa>
 8001b94:	e023      	b.n	8001bde <setMicrosteppingResolution+0x132>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 8001b96:	2300      	movs	r3, #0
 8001b98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001b9c:	e024      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001ba4:	e020      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001bac:	e01c      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 8001bae:	2303      	movs	r3, #3
 8001bb0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001bb4:	e018      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001bbc:	e014      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001bc4:	e010      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001bcc:	e00c      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 8001bce:	2307      	movs	r3, #7
 8001bd0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001bd4:	e008      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001bdc:	e004      	b.n	8001be8 <setMicrosteppingResolution+0x13c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 8001bde:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001be2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001be6:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 8001be8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001bec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d103      	bne.n	8001bfc <setMicrosteppingResolution+0x150>
        debug_print("Resolution unchanged, no update needed.\n");
 8001bf4:	4810      	ldr	r0, [pc, #64]	@ (8001c38 <setMicrosteppingResolution+0x18c>)
 8001bf6:	f7ff fd33 	bl	8001660 <debug_print>
 8001bfa:	e019      	b.n	8001c30 <setMicrosteppingResolution+0x184>
        return;
    }

    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8001bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bfe:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001c02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c06:	061b      	lsls	r3, r3, #24
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8001c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c0e:	461a      	mov	r2, r3
 8001c10:	216c      	movs	r1, #108	@ 0x6c
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fe3a 	bl	800188c <TMC2209_writeInit>

    // Debug
    char debug_msg[50];
    sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
 8001c18:	887a      	ldrh	r2, [r7, #2]
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4907      	ldr	r1, [pc, #28]	@ (8001c3c <setMicrosteppingResolution+0x190>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f00e f82b 	bl	800fc7c <siprintf>
    debug_print(debug_msg);
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fd18 	bl	8001660 <debug_print>

}
 8001c30:	3750      	adds	r7, #80	@ 0x50
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	08012390 	.word	0x08012390
 8001c3c:	080123bc 	.word	0x080123bc

08001c40 <TMC2209_setSendDelay>:
    debug_print("StallGuard threshold set successfully! \r\n");
    debug_print("\r\n");
}


void TMC2209_setSendDelay(Motor *tmc2209, uint8_t sendDelay) { // The SENDDELAY field uses 4 bits (bits 11..8).
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
	// The datasheet recommends SENDDELAY >= 2 in multi-node setups.
	if (sendDelay > 15) sendDelay = 15; // clamp the value to 4 bits max
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	d901      	bls.n	8001c56 <TMC2209_setSendDelay+0x16>
 8001c52:	230f      	movs	r3, #15
 8001c54:	70fb      	strb	r3, [r7, #3]

	uint32_t nodeconf = TMC2209_readInit(tmc2209, TMC_REG_SENDDELAY);	// Read the existing NODECONF register
 8001c56:	2103      	movs	r1, #3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fe4b 	bl	80018f4 <TMC2209_readInit>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60fb      	str	r3, [r7, #12]
	nodeconf &= ~(0x0F << 8);	// Clear bits 11..8
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c68:	60fb      	str	r3, [r7, #12]
	nodeconf |= ((sendDelay & 0x0F) << 8);	// Set bits 11..8 to sendDelay
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
	TMC2209_writeInit(tmc2209, TMC2209_REG_SLAVECONF, nodeconf);	// Write back the updated value
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fe04 	bl	800188c <TMC2209_writeInit>
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <TMC2209_setMotorsConfiguration>:

void TMC2209_setMotorsConfiguration(Motor *motors, uint8_t sendDelay, bool enableSpreadCycle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	70bb      	strb	r3, [r7, #2]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e034      	b.n	8001d0c <TMC2209_setMotorsConfiguration+0x80>
        TMC2209_setSendDelay(&motors[i], sendDelay);
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2264      	movs	r2, #100	@ 0x64
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ffc4 	bl	8001c40 <TMC2209_setSendDelay>
        TMC2209_enable_PDNuart(&motors[i]);
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2264      	movs	r2, #100	@ 0x64
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fedf 	bl	8001a88 <TMC2209_enable_PDNuart>
        uint16_t mstep = motors[i].driver.mstep;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2264      	movs	r2, #100	@ 0x64
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	885b      	ldrh	r3, [r3, #2]
 8001cd8:	81bb      	strh	r3, [r7, #12]
        setMicrosteppingResolution(&motors[i], mstep);
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2264      	movs	r2, #100	@ 0x64
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	89ba      	ldrh	r2, [r7, #12]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fede 	bl	8001aac <setMicrosteppingResolution>
        TMC2209_SetSpreadCycle(&motors[i], enableSpreadCycle);
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2264      	movs	r2, #100	@ 0x64
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	78ba      	ldrb	r2, [r7, #2]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fe6f 	bl	80019e4 <TMC2209_SetSpreadCycle>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d9c7      	bls.n	8001ca2 <TMC2209_setMotorsConfiguration+0x16>
    }
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <MotorsHoming>:



void MotorsHoming(Motor *motor){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<4; i++){
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e14a      	b.n	8001fc0 <MotorsHoming+0x2a4>
		if(i == 0){
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d13c      	bne.n	8001daa <MotorsHoming+0x8e>
			TMC2209_SetDirection(&motor[0],0);
 8001d30:	2100      	movs	r1, #0
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fbc0 	bl	80014b8 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[0],16000);
 8001d38:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fbe5 	bl	800150c <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0){
 8001d42:	2110      	movs	r1, #16
 8001d44:	48a3      	ldr	r0, [pc, #652]	@ (8001fd4 <MotorsHoming+0x2b8>)
 8001d46:	f000 ff05 	bl	8002b54 <IsSensorTriggered>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d026      	beq.n	8001da4 <MotorsHoming+0x88>
					TMC2209_Start(&motor[0]);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fc4e 	bl	80015f8 <TMC2209_Start>
					while(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0);
 8001d5c:	bf00      	nop
 8001d5e:	2110      	movs	r1, #16
 8001d60:	489c      	ldr	r0, [pc, #624]	@ (8001fd4 <MotorsHoming+0x2b8>)
 8001d62:	f000 fef7 	bl	8002b54 <IsSensorTriggered>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f083 0301 	eor.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f5      	bne.n	8001d5e <MotorsHoming+0x42>
					if((IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 1)){
 8001d72:	2110      	movs	r1, #16
 8001d74:	4897      	ldr	r0, [pc, #604]	@ (8001fd4 <MotorsHoming+0x2b8>)
 8001d76:	f000 feed 	bl	8002b54 <IsSensorTriggered>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d011      	beq.n	8001da4 <MotorsHoming+0x88>
						TMC2209_Stop(&motor[0]);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fc23 	bl	80015cc <TMC2209_Stop>
						motor[0].currentPositionMM = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
						motor[0].stepsTaken = 0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	645a      	str	r2, [r3, #68]	@ 0x44
						motor[i].StepsBack = 0;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2264      	movs	r2, #100	@ 0x64
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	2200      	movs	r2, #0
 8001da2:	65da      	str	r2, [r3, #92]	@ 0x5c

					}

				}
			TMC2209_Stop(&motor[0]);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff fc11 	bl	80015cc <TMC2209_Stop>

		}
		if(i == 1){
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d150      	bne.n	8001e52 <MotorsHoming+0x136>
			TMC2209_SetDirection(&motor[1],1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3364      	adds	r3, #100	@ 0x64
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fb7e 	bl	80014b8 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[1],10000);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3364      	adds	r3, #100	@ 0x64
 8001dc0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fba1 	bl	800150c <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0){
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4881      	ldr	r0, [pc, #516]	@ (8001fd4 <MotorsHoming+0x2b8>)
 8001dce:	f000 fec1 	bl	8002b54 <IsSensorTriggered>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d034      	beq.n	8001e48 <MotorsHoming+0x12c>
				TMC2209_Start(&motor[1]);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3364      	adds	r3, #100	@ 0x64
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fc08 	bl	80015f8 <TMC2209_Start>
				while(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0);
 8001de8:	bf00      	nop
 8001dea:	2104      	movs	r1, #4
 8001dec:	4879      	ldr	r0, [pc, #484]	@ (8001fd4 <MotorsHoming+0x2b8>)
 8001dee:	f000 feb1 	bl	8002b54 <IsSensorTriggered>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f083 0301 	eor.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f5      	bne.n	8001dea <MotorsHoming+0xce>
				if((IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 1)){
 8001dfe:	2104      	movs	r1, #4
 8001e00:	4874      	ldr	r0, [pc, #464]	@ (8001fd4 <MotorsHoming+0x2b8>)
 8001e02:	f000 fea7 	bl	8002b54 <IsSensorTriggered>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01d      	beq.n	8001e48 <MotorsHoming+0x12c>
					TMC2209_Stop(&motor[1]);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3364      	adds	r3, #100	@ 0x64
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fbdb 	bl	80015cc <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2264      	movs	r2, #100	@ 0x64
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2264      	movs	r2, #100	@ 0x64
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	2200      	movs	r2, #0
 8001e36:	645a      	str	r2, [r3, #68]	@ 0x44
	                motor[i].StepsFront = 0;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2264      	movs	r2, #100	@ 0x64
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	2200      	movs	r2, #0
 8001e46:	659a      	str	r2, [r3, #88]	@ 0x58
				}
			}
			TMC2209_Stop(&motor[1]);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3364      	adds	r3, #100	@ 0x64
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fbbd 	bl	80015cc <TMC2209_Stop>
		}
		if(i == 2){
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d158      	bne.n	8001f0a <MotorsHoming+0x1ee>
			TMC2209_SetDirection(&motor[2],1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	33c8      	adds	r3, #200	@ 0xc8
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fb2a 	bl	80014b8 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[2],16000);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	33c8      	adds	r3, #200	@ 0xc8
 8001e68:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fb4d 	bl	800150c <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0){
 8001e72:	2110      	movs	r1, #16
 8001e74:	4858      	ldr	r0, [pc, #352]	@ (8001fd8 <MotorsHoming+0x2bc>)
 8001e76:	f000 fe6d 	bl	8002b54 <IsSensorTriggered>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f083 0301 	eor.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03c      	beq.n	8001f00 <MotorsHoming+0x1e4>
				TMC2209_Start(&motor[2]);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	33c8      	adds	r3, #200	@ 0xc8
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fbb4 	bl	80015f8 <TMC2209_Start>
				while(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0);
 8001e90:	bf00      	nop
 8001e92:	2110      	movs	r1, #16
 8001e94:	4850      	ldr	r0, [pc, #320]	@ (8001fd8 <MotorsHoming+0x2bc>)
 8001e96:	f000 fe5d 	bl	8002b54 <IsSensorTriggered>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f5      	bne.n	8001e92 <MotorsHoming+0x176>
				if((IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 1)){
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	484b      	ldr	r0, [pc, #300]	@ (8001fd8 <MotorsHoming+0x2bc>)
 8001eaa:	f000 fe53 	bl	8002b54 <IsSensorTriggered>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d025      	beq.n	8001f00 <MotorsHoming+0x1e4>
					TMC2209_Stop(&motor[2]);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	33c8      	adds	r3, #200	@ 0xc8
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fb87 	bl	80015cc <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2264      	movs	r2, #100	@ 0x64
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2264      	movs	r2, #100	@ 0x64
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	2200      	movs	r2, #0
 8001ede:	645a      	str	r2, [r3, #68]	@ 0x44
				    motor[i].StepsFront = 0;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2264      	movs	r2, #100	@ 0x64
 8001ee4:	fb02 f303 	mul.w	r3, r2, r3
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	2200      	movs	r2, #0
 8001eee:	659a      	str	r2, [r3, #88]	@ 0x58
				    motor[i].StepsBack = 0;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2264      	movs	r2, #100	@ 0x64
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	65da      	str	r2, [r3, #92]	@ 0x5c

				}
			}
			TMC2209_Stop(&motor[2]);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	33c8      	adds	r3, #200	@ 0xc8
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fb61 	bl	80015cc <TMC2209_Stop>
	}
		if(i == 3){
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d154      	bne.n	8001fba <MotorsHoming+0x29e>
			TMC2209_SetDirection(&motor[3],0);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff facd 	bl	80014b8 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[3],10000);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001f24:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff faef 	bl	800150c <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0){
 8001f2e:	2108      	movs	r1, #8
 8001f30:	482a      	ldr	r0, [pc, #168]	@ (8001fdc <MotorsHoming+0x2c0>)
 8001f32:	f000 fe0f 	bl	8002b54 <IsSensorTriggered>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d035      	beq.n	8001fae <MotorsHoming+0x292>
				TMC2209_Start(&motor[3]);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fb55 	bl	80015f8 <TMC2209_Start>
				while(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0);
 8001f4e:	bf00      	nop
 8001f50:	2108      	movs	r1, #8
 8001f52:	4822      	ldr	r0, [pc, #136]	@ (8001fdc <MotorsHoming+0x2c0>)
 8001f54:	f000 fdfe 	bl	8002b54 <IsSensorTriggered>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f5      	bne.n	8001f50 <MotorsHoming+0x234>
				if((IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 1)){
 8001f64:	2108      	movs	r1, #8
 8001f66:	481d      	ldr	r0, [pc, #116]	@ (8001fdc <MotorsHoming+0x2c0>)
 8001f68:	f000 fdf4 	bl	8002b54 <IsSensorTriggered>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01d      	beq.n	8001fae <MotorsHoming+0x292>
					TMC2209_Stop(&motor[3]);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fb27 	bl	80015cc <TMC2209_Stop>
					motor[i].currentPositionMM = 450;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2264      	movs	r2, #100	@ 0x64
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a15      	ldr	r2, [pc, #84]	@ (8001fe0 <MotorsHoming+0x2c4>)
 8001f8c:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2264      	movs	r2, #100	@ 0x64
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
				    motor[i].StepsBack = 0;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2264      	movs	r2, #100	@ 0x64
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	2200      	movs	r2, #0
 8001fac:	65da      	str	r2, [r3, #92]	@ 0x5c
				}
			}
			TMC2209_Stop(&motor[3]);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fb09 	bl	80015cc <TMC2209_Stop>
	for(int i = 0; i<4; i++){
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	f77f aeb1 	ble.w	8001d2a <MotorsHoming+0xe>




}
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	43e10000 	.word	0x43e10000

08001fe4 <MotorControl_ButtonHandler>:
void MotorControl_ButtonHandler(Motor *motors) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	static uint8_t CtrPressedFlag = 0; // Flag to detect button press edge
	    // StepsFront[0] = 0;
	    uint32_t pressStartTime = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
	    uint32_t debounceTime = 50;
 8001ff0:	2332      	movs	r3, #50	@ 0x32
 8001ff2:	613b      	str	r3, [r7, #16]
	    uint32_t currentTime = HAL_GetTick();
 8001ff4:	f002 fd66 	bl	8004ac4 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]
	    static uint32_t lastPressTime = 0; // Last valid press timestamp

	    if (HAL_GPIO_ReadPin(BtnCtr_GPIO_Port, BtnCtr_Pin) == GPIO_PIN_SET) {
 8001ffa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ffe:	48b7      	ldr	r0, [pc, #732]	@ (80022dc <MotorControl_ButtonHandler+0x2f8>)
 8002000:	f003 fc58 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002004:	4603      	mov	r3, r0
 8002006:	2b01      	cmp	r3, #1
 8002008:	d10a      	bne.n	8002020 <MotorControl_ButtonHandler+0x3c>
	        if (CtrPressedFlag == 0) { // Only increment on first press
 800200a:	4bb5      	ldr	r3, [pc, #724]	@ (80022e0 <MotorControl_ButtonHandler+0x2fc>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 817a 	bne.w	8002308 <MotorControl_ButtonHandler+0x324>
	            pressStartTime = currentTime;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	617b      	str	r3, [r7, #20]
	            CtrPressedFlag = 1; // Set flag to avoid multiple increments
 8002018:	4bb1      	ldr	r3, [pc, #708]	@ (80022e0 <MotorControl_ButtonHandler+0x2fc>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e173      	b.n	8002308 <MotorControl_ButtonHandler+0x324>
	        }
	    } else {
	        if (CtrPressedFlag == 1 && (currentTime - pressStartTime) >= debounceTime) {
 8002020:	4baf      	ldr	r3, [pc, #700]	@ (80022e0 <MotorControl_ButtonHandler+0x2fc>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10e      	bne.n	8002046 <MotorControl_ButtonHandler+0x62>
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d808      	bhi.n	8002046 <MotorControl_ButtonHandler+0x62>
	            Pressed += 1;
 8002034:	4bab      	ldr	r3, [pc, #684]	@ (80022e4 <MotorControl_ButtonHandler+0x300>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4ba9      	ldr	r3, [pc, #676]	@ (80022e4 <MotorControl_ButtonHandler+0x300>)
 800203e:	701a      	strb	r2, [r3, #0]
	            lastPressTime = currentTime; // Update the last valid press time
 8002040:	4aa9      	ldr	r2, [pc, #676]	@ (80022e8 <MotorControl_ButtonHandler+0x304>)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6013      	str	r3, [r2, #0]
	              }
	        CtrPressedFlag = 0; // Reset flag when button is released
 8002046:	4ba6      	ldr	r3, [pc, #664]	@ (80022e0 <MotorControl_ButtonHandler+0x2fc>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
        switch (Pressed) {
 800204c:	4ba5      	ldr	r3, [pc, #660]	@ (80022e4 <MotorControl_ButtonHandler+0x300>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d003      	beq.n	800205c <MotorControl_ButtonHandler+0x78>
 8002054:	2b02      	cmp	r3, #2
 8002056:	f000 80a5 	beq.w	80021a4 <MotorControl_ButtonHandler+0x1c0>
 800205a:	e151      	b.n	8002300 <MotorControl_ButtonHandler+0x31c>
            case 1:
                // Save calibration for first press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160;
 800205c:	4ba3      	ldr	r3, [pc, #652]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	23c8      	movs	r3, #200	@ 0xc8
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	4a9f      	ldr	r2, [pc, #636]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	4611      	mov	r1, r2
 8002074:	22c8      	movs	r2, #200	@ 0xc8
 8002076:	fb01 f202 	mul.w	r2, r1, r2
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	440a      	add	r2, r1
 800207e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	bfb8      	it	lt
 8002086:	425b      	neglt	r3, r3
 8002088:	4a99      	ldr	r2, [pc, #612]	@ (80022f0 <MotorControl_ButtonHandler+0x30c>)
 800208a:	fb82 1203 	smull	r1, r2, r2, r3
 800208e:	1192      	asrs	r2, r2, #6
 8002090:	17db      	asrs	r3, r3, #31
 8002092:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2].currentPositionMM =
 8002094:	4b95      	ldr	r3, [pc, #596]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	23c8      	movs	r3, #200	@ 0xc8
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	ee07 1a90 	vmov	s15, r1
 80020a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ac:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400;
 80020b0:	4b8e      	ldr	r3, [pc, #568]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	23c8      	movs	r3, #200	@ 0xc8
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	3364      	adds	r3, #100	@ 0x64
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	4619      	mov	r1, r3
 80020c6:	4b89      	ldr	r3, [pc, #548]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	23c8      	movs	r3, #200	@ 0xc8
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	3364      	adds	r3, #100	@ 0x64
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bfb8      	it	lt
 80020e0:	425b      	neglt	r3, r3
 80020e2:	4a84      	ldr	r2, [pc, #528]	@ (80022f4 <MotorControl_ButtonHandler+0x310>)
 80020e4:	fb82 1203 	smull	r1, r2, r2, r3
 80020e8:	11d2      	asrs	r2, r2, #7
 80020ea:	17db      	asrs	r3, r3, #31
 80020ec:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2 + 1].currentPositionMM =
 80020ee:	4b7f      	ldr	r3, [pc, #508]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	23c8      	movs	r3, #200	@ 0xc8
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	3364      	adds	r3, #100	@ 0x64
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	ee07 1a90 	vmov	s15, r1
 8002104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002108:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

                motors[motorGroup * 2].calib[0] = motors[motorGroup * 2].currentPositionMM;
 800210c:	4b77      	ldr	r3, [pc, #476]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	23c8      	movs	r3, #200	@ 0xc8
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002120:	4b72      	ldr	r3, [pc, #456]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	23c8      	movs	r3, #200	@ 0xc8
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002134:	ee17 2a90 	vmov	r2, s15
 8002138:	b292      	uxth	r2, r2
 800213a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                motors[motorGroup * 2 + 1].calib[0] = motors[motorGroup * 2 + 1].currentPositionMM;
 800213e:	4b6b      	ldr	r3, [pc, #428]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	23c8      	movs	r3, #200	@ 0xc8
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	3364      	adds	r3, #100	@ 0x64
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002154:	4b65      	ldr	r3, [pc, #404]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	23c8      	movs	r3, #200	@ 0xc8
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	3364      	adds	r3, #100	@ 0x64
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216a:	ee17 2a90 	vmov	r2, s15
 800216e:	b292      	uxth	r2, r2
 8002170:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

                motors[motorGroup * 2].currentPositionMM = 0;
 8002174:	4b5d      	ldr	r3, [pc, #372]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	23c8      	movs	r3, #200	@ 0xc8
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	64da      	str	r2, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM = 0;
 800218a:	4b58      	ldr	r3, [pc, #352]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	23c8      	movs	r3, #200	@ 0xc8
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	3364      	adds	r3, #100	@ 0x64
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	64da      	str	r2, [r3, #76]	@ 0x4c
                break;
 80021a2:	e0b1      	b.n	8002308 <MotorControl_ButtonHandler+0x324>

            case 2:
                // Save calibration for second press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 80021a4:	4b51      	ldr	r3, [pc, #324]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	23c8      	movs	r3, #200	@ 0xc8
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	4a4d      	ldr	r2, [pc, #308]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	4611      	mov	r1, r2
 80021bc:	22c8      	movs	r2, #200	@ 0xc8
 80021be:	fb01 f202 	mul.w	r2, r1, r2
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	440a      	add	r2, r1
 80021c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bfb8      	it	lt
 80021ce:	425b      	neglt	r3, r3
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2].currentPositionMM =
 80021d8:	4b44      	ldr	r3, [pc, #272]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	23c8      	movs	r3, #200	@ 0xc8
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 80021e8:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80022f8 <MotorControl_ButtonHandler+0x314>
 80021ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2].currentPositionMM =
 80021f0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 80021f4:	4b3d      	ldr	r3, [pc, #244]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	23c8      	movs	r3, #200	@ 0xc8
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	3364      	adds	r3, #100	@ 0x64
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	4619      	mov	r1, r3
 800220a:	4b38      	ldr	r3, [pc, #224]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	23c8      	movs	r3, #200	@ 0xc8
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	3364      	adds	r3, #100	@ 0x64
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	1acb      	subs	r3, r1, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	bfb8      	it	lt
 8002224:	425b      	neglt	r3, r3
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2 + 1].currentPositionMM =
 800222e:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	23c8      	movs	r3, #200	@ 0xc8
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	3364      	adds	r3, #100	@ 0x64
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 8002240:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80022fc <MotorControl_ButtonHandler+0x318>
 8002244:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2 + 1].currentPositionMM =
 8002248:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

                motors[motorGroup * 2].calib[1] = motors[motorGroup * 2].currentPositionMM;
 800224c:	4b27      	ldr	r3, [pc, #156]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	23c8      	movs	r3, #200	@ 0xc8
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002260:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	23c8      	movs	r3, #200	@ 0xc8
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002274:	ee17 2a90 	vmov	r2, s15
 8002278:	b292      	uxth	r2, r2
 800227a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                motors[motorGroup * 2 + 1].calib[1] = motors[motorGroup * 2 + 1].currentPositionMM;
 800227e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	23c8      	movs	r3, #200	@ 0xc8
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	3364      	adds	r3, #100	@ 0x64
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002294:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	23c8      	movs	r3, #200	@ 0xc8
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	3364      	adds	r3, #100	@ 0x64
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022aa:	ee17 2a90 	vmov	r2, s15
 80022ae:	b292      	uxth	r2, r2
 80022b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                motorGroup += 1;
 80022b4:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80022be:	701a      	strb	r2, [r3, #0]
                if (motorGroup >= 2) {
 80022c0:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d902      	bls.n	80022ce <MotorControl_ButtonHandler+0x2ea>
                       motorGroup = 0;  // Reset or handle as per your system's requirement
 80022c8:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <MotorControl_ButtonHandler+0x308>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
                  }
                // Perform homing for all motors
                  MotorsHoming(motors);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fd24 	bl	8001d1c <MotorsHoming>
//                for(int i = 0; i < 4; i++) {
//                TMC2209_MoveTo(axis,motorIndex,targetPositionMM);
//              }

           // Reset Pressed counter to prevent further calibration steps
                Pressed = 0;
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <MotorControl_ButtonHandler+0x300>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
                    break;
 80022da:	e015      	b.n	8002308 <MotorControl_ButtonHandler+0x324>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	20000298 	.word	0x20000298
 80022e4:	20000284 	.word	0x20000284
 80022e8:	2000029c 	.word	0x2000029c
 80022ec:	20000286 	.word	0x20000286
 80022f0:	66666667 	.word	0x66666667
 80022f4:	51eb851f 	.word	0x51eb851f
 80022f8:	43200000 	.word	0x43200000
 80022fc:	43c80000 	.word	0x43c80000

                 default:
                                // Handle unexpected Pressed value
                   Pressed = 0;
 8002300:	4b7c      	ldr	r3, [pc, #496]	@ (80024f4 <MotorControl_ButtonHandler+0x510>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
                   break;
 8002306:	bf00      	nop

    }



	if(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 8002308:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800230c:	487a      	ldr	r0, [pc, #488]	@ (80024f8 <MotorControl_ButtonHandler+0x514>)
 800230e:	f003 fad1 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d11f      	bne.n	8002358 <MotorControl_ButtonHandler+0x374>
		    // Send one step for each millisecond the button is pressed
	    //setMicrosteppingResolution(&motors[motorGroup *2], 16);
		//TMC2209_SetSpeed(&motors[motorGroup *2+1],16000);
			//StepsFront[0] = 0;
            //LastSteps[0] += StepsFront[0];
			TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_SET);
 8002318:	4b78      	ldr	r3, [pc, #480]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	23c8      	movs	r3, #200	@ 0xc8
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f8c4 	bl	80014b8 <TMC2209_SetDirection>
		    TMC2209_Start_C(&motors[motorGroup * 2]);
 8002330:	4b72      	ldr	r3, [pc, #456]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	23c8      	movs	r3, #200	@ 0xc8
 8002338:	fb02 f303 	mul.w	r3, r2, r3
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f973 	bl	800162c <TMC2209_Start_C>
		    while(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 8002346:	bf00      	nop
 8002348:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800234c:	486a      	ldr	r0, [pc, #424]	@ (80024f8 <MotorControl_ButtonHandler+0x514>)
 800234e:	f003 fab1 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f7      	beq.n	8002348 <MotorControl_ButtonHandler+0x364>
//        	TMC2209_Stop(&motors[motorGroup * 2]);
//        	StepsFront[0] = 0;

    	//}
}
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_SET ) {
 8002358:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800235c:	4866      	ldr	r0, [pc, #408]	@ (80024f8 <MotorControl_ButtonHandler+0x514>)
 800235e:	f003 faa9 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10a      	bne.n	800237e <MotorControl_ButtonHandler+0x39a>
    	TMC2209_Stop(&motors[motorGroup * 2]);
 8002368:	4b64      	ldr	r3, [pc, #400]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	23c8      	movs	r3, #200	@ 0xc8
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f927 	bl	80015cc <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 800237e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002382:	485d      	ldr	r0, [pc, #372]	@ (80024f8 <MotorControl_ButtonHandler+0x514>)
 8002384:	f003 fa96 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11f      	bne.n	80023ce <MotorControl_ButtonHandler+0x3ea>
		//motors[motorGroup*2].stepsTaken = 0;
		//StepsBack[0] = 0;
		//StepsBack[0] += motors[motorGroup*2].stepsTaken;
		TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_RESET);
 800238e:	4b5b      	ldr	r3, [pc, #364]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	23c8      	movs	r3, #200	@ 0xc8
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff f889 	bl	80014b8 <TMC2209_SetDirection>
		TMC2209_Start_C(&motors[motorGroup * 2]);
 80023a6:	4b55      	ldr	r3, [pc, #340]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	23c8      	movs	r3, #200	@ 0xc8
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f938 	bl	800162c <TMC2209_Start_C>
		while(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 80023bc:	bf00      	nop
 80023be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c2:	484d      	ldr	r0, [pc, #308]	@ (80024f8 <MotorControl_ButtonHandler+0x514>)
 80023c4:	f003 fa76 	bl	80058b4 <HAL_GPIO_ReadPin>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f7      	beq.n	80023be <MotorControl_ButtonHandler+0x3da>
//
//    	}


}
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_SET || StepsBack[0] > 28000) {
 80023ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023d2:	4849      	ldr	r0, [pc, #292]	@ (80024f8 <MotorControl_ButtonHandler+0x514>)
 80023d4:	f003 fa6e 	bl	80058b4 <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d005      	beq.n	80023ea <MotorControl_ButtonHandler+0x406>
 80023de:	4b48      	ldr	r3, [pc, #288]	@ (8002500 <MotorControl_ButtonHandler+0x51c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f646 5260 	movw	r2, #28000	@ 0x6d60
 80023e6:	4293      	cmp	r3, r2
 80023e8:	dd0a      	ble.n	8002400 <MotorControl_ButtonHandler+0x41c>
        // Button 1 pressed (Step Motor in one direction)
    	TMC2209_Stop(&motors[motorGroup * 2]);
 80023ea:	4b44      	ldr	r3, [pc, #272]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	23c8      	movs	r3, #200	@ 0xc8
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f8e6 	bl	80015cc <TMC2209_Stop>

        //TMC2209_CountSteps_C(&motors[motorGroup * 2],StepsBack[0]);
    }


	if(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET){
 8002400:	2102      	movs	r1, #2
 8002402:	4840      	ldr	r0, [pc, #256]	@ (8002504 <MotorControl_ButtonHandler+0x520>)
 8002404:	f003 fa56 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d120      	bne.n	8002450 <MotorControl_ButtonHandler+0x46c>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_SET);
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	23c8      	movs	r3, #200	@ 0xc8
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	3364      	adds	r3, #100	@ 0x64
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f848 	bl	80014b8 <TMC2209_SetDirection>
        TMC2209_Start_C(&motors[motorGroup * 2+1]);
 8002428:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	23c8      	movs	r3, #200	@ 0xc8
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	3364      	adds	r3, #100	@ 0x64
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff f8f6 	bl	800162c <TMC2209_Start_C>
        while(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET);
 8002440:	bf00      	nop
 8002442:	2102      	movs	r1, #2
 8002444:	482f      	ldr	r0, [pc, #188]	@ (8002504 <MotorControl_ButtonHandler+0x520>)
 8002446:	f003 fa35 	bl	80058b4 <HAL_GPIO_ReadPin>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f8      	beq.n	8002442 <MotorControl_ButtonHandler+0x45e>
}
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_SET) {
 8002450:	2102      	movs	r1, #2
 8002452:	482c      	ldr	r0, [pc, #176]	@ (8002504 <MotorControl_ButtonHandler+0x520>)
 8002454:	f003 fa2e 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002458:	4603      	mov	r3, r0
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10b      	bne.n	8002476 <MotorControl_ButtonHandler+0x492>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2 + 1]);
 800245e:	4b27      	ldr	r3, [pc, #156]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	23c8      	movs	r3, #200	@ 0xc8
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	3364      	adds	r3, #100	@ 0x64
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f8ab 	bl	80015cc <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET){
 8002476:	2101      	movs	r1, #1
 8002478:	4822      	ldr	r0, [pc, #136]	@ (8002504 <MotorControl_ButtonHandler+0x520>)
 800247a:	f003 fa1b 	bl	80058b4 <HAL_GPIO_ReadPin>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d120      	bne.n	80024c6 <MotorControl_ButtonHandler+0x4e2>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_RESET);
 8002484:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	23c8      	movs	r3, #200	@ 0xc8
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	3364      	adds	r3, #100	@ 0x64
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f80d 	bl	80014b8 <TMC2209_SetDirection>
        TMC2209_Start_C(&motors[motorGroup * 2+1]);
 800249e:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	23c8      	movs	r3, #200	@ 0xc8
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	3364      	adds	r3, #100	@ 0x64
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff f8bb 	bl	800162c <TMC2209_Start_C>
        while(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET);
 80024b6:	bf00      	nop
 80024b8:	2101      	movs	r1, #1
 80024ba:	4812      	ldr	r0, [pc, #72]	@ (8002504 <MotorControl_ButtonHandler+0x520>)
 80024bc:	f003 f9fa 	bl	80058b4 <HAL_GPIO_ReadPin>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f8      	beq.n	80024b8 <MotorControl_ButtonHandler+0x4d4>
}
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_SET) {
 80024c6:	2101      	movs	r1, #1
 80024c8:	480e      	ldr	r0, [pc, #56]	@ (8002504 <MotorControl_ButtonHandler+0x520>)
 80024ca:	f003 f9f3 	bl	80058b4 <HAL_GPIO_ReadPin>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10b      	bne.n	80024ec <MotorControl_ButtonHandler+0x508>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2+1]);
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <MotorControl_ButtonHandler+0x518>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	23c8      	movs	r3, #200	@ 0xc8
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	3364      	adds	r3, #100	@ 0x64
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f870 	bl	80015cc <TMC2209_Stop>
    }
}
 80024ec:	bf00      	nop
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000284 	.word	0x20000284
 80024f8:	40021400 	.word	0x40021400
 80024fc:	20000286 	.word	0x20000286
 8002500:	20000274 	.word	0x20000274
 8002504:	40021800 	.word	0x40021800

08002508 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	e24b      	b.n	80029ac <initializeMotors+0x4a4>
    	// Setting all for all drivers/motors
    	motors[i].driver.huart = &huart2; // UART handler
 8002514:	4ab8      	ldr	r2, [pc, #736]	@ (80027f8 <initializeMotors+0x2f0>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2164      	movs	r1, #100	@ 0x64
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3304      	adds	r3, #4
 8002522:	4ab6      	ldr	r2, [pc, #728]	@ (80027fc <initializeMotors+0x2f4>)
 8002524:	601a      	str	r2, [r3, #0]
    	motors[i].driver.address = 0x00+i; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	b2d8      	uxtb	r0, r3
 800252a:	4ab3      	ldr	r2, [pc, #716]	@ (80027f8 <initializeMotors+0x2f0>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2164      	movs	r1, #100	@ 0x64
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3308      	adds	r3, #8
 8002538:	4602      	mov	r2, r0
 800253a:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i + 1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	b2d8      	uxtb	r0, r3
 8002544:	4aac      	ldr	r2, [pc, #688]	@ (80027f8 <initializeMotors+0x2f0>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2164      	movs	r1, #100	@ 0x64
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	4602      	mov	r2, r0
 8002552:	701a      	strb	r2, [r3, #0]

        motors[i].stepsTaken = 0;
 8002554:	4aa8      	ldr	r2, [pc, #672]	@ (80027f8 <initializeMotors+0x2f0>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2164      	movs	r1, #100	@ 0x64
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3344      	adds	r3, #68	@ 0x44
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 8002566:	4aa4      	ldr	r2, [pc, #656]	@ (80027f8 <initializeMotors+0x2f0>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2164      	movs	r1, #100	@ 0x64
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3348      	adds	r3, #72	@ 0x48
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8002578:	4a9f      	ldr	r2, [pc, #636]	@ (80027f8 <initializeMotors+0x2f0>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2164      	movs	r1, #100	@ 0x64
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	334c      	adds	r3, #76	@ 0x4c
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 800258c:	4a9a      	ldr	r2, [pc, #616]	@ (80027f8 <initializeMotors+0x2f0>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2164      	movs	r1, #100	@ 0x64
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3350      	adds	r3, #80	@ 0x50
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 80025a0:	4a95      	ldr	r2, [pc, #596]	@ (80027f8 <initializeMotors+0x2f0>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2164      	movs	r1, #100	@ 0x64
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3354      	adds	r3, #84	@ 0x54
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 8081 	bne.w	80026bc <initializeMotors+0x1b4>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 80025ba:	4a8f      	ldr	r2, [pc, #572]	@ (80027f8 <initializeMotors+0x2f0>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2164      	movs	r1, #100	@ 0x64
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	330c      	adds	r3, #12
 80025c8:	4a8d      	ldr	r2, [pc, #564]	@ (8002800 <initializeMotors+0x2f8>)
 80025ca:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 80025cc:	4a8a      	ldr	r2, [pc, #552]	@ (80027f8 <initializeMotors+0x2f0>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2164      	movs	r1, #100	@ 0x64
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3310      	adds	r3, #16
 80025da:	2208      	movs	r2, #8
 80025dc:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 16;
 80025de:	4a86      	ldr	r2, [pc, #536]	@ (80027f8 <initializeMotors+0x2f0>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2164      	movs	r1, #100	@ 0x64
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	3302      	adds	r3, #2
 80025ec:	2210      	movs	r2, #16
 80025ee:	801a      	strh	r2, [r3, #0]
        motors[i].stepsPerRevolution = 400;
 80025f0:	4a81      	ldr	r2, [pc, #516]	@ (80027f8 <initializeMotors+0x2f0>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2164      	movs	r1, #100	@ 0x64
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	333c      	adds	r3, #60	@ 0x3c
 80025fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002602:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = GPIOB;
 8002604:	4a7c      	ldr	r2, [pc, #496]	@ (80027f8 <initializeMotors+0x2f0>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2164      	movs	r1, #100	@ 0x64
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3314      	adds	r3, #20
 8002612:	4a7c      	ldr	r2, [pc, #496]	@ (8002804 <initializeMotors+0x2fc>)
 8002614:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = GPIO_PIN_10;
 8002616:	4a78      	ldr	r2, [pc, #480]	@ (80027f8 <initializeMotors+0x2f0>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2164      	movs	r1, #100	@ 0x64
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3318      	adds	r3, #24
 8002624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002628:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = GPIOF;
 800262a:	4a73      	ldr	r2, [pc, #460]	@ (80027f8 <initializeMotors+0x2f0>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2164      	movs	r1, #100	@ 0x64
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	331c      	adds	r3, #28
 8002638:	4a73      	ldr	r2, [pc, #460]	@ (8002808 <initializeMotors+0x300>)
 800263a:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = GPIO_PIN_7;
 800263c:	4a6e      	ldr	r2, [pc, #440]	@ (80027f8 <initializeMotors+0x2f0>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2164      	movs	r1, #100	@ 0x64
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3320      	adds	r3, #32
 800264a:	2280      	movs	r2, #128	@ 0x80
 800264c:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = GPIOB;
 800264e:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <initializeMotors+0x2f0>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2164      	movs	r1, #100	@ 0x64
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3324      	adds	r3, #36	@ 0x24
 800265c:	4a69      	ldr	r2, [pc, #420]	@ (8002804 <initializeMotors+0x2fc>)
 800265e:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = GPIO_PIN_11;
 8002660:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <initializeMotors+0x2f0>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2164      	movs	r1, #100	@ 0x64
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3328      	adds	r3, #40	@ 0x28
 800266e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002672:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = GPIOD;
 8002674:	4a60      	ldr	r2, [pc, #384]	@ (80027f8 <initializeMotors+0x2f0>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2164      	movs	r1, #100	@ 0x64
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	332c      	adds	r3, #44	@ 0x2c
 8002682:	4a62      	ldr	r2, [pc, #392]	@ (800280c <initializeMotors+0x304>)
 8002684:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = GPIO_PIN_1;
 8002686:	4a5c      	ldr	r2, [pc, #368]	@ (80027f8 <initializeMotors+0x2f0>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2164      	movs	r1, #100	@ 0x64
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3330      	adds	r3, #48	@ 0x30
 8002694:	2202      	movs	r2, #2
 8002696:	801a      	strh	r2, [r3, #0]
        motors[i].driver.index_port = GPIOA;
 8002698:	4a57      	ldr	r2, [pc, #348]	@ (80027f8 <initializeMotors+0x2f0>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2164      	movs	r1, #100	@ 0x64
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3334      	adds	r3, #52	@ 0x34
 80026a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002810 <initializeMotors+0x308>)
 80026a8:	601a      	str	r2, [r3, #0]
        motors[i].driver.index_pin = GPIO_PIN_5;
 80026aa:	4a53      	ldr	r2, [pc, #332]	@ (80027f8 <initializeMotors+0x2f0>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2164      	movs	r1, #100	@ 0x64
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	3338      	adds	r3, #56	@ 0x38
 80026b8:	2220      	movs	r2, #32
 80026ba:	801a      	strh	r2, [r3, #0]
        }


        if(i == 1){
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d17d      	bne.n	80027be <initializeMotors+0x2b6>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 80026c2:	4a4d      	ldr	r2, [pc, #308]	@ (80027f8 <initializeMotors+0x2f0>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2164      	movs	r1, #100	@ 0x64
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	330c      	adds	r3, #12
 80026d0:	4a50      	ldr	r2, [pc, #320]	@ (8002814 <initializeMotors+0x30c>)
 80026d2:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 80026d4:	4a48      	ldr	r2, [pc, #288]	@ (80027f8 <initializeMotors+0x2f0>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2164      	movs	r1, #100	@ 0x64
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3310      	adds	r3, #16
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80026e6:	4a44      	ldr	r2, [pc, #272]	@ (80027f8 <initializeMotors+0x2f0>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2164      	movs	r1, #100	@ 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3302      	adds	r3, #2
 80026f4:	2210      	movs	r2, #16
 80026f6:	801a      	strh	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 80026f8:	4a3f      	ldr	r2, [pc, #252]	@ (80027f8 <initializeMotors+0x2f0>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2164      	movs	r1, #100	@ 0x64
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	333c      	adds	r3, #60	@ 0x3c
 8002706:	22c8      	movs	r2, #200	@ 0xc8
 8002708:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOA;
 800270a:	4a3b      	ldr	r2, [pc, #236]	@ (80027f8 <initializeMotors+0x2f0>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2164      	movs	r1, #100	@ 0x64
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3314      	adds	r3, #20
 8002718:	4a3d      	ldr	r2, [pc, #244]	@ (8002810 <initializeMotors+0x308>)
 800271a:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_6;
 800271c:	4a36      	ldr	r2, [pc, #216]	@ (80027f8 <initializeMotors+0x2f0>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2164      	movs	r1, #100	@ 0x64
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3318      	adds	r3, #24
 800272a:	2240      	movs	r2, #64	@ 0x40
 800272c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOA;
 800272e:	4a32      	ldr	r2, [pc, #200]	@ (80027f8 <initializeMotors+0x2f0>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2164      	movs	r1, #100	@ 0x64
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	331c      	adds	r3, #28
 800273c:	4a34      	ldr	r2, [pc, #208]	@ (8002810 <initializeMotors+0x308>)
 800273e:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_7;
 8002740:	4a2d      	ldr	r2, [pc, #180]	@ (80027f8 <initializeMotors+0x2f0>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2164      	movs	r1, #100	@ 0x64
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3320      	adds	r3, #32
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOA;
 8002752:	4a29      	ldr	r2, [pc, #164]	@ (80027f8 <initializeMotors+0x2f0>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2164      	movs	r1, #100	@ 0x64
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3324      	adds	r3, #36	@ 0x24
 8002760:	4a2b      	ldr	r2, [pc, #172]	@ (8002810 <initializeMotors+0x308>)
 8002762:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_5;
 8002764:	4a24      	ldr	r2, [pc, #144]	@ (80027f8 <initializeMotors+0x2f0>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2164      	movs	r1, #100	@ 0x64
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3328      	adds	r3, #40	@ 0x28
 8002772:	2220      	movs	r2, #32
 8002774:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 8002776:	4a20      	ldr	r2, [pc, #128]	@ (80027f8 <initializeMotors+0x2f0>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2164      	movs	r1, #100	@ 0x64
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	332c      	adds	r3, #44	@ 0x2c
 8002784:	4a21      	ldr	r2, [pc, #132]	@ (800280c <initializeMotors+0x304>)
 8002786:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 8002788:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <initializeMotors+0x2f0>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2164      	movs	r1, #100	@ 0x64
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3330      	adds	r3, #48	@ 0x30
 8002796:	2202      	movs	r2, #2
 8002798:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 800279a:	4a17      	ldr	r2, [pc, #92]	@ (80027f8 <initializeMotors+0x2f0>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2164      	movs	r1, #100	@ 0x64
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	3334      	adds	r3, #52	@ 0x34
 80027a8:	4a19      	ldr	r2, [pc, #100]	@ (8002810 <initializeMotors+0x308>)
 80027aa:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 80027ac:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <initializeMotors+0x2f0>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2164      	movs	r1, #100	@ 0x64
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	3338      	adds	r3, #56	@ 0x38
 80027ba:	2220      	movs	r2, #32
 80027bc:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	f040 8080 	bne.w	80028c6 <initializeMotors+0x3be>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim9;				 // TIMER HANDLER
 80027c6:	4a0c      	ldr	r2, [pc, #48]	@ (80027f8 <initializeMotors+0x2f0>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2164      	movs	r1, #100	@ 0x64
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	330c      	adds	r3, #12
 80027d4:	4a10      	ldr	r2, [pc, #64]	@ (8002818 <initializeMotors+0x310>)
 80027d6:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 80027d8:	4a07      	ldr	r2, [pc, #28]	@ (80027f8 <initializeMotors+0x2f0>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2164      	movs	r1, #100	@ 0x64
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3310      	adds	r3, #16
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80027ea:	4a03      	ldr	r2, [pc, #12]	@ (80027f8 <initializeMotors+0x2f0>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2164      	movs	r1, #100	@ 0x64
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	e011      	b.n	800281c <initializeMotors+0x314>
 80027f8:	2000248c 	.word	0x2000248c
 80027fc:	20001e2c 	.word	0x20001e2c
 8002800:	20001bcc 	.word	0x20001bcc
 8002804:	40020400 	.word	0x40020400
 8002808:	40021400 	.word	0x40021400
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40020000 	.word	0x40020000
 8002814:	20001c18 	.word	0x20001c18
 8002818:	20001d48 	.word	0x20001d48
 800281c:	3302      	adds	r3, #2
 800281e:	2210      	movs	r2, #16
 8002820:	801a      	strh	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 8002822:	4a68      	ldr	r2, [pc, #416]	@ (80029c4 <initializeMotors+0x4bc>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2164      	movs	r1, #100	@ 0x64
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	333c      	adds	r3, #60	@ 0x3c
 8002830:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002834:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = GPIOE;
 8002836:	4a63      	ldr	r2, [pc, #396]	@ (80029c4 <initializeMotors+0x4bc>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2164      	movs	r1, #100	@ 0x64
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3314      	adds	r3, #20
 8002844:	4a60      	ldr	r2, [pc, #384]	@ (80029c8 <initializeMotors+0x4c0>)
 8002846:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_5;
 8002848:	4a5e      	ldr	r2, [pc, #376]	@ (80029c4 <initializeMotors+0x4bc>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2164      	movs	r1, #100	@ 0x64
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3318      	adds	r3, #24
 8002856:	2220      	movs	r2, #32
 8002858:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOE;
 800285a:	4a5a      	ldr	r2, [pc, #360]	@ (80029c4 <initializeMotors+0x4bc>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2164      	movs	r1, #100	@ 0x64
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	331c      	adds	r3, #28
 8002868:	4a57      	ldr	r2, [pc, #348]	@ (80029c8 <initializeMotors+0x4c0>)
 800286a:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_6;
 800286c:	4a55      	ldr	r2, [pc, #340]	@ (80029c4 <initializeMotors+0x4bc>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2164      	movs	r1, #100	@ 0x64
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3320      	adds	r3, #32
 800287a:	2240      	movs	r2, #64	@ 0x40
 800287c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOE;
 800287e:	4a51      	ldr	r2, [pc, #324]	@ (80029c4 <initializeMotors+0x4bc>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2164      	movs	r1, #100	@ 0x64
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3324      	adds	r3, #36	@ 0x24
 800288c:	4a4e      	ldr	r2, [pc, #312]	@ (80029c8 <initializeMotors+0x4c0>)
 800288e:	601a      	str	r2, [r3, #0]
        	motors[i].driver.enn_pin = GPIO_PIN_3;
 8002890:	4a4c      	ldr	r2, [pc, #304]	@ (80029c4 <initializeMotors+0x4bc>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2164      	movs	r1, #100	@ 0x64
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3328      	adds	r3, #40	@ 0x28
 800289e:	2208      	movs	r2, #8
 80028a0:	801a      	strh	r2, [r3, #0]
        	motors[i].driver.diag_port = GPIOD;
 80028a2:	4a48      	ldr	r2, [pc, #288]	@ (80029c4 <initializeMotors+0x4bc>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2164      	movs	r1, #100	@ 0x64
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	332c      	adds	r3, #44	@ 0x2c
 80028b0:	4a46      	ldr	r2, [pc, #280]	@ (80029cc <initializeMotors+0x4c4>)
 80028b2:	601a      	str	r2, [r3, #0]
        	motors[i].driver.diag_pin = GPIO_PIN_1;
 80028b4:	4a43      	ldr	r2, [pc, #268]	@ (80029c4 <initializeMotors+0x4bc>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2164      	movs	r1, #100	@ 0x64
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3330      	adds	r3, #48	@ 0x30
 80028c2:	2202      	movs	r2, #2
 80028c4:	801a      	strh	r2, [r3, #0]
        	           // motors[i].driver.index_pin = GPIO_PIN_5;


        }

        if(i == 3){
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d16c      	bne.n	80029a6 <initializeMotors+0x49e>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim10;				 // TIMER HANDLER
 80028cc:	4a3d      	ldr	r2, [pc, #244]	@ (80029c4 <initializeMotors+0x4bc>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2164      	movs	r1, #100	@ 0x64
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	330c      	adds	r3, #12
 80028da:	4a3d      	ldr	r2, [pc, #244]	@ (80029d0 <initializeMotors+0x4c8>)
 80028dc:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 80028de:	4a39      	ldr	r2, [pc, #228]	@ (80029c4 <initializeMotors+0x4bc>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2164      	movs	r1, #100	@ 0x64
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3310      	adds	r3, #16
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80028f0:	4a34      	ldr	r2, [pc, #208]	@ (80029c4 <initializeMotors+0x4bc>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2164      	movs	r1, #100	@ 0x64
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3302      	adds	r3, #2
 80028fe:	2210      	movs	r2, #16
 8002900:	801a      	strh	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8002902:	4a30      	ldr	r2, [pc, #192]	@ (80029c4 <initializeMotors+0x4bc>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2164      	movs	r1, #100	@ 0x64
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	333c      	adds	r3, #60	@ 0x3c
 8002910:	22c8      	movs	r2, #200	@ 0xc8
 8002912:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 8002914:	4a2b      	ldr	r2, [pc, #172]	@ (80029c4 <initializeMotors+0x4bc>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2164      	movs	r1, #100	@ 0x64
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3314      	adds	r3, #20
 8002922:	4a2c      	ldr	r2, [pc, #176]	@ (80029d4 <initializeMotors+0x4cc>)
 8002924:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_8;
 8002926:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <initializeMotors+0x4bc>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2164      	movs	r1, #100	@ 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	3318      	adds	r3, #24
 8002934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002938:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOD;
 800293a:	4a22      	ldr	r2, [pc, #136]	@ (80029c4 <initializeMotors+0x4bc>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2164      	movs	r1, #100	@ 0x64
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	331c      	adds	r3, #28
 8002948:	4a20      	ldr	r2, [pc, #128]	@ (80029cc <initializeMotors+0x4c4>)
 800294a:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_0;
 800294c:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <initializeMotors+0x4bc>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2164      	movs	r1, #100	@ 0x64
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3320      	adds	r3, #32
 800295a:	2201      	movs	r2, #1
 800295c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOF;
 800295e:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <initializeMotors+0x4bc>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2164      	movs	r1, #100	@ 0x64
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3324      	adds	r3, #36	@ 0x24
 800296c:	4a1a      	ldr	r2, [pc, #104]	@ (80029d8 <initializeMotors+0x4d0>)
 800296e:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_0;
 8002970:	4a14      	ldr	r2, [pc, #80]	@ (80029c4 <initializeMotors+0x4bc>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2164      	movs	r1, #100	@ 0x64
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3328      	adds	r3, #40	@ 0x28
 800297e:	2201      	movs	r2, #1
 8002980:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 8002982:	4a10      	ldr	r2, [pc, #64]	@ (80029c4 <initializeMotors+0x4bc>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2164      	movs	r1, #100	@ 0x64
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	332c      	adds	r3, #44	@ 0x2c
 8002990:	4a0e      	ldr	r2, [pc, #56]	@ (80029cc <initializeMotors+0x4c4>)
 8002992:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 8002994:	4a0b      	ldr	r2, [pc, #44]	@ (80029c4 <initializeMotors+0x4bc>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2164      	movs	r1, #100	@ 0x64
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3330      	adds	r3, #48	@ 0x30
 80029a2:	2202      	movs	r2, #2
 80029a4:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3301      	adds	r3, #1
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	f77f adb0 	ble.w	8002514 <initializeMotors+0xc>


    }


}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	2000248c 	.word	0x2000248c
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	20001d94 	.word	0x20001d94
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40021400 	.word	0x40021400

080029dc <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    axis->motors[1]->currentPositionMM = 0;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	64da      	str	r2, [r3, #76]	@ 0x4c
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	8852      	ldrh	r2, [r2, #2]
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40
    axis->stepPerUnit = totalStepsPerRevolution / circumference;;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f103 0014 	add.w	r0, r3, #20
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <initializeAxis+0x98>)
 8002a4a:	210a      	movs	r1, #10
 8002a4c:	f00d f8e2 	bl	800fc14 <sniprintf>
    if (motor2 != NULL) {
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <initializeAxis+0x90>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f103 001e 	add.w	r0, r3, #30
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	4a03      	ldr	r2, [pc, #12]	@ (8002a74 <initializeAxis+0x98>)
 8002a66:	210a      	movs	r1, #10
 8002a68:	f00d f8d4 	bl	800fc14 <sniprintf>
    }
}
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	08012528 	.word	0x08012528

08002a78 <initializeSystem>:

void initializeSystem(){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af02      	add	r7, sp, #8
    // X-axis
    initializeAxis(&axes[0], &motors[0],&motors[2], 40, "Y");
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <initializeSystem+0x2c>)
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2328      	movs	r3, #40	@ 0x28
 8002a84:	4a08      	ldr	r2, [pc, #32]	@ (8002aa8 <initializeSystem+0x30>)
 8002a86:	4909      	ldr	r1, [pc, #36]	@ (8002aac <initializeSystem+0x34>)
 8002a88:	4809      	ldr	r0, [pc, #36]	@ (8002ab0 <initializeSystem+0x38>)
 8002a8a:	f7ff ffa7 	bl	80029dc <initializeAxis>
    initializeAxis(&axes[1], &motors[1],&motors[3], 8, "X");
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <initializeSystem+0x3c>)
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2308      	movs	r3, #8
 8002a94:	4a08      	ldr	r2, [pc, #32]	@ (8002ab8 <initializeSystem+0x40>)
 8002a96:	4909      	ldr	r1, [pc, #36]	@ (8002abc <initializeSystem+0x44>)
 8002a98:	4809      	ldr	r0, [pc, #36]	@ (8002ac0 <initializeSystem+0x48>)
 8002a9a:	f7ff ff9f 	bl	80029dc <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[1], &motors[1], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	08012530 	.word	0x08012530
 8002aa8:	20002554 	.word	0x20002554
 8002aac:	2000248c 	.word	0x2000248c
 8002ab0:	2000261c 	.word	0x2000261c
 8002ab4:	08012534 	.word	0x08012534
 8002ab8:	200025b8 	.word	0x200025b8
 8002abc:	200024f0 	.word	0x200024f0
 8002ac0:	20002644 	.word	0x20002644

08002ac4 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	213c      	movs	r1, #60	@ 0x3c
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f006 f8b8 	bl	8008c48 <HAL_TIM_Encoder_Start>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <CheckConnection>:



#include "extras.h"

bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo1){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, 50);
 8002aea:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002b40 <CheckConnection+0x60>
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 faaa 	bl	8003048 <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 52);
 8002af4:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002b44 <CheckConnection+0x64>
 8002af8:	6838      	ldr	r0, [r7, #0]
 8002afa:	f000 faa5 	bl	8003048 <SERVO_WritePosition>
	HAL_Delay(2000);
 8002afe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b02:	f001 ffeb 	bl	8004adc <HAL_Delay>
	bool x =0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin) == GPIO_PIN_SET){
 8002b0a:	2108      	movs	r1, #8
 8002b0c:	480e      	ldr	r0, [pc, #56]	@ (8002b48 <CheckConnection+0x68>)
 8002b0e:	f002 fed1 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <CheckConnection+0x3e>
	     x = true;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
 8002b1c:	e001      	b.n	8002b22 <CheckConnection+0x42>
	}
	else{
		 x=false;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
	}
	SERVO_WritePosition(hservo, 90);
 8002b22:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002b4c <CheckConnection+0x6c>
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa8e 	bl	8003048 <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 92);
 8002b2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002b50 <CheckConnection+0x70>
 8002b30:	6838      	ldr	r0, [r7, #0]
 8002b32:	f000 fa89 	bl	8003048 <SERVO_WritePosition>
	return x;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	42480000 	.word	0x42480000
 8002b44:	42500000 	.word	0x42500000
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	42b40000 	.word	0x42b40000
 8002b50:	42b80000 	.word	0x42b80000

08002b54 <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 8002b60:	887b      	ldrh	r3, [r7, #2]
 8002b62:	4619      	mov	r1, r3
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f002 fea5 	bl	80058b4 <HAL_GPIO_ReadPin>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <IsSensorTriggered+0x24>
    	return false;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 8002b78:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <myprintf>:
void uart_transmit_string(const char *str) {
    HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

// UART-based custom printf
void myprintf(const char *fmt, ...) {
 8002b84:	b40f      	push	{r0, r1, r2, r3}
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b9a:	480a      	ldr	r0, [pc, #40]	@ (8002bc4 <myprintf+0x40>)
 8002b9c:	f00d f8fc 	bl	800fd98 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002ba0:	4808      	ldr	r0, [pc, #32]	@ (8002bc4 <myprintf+0x40>)
 8002ba2:	f7fd fb35 	bl	8000210 <strlen>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	4905      	ldr	r1, [pc, #20]	@ (8002bc4 <myprintf+0x40>)
 8002bb0:	4805      	ldr	r0, [pc, #20]	@ (8002bc8 <myprintf+0x44>)
 8002bb2:	f007 f8a9 	bl	8009d08 <HAL_UART_Transmit>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bc0:	b004      	add	sp, #16
 8002bc2:	4770      	bx	lr
 8002bc4:	20001a14 	.word	0x20001a14
 8002bc8:	20001eb4 	.word	0x20001eb4

08002bcc <parse_gcode>:
//    }
//}


/* Parse a single G-code line for X, Y, and Z coordinates */
void parse_gcode(const char *line) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    float x = 0.0f, y = 0.0f, z = 0.0f;
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
    bool x_found = false, y_found = false, z_found = false;
 8002be6:	2300      	movs	r3, #0
 8002be8:	74fb      	strb	r3, [r7, #19]
 8002bea:	2300      	movs	r3, #0
 8002bec:	74bb      	strb	r3, [r7, #18]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	747b      	strb	r3, [r7, #17]

    const char *ptr = line;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
    while (*ptr != '\0') {
 8002bf6:	e03b      	b.n	8002c70 <parse_gcode+0xa4>
        if (*ptr == 'X') {
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b58      	cmp	r3, #88	@ 0x58
 8002bfe:	d10e      	bne.n	8002c1e <parse_gcode+0x52>
            ptr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3301      	adds	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
            x = strtof(ptr, (char **) &ptr);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f107 020c 	add.w	r2, r7, #12
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f00c feda 	bl	800f9c8 <strtof>
 8002c14:	ed87 0a07 	vstr	s0, [r7, #28]
            x_found = true;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	74fb      	strb	r3, [r7, #19]
 8002c1c:	e028      	b.n	8002c70 <parse_gcode+0xa4>
        } else if (*ptr == 'Y') {
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b59      	cmp	r3, #89	@ 0x59
 8002c24:	d10e      	bne.n	8002c44 <parse_gcode+0x78>
            ptr++;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
            y = strtof(ptr, (char **) &ptr);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f107 020c 	add.w	r2, r7, #12
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00c fec7 	bl	800f9c8 <strtof>
 8002c3a:	ed87 0a06 	vstr	s0, [r7, #24]
            y_found = true;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	74bb      	strb	r3, [r7, #18]
 8002c42:	e015      	b.n	8002c70 <parse_gcode+0xa4>
        } else if (*ptr == 'Z') {
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b5a      	cmp	r3, #90	@ 0x5a
 8002c4a:	d10e      	bne.n	8002c6a <parse_gcode+0x9e>
            ptr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
            z = strtof(ptr, (char **) &ptr);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f107 020c 	add.w	r2, r7, #12
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f00c feb4 	bl	800f9c8 <strtof>
 8002c60:	ed87 0a05 	vstr	s0, [r7, #20]
            z_found = true;
 8002c64:	2301      	movs	r3, #1
 8002c66:	747b      	strb	r3, [r7, #17]
 8002c68:	e002      	b.n	8002c70 <parse_gcode+0xa4>
        } else {
            ptr++;  // Ignore other characters
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
    while (*ptr != '\0') {
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1bf      	bne.n	8002bf8 <parse_gcode+0x2c>
        }
    }

    if (coordinate_index < MAX_COORD_COUNT) {
 8002c78:	4b17      	ldr	r3, [pc, #92]	@ (8002cd8 <parse_gcode+0x10c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c80:	da23      	bge.n	8002cca <parse_gcode+0xfe>
        if (x_found) coordinates_x[coordinate_index] = x;
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <parse_gcode+0xca>
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <parse_gcode+0x10c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a13      	ldr	r2, [pc, #76]	@ (8002cdc <parse_gcode+0x110>)
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	601a      	str	r2, [r3, #0]
        if (y_found) coordinates_y[coordinate_index] = y;
 8002c96:	7cbb      	ldrb	r3, [r7, #18]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <parse_gcode+0xde>
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <parse_gcode+0x10c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <parse_gcode+0x114>)
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	601a      	str	r2, [r3, #0]
        if (z_found) coordinates_z[coordinate_index] = z;
 8002caa:	7c7b      	ldrb	r3, [r7, #17]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <parse_gcode+0xf2>
 8002cb0:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <parse_gcode+0x10c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ce4 <parse_gcode+0x118>)
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	601a      	str	r2, [r3, #0]
        coordinate_index++;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <parse_gcode+0x10c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <parse_gcode+0x10c>)
 8002cc6:	6013      	str	r3, [r2, #0]
    } else {
        myprintf("Coordinate buffer full, cannot store more data!\r\n");
    }
}
 8002cc8:	e002      	b.n	8002cd0 <parse_gcode+0x104>
        myprintf("Coordinate buffer full, cannot store more data!\r\n");
 8002cca:	4807      	ldr	r0, [pc, #28]	@ (8002ce8 <parse_gcode+0x11c>)
 8002ccc:	f7ff ff5a 	bl	8002b84 <myprintf>
}
 8002cd0:	bf00      	nop
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20001a10 	.word	0x20001a10
 8002cdc:	200002a0 	.word	0x200002a0
 8002ce0:	20000a70 	.word	0x20000a70
 8002ce4:	20001240 	.word	0x20001240
 8002ce8:	08012538 	.word	0x08012538

08002cec <process_raw_gcode>:

/* Process the G-code file and display lines */
void process_raw_gcode(FIL *fil) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b0e6      	sub	sp, #408	@ 0x198
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002cf6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cfa:	6018      	str	r0, [r3, #0]
    char buffer[BUFFER_SIZE];
    UINT bytes_read = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    char line[LINE_BUFFER_SIZE];
    int line_index = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    while (f_read(fil, buffer, sizeof(buffer), &bytes_read) == FR_OK && bytes_read > 0) {
 8002d08:	e051      	b.n	8002dae <process_raw_gcode+0xc2>
        for (UINT i = 0; i < bytes_read; i++) {
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002d10:	e047      	b.n	8002da2 <process_raw_gcode+0xb6>
            char c = buffer[i];
 8002d12:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8002d16:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f

            if (c == '\n' || c == '\r') {
 8002d22:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8002d26:	2b0a      	cmp	r3, #10
 8002d28:	d003      	beq.n	8002d32 <process_raw_gcode+0x46>
 8002d2a:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8002d2e:	2b0d      	cmp	r3, #13
 8002d30:	d11b      	bne.n	8002d6a <process_raw_gcode+0x7e>
                if (line_index > 0) {
 8002d32:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	dd2e      	ble.n	8002d98 <process_raw_gcode+0xac>
                    line[line_index] = '\0';
 8002d3a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002d3e:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8002d42:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002d46:	4413      	add	r3, r2
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
                    myprintf("Line: %s\r\n", line); // Display the line
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	4619      	mov	r1, r3
 8002d52:	482f      	ldr	r0, [pc, #188]	@ (8002e10 <process_raw_gcode+0x124>)
 8002d54:	f7ff ff16 	bl	8002b84 <myprintf>
                    parse_gcode(line);
 8002d58:	f107 0308 	add.w	r3, r7, #8
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff35 	bl	8002bcc <parse_gcode>
                    line_index = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                if (line_index > 0) {
 8002d68:	e016      	b.n	8002d98 <process_raw_gcode+0xac>
                }
            } else {
                if (line_index < LINE_BUFFER_SIZE - 1) {
 8002d6a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002d6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002d70:	dc0c      	bgt.n	8002d8c <process_raw_gcode+0xa0>
                    line[line_index++] = c;
 8002d72:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8002d7c:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8002d80:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 8002d84:	f897 118f 	ldrb.w	r1, [r7, #399]	@ 0x18f
 8002d88:	54d1      	strb	r1, [r2, r3]
 8002d8a:	e005      	b.n	8002d98 <process_raw_gcode+0xac>
                } else {
                    myprintf("Line buffer overflow, skipping line.\r\n");
 8002d8c:	4821      	ldr	r0, [pc, #132]	@ (8002e14 <process_raw_gcode+0x128>)
 8002d8e:	f7ff fef9 	bl	8002b84 <myprintf>
                    line_index = 0; // Reset for safety
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        for (UINT i = 0; i < bytes_read; i++) {
 8002d98:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002da6:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d3b1      	bcc.n	8002d12 <process_raw_gcode+0x26>
    while (f_read(fil, buffer, sizeof(buffer), &bytes_read) == FR_OK && bytes_read > 0) {
 8002dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002db2:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8002db6:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8002dba:	f5a2 70ca 	sub.w	r0, r2, #404	@ 0x194
 8002dbe:	2280      	movs	r2, #128	@ 0x80
 8002dc0:	6800      	ldr	r0, [r0, #0]
 8002dc2:	f00b fcf3 	bl	800e7ac <f_read>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <process_raw_gcode+0xe8>
 8002dcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d19a      	bne.n	8002d0a <process_raw_gcode+0x1e>
                }
            }
        }
    }

    if (line_index > 0) {
 8002dd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	dd13      	ble.n	8002e04 <process_raw_gcode+0x118>
        line[line_index] = '\0';
 8002ddc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002de0:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8002de4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002de8:	4413      	add	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
        myprintf("Line: %s\r\n", line); // Display the line
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	4619      	mov	r1, r3
 8002df4:	4806      	ldr	r0, [pc, #24]	@ (8002e10 <process_raw_gcode+0x124>)
 8002df6:	f7ff fec5 	bl	8002b84 <myprintf>
        parse_gcode(line);
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fee4 	bl	8002bcc <parse_gcode>
    }
}
 8002e04:	bf00      	nop
 8002e06:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	0801256c 	.word	0x0801256c
 8002e14:	08012578 	.word	0x08012578

08002e18 <sd_card_read_gcode>:

/* Open and process the G-code file */
void sd_card_read_gcode(void) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 8002e1e:	af00      	add	r7, sp, #0
    myprintf("\r\n~ SD card G-code processing ~\r\n");
 8002e20:	482e      	ldr	r0, [pc, #184]	@ (8002edc <sd_card_read_gcode+0xc4>)
 8002e22:	f7ff feaf 	bl	8002b84 <myprintf>

    // List all available files
    myprintf("Listing files on SD card:\r\n");
 8002e26:	482e      	ldr	r0, [pc, #184]	@ (8002ee0 <sd_card_read_gcode+0xc8>)
 8002e28:	f7ff feac 	bl	8002b84 <myprintf>
    // Mount the SD card
    FATFS FatFs;
    FIL fil;
    FRESULT fres;

    myprintf("Mounting SD card...\r\n");
 8002e2c:	482d      	ldr	r0, [pc, #180]	@ (8002ee4 <sd_card_read_gcode+0xcc>)
 8002e2e:	f7ff fea9 	bl	8002b84 <myprintf>
    fres = f_mount(&FatFs, "", 1);
 8002e32:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8002e36:	2201      	movs	r2, #1
 8002e38:	492b      	ldr	r1, [pc, #172]	@ (8002ee8 <sd_card_read_gcode+0xd0>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f00b fab6 	bl	800e3ac <f_mount>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK) {
 8002e46:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <sd_card_read_gcode+0x44>
        myprintf("Failed to mount SD card (Error: %i)\r\n", fres);
 8002e4e:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8002e52:	4619      	mov	r1, r3
 8002e54:	4825      	ldr	r0, [pc, #148]	@ (8002eec <sd_card_read_gcode+0xd4>)
 8002e56:	f7ff fe95 	bl	8002b84 <myprintf>
        return;
 8002e5a:	e03a      	b.n	8002ed2 <sd_card_read_gcode+0xba>
    }

    // Open a G-code file
    const char *filename = "yazidstink.gcode";
 8002e5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <sd_card_read_gcode+0xd8>)
 8002e5e:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
    myprintf("Attempting to open file '%s'\r\n", filename);
 8002e62:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8002e66:	4823      	ldr	r0, [pc, #140]	@ (8002ef4 <sd_card_read_gcode+0xdc>)
 8002e68:	f7ff fe8c 	bl	8002b84 <myprintf>

    fres = f_open(&fil, filename, FA_READ);
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8002e74:	4618      	mov	r0, r3
 8002e76:	f00b fadf 	bl	800e438 <f_open>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK) {
 8002e80:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <sd_card_read_gcode+0x8c>
        myprintf("Failed to open file '%s' (Error: %i)\r\n", filename, fres);
 8002e88:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8002e92:	4819      	ldr	r0, [pc, #100]	@ (8002ef8 <sd_card_read_gcode+0xe0>)
 8002e94:	f7ff fe76 	bl	8002b84 <myprintf>
        f_mount(NULL, "", 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4913      	ldr	r1, [pc, #76]	@ (8002ee8 <sd_card_read_gcode+0xd0>)
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f00b fa85 	bl	800e3ac <f_mount>
        return;
 8002ea2:	e016      	b.n	8002ed2 <sd_card_read_gcode+0xba>
    }

    // Process the G-code file
    myprintf("Processing '%s'...\r\n", filename);
 8002ea4:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8002ea8:	4814      	ldr	r0, [pc, #80]	@ (8002efc <sd_card_read_gcode+0xe4>)
 8002eaa:	f7ff fe6b 	bl	8002b84 <myprintf>
    process_raw_gcode(&fil);
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff1b 	bl	8002cec <process_raw_gcode>

    // Close the file and unmount the SD card
    f_close(&fil);
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f00b fe34 	bl	800eb26 <f_close>
    f_mount(NULL, "", 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4909      	ldr	r1, [pc, #36]	@ (8002ee8 <sd_card_read_gcode+0xd0>)
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f00b fa72 	bl	800e3ac <f_mount>

    myprintf("File '%s' processing complete and SD card unmounted.\r\n", filename);
 8002ec8:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8002ecc:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <sd_card_read_gcode+0xe8>)
 8002ece:	f7ff fe59 	bl	8002b84 <myprintf>
}
 8002ed2:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	080125a0 	.word	0x080125a0
 8002ee0:	080125c4 	.word	0x080125c4
 8002ee4:	080125e0 	.word	0x080125e0
 8002ee8:	080125f8 	.word	0x080125f8
 8002eec:	080125fc 	.word	0x080125fc
 8002ef0:	08012624 	.word	0x08012624
 8002ef4:	08012638 	.word	0x08012638
 8002ef8:	08012658 	.word	0x08012658
 8002efc:	08012680 	.word	0x08012680
 8002f00:	08012698 	.word	0x08012698

08002f04 <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f12:	eeb0 0a67 	vmov.f32	s0, s15
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f80c 	bl	8002f34 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f005 fad8 	bl	80084dc <HAL_TIM_PWM_Start>
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8002f40:	edd7 7a00 	vldr	s15, [r7]
 8002f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	d503      	bpl.n	8002f56 <PWM_WriteDuty+0x22>
    duty = 0.0;
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	e00a      	b.n	8002f6c <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8002f56:	edd7 7a00 	vldr	s15, [r7]
 8002f5a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003018 <PWM_WriteDuty+0xe4>
 8002f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	dd01      	ble.n	8002f6c <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8002f68:	4b2c      	ldr	r3, [pc, #176]	@ (800301c <PWM_WriteDuty+0xe8>)
 8002f6a:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f84:	edd7 7a00 	vldr	s15, [r7]
 8002f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003018 <PWM_WriteDuty+0xe4>
 8002f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f98:	ee17 3a90 	vmov	r3, s15
 8002f9c:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <PWM_WriteDuty+0x7e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002fb0:	e02c      	b.n	800300c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d105      	bne.n	8002fc6 <PWM_WriteDuty+0x92>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002fc4:	e022      	b.n	800300c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d105      	bne.n	8002fda <PWM_WriteDuty+0xa6>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002fd8:	e018      	b.n	800300c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d105      	bne.n	8002fee <PWM_WriteDuty+0xba>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002fec:	e00e      	b.n	800300c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d105      	bne.n	8003002 <PWM_WriteDuty+0xce>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8003000:	e004      	b.n	800300c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	42c80000 	.word	0x42c80000
 800301c:	42c80000 	.word	0x42c80000

08003020 <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 70.0f);
 8003028:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8003044 <SERVO_Init+0x24>
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f80b 	bl	8003048 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff65 	bl	8002f04 <PWM_Init>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	428c0000 	.word	0x428c0000

08003048 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8003054:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80030b0 <SERVO_WritePosition+0x68>
 8003058:	ed97 0a00 	vldr	s0, [r7]
 800305c:	f00e ff57 	bl	8011f0e <fminf>
 8003060:	eef0 7a40 	vmov.f32	s15, s0
 8003064:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80030b4 <SERVO_WritePosition+0x6c>
 8003068:	eeb0 0a67 	vmov.f32	s0, s15
 800306c:	f00e ff32 	bl	8011ed4 <fmaxf>
 8003070:	eef0 7a40 	vmov.f32	s15, s0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003080:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80030b0 <SERVO_WritePosition+0x68>
 8003084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003088:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800308c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003090:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003094:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003098:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	ed97 0a03 	vldr	s0, [r7, #12]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ff46 	bl	8002f34 <PWM_WriteDuty>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	43340000 	.word	0x43340000
 80030b4:	00000000 	.word	0x00000000

080030b8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030c8:	d102      	bne.n	80030d0 <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Disable further interrupts for the button

        // Reset the motor steps and trigger motion
    	Flag = 1;
 80030ca:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <HAL_GPIO_EXTI_Callback+0x24>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]


        // Re-enable the interrupt after the motion is complete (done in a later step)

}
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20002480 	.word	0x20002480

080030e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80030e4:	f001 fc9d 	bl	8004a22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030e8:	f000 f8f0 	bl	80032cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030ec:	f000 fd3e 	bl	8003b6c <MX_GPIO_Init>
  MX_DMA_Init();
 80030f0:	f000 fd1e 	bl	8003b30 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80030f4:	f000 fcbe 	bl	8003a74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80030f8:	f000 fcec 	bl	8003ad4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 80030fc:	f000 fb72 	bl	80037e4 <MX_TIM7_Init>
  MX_TIM4_Init();
 8003100:	f000 fac0 	bl	8003684 <MX_TIM4_Init>
  MX_TIM2_Init();
 8003104:	f000 f9ce 	bl	80034a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003108:	f000 fc84 	bl	8003a14 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800310c:	f008 fadc 	bl	800b6c8 <MX_FATFS_Init>
  MX_SPI2_Init();
 8003110:	f000 f98a 	bl	8003428 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003114:	f000 fa3e 	bl	8003594 <MX_TIM3_Init>
  MX_TIM14_Init();
 8003118:	f000 fc2e 	bl	8003978 <MX_TIM14_Init>
  MX_TIM5_Init();
 800311c:	f000 fb08 	bl	8003730 <MX_TIM5_Init>
  MX_TIM9_Init();
 8003120:	f000 fb96 	bl	8003850 <MX_TIM9_Init>
  MX_TIM10_Init();
 8003124:	f000 fbda 	bl	80038dc <MX_TIM10_Init>
  MX_I2C1_Init();
 8003128:	f000 f93e 	bl	80033a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(&hservo1);
 800312c:	4854      	ldr	r0, [pc, #336]	@ (8003280 <main+0x1a0>)
 800312e:	f7ff ff77 	bl	8003020 <SERVO_Init>
  SERVO_Init(&hservo2);
 8003132:	4854      	ldr	r0, [pc, #336]	@ (8003284 <main+0x1a4>)
 8003134:	f7ff ff74 	bl	8003020 <SERVO_Init>

  initializeMotors();
 8003138:	f7ff f9e6 	bl	8002508 <initializeMotors>
  initializeSystem();
 800313c:	f7ff fc9c 	bl	8002a78 <initializeSystem>
   ENC_Init(&henc1);
 8003140:	4851      	ldr	r0, [pc, #324]	@ (8003288 <main+0x1a8>)
 8003142:	f7ff fcbf 	bl	8002ac4 <ENC_Init>
   //HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);


        //TMC2209_Step(&motors[1], 16000);
   TMC2209_setMotorsConfiguration(&motors,8,1);
 8003146:	2201      	movs	r2, #1
 8003148:	2108      	movs	r1, #8
 800314a:	4850      	ldr	r0, [pc, #320]	@ (800328c <main+0x1ac>)
 800314c:	f7fe fd9e 	bl	8001c8c <TMC2209_setMotorsConfiguration>
   TMC2209_SetSpeed(&motors[0], 26000);
 8003150:	f246 5190 	movw	r1, #26000	@ 0x6590
 8003154:	484d      	ldr	r0, [pc, #308]	@ (800328c <main+0x1ac>)
 8003156:	f7fe f9d9 	bl	800150c <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[1], 16000);
 800315a:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 800315e:	484c      	ldr	r0, [pc, #304]	@ (8003290 <main+0x1b0>)
 8003160:	f7fe f9d4 	bl	800150c <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[2], 26000);
 8003164:	f246 5190 	movw	r1, #26000	@ 0x6590
 8003168:	484a      	ldr	r0, [pc, #296]	@ (8003294 <main+0x1b4>)
 800316a:	f7fe f9cf 	bl	800150c <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[3], 16000);
 800316e:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8003172:	4849      	ldr	r0, [pc, #292]	@ (8003298 <main+0x1b8>)
 8003174:	f7fe f9ca 	bl	800150c <TMC2209_SetSpeed>


   LCD_I2C_Init(&hlcd3);
 8003178:	4848      	ldr	r0, [pc, #288]	@ (800329c <main+0x1bc>)
 800317a:	f7fd ffbf 	bl	80010fc <LCD_I2C_Init>
   LCD_I2C_Clear(&hlcd3);
 800317e:	4847      	ldr	r0, [pc, #284]	@ (800329c <main+0x1bc>)
 8003180:	f7fe f85a 	bl	8001238 <LCD_I2C_Clear>
   LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
 8003184:	2102      	movs	r1, #2
 8003186:	4845      	ldr	r0, [pc, #276]	@ (800329c <main+0x1bc>)
 8003188:	f7fe f888 	bl	800129c <LCD_I2C_DisplaySequentialGlossyText>

   spiPre = SD_SPI_HANDLE.Instance->CR1;
 800318c:	4b44      	ldr	r3, [pc, #272]	@ (80032a0 <main+0x1c0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a44      	ldr	r2, [pc, #272]	@ (80032a4 <main+0x1c4>)
 8003194:	6013      	str	r3, [r2, #0]

   sd_card_read_gcode();
 8003196:	f7ff fe3f 	bl	8002e18 <sd_card_read_gcode>
   spiPre = SD_SPI_HANDLE.Instance->CR1;
 800319a:	4b41      	ldr	r3, [pc, #260]	@ (80032a0 <main+0x1c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a40      	ldr	r2, [pc, #256]	@ (80032a4 <main+0x1c4>)
 80031a2:	6013      	str	r3, [r2, #0]
   //TMC2209_MoveTo(&axes[0], 0, 100); // Axis X, Motor X1*/
   //TMC2209_MoveTo(&axes[1], 0, -100); // Axis X, Motor X1
 // Axis X, Motor X1
   //TMC2209_Step(&motors[1], 3200);
//   TMC2209_SetDirection(&motors[0], dir);
     TMC2209_SetSpeed(&motors[0], 25000);
 80031a4:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80031a8:	4838      	ldr	r0, [pc, #224]	@ (800328c <main+0x1ac>)
 80031aa:	f7fe f9af 	bl	800150c <TMC2209_SetSpeed>
//   TMC2209_SetDirection(&motors[1], dir);
     TMC2209_SetSpeed(&motors[1], 12000);
 80031ae:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 80031b2:	4837      	ldr	r0, [pc, #220]	@ (8003290 <main+0x1b0>)
 80031b4:	f7fe f9aa 	bl	800150c <TMC2209_SetSpeed>
//   TMC2209_SetDirection(&motors[2], dir);
   TMC2209_SetSpeed(&motors[2], 25000);
 80031b8:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80031bc:	4835      	ldr	r0, [pc, #212]	@ (8003294 <main+0x1b4>)
 80031be:	f7fe f9a5 	bl	800150c <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[3], 12000);
 80031c2:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 80031c6:	4834      	ldr	r0, [pc, #208]	@ (8003298 <main+0x1b8>)
 80031c8:	f7fe f9a0 	bl	800150c <TMC2209_SetSpeed>
   //TMC2209_Step(&motors[3], 6400);
   //TMC2209_EnableDriver(&motors[0], 1);
   //TMC2209_EnableDriver(&motors[1], 1);
   //TMC2209_EnableDriver(&motors[2], 1);
   //TMC2209_EnableDriver(&motors[3], 1);
   CheckConnection(&hservo2,&hservo1);
 80031cc:	492c      	ldr	r1, [pc, #176]	@ (8003280 <main+0x1a0>)
 80031ce:	482d      	ldr	r0, [pc, #180]	@ (8003284 <main+0x1a4>)
 80031d0:	f7ff fc86 	bl	8002ae0 <CheckConnection>
//   HAL_Delay(300);
//   SERVO_WritePosition(&hservo2, 40);
//   HAL_Delay(300);
   while (1){

      if (Flag) // Adjust based on button state
 80031d4:	4b34      	ldr	r3, [pc, #208]	@ (80032a8 <main+0x1c8>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <main+0x10a>
    	         //TMC2209_Step(&motors[1], 16000);
    	         //TMC2209_Start(&motors[0]);
    	         //TMC2209_Start(&motors[1]);


    	         MotorsHoming(&motors);
 80031de:	482b      	ldr	r0, [pc, #172]	@ (800328c <main+0x1ac>)
 80031e0:	f7fe fd9c 	bl	8001d1c <MotorsHoming>
//    	         stepsTaken[0] = 0;
//    	         HAL_Delay(200);
    	         //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
    	  	  	 Flag = 0;
 80031e4:	4b30      	ldr	r3, [pc, #192]	@ (80032a8 <main+0x1c8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]

      }
      //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
//
     es = IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin);
 80031ea:	2108      	movs	r1, #8
 80031ec:	482f      	ldr	r0, [pc, #188]	@ (80032ac <main+0x1cc>)
 80031ee:	f7ff fcb1 	bl	8002b54 <IsSensorTriggered>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b2e      	ldr	r3, [pc, #184]	@ (80032b0 <main+0x1d0>)
 80031f8:	701a      	strb	r2, [r3, #0]
      x = IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin);
 80031fa:	2110      	movs	r1, #16
 80031fc:	482d      	ldr	r0, [pc, #180]	@ (80032b4 <main+0x1d4>)
 80031fe:	f7ff fca9 	bl	8002b54 <IsSensorTriggered>
 8003202:	4603      	mov	r3, r0
 8003204:	461a      	mov	r2, r3
 8003206:	4b2c      	ldr	r3, [pc, #176]	@ (80032b8 <main+0x1d8>)
 8003208:	701a      	strb	r2, [r3, #0]
      sensorX1=IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin);
 800320a:	2104      	movs	r1, #4
 800320c:	482b      	ldr	r0, [pc, #172]	@ (80032bc <main+0x1dc>)
 800320e:	f7ff fca1 	bl	8002b54 <IsSensorTriggered>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <main+0x1e0>)
 8003218:	701a      	strb	r2, [r3, #0]
      xx =IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin);
 800321a:	2110      	movs	r1, #16
 800321c:	4827      	ldr	r0, [pc, #156]	@ (80032bc <main+0x1dc>)
 800321e:	f7ff fc99 	bl	8002b54 <IsSensorTriggered>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <main+0x1e4>)
 8003228:	701a      	strb	r2, [r3, #0]
      //xx= CheckConnection(&hservo2,&hservo1);


      sensorX1 = HAL_GPIO_ReadPin(BtnLeft_GPIO_Port,BtnLeft_Pin);
 800322a:	2101      	movs	r1, #1
 800322c:	4826      	ldr	r0, [pc, #152]	@ (80032c8 <main+0x1e8>)
 800322e:	f002 fb41 	bl	80058b4 <HAL_GPIO_ReadPin>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <main+0x1e0>)
 8003238:	701a      	strb	r2, [r3, #0]

      if(es && x &&sensorX1 && xx){
 800323a:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <main+0x1d0>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d010      	beq.n	8003266 <main+0x186>
 8003244:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <main+0x1d8>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <main+0x186>
 800324e:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <main+0x1e0>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <main+0x186>
 8003256:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <main+0x1e4>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <main+0x186>
      xx =+1;
 800325e:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <main+0x1e4>)
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e002      	b.n	800326c <main+0x18c>
      }
      else{
    	  xx = 0;
 8003266:	4b17      	ldr	r3, [pc, #92]	@ (80032c4 <main+0x1e4>)
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
      }
      while(xx >= 1){
 800326c:	e002      	b.n	8003274 <main+0x194>
      MotorControl_ButtonHandler(&motors);
 800326e:	4807      	ldr	r0, [pc, #28]	@ (800328c <main+0x1ac>)
 8003270:	f7fe feb8 	bl	8001fe4 <MotorControl_ButtonHandler>
      while(xx >= 1){
 8003274:	4b13      	ldr	r3, [pc, #76]	@ (80032c4 <main+0x1e4>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f8      	bne.n	800326e <main+0x18e>
      if (Flag) // Adjust based on button state
 800327c:	e7aa      	b.n	80031d4 <main+0xf4>
 800327e:	bf00      	nop
 8003280:	2000002c 	.word	0x2000002c
 8003284:	2000003c 	.word	0x2000003c
 8003288:	20000000 	.word	0x20000000
 800328c:	2000248c 	.word	0x2000248c
 8003290:	200024f0 	.word	0x200024f0
 8003294:	20002554 	.word	0x20002554
 8003298:	200025b8 	.word	0x200025b8
 800329c:	20000018 	.word	0x20000018
 80032a0:	20001b68 	.word	0x20001b68
 80032a4:	20002484 	.word	0x20002484
 80032a8:	20002480 	.word	0x20002480
 80032ac:	40020400 	.word	0x40020400
 80032b0:	2000247c 	.word	0x2000247c
 80032b4:	40020000 	.word	0x40020000
 80032b8:	2000247d 	.word	0x2000247d
 80032bc:	40021000 	.word	0x40021000
 80032c0:	2000247f 	.word	0x2000247f
 80032c4:	2000247e 	.word	0x2000247e
 80032c8:	40021800 	.word	0x40021800

080032cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b094      	sub	sp, #80	@ 0x50
 80032d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032d2:	f107 0320 	add.w	r3, r7, #32
 80032d6:	2230      	movs	r2, #48	@ 0x30
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f00c fd6a 	bl	800fdb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80032f0:	f003 f8ca 	bl	8006488 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b2a      	ldr	r3, [pc, #168]	@ (80033a0 <SystemClock_Config+0xd4>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	4a29      	ldr	r2, [pc, #164]	@ (80033a0 <SystemClock_Config+0xd4>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003300:	4b27      	ldr	r3, [pc, #156]	@ (80033a0 <SystemClock_Config+0xd4>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800330c:	4b25      	ldr	r3, [pc, #148]	@ (80033a4 <SystemClock_Config+0xd8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a24      	ldr	r2, [pc, #144]	@ (80033a4 <SystemClock_Config+0xd8>)
 8003312:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b22      	ldr	r3, [pc, #136]	@ (80033a4 <SystemClock_Config+0xd8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003324:	2301      	movs	r3, #1
 8003326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003328:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800332e:	2302      	movs	r3, #2
 8003330:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003332:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003338:	2304      	movs	r3, #4
 800333a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800333c:	23d8      	movs	r3, #216	@ 0xd8
 800333e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003340:	2302      	movs	r3, #2
 8003342:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003344:	2309      	movs	r3, #9
 8003346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003348:	f107 0320 	add.w	r3, r7, #32
 800334c:	4618      	mov	r0, r3
 800334e:	f003 f8fb 	bl	8006548 <HAL_RCC_OscConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003358:	f000 fda6 	bl	8003ea8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800335c:	f003 f8a4 	bl	80064a8 <HAL_PWREx_EnableOverDrive>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003366:	f000 fd9f 	bl	8003ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800336a:	230f      	movs	r3, #15
 800336c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800336e:	2302      	movs	r3, #2
 8003370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003376:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800337a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800337c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003380:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003382:	f107 030c 	add.w	r3, r7, #12
 8003386:	2107      	movs	r1, #7
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fb81 	bl	8006a90 <HAL_RCC_ClockConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003394:	f000 fd88 	bl	8003ea8 <Error_Handler>
  }
}
 8003398:	bf00      	nop
 800339a:	3750      	adds	r7, #80	@ 0x50
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000

080033a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033ac:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <MX_I2C1_Init+0x74>)
 80033ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003420 <MX_I2C1_Init+0x78>)
 80033b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	@ (800341c <MX_I2C1_Init+0x74>)
 80033b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003424 <MX_I2C1_Init+0x7c>)
 80033b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033b8:	4b18      	ldr	r3, [pc, #96]	@ (800341c <MX_I2C1_Init+0x74>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033be:	4b17      	ldr	r3, [pc, #92]	@ (800341c <MX_I2C1_Init+0x74>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033c4:	4b15      	ldr	r3, [pc, #84]	@ (800341c <MX_I2C1_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <MX_I2C1_Init+0x74>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033d0:	4b12      	ldr	r3, [pc, #72]	@ (800341c <MX_I2C1_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033d6:	4b11      	ldr	r3, [pc, #68]	@ (800341c <MX_I2C1_Init+0x74>)
 80033d8:	2200      	movs	r2, #0
 80033da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <MX_I2C1_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033e2:	480e      	ldr	r0, [pc, #56]	@ (800341c <MX_I2C1_Init+0x74>)
 80033e4:	f002 fab0 	bl	8005948 <HAL_I2C_Init>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033ee:	f000 fd5b 	bl	8003ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033f2:	2100      	movs	r1, #0
 80033f4:	4809      	ldr	r0, [pc, #36]	@ (800341c <MX_I2C1_Init+0x74>)
 80033f6:	f002 fe75 	bl	80060e4 <HAL_I2CEx_ConfigAnalogFilter>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003400:	f000 fd52 	bl	8003ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003404:	2100      	movs	r1, #0
 8003406:	4805      	ldr	r0, [pc, #20]	@ (800341c <MX_I2C1_Init+0x74>)
 8003408:	f002 feb7 	bl	800617a <HAL_I2CEx_ConfigDigitalFilter>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003412:	f000 fd49 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20001b14 	.word	0x20001b14
 8003420:	40005400 	.word	0x40005400
 8003424:	20404768 	.word	0x20404768

08003428 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800342c:	4b1b      	ldr	r3, [pc, #108]	@ (800349c <MX_SPI2_Init+0x74>)
 800342e:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <MX_SPI2_Init+0x78>)
 8003430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003432:	4b1a      	ldr	r3, [pc, #104]	@ (800349c <MX_SPI2_Init+0x74>)
 8003434:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800343a:	4b18      	ldr	r3, [pc, #96]	@ (800349c <MX_SPI2_Init+0x74>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003440:	4b16      	ldr	r3, [pc, #88]	@ (800349c <MX_SPI2_Init+0x74>)
 8003442:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003446:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003448:	4b14      	ldr	r3, [pc, #80]	@ (800349c <MX_SPI2_Init+0x74>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800344e:	4b13      	ldr	r3, [pc, #76]	@ (800349c <MX_SPI2_Init+0x74>)
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003454:	4b11      	ldr	r3, [pc, #68]	@ (800349c <MX_SPI2_Init+0x74>)
 8003456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800345a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800345c:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <MX_SPI2_Init+0x74>)
 800345e:	2238      	movs	r2, #56	@ 0x38
 8003460:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003462:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <MX_SPI2_Init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003468:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <MX_SPI2_Init+0x74>)
 800346a:	2200      	movs	r2, #0
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <MX_SPI2_Init+0x74>)
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <MX_SPI2_Init+0x74>)
 8003476:	2207      	movs	r2, #7
 8003478:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <MX_SPI2_Init+0x74>)
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003480:	4b06      	ldr	r3, [pc, #24]	@ (800349c <MX_SPI2_Init+0x74>)
 8003482:	2208      	movs	r2, #8
 8003484:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003486:	4805      	ldr	r0, [pc, #20]	@ (800349c <MX_SPI2_Init+0x74>)
 8003488:	f004 f918 	bl	80076bc <HAL_SPI_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003492:	f000 fd09 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20001b68 	.word	0x20001b68
 80034a0:	40003800 	.word	0x40003800

080034a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08e      	sub	sp, #56	@ 0x38
 80034a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034c4:	463b      	mov	r3, r7
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	60da      	str	r2, [r3, #12]
 80034d0:	611a      	str	r2, [r3, #16]
 80034d2:	615a      	str	r2, [r3, #20]
 80034d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003590 <MX_TIM2_Init+0xec>)
 80034d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 80034de:	4b2c      	ldr	r3, [pc, #176]	@ (8003590 <MX_TIM2_Init+0xec>)
 80034e0:	22d7      	movs	r2, #215	@ 0xd7
 80034e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <MX_TIM2_Init+0xec>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80034ea:	4b29      	ldr	r3, [pc, #164]	@ (8003590 <MX_TIM2_Init+0xec>)
 80034ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f2:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <MX_TIM2_Init+0xec>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f8:	4b25      	ldr	r3, [pc, #148]	@ (8003590 <MX_TIM2_Init+0xec>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034fe:	4824      	ldr	r0, [pc, #144]	@ (8003590 <MX_TIM2_Init+0xec>)
 8003500:	f004 fea6 	bl	8008250 <HAL_TIM_Base_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800350a:	f000 fccd 	bl	8003ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800350e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003514:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003518:	4619      	mov	r1, r3
 800351a:	481d      	ldr	r0, [pc, #116]	@ (8003590 <MX_TIM2_Init+0xec>)
 800351c:	f005 fe3e 	bl	800919c <HAL_TIM_ConfigClockSource>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003526:	f000 fcbf 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800352a:	4819      	ldr	r0, [pc, #100]	@ (8003590 <MX_TIM2_Init+0xec>)
 800352c:	f004 ff7f 	bl	800842e <HAL_TIM_PWM_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003536:	f000 fcb7 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003542:	f107 031c 	add.w	r3, r7, #28
 8003546:	4619      	mov	r1, r3
 8003548:	4811      	ldr	r0, [pc, #68]	@ (8003590 <MX_TIM2_Init+0xec>)
 800354a:	f006 fae3 	bl	8009b14 <HAL_TIMEx_MasterConfigSynchronization>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003554:	f000 fca8 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003558:	2360      	movs	r3, #96	@ 0x60
 800355a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800355c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003560:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800356a:	463b      	mov	r3, r7
 800356c:	2208      	movs	r2, #8
 800356e:	4619      	mov	r1, r3
 8003570:	4807      	ldr	r0, [pc, #28]	@ (8003590 <MX_TIM2_Init+0xec>)
 8003572:	f005 fcff 	bl	8008f74 <HAL_TIM_PWM_ConfigChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800357c:	f000 fc94 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003580:	4803      	ldr	r0, [pc, #12]	@ (8003590 <MX_TIM2_Init+0xec>)
 8003582:	f000 fe87 	bl	8004294 <HAL_TIM_MspPostInit>

}
 8003586:	bf00      	nop
 8003588:	3738      	adds	r7, #56	@ 0x38
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20001bcc 	.word	0x20001bcc

08003594 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08e      	sub	sp, #56	@ 0x38
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800359a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a8:	f107 031c 	add.w	r3, r7, #28
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b4:	463b      	mov	r3, r7
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035c6:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <MX_TIM3_Init+0xe8>)
 80035c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003680 <MX_TIM3_Init+0xec>)
 80035ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 80035cc:	4b2b      	ldr	r3, [pc, #172]	@ (800367c <MX_TIM3_Init+0xe8>)
 80035ce:	22d7      	movs	r2, #215	@ 0xd7
 80035d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d2:	4b2a      	ldr	r3, [pc, #168]	@ (800367c <MX_TIM3_Init+0xe8>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80035d8:	4b28      	ldr	r3, [pc, #160]	@ (800367c <MX_TIM3_Init+0xe8>)
 80035da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e0:	4b26      	ldr	r3, [pc, #152]	@ (800367c <MX_TIM3_Init+0xe8>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e6:	4b25      	ldr	r3, [pc, #148]	@ (800367c <MX_TIM3_Init+0xe8>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035ec:	4823      	ldr	r0, [pc, #140]	@ (800367c <MX_TIM3_Init+0xe8>)
 80035ee:	f004 fe2f 	bl	8008250 <HAL_TIM_Base_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80035f8:	f000 fc56 	bl	8003ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003600:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003606:	4619      	mov	r1, r3
 8003608:	481c      	ldr	r0, [pc, #112]	@ (800367c <MX_TIM3_Init+0xe8>)
 800360a:	f005 fdc7 	bl	800919c <HAL_TIM_ConfigClockSource>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003614:	f000 fc48 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003618:	4818      	ldr	r0, [pc, #96]	@ (800367c <MX_TIM3_Init+0xe8>)
 800361a:	f004 ff08 	bl	800842e <HAL_TIM_PWM_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003624:	f000 fc40 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	4619      	mov	r1, r3
 8003636:	4811      	ldr	r0, [pc, #68]	@ (800367c <MX_TIM3_Init+0xe8>)
 8003638:	f006 fa6c 	bl	8009b14 <HAL_TIMEx_MasterConfigSynchronization>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003642:	f000 fc31 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003646:	2360      	movs	r3, #96	@ 0x60
 8003648:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800364a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800364e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003650:	2300      	movs	r3, #0
 8003652:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003658:	463b      	mov	r3, r7
 800365a:	2200      	movs	r2, #0
 800365c:	4619      	mov	r1, r3
 800365e:	4807      	ldr	r0, [pc, #28]	@ (800367c <MX_TIM3_Init+0xe8>)
 8003660:	f005 fc88 	bl	8008f74 <HAL_TIM_PWM_ConfigChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800366a:	f000 fc1d 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800366e:	4803      	ldr	r0, [pc, #12]	@ (800367c <MX_TIM3_Init+0xe8>)
 8003670:	f000 fe10 	bl	8004294 <HAL_TIM_MspPostInit>

}
 8003674:	bf00      	nop
 8003676:	3738      	adds	r7, #56	@ 0x38
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20001c18 	.word	0x20001c18
 8003680:	40000400 	.word	0x40000400

08003684 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	@ 0x30
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	2224      	movs	r2, #36	@ 0x24
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f00c fb8e 	bl	800fdb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003698:	463b      	mov	r3, r7
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036a2:	4b21      	ldr	r3, [pc, #132]	@ (8003728 <MX_TIM4_Init+0xa4>)
 80036a4:	4a21      	ldr	r2, [pc, #132]	@ (800372c <MX_TIM4_Init+0xa8>)
 80036a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80036a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003728 <MX_TIM4_Init+0xa4>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003728 <MX_TIM4_Init+0xa4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 80036b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003728 <MX_TIM4_Init+0xa4>)
 80036b6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80036ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003728 <MX_TIM4_Init+0xa4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c2:	4b19      	ldr	r3, [pc, #100]	@ (8003728 <MX_TIM4_Init+0xa4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036c8:	2303      	movs	r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80036d8:	230f      	movs	r3, #15
 80036da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036dc:	2300      	movs	r3, #0
 80036de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036e0:	2301      	movs	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80036e8:	230f      	movs	r3, #15
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	4619      	mov	r1, r3
 80036f2:	480d      	ldr	r0, [pc, #52]	@ (8003728 <MX_TIM4_Init+0xa4>)
 80036f4:	f005 fa02 	bl	8008afc <HAL_TIM_Encoder_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80036fe:	f000 fbd3 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800370a:	463b      	mov	r3, r7
 800370c:	4619      	mov	r1, r3
 800370e:	4806      	ldr	r0, [pc, #24]	@ (8003728 <MX_TIM4_Init+0xa4>)
 8003710:	f006 fa00 	bl	8009b14 <HAL_TIMEx_MasterConfigSynchronization>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800371a:	f000 fbc5 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800371e:	bf00      	nop
 8003720:	3730      	adds	r7, #48	@ 0x30
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20001c64 	.word	0x20001c64
 800372c:	40000800 	.word	0x40000800

08003730 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	@ 0x28
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003736:	f107 031c 	add.w	r3, r7, #28
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003742:	463b      	mov	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
 8003750:	615a      	str	r2, [r3, #20]
 8003752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003754:	4b21      	ldr	r3, [pc, #132]	@ (80037dc <MX_TIM5_Init+0xac>)
 8003756:	4a22      	ldr	r2, [pc, #136]	@ (80037e0 <MX_TIM5_Init+0xb0>)
 8003758:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 800375a:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <MX_TIM5_Init+0xac>)
 800375c:	226b      	movs	r2, #107	@ 0x6b
 800375e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003760:	4b1e      	ldr	r3, [pc, #120]	@ (80037dc <MX_TIM5_Init+0xac>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8003766:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <MX_TIM5_Init+0xac>)
 8003768:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800376c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376e:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <MX_TIM5_Init+0xac>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003774:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <MX_TIM5_Init+0xac>)
 8003776:	2200      	movs	r2, #0
 8003778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800377a:	4818      	ldr	r0, [pc, #96]	@ (80037dc <MX_TIM5_Init+0xac>)
 800377c:	f004 fe57 	bl	800842e <HAL_TIM_PWM_Init>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8003786:	f000 fb8f 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	4810      	ldr	r0, [pc, #64]	@ (80037dc <MX_TIM5_Init+0xac>)
 800379a:	f006 f9bb 	bl	8009b14 <HAL_TIMEx_MasterConfigSynchronization>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80037a4:	f000 fb80 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037a8:	2360      	movs	r3, #96	@ 0x60
 80037aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80037ac:	230a      	movs	r3, #10
 80037ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037b8:	463b      	mov	r3, r7
 80037ba:	2200      	movs	r2, #0
 80037bc:	4619      	mov	r1, r3
 80037be:	4807      	ldr	r0, [pc, #28]	@ (80037dc <MX_TIM5_Init+0xac>)
 80037c0:	f005 fbd8 	bl	8008f74 <HAL_TIM_PWM_ConfigChannel>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80037ca:	f000 fb6d 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80037ce:	4803      	ldr	r0, [pc, #12]	@ (80037dc <MX_TIM5_Init+0xac>)
 80037d0:	f000 fd60 	bl	8004294 <HAL_TIM_MspPostInit>

}
 80037d4:	bf00      	nop
 80037d6:	3728      	adds	r7, #40	@ 0x28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20001cb0 	.word	0x20001cb0
 80037e0:	40000c00 	.word	0x40000c00

080037e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037f4:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <MX_TIM7_Init+0x64>)
 80037f6:	4a15      	ldr	r2, [pc, #84]	@ (800384c <MX_TIM7_Init+0x68>)
 80037f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 80037fa:	4b13      	ldr	r3, [pc, #76]	@ (8003848 <MX_TIM7_Init+0x64>)
 80037fc:	22d7      	movs	r2, #215	@ 0xd7
 80037fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003800:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <MX_TIM7_Init+0x64>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003806:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <MX_TIM7_Init+0x64>)
 8003808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800380c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800380e:	4b0e      	ldr	r3, [pc, #56]	@ (8003848 <MX_TIM7_Init+0x64>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003814:	480c      	ldr	r0, [pc, #48]	@ (8003848 <MX_TIM7_Init+0x64>)
 8003816:	f004 fd1b 	bl	8008250 <HAL_TIM_Base_Init>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003820:	f000 fb42 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4805      	ldr	r0, [pc, #20]	@ (8003848 <MX_TIM7_Init+0x64>)
 8003832:	f006 f96f 	bl	8009b14 <HAL_TIMEx_MasterConfigSynchronization>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800383c:	f000 fb34 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20001cfc 	.word	0x20001cfc
 800384c:	40001400 	.word	0x40001400

08003850 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
 8003864:	615a      	str	r2, [r3, #20]
 8003866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003868:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <MX_TIM9_Init+0x84>)
 800386a:	4a1b      	ldr	r2, [pc, #108]	@ (80038d8 <MX_TIM9_Init+0x88>)
 800386c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 215;
 800386e:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <MX_TIM9_Init+0x84>)
 8003870:	22d7      	movs	r2, #215	@ 0xd7
 8003872:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003874:	4b17      	ldr	r3, [pc, #92]	@ (80038d4 <MX_TIM9_Init+0x84>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <MX_TIM9_Init+0x84>)
 800387c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003880:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003882:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <MX_TIM9_Init+0x84>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003888:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <MX_TIM9_Init+0x84>)
 800388a:	2200      	movs	r2, #0
 800388c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800388e:	4811      	ldr	r0, [pc, #68]	@ (80038d4 <MX_TIM9_Init+0x84>)
 8003890:	f004 fdcd 	bl	800842e <HAL_TIM_PWM_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800389a:	f000 fb05 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800389e:	2360      	movs	r3, #96	@ 0x60
 80038a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80038a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80038a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	2200      	movs	r2, #0
 80038b4:	4619      	mov	r1, r3
 80038b6:	4807      	ldr	r0, [pc, #28]	@ (80038d4 <MX_TIM9_Init+0x84>)
 80038b8:	f005 fb5c 	bl	8008f74 <HAL_TIM_PWM_ConfigChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80038c2:	f000 faf1 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80038c6:	4803      	ldr	r0, [pc, #12]	@ (80038d4 <MX_TIM9_Init+0x84>)
 80038c8:	f000 fce4 	bl	8004294 <HAL_TIM_MspPostInit>

}
 80038cc:	bf00      	nop
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20001d48 	.word	0x20001d48
 80038d8:	40014000 	.word	0x40014000

080038dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
 80038f0:	615a      	str	r2, [r3, #20]
 80038f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80038f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <MX_TIM10_Init+0x94>)
 80038f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <MX_TIM10_Init+0x98>)
 80038f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 216-1;
 80038fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <MX_TIM10_Init+0x94>)
 80038fc:	22d7      	movs	r2, #215	@ 0xd7
 80038fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003900:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <MX_TIM10_Init+0x94>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8003906:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <MX_TIM10_Init+0x94>)
 8003908:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800390c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390e:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <MX_TIM10_Init+0x94>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003914:	4b16      	ldr	r3, [pc, #88]	@ (8003970 <MX_TIM10_Init+0x94>)
 8003916:	2200      	movs	r2, #0
 8003918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800391a:	4815      	ldr	r0, [pc, #84]	@ (8003970 <MX_TIM10_Init+0x94>)
 800391c:	f004 fc98 	bl	8008250 <HAL_TIM_Base_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003926:	f000 fabf 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800392a:	4811      	ldr	r0, [pc, #68]	@ (8003970 <MX_TIM10_Init+0x94>)
 800392c:	f004 fd7f 	bl	800842e <HAL_TIM_PWM_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003936:	f000 fab7 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800393a:	2360      	movs	r3, #96	@ 0x60
 800393c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800393e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	2200      	movs	r2, #0
 8003950:	4619      	mov	r1, r3
 8003952:	4807      	ldr	r0, [pc, #28]	@ (8003970 <MX_TIM10_Init+0x94>)
 8003954:	f005 fb0e 	bl	8008f74 <HAL_TIM_PWM_ConfigChannel>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800395e:	f000 faa3 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003962:	4803      	ldr	r0, [pc, #12]	@ (8003970 <MX_TIM10_Init+0x94>)
 8003964:	f000 fc96 	bl	8004294 <HAL_TIM_MspPostInit>

}
 8003968:	bf00      	nop
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20001d94 	.word	0x20001d94
 8003974:	40014400 	.word	0x40014400

08003978 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
 800398c:	615a      	str	r2, [r3, #20]
 800398e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003990:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <MX_TIM14_Init+0x94>)
 8003992:	4a1f      	ldr	r2, [pc, #124]	@ (8003a10 <MX_TIM14_Init+0x98>)
 8003994:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <MX_TIM14_Init+0x94>)
 8003998:	226b      	movs	r2, #107	@ 0x6b
 800399a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <MX_TIM14_Init+0x94>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 80039a2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <MX_TIM14_Init+0x94>)
 80039a4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80039a8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039aa:	4b18      	ldr	r3, [pc, #96]	@ (8003a0c <MX_TIM14_Init+0x94>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b0:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <MX_TIM14_Init+0x94>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80039b6:	4815      	ldr	r0, [pc, #84]	@ (8003a0c <MX_TIM14_Init+0x94>)
 80039b8:	f004 fc4a 	bl	8008250 <HAL_TIM_Base_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80039c2:	f000 fa71 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80039c6:	4811      	ldr	r0, [pc, #68]	@ (8003a0c <MX_TIM14_Init+0x94>)
 80039c8:	f004 fd31 	bl	800842e <HAL_TIM_PWM_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80039d2:	f000 fa69 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039d6:	2360      	movs	r3, #96	@ 0x60
 80039d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80039da:	230a      	movs	r3, #10
 80039dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039e6:	1d3b      	adds	r3, r7, #4
 80039e8:	2200      	movs	r2, #0
 80039ea:	4619      	mov	r1, r3
 80039ec:	4807      	ldr	r0, [pc, #28]	@ (8003a0c <MX_TIM14_Init+0x94>)
 80039ee:	f005 fac1 	bl	8008f74 <HAL_TIM_PWM_ConfigChannel>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80039f8:	f000 fa56 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80039fc:	4803      	ldr	r0, [pc, #12]	@ (8003a0c <MX_TIM14_Init+0x94>)
 80039fe:	f000 fc49 	bl	8004294 <HAL_TIM_MspPostInit>

}
 8003a02:	bf00      	nop
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20001de0 	.word	0x20001de0
 8003a10:	40002000 	.word	0x40002000

08003a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a18:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a1a:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <MX_USART2_UART_Init+0x5c>)
 8003a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a26:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a32:	4b0e      	ldr	r3, [pc, #56]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a44:	4b09      	ldr	r3, [pc, #36]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a4a:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a56:	4805      	ldr	r0, [pc, #20]	@ (8003a6c <MX_USART2_UART_Init+0x58>)
 8003a58:	f006 f908 	bl	8009c6c <HAL_UART_Init>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a62:	f000 fa21 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20001e2c 	.word	0x20001e2c
 8003a70:	40004400 	.word	0x40004400

08003a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003a7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <MX_USART3_UART_Init+0x5c>)
 8003a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a7e:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a86:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a92:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ab6:	4805      	ldr	r0, [pc, #20]	@ (8003acc <MX_USART3_UART_Init+0x58>)
 8003ab8:	f006 f8d8 	bl	8009c6c <HAL_UART_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003ac2:	f000 f9f1 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20001eb4 	.word	0x20001eb4
 8003ad0:	40004800 	.word	0x40004800

08003ad4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003ad8:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ada:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003ade:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003ae0:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ae2:	2206      	movs	r2, #6
 8003ae4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ae6:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ae8:	2202      	movs	r2, #2
 8003aea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003aec:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003af2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003af4:	2202      	movs	r2, #2
 8003af6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003af8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003b04:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003b0a:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003b10:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b18:	f002 fb7b 	bl	8006212 <HAL_PCD_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003b22:	f000 f9c1 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20001f9c 	.word	0x20001f9c

08003b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b36:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <MX_DMA_Init+0x38>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <MX_DMA_Init+0x38>)
 8003b3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <MX_DMA_Init+0x38>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b4a:	607b      	str	r3, [r7, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	2010      	movs	r0, #16
 8003b54:	f001 f8c1 	bl	8004cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b58:	2010      	movs	r0, #16
 8003b5a:	f001 f8da 	bl	8004d12 <HAL_NVIC_EnableIRQ>

}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08e      	sub	sp, #56	@ 0x38
 8003b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b82:	4bb5      	ldr	r3, [pc, #724]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	4ab4      	ldr	r2, [pc, #720]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003b88:	f043 0310 	orr.w	r3, r3, #16
 8003b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8e:	4bb2      	ldr	r3, [pc, #712]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9a:	4baf      	ldr	r3, [pc, #700]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	4aae      	ldr	r2, [pc, #696]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba6:	4bac      	ldr	r3, [pc, #688]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bb2:	4ba9      	ldr	r3, [pc, #676]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	4aa8      	ldr	r2, [pc, #672]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003bb8:	f043 0320 	orr.w	r3, r3, #32
 8003bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbe:	4ba6      	ldr	r3, [pc, #664]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bca:	4ba3      	ldr	r3, [pc, #652]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	4aa2      	ldr	r2, [pc, #648]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	4b9d      	ldr	r3, [pc, #628]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	4a9c      	ldr	r2, [pc, #624]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bee:	4b9a      	ldr	r3, [pc, #616]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfa:	4b97      	ldr	r3, [pc, #604]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	4a96      	ldr	r2, [pc, #600]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c06:	4b94      	ldr	r3, [pc, #592]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c12:	4b91      	ldr	r3, [pc, #580]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	4a90      	ldr	r2, [pc, #576]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	4a8a      	ldr	r2, [pc, #552]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003c30:	f043 0308 	orr.w	r3, r3, #8
 8003c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c36:	4b88      	ldr	r3, [pc, #544]	@ (8003e58 <MX_GPIO_Init+0x2ec>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enn3_Pin|dir3_Pin, GPIO_PIN_RESET);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2148      	movs	r1, #72	@ 0x48
 8003c46:	4885      	ldr	r0, [pc, #532]	@ (8003e5c <MX_GPIO_Init+0x2f0>)
 8003c48:	f001 fe4c 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, enn4_Pin|dir1_Pin, GPIO_PIN_RESET);
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2181      	movs	r1, #129	@ 0x81
 8003c50:	4883      	ldr	r0, [pc, #524]	@ (8003e60 <MX_GPIO_Init+0x2f4>)
 8003c52:	f001 fe47 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enn2_Pin|dir2_Pin, GPIO_PIN_RESET);
 8003c56:	2200      	movs	r2, #0
 8003c58:	21a0      	movs	r1, #160	@ 0xa0
 8003c5a:	4882      	ldr	r0, [pc, #520]	@ (8003e64 <MX_GPIO_Init+0x2f8>)
 8003c5c:	f001 fe42 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(enn1_GPIO_Port, enn1_Pin, GPIO_PIN_RESET);
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c66:	4880      	ldr	r0, [pc, #512]	@ (8003e68 <MX_GPIO_Init+0x2fc>)
 8003c68:	f001 fe3c 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_cs_GPIO_Port, SPI_cs_Pin, GPIO_PIN_SET);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c72:	487e      	ldr	r0, [pc, #504]	@ (8003e6c <MX_GPIO_Init+0x300>)
 8003c74:	f001 fe36 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2140      	movs	r1, #64	@ 0x40
 8003c7c:	487c      	ldr	r0, [pc, #496]	@ (8003e70 <MX_GPIO_Init+0x304>)
 8003c7e:	f001 fe31 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir4_GPIO_Port, dir4_Pin, GPIO_PIN_RESET);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2101      	movs	r1, #1
 8003c86:	4879      	ldr	r0, [pc, #484]	@ (8003e6c <MX_GPIO_Init+0x300>)
 8003c88:	f001 fe2c 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EndStop1_Pin EndStop2_Pin */
  GPIO_InitStruct.Pin = EndStop1_Pin|EndStop2_Pin;
 8003c8c:	2314      	movs	r3, #20
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	486f      	ldr	r0, [pc, #444]	@ (8003e5c <MX_GPIO_Init+0x2f0>)
 8003ca0:	f001 fc5c 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : enn3_Pin dir3_Pin */
  GPIO_InitStruct.Pin = enn3_Pin|dir3_Pin;
 8003ca4:	2348      	movs	r3, #72	@ 0x48
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4868      	ldr	r0, [pc, #416]	@ (8003e5c <MX_GPIO_Init+0x2f0>)
 8003cbc:	f001 fc4e 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003cc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4867      	ldr	r0, [pc, #412]	@ (8003e74 <MX_GPIO_Init+0x308>)
 8003cd8:	f001 fc40 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : enn4_Pin dir1_Pin */
  GPIO_InitStruct.Pin = enn4_Pin|dir1_Pin;
 8003cdc:	2381      	movs	r3, #129	@ 0x81
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	485b      	ldr	r0, [pc, #364]	@ (8003e60 <MX_GPIO_Init+0x2f4>)
 8003cf4:	f001 fc32 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d00:	2302      	movs	r3, #2
 8003d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8003d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4856      	ldr	r0, [pc, #344]	@ (8003e64 <MX_GPIO_Init+0x2f8>)
 8003d0c:	f001 fc26 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop3_Pin;
 8003d10:	2310      	movs	r3, #16
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d14:	2300      	movs	r3, #0
 8003d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EndStop3_GPIO_Port, &GPIO_InitStruct);
 8003d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d20:	4619      	mov	r1, r3
 8003d22:	4850      	ldr	r0, [pc, #320]	@ (8003e64 <MX_GPIO_Init+0x2f8>)
 8003d24:	f001 fc1a 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : enn2_Pin dir2_Pin */
  GPIO_InitStruct.Pin = enn2_Pin|dir2_Pin;
 8003d28:	23a0      	movs	r3, #160	@ 0xa0
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4849      	ldr	r0, [pc, #292]	@ (8003e64 <MX_GPIO_Init+0x2f8>)
 8003d40:	f001 fc0c 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : EncoderBtn_Pin PB2 */
  GPIO_InitStruct.Pin = EncoderBtn_Pin|GPIO_PIN_2;
 8003d44:	2306      	movs	r3, #6
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d54:	4619      	mov	r1, r3
 8003d56:	4844      	ldr	r0, [pc, #272]	@ (8003e68 <MX_GPIO_Init+0x2fc>)
 8003d58:	f001 fc00 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnUp_Pin BtnDown_Pin */
  GPIO_InitStruct.Pin = BtnUp_Pin|BtnDown_Pin;
 8003d5c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d66:	2301      	movs	r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d6e:	4619      	mov	r1, r3
 8003d70:	483b      	ldr	r0, [pc, #236]	@ (8003e60 <MX_GPIO_Init+0x2f4>)
 8003d72:	f001 fbf3 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnLeft_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin|BtnRight_Pin;
 8003d76:	2303      	movs	r3, #3
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d86:	4619      	mov	r1, r3
 8003d88:	4839      	ldr	r0, [pc, #228]	@ (8003e70 <MX_GPIO_Init+0x304>)
 8003d8a:	f001 fbe7 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : BtnCtr_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin;
 8003d8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BtnCtr_GPIO_Port, &GPIO_InitStruct);
 8003d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003da0:	4619      	mov	r1, r3
 8003da2:	482e      	ldr	r0, [pc, #184]	@ (8003e5c <MX_GPIO_Init+0x2f0>)
 8003da4:	f001 fbda 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : enn1_Pin */
  GPIO_InitStruct.Pin = enn1_Pin;
 8003da8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dae:	2301      	movs	r3, #1
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db6:	2300      	movs	r3, #0
 8003db8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(enn1_GPIO_Port, &GPIO_InitStruct);
 8003dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4829      	ldr	r0, [pc, #164]	@ (8003e68 <MX_GPIO_Init+0x2fc>)
 8003dc2:	f001 fbcb 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_cs_Pin */
  GPIO_InitStruct.Pin = SPI_cs_Pin;
 8003dc6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI_cs_GPIO_Port, &GPIO_InitStruct);
 8003dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4823      	ldr	r0, [pc, #140]	@ (8003e6c <MX_GPIO_Init+0x300>)
 8003de0:	f001 fbbc 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : diag_Pin diag1_Pin */
  GPIO_InitStruct.Pin = diag_Pin|diag1_Pin;
 8003de4:	f248 0302 	movw	r3, #32770	@ 0x8002
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003df6:	4619      	mov	r1, r3
 8003df8:	481c      	ldr	r0, [pc, #112]	@ (8003e6c <MX_GPIO_Init+0x300>)
 8003dfa:	f001 fbaf 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003dfe:	2340      	movs	r3, #64	@ 0x40
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e02:	2301      	movs	r3, #1
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e12:	4619      	mov	r1, r3
 8003e14:	4816      	ldr	r0, [pc, #88]	@ (8003e70 <MX_GPIO_Init+0x304>)
 8003e16:	f001 fba1 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003e1a:	2380      	movs	r3, #128	@ 0x80
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4810      	ldr	r0, [pc, #64]	@ (8003e70 <MX_GPIO_Init+0x304>)
 8003e2e:	f001 fb95 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : dir4_Pin */
  GPIO_InitStruct.Pin = dir4_Pin;
 8003e32:	2301      	movs	r3, #1
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e36:	2301      	movs	r3, #1
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(dir4_GPIO_Port, &GPIO_InitStruct);
 8003e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e46:	4619      	mov	r1, r3
 8003e48:	4808      	ldr	r0, [pc, #32]	@ (8003e6c <MX_GPIO_Init+0x300>)
 8003e4a:	f001 fb87 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : EndStop4_Pin */
  GPIO_InitStruct.Pin = EndStop4_Pin;
 8003e4e:	2308      	movs	r3, #8
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e010      	b.n	8003e78 <MX_GPIO_Init+0x30c>
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40021400 	.word	0x40021400
 8003e64:	40020000 	.word	0x40020000
 8003e68:	40020400 	.word	0x40020400
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	40021800 	.word	0x40021800
 8003e74:	40020800 	.word	0x40020800
 8003e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EndStop4_GPIO_Port, &GPIO_InitStruct);
 8003e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e82:	4619      	mov	r1, r3
 8003e84:	4807      	ldr	r0, [pc, #28]	@ (8003ea4 <MX_GPIO_Init+0x338>)
 8003e86:	f001 fb69 	bl	800555c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	2028      	movs	r0, #40	@ 0x28
 8003e90:	f000 ff23 	bl	8004cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e94:	2028      	movs	r0, #40	@ 0x28
 8003e96:	f000 ff3c 	bl	8004d12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e9a:	bf00      	nop
 8003e9c:	3738      	adds	r7, #56	@ 0x38
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40020400 	.word	0x40020400

08003ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eac:	b672      	cpsid	i
}
 8003eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <Error_Handler+0x8>

08003eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef8 <HAL_MspInit+0x44>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef8 <HAL_MspInit+0x44>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <HAL_MspInit+0x44>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed2:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <HAL_MspInit+0x44>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	4a08      	ldr	r2, [pc, #32]	@ (8003ef8 <HAL_MspInit+0x44>)
 8003ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <HAL_MspInit+0x44>)
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800

08003efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b0aa      	sub	sp, #168	@ 0xa8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	2284      	movs	r2, #132	@ 0x84
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f00b ff49 	bl	800fdb4 <memset>
  if(hi2c->Instance==I2C1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a22      	ldr	r2, [pc, #136]	@ (8003fb0 <HAL_I2C_MspInit+0xb4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d13c      	bne.n	8003fa6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003f2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f32:	2300      	movs	r3, #0
 8003f34:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f36:	f107 0310 	add.w	r3, r7, #16
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f002 ffce 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003f46:	f7ff ffaf 	bl	8003ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_I2C_MspInit+0xb8>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	4a19      	ldr	r2, [pc, #100]	@ (8003fb4 <HAL_I2C_MspInit+0xb8>)
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f56:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <HAL_I2C_MspInit+0xb8>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003f62:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f6a:	2312      	movs	r3, #18
 8003f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f82:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003f86:	4619      	mov	r1, r3
 8003f88:	480b      	ldr	r0, [pc, #44]	@ (8003fb8 <HAL_I2C_MspInit+0xbc>)
 8003f8a:	f001 fae7 	bl	800555c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f8e:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <HAL_I2C_MspInit+0xb8>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	4a08      	ldr	r2, [pc, #32]	@ (8003fb4 <HAL_I2C_MspInit+0xb8>)
 8003f94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <HAL_I2C_MspInit+0xb8>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003fa6:	bf00      	nop
 8003fa8:	37a8      	adds	r7, #168	@ 0xa8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40005400 	.word	0x40005400
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40020400 	.word	0x40020400

08003fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <HAL_SPI_MspInit+0xb4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d143      	bne.n	8004066 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003fde:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	4a24      	ldr	r2, [pc, #144]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 8003fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fea:	4b22      	ldr	r3, [pc, #136]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	6313      	str	r3, [r2, #48]	@ 0x30
 8004002:	4b1c      	ldr	r3, [pc, #112]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800400e:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 8004014:	f043 0308 	orr.w	r3, r3, #8
 8004018:	6313      	str	r3, [r2, #48]	@ 0x30
 800401a:	4b16      	ldr	r3, [pc, #88]	@ (8004074 <HAL_SPI_MspInit+0xb8>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004026:	230c      	movs	r3, #12
 8004028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402a:	2302      	movs	r3, #2
 800402c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004032:	2303      	movs	r3, #3
 8004034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004036:	2305      	movs	r3, #5
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	4619      	mov	r1, r3
 8004040:	480d      	ldr	r0, [pc, #52]	@ (8004078 <HAL_SPI_MspInit+0xbc>)
 8004042:	f001 fa8b 	bl	800555c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004046:	2308      	movs	r3, #8
 8004048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404a:	2302      	movs	r3, #2
 800404c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004052:	2303      	movs	r3, #3
 8004054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004056:	2305      	movs	r3, #5
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800405a:	f107 0314 	add.w	r3, r7, #20
 800405e:	4619      	mov	r1, r3
 8004060:	4806      	ldr	r0, [pc, #24]	@ (800407c <HAL_SPI_MspInit+0xc0>)
 8004062:	f001 fa7b 	bl	800555c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004066:	bf00      	nop
 8004068:	3728      	adds	r7, #40	@ 0x28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40003800 	.word	0x40003800
 8004074:	40023800 	.word	0x40023800
 8004078:	40020800 	.word	0x40020800
 800407c:	40020c00 	.word	0x40020c00

08004080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004090:	d114      	bne.n	80040bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004092:	4b38      	ldr	r3, [pc, #224]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	4a37      	ldr	r2, [pc, #220]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6413      	str	r3, [r2, #64]	@ 0x40
 800409e:	4b35      	ldr	r3, [pc, #212]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	201c      	movs	r0, #28
 80040b0:	f000 fe13 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040b4:	201c      	movs	r0, #28
 80040b6:	f000 fe2c 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80040ba:	e056      	b.n	800416a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004178 <HAL_TIM_Base_MspInit+0xf8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d114      	bne.n	80040f0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d2:	4b28      	ldr	r3, [pc, #160]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80040de:	2200      	movs	r2, #0
 80040e0:	2100      	movs	r1, #0
 80040e2:	201d      	movs	r0, #29
 80040e4:	f000 fdf9 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040e8:	201d      	movs	r0, #29
 80040ea:	f000 fe12 	bl	8004d12 <HAL_NVIC_EnableIRQ>
}
 80040ee:	e03c      	b.n	800416a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM7)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a21      	ldr	r2, [pc, #132]	@ (800417c <HAL_TIM_Base_MspInit+0xfc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10c      	bne.n	8004114 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6413      	str	r3, [r2, #64]	@ 0x40
 8004106:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]
}
 8004112:	e02a      	b.n	800416a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM10)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a19      	ldr	r2, [pc, #100]	@ (8004180 <HAL_TIM_Base_MspInit+0x100>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d114      	bne.n	8004148 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800411e:	4b15      	ldr	r3, [pc, #84]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004122:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004128:	6453      	str	r3, [r2, #68]	@ 0x44
 800412a:	4b12      	ldr	r3, [pc, #72]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	2019      	movs	r0, #25
 800413c:	f000 fdcd 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004140:	2019      	movs	r0, #25
 8004142:	f000 fde6 	bl	8004d12 <HAL_NVIC_EnableIRQ>
}
 8004146:	e010      	b.n	800416a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM14)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a0d      	ldr	r2, [pc, #52]	@ (8004184 <HAL_TIM_Base_MspInit+0x104>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10b      	bne.n	800416a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004152:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	4a07      	ldr	r2, [pc, #28]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800415c:	6413      	str	r3, [r2, #64]	@ 0x40
 800415e:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_TIM_Base_MspInit+0xf4>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
}
 800416a:	bf00      	nop
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	40000400 	.word	0x40000400
 800417c:	40001400 	.word	0x40001400
 8004180:	40014400 	.word	0x40014400
 8004184:	40002000 	.word	0x40002000

08004188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	@ 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004214 <HAL_TIM_Encoder_MspInit+0x8c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d130      	bne.n	800420c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_TIM_Encoder_MspInit+0x90>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_TIM_Encoder_MspInit+0x90>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b6:	4b18      	ldr	r3, [pc, #96]	@ (8004218 <HAL_TIM_Encoder_MspInit+0x90>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041c2:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <HAL_TIM_Encoder_MspInit+0x90>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4a14      	ldr	r2, [pc, #80]	@ (8004218 <HAL_TIM_Encoder_MspInit+0x90>)
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ce:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <HAL_TIM_Encoder_MspInit+0x90>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 80041da:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80041de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e0:	2302      	movs	r3, #2
 80041e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e8:	2300      	movs	r3, #0
 80041ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041ec:	2302      	movs	r3, #2
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	4619      	mov	r1, r3
 80041f6:	4809      	ldr	r0, [pc, #36]	@ (800421c <HAL_TIM_Encoder_MspInit+0x94>)
 80041f8:	f001 f9b0 	bl	800555c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80041fc:	2200      	movs	r2, #0
 80041fe:	2100      	movs	r1, #0
 8004200:	201e      	movs	r0, #30
 8004202:	f000 fd6a 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004206:	201e      	movs	r0, #30
 8004208:	f000 fd83 	bl	8004d12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800420c:	bf00      	nop
 800420e:	3728      	adds	r7, #40	@ 0x28
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40000800 	.word	0x40000800
 8004218:	40023800 	.word	0x40023800
 800421c:	40020c00 	.word	0x40020c00

08004220 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <HAL_TIM_PWM_MspInit+0x68>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10c      	bne.n	800424c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004232:	4b16      	ldr	r3, [pc, #88]	@ (800428c <HAL_TIM_PWM_MspInit+0x6c>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	4a15      	ldr	r2, [pc, #84]	@ (800428c <HAL_TIM_PWM_MspInit+0x6c>)
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	6413      	str	r3, [r2, #64]	@ 0x40
 800423e:	4b13      	ldr	r3, [pc, #76]	@ (800428c <HAL_TIM_PWM_MspInit+0x6c>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800424a:	e018      	b.n	800427e <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM9)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0f      	ldr	r2, [pc, #60]	@ (8004290 <HAL_TIM_PWM_MspInit+0x70>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d113      	bne.n	800427e <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <HAL_TIM_PWM_MspInit+0x6c>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	4a0c      	ldr	r2, [pc, #48]	@ (800428c <HAL_TIM_PWM_MspInit+0x6c>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	6453      	str	r3, [r2, #68]	@ 0x44
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <HAL_TIM_PWM_MspInit+0x6c>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	2018      	movs	r0, #24
 8004274:	f000 fd31 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004278:	2018      	movs	r0, #24
 800427a:	f000 fd4a 	bl	8004d12 <HAL_NVIC_EnableIRQ>
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40023800 	.word	0x40023800
 8004290:	40014000 	.word	0x40014000

08004294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08e      	sub	sp, #56	@ 0x38
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b4:	d11d      	bne.n	80042f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b6:	4b66      	ldr	r3, [pc, #408]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	4a65      	ldr	r2, [pc, #404]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042c2:	4b63      	ldr	r3, [pc, #396]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = step1_Pin;
 80042ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d4:	2302      	movs	r3, #2
 80042d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042dc:	2300      	movs	r3, #0
 80042de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042e0:	2301      	movs	r3, #1
 80042e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 80042e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042e8:	4619      	mov	r1, r3
 80042ea:	485a      	ldr	r0, [pc, #360]	@ (8004454 <HAL_TIM_MspPostInit+0x1c0>)
 80042ec:	f001 f936 	bl	800555c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80042f0:	e0aa      	b.n	8004448 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM3)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a58      	ldr	r2, [pc, #352]	@ (8004458 <HAL_TIM_MspPostInit+0x1c4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d11c      	bne.n	8004336 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fc:	4b54      	ldr	r3, [pc, #336]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	4a53      	ldr	r2, [pc, #332]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6313      	str	r3, [r2, #48]	@ 0x30
 8004308:	4b51      	ldr	r3, [pc, #324]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = step2_Pin;
 8004314:	2340      	movs	r3, #64	@ 0x40
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004318:	2302      	movs	r3, #2
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004320:	2300      	movs	r3, #0
 8004322:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004324:	2302      	movs	r3, #2
 8004326:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 8004328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800432c:	4619      	mov	r1, r3
 800432e:	484b      	ldr	r0, [pc, #300]	@ (800445c <HAL_TIM_MspPostInit+0x1c8>)
 8004330:	f001 f914 	bl	800555c <HAL_GPIO_Init>
}
 8004334:	e088      	b.n	8004448 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM5)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a49      	ldr	r2, [pc, #292]	@ (8004460 <HAL_TIM_MspPostInit+0x1cc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d11c      	bne.n	800437a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004340:	4b43      	ldr	r3, [pc, #268]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	4a42      	ldr	r2, [pc, #264]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6313      	str	r3, [r2, #48]	@ 0x30
 800434c:	4b40      	ldr	r3, [pc, #256]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = servoPWM_Pin;
 8004358:	2301      	movs	r3, #1
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004364:	2300      	movs	r3, #0
 8004366:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004368:	2302      	movs	r3, #2
 800436a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(servoPWM_GPIO_Port, &GPIO_InitStruct);
 800436c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004370:	4619      	mov	r1, r3
 8004372:	483a      	ldr	r0, [pc, #232]	@ (800445c <HAL_TIM_MspPostInit+0x1c8>)
 8004374:	f001 f8f2 	bl	800555c <HAL_GPIO_Init>
}
 8004378:	e066      	b.n	8004448 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM9)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a39      	ldr	r2, [pc, #228]	@ (8004464 <HAL_TIM_MspPostInit+0x1d0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d11c      	bne.n	80043be <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004384:	4b32      	ldr	r3, [pc, #200]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	4a31      	ldr	r2, [pc, #196]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 800438a:	f043 0310 	orr.w	r3, r3, #16
 800438e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004390:	4b2f      	ldr	r3, [pc, #188]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = step3_Pin;
 800439c:	2320      	movs	r3, #32
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a0:	2302      	movs	r3, #2
 80043a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a8:	2300      	movs	r3, #0
 80043aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80043ac:	2303      	movs	r3, #3
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step3_GPIO_Port, &GPIO_InitStruct);
 80043b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043b4:	4619      	mov	r1, r3
 80043b6:	482c      	ldr	r0, [pc, #176]	@ (8004468 <HAL_TIM_MspPostInit+0x1d4>)
 80043b8:	f001 f8d0 	bl	800555c <HAL_GPIO_Init>
}
 80043bc:	e044      	b.n	8004448 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM10)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2a      	ldr	r2, [pc, #168]	@ (800446c <HAL_TIM_MspPostInit+0x1d8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d11d      	bne.n	8004404 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c8:	4b21      	ldr	r3, [pc, #132]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	4a20      	ldr	r2, [pc, #128]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 80043ce:	f043 0302 	orr.w	r3, r3, #2
 80043d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = step4_Pin;
 80043e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e6:	2302      	movs	r3, #2
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ee:	2300      	movs	r3, #0
 80043f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80043f2:	2303      	movs	r3, #3
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step4_GPIO_Port, &GPIO_InitStruct);
 80043f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043fa:	4619      	mov	r1, r3
 80043fc:	4815      	ldr	r0, [pc, #84]	@ (8004454 <HAL_TIM_MspPostInit+0x1c0>)
 80043fe:	f001 f8ad 	bl	800555c <HAL_GPIO_Init>
}
 8004402:	e021      	b.n	8004448 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM14)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a19      	ldr	r2, [pc, #100]	@ (8004470 <HAL_TIM_MspPostInit+0x1dc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d11c      	bne.n	8004448 <HAL_TIM_MspPostInit+0x1b4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	4a0f      	ldr	r2, [pc, #60]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 8004414:	f043 0320 	orr.w	r3, r3, #32
 8004418:	6313      	str	r3, [r2, #48]	@ 0x30
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <HAL_TIM_MspPostInit+0x1bc>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 8004426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442c:	2302      	movs	r3, #2
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004434:	2300      	movs	r3, #0
 8004436:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004438:	2309      	movs	r3, #9
 800443a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 800443c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004440:	4619      	mov	r1, r3
 8004442:	480c      	ldr	r0, [pc, #48]	@ (8004474 <HAL_TIM_MspPostInit+0x1e0>)
 8004444:	f001 f88a 	bl	800555c <HAL_GPIO_Init>
}
 8004448:	bf00      	nop
 800444a:	3738      	adds	r7, #56	@ 0x38
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	40020400 	.word	0x40020400
 8004458:	40000400 	.word	0x40000400
 800445c:	40020000 	.word	0x40020000
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40014000 	.word	0x40014000
 8004468:	40021000 	.word	0x40021000
 800446c:	40014400 	.word	0x40014400
 8004470:	40002000 	.word	0x40002000
 8004474:	40021400 	.word	0x40021400

08004478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b0ac      	sub	sp, #176	@ 0xb0
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004480:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004490:	f107 0318 	add.w	r3, r7, #24
 8004494:	2284      	movs	r2, #132	@ 0x84
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f00b fc8b 	bl	800fdb4 <memset>
  if(huart->Instance==USART2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004618 <HAL_UART_MspInit+0x1a0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d171      	bne.n	800458c <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80044a8:	2380      	movs	r3, #128	@ 0x80
 80044aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80044ac:	2300      	movs	r3, #0
 80044ae:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044b0:	f107 0318 	add.w	r3, r7, #24
 80044b4:	4618      	mov	r0, r3
 80044b6:	f002 fd11 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80044c0:	f7ff fcf2 	bl	8003ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044c4:	4b55      	ldr	r3, [pc, #340]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	4a54      	ldr	r2, [pc, #336]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80044ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d0:	4b52      	ldr	r3, [pc, #328]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044dc:	4b4f      	ldr	r3, [pc, #316]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e0:	4a4e      	ldr	r2, [pc, #312]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80044e2:	f043 0308 	orr.w	r3, r3, #8
 80044e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80044e8:	4b4c      	ldr	r3, [pc, #304]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80044f4:	2360      	movs	r3, #96	@ 0x60
 80044f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fa:	2302      	movs	r3, #2
 80044fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004506:	2303      	movs	r3, #3
 8004508:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800450c:	2307      	movs	r3, #7
 800450e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004512:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004516:	4619      	mov	r1, r3
 8004518:	4841      	ldr	r0, [pc, #260]	@ (8004620 <HAL_UART_MspInit+0x1a8>)
 800451a:	f001 f81f 	bl	800555c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800451e:	4b41      	ldr	r3, [pc, #260]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004520:	4a41      	ldr	r2, [pc, #260]	@ (8004628 <HAL_UART_MspInit+0x1b0>)
 8004522:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004524:	4b3f      	ldr	r3, [pc, #252]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004526:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800452a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800452c:	4b3d      	ldr	r3, [pc, #244]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004532:	4b3c      	ldr	r3, [pc, #240]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004534:	2200      	movs	r2, #0
 8004536:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004538:	4b3a      	ldr	r3, [pc, #232]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 800453a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800453e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004540:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004542:	2200      	movs	r2, #0
 8004544:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004546:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004548:	2200      	movs	r2, #0
 800454a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800454c:	4b35      	ldr	r3, [pc, #212]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004552:	4b34      	ldr	r3, [pc, #208]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004554:	2200      	movs	r2, #0
 8004556:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004558:	4b32      	ldr	r3, [pc, #200]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 800455a:	2200      	movs	r2, #0
 800455c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800455e:	4831      	ldr	r0, [pc, #196]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004560:	f000 fbf2 	bl	8004d48 <HAL_DMA_Init>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 800456a:	f7ff fc9d 	bl	8003ea8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2c      	ldr	r2, [pc, #176]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004572:	675a      	str	r2, [r3, #116]	@ 0x74
 8004574:	4a2b      	ldr	r2, [pc, #172]	@ (8004624 <HAL_UART_MspInit+0x1ac>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800457a:	2200      	movs	r2, #0
 800457c:	2100      	movs	r1, #0
 800457e:	2026      	movs	r0, #38	@ 0x26
 8004580:	f000 fbab 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004584:	2026      	movs	r0, #38	@ 0x26
 8004586:	f000 fbc4 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800458a:	e041      	b.n	8004610 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a26      	ldr	r2, [pc, #152]	@ (800462c <HAL_UART_MspInit+0x1b4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d13c      	bne.n	8004610 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004596:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800459a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800459c:	2300      	movs	r3, #0
 800459e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045a0:	f107 0318 	add.w	r3, r7, #24
 80045a4:	4618      	mov	r0, r3
 80045a6:	f002 fc99 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 80045b0:	f7ff fc7a 	bl	8003ea8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045b4:	4b19      	ldr	r3, [pc, #100]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	4a18      	ldr	r2, [pc, #96]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80045ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045be:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c0:	4b16      	ldr	r3, [pc, #88]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045cc:	4b13      	ldr	r3, [pc, #76]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	4a12      	ldr	r2, [pc, #72]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80045d2:	f043 0308 	orr.w	r3, r3, #8
 80045d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d8:	4b10      	ldr	r3, [pc, #64]	@ (800461c <HAL_UART_MspInit+0x1a4>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80045e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80045e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f8:	2303      	movs	r3, #3
 80045fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80045fe:	2307      	movs	r3, #7
 8004600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004604:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004608:	4619      	mov	r1, r3
 800460a:	4805      	ldr	r0, [pc, #20]	@ (8004620 <HAL_UART_MspInit+0x1a8>)
 800460c:	f000 ffa6 	bl	800555c <HAL_GPIO_Init>
}
 8004610:	bf00      	nop
 8004612:	37b0      	adds	r7, #176	@ 0xb0
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40004400 	.word	0x40004400
 800461c:	40023800 	.word	0x40023800
 8004620:	40020c00 	.word	0x40020c00
 8004624:	20001f3c 	.word	0x20001f3c
 8004628:	40026088 	.word	0x40026088
 800462c:	40004800 	.word	0x40004800

08004630 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b0ac      	sub	sp, #176	@ 0xb0
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004648:	f107 0318 	add.w	r3, r7, #24
 800464c:	2284      	movs	r2, #132	@ 0x84
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f00b fbaf 	bl	800fdb4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465e:	d159      	bne.n	8004714 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004660:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004664:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800466c:	f107 0318 	add.w	r3, r7, #24
 8004670:	4618      	mov	r0, r3
 8004672:	f002 fc33 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800467c:	f7ff fc14 	bl	8003ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004680:	4b26      	ldr	r3, [pc, #152]	@ (800471c <HAL_PCD_MspInit+0xec>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	4a25      	ldr	r2, [pc, #148]	@ (800471c <HAL_PCD_MspInit+0xec>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6313      	str	r3, [r2, #48]	@ 0x30
 800468c:	4b23      	ldr	r3, [pc, #140]	@ (800471c <HAL_PCD_MspInit+0xec>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004698:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800469c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ac:	2303      	movs	r3, #3
 80046ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80046b2:	230a      	movs	r3, #10
 80046b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046bc:	4619      	mov	r1, r3
 80046be:	4818      	ldr	r0, [pc, #96]	@ (8004720 <HAL_PCD_MspInit+0xf0>)
 80046c0:	f000 ff4c 	bl	800555c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80046c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80046d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046dc:	4619      	mov	r1, r3
 80046de:	4810      	ldr	r0, [pc, #64]	@ (8004720 <HAL_PCD_MspInit+0xf0>)
 80046e0:	f000 ff3c 	bl	800555c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80046e4:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <HAL_PCD_MspInit+0xec>)
 80046e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e8:	4a0c      	ldr	r2, [pc, #48]	@ (800471c <HAL_PCD_MspInit+0xec>)
 80046ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <HAL_PCD_MspInit+0xec>)
 80046f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4b07      	ldr	r3, [pc, #28]	@ (800471c <HAL_PCD_MspInit+0xec>)
 80046fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004700:	4a06      	ldr	r2, [pc, #24]	@ (800471c <HAL_PCD_MspInit+0xec>)
 8004702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004706:	6453      	str	r3, [r2, #68]	@ 0x44
 8004708:	4b04      	ldr	r3, [pc, #16]	@ (800471c <HAL_PCD_MspInit+0xec>)
 800470a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8004714:	bf00      	nop
 8004716:	37b0      	adds	r7, #176	@ 0xb0
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40023800 	.word	0x40023800
 8004720:	40020000 	.word	0x40020000

08004724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <NMI_Handler+0x4>

0800472c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <HardFault_Handler+0x4>

08004734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <MemManage_Handler+0x4>

0800473c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <BusFault_Handler+0x4>

08004744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <UsageFault_Handler+0x4>

0800474c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004750:	bf00      	nop
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800475a:	b480      	push	{r7}
 800475c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800477a:	f000 f98f 	bl	8004a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004788:	4802      	ldr	r0, [pc, #8]	@ (8004794 <DMA1_Stream5_IRQHandler+0x10>)
 800478a:	f000 fc7d 	bl	8005088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20001f3c 	.word	0x20001f3c

08004798 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800479c:	4802      	ldr	r0, [pc, #8]	@ (80047a8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800479e:	f004 fae1 	bl	8008d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20001d48 	.word	0x20001d48

080047ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80047b0:	4802      	ldr	r0, [pc, #8]	@ (80047bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80047b2:	f004 fad7 	bl	8008d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20001d94 	.word	0x20001d94

080047c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047c4:	4802      	ldr	r0, [pc, #8]	@ (80047d0 <TIM2_IRQHandler+0x10>)
 80047c6:	f004 facd 	bl	8008d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20001bcc 	.word	0x20001bcc

080047d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80047d8:	4802      	ldr	r0, [pc, #8]	@ (80047e4 <TIM3_IRQHandler+0x10>)
 80047da:	f004 fac3 	bl	8008d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20001c18 	.word	0x20001c18

080047e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80047ec:	4802      	ldr	r0, [pc, #8]	@ (80047f8 <TIM4_IRQHandler+0x10>)
 80047ee:	f004 fab9 	bl	8008d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80047f2:	bf00      	nop
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20001c64 	.word	0x20001c64

080047fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004800:	4802      	ldr	r0, [pc, #8]	@ (800480c <USART2_IRQHandler+0x10>)
 8004802:	f005 fb4f 	bl	8009ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20001e2c 	.word	0x20001e2c

08004810 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8004814:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004818:	f001 f87e 	bl	8005918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}

08004820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return 1;
 8004824:	2301      	movs	r3, #1
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <_kill>:

int _kill(int pid, int sig)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800483a:	f00b fb1b 	bl	800fe74 <__errno>
 800483e:	4603      	mov	r3, r0
 8004840:	2216      	movs	r2, #22
 8004842:	601a      	str	r2, [r3, #0]
  return -1;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <_exit>:

void _exit (int status)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004858:	f04f 31ff 	mov.w	r1, #4294967295
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ffe7 	bl	8004830 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <_exit+0x12>

08004866 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e00a      	b.n	800488e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004878:	f3af 8000 	nop.w
 800487c:	4601      	mov	r1, r0
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	60ba      	str	r2, [r7, #8]
 8004884:	b2ca      	uxtb	r2, r1
 8004886:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	3301      	adds	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	dbf0      	blt.n	8004878 <_read+0x12>
  }

  return len;
 8004896:	687b      	ldr	r3, [r7, #4]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e009      	b.n	80048c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	60ba      	str	r2, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	3301      	adds	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	dbf1      	blt.n	80048b2 <_write+0x12>
  }
  return len;
 80048ce:	687b      	ldr	r3, [r7, #4]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_close>:

int _close(int file)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004900:	605a      	str	r2, [r3, #4]
  return 0;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <_isatty>:

int _isatty(int file)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004918:	2301      	movs	r3, #1
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004948:	4a14      	ldr	r2, [pc, #80]	@ (800499c <_sbrk+0x5c>)
 800494a:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <_sbrk+0x60>)
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004954:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <_sbrk+0x64>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800495c:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <_sbrk+0x64>)
 800495e:	4a12      	ldr	r2, [pc, #72]	@ (80049a8 <_sbrk+0x68>)
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <_sbrk+0x64>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d207      	bcs.n	8004980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004970:	f00b fa80 	bl	800fe74 <__errno>
 8004974:	4603      	mov	r3, r0
 8004976:	220c      	movs	r2, #12
 8004978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	e009      	b.n	8004994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004980:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <_sbrk+0x64>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004986:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <_sbrk+0x64>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	4a05      	ldr	r2, [pc, #20]	@ (80049a4 <_sbrk+0x64>)
 8004990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004992:	68fb      	ldr	r3, [r7, #12]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20050000 	.word	0x20050000
 80049a0:	00000400 	.word	0x00000400
 80049a4:	2000266c 	.word	0x2000266c
 80049a8:	20002a08 	.word	0x20002a08

080049ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049b0:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <SystemInit+0x20>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	4a05      	ldr	r2, [pc, #20]	@ (80049cc <SystemInit+0x20>)
 80049b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <Reset_Handler>:
 80049d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a08 <LoopFillZerobss+0xe>
 80049d4:	f7ff ffea 	bl	80049ac <SystemInit>
 80049d8:	480c      	ldr	r0, [pc, #48]	@ (8004a0c <LoopFillZerobss+0x12>)
 80049da:	490d      	ldr	r1, [pc, #52]	@ (8004a10 <LoopFillZerobss+0x16>)
 80049dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004a14 <LoopFillZerobss+0x1a>)
 80049de:	2300      	movs	r3, #0
 80049e0:	e002      	b.n	80049e8 <LoopCopyDataInit>

080049e2 <CopyDataInit>:
 80049e2:	58d4      	ldr	r4, [r2, r3]
 80049e4:	50c4      	str	r4, [r0, r3]
 80049e6:	3304      	adds	r3, #4

080049e8 <LoopCopyDataInit>:
 80049e8:	18c4      	adds	r4, r0, r3
 80049ea:	428c      	cmp	r4, r1
 80049ec:	d3f9      	bcc.n	80049e2 <CopyDataInit>
 80049ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004a18 <LoopFillZerobss+0x1e>)
 80049f0:	4c0a      	ldr	r4, [pc, #40]	@ (8004a1c <LoopFillZerobss+0x22>)
 80049f2:	2300      	movs	r3, #0
 80049f4:	e001      	b.n	80049fa <LoopFillZerobss>

080049f6 <FillZerobss>:
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	3204      	adds	r2, #4

080049fa <LoopFillZerobss>:
 80049fa:	42a2      	cmp	r2, r4
 80049fc:	d3fb      	bcc.n	80049f6 <FillZerobss>
 80049fe:	f00b fa3f 	bl	800fe80 <__libc_init_array>
 8004a02:	f7fe fb6d 	bl	80030e0 <main>
 8004a06:	4770      	bx	lr
 8004a08:	20050000 	.word	0x20050000
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	20000238 	.word	0x20000238
 8004a14:	08012f48 	.word	0x08012f48
 8004a18:	20000238 	.word	0x20000238
 8004a1c:	20002a08 	.word	0x20002a08

08004a20 <ADC_IRQHandler>:
 8004a20:	e7fe      	b.n	8004a20 <ADC_IRQHandler>

08004a22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a26:	2003      	movs	r0, #3
 8004a28:	f000 f94c 	bl	8004cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f000 f805 	bl	8004a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a32:	f7ff fa3f 	bl	8003eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a44:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <HAL_InitTick+0x54>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_InitTick+0x58>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f967 	bl	8004d2e <HAL_SYSTICK_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e00e      	b.n	8004a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b0f      	cmp	r3, #15
 8004a6e:	d80a      	bhi.n	8004a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a70:	2200      	movs	r2, #0
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	f000 f92f 	bl	8004cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a7c:	4a06      	ldr	r2, [pc, #24]	@ (8004a98 <HAL_InitTick+0x5c>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e000      	b.n	8004a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	2000004c 	.word	0x2000004c
 8004a94:	20000054 	.word	0x20000054
 8004a98:	20000050 	.word	0x20000050

08004a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <HAL_IncTick+0x20>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_IncTick+0x24>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4413      	add	r3, r2
 8004aac:	4a04      	ldr	r2, [pc, #16]	@ (8004ac0 <HAL_IncTick+0x24>)
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000054 	.word	0x20000054
 8004ac0:	20002670 	.word	0x20002670

08004ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	@ (8004ad8 <HAL_GetTick+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20002670 	.word	0x20002670

08004adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7ff ffee 	bl	8004ac4 <HAL_GetTick>
 8004ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d005      	beq.n	8004b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_Delay+0x44>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b02:	bf00      	nop
 8004b04:	f7ff ffde 	bl	8004ac4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d8f7      	bhi.n	8004b04 <HAL_Delay+0x28>
  {
  }
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000054 	.word	0x20000054

08004b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b34:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <__NVIC_SetPriorityGrouping+0x40>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b40:	4013      	ands	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b52:	4a04      	ldr	r2, [pc, #16]	@ (8004b64 <__NVIC_SetPriorityGrouping+0x40>)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	60d3      	str	r3, [r2, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00
 8004b68:	05fa0000 	.word	0x05fa0000

08004b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b70:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <__NVIC_GetPriorityGrouping+0x18>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 0307 	and.w	r3, r3, #7
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	db0b      	blt.n	8004bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	4907      	ldr	r1, [pc, #28]	@ (8004bc0 <__NVIC_EnableIRQ+0x38>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2001      	movs	r0, #1
 8004baa:	fa00 f202 	lsl.w	r2, r0, r2
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000e100 	.word	0xe000e100

08004bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db0a      	blt.n	8004bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	490c      	ldr	r1, [pc, #48]	@ (8004c10 <__NVIC_SetPriority+0x4c>)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	0112      	lsls	r2, r2, #4
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	440b      	add	r3, r1
 8004be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bec:	e00a      	b.n	8004c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4908      	ldr	r1, [pc, #32]	@ (8004c14 <__NVIC_SetPriority+0x50>)
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	3b04      	subs	r3, #4
 8004bfc:	0112      	lsls	r2, r2, #4
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	440b      	add	r3, r1
 8004c02:	761a      	strb	r2, [r3, #24]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	e000e100 	.word	0xe000e100
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	@ 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f1c3 0307 	rsb	r3, r3, #7
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	bf28      	it	cs
 8004c36:	2304      	movcs	r3, #4
 8004c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	2b06      	cmp	r3, #6
 8004c40:	d902      	bls.n	8004c48 <NVIC_EncodePriority+0x30>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3b03      	subs	r3, #3
 8004c46:	e000      	b.n	8004c4a <NVIC_EncodePriority+0x32>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43da      	mvns	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c60:	f04f 31ff 	mov.w	r1, #4294967295
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6a:	43d9      	mvns	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c70:	4313      	orrs	r3, r2
         );
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3724      	adds	r7, #36	@ 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c90:	d301      	bcc.n	8004c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c92:	2301      	movs	r3, #1
 8004c94:	e00f      	b.n	8004cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <SysTick_Config+0x40>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c9e:	210f      	movs	r1, #15
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	f7ff ff8e 	bl	8004bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <SysTick_Config+0x40>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <SysTick_Config+0x40>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	e000e010 	.word	0xe000e010

08004cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff29 	bl	8004b24 <__NVIC_SetPriorityGrouping>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cec:	f7ff ff3e 	bl	8004b6c <__NVIC_GetPriorityGrouping>
 8004cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	6978      	ldr	r0, [r7, #20]
 8004cf8:	f7ff ff8e 	bl	8004c18 <NVIC_EncodePriority>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff5d 	bl	8004bc4 <__NVIC_SetPriority>
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	4603      	mov	r3, r0
 8004d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff31 	bl	8004b88 <__NVIC_EnableIRQ>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff ffa2 	bl	8004c80 <SysTick_Config>
 8004d3c:	4603      	mov	r3, r0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d54:	f7ff feb6 	bl	8004ac4 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e099      	b.n	8004e98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d84:	e00f      	b.n	8004da6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d86:	f7ff fe9d 	bl	8004ac4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d908      	bls.n	8004da6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e078      	b.n	8004e98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e8      	bne.n	8004d86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4b38      	ldr	r3, [pc, #224]	@ (8004ea0 <HAL_DMA_Init+0x158>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d107      	bne.n	8004e10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d117      	bne.n	8004e6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fb09 	bl	8005464 <DMA_CheckFifoParam>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2240      	movs	r2, #64	@ 0x40
 8004e5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e66:	2301      	movs	r3, #1
 8004e68:	e016      	b.n	8004e98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fac0 	bl	80053f8 <DMA_CalcBaseAndBitshift>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	223f      	movs	r2, #63	@ 0x3f
 8004e82:	409a      	lsls	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	f010803f 	.word	0xf010803f

08004ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_DMA_Start_IT+0x26>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e048      	b.n	8004f5c <HAL_DMA_Start_IT+0xb8>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d137      	bne.n	8004f4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa52 	bl	800539c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efc:	223f      	movs	r2, #63	@ 0x3f
 8004efe:	409a      	lsls	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0216 	orr.w	r2, r2, #22
 8004f12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f22:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0208 	orr.w	r2, r2, #8
 8004f3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e005      	b.n	8004f5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
 8004f58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f72:	f7ff fda7 	bl	8004ac4 <HAL_GetTick>
 8004f76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d008      	beq.n	8004f96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2280      	movs	r2, #128	@ 0x80
 8004f88:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e052      	b.n	800503c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0216 	bic.w	r2, r2, #22
 8004fa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_DMA_Abort+0x62>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0208 	bic.w	r2, r2, #8
 8004fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fe6:	e013      	b.n	8005010 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fe8:	f7ff fd6c 	bl	8004ac4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d90c      	bls.n	8005010 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2203      	movs	r2, #3
 8005000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e015      	b.n	800503c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e4      	bne.n	8004fe8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005022:	223f      	movs	r2, #63	@ 0x3f
 8005024:	409a      	lsls	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d004      	beq.n	8005062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2280      	movs	r2, #128	@ 0x80
 800505c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e00c      	b.n	800507c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2205      	movs	r2, #5
 8005066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005094:	4b8e      	ldr	r3, [pc, #568]	@ (80052d0 <HAL_DMA_IRQHandler+0x248>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a8e      	ldr	r2, [pc, #568]	@ (80052d4 <HAL_DMA_IRQHandler+0x24c>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	0a9b      	lsrs	r3, r3, #10
 80050a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b2:	2208      	movs	r2, #8
 80050b4:	409a      	lsls	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01a      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0204 	bic.w	r2, r2, #4
 80050da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e0:	2208      	movs	r2, #8
 80050e2:	409a      	lsls	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ec:	f043 0201 	orr.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	2201      	movs	r2, #1
 80050fa:	409a      	lsls	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d012      	beq.n	800512a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005116:	2201      	movs	r2, #1
 8005118:	409a      	lsls	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005122:	f043 0202 	orr.w	r2, r3, #2
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512e:	2204      	movs	r2, #4
 8005130:	409a      	lsls	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4013      	ands	r3, r2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d012      	beq.n	8005160 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514c:	2204      	movs	r2, #4
 800514e:	409a      	lsls	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005158:	f043 0204 	orr.w	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005164:	2210      	movs	r2, #16
 8005166:	409a      	lsls	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d043      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d03c      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005182:	2210      	movs	r2, #16
 8005184:	409a      	lsls	r2, r3
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d018      	beq.n	80051ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d108      	bne.n	80051b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d024      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	e01f      	b.n	80051f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
 80051c8:	e016      	b.n	80051f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d107      	bne.n	80051e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0208 	bic.w	r2, r2, #8
 80051e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fc:	2220      	movs	r2, #32
 80051fe:	409a      	lsls	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 808f 	beq.w	8005328 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8087 	beq.w	8005328 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521e:	2220      	movs	r2, #32
 8005220:	409a      	lsls	r2, r3
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b05      	cmp	r3, #5
 8005230:	d136      	bne.n	80052a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0216 	bic.w	r2, r2, #22
 8005240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695a      	ldr	r2, [r3, #20]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005250:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <HAL_DMA_IRQHandler+0x1da>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0208 	bic.w	r2, r2, #8
 8005270:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005276:	223f      	movs	r2, #63	@ 0x3f
 8005278:	409a      	lsls	r2, r3
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005292:	2b00      	cmp	r3, #0
 8005294:	d07e      	beq.n	8005394 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
        }
        return;
 800529e:	e079      	b.n	8005394 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01d      	beq.n	80052ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10d      	bne.n	80052d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d031      	beq.n	8005328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
 80052cc:	e02c      	b.n	8005328 <HAL_DMA_IRQHandler+0x2a0>
 80052ce:	bf00      	nop
 80052d0:	2000004c 	.word	0x2000004c
 80052d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d023      	beq.n	8005328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
 80052e8:	e01e      	b.n	8005328 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10f      	bne.n	8005318 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0210 	bic.w	r2, r2, #16
 8005306:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532c:	2b00      	cmp	r3, #0
 800532e:	d032      	beq.n	8005396 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d022      	beq.n	8005382 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2205      	movs	r2, #5
 8005340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	3301      	adds	r3, #1
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	429a      	cmp	r2, r3
 800535e:	d307      	bcc.n	8005370 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f2      	bne.n	8005354 <HAL_DMA_IRQHandler+0x2cc>
 800536e:	e000      	b.n	8005372 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005370:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
 8005392:	e000      	b.n	8005396 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005394:	bf00      	nop
    }
  }
}
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b40      	cmp	r3, #64	@ 0x40
 80053c8:	d108      	bne.n	80053dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053da:	e007      	b.n	80053ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	3b10      	subs	r3, #16
 8005408:	4a13      	ldr	r2, [pc, #76]	@ (8005458 <DMA_CalcBaseAndBitshift+0x60>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	091b      	lsrs	r3, r3, #4
 8005410:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005412:	4a12      	ldr	r2, [pc, #72]	@ (800545c <DMA_CalcBaseAndBitshift+0x64>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d908      	bls.n	8005438 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <DMA_CalcBaseAndBitshift+0x68>)
 800542e:	4013      	ands	r3, r2
 8005430:	1d1a      	adds	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	659a      	str	r2, [r3, #88]	@ 0x58
 8005436:	e006      	b.n	8005446 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	4b08      	ldr	r3, [pc, #32]	@ (8005460 <DMA_CalcBaseAndBitshift+0x68>)
 8005440:	4013      	ands	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	aaaaaaab 	.word	0xaaaaaaab
 800545c:	08012734 	.word	0x08012734
 8005460:	fffffc00 	.word	0xfffffc00

08005464 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d11f      	bne.n	80054be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d856      	bhi.n	8005532 <DMA_CheckFifoParam+0xce>
 8005484:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <DMA_CheckFifoParam+0x28>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	0800549d 	.word	0x0800549d
 8005490:	080054af 	.word	0x080054af
 8005494:	0800549d 	.word	0x0800549d
 8005498:	08005533 	.word	0x08005533
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d046      	beq.n	8005536 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ac:	e043      	b.n	8005536 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054b6:	d140      	bne.n	800553a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054bc:	e03d      	b.n	800553a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c6:	d121      	bne.n	800550c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d837      	bhi.n	800553e <DMA_CheckFifoParam+0xda>
 80054ce:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <DMA_CheckFifoParam+0x70>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054e5 	.word	0x080054e5
 80054d8:	080054eb 	.word	0x080054eb
 80054dc:	080054e5 	.word	0x080054e5
 80054e0:	080054fd 	.word	0x080054fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
      break;
 80054e8:	e030      	b.n	800554c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d025      	beq.n	8005542 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fa:	e022      	b.n	8005542 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005504:	d11f      	bne.n	8005546 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800550a:	e01c      	b.n	8005546 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d903      	bls.n	800551a <DMA_CheckFifoParam+0xb6>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d003      	beq.n	8005520 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005518:	e018      	b.n	800554c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      break;
 800551e:	e015      	b.n	800554c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e00b      	b.n	800554a <DMA_CheckFifoParam+0xe6>
      break;
 8005532:	bf00      	nop
 8005534:	e00a      	b.n	800554c <DMA_CheckFifoParam+0xe8>
      break;
 8005536:	bf00      	nop
 8005538:	e008      	b.n	800554c <DMA_CheckFifoParam+0xe8>
      break;
 800553a:	bf00      	nop
 800553c:	e006      	b.n	800554c <DMA_CheckFifoParam+0xe8>
      break;
 800553e:	bf00      	nop
 8005540:	e004      	b.n	800554c <DMA_CheckFifoParam+0xe8>
      break;
 8005542:	bf00      	nop
 8005544:	e002      	b.n	800554c <DMA_CheckFifoParam+0xe8>
      break;   
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <DMA_CheckFifoParam+0xe8>
      break;
 800554a:	bf00      	nop
    }
  } 
  
  return status; 
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop

0800555c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800555c:	b480      	push	{r7}
 800555e:	b089      	sub	sp, #36	@ 0x24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005572:	2300      	movs	r3, #0
 8005574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e175      	b.n	8005868 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800557c:	2201      	movs	r2, #1
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4013      	ands	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	429a      	cmp	r2, r3
 8005596:	f040 8164 	bne.w	8005862 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d005      	beq.n	80055b2 <HAL_GPIO_Init+0x56>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d130      	bne.n	8005614 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	2203      	movs	r2, #3
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	43db      	mvns	r3, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4013      	ands	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055e8:	2201      	movs	r2, #1
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f003 0201 	and.w	r2, r3, #1
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4313      	orrs	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	2b03      	cmp	r3, #3
 800561e:	d017      	beq.n	8005650 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	2203      	movs	r2, #3
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	4013      	ands	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d123      	bne.n	80056a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	08da      	lsrs	r2, r3, #3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3208      	adds	r2, #8
 8005664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	220f      	movs	r2, #15
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4013      	ands	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4313      	orrs	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	08da      	lsrs	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3208      	adds	r2, #8
 800569e:	69b9      	ldr	r1, [r7, #24]
 80056a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	2203      	movs	r2, #3
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 0203 	and.w	r2, r3, #3
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80be 	beq.w	8005862 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056e6:	4b66      	ldr	r3, [pc, #408]	@ (8005880 <HAL_GPIO_Init+0x324>)
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	4a65      	ldr	r2, [pc, #404]	@ (8005880 <HAL_GPIO_Init+0x324>)
 80056ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80056f2:	4b63      	ldr	r3, [pc, #396]	@ (8005880 <HAL_GPIO_Init+0x324>)
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056fe:	4a61      	ldr	r2, [pc, #388]	@ (8005884 <HAL_GPIO_Init+0x328>)
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	3302      	adds	r3, #2
 8005706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	220f      	movs	r2, #15
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a58      	ldr	r2, [pc, #352]	@ (8005888 <HAL_GPIO_Init+0x32c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d037      	beq.n	800579a <HAL_GPIO_Init+0x23e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a57      	ldr	r2, [pc, #348]	@ (800588c <HAL_GPIO_Init+0x330>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d031      	beq.n	8005796 <HAL_GPIO_Init+0x23a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a56      	ldr	r2, [pc, #344]	@ (8005890 <HAL_GPIO_Init+0x334>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d02b      	beq.n	8005792 <HAL_GPIO_Init+0x236>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a55      	ldr	r2, [pc, #340]	@ (8005894 <HAL_GPIO_Init+0x338>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d025      	beq.n	800578e <HAL_GPIO_Init+0x232>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a54      	ldr	r2, [pc, #336]	@ (8005898 <HAL_GPIO_Init+0x33c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01f      	beq.n	800578a <HAL_GPIO_Init+0x22e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a53      	ldr	r2, [pc, #332]	@ (800589c <HAL_GPIO_Init+0x340>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d019      	beq.n	8005786 <HAL_GPIO_Init+0x22a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a52      	ldr	r2, [pc, #328]	@ (80058a0 <HAL_GPIO_Init+0x344>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_GPIO_Init+0x226>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a51      	ldr	r2, [pc, #324]	@ (80058a4 <HAL_GPIO_Init+0x348>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00d      	beq.n	800577e <HAL_GPIO_Init+0x222>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a50      	ldr	r2, [pc, #320]	@ (80058a8 <HAL_GPIO_Init+0x34c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <HAL_GPIO_Init+0x21e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a4f      	ldr	r2, [pc, #316]	@ (80058ac <HAL_GPIO_Init+0x350>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <HAL_GPIO_Init+0x21a>
 8005772:	2309      	movs	r3, #9
 8005774:	e012      	b.n	800579c <HAL_GPIO_Init+0x240>
 8005776:	230a      	movs	r3, #10
 8005778:	e010      	b.n	800579c <HAL_GPIO_Init+0x240>
 800577a:	2308      	movs	r3, #8
 800577c:	e00e      	b.n	800579c <HAL_GPIO_Init+0x240>
 800577e:	2307      	movs	r3, #7
 8005780:	e00c      	b.n	800579c <HAL_GPIO_Init+0x240>
 8005782:	2306      	movs	r3, #6
 8005784:	e00a      	b.n	800579c <HAL_GPIO_Init+0x240>
 8005786:	2305      	movs	r3, #5
 8005788:	e008      	b.n	800579c <HAL_GPIO_Init+0x240>
 800578a:	2304      	movs	r3, #4
 800578c:	e006      	b.n	800579c <HAL_GPIO_Init+0x240>
 800578e:	2303      	movs	r3, #3
 8005790:	e004      	b.n	800579c <HAL_GPIO_Init+0x240>
 8005792:	2302      	movs	r3, #2
 8005794:	e002      	b.n	800579c <HAL_GPIO_Init+0x240>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <HAL_GPIO_Init+0x240>
 800579a:	2300      	movs	r3, #0
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	f002 0203 	and.w	r2, r2, #3
 80057a2:	0092      	lsls	r2, r2, #2
 80057a4:	4093      	lsls	r3, r2
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057ac:	4935      	ldr	r1, [pc, #212]	@ (8005884 <HAL_GPIO_Init+0x328>)
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	089b      	lsrs	r3, r3, #2
 80057b2:	3302      	adds	r3, #2
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ba:	4b3d      	ldr	r3, [pc, #244]	@ (80058b0 <HAL_GPIO_Init+0x354>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	43db      	mvns	r3, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4013      	ands	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057de:	4a34      	ldr	r2, [pc, #208]	@ (80058b0 <HAL_GPIO_Init+0x354>)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057e4:	4b32      	ldr	r3, [pc, #200]	@ (80058b0 <HAL_GPIO_Init+0x354>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005808:	4a29      	ldr	r2, [pc, #164]	@ (80058b0 <HAL_GPIO_Init+0x354>)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800580e:	4b28      	ldr	r3, [pc, #160]	@ (80058b0 <HAL_GPIO_Init+0x354>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	43db      	mvns	r3, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005832:	4a1f      	ldr	r2, [pc, #124]	@ (80058b0 <HAL_GPIO_Init+0x354>)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005838:	4b1d      	ldr	r3, [pc, #116]	@ (80058b0 <HAL_GPIO_Init+0x354>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800585c:	4a14      	ldr	r2, [pc, #80]	@ (80058b0 <HAL_GPIO_Init+0x354>)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3301      	adds	r3, #1
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2b0f      	cmp	r3, #15
 800586c:	f67f ae86 	bls.w	800557c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	3724      	adds	r7, #36	@ 0x24
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800
 8005884:	40013800 	.word	0x40013800
 8005888:	40020000 	.word	0x40020000
 800588c:	40020400 	.word	0x40020400
 8005890:	40020800 	.word	0x40020800
 8005894:	40020c00 	.word	0x40020c00
 8005898:	40021000 	.word	0x40021000
 800589c:	40021400 	.word	0x40021400
 80058a0:	40021800 	.word	0x40021800
 80058a4:	40021c00 	.word	0x40021c00
 80058a8:	40022000 	.word	0x40022000
 80058ac:	40022400 	.word	0x40022400
 80058b0:	40013c00 	.word	0x40013c00

080058b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	e001      	b.n	80058d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
 80058f0:	4613      	mov	r3, r2
 80058f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058f4:	787b      	ldrb	r3, [r7, #1]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005900:	e003      	b.n	800590a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	041a      	lsls	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	619a      	str	r2, [r3, #24]
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005922:	4b08      	ldr	r3, [pc, #32]	@ (8005944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	4013      	ands	r3, r2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d006      	beq.n	800593c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800592e:	4a05      	ldr	r2, [pc, #20]	@ (8005944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	4618      	mov	r0, r3
 8005938:	f7fd fbbe 	bl	80030b8 <HAL_GPIO_EXTI_Callback>
  }
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40013c00 	.word	0x40013c00

08005948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e08b      	b.n	8005a72 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fe fac4 	bl	8003efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	@ 0x24
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d107      	bne.n	80059c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	e006      	b.n	80059d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d108      	bne.n	80059ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	e007      	b.n	80059fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6859      	ldr	r1, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b1d      	ldr	r3, [pc, #116]	@ (8005a7c <HAL_I2C_Init+0x134>)
 8005a06:	430b      	orrs	r3, r1
 8005a08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69d9      	ldr	r1, [r3, #28]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	02008000 	.word	0x02008000

08005a80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	817b      	strh	r3, [r7, #10]
 8005a90:	4613      	mov	r3, r2
 8005a92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	f040 80fd 	bne.w	8005c9c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_I2C_Master_Transmit+0x30>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e0f6      	b.n	8005c9e <HAL_I2C_Master_Transmit+0x21e>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ab8:	f7ff f804 	bl	8004ac4 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	2319      	movs	r3, #25
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f914 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e0e1      	b.n	8005c9e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2221      	movs	r2, #33	@ 0x21
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	893a      	ldrh	r2, [r7, #8]
 8005afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2bff      	cmp	r3, #255	@ 0xff
 8005b0a:	d906      	bls.n	8005b1a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	22ff      	movs	r2, #255	@ 0xff
 8005b10:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005b12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e007      	b.n	8005b2a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b28:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d024      	beq.n	8005b7c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	781a      	ldrb	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	3301      	adds	r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	8979      	ldrh	r1, [r7, #10]
 8005b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ca8 <HAL_I2C_Master_Transmit+0x228>)
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fa83 	bl	8006080 <I2C_TransferConfig>
 8005b7a:	e066      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	8979      	ldrh	r1, [r7, #10]
 8005b84:	4b48      	ldr	r3, [pc, #288]	@ (8005ca8 <HAL_I2C_Master_Transmit+0x228>)
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fa78 	bl	8006080 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b90:	e05b      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	6a39      	ldr	r1, [r7, #32]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f907 	bl	8005daa <I2C_WaitOnTXISFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e07b      	b.n	8005c9e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d034      	beq.n	8005c4a <HAL_I2C_Master_Transmit+0x1ca>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d130      	bne.n	8005c4a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2180      	movs	r1, #128	@ 0x80
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f880 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e04d      	b.n	8005c9e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2bff      	cmp	r3, #255	@ 0xff
 8005c0a:	d90e      	bls.n	8005c2a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	22ff      	movs	r2, #255	@ 0xff
 8005c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	8979      	ldrh	r1, [r7, #10]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fa2c 	bl	8006080 <I2C_TransferConfig>
 8005c28:	e00f      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	8979      	ldrh	r1, [r7, #10]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fa1b 	bl	8006080 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d19e      	bne.n	8005b92 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	6a39      	ldr	r1, [r7, #32]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f8ed 	bl	8005e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e01a      	b.n	8005c9e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <HAL_I2C_Master_Transmit+0x22c>)
 8005c7c:	400b      	ands	r3, r1
 8005c7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	80002000 	.word	0x80002000
 8005cac:	fe00e800 	.word	0xfe00e800

08005cb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d103      	bne.n	8005cce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d007      	beq.n	8005cec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	619a      	str	r2, [r3, #24]
  }
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d08:	e03b      	b.n	8005d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f8d6 	bl	8005ec0 <I2C_IsErrorOccurred>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e041      	b.n	8005da2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d02d      	beq.n	8005d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d26:	f7fe fecd 	bl	8004ac4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d302      	bcc.n	8005d3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d122      	bne.n	8005d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d113      	bne.n	8005d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5e:	f043 0220 	orr.w	r2, r3, #32
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e00f      	b.n	8005da2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d0b4      	beq.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005db6:	e033      	b.n	8005e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f87f 	bl	8005ec0 <I2C_IsErrorOccurred>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e031      	b.n	8005e30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d025      	beq.n	8005e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd4:	f7fe fe76 	bl	8004ac4 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d302      	bcc.n	8005dea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d11a      	bne.n	8005e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d013      	beq.n	8005e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfc:	f043 0220 	orr.w	r2, r3, #32
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e007      	b.n	8005e30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d1c4      	bne.n	8005db8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e44:	e02f      	b.n	8005ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f838 	bl	8005ec0 <I2C_IsErrorOccurred>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e02d      	b.n	8005eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5a:	f7fe fe33 	bl	8004ac4 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11a      	bne.n	8005ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d013      	beq.n	8005ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	f043 0220 	orr.w	r2, r3, #32
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e007      	b.n	8005eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d1c8      	bne.n	8005e46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	@ 0x28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d068      	beq.n	8005fbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ef4:	e049      	b.n	8005f8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d045      	beq.n	8005f8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fe fde1 	bl	8004ac4 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <I2C_IsErrorOccurred+0x54>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d13a      	bne.n	8005f8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f36:	d121      	bne.n	8005f7c <I2C_IsErrorOccurred+0xbc>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f3e:	d01d      	beq.n	8005f7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f40:	7cfb      	ldrb	r3, [r7, #19]
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d01a      	beq.n	8005f7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f56:	f7fe fdb5 	bl	8004ac4 <HAL_GetTick>
 8005f5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f5c:	e00e      	b.n	8005f7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f5e:	f7fe fdb1 	bl	8004ac4 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b19      	cmp	r3, #25
 8005f6a:	d907      	bls.n	8005f7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	f043 0320 	orr.w	r3, r3, #32
 8005f72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005f7a:	e006      	b.n	8005f8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d1e9      	bne.n	8005f5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d003      	beq.n	8005fa0 <I2C_IsErrorOccurred+0xe0>
 8005f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0aa      	beq.n	8005ef6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2220      	movs	r2, #32
 8005fae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	f043 0304 	orr.w	r3, r3, #4
 8005fb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00b      	beq.n	8005fe8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f043 0308 	orr.w	r3, r3, #8
 8005ff8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006002:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	f043 0302 	orr.w	r3, r3, #2
 800601a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800602c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01c      	beq.n	800606e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fe3b 	bl	8005cb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <I2C_IsErrorOccurred+0x1bc>)
 8006046:	400b      	ands	r3, r1
 8006048:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	431a      	orrs	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800606e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006072:	4618      	mov	r0, r3
 8006074:	3728      	adds	r7, #40	@ 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	fe00e800 	.word	0xfe00e800

08006080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	817b      	strh	r3, [r7, #10]
 800608e:	4613      	mov	r3, r2
 8006090:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006092:	897b      	ldrh	r3, [r7, #10]
 8006094:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006098:	7a7b      	ldrb	r3, [r7, #9]
 800609a:	041b      	lsls	r3, r3, #16
 800609c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	0d5b      	lsrs	r3, r3, #21
 80060ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80060be:	4b08      	ldr	r3, [pc, #32]	@ (80060e0 <I2C_TransferConfig+0x60>)
 80060c0:	430b      	orrs	r3, r1
 80060c2:	43db      	mvns	r3, r3
 80060c4:	ea02 0103 	and.w	r1, r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	03ff63ff 	.word	0x03ff63ff

080060e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d138      	bne.n	800616c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006104:	2302      	movs	r3, #2
 8006106:	e032      	b.n	800616e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2224      	movs	r2, #36	@ 0x24
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6819      	ldr	r1, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	e000      	b.n	800616e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800616c:	2302      	movs	r3, #2
  }
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b20      	cmp	r3, #32
 800618e:	d139      	bne.n	8006204 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800619a:	2302      	movs	r3, #2
 800619c:	e033      	b.n	8006206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2224      	movs	r2, #36	@ 0x24
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80061cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af02      	add	r7, sp, #8
 8006218:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e108      	b.n	8006436 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fe f9f6 	bl	8004630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2203      	movs	r2, #3
 8006248:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006252:	d102      	bne.n	800625a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f004 ff9c 	bl	800b19c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7c1a      	ldrb	r2, [r3, #16]
 800626c:	f88d 2000 	strb.w	r2, [sp]
 8006270:	3304      	adds	r3, #4
 8006272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006274:	f004 ff38 	bl	800b0e8 <USB_CoreInit>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e0d5      	b.n	8006436 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2100      	movs	r1, #0
 8006290:	4618      	mov	r0, r3
 8006292:	f004 ff94 	bl	800b1be <USB_SetCurrentMode>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0c6      	b.n	8006436 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]
 80062ac:	e04a      	b.n	8006344 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062ae:	7bfa      	ldrb	r2, [r7, #15]
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	440b      	add	r3, r1
 80062bc:	3315      	adds	r3, #21
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062c2:	7bfa      	ldrb	r2, [r7, #15]
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	3314      	adds	r3, #20
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062d6:	7bfa      	ldrb	r2, [r7, #15]
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	b298      	uxth	r0, r3
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	332e      	adds	r3, #46	@ 0x2e
 80062ea:	4602      	mov	r2, r0
 80062ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062ee:	7bfa      	ldrb	r2, [r7, #15]
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3318      	adds	r3, #24
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006302:	7bfa      	ldrb	r2, [r7, #15]
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	4613      	mov	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	440b      	add	r3, r1
 8006310:	331c      	adds	r3, #28
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006316:	7bfa      	ldrb	r2, [r7, #15]
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3320      	adds	r3, #32
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800632a:	7bfa      	ldrb	r2, [r7, #15]
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3324      	adds	r3, #36	@ 0x24
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	3301      	adds	r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	791b      	ldrb	r3, [r3, #4]
 8006348:	7bfa      	ldrb	r2, [r7, #15]
 800634a:	429a      	cmp	r2, r3
 800634c:	d3af      	bcc.n	80062ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
 8006352:	e044      	b.n	80063de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006354:	7bfa      	ldrb	r2, [r7, #15]
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800636a:	7bfa      	ldrb	r2, [r7, #15]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800637c:	7bfa      	ldrb	r2, [r7, #15]
 800637e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006380:	7bfa      	ldrb	r2, [r7, #15]
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	3301      	adds	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	791b      	ldrb	r3, [r3, #4]
 80063e2:	7bfa      	ldrb	r2, [r7, #15]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d3b5      	bcc.n	8006354 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	7c1a      	ldrb	r2, [r3, #16]
 80063f0:	f88d 2000 	strb.w	r2, [sp]
 80063f4:	3304      	adds	r3, #4
 80063f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063f8:	f004 ff2e 	bl	800b258 <USB_DevInit>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e013      	b.n	8006436 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7b1b      	ldrb	r3, [r3, #12]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d102      	bne.n	800642a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f80b 	bl	8006440 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f005 f8e9 	bl	800b606 <USB_DevDisconnect>

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800646e:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <HAL_PCDEx_ActivateLPM+0x44>)
 8006470:	4313      	orrs	r3, r2
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	10000003 	.word	0x10000003

08006488 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800648c:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a04      	ldr	r2, [pc, #16]	@ (80064a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006496:	6013      	str	r3, [r2, #0]
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40007000 	.word	0x40007000

080064a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064b2:	4b23      	ldr	r3, [pc, #140]	@ (8006540 <HAL_PWREx_EnableOverDrive+0x98>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <HAL_PWREx_EnableOverDrive+0x98>)
 80064b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80064be:	4b20      	ldr	r3, [pc, #128]	@ (8006540 <HAL_PWREx_EnableOverDrive+0x98>)
 80064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064d6:	f7fe faf5 	bl	8004ac4 <HAL_GetTick>
 80064da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064dc:	e009      	b.n	80064f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064de:	f7fe faf1 	bl	8004ac4 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064ec:	d901      	bls.n	80064f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e022      	b.n	8006538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064f2:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fe:	d1ee      	bne.n	80064de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006500:	4b10      	ldr	r3, [pc, #64]	@ (8006544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a0f      	ldr	r2, [pc, #60]	@ (8006544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800650a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800650c:	f7fe fada 	bl	8004ac4 <HAL_GetTick>
 8006510:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006512:	e009      	b.n	8006528 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006514:	f7fe fad6 	bl	8004ac4 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006522:	d901      	bls.n	8006528 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e007      	b.n	8006538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006528:	4b06      	ldr	r3, [pc, #24]	@ (8006544 <HAL_PWREx_EnableOverDrive+0x9c>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006534:	d1ee      	bne.n	8006514 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40023800 	.word	0x40023800
 8006544:	40007000 	.word	0x40007000

08006548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e291      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8087 	beq.w	800667a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800656c:	4b96      	ldr	r3, [pc, #600]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 030c 	and.w	r3, r3, #12
 8006574:	2b04      	cmp	r3, #4
 8006576:	d00c      	beq.n	8006592 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006578:	4b93      	ldr	r3, [pc, #588]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b08      	cmp	r3, #8
 8006582:	d112      	bne.n	80065aa <HAL_RCC_OscConfig+0x62>
 8006584:	4b90      	ldr	r3, [pc, #576]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800658c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006590:	d10b      	bne.n	80065aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006592:	4b8d      	ldr	r3, [pc, #564]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d06c      	beq.n	8006678 <HAL_RCC_OscConfig+0x130>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d168      	bne.n	8006678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e26b      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065b2:	d106      	bne.n	80065c2 <HAL_RCC_OscConfig+0x7a>
 80065b4:	4b84      	ldr	r3, [pc, #528]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a83      	ldr	r2, [pc, #524]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	e02e      	b.n	8006620 <HAL_RCC_OscConfig+0xd8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10c      	bne.n	80065e4 <HAL_RCC_OscConfig+0x9c>
 80065ca:	4b7f      	ldr	r3, [pc, #508]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a7e      	ldr	r2, [pc, #504]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	4b7c      	ldr	r3, [pc, #496]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a7b      	ldr	r2, [pc, #492]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e01d      	b.n	8006620 <HAL_RCC_OscConfig+0xd8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065ec:	d10c      	bne.n	8006608 <HAL_RCC_OscConfig+0xc0>
 80065ee:	4b76      	ldr	r3, [pc, #472]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a75      	ldr	r2, [pc, #468]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b73      	ldr	r3, [pc, #460]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a72      	ldr	r2, [pc, #456]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e00b      	b.n	8006620 <HAL_RCC_OscConfig+0xd8>
 8006608:	4b6f      	ldr	r3, [pc, #444]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a6e      	ldr	r2, [pc, #440]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 800660e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	4b6c      	ldr	r3, [pc, #432]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a6b      	ldr	r2, [pc, #428]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 800661a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d013      	beq.n	8006650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fe fa4c 	bl	8004ac4 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006630:	f7fe fa48 	bl	8004ac4 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b64      	cmp	r3, #100	@ 0x64
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e21f      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006642:	4b61      	ldr	r3, [pc, #388]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0xe8>
 800664e:	e014      	b.n	800667a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fe fa38 	bl	8004ac4 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006658:	f7fe fa34 	bl	8004ac4 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b64      	cmp	r3, #100	@ 0x64
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e20b      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800666a:	4b57      	ldr	r3, [pc, #348]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x110>
 8006676:	e000      	b.n	800667a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d069      	beq.n	800675a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006686:	4b50      	ldr	r3, [pc, #320]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006692:	4b4d      	ldr	r3, [pc, #308]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b08      	cmp	r3, #8
 800669c:	d11c      	bne.n	80066d8 <HAL_RCC_OscConfig+0x190>
 800669e:	4b4a      	ldr	r3, [pc, #296]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d116      	bne.n	80066d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066aa:	4b47      	ldr	r3, [pc, #284]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_RCC_OscConfig+0x17a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d001      	beq.n	80066c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e1df      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066c2:	4b41      	ldr	r3, [pc, #260]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	493d      	ldr	r1, [pc, #244]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066d6:	e040      	b.n	800675a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d023      	beq.n	8006728 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066e0:	4b39      	ldr	r3, [pc, #228]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a38      	ldr	r2, [pc, #224]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ec:	f7fe f9ea 	bl	8004ac4 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066f4:	f7fe f9e6 	bl	8004ac4 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e1bd      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006706:	4b30      	ldr	r3, [pc, #192]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f0      	beq.n	80066f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006712:	4b2d      	ldr	r3, [pc, #180]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	4929      	ldr	r1, [pc, #164]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006722:	4313      	orrs	r3, r2
 8006724:	600b      	str	r3, [r1, #0]
 8006726:	e018      	b.n	800675a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006728:	4b27      	ldr	r3, [pc, #156]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a26      	ldr	r2, [pc, #152]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fe f9c6 	bl	8004ac4 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800673c:	f7fe f9c2 	bl	8004ac4 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e199      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800674e:	4b1e      	ldr	r3, [pc, #120]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d038      	beq.n	80067d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d019      	beq.n	80067a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800676e:	4b16      	ldr	r3, [pc, #88]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006772:	4a15      	ldr	r2, [pc, #84]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677a:	f7fe f9a3 	bl	8004ac4 <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006782:	f7fe f99f 	bl	8004ac4 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e176      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006794:	4b0c      	ldr	r3, [pc, #48]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 8006796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f0      	beq.n	8006782 <HAL_RCC_OscConfig+0x23a>
 80067a0:	e01a      	b.n	80067d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a2:	4b09      	ldr	r3, [pc, #36]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80067a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a6:	4a08      	ldr	r2, [pc, #32]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ae:	f7fe f989 	bl	8004ac4 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b4:	e00a      	b.n	80067cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b6:	f7fe f985 	bl	8004ac4 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d903      	bls.n	80067cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e15c      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
 80067c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067cc:	4b91      	ldr	r3, [pc, #580]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80067ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ee      	bne.n	80067b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80a4 	beq.w	800692e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	4b88      	ldr	r3, [pc, #544]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	4a87      	ldr	r2, [pc, #540]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80067f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80067fe:	4b85      	ldr	r3, [pc, #532]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006806:	60bb      	str	r3, [r7, #8]
 8006808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800680a:	2301      	movs	r3, #1
 800680c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800680e:	4b82      	ldr	r3, [pc, #520]	@ (8006a18 <HAL_RCC_OscConfig+0x4d0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d118      	bne.n	800684c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800681a:	4b7f      	ldr	r3, [pc, #508]	@ (8006a18 <HAL_RCC_OscConfig+0x4d0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a18 <HAL_RCC_OscConfig+0x4d0>)
 8006820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006826:	f7fe f94d 	bl	8004ac4 <HAL_GetTick>
 800682a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800682e:	f7fe f949 	bl	8004ac4 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b64      	cmp	r3, #100	@ 0x64
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e120      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006840:	4b75      	ldr	r3, [pc, #468]	@ (8006a18 <HAL_RCC_OscConfig+0x4d0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0f0      	beq.n	800682e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d106      	bne.n	8006862 <HAL_RCC_OscConfig+0x31a>
 8006854:	4b6f      	ldr	r3, [pc, #444]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006858:	4a6e      	ldr	r2, [pc, #440]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 800685a:	f043 0301 	orr.w	r3, r3, #1
 800685e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006860:	e02d      	b.n	80068be <HAL_RCC_OscConfig+0x376>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10c      	bne.n	8006884 <HAL_RCC_OscConfig+0x33c>
 800686a:	4b6a      	ldr	r3, [pc, #424]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	4a69      	ldr	r2, [pc, #420]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	6713      	str	r3, [r2, #112]	@ 0x70
 8006876:	4b67      	ldr	r3, [pc, #412]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687a:	4a66      	ldr	r2, [pc, #408]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 800687c:	f023 0304 	bic.w	r3, r3, #4
 8006880:	6713      	str	r3, [r2, #112]	@ 0x70
 8006882:	e01c      	b.n	80068be <HAL_RCC_OscConfig+0x376>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b05      	cmp	r3, #5
 800688a:	d10c      	bne.n	80068a6 <HAL_RCC_OscConfig+0x35e>
 800688c:	4b61      	ldr	r3, [pc, #388]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 800688e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006890:	4a60      	ldr	r2, [pc, #384]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006892:	f043 0304 	orr.w	r3, r3, #4
 8006896:	6713      	str	r3, [r2, #112]	@ 0x70
 8006898:	4b5e      	ldr	r3, [pc, #376]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 800689a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689c:	4a5d      	ldr	r2, [pc, #372]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a4:	e00b      	b.n	80068be <HAL_RCC_OscConfig+0x376>
 80068a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068aa:	4a5a      	ldr	r2, [pc, #360]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b2:	4b58      	ldr	r3, [pc, #352]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b6:	4a57      	ldr	r2, [pc, #348]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80068b8:	f023 0304 	bic.w	r3, r3, #4
 80068bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d015      	beq.n	80068f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c6:	f7fe f8fd 	bl	8004ac4 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068cc:	e00a      	b.n	80068e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ce:	f7fe f8f9 	bl	8004ac4 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e0ce      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80068e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0ee      	beq.n	80068ce <HAL_RCC_OscConfig+0x386>
 80068f0:	e014      	b.n	800691c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f2:	f7fe f8e7 	bl	8004ac4 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f8:	e00a      	b.n	8006910 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fa:	f7fe f8e3 	bl	8004ac4 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e0b8      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006910:	4b40      	ldr	r3, [pc, #256]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1ee      	bne.n	80068fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d105      	bne.n	800692e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006922:	4b3c      	ldr	r3, [pc, #240]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	4a3b      	ldr	r2, [pc, #236]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800692c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 80a4 	beq.w	8006a80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006938:	4b36      	ldr	r3, [pc, #216]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 030c 	and.w	r3, r3, #12
 8006940:	2b08      	cmp	r3, #8
 8006942:	d06b      	beq.n	8006a1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d149      	bne.n	80069e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694c:	4b31      	ldr	r3, [pc, #196]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a30      	ldr	r2, [pc, #192]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fe f8b4 	bl	8004ac4 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006960:	f7fe f8b0 	bl	8004ac4 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e087      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006972:	4b28      	ldr	r3, [pc, #160]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69da      	ldr	r2, [r3, #28]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	019b      	lsls	r3, r3, #6
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	3b01      	subs	r3, #1
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	4313      	orrs	r3, r2
 80069a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80069a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ac:	4b19      	ldr	r3, [pc, #100]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a18      	ldr	r2, [pc, #96]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80069b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fe f884 	bl	8004ac4 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c0:	f7fe f880 	bl	8004ac4 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e057      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d2:	4b10      	ldr	r3, [pc, #64]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x478>
 80069de:	e04f      	b.n	8006a80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 80069e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fe f86a 	bl	8004ac4 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fe f866 	bl	8004ac4 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e03d      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a06:	4b03      	ldr	r3, [pc, #12]	@ (8006a14 <HAL_RCC_OscConfig+0x4cc>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x4ac>
 8006a12:	e035      	b.n	8006a80 <HAL_RCC_OscConfig+0x538>
 8006a14:	40023800 	.word	0x40023800
 8006a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a8c <HAL_RCC_OscConfig+0x544>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d028      	beq.n	8006a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d121      	bne.n	8006a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d11a      	bne.n	8006a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d111      	bne.n	8006a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a62:	085b      	lsrs	r3, r3, #1
 8006a64:	3b01      	subs	r3, #1
 8006a66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d107      	bne.n	8006a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d001      	beq.n	8006a80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023800 	.word	0x40023800

08006a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0d0      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d910      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab6:	4b67      	ldr	r3, [pc, #412]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 020f 	bic.w	r2, r3, #15
 8006abe:	4965      	ldr	r1, [pc, #404]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	4b63      	ldr	r3, [pc, #396]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0b8      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d020      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af0:	4b59      	ldr	r3, [pc, #356]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a58      	ldr	r2, [pc, #352]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b08:	4b53      	ldr	r3, [pc, #332]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4a52      	ldr	r2, [pc, #328]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b14:	4b50      	ldr	r3, [pc, #320]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	494d      	ldr	r1, [pc, #308]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d040      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b47      	ldr	r3, [pc, #284]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d115      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e07f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b52:	4b41      	ldr	r3, [pc, #260]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e073      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b62:	4b3d      	ldr	r3, [pc, #244]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e06b      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b72:	4b39      	ldr	r3, [pc, #228]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f023 0203 	bic.w	r2, r3, #3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	4936      	ldr	r1, [pc, #216]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b84:	f7fd ff9e 	bl	8004ac4 <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b8c:	f7fd ff9a 	bl	8004ac4 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e053      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 020c 	and.w	r2, r3, #12
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d1eb      	bne.n	8006b8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bb4:	4b27      	ldr	r3, [pc, #156]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d210      	bcs.n	8006be4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bc2:	4b24      	ldr	r3, [pc, #144]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f023 020f 	bic.w	r2, r3, #15
 8006bca:	4922      	ldr	r1, [pc, #136]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd2:	4b20      	ldr	r3, [pc, #128]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e032      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf0:	4b19      	ldr	r3, [pc, #100]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4916      	ldr	r1, [pc, #88]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c0e:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	490e      	ldr	r1, [pc, #56]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c22:	f000 f821 	bl	8006c68 <HAL_RCC_GetSysClockFreq>
 8006c26:	4602      	mov	r2, r0
 8006c28:	4b0b      	ldr	r3, [pc, #44]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	490a      	ldr	r1, [pc, #40]	@ (8006c5c <HAL_RCC_ClockConfig+0x1cc>)
 8006c34:	5ccb      	ldrb	r3, [r1, r3]
 8006c36:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3a:	4a09      	ldr	r2, [pc, #36]	@ (8006c60 <HAL_RCC_ClockConfig+0x1d0>)
 8006c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c3e:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <HAL_RCC_ClockConfig+0x1d4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fd fefa 	bl	8004a3c <HAL_InitTick>

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40023c00 	.word	0x40023c00
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	0801271c 	.word	0x0801271c
 8006c60:	2000004c 	.word	0x2000004c
 8006c64:	20000050 	.word	0x20000050

08006c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c6c:	b094      	sub	sp, #80	@ 0x50
 8006c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c74:	2300      	movs	r3, #0
 8006c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c78:	2300      	movs	r3, #0
 8006c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c80:	4b79      	ldr	r3, [pc, #484]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 030c 	and.w	r3, r3, #12
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d00d      	beq.n	8006ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	f200 80e1 	bhi.w	8006e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0x34>
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d003      	beq.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c9a:	e0db      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c9c:	4b73      	ldr	r3, [pc, #460]	@ (8006e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ca0:	e0db      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ca2:	4b73      	ldr	r3, [pc, #460]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ca6:	e0d8      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d063      	beq.n	8006d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	099b      	lsrs	r3, r3, #6
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cda:	4622      	mov	r2, r4
 8006cdc:	462b      	mov	r3, r5
 8006cde:	f04f 0000 	mov.w	r0, #0
 8006ce2:	f04f 0100 	mov.w	r1, #0
 8006ce6:	0159      	lsls	r1, r3, #5
 8006ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cec:	0150      	lsls	r0, r2, #5
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	1a51      	subs	r1, r2, r1
 8006cf6:	6139      	str	r1, [r7, #16]
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	018b      	lsls	r3, r1, #6
 8006d10:	4651      	mov	r1, sl
 8006d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d16:	4651      	mov	r1, sl
 8006d18:	018a      	lsls	r2, r1, #6
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8006d20:	4659      	mov	r1, fp
 8006d22:	eb63 0901 	sbc.w	r9, r3, r1
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d3a:	4690      	mov	r8, r2
 8006d3c:	4699      	mov	r9, r3
 8006d3e:	4623      	mov	r3, r4
 8006d40:	eb18 0303 	adds.w	r3, r8, r3
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	462b      	mov	r3, r5
 8006d48:	eb49 0303 	adc.w	r3, r9, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	024b      	lsls	r3, r1, #9
 8006d5e:	4621      	mov	r1, r4
 8006d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d64:	4621      	mov	r1, r4
 8006d66:	024a      	lsls	r2, r1, #9
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6e:	2200      	movs	r2, #0
 8006d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d78:	f7f9 ff7e 	bl	8000c78 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4613      	mov	r3, r2
 8006d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d84:	e058      	b.n	8006e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d86:	4b38      	ldr	r3, [pc, #224]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4618      	mov	r0, r3
 8006d90:	4611      	mov	r1, r2
 8006d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d96:	623b      	str	r3, [r7, #32]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f04f 0100 	mov.w	r1, #0
 8006dac:	0159      	lsls	r1, r3, #5
 8006dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006db2:	0150      	lsls	r0, r2, #5
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4641      	mov	r1, r8
 8006dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8006ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	00eb      	lsls	r3, r5, #3
 8006dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dee:	00e2      	lsls	r2, r4, #3
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	4643      	mov	r3, r8
 8006df6:	18e3      	adds	r3, r4, r3
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	eb45 0303 	adc.w	r3, r5, r3
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e0e:	4629      	mov	r1, r5
 8006e10:	028b      	lsls	r3, r1, #10
 8006e12:	4621      	mov	r1, r4
 8006e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e18:	4621      	mov	r1, r4
 8006e1a:	028a      	lsls	r2, r1, #10
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e22:	2200      	movs	r2, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	61fa      	str	r2, [r7, #28]
 8006e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e2c:	f7f9 ff24 	bl	8000c78 <__aeabi_uldivmod>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4613      	mov	r3, r2
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e38:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	3301      	adds	r3, #1
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e52:	e002      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e54:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3750      	adds	r7, #80	@ 0x50
 8006e60:	46bd      	mov	sp, r7
 8006e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	00f42400 	.word	0x00f42400
 8006e70:	007a1200 	.word	0x007a1200

08006e74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e78:	4b03      	ldr	r3, [pc, #12]	@ (8006e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	2000004c 	.word	0x2000004c

08006e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e90:	f7ff fff0 	bl	8006e74 <HAL_RCC_GetHCLKFreq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	0a9b      	lsrs	r3, r3, #10
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	4903      	ldr	r1, [pc, #12]	@ (8006eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ea2:	5ccb      	ldrb	r3, [r1, r3]
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	0801272c 	.word	0x0801272c

08006eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006eb8:	f7ff ffdc 	bl	8006e74 <HAL_RCC_GetHCLKFreq>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	0b5b      	lsrs	r3, r3, #13
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	4903      	ldr	r1, [pc, #12]	@ (8006ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eca:	5ccb      	ldrb	r3, [r1, r3]
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	0801272c 	.word	0x0801272c

08006edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d012      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f04:	4b69      	ldr	r3, [pc, #420]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4a68      	ldr	r2, [pc, #416]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f0e:	6093      	str	r3, [r2, #8]
 8006f10:	4b66      	ldr	r3, [pc, #408]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f18:	4964      	ldr	r1, [pc, #400]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f26:	2301      	movs	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d017      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f36:	4b5d      	ldr	r3, [pc, #372]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f44:	4959      	ldr	r1, [pc, #356]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f54:	d101      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f56:	2301      	movs	r3, #1
 8006f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d017      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f72:	4b4e      	ldr	r3, [pc, #312]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	494a      	ldr	r1, [pc, #296]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f90:	d101      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f92:	2301      	movs	r3, #1
 8006f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 808b 	beq.w	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	4a39      	ldr	r2, [pc, #228]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fcc:	4b37      	ldr	r3, [pc, #220]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fd8:	4b35      	ldr	r3, [pc, #212]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a34      	ldr	r2, [pc, #208]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe4:	f7fd fd6e 	bl	8004ac4 <HAL_GetTick>
 8006fe8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fec:	f7fd fd6a 	bl	8004ac4 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	@ 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e357      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800700a:	4b28      	ldr	r3, [pc, #160]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007012:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d035      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	429a      	cmp	r2, r3
 8007026:	d02e      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007028:	4b20      	ldr	r3, [pc, #128]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800702a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007030:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007032:	4b1e      	ldr	r3, [pc, #120]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007036:	4a1d      	ldr	r2, [pc, #116]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800703c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800703e:	4b1b      	ldr	r3, [pc, #108]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007042:	4a1a      	ldr	r2, [pc, #104]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007048:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800704a:	4a18      	ldr	r2, [pc, #96]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007050:	4b16      	ldr	r3, [pc, #88]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b01      	cmp	r3, #1
 800705a:	d114      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705c:	f7fd fd32 	bl	8004ac4 <HAL_GetTick>
 8007060:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007062:	e00a      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007064:	f7fd fd2e 	bl	8004ac4 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e319      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800707a:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0ee      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800708e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007092:	d111      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007094:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80070a0:	4b04      	ldr	r3, [pc, #16]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070a2:	400b      	ands	r3, r1
 80070a4:	4901      	ldr	r1, [pc, #4]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
 80070aa:	e00b      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070ac:	40023800 	.word	0x40023800
 80070b0:	40007000 	.word	0x40007000
 80070b4:	0ffffcff 	.word	0x0ffffcff
 80070b8:	4baa      	ldr	r3, [pc, #680]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4aa9      	ldr	r2, [pc, #676]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80070c2:	6093      	str	r3, [r2, #8]
 80070c4:	4ba7      	ldr	r3, [pc, #668]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d0:	49a4      	ldr	r1, [pc, #656]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d010      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070e2:	4ba0      	ldr	r3, [pc, #640]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070e8:	4a9e      	ldr	r2, [pc, #632]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80070f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fc:	4999      	ldr	r1, [pc, #612]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007110:	4b94      	ldr	r3, [pc, #592]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007116:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800711e:	4991      	ldr	r1, [pc, #580]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007132:	4b8c      	ldr	r3, [pc, #560]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007138:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007140:	4988      	ldr	r1, [pc, #544]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007154:	4b83      	ldr	r3, [pc, #524]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007162:	4980      	ldr	r1, [pc, #512]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007176:	4b7b      	ldr	r3, [pc, #492]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007184:	4977      	ldr	r1, [pc, #476]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007198:	4b72      	ldr	r3, [pc, #456]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719e:	f023 0203 	bic.w	r2, r3, #3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a6:	496f      	ldr	r1, [pc, #444]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c0:	f023 020c 	bic.w	r2, r3, #12
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071c8:	4966      	ldr	r1, [pc, #408]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071dc:	4b61      	ldr	r3, [pc, #388]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ea:	495e      	ldr	r1, [pc, #376]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071fe:	4b59      	ldr	r3, [pc, #356]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007204:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800720c:	4955      	ldr	r1, [pc, #340]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007220:	4b50      	ldr	r3, [pc, #320]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007226:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800722e:	494d      	ldr	r1, [pc, #308]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007242:	4b48      	ldr	r3, [pc, #288]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007248:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007250:	4944      	ldr	r1, [pc, #272]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007264:	4b3f      	ldr	r3, [pc, #252]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007272:	493c      	ldr	r1, [pc, #240]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007274:	4313      	orrs	r3, r2
 8007276:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007286:	4b37      	ldr	r3, [pc, #220]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007294:	4933      	ldr	r1, [pc, #204]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072b6:	492b      	ldr	r1, [pc, #172]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d011      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072ca:	4b26      	ldr	r3, [pc, #152]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072d8:	4922      	ldr	r1, [pc, #136]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e8:	d101      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072ea:	2301      	movs	r3, #1
 80072ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0308 	and.w	r3, r3, #8
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800730a:	4b16      	ldr	r3, [pc, #88]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007310:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007318:	4912      	ldr	r1, [pc, #72]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800732c:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800733c:	4909      	ldr	r1, [pc, #36]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d006      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 80d9 	beq.w	800750a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007358:	4b02      	ldr	r3, [pc, #8]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a01      	ldr	r2, [pc, #4]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007362:	e001      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007364:	40023800 	.word	0x40023800
 8007368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736a:	f7fd fbab 	bl	8004ac4 <HAL_GetTick>
 800736e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007372:	f7fd fba7 	bl	8004ac4 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b64      	cmp	r3, #100	@ 0x64
 800737e:	d901      	bls.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e194      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007384:	4b6c      	ldr	r3, [pc, #432]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1f0      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d021      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11d      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073a4:	4b64      	ldr	r3, [pc, #400]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073aa:	0c1b      	lsrs	r3, r3, #16
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073b2:	4b61      	ldr	r3, [pc, #388]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b8:	0e1b      	lsrs	r3, r3, #24
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	019a      	lsls	r2, r3, #6
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	431a      	orrs	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	061b      	lsls	r3, r3, #24
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	071b      	lsls	r3, r3, #28
 80073d8:	4957      	ldr	r1, [pc, #348]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073f4:	d00a      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d02e      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800740a:	d129      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800740c:	4b4a      	ldr	r3, [pc, #296]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800740e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007412:	0c1b      	lsrs	r3, r3, #16
 8007414:	f003 0303 	and.w	r3, r3, #3
 8007418:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800741a:	4b47      	ldr	r3, [pc, #284]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800741c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007420:	0f1b      	lsrs	r3, r3, #28
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	019a      	lsls	r2, r3, #6
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	041b      	lsls	r3, r3, #16
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	061b      	lsls	r3, r3, #24
 800743a:	431a      	orrs	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	071b      	lsls	r3, r3, #28
 8007440:	493d      	ldr	r1, [pc, #244]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007442:	4313      	orrs	r3, r2
 8007444:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007448:	4b3b      	ldr	r3, [pc, #236]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800744a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800744e:	f023 021f 	bic.w	r2, r3, #31
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007456:	3b01      	subs	r3, #1
 8007458:	4937      	ldr	r1, [pc, #220]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800745a:	4313      	orrs	r3, r2
 800745c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01d      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800746c:	4b32      	ldr	r3, [pc, #200]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007472:	0e1b      	lsrs	r3, r3, #24
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800747a:	4b2f      	ldr	r3, [pc, #188]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800747c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007480:	0f1b      	lsrs	r3, r3, #28
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	019a      	lsls	r2, r3, #6
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	041b      	lsls	r3, r3, #16
 8007494:	431a      	orrs	r2, r3
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	061b      	lsls	r3, r3, #24
 800749a:	431a      	orrs	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	071b      	lsls	r3, r3, #28
 80074a0:	4925      	ldr	r1, [pc, #148]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d011      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	019a      	lsls	r2, r3, #6
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	061b      	lsls	r3, r3, #24
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	071b      	lsls	r3, r3, #28
 80074d0:	4919      	ldr	r1, [pc, #100]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074d8:	4b17      	ldr	r3, [pc, #92]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a16      	ldr	r2, [pc, #88]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e4:	f7fd faee 	bl	8004ac4 <HAL_GetTick>
 80074e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074ec:	f7fd faea 	bl	8004ac4 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b64      	cmp	r3, #100	@ 0x64
 80074f8:	d901      	bls.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e0d7      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0f0      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b01      	cmp	r3, #1
 800750e:	f040 80cd 	bne.w	80076ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007512:	4b09      	ldr	r3, [pc, #36]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a08      	ldr	r2, [pc, #32]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800751c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751e:	f7fd fad1 	bl	8004ac4 <HAL_GetTick>
 8007522:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007524:	e00a      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007526:	f7fd facd 	bl	8004ac4 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b64      	cmp	r3, #100	@ 0x64
 8007532:	d903      	bls.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e0ba      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007538:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800753c:	4b5e      	ldr	r3, [pc, #376]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007548:	d0ed      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007566:	2b00      	cmp	r3, #0
 8007568:	d02e      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756e:	2b00      	cmp	r3, #0
 8007570:	d12a      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007572:	4b51      	ldr	r3, [pc, #324]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007580:	4b4d      	ldr	r3, [pc, #308]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007586:	0f1b      	lsrs	r3, r3, #28
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	019a      	lsls	r2, r3, #6
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	041b      	lsls	r3, r3, #16
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	061b      	lsls	r3, r3, #24
 80075a0:	431a      	orrs	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	071b      	lsls	r3, r3, #28
 80075a6:	4944      	ldr	r1, [pc, #272]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075ae:	4b42      	ldr	r3, [pc, #264]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075bc:	3b01      	subs	r3, #1
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	493d      	ldr	r1, [pc, #244]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d022      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075dc:	d11d      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075de:	4b36      	ldr	r3, [pc, #216]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e4:	0e1b      	lsrs	r3, r3, #24
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075ec:	4b32      	ldr	r3, [pc, #200]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f2:	0f1b      	lsrs	r3, r3, #28
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	019a      	lsls	r2, r3, #6
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	041b      	lsls	r3, r3, #16
 8007606:	431a      	orrs	r2, r3
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	061b      	lsls	r3, r3, #24
 800760c:	431a      	orrs	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	071b      	lsls	r3, r3, #28
 8007612:	4929      	ldr	r1, [pc, #164]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0308 	and.w	r3, r3, #8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d028      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007626:	4b24      	ldr	r3, [pc, #144]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762c:	0e1b      	lsrs	r3, r3, #24
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007634:	4b20      	ldr	r3, [pc, #128]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800763a:	0c1b      	lsrs	r3, r3, #16
 800763c:	f003 0303 	and.w	r3, r3, #3
 8007640:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	019a      	lsls	r2, r3, #6
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	041b      	lsls	r3, r3, #16
 800764c:	431a      	orrs	r2, r3
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	061b      	lsls	r3, r3, #24
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	071b      	lsls	r3, r3, #28
 800765a:	4917      	ldr	r1, [pc, #92]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007662:	4b15      	ldr	r3, [pc, #84]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007668:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	4911      	ldr	r1, [pc, #68]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007678:	4b0f      	ldr	r3, [pc, #60]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a0e      	ldr	r2, [pc, #56]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800767e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007684:	f7fd fa1e 	bl	8004ac4 <HAL_GetTick>
 8007688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800768a:	e008      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800768c:	f7fd fa1a 	bl	8004ac4 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b64      	cmp	r3, #100	@ 0x64
 8007698:	d901      	bls.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e007      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800769e:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076aa:	d1ef      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40023800 	.word	0x40023800

080076bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e09d      	b.n	800780a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d108      	bne.n	80076e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076de:	d009      	beq.n	80076f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	61da      	str	r2, [r3, #28]
 80076e6:	e005      	b.n	80076f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fc fc54 	bl	8003fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800772a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007734:	d902      	bls.n	800773c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e002      	b.n	8007742 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800773c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007740:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800774a:	d007      	beq.n	800775c <HAL_SPI_Init+0xa0>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007754:	d002      	beq.n	800775c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800776c:	431a      	orrs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800779e:	ea42 0103 	orr.w	r1, r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	f003 0204 	and.w	r2, r3, #4
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80077d8:	ea42 0103 	orr.w	r1, r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b088      	sub	sp, #32
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_SPI_Transmit+0x22>
 8007830:	2302      	movs	r3, #2
 8007832:	e15f      	b.n	8007af4 <HAL_SPI_Transmit+0x2e2>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800783c:	f7fd f942 	bl	8004ac4 <HAL_GetTick>
 8007840:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b01      	cmp	r3, #1
 8007850:	d002      	beq.n	8007858 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007852:	2302      	movs	r3, #2
 8007854:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007856:	e148      	b.n	8007aea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_SPI_Transmit+0x52>
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007868:	e13f      	b.n	8007aea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2203      	movs	r2, #3
 800786e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078b4:	d10f      	bne.n	80078d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e0:	2b40      	cmp	r3, #64	@ 0x40
 80078e2:	d007      	beq.n	80078f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078fc:	d94f      	bls.n	800799e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_SPI_Transmit+0xfa>
 8007906:	8afb      	ldrh	r3, [r7, #22]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d142      	bne.n	8007992 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007910:	881a      	ldrh	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791c:	1c9a      	adds	r2, r3, #2
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007930:	e02f      	b.n	8007992 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b02      	cmp	r3, #2
 800793e:	d112      	bne.n	8007966 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007944:	881a      	ldrh	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007950:	1c9a      	adds	r2, r3, #2
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007964:	e015      	b.n	8007992 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007966:	f7fd f8ad 	bl	8004ac4 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d803      	bhi.n	800797e <HAL_SPI_Transmit+0x16c>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d102      	bne.n	8007984 <HAL_SPI_Transmit+0x172>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007990:	e0ab      	b.n	8007aea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1ca      	bne.n	8007932 <HAL_SPI_Transmit+0x120>
 800799c:	e080      	b.n	8007aa0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_SPI_Transmit+0x19a>
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d174      	bne.n	8007a96 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d912      	bls.n	80079dc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ba:	881a      	ldrh	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c6:	1c9a      	adds	r2, r3, #2
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b02      	subs	r3, #2
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079da:	e05c      	b.n	8007a96 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	330c      	adds	r3, #12
 80079e6:	7812      	ldrb	r2, [r2, #0]
 80079e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007a02:	e048      	b.n	8007a96 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d12b      	bne.n	8007a6a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d912      	bls.n	8007a42 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a20:	881a      	ldrh	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2c:	1c9a      	adds	r2, r3, #2
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	3b02      	subs	r3, #2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a40:	e029      	b.n	8007a96 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	7812      	ldrb	r2, [r2, #0]
 8007a4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a68:	e015      	b.n	8007a96 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a6a:	f7fd f82b 	bl	8004ac4 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d803      	bhi.n	8007a82 <HAL_SPI_Transmit+0x270>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a80:	d102      	bne.n	8007a88 <HAL_SPI_Transmit+0x276>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007a94:	e029      	b.n	8007aea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1b1      	bne.n	8007a04 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fb69 	bl	800817c <SPI_EndRxTxTransaction>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e003      	b.n	8007aea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3720      	adds	r7, #32
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08a      	sub	sp, #40	@ 0x28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d101      	bne.n	8007b22 <HAL_SPI_TransmitReceive+0x26>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e20a      	b.n	8007f38 <HAL_SPI_TransmitReceive+0x43c>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b2a:	f7fc ffcb 	bl	8004ac4 <HAL_GetTick>
 8007b2e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b36:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b3e:	887b      	ldrh	r3, [r7, #2]
 8007b40:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007b42:	887b      	ldrh	r3, [r7, #2]
 8007b44:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b46:	7efb      	ldrb	r3, [r7, #27]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d00e      	beq.n	8007b6a <HAL_SPI_TransmitReceive+0x6e>
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b52:	d106      	bne.n	8007b62 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <HAL_SPI_TransmitReceive+0x66>
 8007b5c:	7efb      	ldrb	r3, [r7, #27]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d003      	beq.n	8007b6a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007b62:	2302      	movs	r3, #2
 8007b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007b68:	e1e0      	b.n	8007f2c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x80>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x80>
 8007b76:	887b      	ldrh	r3, [r7, #2]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d103      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007b82:	e1d3      	b.n	8007f2c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d003      	beq.n	8007b98 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2205      	movs	r2, #5
 8007b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	887a      	ldrh	r2, [r7, #2]
 8007ba8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	887a      	ldrh	r2, [r7, #2]
 8007bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	887a      	ldrh	r2, [r7, #2]
 8007bbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	887a      	ldrh	r2, [r7, #2]
 8007bc4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007bda:	d802      	bhi.n	8007be2 <HAL_SPI_TransmitReceive+0xe6>
 8007bdc:	8a3b      	ldrh	r3, [r7, #16]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d908      	bls.n	8007bf4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	e007      	b.n	8007c04 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0e:	2b40      	cmp	r3, #64	@ 0x40
 8007c10:	d007      	beq.n	8007c22 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c2a:	f240 8081 	bls.w	8007d30 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_SPI_TransmitReceive+0x140>
 8007c36:	8a7b      	ldrh	r3, [r7, #18]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d16d      	bne.n	8007d18 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c40:	881a      	ldrh	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4c:	1c9a      	adds	r2, r3, #2
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c60:	e05a      	b.n	8007d18 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d11b      	bne.n	8007ca8 <HAL_SPI_TransmitReceive+0x1ac>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d016      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x1ac>
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d113      	bne.n	8007ca8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c84:	881a      	ldrh	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c90:	1c9a      	adds	r2, r3, #2
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d11c      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x1f4>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d016      	beq.n	8007cf0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ccc:	b292      	uxth	r2, r2
 8007cce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd4:	1c9a      	adds	r2, r3, #2
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cec:	2301      	movs	r3, #1
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cf0:	f7fc fee8 	bl	8004ac4 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d80b      	bhi.n	8007d18 <HAL_SPI_TransmitReceive+0x21c>
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d007      	beq.n	8007d18 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007d16:	e109      	b.n	8007f2c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d19f      	bne.n	8007c62 <HAL_SPI_TransmitReceive+0x166>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d199      	bne.n	8007c62 <HAL_SPI_TransmitReceive+0x166>
 8007d2e:	e0e3      	b.n	8007ef8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x244>
 8007d38:	8a7b      	ldrh	r3, [r7, #18]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	f040 80cf 	bne.w	8007ede <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d912      	bls.n	8007d70 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4e:	881a      	ldrh	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	1c9a      	adds	r2, r3, #2
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b02      	subs	r3, #2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d6e:	e0b6      	b.n	8007ede <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d96:	e0a2      	b.n	8007ede <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d134      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0x314>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02f      	beq.n	8007e10 <HAL_SPI_TransmitReceive+0x314>
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d12c      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d912      	bls.n	8007de6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	881a      	ldrh	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	1c9a      	adds	r2, r3, #2
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b02      	subs	r3, #2
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007de4:	e012      	b.n	8007e0c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	330c      	adds	r3, #12
 8007df0:	7812      	ldrb	r2, [r2, #0]
 8007df2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d148      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x3b4>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d042      	beq.n	8007eb0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d923      	bls.n	8007e7e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e40:	b292      	uxth	r2, r2
 8007e42:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e48:	1c9a      	adds	r2, r3, #2
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	3b02      	subs	r3, #2
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d81f      	bhi.n	8007eac <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	e016      	b.n	8007eac <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f103 020c 	add.w	r2, r3, #12
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eac:	2301      	movs	r3, #1
 8007eae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007eb0:	f7fc fe08 	bl	8004ac4 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d803      	bhi.n	8007ec8 <HAL_SPI_TransmitReceive+0x3cc>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d102      	bne.n	8007ece <HAL_SPI_TransmitReceive+0x3d2>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d107      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007edc:	e026      	b.n	8007f2c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f47f af57 	bne.w	8007d98 <HAL_SPI_TransmitReceive+0x29c>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f47f af50 	bne.w	8007d98 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ef8:	69fa      	ldr	r2, [r7, #28]
 8007efa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f93d 	bl	800817c <SPI_EndRxTxTransaction>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2220      	movs	r2, #32
 8007f12:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f22:	e003      	b.n	8007f2c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007f34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3728      	adds	r7, #40	@ 0x28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f50:	f7fc fdb8 	bl	8004ac4 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f60:	f7fc fdb0 	bl	8004ac4 <HAL_GetTick>
 8007f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f66:	4b39      	ldr	r3, [pc, #228]	@ (800804c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	015b      	lsls	r3, r3, #5
 8007f6c:	0d1b      	lsrs	r3, r3, #20
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f76:	e054      	b.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7e:	d050      	beq.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f80:	f7fc fda0 	bl	8004ac4 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d902      	bls.n	8007f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d13d      	bne.n	8008012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fae:	d111      	bne.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fb8:	d004      	beq.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc2:	d107      	bne.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fdc:	d10f      	bne.n	8007ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e017      	b.n	8008042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3b01      	subs	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4013      	ands	r3, r2
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	bf0c      	ite	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	2300      	movne	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	429a      	cmp	r2, r3
 800803e:	d19b      	bne.n	8007f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	2000004c 	.word	0x2000004c

08008050 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08a      	sub	sp, #40	@ 0x28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008062:	f7fc fd2f 	bl	8004ac4 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	4413      	add	r3, r2
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008072:	f7fc fd27 	bl	8004ac4 <HAL_GetTick>
 8008076:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008080:	4b3d      	ldr	r3, [pc, #244]	@ (8008178 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	00da      	lsls	r2, r3, #3
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	0d1b      	lsrs	r3, r3, #20
 8008090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008098:	e060      	b.n	800815c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080a0:	d107      	bne.n	80080b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d104      	bne.n	80080b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b8:	d050      	beq.n	800815c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080ba:	f7fc fd03 	bl	8004ac4 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d902      	bls.n	80080d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80080ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d13d      	bne.n	800814c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080e8:	d111      	bne.n	800810e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080f2:	d004      	beq.n	80080fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080fc:	d107      	bne.n	800810e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800810c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008116:	d10f      	bne.n	8008138 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008136:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e010      	b.n	800816e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	3b01      	subs	r3, #1
 800815a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	4013      	ands	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	d196      	bne.n	800809a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3728      	adds	r7, #40	@ 0x28
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	2000004c 	.word	0x2000004c

0800817c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af02      	add	r7, sp, #8
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff ff5b 	bl	8008050 <SPI_WaitFifoStateUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d007      	beq.n	80081b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081a4:	f043 0220 	orr.w	r2, r3, #32
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e046      	b.n	800823e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081b0:	4b25      	ldr	r3, [pc, #148]	@ (8008248 <SPI_EndRxTxTransaction+0xcc>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a25      	ldr	r2, [pc, #148]	@ (800824c <SPI_EndRxTxTransaction+0xd0>)
 80081b6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ba:	0d5b      	lsrs	r3, r3, #21
 80081bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80081c0:	fb02 f303 	mul.w	r3, r2, r3
 80081c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081ce:	d112      	bne.n	80081f6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2200      	movs	r2, #0
 80081d8:	2180      	movs	r1, #128	@ 0x80
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7ff feb0 	bl	8007f40 <SPI_WaitFlagStateUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d016      	beq.n	8008214 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ea:	f043 0220 	orr.w	r2, r3, #32
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e023      	b.n	800823e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	3b01      	subs	r3, #1
 8008200:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800820c:	2b80      	cmp	r3, #128	@ 0x80
 800820e:	d0f2      	beq.n	80081f6 <SPI_EndRxTxTransaction+0x7a>
 8008210:	e000      	b.n	8008214 <SPI_EndRxTxTransaction+0x98>
        break;
 8008212:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7ff ff15 	bl	8008050 <SPI_WaitFifoStateUntilTimeout>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d007      	beq.n	800823c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008230:	f043 0220 	orr.w	r2, r3, #32
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e000      	b.n	800823e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	2000004c 	.word	0x2000004c
 800824c:	165e9f81 	.word	0x165e9f81

08008250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e049      	b.n	80082f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d106      	bne.n	800827c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7fb ff02 	bl	8004080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3304      	adds	r3, #4
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f001 f876 	bl	8009380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b01      	cmp	r3, #1
 8008312:	d001      	beq.n	8008318 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e04c      	b.n	80083b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a26      	ldr	r2, [pc, #152]	@ (80083c0 <HAL_TIM_Base_Start+0xc0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d022      	beq.n	8008370 <HAL_TIM_Base_Start+0x70>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008332:	d01d      	beq.n	8008370 <HAL_TIM_Base_Start+0x70>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a22      	ldr	r2, [pc, #136]	@ (80083c4 <HAL_TIM_Base_Start+0xc4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d018      	beq.n	8008370 <HAL_TIM_Base_Start+0x70>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a21      	ldr	r2, [pc, #132]	@ (80083c8 <HAL_TIM_Base_Start+0xc8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d013      	beq.n	8008370 <HAL_TIM_Base_Start+0x70>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a1f      	ldr	r2, [pc, #124]	@ (80083cc <HAL_TIM_Base_Start+0xcc>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00e      	beq.n	8008370 <HAL_TIM_Base_Start+0x70>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1e      	ldr	r2, [pc, #120]	@ (80083d0 <HAL_TIM_Base_Start+0xd0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d009      	beq.n	8008370 <HAL_TIM_Base_Start+0x70>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1c      	ldr	r2, [pc, #112]	@ (80083d4 <HAL_TIM_Base_Start+0xd4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_TIM_Base_Start+0x70>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1b      	ldr	r2, [pc, #108]	@ (80083d8 <HAL_TIM_Base_Start+0xd8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d115      	bne.n	800839c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	4b19      	ldr	r3, [pc, #100]	@ (80083dc <HAL_TIM_Base_Start+0xdc>)
 8008378:	4013      	ands	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b06      	cmp	r3, #6
 8008380:	d015      	beq.n	80083ae <HAL_TIM_Base_Start+0xae>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008388:	d011      	beq.n	80083ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f042 0201 	orr.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839a:	e008      	b.n	80083ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	e000      	b.n	80083b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40010000 	.word	0x40010000
 80083c4:	40000400 	.word	0x40000400
 80083c8:	40000800 	.word	0x40000800
 80083cc:	40000c00 	.word	0x40000c00
 80083d0:	40010400 	.word	0x40010400
 80083d4:	40014000 	.word	0x40014000
 80083d8:	40001800 	.word	0x40001800
 80083dc:	00010007 	.word	0x00010007

080083e0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6a1a      	ldr	r2, [r3, #32]
 80083ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80083f2:	4013      	ands	r3, r2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10f      	bne.n	8008418 <HAL_TIM_Base_Stop+0x38>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6a1a      	ldr	r2, [r3, #32]
 80083fe:	f240 4344 	movw	r3, #1092	@ 0x444
 8008402:	4013      	ands	r3, r2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d107      	bne.n	8008418 <HAL_TIM_Base_Stop+0x38>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0201 	bic.w	r2, r2, #1
 8008416:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e049      	b.n	80084d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7fb fee3 	bl	8004220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f000 ff87 	bl	8009380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d109      	bne.n	8008500 <HAL_TIM_PWM_Start+0x24>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	e03c      	b.n	800857a <HAL_TIM_PWM_Start+0x9e>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b04      	cmp	r3, #4
 8008504:	d109      	bne.n	800851a <HAL_TIM_PWM_Start+0x3e>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	bf14      	ite	ne
 8008512:	2301      	movne	r3, #1
 8008514:	2300      	moveq	r3, #0
 8008516:	b2db      	uxtb	r3, r3
 8008518:	e02f      	b.n	800857a <HAL_TIM_PWM_Start+0x9e>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b08      	cmp	r3, #8
 800851e:	d109      	bne.n	8008534 <HAL_TIM_PWM_Start+0x58>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	bf14      	ite	ne
 800852c:	2301      	movne	r3, #1
 800852e:	2300      	moveq	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	e022      	b.n	800857a <HAL_TIM_PWM_Start+0x9e>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b0c      	cmp	r3, #12
 8008538:	d109      	bne.n	800854e <HAL_TIM_PWM_Start+0x72>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b01      	cmp	r3, #1
 8008544:	bf14      	ite	ne
 8008546:	2301      	movne	r3, #1
 8008548:	2300      	moveq	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	e015      	b.n	800857a <HAL_TIM_PWM_Start+0x9e>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b10      	cmp	r3, #16
 8008552:	d109      	bne.n	8008568 <HAL_TIM_PWM_Start+0x8c>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	bf14      	ite	ne
 8008560:	2301      	movne	r3, #1
 8008562:	2300      	moveq	r3, #0
 8008564:	b2db      	uxtb	r3, r3
 8008566:	e008      	b.n	800857a <HAL_TIM_PWM_Start+0x9e>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	bf14      	ite	ne
 8008574:	2301      	movne	r3, #1
 8008576:	2300      	moveq	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e092      	b.n	80086a8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <HAL_TIM_PWM_Start+0xb6>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008590:	e023      	b.n	80085da <HAL_TIM_PWM_Start+0xfe>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b04      	cmp	r3, #4
 8008596:	d104      	bne.n	80085a2 <HAL_TIM_PWM_Start+0xc6>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085a0:	e01b      	b.n	80085da <HAL_TIM_PWM_Start+0xfe>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d104      	bne.n	80085b2 <HAL_TIM_PWM_Start+0xd6>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085b0:	e013      	b.n	80085da <HAL_TIM_PWM_Start+0xfe>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b0c      	cmp	r3, #12
 80085b6:	d104      	bne.n	80085c2 <HAL_TIM_PWM_Start+0xe6>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085c0:	e00b      	b.n	80085da <HAL_TIM_PWM_Start+0xfe>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d104      	bne.n	80085d2 <HAL_TIM_PWM_Start+0xf6>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085d0:	e003      	b.n	80085da <HAL_TIM_PWM_Start+0xfe>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2202      	movs	r2, #2
 80085d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2201      	movs	r2, #1
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 fa70 	bl	8009ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a30      	ldr	r2, [pc, #192]	@ (80086b0 <HAL_TIM_PWM_Start+0x1d4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_TIM_PWM_Start+0x120>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a2f      	ldr	r2, [pc, #188]	@ (80086b4 <HAL_TIM_PWM_Start+0x1d8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d101      	bne.n	8008600 <HAL_TIM_PWM_Start+0x124>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e000      	b.n	8008602 <HAL_TIM_PWM_Start+0x126>
 8008600:	2300      	movs	r3, #0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008614:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a25      	ldr	r2, [pc, #148]	@ (80086b0 <HAL_TIM_PWM_Start+0x1d4>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d022      	beq.n	8008666 <HAL_TIM_PWM_Start+0x18a>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008628:	d01d      	beq.n	8008666 <HAL_TIM_PWM_Start+0x18a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a22      	ldr	r2, [pc, #136]	@ (80086b8 <HAL_TIM_PWM_Start+0x1dc>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d018      	beq.n	8008666 <HAL_TIM_PWM_Start+0x18a>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a20      	ldr	r2, [pc, #128]	@ (80086bc <HAL_TIM_PWM_Start+0x1e0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <HAL_TIM_PWM_Start+0x18a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1f      	ldr	r2, [pc, #124]	@ (80086c0 <HAL_TIM_PWM_Start+0x1e4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00e      	beq.n	8008666 <HAL_TIM_PWM_Start+0x18a>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a19      	ldr	r2, [pc, #100]	@ (80086b4 <HAL_TIM_PWM_Start+0x1d8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d009      	beq.n	8008666 <HAL_TIM_PWM_Start+0x18a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a1b      	ldr	r2, [pc, #108]	@ (80086c4 <HAL_TIM_PWM_Start+0x1e8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_TIM_PWM_Start+0x18a>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a19      	ldr	r2, [pc, #100]	@ (80086c8 <HAL_TIM_PWM_Start+0x1ec>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d115      	bne.n	8008692 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	4b17      	ldr	r3, [pc, #92]	@ (80086cc <HAL_TIM_PWM_Start+0x1f0>)
 800866e:	4013      	ands	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b06      	cmp	r3, #6
 8008676:	d015      	beq.n	80086a4 <HAL_TIM_PWM_Start+0x1c8>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800867e:	d011      	beq.n	80086a4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008690:	e008      	b.n	80086a4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f042 0201 	orr.w	r2, r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	e000      	b.n	80086a6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40010400 	.word	0x40010400
 80086b8:	40000400 	.word	0x40000400
 80086bc:	40000800 	.word	0x40000800
 80086c0:	40000c00 	.word	0x40000c00
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40001800 	.word	0x40001800
 80086cc:	00010007 	.word	0x00010007

080086d0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <HAL_TIM_PWM_Start_IT+0x28>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	bf14      	ite	ne
 80086f0:	2301      	movne	r3, #1
 80086f2:	2300      	moveq	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	e03c      	b.n	8008772 <HAL_TIM_PWM_Start_IT+0xa2>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b04      	cmp	r3, #4
 80086fc:	d109      	bne.n	8008712 <HAL_TIM_PWM_Start_IT+0x42>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b01      	cmp	r3, #1
 8008708:	bf14      	ite	ne
 800870a:	2301      	movne	r3, #1
 800870c:	2300      	moveq	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	e02f      	b.n	8008772 <HAL_TIM_PWM_Start_IT+0xa2>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b08      	cmp	r3, #8
 8008716:	d109      	bne.n	800872c <HAL_TIM_PWM_Start_IT+0x5c>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	bf14      	ite	ne
 8008724:	2301      	movne	r3, #1
 8008726:	2300      	moveq	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	e022      	b.n	8008772 <HAL_TIM_PWM_Start_IT+0xa2>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b0c      	cmp	r3, #12
 8008730:	d109      	bne.n	8008746 <HAL_TIM_PWM_Start_IT+0x76>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b01      	cmp	r3, #1
 800873c:	bf14      	ite	ne
 800873e:	2301      	movne	r3, #1
 8008740:	2300      	moveq	r3, #0
 8008742:	b2db      	uxtb	r3, r3
 8008744:	e015      	b.n	8008772 <HAL_TIM_PWM_Start_IT+0xa2>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b10      	cmp	r3, #16
 800874a:	d109      	bne.n	8008760 <HAL_TIM_PWM_Start_IT+0x90>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	bf14      	ite	ne
 8008758:	2301      	movne	r3, #1
 800875a:	2300      	moveq	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	e008      	b.n	8008772 <HAL_TIM_PWM_Start_IT+0xa2>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b01      	cmp	r3, #1
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e0dd      	b.n	8008936 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d104      	bne.n	800878a <HAL_TIM_PWM_Start_IT+0xba>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008788:	e023      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x102>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2b04      	cmp	r3, #4
 800878e:	d104      	bne.n	800879a <HAL_TIM_PWM_Start_IT+0xca>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008798:	e01b      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x102>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d104      	bne.n	80087aa <HAL_TIM_PWM_Start_IT+0xda>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087a8:	e013      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x102>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b0c      	cmp	r3, #12
 80087ae:	d104      	bne.n	80087ba <HAL_TIM_PWM_Start_IT+0xea>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087b8:	e00b      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x102>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b10      	cmp	r3, #16
 80087be:	d104      	bne.n	80087ca <HAL_TIM_PWM_Start_IT+0xfa>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087c8:	e003      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x102>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2202      	movs	r2, #2
 80087ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b0c      	cmp	r3, #12
 80087d6:	d841      	bhi.n	800885c <HAL_TIM_PWM_Start_IT+0x18c>
 80087d8:	a201      	add	r2, pc, #4	@ (adr r2, 80087e0 <HAL_TIM_PWM_Start_IT+0x110>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008815 	.word	0x08008815
 80087e4:	0800885d 	.word	0x0800885d
 80087e8:	0800885d 	.word	0x0800885d
 80087ec:	0800885d 	.word	0x0800885d
 80087f0:	08008827 	.word	0x08008827
 80087f4:	0800885d 	.word	0x0800885d
 80087f8:	0800885d 	.word	0x0800885d
 80087fc:	0800885d 	.word	0x0800885d
 8008800:	08008839 	.word	0x08008839
 8008804:	0800885d 	.word	0x0800885d
 8008808:	0800885d 	.word	0x0800885d
 800880c:	0800885d 	.word	0x0800885d
 8008810:	0800884b 	.word	0x0800884b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0202 	orr.w	r2, r2, #2
 8008822:	60da      	str	r2, [r3, #12]
      break;
 8008824:	e01d      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f042 0204 	orr.w	r2, r2, #4
 8008834:	60da      	str	r2, [r3, #12]
      break;
 8008836:	e014      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0208 	orr.w	r2, r2, #8
 8008846:	60da      	str	r2, [r3, #12]
      break;
 8008848:	e00b      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f042 0210 	orr.w	r2, r2, #16
 8008858:	60da      	str	r2, [r3, #12]
      break;
 800885a:	e002      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	73fb      	strb	r3, [r7, #15]
      break;
 8008860:	bf00      	nop
  }

  if (status == HAL_OK)
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d165      	bne.n	8008934 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2201      	movs	r2, #1
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	4618      	mov	r0, r3
 8008872:	f001 f929 	bl	8009ac8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a31      	ldr	r2, [pc, #196]	@ (8008940 <HAL_TIM_PWM_Start_IT+0x270>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d004      	beq.n	800888a <HAL_TIM_PWM_Start_IT+0x1ba>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a2f      	ldr	r2, [pc, #188]	@ (8008944 <HAL_TIM_PWM_Start_IT+0x274>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d101      	bne.n	800888e <HAL_TIM_PWM_Start_IT+0x1be>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <HAL_TIM_PWM_Start_IT+0x1c0>
 800888e:	2300      	movs	r3, #0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d007      	beq.n	80088a4 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a25      	ldr	r2, [pc, #148]	@ (8008940 <HAL_TIM_PWM_Start_IT+0x270>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d022      	beq.n	80088f4 <HAL_TIM_PWM_Start_IT+0x224>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088b6:	d01d      	beq.n	80088f4 <HAL_TIM_PWM_Start_IT+0x224>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a22      	ldr	r2, [pc, #136]	@ (8008948 <HAL_TIM_PWM_Start_IT+0x278>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d018      	beq.n	80088f4 <HAL_TIM_PWM_Start_IT+0x224>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a21      	ldr	r2, [pc, #132]	@ (800894c <HAL_TIM_PWM_Start_IT+0x27c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d013      	beq.n	80088f4 <HAL_TIM_PWM_Start_IT+0x224>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008950 <HAL_TIM_PWM_Start_IT+0x280>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00e      	beq.n	80088f4 <HAL_TIM_PWM_Start_IT+0x224>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1a      	ldr	r2, [pc, #104]	@ (8008944 <HAL_TIM_PWM_Start_IT+0x274>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d009      	beq.n	80088f4 <HAL_TIM_PWM_Start_IT+0x224>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008954 <HAL_TIM_PWM_Start_IT+0x284>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d004      	beq.n	80088f4 <HAL_TIM_PWM_Start_IT+0x224>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008958 <HAL_TIM_PWM_Start_IT+0x288>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d115      	bne.n	8008920 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	4b18      	ldr	r3, [pc, #96]	@ (800895c <HAL_TIM_PWM_Start_IT+0x28c>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b06      	cmp	r3, #6
 8008904:	d015      	beq.n	8008932 <HAL_TIM_PWM_Start_IT+0x262>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800890c:	d011      	beq.n	8008932 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f042 0201 	orr.w	r2, r2, #1
 800891c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891e:	e008      	b.n	8008932 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0201 	orr.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	e000      	b.n	8008934 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008932:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	40010000 	.word	0x40010000
 8008944:	40010400 	.word	0x40010400
 8008948:	40000400 	.word	0x40000400
 800894c:	40000800 	.word	0x40000800
 8008950:	40000c00 	.word	0x40000c00
 8008954:	40014000 	.word	0x40014000
 8008958:	40001800 	.word	0x40001800
 800895c:	00010007 	.word	0x00010007

08008960 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b0c      	cmp	r3, #12
 8008972:	d841      	bhi.n	80089f8 <HAL_TIM_PWM_Stop_IT+0x98>
 8008974:	a201      	add	r2, pc, #4	@ (adr r2, 800897c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8008976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897a:	bf00      	nop
 800897c:	080089b1 	.word	0x080089b1
 8008980:	080089f9 	.word	0x080089f9
 8008984:	080089f9 	.word	0x080089f9
 8008988:	080089f9 	.word	0x080089f9
 800898c:	080089c3 	.word	0x080089c3
 8008990:	080089f9 	.word	0x080089f9
 8008994:	080089f9 	.word	0x080089f9
 8008998:	080089f9 	.word	0x080089f9
 800899c:	080089d5 	.word	0x080089d5
 80089a0:	080089f9 	.word	0x080089f9
 80089a4:	080089f9 	.word	0x080089f9
 80089a8:	080089f9 	.word	0x080089f9
 80089ac:	080089e7 	.word	0x080089e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0202 	bic.w	r2, r2, #2
 80089be:	60da      	str	r2, [r3, #12]
      break;
 80089c0:	e01d      	b.n	80089fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0204 	bic.w	r2, r2, #4
 80089d0:	60da      	str	r2, [r3, #12]
      break;
 80089d2:	e014      	b.n	80089fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0208 	bic.w	r2, r2, #8
 80089e2:	60da      	str	r2, [r3, #12]
      break;
 80089e4:	e00b      	b.n	80089fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0210 	bic.w	r2, r2, #16
 80089f4:	60da      	str	r2, [r3, #12]
      break;
 80089f6:	e002      	b.n	80089fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
      break;
 80089fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d171      	bne.n	8008ae8 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 f85b 	bl	8009ac8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a37      	ldr	r2, [pc, #220]	@ (8008af4 <HAL_TIM_PWM_Stop_IT+0x194>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d004      	beq.n	8008a26 <HAL_TIM_PWM_Stop_IT+0xc6>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a35      	ldr	r2, [pc, #212]	@ (8008af8 <HAL_TIM_PWM_Stop_IT+0x198>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d101      	bne.n	8008a2a <HAL_TIM_PWM_Stop_IT+0xca>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <HAL_TIM_PWM_Stop_IT+0xcc>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d017      	beq.n	8008a60 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10f      	bne.n	8008a60 <HAL_TIM_PWM_Stop_IT+0x100>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a1a      	ldr	r2, [r3, #32]
 8008a46:	f240 4344 	movw	r3, #1092	@ 0x444
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d107      	bne.n	8008a60 <HAL_TIM_PWM_Stop_IT+0x100>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6a1a      	ldr	r2, [r3, #32]
 8008a66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10f      	bne.n	8008a90 <HAL_TIM_PWM_Stop_IT+0x130>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6a1a      	ldr	r2, [r3, #32]
 8008a76:	f240 4344 	movw	r3, #1092	@ 0x444
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d107      	bne.n	8008a90 <HAL_TIM_PWM_Stop_IT+0x130>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <HAL_TIM_PWM_Stop_IT+0x140>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a9e:	e023      	b.n	8008ae8 <HAL_TIM_PWM_Stop_IT+0x188>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d104      	bne.n	8008ab0 <HAL_TIM_PWM_Stop_IT+0x150>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008aae:	e01b      	b.n	8008ae8 <HAL_TIM_PWM_Stop_IT+0x188>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d104      	bne.n	8008ac0 <HAL_TIM_PWM_Stop_IT+0x160>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008abe:	e013      	b.n	8008ae8 <HAL_TIM_PWM_Stop_IT+0x188>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2b0c      	cmp	r3, #12
 8008ac4:	d104      	bne.n	8008ad0 <HAL_TIM_PWM_Stop_IT+0x170>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ace:	e00b      	b.n	8008ae8 <HAL_TIM_PWM_Stop_IT+0x188>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b10      	cmp	r3, #16
 8008ad4:	d104      	bne.n	8008ae0 <HAL_TIM_PWM_Stop_IT+0x180>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ade:	e003      	b.n	8008ae8 <HAL_TIM_PWM_Stop_IT+0x188>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	40010000 	.word	0x40010000
 8008af8:	40010400 	.word	0x40010400

08008afc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e08f      	b.n	8008c30 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7fb fb2f 	bl	8004188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6899      	ldr	r1, [r3, #8]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8008c38 <HAL_TIM_Encoder_Init+0x13c>)
 8008b3e:	400b      	ands	r3, r1
 8008b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f000 fc17 	bl	8009380 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4b31      	ldr	r3, [pc, #196]	@ (8008c3c <HAL_TIM_Encoder_Init+0x140>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	021b      	lsls	r3, r3, #8
 8008b86:	4313      	orrs	r3, r2
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	4b2b      	ldr	r3, [pc, #172]	@ (8008c40 <HAL_TIM_Encoder_Init+0x144>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4b2a      	ldr	r3, [pc, #168]	@ (8008c44 <HAL_TIM_Encoder_Init+0x148>)
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	021b      	lsls	r3, r3, #8
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	011a      	lsls	r2, r3, #4
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	031b      	lsls	r3, r3, #12
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008bca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008bd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	4313      	orrs	r3, r2
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	fffebff8 	.word	0xfffebff8
 8008c3c:	fffffcfc 	.word	0xfffffcfc
 8008c40:	fffff3f3 	.word	0xfffff3f3
 8008c44:	ffff0f0f 	.word	0xffff0f0f

08008c48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d110      	bne.n	8008c9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d102      	bne.n	8008c84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c7e:	7b7b      	ldrb	r3, [r7, #13]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d001      	beq.n	8008c88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e069      	b.n	8008d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c98:	e031      	b.n	8008cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d110      	bne.n	8008cc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d102      	bne.n	8008cac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ca6:	7b3b      	ldrb	r3, [r7, #12]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d001      	beq.n	8008cb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e055      	b.n	8008d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cc0:	e01d      	b.n	8008cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d108      	bne.n	8008cda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d105      	bne.n	8008cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cce:	7b7b      	ldrb	r3, [r7, #13]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d102      	bne.n	8008cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008cd4:	7b3b      	ldrb	r3, [r7, #12]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d001      	beq.n	8008cde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e03e      	b.n	8008d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <HAL_TIM_Encoder_Start+0xc4>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d008      	beq.n	8008d1c <HAL_TIM_Encoder_Start+0xd4>
 8008d0a:	e00f      	b.n	8008d2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2201      	movs	r2, #1
 8008d12:	2100      	movs	r1, #0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fed7 	bl	8009ac8 <TIM_CCxChannelCmd>
      break;
 8008d1a:	e016      	b.n	8008d4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2201      	movs	r2, #1
 8008d22:	2104      	movs	r1, #4
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fecf 	bl	8009ac8 <TIM_CCxChannelCmd>
      break;
 8008d2a:	e00e      	b.n	8008d4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2201      	movs	r2, #1
 8008d32:	2100      	movs	r1, #0
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fec7 	bl	8009ac8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	2104      	movs	r1, #4
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fec0 	bl	8009ac8 <TIM_CCxChannelCmd>
      break;
 8008d48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f042 0201 	orr.w	r2, r2, #1
 8008d58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d020      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 0302 	and.w	r3, r3, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01b      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f06f 0202 	mvn.w	r2, #2
 8008d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fad2 	bl	8009358 <HAL_TIM_IC_CaptureCallback>
 8008db4:	e005      	b.n	8008dc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fac4 	bl	8009344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7f8 fabf 	bl	8001340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d020      	beq.n	8008e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01b      	beq.n	8008e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f06f 0204 	mvn.w	r2, #4
 8008de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2202      	movs	r2, #2
 8008dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 faac 	bl	8009358 <HAL_TIM_IC_CaptureCallback>
 8008e00:	e005      	b.n	8008e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fa9e 	bl	8009344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7f8 fa99 	bl	8001340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d020      	beq.n	8008e60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f003 0308 	and.w	r3, r3, #8
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01b      	beq.n	8008e60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0208 	mvn.w	r2, #8
 8008e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2204      	movs	r2, #4
 8008e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa86 	bl	8009358 <HAL_TIM_IC_CaptureCallback>
 8008e4c:	e005      	b.n	8008e5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa78 	bl	8009344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7f8 fa73 	bl	8001340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f003 0310 	and.w	r3, r3, #16
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d020      	beq.n	8008eac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01b      	beq.n	8008eac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0210 	mvn.w	r2, #16
 8008e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2208      	movs	r2, #8
 8008e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa60 	bl	8009358 <HAL_TIM_IC_CaptureCallback>
 8008e98:	e005      	b.n	8008ea6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa52 	bl	8009344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7f8 fa4d 	bl	8001340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00c      	beq.n	8008ed0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0201 	mvn.w	r2, #1
 8008ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fa30 	bl	8009330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00c      	beq.n	8008efe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fea3 	bl	8009c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fe9b 	bl	8009c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00c      	beq.n	8008f46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d007      	beq.n	8008f46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fa13 	bl	800936c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	f003 0320 	and.w	r3, r3, #32
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00c      	beq.n	8008f6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d007      	beq.n	8008f6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f06f 0220 	mvn.w	r2, #32
 8008f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fe63 	bl	8009c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e0ff      	b.n	8009192 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b14      	cmp	r3, #20
 8008f9e:	f200 80f0 	bhi.w	8009182 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08008ffd 	.word	0x08008ffd
 8008fac:	08009183 	.word	0x08009183
 8008fb0:	08009183 	.word	0x08009183
 8008fb4:	08009183 	.word	0x08009183
 8008fb8:	0800903d 	.word	0x0800903d
 8008fbc:	08009183 	.word	0x08009183
 8008fc0:	08009183 	.word	0x08009183
 8008fc4:	08009183 	.word	0x08009183
 8008fc8:	0800907f 	.word	0x0800907f
 8008fcc:	08009183 	.word	0x08009183
 8008fd0:	08009183 	.word	0x08009183
 8008fd4:	08009183 	.word	0x08009183
 8008fd8:	080090bf 	.word	0x080090bf
 8008fdc:	08009183 	.word	0x08009183
 8008fe0:	08009183 	.word	0x08009183
 8008fe4:	08009183 	.word	0x08009183
 8008fe8:	08009101 	.word	0x08009101
 8008fec:	08009183 	.word	0x08009183
 8008ff0:	08009183 	.word	0x08009183
 8008ff4:	08009183 	.word	0x08009183
 8008ff8:	08009141 	.word	0x08009141
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fa68 	bl	80094d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0208 	orr.w	r2, r2, #8
 8009016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699a      	ldr	r2, [r3, #24]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0204 	bic.w	r2, r2, #4
 8009026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6999      	ldr	r1, [r3, #24]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	619a      	str	r2, [r3, #24]
      break;
 800903a:	e0a5      	b.n	8009188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68b9      	ldr	r1, [r7, #8]
 8009042:	4618      	mov	r0, r3
 8009044:	f000 faba 	bl	80095bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699a      	ldr	r2, [r3, #24]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6999      	ldr	r1, [r3, #24]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	021a      	lsls	r2, r3, #8
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	619a      	str	r2, [r3, #24]
      break;
 800907c:	e084      	b.n	8009188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fb11 	bl	80096ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69da      	ldr	r2, [r3, #28]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0208 	orr.w	r2, r2, #8
 8009098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69da      	ldr	r2, [r3, #28]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0204 	bic.w	r2, r2, #4
 80090a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	69d9      	ldr	r1, [r3, #28]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	691a      	ldr	r2, [r3, #16]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	430a      	orrs	r2, r1
 80090ba:	61da      	str	r2, [r3, #28]
      break;
 80090bc:	e064      	b.n	8009188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fb67 	bl	8009798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69da      	ldr	r2, [r3, #28]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	69da      	ldr	r2, [r3, #28]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69d9      	ldr	r1, [r3, #28]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	021a      	lsls	r2, r3, #8
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	61da      	str	r2, [r3, #28]
      break;
 80090fe:	e043      	b.n	8009188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fb9e 	bl	8009848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0208 	orr.w	r2, r2, #8
 800911a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0204 	bic.w	r2, r2, #4
 800912a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	691a      	ldr	r2, [r3, #16]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800913e:	e023      	b.n	8009188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68b9      	ldr	r1, [r7, #8]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fbd0 	bl	80098ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800915a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800916a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	021a      	lsls	r2, r3, #8
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009180:	e002      	b.n	8009188 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	75fb      	strb	r3, [r7, #23]
      break;
 8009186:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009190:	7dfb      	ldrb	r3, [r7, #23]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop

0800919c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_TIM_ConfigClockSource+0x1c>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e0b4      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x186>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	4b56      	ldr	r3, [pc, #344]	@ (800932c <HAL_TIM_ConfigClockSource+0x190>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091f0:	d03e      	beq.n	8009270 <HAL_TIM_ConfigClockSource+0xd4>
 80091f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091f6:	f200 8087 	bhi.w	8009308 <HAL_TIM_ConfigClockSource+0x16c>
 80091fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091fe:	f000 8086 	beq.w	800930e <HAL_TIM_ConfigClockSource+0x172>
 8009202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009206:	d87f      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x16c>
 8009208:	2b70      	cmp	r3, #112	@ 0x70
 800920a:	d01a      	beq.n	8009242 <HAL_TIM_ConfigClockSource+0xa6>
 800920c:	2b70      	cmp	r3, #112	@ 0x70
 800920e:	d87b      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x16c>
 8009210:	2b60      	cmp	r3, #96	@ 0x60
 8009212:	d050      	beq.n	80092b6 <HAL_TIM_ConfigClockSource+0x11a>
 8009214:	2b60      	cmp	r3, #96	@ 0x60
 8009216:	d877      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x16c>
 8009218:	2b50      	cmp	r3, #80	@ 0x50
 800921a:	d03c      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0xfa>
 800921c:	2b50      	cmp	r3, #80	@ 0x50
 800921e:	d873      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x16c>
 8009220:	2b40      	cmp	r3, #64	@ 0x40
 8009222:	d058      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x13a>
 8009224:	2b40      	cmp	r3, #64	@ 0x40
 8009226:	d86f      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x16c>
 8009228:	2b30      	cmp	r3, #48	@ 0x30
 800922a:	d064      	beq.n	80092f6 <HAL_TIM_ConfigClockSource+0x15a>
 800922c:	2b30      	cmp	r3, #48	@ 0x30
 800922e:	d86b      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x16c>
 8009230:	2b20      	cmp	r3, #32
 8009232:	d060      	beq.n	80092f6 <HAL_TIM_ConfigClockSource+0x15a>
 8009234:	2b20      	cmp	r3, #32
 8009236:	d867      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x16c>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d05c      	beq.n	80092f6 <HAL_TIM_ConfigClockSource+0x15a>
 800923c:	2b10      	cmp	r3, #16
 800923e:	d05a      	beq.n	80092f6 <HAL_TIM_ConfigClockSource+0x15a>
 8009240:	e062      	b.n	8009308 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009252:	f000 fc19 	bl	8009a88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	609a      	str	r2, [r3, #8]
      break;
 800926e:	e04f      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009280:	f000 fc02 	bl	8009a88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009292:	609a      	str	r2, [r3, #8]
      break;
 8009294:	e03c      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092a2:	461a      	mov	r2, r3
 80092a4:	f000 fb76 	bl	8009994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2150      	movs	r1, #80	@ 0x50
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 fbcf 	bl	8009a52 <TIM_ITRx_SetConfig>
      break;
 80092b4:	e02c      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092c2:	461a      	mov	r2, r3
 80092c4:	f000 fb95 	bl	80099f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2160      	movs	r1, #96	@ 0x60
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fbbf 	bl	8009a52 <TIM_ITRx_SetConfig>
      break;
 80092d4:	e01c      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092e2:	461a      	mov	r2, r3
 80092e4:	f000 fb56 	bl	8009994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2140      	movs	r1, #64	@ 0x40
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fbaf 	bl	8009a52 <TIM_ITRx_SetConfig>
      break;
 80092f4:	e00c      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f000 fba6 	bl	8009a52 <TIM_ITRx_SetConfig>
      break;
 8009306:	e003      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	73fb      	strb	r3, [r7, #15]
      break;
 800930c:	e000      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800930e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009320:	7bfb      	ldrb	r3, [r7, #15]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	fffeff88 	.word	0xfffeff88

08009330 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a46      	ldr	r2, [pc, #280]	@ (80094ac <TIM_Base_SetConfig+0x12c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d013      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800939e:	d00f      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a43      	ldr	r2, [pc, #268]	@ (80094b0 <TIM_Base_SetConfig+0x130>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00b      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a42      	ldr	r2, [pc, #264]	@ (80094b4 <TIM_Base_SetConfig+0x134>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d007      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a41      	ldr	r2, [pc, #260]	@ (80094b8 <TIM_Base_SetConfig+0x138>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a40      	ldr	r2, [pc, #256]	@ (80094bc <TIM_Base_SetConfig+0x13c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d108      	bne.n	80093d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a35      	ldr	r2, [pc, #212]	@ (80094ac <TIM_Base_SetConfig+0x12c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d02b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e0:	d027      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a32      	ldr	r2, [pc, #200]	@ (80094b0 <TIM_Base_SetConfig+0x130>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d023      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a31      	ldr	r2, [pc, #196]	@ (80094b4 <TIM_Base_SetConfig+0x134>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d01f      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a30      	ldr	r2, [pc, #192]	@ (80094b8 <TIM_Base_SetConfig+0x138>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d01b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a2f      	ldr	r2, [pc, #188]	@ (80094bc <TIM_Base_SetConfig+0x13c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d017      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a2e      	ldr	r2, [pc, #184]	@ (80094c0 <TIM_Base_SetConfig+0x140>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a2d      	ldr	r2, [pc, #180]	@ (80094c4 <TIM_Base_SetConfig+0x144>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00f      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a2c      	ldr	r2, [pc, #176]	@ (80094c8 <TIM_Base_SetConfig+0x148>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a2b      	ldr	r2, [pc, #172]	@ (80094cc <TIM_Base_SetConfig+0x14c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d007      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2a      	ldr	r2, [pc, #168]	@ (80094d0 <TIM_Base_SetConfig+0x150>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d003      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a29      	ldr	r2, [pc, #164]	@ (80094d4 <TIM_Base_SetConfig+0x154>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d108      	bne.n	8009444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	4313      	orrs	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	4313      	orrs	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a10      	ldr	r2, [pc, #64]	@ (80094ac <TIM_Base_SetConfig+0x12c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_Base_SetConfig+0xf8>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a12      	ldr	r2, [pc, #72]	@ (80094bc <TIM_Base_SetConfig+0x13c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d103      	bne.n	8009480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	691a      	ldr	r2, [r3, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b01      	cmp	r3, #1
 8009490:	d105      	bne.n	800949e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f023 0201 	bic.w	r2, r3, #1
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	611a      	str	r2, [r3, #16]
  }
}
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40010000 	.word	0x40010000
 80094b0:	40000400 	.word	0x40000400
 80094b4:	40000800 	.word	0x40000800
 80094b8:	40000c00 	.word	0x40000c00
 80094bc:	40010400 	.word	0x40010400
 80094c0:	40014000 	.word	0x40014000
 80094c4:	40014400 	.word	0x40014400
 80094c8:	40014800 	.word	0x40014800
 80094cc:	40001800 	.word	0x40001800
 80094d0:	40001c00 	.word	0x40001c00
 80094d4:	40002000 	.word	0x40002000

080094d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	f023 0201 	bic.w	r2, r3, #1
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4b2b      	ldr	r3, [pc, #172]	@ (80095b0 <TIM_OC1_SetConfig+0xd8>)
 8009504:	4013      	ands	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f023 0302 	bic.w	r3, r3, #2
 8009520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a21      	ldr	r2, [pc, #132]	@ (80095b4 <TIM_OC1_SetConfig+0xdc>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d003      	beq.n	800953c <TIM_OC1_SetConfig+0x64>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a20      	ldr	r2, [pc, #128]	@ (80095b8 <TIM_OC1_SetConfig+0xe0>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d10c      	bne.n	8009556 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f023 0308 	bic.w	r3, r3, #8
 8009542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	4313      	orrs	r3, r2
 800954c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f023 0304 	bic.w	r3, r3, #4
 8009554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a16      	ldr	r2, [pc, #88]	@ (80095b4 <TIM_OC1_SetConfig+0xdc>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d003      	beq.n	8009566 <TIM_OC1_SetConfig+0x8e>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a15      	ldr	r2, [pc, #84]	@ (80095b8 <TIM_OC1_SetConfig+0xe0>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d111      	bne.n	800958a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800956c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4313      	orrs	r3, r2
 8009588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	621a      	str	r2, [r3, #32]
}
 80095a4:	bf00      	nop
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	fffeff8f 	.word	0xfffeff8f
 80095b4:	40010000 	.word	0x40010000
 80095b8:	40010400 	.word	0x40010400

080095bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	f023 0210 	bic.w	r2, r3, #16
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4b2e      	ldr	r3, [pc, #184]	@ (80096a0 <TIM_OC2_SetConfig+0xe4>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	021b      	lsls	r3, r3, #8
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f023 0320 	bic.w	r3, r3, #32
 8009606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	4313      	orrs	r3, r2
 8009612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a23      	ldr	r2, [pc, #140]	@ (80096a4 <TIM_OC2_SetConfig+0xe8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d003      	beq.n	8009624 <TIM_OC2_SetConfig+0x68>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a22      	ldr	r2, [pc, #136]	@ (80096a8 <TIM_OC2_SetConfig+0xec>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d10d      	bne.n	8009640 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800962a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	4313      	orrs	r3, r2
 8009636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800963e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a18      	ldr	r2, [pc, #96]	@ (80096a4 <TIM_OC2_SetConfig+0xe8>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d003      	beq.n	8009650 <TIM_OC2_SetConfig+0x94>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a17      	ldr	r2, [pc, #92]	@ (80096a8 <TIM_OC2_SetConfig+0xec>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d113      	bne.n	8009678 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800965e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	4313      	orrs	r3, r2
 800966a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	4313      	orrs	r3, r2
 8009676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	621a      	str	r2, [r3, #32]
}
 8009692:	bf00      	nop
 8009694:	371c      	adds	r7, #28
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	feff8fff 	.word	0xfeff8fff
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40010400 	.word	0x40010400

080096ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4b2d      	ldr	r3, [pc, #180]	@ (800978c <TIM_OC3_SetConfig+0xe0>)
 80096d8:	4013      	ands	r3, r2
 80096da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 0303 	bic.w	r3, r3, #3
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	021b      	lsls	r3, r3, #8
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	4313      	orrs	r3, r2
 8009700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a22      	ldr	r2, [pc, #136]	@ (8009790 <TIM_OC3_SetConfig+0xe4>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d003      	beq.n	8009712 <TIM_OC3_SetConfig+0x66>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a21      	ldr	r2, [pc, #132]	@ (8009794 <TIM_OC3_SetConfig+0xe8>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d10d      	bne.n	800972e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800972c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a17      	ldr	r2, [pc, #92]	@ (8009790 <TIM_OC3_SetConfig+0xe4>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d003      	beq.n	800973e <TIM_OC3_SetConfig+0x92>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a16      	ldr	r2, [pc, #88]	@ (8009794 <TIM_OC3_SetConfig+0xe8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d113      	bne.n	8009766 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800974c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	621a      	str	r2, [r3, #32]
}
 8009780:	bf00      	nop
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	fffeff8f 	.word	0xfffeff8f
 8009790:	40010000 	.word	0x40010000
 8009794:	40010400 	.word	0x40010400

08009798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	4b1e      	ldr	r3, [pc, #120]	@ (800983c <TIM_OC4_SetConfig+0xa4>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4313      	orrs	r3, r2
 80097da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	031b      	lsls	r3, r3, #12
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a13      	ldr	r2, [pc, #76]	@ (8009840 <TIM_OC4_SetConfig+0xa8>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d003      	beq.n	8009800 <TIM_OC4_SetConfig+0x68>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a12      	ldr	r2, [pc, #72]	@ (8009844 <TIM_OC4_SetConfig+0xac>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d109      	bne.n	8009814 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	019b      	lsls	r3, r3, #6
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4313      	orrs	r3, r2
 8009812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	621a      	str	r2, [r3, #32]
}
 800982e:	bf00      	nop
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	feff8fff 	.word	0xfeff8fff
 8009840:	40010000 	.word	0x40010000
 8009844:	40010400 	.word	0x40010400

08009848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4b1b      	ldr	r3, [pc, #108]	@ (80098e0 <TIM_OC5_SetConfig+0x98>)
 8009874:	4013      	ands	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	4313      	orrs	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	041b      	lsls	r3, r3, #16
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	4313      	orrs	r3, r2
 8009894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a12      	ldr	r2, [pc, #72]	@ (80098e4 <TIM_OC5_SetConfig+0x9c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d003      	beq.n	80098a6 <TIM_OC5_SetConfig+0x5e>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a11      	ldr	r2, [pc, #68]	@ (80098e8 <TIM_OC5_SetConfig+0xa0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d109      	bne.n	80098ba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	021b      	lsls	r3, r3, #8
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	621a      	str	r2, [r3, #32]
}
 80098d4:	bf00      	nop
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	fffeff8f 	.word	0xfffeff8f
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40010400 	.word	0x40010400

080098ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4b1c      	ldr	r3, [pc, #112]	@ (8009988 <TIM_OC6_SetConfig+0x9c>)
 8009918:	4013      	ands	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	021b      	lsls	r3, r3, #8
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4313      	orrs	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800992e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	051b      	lsls	r3, r3, #20
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	4313      	orrs	r3, r2
 800993a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a13      	ldr	r2, [pc, #76]	@ (800998c <TIM_OC6_SetConfig+0xa0>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d003      	beq.n	800994c <TIM_OC6_SetConfig+0x60>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a12      	ldr	r2, [pc, #72]	@ (8009990 <TIM_OC6_SetConfig+0xa4>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d109      	bne.n	8009960 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	029b      	lsls	r3, r3, #10
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	4313      	orrs	r3, r2
 800995e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	621a      	str	r2, [r3, #32]
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	feff8fff 	.word	0xfeff8fff
 800998c:	40010000 	.word	0x40010000
 8009990:	40010400 	.word	0x40010400

08009994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	f023 0201 	bic.w	r2, r3, #1
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	011b      	lsls	r3, r3, #4
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f023 030a 	bic.w	r3, r3, #10
 80099d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	621a      	str	r2, [r3, #32]
}
 80099e6:	bf00      	nop
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b087      	sub	sp, #28
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	f023 0210 	bic.w	r2, r3, #16
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	031b      	lsls	r3, r3, #12
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	621a      	str	r2, [r3, #32]
}
 8009a46:	bf00      	nop
 8009a48:	371c      	adds	r7, #28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b085      	sub	sp, #20
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f043 0307 	orr.w	r3, r3, #7
 8009a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	609a      	str	r2, [r3, #8]
}
 8009a7c:	bf00      	nop
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	021a      	lsls	r2, r3, #8
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	609a      	str	r2, [r3, #8]
}
 8009abc:	bf00      	nop
 8009abe:	371c      	adds	r7, #28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f003 031f 	and.w	r3, r3, #31
 8009ada:	2201      	movs	r2, #1
 8009adc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6a1a      	ldr	r2, [r3, #32]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	43db      	mvns	r3, r3
 8009aea:	401a      	ands	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6a1a      	ldr	r2, [r3, #32]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 031f 	and.w	r3, r3, #31
 8009afa:	6879      	ldr	r1, [r7, #4]
 8009afc:	fa01 f303 	lsl.w	r3, r1, r3
 8009b00:	431a      	orrs	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	621a      	str	r2, [r3, #32]
}
 8009b06:	bf00      	nop
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
	...

08009b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d101      	bne.n	8009b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b28:	2302      	movs	r3, #2
 8009b2a:	e06d      	b.n	8009c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2202      	movs	r2, #2
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a30      	ldr	r2, [pc, #192]	@ (8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d004      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d108      	bne.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a20      	ldr	r2, [pc, #128]	@ (8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d022      	beq.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b9e:	d01d      	beq.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d018      	beq.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a1c      	ldr	r2, [pc, #112]	@ (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d013      	beq.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8009c24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d00e      	beq.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a15      	ldr	r2, [pc, #84]	@ (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d009      	beq.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a16      	ldr	r2, [pc, #88]	@ (8009c28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d004      	beq.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a15      	ldr	r2, [pc, #84]	@ (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d10c      	bne.n	8009bf6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009be2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	40010000 	.word	0x40010000
 8009c18:	40010400 	.word	0x40010400
 8009c1c:	40000400 	.word	0x40000400
 8009c20:	40000800 	.word	0x40000800
 8009c24:	40000c00 	.word	0x40000c00
 8009c28:	40014000 	.word	0x40014000
 8009c2c:	40001800 	.word	0x40001800

08009c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e040      	b.n	8009d00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fa fbf2 	bl	8004478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2224      	movs	r2, #36	@ 0x24
 8009c98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f022 0201 	bic.w	r2, r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fe56 	bl	800a964 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fbef 	bl	800a49c <UART_SetConfig>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d101      	bne.n	8009cc8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e01b      	b.n	8009d00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	689a      	ldr	r2, [r3, #8]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f042 0201 	orr.w	r2, r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fed5 	bl	800aaa8 <UART_CheckIdleState>
 8009cfe:	4603      	mov	r3, r0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	@ 0x28
 8009d0c:	af02      	add	r7, sp, #8
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4613      	mov	r3, r2
 8009d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	d177      	bne.n	8009e10 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <HAL_UART_Transmit+0x24>
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e070      	b.n	8009e12 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2221      	movs	r2, #33	@ 0x21
 8009d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d3e:	f7fa fec1 	bl	8004ac4 <HAL_GetTick>
 8009d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	88fa      	ldrh	r2, [r7, #6]
 8009d48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	88fa      	ldrh	r2, [r7, #6]
 8009d50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d5c:	d108      	bne.n	8009d70 <HAL_UART_Transmit+0x68>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d104      	bne.n	8009d70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	61bb      	str	r3, [r7, #24]
 8009d6e:	e003      	b.n	8009d78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d78:	e02f      	b.n	8009dda <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2200      	movs	r2, #0
 8009d82:	2180      	movs	r1, #128	@ 0x80
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 fee6 	bl	800ab56 <UART_WaitOnFlagUntilTimeout>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d004      	beq.n	8009d9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2220      	movs	r2, #32
 8009d94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e03b      	b.n	8009e12 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10b      	bne.n	8009db8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	3302      	adds	r3, #2
 8009db4:	61bb      	str	r3, [r7, #24]
 8009db6:	e007      	b.n	8009dc8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	781a      	ldrb	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1c9      	bne.n	8009d7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2200      	movs	r2, #0
 8009dee:	2140      	movs	r1, #64	@ 0x40
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 feb0 	bl	800ab56 <UART_WaitOnFlagUntilTimeout>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e005      	b.n	8009e12 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e000      	b.n	8009e12 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009e10:	2302      	movs	r3, #2
  }
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3720      	adds	r7, #32
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b08a      	sub	sp, #40	@ 0x28
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	4613      	mov	r3, r2
 8009e26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	d132      	bne.n	8009e98 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <HAL_UART_Receive_DMA+0x24>
 8009e38:	88fb      	ldrh	r3, [r7, #6]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e02b      	b.n	8009e9a <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d018      	beq.n	8009e88 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	613b      	str	r3, [r7, #16]
   return(result);
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e74:	623b      	str	r3, [r7, #32]
 8009e76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	69f9      	ldr	r1, [r7, #28]
 8009e7a:	6a3a      	ldr	r2, [r7, #32]
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e6      	bne.n	8009e56 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fece 	bl	800ac30 <UART_Start_Receive_DMA>
 8009e94:	4603      	mov	r3, r0
 8009e96:	e000      	b.n	8009e9a <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009e98:	2302      	movs	r3, #2
  }
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3728      	adds	r7, #40	@ 0x28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b0ba      	sub	sp, #232	@ 0xe8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009eca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009ece:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d115      	bne.n	8009f0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ee4:	f003 0320 	and.w	r3, r3, #32
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00f      	beq.n	8009f0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ef0:	f003 0320 	and.w	r3, r3, #32
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d009      	beq.n	8009f0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8297 	beq.w	800a430 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	4798      	blx	r3
      }
      return;
 8009f0a:	e291      	b.n	800a430 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 8117 	beq.w	800a144 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009f22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009f26:	4b85      	ldr	r3, [pc, #532]	@ (800a13c <HAL_UART_IRQHandler+0x298>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 810a 	beq.w	800a144 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d011      	beq.n	8009f60 <HAL_UART_IRQHandler+0xbc>
 8009f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00b      	beq.n	8009f60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f56:	f043 0201 	orr.w	r2, r3, #1
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f64:	f003 0302 	and.w	r3, r3, #2
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d011      	beq.n	8009f90 <HAL_UART_IRQHandler+0xec>
 8009f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f86:	f043 0204 	orr.w	r2, r3, #4
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d011      	beq.n	8009fc0 <HAL_UART_IRQHandler+0x11c>
 8009f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00b      	beq.n	8009fc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2204      	movs	r2, #4
 8009fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fb6:	f043 0202 	orr.w	r2, r3, #2
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d017      	beq.n	8009ffc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fd0:	f003 0320 	and.w	r3, r3, #32
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d105      	bne.n	8009fe4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00b      	beq.n	8009ffc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2208      	movs	r2, #8
 8009fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ff2:	f043 0208 	orr.w	r2, r3, #8
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a004:	2b00      	cmp	r3, #0
 800a006:	d012      	beq.n	800a02e <HAL_UART_IRQHandler+0x18a>
 800a008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a00c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00c      	beq.n	800a02e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a01c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a024:	f043 0220 	orr.w	r2, r3, #32
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 81fd 	beq.w	800a434 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a03e:	f003 0320 	and.w	r3, r3, #32
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00d      	beq.n	800a062 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a04a:	f003 0320 	and.w	r3, r3, #32
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d007      	beq.n	800a062 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a068:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a076:	2b40      	cmp	r3, #64	@ 0x40
 800a078:	d005      	beq.n	800a086 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a07a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a07e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a082:	2b00      	cmp	r3, #0
 800a084:	d04f      	beq.n	800a126 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fe98 	bl	800adbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a096:	2b40      	cmp	r3, #64	@ 0x40
 800a098:	d141      	bne.n	800a11e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a0b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a0b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a0c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a0ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a0d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a0de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1d9      	bne.n	800a09a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d013      	beq.n	800a116 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0f2:	4a13      	ldr	r2, [pc, #76]	@ (800a140 <HAL_UART_IRQHandler+0x29c>)
 800a0f4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fa ffa2 	bl	8005044 <HAL_DMA_Abort_IT>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d017      	beq.n	800a136 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a10a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a110:	4610      	mov	r0, r2
 800a112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a114:	e00f      	b.n	800a136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f9aa 	bl	800a470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a11c:	e00b      	b.n	800a136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f9a6 	bl	800a470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a124:	e007      	b.n	800a136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f9a2 	bl	800a470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a134:	e17e      	b.n	800a434 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a136:	bf00      	nop
    return;
 800a138:	e17c      	b.n	800a434 <HAL_UART_IRQHandler+0x590>
 800a13a:	bf00      	nop
 800a13c:	04000120 	.word	0x04000120
 800a140:	0800b069 	.word	0x0800b069

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a148:	2b01      	cmp	r3, #1
 800a14a:	f040 814c 	bne.w	800a3e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a152:	f003 0310 	and.w	r3, r3, #16
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 8145 	beq.w	800a3e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a160:	f003 0310 	and.w	r3, r3, #16
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 813e 	beq.w	800a3e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2210      	movs	r2, #16
 800a170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a17c:	2b40      	cmp	r3, #64	@ 0x40
 800a17e:	f040 80b6 	bne.w	800a2ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a18e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 8150 	beq.w	800a438 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a19e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	f080 8148 	bcs.w	800a438 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a1ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1bc:	f000 8086 	beq.w	800a2cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a1cc:	e853 3f00 	ldrex	r3, [r3]
 800a1d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a1d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a1ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a1f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1da      	bne.n	800a1c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3308      	adds	r3, #8
 800a210:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a21a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a21c:	f023 0301 	bic.w	r3, r3, #1
 800a220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3308      	adds	r3, #8
 800a22a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a22e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a232:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a236:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e1      	bne.n	800a20a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3308      	adds	r3, #8
 800a24c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a250:	e853 3f00 	ldrex	r3, [r3]
 800a254:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a25c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3308      	adds	r3, #8
 800a266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a26a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a26c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a270:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e3      	bne.n	800a246 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2220      	movs	r2, #32
 800a282:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a294:	e853 3f00 	ldrex	r3, [r3]
 800a298:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a29a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a29c:	f023 0310 	bic.w	r3, r3, #16
 800a2a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a2bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e4      	bne.n	800a28c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fa fe4c 	bl	8004f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f8cc 	bl	800a484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2ec:	e0a4      	b.n	800a438 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 8096 	beq.w	800a43c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 8091 	beq.w	800a43c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a32e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a33c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a33e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e4      	bne.n	800a31a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	623b      	str	r3, [r7, #32]
   return(result);
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	3308      	adds	r3, #8
 800a370:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a374:	633a      	str	r2, [r7, #48]	@ 0x30
 800a376:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a37a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a37c:	e841 2300 	strex	r3, r2, [r1]
 800a380:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e3      	bne.n	800a350 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f023 0310 	bic.w	r3, r3, #16
 800a3b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a3be:	61fb      	str	r3, [r7, #28]
 800a3c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	69b9      	ldr	r1, [r7, #24]
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e4      	bne.n	800a39c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f850 	bl	800a484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3e4:	e02a      	b.n	800a43c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00e      	beq.n	800a410 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d008      	beq.n	800a410 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d01c      	beq.n	800a440 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	4798      	blx	r3
    }
    return;
 800a40e:	e017      	b.n	800a440 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d012      	beq.n	800a442 <HAL_UART_IRQHandler+0x59e>
 800a41c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00c      	beq.n	800a442 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fe33 	bl	800b094 <UART_EndTransmit_IT>
    return;
 800a42e:	e008      	b.n	800a442 <HAL_UART_IRQHandler+0x59e>
      return;
 800a430:	bf00      	nop
 800a432:	e006      	b.n	800a442 <HAL_UART_IRQHandler+0x59e>
    return;
 800a434:	bf00      	nop
 800a436:	e004      	b.n	800a442 <HAL_UART_IRQHandler+0x59e>
      return;
 800a438:	bf00      	nop
 800a43a:	e002      	b.n	800a442 <HAL_UART_IRQHandler+0x59e>
      return;
 800a43c:	bf00      	nop
 800a43e:	e000      	b.n	800a442 <HAL_UART_IRQHandler+0x59e>
    return;
 800a440:	bf00      	nop
  }

}
 800a442:	37e8      	adds	r7, #232	@ 0xe8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	69db      	ldr	r3, [r3, #28]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	4ba6      	ldr	r3, [pc, #664]	@ (800a760 <UART_SetConfig+0x2c4>)
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6812      	ldr	r2, [r2, #0]
 800a4ce:	6979      	ldr	r1, [r7, #20]
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a1b      	ldr	r3, [r3, #32]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a94      	ldr	r2, [pc, #592]	@ (800a764 <UART_SetConfig+0x2c8>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d120      	bne.n	800a55a <UART_SetConfig+0xbe>
 800a518:	4b93      	ldr	r3, [pc, #588]	@ (800a768 <UART_SetConfig+0x2cc>)
 800a51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a51e:	f003 0303 	and.w	r3, r3, #3
 800a522:	2b03      	cmp	r3, #3
 800a524:	d816      	bhi.n	800a554 <UART_SetConfig+0xb8>
 800a526:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <UART_SetConfig+0x90>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a53d 	.word	0x0800a53d
 800a530:	0800a549 	.word	0x0800a549
 800a534:	0800a543 	.word	0x0800a543
 800a538:	0800a54f 	.word	0x0800a54f
 800a53c:	2301      	movs	r3, #1
 800a53e:	77fb      	strb	r3, [r7, #31]
 800a540:	e150      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a542:	2302      	movs	r3, #2
 800a544:	77fb      	strb	r3, [r7, #31]
 800a546:	e14d      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a548:	2304      	movs	r3, #4
 800a54a:	77fb      	strb	r3, [r7, #31]
 800a54c:	e14a      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a54e:	2308      	movs	r3, #8
 800a550:	77fb      	strb	r3, [r7, #31]
 800a552:	e147      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a554:	2310      	movs	r3, #16
 800a556:	77fb      	strb	r3, [r7, #31]
 800a558:	e144      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a83      	ldr	r2, [pc, #524]	@ (800a76c <UART_SetConfig+0x2d0>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d132      	bne.n	800a5ca <UART_SetConfig+0x12e>
 800a564:	4b80      	ldr	r3, [pc, #512]	@ (800a768 <UART_SetConfig+0x2cc>)
 800a566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a56a:	f003 030c 	and.w	r3, r3, #12
 800a56e:	2b0c      	cmp	r3, #12
 800a570:	d828      	bhi.n	800a5c4 <UART_SetConfig+0x128>
 800a572:	a201      	add	r2, pc, #4	@ (adr r2, 800a578 <UART_SetConfig+0xdc>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a5ad 	.word	0x0800a5ad
 800a57c:	0800a5c5 	.word	0x0800a5c5
 800a580:	0800a5c5 	.word	0x0800a5c5
 800a584:	0800a5c5 	.word	0x0800a5c5
 800a588:	0800a5b9 	.word	0x0800a5b9
 800a58c:	0800a5c5 	.word	0x0800a5c5
 800a590:	0800a5c5 	.word	0x0800a5c5
 800a594:	0800a5c5 	.word	0x0800a5c5
 800a598:	0800a5b3 	.word	0x0800a5b3
 800a59c:	0800a5c5 	.word	0x0800a5c5
 800a5a0:	0800a5c5 	.word	0x0800a5c5
 800a5a4:	0800a5c5 	.word	0x0800a5c5
 800a5a8:	0800a5bf 	.word	0x0800a5bf
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	77fb      	strb	r3, [r7, #31]
 800a5b0:	e118      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	77fb      	strb	r3, [r7, #31]
 800a5b6:	e115      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	77fb      	strb	r3, [r7, #31]
 800a5bc:	e112      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a5be:	2308      	movs	r3, #8
 800a5c0:	77fb      	strb	r3, [r7, #31]
 800a5c2:	e10f      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	77fb      	strb	r3, [r7, #31]
 800a5c8:	e10c      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a68      	ldr	r2, [pc, #416]	@ (800a770 <UART_SetConfig+0x2d4>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d120      	bne.n	800a616 <UART_SetConfig+0x17a>
 800a5d4:	4b64      	ldr	r3, [pc, #400]	@ (800a768 <UART_SetConfig+0x2cc>)
 800a5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a5de:	2b30      	cmp	r3, #48	@ 0x30
 800a5e0:	d013      	beq.n	800a60a <UART_SetConfig+0x16e>
 800a5e2:	2b30      	cmp	r3, #48	@ 0x30
 800a5e4:	d814      	bhi.n	800a610 <UART_SetConfig+0x174>
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d009      	beq.n	800a5fe <UART_SetConfig+0x162>
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	d810      	bhi.n	800a610 <UART_SetConfig+0x174>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <UART_SetConfig+0x15c>
 800a5f2:	2b10      	cmp	r3, #16
 800a5f4:	d006      	beq.n	800a604 <UART_SetConfig+0x168>
 800a5f6:	e00b      	b.n	800a610 <UART_SetConfig+0x174>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	77fb      	strb	r3, [r7, #31]
 800a5fc:	e0f2      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a5fe:	2302      	movs	r3, #2
 800a600:	77fb      	strb	r3, [r7, #31]
 800a602:	e0ef      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a604:	2304      	movs	r3, #4
 800a606:	77fb      	strb	r3, [r7, #31]
 800a608:	e0ec      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a60a:	2308      	movs	r3, #8
 800a60c:	77fb      	strb	r3, [r7, #31]
 800a60e:	e0e9      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a610:	2310      	movs	r3, #16
 800a612:	77fb      	strb	r3, [r7, #31]
 800a614:	e0e6      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a56      	ldr	r2, [pc, #344]	@ (800a774 <UART_SetConfig+0x2d8>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d120      	bne.n	800a662 <UART_SetConfig+0x1c6>
 800a620:	4b51      	ldr	r3, [pc, #324]	@ (800a768 <UART_SetConfig+0x2cc>)
 800a622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a626:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a62a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a62c:	d013      	beq.n	800a656 <UART_SetConfig+0x1ba>
 800a62e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a630:	d814      	bhi.n	800a65c <UART_SetConfig+0x1c0>
 800a632:	2b80      	cmp	r3, #128	@ 0x80
 800a634:	d009      	beq.n	800a64a <UART_SetConfig+0x1ae>
 800a636:	2b80      	cmp	r3, #128	@ 0x80
 800a638:	d810      	bhi.n	800a65c <UART_SetConfig+0x1c0>
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d002      	beq.n	800a644 <UART_SetConfig+0x1a8>
 800a63e:	2b40      	cmp	r3, #64	@ 0x40
 800a640:	d006      	beq.n	800a650 <UART_SetConfig+0x1b4>
 800a642:	e00b      	b.n	800a65c <UART_SetConfig+0x1c0>
 800a644:	2300      	movs	r3, #0
 800a646:	77fb      	strb	r3, [r7, #31]
 800a648:	e0cc      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a64a:	2302      	movs	r3, #2
 800a64c:	77fb      	strb	r3, [r7, #31]
 800a64e:	e0c9      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a650:	2304      	movs	r3, #4
 800a652:	77fb      	strb	r3, [r7, #31]
 800a654:	e0c6      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a656:	2308      	movs	r3, #8
 800a658:	77fb      	strb	r3, [r7, #31]
 800a65a:	e0c3      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a65c:	2310      	movs	r3, #16
 800a65e:	77fb      	strb	r3, [r7, #31]
 800a660:	e0c0      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a44      	ldr	r2, [pc, #272]	@ (800a778 <UART_SetConfig+0x2dc>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d125      	bne.n	800a6b8 <UART_SetConfig+0x21c>
 800a66c:	4b3e      	ldr	r3, [pc, #248]	@ (800a768 <UART_SetConfig+0x2cc>)
 800a66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a676:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a67a:	d017      	beq.n	800a6ac <UART_SetConfig+0x210>
 800a67c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a680:	d817      	bhi.n	800a6b2 <UART_SetConfig+0x216>
 800a682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a686:	d00b      	beq.n	800a6a0 <UART_SetConfig+0x204>
 800a688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a68c:	d811      	bhi.n	800a6b2 <UART_SetConfig+0x216>
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <UART_SetConfig+0x1fe>
 800a692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a696:	d006      	beq.n	800a6a6 <UART_SetConfig+0x20a>
 800a698:	e00b      	b.n	800a6b2 <UART_SetConfig+0x216>
 800a69a:	2300      	movs	r3, #0
 800a69c:	77fb      	strb	r3, [r7, #31]
 800a69e:	e0a1      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	77fb      	strb	r3, [r7, #31]
 800a6a4:	e09e      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a6a6:	2304      	movs	r3, #4
 800a6a8:	77fb      	strb	r3, [r7, #31]
 800a6aa:	e09b      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	77fb      	strb	r3, [r7, #31]
 800a6b0:	e098      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a6b2:	2310      	movs	r3, #16
 800a6b4:	77fb      	strb	r3, [r7, #31]
 800a6b6:	e095      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a2f      	ldr	r2, [pc, #188]	@ (800a77c <UART_SetConfig+0x2e0>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d125      	bne.n	800a70e <UART_SetConfig+0x272>
 800a6c2:	4b29      	ldr	r3, [pc, #164]	@ (800a768 <UART_SetConfig+0x2cc>)
 800a6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a6cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6d0:	d017      	beq.n	800a702 <UART_SetConfig+0x266>
 800a6d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6d6:	d817      	bhi.n	800a708 <UART_SetConfig+0x26c>
 800a6d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6dc:	d00b      	beq.n	800a6f6 <UART_SetConfig+0x25a>
 800a6de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6e2:	d811      	bhi.n	800a708 <UART_SetConfig+0x26c>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <UART_SetConfig+0x254>
 800a6e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ec:	d006      	beq.n	800a6fc <UART_SetConfig+0x260>
 800a6ee:	e00b      	b.n	800a708 <UART_SetConfig+0x26c>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	77fb      	strb	r3, [r7, #31]
 800a6f4:	e076      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	77fb      	strb	r3, [r7, #31]
 800a6fa:	e073      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a6fc:	2304      	movs	r3, #4
 800a6fe:	77fb      	strb	r3, [r7, #31]
 800a700:	e070      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a702:	2308      	movs	r3, #8
 800a704:	77fb      	strb	r3, [r7, #31]
 800a706:	e06d      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a708:	2310      	movs	r3, #16
 800a70a:	77fb      	strb	r3, [r7, #31]
 800a70c:	e06a      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a1b      	ldr	r2, [pc, #108]	@ (800a780 <UART_SetConfig+0x2e4>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d138      	bne.n	800a78a <UART_SetConfig+0x2ee>
 800a718:	4b13      	ldr	r3, [pc, #76]	@ (800a768 <UART_SetConfig+0x2cc>)
 800a71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a71e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a722:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a726:	d017      	beq.n	800a758 <UART_SetConfig+0x2bc>
 800a728:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a72c:	d82a      	bhi.n	800a784 <UART_SetConfig+0x2e8>
 800a72e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a732:	d00b      	beq.n	800a74c <UART_SetConfig+0x2b0>
 800a734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a738:	d824      	bhi.n	800a784 <UART_SetConfig+0x2e8>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <UART_SetConfig+0x2aa>
 800a73e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a742:	d006      	beq.n	800a752 <UART_SetConfig+0x2b6>
 800a744:	e01e      	b.n	800a784 <UART_SetConfig+0x2e8>
 800a746:	2300      	movs	r3, #0
 800a748:	77fb      	strb	r3, [r7, #31]
 800a74a:	e04b      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a74c:	2302      	movs	r3, #2
 800a74e:	77fb      	strb	r3, [r7, #31]
 800a750:	e048      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a752:	2304      	movs	r3, #4
 800a754:	77fb      	strb	r3, [r7, #31]
 800a756:	e045      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a758:	2308      	movs	r3, #8
 800a75a:	77fb      	strb	r3, [r7, #31]
 800a75c:	e042      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a75e:	bf00      	nop
 800a760:	efff69f3 	.word	0xefff69f3
 800a764:	40011000 	.word	0x40011000
 800a768:	40023800 	.word	0x40023800
 800a76c:	40004400 	.word	0x40004400
 800a770:	40004800 	.word	0x40004800
 800a774:	40004c00 	.word	0x40004c00
 800a778:	40005000 	.word	0x40005000
 800a77c:	40011400 	.word	0x40011400
 800a780:	40007800 	.word	0x40007800
 800a784:	2310      	movs	r3, #16
 800a786:	77fb      	strb	r3, [r7, #31]
 800a788:	e02c      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a72      	ldr	r2, [pc, #456]	@ (800a958 <UART_SetConfig+0x4bc>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d125      	bne.n	800a7e0 <UART_SetConfig+0x344>
 800a794:	4b71      	ldr	r3, [pc, #452]	@ (800a95c <UART_SetConfig+0x4c0>)
 800a796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a79a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a79e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a7a2:	d017      	beq.n	800a7d4 <UART_SetConfig+0x338>
 800a7a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a7a8:	d817      	bhi.n	800a7da <UART_SetConfig+0x33e>
 800a7aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7ae:	d00b      	beq.n	800a7c8 <UART_SetConfig+0x32c>
 800a7b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7b4:	d811      	bhi.n	800a7da <UART_SetConfig+0x33e>
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <UART_SetConfig+0x326>
 800a7ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7be:	d006      	beq.n	800a7ce <UART_SetConfig+0x332>
 800a7c0:	e00b      	b.n	800a7da <UART_SetConfig+0x33e>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	77fb      	strb	r3, [r7, #31]
 800a7c6:	e00d      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	77fb      	strb	r3, [r7, #31]
 800a7cc:	e00a      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a7ce:	2304      	movs	r3, #4
 800a7d0:	77fb      	strb	r3, [r7, #31]
 800a7d2:	e007      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a7d4:	2308      	movs	r3, #8
 800a7d6:	77fb      	strb	r3, [r7, #31]
 800a7d8:	e004      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a7da:	2310      	movs	r3, #16
 800a7dc:	77fb      	strb	r3, [r7, #31]
 800a7de:	e001      	b.n	800a7e4 <UART_SetConfig+0x348>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7ec:	d15b      	bne.n	800a8a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a7ee:	7ffb      	ldrb	r3, [r7, #31]
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d828      	bhi.n	800a846 <UART_SetConfig+0x3aa>
 800a7f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7fc <UART_SetConfig+0x360>)
 800a7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fa:	bf00      	nop
 800a7fc:	0800a821 	.word	0x0800a821
 800a800:	0800a829 	.word	0x0800a829
 800a804:	0800a831 	.word	0x0800a831
 800a808:	0800a847 	.word	0x0800a847
 800a80c:	0800a837 	.word	0x0800a837
 800a810:	0800a847 	.word	0x0800a847
 800a814:	0800a847 	.word	0x0800a847
 800a818:	0800a847 	.word	0x0800a847
 800a81c:	0800a83f 	.word	0x0800a83f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a820:	f7fc fb34 	bl	8006e8c <HAL_RCC_GetPCLK1Freq>
 800a824:	61b8      	str	r0, [r7, #24]
        break;
 800a826:	e013      	b.n	800a850 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a828:	f7fc fb44 	bl	8006eb4 <HAL_RCC_GetPCLK2Freq>
 800a82c:	61b8      	str	r0, [r7, #24]
        break;
 800a82e:	e00f      	b.n	800a850 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a830:	4b4b      	ldr	r3, [pc, #300]	@ (800a960 <UART_SetConfig+0x4c4>)
 800a832:	61bb      	str	r3, [r7, #24]
        break;
 800a834:	e00c      	b.n	800a850 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a836:	f7fc fa17 	bl	8006c68 <HAL_RCC_GetSysClockFreq>
 800a83a:	61b8      	str	r0, [r7, #24]
        break;
 800a83c:	e008      	b.n	800a850 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a83e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a842:	61bb      	str	r3, [r7, #24]
        break;
 800a844:	e004      	b.n	800a850 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a846:	2300      	movs	r3, #0
 800a848:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	77bb      	strb	r3, [r7, #30]
        break;
 800a84e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d074      	beq.n	800a940 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	005a      	lsls	r2, r3, #1
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	085b      	lsrs	r3, r3, #1
 800a860:	441a      	add	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	fbb2 f3f3 	udiv	r3, r2, r3
 800a86a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	2b0f      	cmp	r3, #15
 800a870:	d916      	bls.n	800a8a0 <UART_SetConfig+0x404>
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a878:	d212      	bcs.n	800a8a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	f023 030f 	bic.w	r3, r3, #15
 800a882:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	085b      	lsrs	r3, r3, #1
 800a888:	b29b      	uxth	r3, r3
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	b29a      	uxth	r2, r3
 800a890:	89fb      	ldrh	r3, [r7, #14]
 800a892:	4313      	orrs	r3, r2
 800a894:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	89fa      	ldrh	r2, [r7, #14]
 800a89c:	60da      	str	r2, [r3, #12]
 800a89e:	e04f      	b.n	800a940 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	77bb      	strb	r3, [r7, #30]
 800a8a4:	e04c      	b.n	800a940 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8a6:	7ffb      	ldrb	r3, [r7, #31]
 800a8a8:	2b08      	cmp	r3, #8
 800a8aa:	d828      	bhi.n	800a8fe <UART_SetConfig+0x462>
 800a8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b4 <UART_SetConfig+0x418>)
 800a8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b2:	bf00      	nop
 800a8b4:	0800a8d9 	.word	0x0800a8d9
 800a8b8:	0800a8e1 	.word	0x0800a8e1
 800a8bc:	0800a8e9 	.word	0x0800a8e9
 800a8c0:	0800a8ff 	.word	0x0800a8ff
 800a8c4:	0800a8ef 	.word	0x0800a8ef
 800a8c8:	0800a8ff 	.word	0x0800a8ff
 800a8cc:	0800a8ff 	.word	0x0800a8ff
 800a8d0:	0800a8ff 	.word	0x0800a8ff
 800a8d4:	0800a8f7 	.word	0x0800a8f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8d8:	f7fc fad8 	bl	8006e8c <HAL_RCC_GetPCLK1Freq>
 800a8dc:	61b8      	str	r0, [r7, #24]
        break;
 800a8de:	e013      	b.n	800a908 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8e0:	f7fc fae8 	bl	8006eb4 <HAL_RCC_GetPCLK2Freq>
 800a8e4:	61b8      	str	r0, [r7, #24]
        break;
 800a8e6:	e00f      	b.n	800a908 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8e8:	4b1d      	ldr	r3, [pc, #116]	@ (800a960 <UART_SetConfig+0x4c4>)
 800a8ea:	61bb      	str	r3, [r7, #24]
        break;
 800a8ec:	e00c      	b.n	800a908 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8ee:	f7fc f9bb 	bl	8006c68 <HAL_RCC_GetSysClockFreq>
 800a8f2:	61b8      	str	r0, [r7, #24]
        break;
 800a8f4:	e008      	b.n	800a908 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8fa:	61bb      	str	r3, [r7, #24]
        break;
 800a8fc:	e004      	b.n	800a908 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a8fe:	2300      	movs	r3, #0
 800a900:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	77bb      	strb	r3, [r7, #30]
        break;
 800a906:	bf00      	nop
    }

    if (pclk != 0U)
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d018      	beq.n	800a940 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	085a      	lsrs	r2, r3, #1
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	441a      	add	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a920:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b0f      	cmp	r3, #15
 800a926:	d909      	bls.n	800a93c <UART_SetConfig+0x4a0>
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a92e:	d205      	bcs.n	800a93c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	b29a      	uxth	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60da      	str	r2, [r3, #12]
 800a93a:	e001      	b.n	800a940 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a94c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3720      	adds	r7, #32
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	40007c00 	.word	0x40007c00
 800a95c:	40023800 	.word	0x40023800
 800a960:	00f42400 	.word	0x00f42400

0800a964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a970:	f003 0308 	and.w	r3, r3, #8
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00a      	beq.n	800a98e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00a      	beq.n	800a9d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d6:	f003 0304 	and.w	r3, r3, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00a      	beq.n	800a9f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f8:	f003 0310 	and.w	r3, r3, #16
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00a      	beq.n	800aa16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1a:	f003 0320 	and.w	r3, r3, #32
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00a      	beq.n	800aa38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d01a      	beq.n	800aa7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	430a      	orrs	r2, r1
 800aa58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa62:	d10a      	bne.n	800aa7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	605a      	str	r2, [r3, #4]
  }
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08c      	sub	sp, #48	@ 0x30
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aab8:	f7fa f804 	bl	8004ac4 <HAL_GetTick>
 800aabc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0308 	and.w	r3, r3, #8
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d12e      	bne.n	800ab2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aacc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad4:	2200      	movs	r2, #0
 800aad6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f83b 	bl	800ab56 <UART_WaitOnFlagUntilTimeout>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d021      	beq.n	800ab2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	e853 3f00 	ldrex	r3, [r3]
 800aaf2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aafa:	623b      	str	r3, [r7, #32]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	461a      	mov	r2, r3
 800ab02:	6a3b      	ldr	r3, [r7, #32]
 800ab04:	61fb      	str	r3, [r7, #28]
 800ab06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab08:	69b9      	ldr	r1, [r7, #24]
 800ab0a:	69fa      	ldr	r2, [r7, #28]
 800ab0c:	e841 2300 	strex	r3, r2, [r1]
 800ab10:	617b      	str	r3, [r7, #20]
   return(result);
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1e6      	bne.n	800aae6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e011      	b.n	800ab4e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2220      	movs	r2, #32
 800ab34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3728      	adds	r7, #40	@ 0x28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	603b      	str	r3, [r7, #0]
 800ab62:	4613      	mov	r3, r2
 800ab64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab66:	e04f      	b.n	800ac08 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6e:	d04b      	beq.n	800ac08 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab70:	f7f9 ffa8 	bl	8004ac4 <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	69ba      	ldr	r2, [r7, #24]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d302      	bcc.n	800ab86 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e04e      	b.n	800ac28 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d037      	beq.n	800ac08 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b80      	cmp	r3, #128	@ 0x80
 800ab9c:	d034      	beq.n	800ac08 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b40      	cmp	r3, #64	@ 0x40
 800aba2:	d031      	beq.n	800ac08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d110      	bne.n	800abd4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2208      	movs	r2, #8
 800abb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f000 f8fe 	bl	800adbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2208      	movs	r2, #8
 800abc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e029      	b.n	800ac28 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abe2:	d111      	bne.n	800ac08 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 f8e4 	bl	800adbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2220      	movs	r2, #32
 800abf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e00f      	b.n	800ac28 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	69da      	ldr	r2, [r3, #28]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	4013      	ands	r3, r2
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	bf0c      	ite	eq
 800ac18:	2301      	moveq	r3, #1
 800ac1a:	2300      	movne	r3, #0
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	461a      	mov	r2, r3
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d0a0      	beq.n	800ab68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b096      	sub	sp, #88	@ 0x58
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	88fa      	ldrh	r2, [r7, #6]
 800ac48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2222      	movs	r2, #34	@ 0x22
 800ac58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d028      	beq.n	800acb6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac68:	4a3e      	ldr	r2, [pc, #248]	@ (800ad64 <UART_Start_Receive_DMA+0x134>)
 800ac6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac70:	4a3d      	ldr	r2, [pc, #244]	@ (800ad68 <UART_Start_Receive_DMA+0x138>)
 800ac72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac78:	4a3c      	ldr	r2, [pc, #240]	@ (800ad6c <UART_Start_Receive_DMA+0x13c>)
 800ac7a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac80:	2200      	movs	r2, #0
 800ac82:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3324      	adds	r3, #36	@ 0x24
 800ac8e:	4619      	mov	r1, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac94:	461a      	mov	r2, r3
 800ac96:	88fb      	ldrh	r3, [r7, #6]
 800ac98:	f7fa f904 	bl	8004ea4 <HAL_DMA_Start_IT>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d009      	beq.n	800acb6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2210      	movs	r2, #16
 800aca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2220      	movs	r2, #32
 800acae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e051      	b.n	800ad5a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d018      	beq.n	800acf0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acc6:	e853 3f00 	ldrex	r3, [r3]
 800acca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800accc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acd2:	657b      	str	r3, [r7, #84]	@ 0x54
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acde:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ace2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ace4:	e841 2300 	strex	r3, r2, [r1]
 800ace8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800acea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e6      	bne.n	800acbe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3308      	adds	r3, #8
 800acf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfa:	e853 3f00 	ldrex	r3, [r3]
 800acfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad02:	f043 0301 	orr.w	r3, r3, #1
 800ad06:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3308      	adds	r3, #8
 800ad0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad10:	637a      	str	r2, [r7, #52]	@ 0x34
 800ad12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad18:	e841 2300 	strex	r3, r2, [r1]
 800ad1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ad1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1e5      	bne.n	800acf0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3308      	adds	r3, #8
 800ad2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	613b      	str	r3, [r7, #16]
   return(result);
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3308      	adds	r3, #8
 800ad42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad44:	623a      	str	r2, [r7, #32]
 800ad46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	69f9      	ldr	r1, [r7, #28]
 800ad4a:	6a3a      	ldr	r2, [r7, #32]
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e5      	bne.n	800ad24 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3758      	adds	r7, #88	@ 0x58
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	0800ae85 	.word	0x0800ae85
 800ad68:	0800afad 	.word	0x0800afad
 800ad6c:	0800afeb 	.word	0x0800afeb

0800ad70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b089      	sub	sp, #36	@ 0x24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad8c:	61fb      	str	r3, [r7, #28]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	61bb      	str	r3, [r7, #24]
 800ad98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9a:	6979      	ldr	r1, [r7, #20]
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	613b      	str	r3, [r7, #16]
   return(result);
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e6      	bne.n	800ad78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2220      	movs	r2, #32
 800adae:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800adb0:	bf00      	nop
 800adb2:	3724      	adds	r7, #36	@ 0x24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b095      	sub	sp, #84	@ 0x54
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800add8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ade2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ade4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ade8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800adea:	e841 2300 	strex	r3, r2, [r1]
 800adee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e6      	bne.n	800adc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3308      	adds	r3, #8
 800adfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	f023 0301 	bic.w	r3, r3, #1
 800ae0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e5      	bne.n	800adf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d118      	bne.n	800ae64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f023 0310 	bic.w	r3, r3, #16
 800ae46:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae50:	61bb      	str	r3, [r7, #24]
 800ae52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6979      	ldr	r1, [r7, #20]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e6      	bne.n	800ae32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ae78:	bf00      	nop
 800ae7a:	3754      	adds	r7, #84	@ 0x54
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b09c      	sub	sp, #112	@ 0x70
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae90:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae9a:	d071      	beq.n	800af80 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ae9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeac:	e853 3f00 	ldrex	r3, [r3]
 800aeb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aeb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aeb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aeba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aec2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aec4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aec8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e6      	bne.n	800aea4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3308      	adds	r3, #8
 800aedc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aee8:	f023 0301 	bic.w	r3, r3, #1
 800aeec:	667b      	str	r3, [r7, #100]	@ 0x64
 800aeee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	3308      	adds	r3, #8
 800aef4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aef6:	647a      	str	r2, [r7, #68]	@ 0x44
 800aef8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aefc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aefe:	e841 2300 	strex	r3, r2, [r1]
 800af02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1e5      	bne.n	800aed6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3308      	adds	r3, #8
 800af10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	623b      	str	r3, [r7, #32]
   return(result);
 800af1a:	6a3b      	ldr	r3, [r7, #32]
 800af1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af20:	663b      	str	r3, [r7, #96]	@ 0x60
 800af22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3308      	adds	r3, #8
 800af28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af2a:	633a      	str	r2, [r7, #48]	@ 0x30
 800af2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af32:	e841 2300 	strex	r3, r2, [r1]
 800af36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1e5      	bne.n	800af0a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af40:	2220      	movs	r2, #32
 800af42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d118      	bne.n	800af80 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	e853 3f00 	ldrex	r3, [r3]
 800af5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f023 0310 	bic.w	r3, r3, #16
 800af62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	461a      	mov	r2, r3
 800af6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af6c:	61fb      	str	r3, [r7, #28]
 800af6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	69b9      	ldr	r1, [r7, #24]
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	e841 2300 	strex	r3, r2, [r1]
 800af78:	617b      	str	r3, [r7, #20]
   return(result);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1e6      	bne.n	800af4e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af82:	2200      	movs	r2, #0
 800af84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d107      	bne.n	800af9e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800af94:	4619      	mov	r1, r3
 800af96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af98:	f7ff fa74 	bl	800a484 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af9c:	e002      	b.n	800afa4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800af9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800afa0:	f7f6 fa60 	bl	8001464 <HAL_UART_RxCpltCallback>
}
 800afa4:	bf00      	nop
 800afa6:	3770      	adds	r7, #112	@ 0x70
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2201      	movs	r2, #1
 800afbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d109      	bne.n	800afdc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800afce:	085b      	lsrs	r3, r3, #1
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	4619      	mov	r1, r3
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff fa55 	bl	800a484 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afda:	e002      	b.n	800afe2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f7ff fa3d 	bl	800a45c <HAL_UART_RxHalfCpltCallback>
}
 800afe2:	bf00      	nop
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b086      	sub	sp, #24
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800affc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b004:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b010:	2b80      	cmp	r3, #128	@ 0x80
 800b012:	d109      	bne.n	800b028 <UART_DMAError+0x3e>
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2b21      	cmp	r3, #33	@ 0x21
 800b018:	d106      	bne.n	800b028 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b022:	6978      	ldr	r0, [r7, #20]
 800b024:	f7ff fea4 	bl	800ad70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b032:	2b40      	cmp	r3, #64	@ 0x40
 800b034:	d109      	bne.n	800b04a <UART_DMAError+0x60>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b22      	cmp	r3, #34	@ 0x22
 800b03a:	d106      	bne.n	800b04a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2200      	movs	r2, #0
 800b040:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b044:	6978      	ldr	r0, [r7, #20]
 800b046:	f7ff feb9 	bl	800adbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b050:	f043 0210 	orr.w	r2, r3, #16
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b05a:	6978      	ldr	r0, [r7, #20]
 800b05c:	f7ff fa08 	bl	800a470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b060:	bf00      	nop
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7ff f9f2 	bl	800a470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	e853 3f00 	ldrex	r3, [r3]
 800b0a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0b0:	61fb      	str	r3, [r7, #28]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	61bb      	str	r3, [r7, #24]
 800b0bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6979      	ldr	r1, [r7, #20]
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e6      	bne.n	800b09c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff f9b4 	bl	800a448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0e0:	bf00      	nop
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	f107 001c 	add.w	r0, r7, #28
 800b0f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d121      	bne.n	800b146 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b106:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68da      	ldr	r2, [r3, #12]
 800b112:	4b21      	ldr	r3, [pc, #132]	@ (800b198 <USB_CoreInit+0xb0>)
 800b114:	4013      	ands	r3, r2
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b126:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d105      	bne.n	800b13a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fa92 	bl	800b664 <USB_CoreReset>
 800b140:	4603      	mov	r3, r0
 800b142:	73fb      	strb	r3, [r7, #15]
 800b144:	e010      	b.n	800b168 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa86 	bl	800b664 <USB_CoreReset>
 800b158:	4603      	mov	r3, r0
 800b15a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b160:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800b168:	7fbb      	ldrb	r3, [r7, #30]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d10b      	bne.n	800b186 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	f043 0206 	orr.w	r2, r3, #6
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f043 0220 	orr.w	r2, r3, #32
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b186:	7bfb      	ldrb	r3, [r7, #15]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b192:	b004      	add	sp, #16
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	ffbdffbf 	.word	0xffbdffbf

0800b19c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	f023 0201 	bic.w	r2, r3, #1
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b1da:	78fb      	ldrb	r3, [r7, #3]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d115      	bne.n	800b20c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b1ec:	200a      	movs	r0, #10
 800b1ee:	f7f9 fc75 	bl	8004adc <HAL_Delay>
      ms += 10U;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	330a      	adds	r3, #10
 800b1f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fa25 	bl	800b648 <USB_GetMode>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d01e      	beq.n	800b242 <USB_SetCurrentMode+0x84>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2bc7      	cmp	r3, #199	@ 0xc7
 800b208:	d9f0      	bls.n	800b1ec <USB_SetCurrentMode+0x2e>
 800b20a:	e01a      	b.n	800b242 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d115      	bne.n	800b23e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b21e:	200a      	movs	r0, #10
 800b220:	f7f9 fc5c 	bl	8004adc <HAL_Delay>
      ms += 10U;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	330a      	adds	r3, #10
 800b228:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fa0c 	bl	800b648 <USB_GetMode>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d005      	beq.n	800b242 <USB_SetCurrentMode+0x84>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2bc7      	cmp	r3, #199	@ 0xc7
 800b23a:	d9f0      	bls.n	800b21e <USB_SetCurrentMode+0x60>
 800b23c:	e001      	b.n	800b242 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e005      	b.n	800b24e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2bc8      	cmp	r3, #200	@ 0xc8
 800b246:	d101      	bne.n	800b24c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e000      	b.n	800b24e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
	...

0800b258 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b258:	b084      	sub	sp, #16
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b086      	sub	sp, #24
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b272:	2300      	movs	r3, #0
 800b274:	613b      	str	r3, [r7, #16]
 800b276:	e009      	b.n	800b28c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	3340      	adds	r3, #64	@ 0x40
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	2200      	movs	r2, #0
 800b284:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	3301      	adds	r3, #1
 800b28a:	613b      	str	r3, [r7, #16]
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	2b0e      	cmp	r3, #14
 800b290:	d9f2      	bls.n	800b278 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b292:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b296:	2b00      	cmp	r3, #0
 800b298:	d11c      	bne.n	800b2d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2a8:	f043 0302 	orr.w	r3, r3, #2
 800b2ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	e005      	b.n	800b2e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d10d      	bne.n	800b310 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d104      	bne.n	800b306 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f968 	bl	800b5d4 <USB_SetDevSpeed>
 800b304:	e008      	b.n	800b318 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b306:	2101      	movs	r1, #1
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f963 	bl	800b5d4 <USB_SetDevSpeed>
 800b30e:	e003      	b.n	800b318 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b310:	2103      	movs	r1, #3
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f95e 	bl	800b5d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b318:	2110      	movs	r1, #16
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f8fa 	bl	800b514 <USB_FlushTxFifo>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f924 	bl	800b578 <USB_FlushRxFifo>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b340:	461a      	mov	r2, r3
 800b342:	2300      	movs	r3, #0
 800b344:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b34c:	461a      	mov	r2, r3
 800b34e:	2300      	movs	r3, #0
 800b350:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b358:	461a      	mov	r2, r3
 800b35a:	2300      	movs	r3, #0
 800b35c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b35e:	2300      	movs	r3, #0
 800b360:	613b      	str	r3, [r7, #16]
 800b362:	e043      	b.n	800b3ec <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b37a:	d118      	bne.n	800b3ae <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b38e:	461a      	mov	r2, r3
 800b390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	e013      	b.n	800b3c0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	e008      	b.n	800b3c0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	2300      	movs	r3, #0
 800b3be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	015a      	lsls	r2, r3, #5
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	613b      	str	r3, [r7, #16]
 800b3ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d3b5      	bcc.n	800b364 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	613b      	str	r3, [r7, #16]
 800b3fc:	e043      	b.n	800b486 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	4413      	add	r3, r2
 800b406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b414:	d118      	bne.n	800b448 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10a      	bne.n	800b432 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b428:	461a      	mov	r2, r3
 800b42a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	e013      	b.n	800b45a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b43e:	461a      	mov	r2, r3
 800b440:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	e008      	b.n	800b45a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b454:	461a      	mov	r2, r3
 800b456:	2300      	movs	r3, #0
 800b458:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	015a      	lsls	r2, r3, #5
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	4413      	add	r3, r2
 800b462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b466:	461a      	mov	r2, r3
 800b468:	2300      	movs	r3, #0
 800b46a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	015a      	lsls	r2, r3, #5
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4413      	add	r3, r2
 800b474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b478:	461a      	mov	r2, r3
 800b47a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b47e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	3301      	adds	r3, #1
 800b484:	613b      	str	r3, [r7, #16]
 800b486:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b48a:	461a      	mov	r2, r3
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	4293      	cmp	r3, r2
 800b490:	d3b5      	bcc.n	800b3fe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b4b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d105      	bne.n	800b4c8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	f043 0210 	orr.w	r2, r3, #16
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	699a      	ldr	r2, [r3, #24]
 800b4cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b50c <USB_DevInit+0x2b4>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b4d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d005      	beq.n	800b4e8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	f043 0208 	orr.w	r2, r3, #8
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b4e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d105      	bne.n	800b4fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	699a      	ldr	r2, [r3, #24]
 800b4f4:	4b06      	ldr	r3, [pc, #24]	@ (800b510 <USB_DevInit+0x2b8>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b508:	b004      	add	sp, #16
 800b50a:	4770      	bx	lr
 800b50c:	803c3800 	.word	0x803c3800
 800b510:	40000004 	.word	0x40000004

0800b514 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b51e:	2300      	movs	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	3301      	adds	r3, #1
 800b526:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b52e:	d901      	bls.n	800b534 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	e01b      	b.n	800b56c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	daf2      	bge.n	800b522 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	019b      	lsls	r3, r3, #6
 800b544:	f043 0220 	orr.w	r2, r3, #32
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3301      	adds	r3, #1
 800b550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b558:	d901      	bls.n	800b55e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e006      	b.n	800b56c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	f003 0320 	and.w	r3, r3, #32
 800b566:	2b20      	cmp	r3, #32
 800b568:	d0f0      	beq.n	800b54c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	3301      	adds	r3, #1
 800b588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b590:	d901      	bls.n	800b596 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e018      	b.n	800b5c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	daf2      	bge.n	800b584 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2210      	movs	r2, #16
 800b5a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5b4:	d901      	bls.n	800b5ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e006      	b.n	800b5c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0310 	and.w	r3, r3, #16
 800b5c2:	2b10      	cmp	r3, #16
 800b5c4:	d0f0      	beq.n	800b5a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	68f9      	ldr	r1, [r7, #12]
 800b5f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b606:	b480      	push	{r7}
 800b608:	b085      	sub	sp, #20
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b620:	f023 0303 	bic.w	r3, r3, #3
 800b624:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b634:	f043 0302 	orr.w	r3, r3, #2
 800b638:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	f003 0301 	and.w	r3, r3, #1
}
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b66c:	2300      	movs	r3, #0
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3301      	adds	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b67c:	d901      	bls.n	800b682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e01b      	b.n	800b6ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	daf2      	bge.n	800b670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	f043 0201 	orr.w	r2, r3, #1
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3301      	adds	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6a6:	d901      	bls.n	800b6ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e006      	b.n	800b6ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d0f0      	beq.n	800b69a <USB_CoreReset+0x36>

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
	...

0800b6c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b6cc:	4904      	ldr	r1, [pc, #16]	@ (800b6e0 <MX_FATFS_Init+0x18>)
 800b6ce:	4805      	ldr	r0, [pc, #20]	@ (800b6e4 <MX_FATFS_Init+0x1c>)
 800b6d0:	f003 faa0 	bl	800ec14 <FATFS_LinkDriver>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	4b03      	ldr	r3, [pc, #12]	@ (800b6e8 <MX_FATFS_Init+0x20>)
 800b6da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b6dc:	bf00      	nop
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	20002678 	.word	0x20002678
 800b6e4:	20000058 	.word	0x20000058
 800b6e8:	20002674 	.word	0x20002674

0800b6ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b6f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 f9d7 	bl	800babc <USER_SPI_initialize>
 800b70e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	4618      	mov	r0, r3
 800b726:	f000 fabd 	bl	800bca4 <USER_SPI_status>
 800b72a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60b9      	str	r1, [r7, #8]
 800b73c:	607a      	str	r2, [r7, #4]
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	4603      	mov	r3, r0
 800b742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800b744:	7bf8      	ldrb	r0, [r7, #15]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	68b9      	ldr	r1, [r7, #8]
 800b74c:	f000 fac0 	bl	800bcd0 <USER_SPI_read>
 800b750:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b084      	sub	sp, #16
 800b75e:	af00      	add	r7, sp, #0
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	603b      	str	r3, [r7, #0]
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800b76a:	7bf8      	ldrb	r0, [r7, #15]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	68b9      	ldr	r1, [r7, #8]
 800b772:	f000 fb13 	bl	800bd9c <USER_SPI_write>
 800b776:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	603a      	str	r2, [r7, #0]
 800b78a:	71fb      	strb	r3, [r7, #7]
 800b78c:	460b      	mov	r3, r1
 800b78e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800b790:	79b9      	ldrb	r1, [r7, #6]
 800b792:	79fb      	ldrb	r3, [r7, #7]
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fb7c 	bl	800be94 <USER_SPI_ioctl>
 800b79c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b7b0:	f7f9 f988 	bl	8004ac4 <HAL_GetTick>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	4a04      	ldr	r2, [pc, #16]	@ (800b7c8 <SPI_Timer_On+0x20>)
 800b7b8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b7ba:	4a04      	ldr	r2, [pc, #16]	@ (800b7cc <SPI_Timer_On+0x24>)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6013      	str	r3, [r2, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	20002680 	.word	0x20002680
 800b7cc:	20002684 	.word	0x20002684

0800b7d0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b7d4:	f7f9 f976 	bl	8004ac4 <HAL_GetTick>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	4b06      	ldr	r3, [pc, #24]	@ (800b7f4 <SPI_Timer_Status+0x24>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	1ad2      	subs	r2, r2, r3
 800b7e0:	4b05      	ldr	r3, [pc, #20]	@ (800b7f8 <SPI_Timer_Status+0x28>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	bf34      	ite	cc
 800b7e8:	2301      	movcc	r3, #1
 800b7ea:	2300      	movcs	r3, #0
 800b7ec:	b2db      	uxtb	r3, r3
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20002680 	.word	0x20002680
 800b7f8:	20002684 	.word	0x20002684

0800b7fc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af02      	add	r7, sp, #8
 800b802:	4603      	mov	r3, r0
 800b804:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800b806:	f107 020f 	add.w	r2, r7, #15
 800b80a:	1df9      	adds	r1, r7, #7
 800b80c:	2332      	movs	r3, #50	@ 0x32
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	2301      	movs	r3, #1
 800b812:	4804      	ldr	r0, [pc, #16]	@ (800b824 <xchg_spi+0x28>)
 800b814:	f7fc f972 	bl	8007afc <HAL_SPI_TransmitReceive>
    return rxDat;
 800b818:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20001b68 	.word	0x20001b68

0800b828 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b828:	b590      	push	{r4, r7, lr}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b832:	2300      	movs	r3, #0
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	e00a      	b.n	800b84e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	18d4      	adds	r4, r2, r3
 800b83e:	20ff      	movs	r0, #255	@ 0xff
 800b840:	f7ff ffdc 	bl	800b7fc <xchg_spi>
 800b844:	4603      	mov	r3, r0
 800b846:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3301      	adds	r3, #1
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	429a      	cmp	r2, r3
 800b854:	d3f0      	bcc.n	800b838 <rcvr_spi_multi+0x10>
	}
}
 800b856:	bf00      	nop
 800b858:	bf00      	nop
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd90      	pop	{r4, r7, pc}

0800b860 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	f04f 33ff 	mov.w	r3, #4294967295
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	4803      	ldr	r0, [pc, #12]	@ (800b884 <xmit_spi_multi+0x24>)
 800b876:	f7fb ffcc 	bl	8007812 <HAL_SPI_Transmit>
}
 800b87a:	bf00      	nop
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20001b68 	.word	0x20001b68

0800b888 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b890:	f7f9 f918 	bl	8004ac4 <HAL_GetTick>
 800b894:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b89a:	20ff      	movs	r0, #255	@ 0xff
 800b89c:	f7ff ffae 	bl	800b7fc <xchg_spi>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
 800b8a6:	2bff      	cmp	r3, #255	@ 0xff
 800b8a8:	d007      	beq.n	800b8ba <wait_ready+0x32>
 800b8aa:	f7f9 f90b 	bl	8004ac4 <HAL_GetTick>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d8ef      	bhi.n	800b89a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	2bff      	cmp	r3, #255	@ 0xff
 800b8be:	bf0c      	ite	eq
 800b8c0:	2301      	moveq	r3, #1
 800b8c2:	2300      	movne	r3, #0
 800b8c4:	b2db      	uxtb	r3, r3
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
	...

0800b8d0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b8da:	4804      	ldr	r0, [pc, #16]	@ (800b8ec <despiselect+0x1c>)
 800b8dc:	f7fa f802 	bl	80058e4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b8e0:	20ff      	movs	r0, #255	@ 0xff
 800b8e2:	f7ff ff8b 	bl	800b7fc <xchg_spi>

}
 800b8e6:	bf00      	nop
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	40020c00 	.word	0x40020c00

0800b8f0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b8fa:	480a      	ldr	r0, [pc, #40]	@ (800b924 <spiselect+0x34>)
 800b8fc:	f7f9 fff2 	bl	80058e4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b900:	20ff      	movs	r0, #255	@ 0xff
 800b902:	f7ff ff7b 	bl	800b7fc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b906:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b90a:	f7ff ffbd 	bl	800b888 <wait_ready>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <spiselect+0x28>
 800b914:	2301      	movs	r3, #1
 800b916:	e002      	b.n	800b91e <spiselect+0x2e>

	despiselect();
 800b918:	f7ff ffda 	bl	800b8d0 <despiselect>
	return 0;	/* Timeout */
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	40020c00 	.word	0x40020c00

0800b928 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b932:	20c8      	movs	r0, #200	@ 0xc8
 800b934:	f7ff ff38 	bl	800b7a8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b938:	20ff      	movs	r0, #255	@ 0xff
 800b93a:	f7ff ff5f 	bl	800b7fc <xchg_spi>
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	2bff      	cmp	r3, #255	@ 0xff
 800b946:	d104      	bne.n	800b952 <rcvr_datablock+0x2a>
 800b948:	f7ff ff42 	bl	800b7d0 <SPI_Timer_Status>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1f2      	bne.n	800b938 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b952:	7bfb      	ldrb	r3, [r7, #15]
 800b954:	2bfe      	cmp	r3, #254	@ 0xfe
 800b956:	d001      	beq.n	800b95c <rcvr_datablock+0x34>
 800b958:	2300      	movs	r3, #0
 800b95a:	e00a      	b.n	800b972 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff ff62 	bl	800b828 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b964:	20ff      	movs	r0, #255	@ 0xff
 800b966:	f7ff ff49 	bl	800b7fc <xchg_spi>
 800b96a:	20ff      	movs	r0, #255	@ 0xff
 800b96c:	f7ff ff46 	bl	800b7fc <xchg_spi>

	return 1;						/* Function succeeded */
 800b970:	2301      	movs	r3, #1
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b986:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b98a:	f7ff ff7d 	bl	800b888 <wait_ready>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <xmit_datablock+0x1e>
 800b994:	2300      	movs	r3, #0
 800b996:	e01e      	b.n	800b9d6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff ff2e 	bl	800b7fc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b9a0:	78fb      	ldrb	r3, [r7, #3]
 800b9a2:	2bfd      	cmp	r3, #253	@ 0xfd
 800b9a4:	d016      	beq.n	800b9d4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b9a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff ff58 	bl	800b860 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b9b0:	20ff      	movs	r0, #255	@ 0xff
 800b9b2:	f7ff ff23 	bl	800b7fc <xchg_spi>
 800b9b6:	20ff      	movs	r0, #255	@ 0xff
 800b9b8:	f7ff ff20 	bl	800b7fc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b9bc:	20ff      	movs	r0, #255	@ 0xff
 800b9be:	f7ff ff1d 	bl	800b7fc <xchg_spi>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	f003 031f 	and.w	r3, r3, #31
 800b9cc:	2b05      	cmp	r3, #5
 800b9ce:	d001      	beq.n	800b9d4 <xmit_datablock+0x5a>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	e000      	b.n	800b9d6 <xmit_datablock+0x5c>
	}
	return 1;
 800b9d4:	2301      	movs	r3, #1
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	6039      	str	r1, [r7, #0]
 800b9e8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b9ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	da0e      	bge.n	800ba10 <send_cmd+0x32>
		cmd &= 0x7F;
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9f8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	2037      	movs	r0, #55	@ 0x37
 800b9fe:	f7ff ffee 	bl	800b9de <send_cmd>
 800ba02:	4603      	mov	r3, r0
 800ba04:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800ba06:	7bbb      	ldrb	r3, [r7, #14]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d901      	bls.n	800ba10 <send_cmd+0x32>
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	e051      	b.n	800bab4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800ba10:	79fb      	ldrb	r3, [r7, #7]
 800ba12:	2b0c      	cmp	r3, #12
 800ba14:	d008      	beq.n	800ba28 <send_cmd+0x4a>
		despiselect();
 800ba16:	f7ff ff5b 	bl	800b8d0 <despiselect>
		if (!spiselect()) return 0xFF;
 800ba1a:	f7ff ff69 	bl	800b8f0 <spiselect>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <send_cmd+0x4a>
 800ba24:	23ff      	movs	r3, #255	@ 0xff
 800ba26:	e045      	b.n	800bab4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800ba28:	79fb      	ldrb	r3, [r7, #7]
 800ba2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff fee3 	bl	800b7fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	0e1b      	lsrs	r3, r3, #24
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff fedd 	bl	800b7fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	0c1b      	lsrs	r3, r3, #16
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7ff fed7 	bl	800b7fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	0a1b      	lsrs	r3, r3, #8
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7ff fed1 	bl	800b7fc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7ff fecc 	bl	800b7fc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ba64:	2301      	movs	r3, #1
 800ba66:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d101      	bne.n	800ba72 <send_cmd+0x94>
 800ba6e:	2395      	movs	r3, #149	@ 0x95
 800ba70:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	2b08      	cmp	r3, #8
 800ba76:	d101      	bne.n	800ba7c <send_cmd+0x9e>
 800ba78:	2387      	movs	r3, #135	@ 0x87
 800ba7a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff febc 	bl	800b7fc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	2b0c      	cmp	r3, #12
 800ba88:	d102      	bne.n	800ba90 <send_cmd+0xb2>
 800ba8a:	20ff      	movs	r0, #255	@ 0xff
 800ba8c:	f7ff feb6 	bl	800b7fc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800ba90:	230a      	movs	r3, #10
 800ba92:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800ba94:	20ff      	movs	r0, #255	@ 0xff
 800ba96:	f7ff feb1 	bl	800b7fc <xchg_spi>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800ba9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	da05      	bge.n	800bab2 <send_cmd+0xd4>
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	73fb      	strb	r3, [r7, #15]
 800baac:	7bfb      	ldrb	r3, [r7, #15]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1f0      	bne.n	800ba94 <send_cmd+0xb6>

	return res;							/* Return received response */
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800babc:	b590      	push	{r4, r7, lr}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <USER_SPI_initialize+0x14>
 800bacc:	2301      	movs	r3, #1
 800bace:	e0dc      	b.n	800bc8a <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800bad0:	4b70      	ldr	r3, [pc, #448]	@ (800bc94 <USER_SPI_initialize+0x1d8>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <USER_SPI_initialize+0x2a>
 800bade:	4b6d      	ldr	r3, [pc, #436]	@ (800bc94 <USER_SPI_initialize+0x1d8>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	e0d1      	b.n	800bc8a <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800bae6:	4b6b      	ldr	r3, [pc, #428]	@ (800bc94 <USER_SPI_initialize+0x1d8>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	b2db      	uxtb	r3, r3
 800baec:	461a      	mov	r2, r3
 800baee:	4b6a      	ldr	r3, [pc, #424]	@ (800bc98 <USER_SPI_initialize+0x1dc>)
 800baf0:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800baf2:	4b6a      	ldr	r3, [pc, #424]	@ (800bc9c <USER_SPI_initialize+0x1e0>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800bafc:	4b67      	ldr	r3, [pc, #412]	@ (800bc9c <USER_SPI_initialize+0x1e0>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800bb04:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800bb06:	230a      	movs	r3, #10
 800bb08:	73fb      	strb	r3, [r7, #15]
 800bb0a:	e005      	b.n	800bb18 <USER_SPI_initialize+0x5c>
 800bb0c:	20ff      	movs	r0, #255	@ 0xff
 800bb0e:	f7ff fe75 	bl	800b7fc <xchg_spi>
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	73fb      	strb	r3, [r7, #15]
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1f6      	bne.n	800bb0c <USER_SPI_initialize+0x50>

	ty = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800bb22:	2100      	movs	r1, #0
 800bb24:	2000      	movs	r0, #0
 800bb26:	f7ff ff5a 	bl	800b9de <send_cmd>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	f040 808b 	bne.w	800bc48 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800bb32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bb36:	f7ff fe37 	bl	800b7a8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800bb3a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800bb3e:	2008      	movs	r0, #8
 800bb40:	f7ff ff4d 	bl	800b9de <send_cmd>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d151      	bne.n	800bbee <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
 800bb4e:	e00d      	b.n	800bb6c <USER_SPI_initialize+0xb0>
 800bb50:	7bfc      	ldrb	r4, [r7, #15]
 800bb52:	20ff      	movs	r0, #255	@ 0xff
 800bb54:	f7ff fe52 	bl	800b7fc <xchg_spi>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f104 0310 	add.w	r3, r4, #16
 800bb60:	443b      	add	r3, r7
 800bb62:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	73fb      	strb	r3, [r7, #15]
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d9ee      	bls.n	800bb50 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800bb72:	7abb      	ldrb	r3, [r7, #10]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d167      	bne.n	800bc48 <USER_SPI_initialize+0x18c>
 800bb78:	7afb      	ldrb	r3, [r7, #11]
 800bb7a:	2baa      	cmp	r3, #170	@ 0xaa
 800bb7c:	d164      	bne.n	800bc48 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800bb7e:	bf00      	nop
 800bb80:	f7ff fe26 	bl	800b7d0 <SPI_Timer_Status>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d007      	beq.n	800bb9a <USER_SPI_initialize+0xde>
 800bb8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bb8e:	20a9      	movs	r0, #169	@ 0xa9
 800bb90:	f7ff ff25 	bl	800b9de <send_cmd>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1f2      	bne.n	800bb80 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800bb9a:	f7ff fe19 	bl	800b7d0 <SPI_Timer_Status>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d051      	beq.n	800bc48 <USER_SPI_initialize+0x18c>
 800bba4:	2100      	movs	r1, #0
 800bba6:	203a      	movs	r0, #58	@ 0x3a
 800bba8:	f7ff ff19 	bl	800b9de <send_cmd>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d14a      	bne.n	800bc48 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	73fb      	strb	r3, [r7, #15]
 800bbb6:	e00d      	b.n	800bbd4 <USER_SPI_initialize+0x118>
 800bbb8:	7bfc      	ldrb	r4, [r7, #15]
 800bbba:	20ff      	movs	r0, #255	@ 0xff
 800bbbc:	f7ff fe1e 	bl	800b7fc <xchg_spi>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	f104 0310 	add.w	r3, r4, #16
 800bbc8:	443b      	add	r3, r7
 800bbca:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	73fb      	strb	r3, [r7, #15]
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
 800bbd6:	2b03      	cmp	r3, #3
 800bbd8:	d9ee      	bls.n	800bbb8 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800bbda:	7a3b      	ldrb	r3, [r7, #8]
 800bbdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <USER_SPI_initialize+0x12c>
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	e000      	b.n	800bbea <USER_SPI_initialize+0x12e>
 800bbe8:	2304      	movs	r3, #4
 800bbea:	737b      	strb	r3, [r7, #13]
 800bbec:	e02c      	b.n	800bc48 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800bbee:	2100      	movs	r1, #0
 800bbf0:	20a9      	movs	r0, #169	@ 0xa9
 800bbf2:	f7ff fef4 	bl	800b9de <send_cmd>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d804      	bhi.n	800bc06 <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	737b      	strb	r3, [r7, #13]
 800bc00:	23a9      	movs	r3, #169	@ 0xa9
 800bc02:	73bb      	strb	r3, [r7, #14]
 800bc04:	e003      	b.n	800bc0e <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800bc06:	2301      	movs	r3, #1
 800bc08:	737b      	strb	r3, [r7, #13]
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800bc0e:	bf00      	nop
 800bc10:	f7ff fdde 	bl	800b7d0 <SPI_Timer_Status>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d007      	beq.n	800bc2a <USER_SPI_initialize+0x16e>
 800bc1a:	7bbb      	ldrb	r3, [r7, #14]
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff fedd 	bl	800b9de <send_cmd>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1f2      	bne.n	800bc10 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800bc2a:	f7ff fdd1 	bl	800b7d0 <SPI_Timer_Status>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d007      	beq.n	800bc44 <USER_SPI_initialize+0x188>
 800bc34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc38:	2010      	movs	r0, #16
 800bc3a:	f7ff fed0 	bl	800b9de <send_cmd>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d001      	beq.n	800bc48 <USER_SPI_initialize+0x18c>
				ty = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800bc48:	4a15      	ldr	r2, [pc, #84]	@ (800bca0 <USER_SPI_initialize+0x1e4>)
 800bc4a:	7b7b      	ldrb	r3, [r7, #13]
 800bc4c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800bc4e:	f7ff fe3f 	bl	800b8d0 <despiselect>

	if (ty) {			/* OK */
 800bc52:	7b7b      	ldrb	r3, [r7, #13]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d012      	beq.n	800bc7e <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800bc58:	4b10      	ldr	r3, [pc, #64]	@ (800bc9c <USER_SPI_initialize+0x1e0>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800bc62:	4b0e      	ldr	r3, [pc, #56]	@ (800bc9c <USER_SPI_initialize+0x1e0>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f042 0210 	orr.w	r2, r2, #16
 800bc6a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800bc6c:	4b09      	ldr	r3, [pc, #36]	@ (800bc94 <USER_SPI_initialize+0x1d8>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	f023 0301 	bic.w	r3, r3, #1
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	4b06      	ldr	r3, [pc, #24]	@ (800bc94 <USER_SPI_initialize+0x1d8>)
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	e002      	b.n	800bc84 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800bc7e:	4b05      	ldr	r3, [pc, #20]	@ (800bc94 <USER_SPI_initialize+0x1d8>)
 800bc80:	2201      	movs	r2, #1
 800bc82:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800bc84:	4b03      	ldr	r3, [pc, #12]	@ (800bc94 <USER_SPI_initialize+0x1d8>)
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	b2db      	uxtb	r3, r3
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd90      	pop	{r4, r7, pc}
 800bc92:	bf00      	nop
 800bc94:	2000006c 	.word	0x2000006c
 800bc98:	20002488 	.word	0x20002488
 800bc9c:	20001b68 	.word	0x20001b68
 800bca0:	2000267c 	.word	0x2000267c

0800bca4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <USER_SPI_status+0x14>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e002      	b.n	800bcbe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800bcb8:	4b04      	ldr	r3, [pc, #16]	@ (800bccc <USER_SPI_status+0x28>)
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	b2db      	uxtb	r3, r3
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	2000006c 	.word	0x2000006c

0800bcd0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60b9      	str	r1, [r7, #8]
 800bcd8:	607a      	str	r2, [r7, #4]
 800bcda:	603b      	str	r3, [r7, #0]
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d102      	bne.n	800bcec <USER_SPI_read+0x1c>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <USER_SPI_read+0x20>
 800bcec:	2304      	movs	r3, #4
 800bcee:	e04d      	b.n	800bd8c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800bcf0:	4b28      	ldr	r3, [pc, #160]	@ (800bd94 <USER_SPI_read+0xc4>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <USER_SPI_read+0x32>
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e044      	b.n	800bd8c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800bd02:	4b25      	ldr	r3, [pc, #148]	@ (800bd98 <USER_SPI_read+0xc8>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	f003 0308 	and.w	r3, r3, #8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d102      	bne.n	800bd14 <USER_SPI_read+0x44>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	025b      	lsls	r3, r3, #9
 800bd12:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d111      	bne.n	800bd3e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800bd1a:	6879      	ldr	r1, [r7, #4]
 800bd1c:	2011      	movs	r0, #17
 800bd1e:	f7ff fe5e 	bl	800b9de <send_cmd>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d129      	bne.n	800bd7c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800bd28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd2c:	68b8      	ldr	r0, [r7, #8]
 800bd2e:	f7ff fdfb 	bl	800b928 <rcvr_datablock>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d021      	beq.n	800bd7c <USER_SPI_read+0xac>
			count = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	e01e      	b.n	800bd7c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	2012      	movs	r0, #18
 800bd42:	f7ff fe4c 	bl	800b9de <send_cmd>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d117      	bne.n	800bd7c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800bd4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd50:	68b8      	ldr	r0, [r7, #8]
 800bd52:	f7ff fde9 	bl	800b928 <rcvr_datablock>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <USER_SPI_read+0xa2>
				buff += 512;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800bd62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	603b      	str	r3, [r7, #0]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1ed      	bne.n	800bd4c <USER_SPI_read+0x7c>
 800bd70:	e000      	b.n	800bd74 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800bd72:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800bd74:	2100      	movs	r1, #0
 800bd76:	200c      	movs	r0, #12
 800bd78:	f7ff fe31 	bl	800b9de <send_cmd>
		}
	}
	despiselect();
 800bd7c:	f7ff fda8 	bl	800b8d0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bf14      	ite	ne
 800bd86:	2301      	movne	r3, #1
 800bd88:	2300      	moveq	r3, #0
 800bd8a:	b2db      	uxtb	r3, r3
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	2000006c 	.word	0x2000006c
 800bd98:	2000267c 	.word	0x2000267c

0800bd9c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	603b      	str	r3, [r7, #0]
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d102      	bne.n	800bdb8 <USER_SPI_write+0x1c>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <USER_SPI_write+0x20>
 800bdb8:	2304      	movs	r3, #4
 800bdba:	e063      	b.n	800be84 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800bdbc:	4b33      	ldr	r3, [pc, #204]	@ (800be8c <USER_SPI_write+0xf0>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d001      	beq.n	800bdce <USER_SPI_write+0x32>
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e05a      	b.n	800be84 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800bdce:	4b2f      	ldr	r3, [pc, #188]	@ (800be8c <USER_SPI_write+0xf0>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	f003 0304 	and.w	r3, r3, #4
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <USER_SPI_write+0x44>
 800bddc:	2302      	movs	r3, #2
 800bdde:	e051      	b.n	800be84 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800bde0:	4b2b      	ldr	r3, [pc, #172]	@ (800be90 <USER_SPI_write+0xf4>)
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	f003 0308 	and.w	r3, r3, #8
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d102      	bne.n	800bdf2 <USER_SPI_write+0x56>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	025b      	lsls	r3, r3, #9
 800bdf0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d110      	bne.n	800be1a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	2018      	movs	r0, #24
 800bdfc:	f7ff fdef 	bl	800b9de <send_cmd>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d136      	bne.n	800be74 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800be06:	21fe      	movs	r1, #254	@ 0xfe
 800be08:	68b8      	ldr	r0, [r7, #8]
 800be0a:	f7ff fdb6 	bl	800b97a <xmit_datablock>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d02f      	beq.n	800be74 <USER_SPI_write+0xd8>
			count = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	603b      	str	r3, [r7, #0]
 800be18:	e02c      	b.n	800be74 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800be1a:	4b1d      	ldr	r3, [pc, #116]	@ (800be90 <USER_SPI_write+0xf4>)
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	f003 0306 	and.w	r3, r3, #6
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <USER_SPI_write+0x92>
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	2097      	movs	r0, #151	@ 0x97
 800be2a:	f7ff fdd8 	bl	800b9de <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	2019      	movs	r0, #25
 800be32:	f7ff fdd4 	bl	800b9de <send_cmd>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d11b      	bne.n	800be74 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800be3c:	21fc      	movs	r1, #252	@ 0xfc
 800be3e:	68b8      	ldr	r0, [r7, #8]
 800be40:	f7ff fd9b 	bl	800b97a <xmit_datablock>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <USER_SPI_write+0xc4>
				buff += 512;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800be50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	3b01      	subs	r3, #1
 800be56:	603b      	str	r3, [r7, #0]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1ee      	bne.n	800be3c <USER_SPI_write+0xa0>
 800be5e:	e000      	b.n	800be62 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800be60:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800be62:	21fd      	movs	r1, #253	@ 0xfd
 800be64:	2000      	movs	r0, #0
 800be66:	f7ff fd88 	bl	800b97a <xmit_datablock>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <USER_SPI_write+0xd8>
 800be70:	2301      	movs	r3, #1
 800be72:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800be74:	f7ff fd2c 	bl	800b8d0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	bf14      	ite	ne
 800be7e:	2301      	movne	r3, #1
 800be80:	2300      	moveq	r3, #0
 800be82:	b2db      	uxtb	r3, r3
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	2000006c 	.word	0x2000006c
 800be90:	2000267c 	.word	0x2000267c

0800be94 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08c      	sub	sp, #48	@ 0x30
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	603a      	str	r2, [r7, #0]
 800be9e:	71fb      	strb	r3, [r7, #7]
 800bea0:	460b      	mov	r3, r1
 800bea2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <USER_SPI_ioctl+0x1a>
 800beaa:	2304      	movs	r3, #4
 800beac:	e15a      	b.n	800c164 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800beae:	4baf      	ldr	r3, [pc, #700]	@ (800c16c <USER_SPI_ioctl+0x2d8>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <USER_SPI_ioctl+0x2c>
 800bebc:	2303      	movs	r3, #3
 800bebe:	e151      	b.n	800c164 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800bec6:	79bb      	ldrb	r3, [r7, #6]
 800bec8:	2b04      	cmp	r3, #4
 800beca:	f200 8136 	bhi.w	800c13a <USER_SPI_ioctl+0x2a6>
 800bece:	a201      	add	r2, pc, #4	@ (adr r2, 800bed4 <USER_SPI_ioctl+0x40>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800bee9 	.word	0x0800bee9
 800bed8:	0800befd 	.word	0x0800befd
 800bedc:	0800c13b 	.word	0x0800c13b
 800bee0:	0800bfa9 	.word	0x0800bfa9
 800bee4:	0800c09f 	.word	0x0800c09f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800bee8:	f7ff fd02 	bl	800b8f0 <spiselect>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 8127 	beq.w	800c142 <USER_SPI_ioctl+0x2ae>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800befa:	e122      	b.n	800c142 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800befc:	2100      	movs	r1, #0
 800befe:	2009      	movs	r0, #9
 800bf00:	f7ff fd6d 	bl	800b9de <send_cmd>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f040 811d 	bne.w	800c146 <USER_SPI_ioctl+0x2b2>
 800bf0c:	f107 030c 	add.w	r3, r7, #12
 800bf10:	2110      	movs	r1, #16
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff fd08 	bl	800b928 <rcvr_datablock>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 8113 	beq.w	800c146 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800bf20:	7b3b      	ldrb	r3, [r7, #12]
 800bf22:	099b      	lsrs	r3, r3, #6
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d111      	bne.n	800bf4e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800bf2a:	7d7b      	ldrb	r3, [r7, #21]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	7d3b      	ldrb	r3, [r7, #20]
 800bf30:	021b      	lsls	r3, r3, #8
 800bf32:	4413      	add	r3, r2
 800bf34:	461a      	mov	r2, r3
 800bf36:	7cfb      	ldrb	r3, [r7, #19]
 800bf38:	041b      	lsls	r3, r3, #16
 800bf3a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800bf3e:	4413      	add	r3, r2
 800bf40:	3301      	adds	r3, #1
 800bf42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	029a      	lsls	r2, r3, #10
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	e028      	b.n	800bfa0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bf4e:	7c7b      	ldrb	r3, [r7, #17]
 800bf50:	f003 030f 	and.w	r3, r3, #15
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	7dbb      	ldrb	r3, [r7, #22]
 800bf58:	09db      	lsrs	r3, r3, #7
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	7d7b      	ldrb	r3, [r7, #21]
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	f003 0306 	and.w	r3, r3, #6
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	4413      	add	r3, r2
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	3302      	adds	r3, #2
 800bf72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800bf76:	7d3b      	ldrb	r3, [r7, #20]
 800bf78:	099b      	lsrs	r3, r3, #6
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	7cfb      	ldrb	r3, [r7, #19]
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	441a      	add	r2, r3
 800bf84:	7cbb      	ldrb	r3, [r7, #18]
 800bf86:	029b      	lsls	r3, r3, #10
 800bf88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bf8c:	4413      	add	r3, r2
 800bf8e:	3301      	adds	r3, #1
 800bf90:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800bf92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf96:	3b09      	subs	r3, #9
 800bf98:	69fa      	ldr	r2, [r7, #28]
 800bf9a:	409a      	lsls	r2, r3
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800bfa6:	e0ce      	b.n	800c146 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800bfa8:	4b71      	ldr	r3, [pc, #452]	@ (800c170 <USER_SPI_ioctl+0x2dc>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d031      	beq.n	800c018 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	208d      	movs	r0, #141	@ 0x8d
 800bfb8:	f7ff fd11 	bl	800b9de <send_cmd>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f040 80c3 	bne.w	800c14a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800bfc4:	20ff      	movs	r0, #255	@ 0xff
 800bfc6:	f7ff fc19 	bl	800b7fc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800bfca:	f107 030c 	add.w	r3, r7, #12
 800bfce:	2110      	movs	r1, #16
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff fca9 	bl	800b928 <rcvr_datablock>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80b6 	beq.w	800c14a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800bfde:	2330      	movs	r3, #48	@ 0x30
 800bfe0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bfe4:	e007      	b.n	800bff6 <USER_SPI_ioctl+0x162>
 800bfe6:	20ff      	movs	r0, #255	@ 0xff
 800bfe8:	f7ff fc08 	bl	800b7fc <xchg_spi>
 800bfec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bff0:	3b01      	subs	r3, #1
 800bff2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bff6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1f3      	bne.n	800bfe6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800bffe:	7dbb      	ldrb	r3, [r7, #22]
 800c000:	091b      	lsrs	r3, r3, #4
 800c002:	b2db      	uxtb	r3, r3
 800c004:	461a      	mov	r2, r3
 800c006:	2310      	movs	r3, #16
 800c008:	fa03 f202 	lsl.w	r2, r3, r2
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c016:	e098      	b.n	800c14a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c018:	2100      	movs	r1, #0
 800c01a:	2009      	movs	r0, #9
 800c01c:	f7ff fcdf 	bl	800b9de <send_cmd>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	f040 8091 	bne.w	800c14a <USER_SPI_ioctl+0x2b6>
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	2110      	movs	r1, #16
 800c02e:	4618      	mov	r0, r3
 800c030:	f7ff fc7a 	bl	800b928 <rcvr_datablock>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 8087 	beq.w	800c14a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c03c:	4b4c      	ldr	r3, [pc, #304]	@ (800c170 <USER_SPI_ioctl+0x2dc>)
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	f003 0302 	and.w	r3, r3, #2
 800c044:	2b00      	cmp	r3, #0
 800c046:	d012      	beq.n	800c06e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c048:	7dbb      	ldrb	r3, [r7, #22]
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800c050:	7dfa      	ldrb	r2, [r7, #23]
 800c052:	09d2      	lsrs	r2, r2, #7
 800c054:	b2d2      	uxtb	r2, r2
 800c056:	4413      	add	r3, r2
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	7e7b      	ldrb	r3, [r7, #25]
 800c05c:	099b      	lsrs	r3, r3, #6
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	3b01      	subs	r3, #1
 800c062:	fa02 f303 	lsl.w	r3, r2, r3
 800c066:	461a      	mov	r2, r3
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	e013      	b.n	800c096 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c06e:	7dbb      	ldrb	r3, [r7, #22]
 800c070:	109b      	asrs	r3, r3, #2
 800c072:	b29b      	uxth	r3, r3
 800c074:	f003 031f 	and.w	r3, r3, #31
 800c078:	3301      	adds	r3, #1
 800c07a:	7dfa      	ldrb	r2, [r7, #23]
 800c07c:	00d2      	lsls	r2, r2, #3
 800c07e:	f002 0218 	and.w	r2, r2, #24
 800c082:	7df9      	ldrb	r1, [r7, #23]
 800c084:	0949      	lsrs	r1, r1, #5
 800c086:	b2c9      	uxtb	r1, r1
 800c088:	440a      	add	r2, r1
 800c08a:	3201      	adds	r2, #1
 800c08c:	fb02 f303 	mul.w	r3, r2, r3
 800c090:	461a      	mov	r2, r3
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c09c:	e055      	b.n	800c14a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c09e:	4b34      	ldr	r3, [pc, #208]	@ (800c170 <USER_SPI_ioctl+0x2dc>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	f003 0306 	and.w	r3, r3, #6
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d051      	beq.n	800c14e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c0aa:	f107 020c 	add.w	r2, r7, #12
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	210b      	movs	r1, #11
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff feee 	bl	800be94 <USER_SPI_ioctl>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d149      	bne.n	800c152 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c0be:	7b3b      	ldrb	r3, [r7, #12]
 800c0c0:	099b      	lsrs	r3, r3, #6
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d104      	bne.n	800c0d2 <USER_SPI_ioctl+0x23e>
 800c0c8:	7dbb      	ldrb	r3, [r7, #22]
 800c0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d041      	beq.n	800c156 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	623b      	str	r3, [r7, #32]
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800c0e2:	4b23      	ldr	r3, [pc, #140]	@ (800c170 <USER_SPI_ioctl+0x2dc>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	f003 0308 	and.w	r3, r3, #8
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d105      	bne.n	800c0fa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f0:	025b      	lsls	r3, r3, #9
 800c0f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	025b      	lsls	r3, r3, #9
 800c0f8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c0fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0fc:	2020      	movs	r0, #32
 800c0fe:	f7ff fc6e 	bl	800b9de <send_cmd>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d128      	bne.n	800c15a <USER_SPI_ioctl+0x2c6>
 800c108:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c10a:	2021      	movs	r0, #33	@ 0x21
 800c10c:	f7ff fc67 	bl	800b9de <send_cmd>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d121      	bne.n	800c15a <USER_SPI_ioctl+0x2c6>
 800c116:	2100      	movs	r1, #0
 800c118:	2026      	movs	r0, #38	@ 0x26
 800c11a:	f7ff fc60 	bl	800b9de <send_cmd>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11a      	bne.n	800c15a <USER_SPI_ioctl+0x2c6>
 800c124:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c128:	f7ff fbae 	bl	800b888 <wait_ready>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d013      	beq.n	800c15a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c132:	2300      	movs	r3, #0
 800c134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c138:	e00f      	b.n	800c15a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c13a:	2304      	movs	r3, #4
 800c13c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c140:	e00c      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		break;
 800c142:	bf00      	nop
 800c144:	e00a      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		break;
 800c146:	bf00      	nop
 800c148:	e008      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		break;
 800c14a:	bf00      	nop
 800c14c:	e006      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c14e:	bf00      	nop
 800c150:	e004      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c152:	bf00      	nop
 800c154:	e002      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c156:	bf00      	nop
 800c158:	e000      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		break;
 800c15a:	bf00      	nop
	}

	despiselect();
 800c15c:	f7ff fbb8 	bl	800b8d0 <despiselect>

	return res;
 800c160:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c164:	4618      	mov	r0, r3
 800c166:	3730      	adds	r7, #48	@ 0x30
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	2000006c 	.word	0x2000006c
 800c170:	2000267c 	.word	0x2000267c

0800c174 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	4a08      	ldr	r2, [pc, #32]	@ (800c1a4 <disk_status+0x30>)
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	79fa      	ldrb	r2, [r7, #7]
 800c18c:	4905      	ldr	r1, [pc, #20]	@ (800c1a4 <disk_status+0x30>)
 800c18e:	440a      	add	r2, r1
 800c190:	7a12      	ldrb	r2, [r2, #8]
 800c192:	4610      	mov	r0, r2
 800c194:	4798      	blx	r3
 800c196:	4603      	mov	r3, r0
 800c198:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	200028b0 	.word	0x200028b0

0800c1a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c1b6:	79fb      	ldrb	r3, [r7, #7]
 800c1b8:	4a0d      	ldr	r2, [pc, #52]	@ (800c1f0 <disk_initialize+0x48>)
 800c1ba:	5cd3      	ldrb	r3, [r2, r3]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d111      	bne.n	800c1e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	4a0b      	ldr	r2, [pc, #44]	@ (800c1f0 <disk_initialize+0x48>)
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	4a09      	ldr	r2, [pc, #36]	@ (800c1f0 <disk_initialize+0x48>)
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	79fa      	ldrb	r2, [r7, #7]
 800c1d6:	4906      	ldr	r1, [pc, #24]	@ (800c1f0 <disk_initialize+0x48>)
 800c1d8:	440a      	add	r2, r1
 800c1da:	7a12      	ldrb	r2, [r2, #8]
 800c1dc:	4610      	mov	r0, r2
 800c1de:	4798      	blx	r3
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	200028b0 	.word	0x200028b0

0800c1f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c1f4:	b590      	push	{r4, r7, lr}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60b9      	str	r1, [r7, #8]
 800c1fc:	607a      	str	r2, [r7, #4]
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	4603      	mov	r3, r0
 800c202:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c204:	7bfb      	ldrb	r3, [r7, #15]
 800c206:	4a0a      	ldr	r2, [pc, #40]	@ (800c230 <disk_read+0x3c>)
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	689c      	ldr	r4, [r3, #8]
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	4a07      	ldr	r2, [pc, #28]	@ (800c230 <disk_read+0x3c>)
 800c214:	4413      	add	r3, r2
 800c216:	7a18      	ldrb	r0, [r3, #8]
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	68b9      	ldr	r1, [r7, #8]
 800c21e:	47a0      	blx	r4
 800c220:	4603      	mov	r3, r0
 800c222:	75fb      	strb	r3, [r7, #23]
  return res;
 800c224:	7dfb      	ldrb	r3, [r7, #23]
}
 800c226:	4618      	mov	r0, r3
 800c228:	371c      	adds	r7, #28
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd90      	pop	{r4, r7, pc}
 800c22e:	bf00      	nop
 800c230:	200028b0 	.word	0x200028b0

0800c234 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c234:	b590      	push	{r4, r7, lr}
 800c236:	b087      	sub	sp, #28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60b9      	str	r1, [r7, #8]
 800c23c:	607a      	str	r2, [r7, #4]
 800c23e:	603b      	str	r3, [r7, #0]
 800c240:	4603      	mov	r3, r0
 800c242:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c244:	7bfb      	ldrb	r3, [r7, #15]
 800c246:	4a0a      	ldr	r2, [pc, #40]	@ (800c270 <disk_write+0x3c>)
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	68dc      	ldr	r4, [r3, #12]
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	4a07      	ldr	r2, [pc, #28]	@ (800c270 <disk_write+0x3c>)
 800c254:	4413      	add	r3, r2
 800c256:	7a18      	ldrb	r0, [r3, #8]
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	68b9      	ldr	r1, [r7, #8]
 800c25e:	47a0      	blx	r4
 800c260:	4603      	mov	r3, r0
 800c262:	75fb      	strb	r3, [r7, #23]
  return res;
 800c264:	7dfb      	ldrb	r3, [r7, #23]
}
 800c266:	4618      	mov	r0, r3
 800c268:	371c      	adds	r7, #28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd90      	pop	{r4, r7, pc}
 800c26e:	bf00      	nop
 800c270:	200028b0 	.word	0x200028b0

0800c274 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	603a      	str	r2, [r7, #0]
 800c27e:	71fb      	strb	r3, [r7, #7]
 800c280:	460b      	mov	r3, r1
 800c282:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c284:	79fb      	ldrb	r3, [r7, #7]
 800c286:	4a09      	ldr	r2, [pc, #36]	@ (800c2ac <disk_ioctl+0x38>)
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4413      	add	r3, r2
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	79fa      	ldrb	r2, [r7, #7]
 800c292:	4906      	ldr	r1, [pc, #24]	@ (800c2ac <disk_ioctl+0x38>)
 800c294:	440a      	add	r2, r1
 800c296:	7a10      	ldrb	r0, [r2, #8]
 800c298:	79b9      	ldrb	r1, [r7, #6]
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	4798      	blx	r3
 800c29e:	4603      	mov	r3, r0
 800c2a0:	73fb      	strb	r3, [r7, #15]
  return res;
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	200028b0 	.word	0x200028b0

0800c2b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c2c0:	89fb      	ldrh	r3, [r7, #14]
 800c2c2:	021b      	lsls	r3, r3, #8
 800c2c4:	b21a      	sxth	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	b21b      	sxth	r3, r3
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	b21b      	sxth	r3, r3
 800c2d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c2d2:	89fb      	ldrh	r3, [r7, #14]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3303      	adds	r3, #3
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	021b      	lsls	r3, r3, #8
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	3202      	adds	r2, #2
 800c2f8:	7812      	ldrb	r2, [r2, #0]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	021b      	lsls	r3, r3, #8
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	3201      	adds	r2, #1
 800c306:	7812      	ldrb	r2, [r2, #0]
 800c308:	4313      	orrs	r3, r2
 800c30a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	021b      	lsls	r3, r3, #8
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7812      	ldrb	r2, [r2, #0]
 800c314:	4313      	orrs	r3, r2
 800c316:	60fb      	str	r3, [r7, #12]
	return rv;
 800c318:	68fb      	ldr	r3, [r7, #12]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3714      	adds	r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c326:	b480      	push	{r7}
 800c328:	b083      	sub	sp, #12
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	460b      	mov	r3, r1
 800c330:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	1c5a      	adds	r2, r3, #1
 800c336:	607a      	str	r2, [r7, #4]
 800c338:	887a      	ldrh	r2, [r7, #2]
 800c33a:	b2d2      	uxtb	r2, r2
 800c33c:	701a      	strb	r2, [r3, #0]
 800c33e:	887b      	ldrh	r3, [r7, #2]
 800c340:	0a1b      	lsrs	r3, r3, #8
 800c342:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	607a      	str	r2, [r7, #4]
 800c34a:	887a      	ldrh	r2, [r7, #2]
 800c34c:	b2d2      	uxtb	r2, r2
 800c34e:	701a      	strb	r2, [r3, #0]
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	607a      	str	r2, [r7, #4]
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	b2d2      	uxtb	r2, r2
 800c370:	701a      	strb	r2, [r3, #0]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	0a1b      	lsrs	r3, r3, #8
 800c376:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	1c5a      	adds	r2, r3, #1
 800c37c:	607a      	str	r2, [r7, #4]
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	b2d2      	uxtb	r2, r2
 800c382:	701a      	strb	r2, [r3, #0]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	0a1b      	lsrs	r3, r3, #8
 800c388:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	b2d2      	uxtb	r2, r2
 800c394:	701a      	strb	r2, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	0a1b      	lsrs	r3, r3, #8
 800c39a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	607a      	str	r2, [r7, #4]
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	b2d2      	uxtb	r2, r2
 800c3a6:	701a      	strb	r2, [r3, #0]
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c3b4:	b480      	push	{r7}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00d      	beq.n	800c3ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	1c53      	adds	r3, r2, #1
 800c3d2:	613b      	str	r3, [r7, #16]
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	1c59      	adds	r1, r3, #1
 800c3d8:	6179      	str	r1, [r7, #20]
 800c3da:	7812      	ldrb	r2, [r2, #0]
 800c3dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	607b      	str	r3, [r7, #4]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1f1      	bne.n	800c3ce <mem_cpy+0x1a>
	}
}
 800c3ea:	bf00      	nop
 800c3ec:	371c      	adds	r7, #28
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c3f6:	b480      	push	{r7}
 800c3f8:	b087      	sub	sp, #28
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	60f8      	str	r0, [r7, #12]
 800c3fe:	60b9      	str	r1, [r7, #8]
 800c400:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	617a      	str	r2, [r7, #20]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	b2d2      	uxtb	r2, r2
 800c410:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	3b01      	subs	r3, #1
 800c416:	607b      	str	r3, [r7, #4]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1f3      	bne.n	800c406 <mem_set+0x10>
}
 800c41e:	bf00      	nop
 800c420:	bf00      	nop
 800c422:	371c      	adds	r7, #28
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c42c:	b480      	push	{r7}
 800c42e:	b089      	sub	sp, #36	@ 0x24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	61fb      	str	r3, [r7, #28]
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	61fa      	str	r2, [r7, #28]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	4619      	mov	r1, r3
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	1c5a      	adds	r2, r3, #1
 800c452:	61ba      	str	r2, [r7, #24]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	1acb      	subs	r3, r1, r3
 800c458:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	607b      	str	r3, [r7, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d002      	beq.n	800c46c <mem_cmp+0x40>
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d0eb      	beq.n	800c444 <mem_cmp+0x18>

	return r;
 800c46c:	697b      	ldr	r3, [r7, #20]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3724      	adds	r7, #36	@ 0x24
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c484:	e002      	b.n	800c48c <chk_chr+0x12>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3301      	adds	r3, #1
 800c48a:	607b      	str	r3, [r7, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d005      	beq.n	800c4a0 <chk_chr+0x26>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d1f2      	bne.n	800c486 <chk_chr+0xc>
	return *str;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	60bb      	str	r3, [r7, #8]
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	e029      	b.n	800c518 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c4c4:	4a27      	ldr	r2, [pc, #156]	@ (800c564 <chk_lock+0xb4>)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	011b      	lsls	r3, r3, #4
 800c4ca:	4413      	add	r3, r2
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d01d      	beq.n	800c50e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c4d2:	4a24      	ldr	r2, [pc, #144]	@ (800c564 <chk_lock+0xb4>)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	4413      	add	r3, r2
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d116      	bne.n	800c512 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c4e4:	4a1f      	ldr	r2, [pc, #124]	@ (800c564 <chk_lock+0xb4>)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	011b      	lsls	r3, r3, #4
 800c4ea:	4413      	add	r3, r2
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d10c      	bne.n	800c512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c4f8:	4a1a      	ldr	r2, [pc, #104]	@ (800c564 <chk_lock+0xb4>)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	011b      	lsls	r3, r3, #4
 800c4fe:	4413      	add	r3, r2
 800c500:	3308      	adds	r3, #8
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c508:	429a      	cmp	r2, r3
 800c50a:	d102      	bne.n	800c512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c50c:	e007      	b.n	800c51e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c50e:	2301      	movs	r3, #1
 800c510:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	3301      	adds	r3, #1
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d9d2      	bls.n	800c4c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b02      	cmp	r3, #2
 800c522:	d109      	bne.n	800c538 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <chk_lock+0x80>
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d101      	bne.n	800c534 <chk_lock+0x84>
 800c530:	2300      	movs	r3, #0
 800c532:	e010      	b.n	800c556 <chk_lock+0xa6>
 800c534:	2312      	movs	r3, #18
 800c536:	e00e      	b.n	800c556 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d108      	bne.n	800c550 <chk_lock+0xa0>
 800c53e:	4a09      	ldr	r2, [pc, #36]	@ (800c564 <chk_lock+0xb4>)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	011b      	lsls	r3, r3, #4
 800c544:	4413      	add	r3, r2
 800c546:	330c      	adds	r3, #12
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c54e:	d101      	bne.n	800c554 <chk_lock+0xa4>
 800c550:	2310      	movs	r3, #16
 800c552:	e000      	b.n	800c556 <chk_lock+0xa6>
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3714      	adds	r7, #20
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	20002690 	.word	0x20002690

0800c568 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c56e:	2300      	movs	r3, #0
 800c570:	607b      	str	r3, [r7, #4]
 800c572:	e002      	b.n	800c57a <enq_lock+0x12>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3301      	adds	r3, #1
 800c578:	607b      	str	r3, [r7, #4]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d806      	bhi.n	800c58e <enq_lock+0x26>
 800c580:	4a09      	ldr	r2, [pc, #36]	@ (800c5a8 <enq_lock+0x40>)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	011b      	lsls	r3, r3, #4
 800c586:	4413      	add	r3, r2
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d1f2      	bne.n	800c574 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2b02      	cmp	r3, #2
 800c592:	bf14      	ite	ne
 800c594:	2301      	movne	r3, #1
 800c596:	2300      	moveq	r3, #0
 800c598:	b2db      	uxtb	r3, r3
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	370c      	adds	r7, #12
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	20002690 	.word	0x20002690

0800c5ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	60fb      	str	r3, [r7, #12]
 800c5ba:	e01f      	b.n	800c5fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c5bc:	4a41      	ldr	r2, [pc, #260]	@ (800c6c4 <inc_lock+0x118>)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	011b      	lsls	r3, r3, #4
 800c5c2:	4413      	add	r3, r2
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d113      	bne.n	800c5f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c5ce:	4a3d      	ldr	r2, [pc, #244]	@ (800c6c4 <inc_lock+0x118>)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	011b      	lsls	r3, r3, #4
 800c5d4:	4413      	add	r3, r2
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d109      	bne.n	800c5f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c5e2:	4a38      	ldr	r2, [pc, #224]	@ (800c6c4 <inc_lock+0x118>)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	011b      	lsls	r3, r3, #4
 800c5e8:	4413      	add	r3, r2
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d006      	beq.n	800c604 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	60fb      	str	r3, [r7, #12]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d9dc      	bls.n	800c5bc <inc_lock+0x10>
 800c602:	e000      	b.n	800c606 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c604:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d132      	bne.n	800c672 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c60c:	2300      	movs	r3, #0
 800c60e:	60fb      	str	r3, [r7, #12]
 800c610:	e002      	b.n	800c618 <inc_lock+0x6c>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3301      	adds	r3, #1
 800c616:	60fb      	str	r3, [r7, #12]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d806      	bhi.n	800c62c <inc_lock+0x80>
 800c61e:	4a29      	ldr	r2, [pc, #164]	@ (800c6c4 <inc_lock+0x118>)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	011b      	lsls	r3, r3, #4
 800c624:	4413      	add	r3, r2
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1f2      	bne.n	800c612 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d101      	bne.n	800c636 <inc_lock+0x8a>
 800c632:	2300      	movs	r3, #0
 800c634:	e040      	b.n	800c6b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4922      	ldr	r1, [pc, #136]	@ (800c6c4 <inc_lock+0x118>)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	011b      	lsls	r3, r3, #4
 800c640:	440b      	add	r3, r1
 800c642:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	689a      	ldr	r2, [r3, #8]
 800c648:	491e      	ldr	r1, [pc, #120]	@ (800c6c4 <inc_lock+0x118>)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	011b      	lsls	r3, r3, #4
 800c64e:	440b      	add	r3, r1
 800c650:	3304      	adds	r3, #4
 800c652:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	695a      	ldr	r2, [r3, #20]
 800c658:	491a      	ldr	r1, [pc, #104]	@ (800c6c4 <inc_lock+0x118>)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	011b      	lsls	r3, r3, #4
 800c65e:	440b      	add	r3, r1
 800c660:	3308      	adds	r3, #8
 800c662:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c664:	4a17      	ldr	r2, [pc, #92]	@ (800c6c4 <inc_lock+0x118>)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	011b      	lsls	r3, r3, #4
 800c66a:	4413      	add	r3, r2
 800c66c:	330c      	adds	r3, #12
 800c66e:	2200      	movs	r2, #0
 800c670:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d009      	beq.n	800c68c <inc_lock+0xe0>
 800c678:	4a12      	ldr	r2, [pc, #72]	@ (800c6c4 <inc_lock+0x118>)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	011b      	lsls	r3, r3, #4
 800c67e:	4413      	add	r3, r2
 800c680:	330c      	adds	r3, #12
 800c682:	881b      	ldrh	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <inc_lock+0xe0>
 800c688:	2300      	movs	r3, #0
 800c68a:	e015      	b.n	800c6b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d108      	bne.n	800c6a4 <inc_lock+0xf8>
 800c692:	4a0c      	ldr	r2, [pc, #48]	@ (800c6c4 <inc_lock+0x118>)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	011b      	lsls	r3, r3, #4
 800c698:	4413      	add	r3, r2
 800c69a:	330c      	adds	r3, #12
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	e001      	b.n	800c6a8 <inc_lock+0xfc>
 800c6a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c6a8:	4906      	ldr	r1, [pc, #24]	@ (800c6c4 <inc_lock+0x118>)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	011b      	lsls	r3, r3, #4
 800c6ae:	440b      	add	r3, r1
 800c6b0:	330c      	adds	r3, #12
 800c6b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3301      	adds	r3, #1
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	20002690 	.word	0x20002690

0800c6c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	607b      	str	r3, [r7, #4]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d825      	bhi.n	800c728 <dec_lock+0x60>
		n = Files[i].ctr;
 800c6dc:	4a17      	ldr	r2, [pc, #92]	@ (800c73c <dec_lock+0x74>)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	011b      	lsls	r3, r3, #4
 800c6e2:	4413      	add	r3, r2
 800c6e4:	330c      	adds	r3, #12
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c6ea:	89fb      	ldrh	r3, [r7, #14]
 800c6ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6f0:	d101      	bne.n	800c6f6 <dec_lock+0x2e>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c6f6:	89fb      	ldrh	r3, [r7, #14]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <dec_lock+0x3a>
 800c6fc:	89fb      	ldrh	r3, [r7, #14]
 800c6fe:	3b01      	subs	r3, #1
 800c700:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c702:	4a0e      	ldr	r2, [pc, #56]	@ (800c73c <dec_lock+0x74>)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	011b      	lsls	r3, r3, #4
 800c708:	4413      	add	r3, r2
 800c70a:	330c      	adds	r3, #12
 800c70c:	89fa      	ldrh	r2, [r7, #14]
 800c70e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c710:	89fb      	ldrh	r3, [r7, #14]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d105      	bne.n	800c722 <dec_lock+0x5a>
 800c716:	4a09      	ldr	r2, [pc, #36]	@ (800c73c <dec_lock+0x74>)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	011b      	lsls	r3, r3, #4
 800c71c:	4413      	add	r3, r2
 800c71e:	2200      	movs	r2, #0
 800c720:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c722:	2300      	movs	r3, #0
 800c724:	737b      	strb	r3, [r7, #13]
 800c726:	e001      	b.n	800c72c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c728:	2302      	movs	r3, #2
 800c72a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c72c:	7b7b      	ldrb	r3, [r7, #13]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	20002690 	.word	0x20002690

0800c740 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c748:	2300      	movs	r3, #0
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	e010      	b.n	800c770 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c74e:	4a0d      	ldr	r2, [pc, #52]	@ (800c784 <clear_lock+0x44>)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	011b      	lsls	r3, r3, #4
 800c754:	4413      	add	r3, r2
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d105      	bne.n	800c76a <clear_lock+0x2a>
 800c75e:	4a09      	ldr	r2, [pc, #36]	@ (800c784 <clear_lock+0x44>)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	011b      	lsls	r3, r3, #4
 800c764:	4413      	add	r3, r2
 800c766:	2200      	movs	r2, #0
 800c768:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3301      	adds	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d9eb      	bls.n	800c74e <clear_lock+0xe>
	}
}
 800c776:	bf00      	nop
 800c778:	bf00      	nop
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr
 800c784:	20002690 	.word	0x20002690

0800c788 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c790:	2300      	movs	r3, #0
 800c792:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	78db      	ldrb	r3, [r3, #3]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d034      	beq.n	800c806 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	7858      	ldrb	r0, [r3, #1]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	f7ff fd40 	bl	800c234 <disk_write>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	73fb      	strb	r3, [r7, #15]
 800c7be:	e022      	b.n	800c806 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	1ad2      	subs	r2, r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	69db      	ldr	r3, [r3, #28]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d217      	bcs.n	800c806 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	789b      	ldrb	r3, [r3, #2]
 800c7da:	613b      	str	r3, [r7, #16]
 800c7dc:	e010      	b.n	800c800 <sync_window+0x78>
					wsect += fs->fsize;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	69db      	ldr	r3, [r3, #28]
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7858      	ldrb	r0, [r3, #1]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	697a      	ldr	r2, [r7, #20]
 800c7f6:	f7ff fd1d 	bl	800c234 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	613b      	str	r3, [r7, #16]
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d8eb      	bhi.n	800c7de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c806:	7bfb      	ldrb	r3, [r7, #15]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	429a      	cmp	r2, r3
 800c826:	d01b      	beq.n	800c860 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ffad 	bl	800c788 <sync_window>
 800c82e:	4603      	mov	r3, r0
 800c830:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c832:	7bfb      	ldrb	r3, [r7, #15]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d113      	bne.n	800c860 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	7858      	ldrb	r0, [r3, #1]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c842:	2301      	movs	r3, #1
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	f7ff fcd5 	bl	800c1f4 <disk_read>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d004      	beq.n	800c85a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c850:	f04f 33ff 	mov.w	r3, #4294967295
 800c854:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c856:	2301      	movs	r3, #1
 800c858:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800c860:	7bfb      	ldrb	r3, [r7, #15]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
	...

0800c86c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff ff87 	bl	800c788 <sync_window>
 800c87a:	4603      	mov	r3, r0
 800c87c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c87e:	7bfb      	ldrb	r3, [r7, #15]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d158      	bne.n	800c936 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	2b03      	cmp	r3, #3
 800c88a:	d148      	bne.n	800c91e <sync_fs+0xb2>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	791b      	ldrb	r3, [r3, #4]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d144      	bne.n	800c91e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3334      	adds	r3, #52	@ 0x34
 800c898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c89c:	2100      	movs	r1, #0
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff fda9 	bl	800c3f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3334      	adds	r3, #52	@ 0x34
 800c8a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c8ac:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff fd38 	bl	800c326 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	3334      	adds	r3, #52	@ 0x34
 800c8ba:	4921      	ldr	r1, [pc, #132]	@ (800c940 <sync_fs+0xd4>)
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7ff fd4d 	bl	800c35c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3334      	adds	r3, #52	@ 0x34
 800c8c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c8ca:	491e      	ldr	r1, [pc, #120]	@ (800c944 <sync_fs+0xd8>)
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff fd45 	bl	800c35c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	3334      	adds	r3, #52	@ 0x34
 800c8d6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	f7ff fd3b 	bl	800c35c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3334      	adds	r3, #52	@ 0x34
 800c8ea:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	f7ff fd31 	bl	800c35c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	7858      	ldrb	r0, [r3, #1]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c912:	2301      	movs	r3, #1
 800c914:	f7ff fc8e 	bl	800c234 <disk_write>
			fs->fsi_flag = 0;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	785b      	ldrb	r3, [r3, #1]
 800c922:	2200      	movs	r2, #0
 800c924:	2100      	movs	r1, #0
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff fca4 	bl	800c274 <disk_ioctl>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d001      	beq.n	800c936 <sync_fs+0xca>
 800c932:	2301      	movs	r3, #1
 800c934:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c936:	7bfb      	ldrb	r3, [r7, #15]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	41615252 	.word	0x41615252
 800c944:	61417272 	.word	0x61417272

0800c948 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	3b02      	subs	r3, #2
 800c956:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	3b02      	subs	r3, #2
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	429a      	cmp	r2, r3
 800c962:	d301      	bcc.n	800c968 <clust2sect+0x20>
 800c964:	2300      	movs	r3, #0
 800c966:	e008      	b.n	800c97a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	895b      	ldrh	r3, [r3, #10]
 800c96c:	461a      	mov	r2, r3
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	fb03 f202 	mul.w	r2, r3, r2
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c978:	4413      	add	r3, r2
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b086      	sub	sp, #24
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d904      	bls.n	800c9a6 <get_fat+0x20>
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d302      	bcc.n	800c9ac <get_fat+0x26>
		val = 1;	/* Internal error */
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	617b      	str	r3, [r7, #20]
 800c9aa:	e08e      	b.n	800caca <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	d061      	beq.n	800ca7e <get_fat+0xf8>
 800c9ba:	2b03      	cmp	r3, #3
 800c9bc:	dc7b      	bgt.n	800cab6 <get_fat+0x130>
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d002      	beq.n	800c9c8 <get_fat+0x42>
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d041      	beq.n	800ca4a <get_fat+0xc4>
 800c9c6:	e076      	b.n	800cab6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	085b      	lsrs	r3, r3, #1
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	0a5b      	lsrs	r3, r3, #9
 800c9de:	4413      	add	r3, r2
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6938      	ldr	r0, [r7, #16]
 800c9e4:	f7ff ff14 	bl	800c810 <move_window>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d166      	bne.n	800cabc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	1c5a      	adds	r2, r3, #1
 800c9f2:	60fa      	str	r2, [r7, #12]
 800c9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	0a5b      	lsrs	r3, r3, #9
 800ca0a:	4413      	add	r3, r2
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6938      	ldr	r0, [r7, #16]
 800ca10:	f7ff fefe 	bl	800c810 <move_window>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d152      	bne.n	800cac0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	4413      	add	r3, r2
 800ca24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d002      	beq.n	800ca40 <get_fat+0xba>
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	091b      	lsrs	r3, r3, #4
 800ca3e:	e002      	b.n	800ca46 <get_fat+0xc0>
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca46:	617b      	str	r3, [r7, #20]
			break;
 800ca48:	e03f      	b.n	800caca <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	0a1b      	lsrs	r3, r3, #8
 800ca52:	4413      	add	r3, r2
 800ca54:	4619      	mov	r1, r3
 800ca56:	6938      	ldr	r0, [r7, #16]
 800ca58:	f7ff feda 	bl	800c810 <move_window>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d130      	bne.n	800cac4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ca70:	4413      	add	r3, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff fc1c 	bl	800c2b0 <ld_word>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	617b      	str	r3, [r7, #20]
			break;
 800ca7c:	e025      	b.n	800caca <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	09db      	lsrs	r3, r3, #7
 800ca86:	4413      	add	r3, r2
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6938      	ldr	r0, [r7, #16]
 800ca8c:	f7ff fec0 	bl	800c810 <move_window>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d118      	bne.n	800cac8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800caa4:	4413      	add	r3, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff fc1a 	bl	800c2e0 <ld_dword>
 800caac:	4603      	mov	r3, r0
 800caae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cab2:	617b      	str	r3, [r7, #20]
			break;
 800cab4:	e009      	b.n	800caca <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cab6:	2301      	movs	r3, #1
 800cab8:	617b      	str	r3, [r7, #20]
 800caba:	e006      	b.n	800caca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cabc:	bf00      	nop
 800cabe:	e004      	b.n	800caca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cac0:	bf00      	nop
 800cac2:	e002      	b.n	800caca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cac4:	bf00      	nop
 800cac6:	e000      	b.n	800caca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cac8:	bf00      	nop
		}
	}

	return val;
 800caca:	697b      	ldr	r3, [r7, #20]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3718      	adds	r7, #24
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b089      	sub	sp, #36	@ 0x24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cae0:	2302      	movs	r3, #2
 800cae2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	f240 80d9 	bls.w	800cc9e <put_fat+0x1ca>
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	f080 80d3 	bcs.w	800cc9e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b03      	cmp	r3, #3
 800cafe:	f000 8096 	beq.w	800cc2e <put_fat+0x15a>
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	f300 80cb 	bgt.w	800cc9e <put_fat+0x1ca>
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d002      	beq.n	800cb12 <put_fat+0x3e>
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d06e      	beq.n	800cbee <put_fat+0x11a>
 800cb10:	e0c5      	b.n	800cc9e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	61bb      	str	r3, [r7, #24]
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	085b      	lsrs	r3, r3, #1
 800cb1a:	69ba      	ldr	r2, [r7, #24]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	0a5b      	lsrs	r3, r3, #9
 800cb28:	4413      	add	r3, r2
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7ff fe6f 	bl	800c810 <move_window>
 800cb32:	4603      	mov	r3, r0
 800cb34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb36:	7ffb      	ldrb	r3, [r7, #31]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f040 80a9 	bne.w	800cc90 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	1c59      	adds	r1, r3, #1
 800cb48:	61b9      	str	r1, [r7, #24]
 800cb4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4e:	4413      	add	r3, r2
 800cb50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	f003 0301 	and.w	r3, r3, #1
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00d      	beq.n	800cb78 <put_fat+0xa4>
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	b25b      	sxtb	r3, r3
 800cb62:	f003 030f 	and.w	r3, r3, #15
 800cb66:	b25a      	sxtb	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	011b      	lsls	r3, r3, #4
 800cb6e:	b25b      	sxtb	r3, r3
 800cb70:	4313      	orrs	r3, r2
 800cb72:	b25b      	sxtb	r3, r3
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	e001      	b.n	800cb7c <put_fat+0xa8>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	697a      	ldr	r2, [r7, #20]
 800cb7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2201      	movs	r2, #1
 800cb84:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	0a5b      	lsrs	r3, r3, #9
 800cb8e:	4413      	add	r3, r2
 800cb90:	4619      	mov	r1, r3
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f7ff fe3c 	bl	800c810 <move_window>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb9c:	7ffb      	ldrb	r3, [r7, #31]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d178      	bne.n	800cc94 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbae:	4413      	add	r3, r2
 800cbb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	f003 0301 	and.w	r3, r3, #1
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d003      	beq.n	800cbc4 <put_fat+0xf0>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	091b      	lsrs	r3, r3, #4
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	e00e      	b.n	800cbe2 <put_fat+0x10e>
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	b25b      	sxtb	r3, r3
 800cbca:	f023 030f 	bic.w	r3, r3, #15
 800cbce:	b25a      	sxtb	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	0a1b      	lsrs	r3, r3, #8
 800cbd4:	b25b      	sxtb	r3, r3
 800cbd6:	f003 030f 	and.w	r3, r3, #15
 800cbda:	b25b      	sxtb	r3, r3
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	b25b      	sxtb	r3, r3
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	70da      	strb	r2, [r3, #3]
			break;
 800cbec:	e057      	b.n	800cc9e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	0a1b      	lsrs	r3, r3, #8
 800cbf6:	4413      	add	r3, r2
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f7ff fe08 	bl	800c810 <move_window>
 800cc00:	4603      	mov	r3, r0
 800cc02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc04:	7ffb      	ldrb	r3, [r7, #31]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d146      	bne.n	800cc98 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	005b      	lsls	r3, r3, #1
 800cc14:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cc18:	4413      	add	r3, r2
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	b292      	uxth	r2, r2
 800cc1e:	4611      	mov	r1, r2
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff fb80 	bl	800c326 <st_word>
			fs->wflag = 1;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	70da      	strb	r2, [r3, #3]
			break;
 800cc2c:	e037      	b.n	800cc9e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	09db      	lsrs	r3, r3, #7
 800cc36:	4413      	add	r3, r2
 800cc38:	4619      	mov	r1, r3
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f7ff fde8 	bl	800c810 <move_window>
 800cc40:	4603      	mov	r3, r0
 800cc42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc44:	7ffb      	ldrb	r3, [r7, #31]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d128      	bne.n	800cc9c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cc5e:	4413      	add	r3, r2
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff fb3d 	bl	800c2e0 <ld_dword>
 800cc66:	4603      	mov	r3, r0
 800cc68:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cc6c:	4323      	orrs	r3, r4
 800cc6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cc7e:	4413      	add	r3, r2
 800cc80:	6879      	ldr	r1, [r7, #4]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7ff fb6a 	bl	800c35c <st_dword>
			fs->wflag = 1;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	70da      	strb	r2, [r3, #3]
			break;
 800cc8e:	e006      	b.n	800cc9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc90:	bf00      	nop
 800cc92:	e004      	b.n	800cc9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc94:	bf00      	nop
 800cc96:	e002      	b.n	800cc9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc98:	bf00      	nop
 800cc9a:	e000      	b.n	800cc9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc9c:	bf00      	nop
		}
	}
	return res;
 800cc9e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3724      	adds	r7, #36	@ 0x24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd90      	pop	{r4, r7, pc}

0800cca8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b088      	sub	sp, #32
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d904      	bls.n	800ccce <remove_chain+0x26>
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d301      	bcc.n	800ccd2 <remove_chain+0x2a>
 800ccce:	2302      	movs	r3, #2
 800ccd0:	e04b      	b.n	800cd6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00c      	beq.n	800ccf2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ccd8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	69b8      	ldr	r0, [r7, #24]
 800cce0:	f7ff fef8 	bl	800cad4 <put_fat>
 800cce4:	4603      	mov	r3, r0
 800cce6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cce8:	7ffb      	ldrb	r3, [r7, #31]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <remove_chain+0x4a>
 800ccee:	7ffb      	ldrb	r3, [r7, #31]
 800ccf0:	e03b      	b.n	800cd6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff fe46 	bl	800c986 <get_fat>
 800ccfa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d031      	beq.n	800cd66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d101      	bne.n	800cd0c <remove_chain+0x64>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	e02e      	b.n	800cd6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd12:	d101      	bne.n	800cd18 <remove_chain+0x70>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e028      	b.n	800cd6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cd18:	2200      	movs	r2, #0
 800cd1a:	68b9      	ldr	r1, [r7, #8]
 800cd1c:	69b8      	ldr	r0, [r7, #24]
 800cd1e:	f7ff fed9 	bl	800cad4 <put_fat>
 800cd22:	4603      	mov	r3, r0
 800cd24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd26:	7ffb      	ldrb	r3, [r7, #31]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <remove_chain+0x88>
 800cd2c:	7ffb      	ldrb	r3, [r7, #31]
 800cd2e:	e01c      	b.n	800cd6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	695a      	ldr	r2, [r3, #20]
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	3b02      	subs	r3, #2
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d20b      	bcs.n	800cd56 <remove_chain+0xae>
			fs->free_clst++;
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	695b      	ldr	r3, [r3, #20]
 800cd42:	1c5a      	adds	r2, r3, #1
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	791b      	ldrb	r3, [r3, #4]
 800cd4c:	f043 0301 	orr.w	r3, r3, #1
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d3c6      	bcc.n	800ccf2 <remove_chain+0x4a>
 800cd64:	e000      	b.n	800cd68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cd66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3720      	adds	r7, #32
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b088      	sub	sp, #32
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10d      	bne.n	800cda4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d004      	beq.n	800cd9e <create_chain+0x2c>
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	699b      	ldr	r3, [r3, #24]
 800cd98:	69ba      	ldr	r2, [r7, #24]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d31b      	bcc.n	800cdd6 <create_chain+0x64>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	61bb      	str	r3, [r7, #24]
 800cda2:	e018      	b.n	800cdd6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7ff fded 	bl	800c986 <get_fat>
 800cdac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d801      	bhi.n	800cdb8 <create_chain+0x46>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e070      	b.n	800ce9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdbe:	d101      	bne.n	800cdc4 <create_chain+0x52>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	e06a      	b.n	800ce9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	699b      	ldr	r3, [r3, #24]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d201      	bcs.n	800cdd2 <create_chain+0x60>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	e063      	b.n	800ce9a <create_chain+0x128>
		scl = clst;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	3301      	adds	r3, #1
 800cdde:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	69fa      	ldr	r2, [r7, #28]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d307      	bcc.n	800cdfa <create_chain+0x88>
				ncl = 2;
 800cdea:	2302      	movs	r3, #2
 800cdec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cdee:	69fa      	ldr	r2, [r7, #28]
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d901      	bls.n	800cdfa <create_chain+0x88>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	e04f      	b.n	800ce9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cdfa:	69f9      	ldr	r1, [r7, #28]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff fdc2 	bl	800c986 <get_fat>
 800ce02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00e      	beq.n	800ce28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d003      	beq.n	800ce18 <create_chain+0xa6>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	d101      	bne.n	800ce1c <create_chain+0xaa>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	e03e      	b.n	800ce9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ce1c:	69fa      	ldr	r2, [r7, #28]
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d1da      	bne.n	800cdda <create_chain+0x68>
 800ce24:	2300      	movs	r3, #0
 800ce26:	e038      	b.n	800ce9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ce28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce2e:	69f9      	ldr	r1, [r7, #28]
 800ce30:	6938      	ldr	r0, [r7, #16]
 800ce32:	f7ff fe4f 	bl	800cad4 <put_fat>
 800ce36:	4603      	mov	r3, r0
 800ce38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d109      	bne.n	800ce54 <create_chain+0xe2>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d006      	beq.n	800ce54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ce46:	69fa      	ldr	r2, [r7, #28]
 800ce48:	6839      	ldr	r1, [r7, #0]
 800ce4a:	6938      	ldr	r0, [r7, #16]
 800ce4c:	f7ff fe42 	bl	800cad4 <put_fat>
 800ce50:	4603      	mov	r3, r0
 800ce52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ce54:	7dfb      	ldrb	r3, [r7, #23]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d116      	bne.n	800ce88 <create_chain+0x116>
		fs->last_clst = ncl;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	69fa      	ldr	r2, [r7, #28]
 800ce5e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	695a      	ldr	r2, [r3, #20]
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	699b      	ldr	r3, [r3, #24]
 800ce68:	3b02      	subs	r3, #2
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d804      	bhi.n	800ce78 <create_chain+0x106>
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	1e5a      	subs	r2, r3, #1
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	791b      	ldrb	r3, [r3, #4]
 800ce7c:	f043 0301 	orr.w	r3, r3, #1
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	711a      	strb	r2, [r3, #4]
 800ce86:	e007      	b.n	800ce98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d102      	bne.n	800ce94 <create_chain+0x122>
 800ce8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce92:	e000      	b.n	800ce96 <create_chain+0x124>
 800ce94:	2301      	movs	r3, #1
 800ce96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ce98:	69fb      	ldr	r3, [r7, #28]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3720      	adds	r7, #32
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cea2:	b480      	push	{r7}
 800cea4:	b087      	sub	sp, #28
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb6:	3304      	adds	r3, #4
 800ceb8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	0a5b      	lsrs	r3, r3, #9
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	8952      	ldrh	r2, [r2, #10]
 800cec2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cec6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	1d1a      	adds	r2, r3, #4
 800cecc:	613a      	str	r2, [r7, #16]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <clmt_clust+0x3a>
 800ced8:	2300      	movs	r3, #0
 800ceda:	e010      	b.n	800cefe <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cedc:	697a      	ldr	r2, [r7, #20]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d307      	bcc.n	800cef4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	617b      	str	r3, [r7, #20]
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	3304      	adds	r3, #4
 800cef0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cef2:	e7e9      	b.n	800cec8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cef4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	4413      	add	r3, r2
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b086      	sub	sp, #24
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
 800cf12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf20:	d204      	bcs.n	800cf2c <dir_sdi+0x22>
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	f003 031f 	and.w	r3, r3, #31
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d001      	beq.n	800cf30 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	e063      	b.n	800cff8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d106      	bne.n	800cf50 <dir_sdi+0x46>
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d902      	bls.n	800cf50 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf4e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d10c      	bne.n	800cf70 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	095b      	lsrs	r3, r3, #5
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	8912      	ldrh	r2, [r2, #8]
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d301      	bcc.n	800cf66 <dir_sdi+0x5c>
 800cf62:	2302      	movs	r3, #2
 800cf64:	e048      	b.n	800cff8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	61da      	str	r2, [r3, #28]
 800cf6e:	e029      	b.n	800cfc4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	895b      	ldrh	r3, [r3, #10]
 800cf74:	025b      	lsls	r3, r3, #9
 800cf76:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf78:	e019      	b.n	800cfae <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6979      	ldr	r1, [r7, #20]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7ff fd01 	bl	800c986 <get_fat>
 800cf84:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8c:	d101      	bne.n	800cf92 <dir_sdi+0x88>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e032      	b.n	800cff8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d904      	bls.n	800cfa2 <dir_sdi+0x98>
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	697a      	ldr	r2, [r7, #20]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d301      	bcc.n	800cfa6 <dir_sdi+0x9c>
 800cfa2:	2302      	movs	r3, #2
 800cfa4:	e028      	b.n	800cff8 <dir_sdi+0xee>
			ofs -= csz;
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d2e1      	bcs.n	800cf7a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cfb6:	6979      	ldr	r1, [r7, #20]
 800cfb8:	6938      	ldr	r0, [r7, #16]
 800cfba:	f7ff fcc5 	bl	800c948 <clust2sect>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	697a      	ldr	r2, [r7, #20]
 800cfc8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d101      	bne.n	800cfd6 <dir_sdi+0xcc>
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	e010      	b.n	800cff8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	69da      	ldr	r2, [r3, #28]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	0a5b      	lsrs	r3, r3, #9
 800cfde:	441a      	add	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff0:	441a      	add	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3718      	adds	r7, #24
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	3320      	adds	r3, #32
 800d016:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d003      	beq.n	800d028 <dir_next+0x28>
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d026:	d301      	bcc.n	800d02c <dir_next+0x2c>
 800d028:	2304      	movs	r3, #4
 800d02a:	e0aa      	b.n	800d182 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d032:	2b00      	cmp	r3, #0
 800d034:	f040 8098 	bne.w	800d168 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	1c5a      	adds	r2, r3, #1
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10b      	bne.n	800d062 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	095b      	lsrs	r3, r3, #5
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	8912      	ldrh	r2, [r2, #8]
 800d052:	4293      	cmp	r3, r2
 800d054:	f0c0 8088 	bcc.w	800d168 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	61da      	str	r2, [r3, #28]
 800d05e:	2304      	movs	r3, #4
 800d060:	e08f      	b.n	800d182 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	0a5b      	lsrs	r3, r3, #9
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	8952      	ldrh	r2, [r2, #10]
 800d06a:	3a01      	subs	r2, #1
 800d06c:	4013      	ands	r3, r2
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d17a      	bne.n	800d168 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f7ff fc83 	bl	800c986 <get_fat>
 800d080:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d801      	bhi.n	800d08c <dir_next+0x8c>
 800d088:	2302      	movs	r3, #2
 800d08a:	e07a      	b.n	800d182 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d101      	bne.n	800d098 <dir_next+0x98>
 800d094:	2301      	movs	r3, #1
 800d096:	e074      	b.n	800d182 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	699b      	ldr	r3, [r3, #24]
 800d09c:	697a      	ldr	r2, [r7, #20]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d358      	bcc.n	800d154 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d104      	bne.n	800d0b2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	61da      	str	r2, [r3, #28]
 800d0ae:	2304      	movs	r3, #4
 800d0b0:	e067      	b.n	800d182 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	699b      	ldr	r3, [r3, #24]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	4610      	mov	r0, r2
 800d0bc:	f7ff fe59 	bl	800cd72 <create_chain>
 800d0c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <dir_next+0xcc>
 800d0c8:	2307      	movs	r3, #7
 800d0ca:	e05a      	b.n	800d182 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d101      	bne.n	800d0d6 <dir_next+0xd6>
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	e055      	b.n	800d182 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d101      	bne.n	800d0e2 <dir_next+0xe2>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e04f      	b.n	800d182 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7ff fb50 	bl	800c788 <sync_window>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <dir_next+0xf2>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e047      	b.n	800d182 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3334      	adds	r3, #52	@ 0x34
 800d0f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff f97a 	bl	800c3f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d102:	2300      	movs	r3, #0
 800d104:	613b      	str	r3, [r7, #16]
 800d106:	6979      	ldr	r1, [r7, #20]
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f7ff fc1d 	bl	800c948 <clust2sect>
 800d10e:	4602      	mov	r2, r0
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	631a      	str	r2, [r3, #48]	@ 0x30
 800d114:	e012      	b.n	800d13c <dir_next+0x13c>
						fs->wflag = 1;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2201      	movs	r2, #1
 800d11a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f7ff fb33 	bl	800c788 <sync_window>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <dir_next+0x12c>
 800d128:	2301      	movs	r3, #1
 800d12a:	e02a      	b.n	800d182 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	3301      	adds	r3, #1
 800d130:	613b      	str	r3, [r7, #16]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d136:	1c5a      	adds	r2, r3, #1
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	895b      	ldrh	r3, [r3, #10]
 800d140:	461a      	mov	r2, r3
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	4293      	cmp	r3, r2
 800d146:	d3e6      	bcc.n	800d116 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	1ad2      	subs	r2, r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	697a      	ldr	r2, [r7, #20]
 800d158:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d15a:	6979      	ldr	r1, [r7, #20]
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7ff fbf3 	bl	800c948 <clust2sect>
 800d162:	4602      	mov	r2, r0
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d17a:	441a      	add	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	3718      	adds	r7, #24
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b086      	sub	sp, #24
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d19a:	2100      	movs	r1, #0
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff feb4 	bl	800cf0a <dir_sdi>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d12b      	bne.n	800d204 <dir_alloc+0x7a>
		n = 0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	69db      	ldr	r3, [r3, #28]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7ff fb2a 	bl	800c810 <move_window>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d11d      	bne.n	800d202 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	2be5      	cmp	r3, #229	@ 0xe5
 800d1ce:	d004      	beq.n	800d1da <dir_alloc+0x50>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a1b      	ldr	r3, [r3, #32]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d107      	bne.n	800d1ea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	613b      	str	r3, [r7, #16]
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d102      	bne.n	800d1ee <dir_alloc+0x64>
 800d1e8:	e00c      	b.n	800d204 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d1ee:	2101      	movs	r1, #1
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7ff ff05 	bl	800d000 <dir_next>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d0d7      	beq.n	800d1b0 <dir_alloc+0x26>
 800d200:	e000      	b.n	800d204 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d202:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d204:	7dfb      	ldrb	r3, [r7, #23]
 800d206:	2b04      	cmp	r3, #4
 800d208:	d101      	bne.n	800d20e <dir_alloc+0x84>
 800d20a:	2307      	movs	r3, #7
 800d20c:	75fb      	strb	r3, [r7, #23]
	return res;
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3718      	adds	r7, #24
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	331a      	adds	r3, #26
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff f842 	bl	800c2b0 <ld_word>
 800d22c:	4603      	mov	r3, r0
 800d22e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	2b03      	cmp	r3, #3
 800d236:	d109      	bne.n	800d24c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	3314      	adds	r3, #20
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7ff f837 	bl	800c2b0 <ld_word>
 800d242:	4603      	mov	r3, r0
 800d244:	041b      	lsls	r3, r3, #16
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	4313      	orrs	r3, r2
 800d24a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d24c:	68fb      	ldr	r3, [r7, #12]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	331a      	adds	r3, #26
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	b292      	uxth	r2, r2
 800d26a:	4611      	mov	r1, r2
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7ff f85a 	bl	800c326 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2b03      	cmp	r3, #3
 800d278:	d109      	bne.n	800d28e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	f103 0214 	add.w	r2, r3, #20
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	0c1b      	lsrs	r3, r3, #16
 800d284:	b29b      	uxth	r3, r3
 800d286:	4619      	mov	r1, r3
 800d288:	4610      	mov	r0, r2
 800d28a:	f7ff f84c 	bl	800c326 <st_word>
	}
}
 800d28e:	bf00      	nop
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d298:	b590      	push	{r4, r7, lr}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	331a      	adds	r3, #26
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7ff f802 	bl	800c2b0 <ld_word>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <cmp_lfn+0x1e>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	e059      	b.n	800d36a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2be:	1e5a      	subs	r2, r3, #1
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	81fb      	strh	r3, [r7, #14]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	613b      	str	r3, [r7, #16]
 800d2d4:	e033      	b.n	800d33e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d2d6:	4a27      	ldr	r2, [pc, #156]	@ (800d374 <cmp_lfn+0xdc>)
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	4413      	add	r3, r2
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe ffe3 	bl	800c2b0 <ld_word>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d2ee:	89fb      	ldrh	r3, [r7, #14]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d01a      	beq.n	800d32a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2bfe      	cmp	r3, #254	@ 0xfe
 800d2f8:	d812      	bhi.n	800d320 <cmp_lfn+0x88>
 800d2fa:	89bb      	ldrh	r3, [r7, #12]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f001 fcd5 	bl	800ecac <ff_wtoupper>
 800d302:	4603      	mov	r3, r0
 800d304:	461c      	mov	r4, r3
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	1c5a      	adds	r2, r3, #1
 800d30a:	617a      	str	r2, [r7, #20]
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	881b      	ldrh	r3, [r3, #0]
 800d314:	4618      	mov	r0, r3
 800d316:	f001 fcc9 	bl	800ecac <ff_wtoupper>
 800d31a:	4603      	mov	r3, r0
 800d31c:	429c      	cmp	r4, r3
 800d31e:	d001      	beq.n	800d324 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d320:	2300      	movs	r3, #0
 800d322:	e022      	b.n	800d36a <cmp_lfn+0xd2>
			}
			wc = uc;
 800d324:	89bb      	ldrh	r3, [r7, #12]
 800d326:	81fb      	strh	r3, [r7, #14]
 800d328:	e006      	b.n	800d338 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d32a:	89bb      	ldrh	r3, [r7, #12]
 800d32c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d330:	4293      	cmp	r3, r2
 800d332:	d001      	beq.n	800d338 <cmp_lfn+0xa0>
 800d334:	2300      	movs	r3, #0
 800d336:	e018      	b.n	800d36a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	3301      	adds	r3, #1
 800d33c:	613b      	str	r3, [r7, #16]
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	2b0c      	cmp	r3, #12
 800d342:	d9c8      	bls.n	800d2d6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00b      	beq.n	800d368 <cmp_lfn+0xd0>
 800d350:	89fb      	ldrh	r3, [r7, #14]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d008      	beq.n	800d368 <cmp_lfn+0xd0>
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	4413      	add	r3, r2
 800d35e:	881b      	ldrh	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <cmp_lfn+0xd0>
 800d364:	2300      	movs	r3, #0
 800d366:	e000      	b.n	800d36a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d368:	2301      	movs	r3, #1
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	371c      	adds	r7, #28
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd90      	pop	{r4, r7, pc}
 800d372:	bf00      	nop
 800d374:	080127bc 	.word	0x080127bc

0800d378 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4611      	mov	r1, r2
 800d384:	461a      	mov	r2, r3
 800d386:	460b      	mov	r3, r1
 800d388:	71fb      	strb	r3, [r7, #7]
 800d38a:	4613      	mov	r3, r2
 800d38c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	330d      	adds	r3, #13
 800d392:	79ba      	ldrb	r2, [r7, #6]
 800d394:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	330b      	adds	r3, #11
 800d39a:	220f      	movs	r2, #15
 800d39c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	330c      	adds	r3, #12
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	331a      	adds	r3, #26
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fe ffba 	bl	800c326 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d3b2:	79fb      	ldrb	r3, [r7, #7]
 800d3b4:	1e5a      	subs	r2, r3, #1
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	4413      	add	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	82fb      	strh	r3, [r7, #22]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d3ca:	8afb      	ldrh	r3, [r7, #22]
 800d3cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d007      	beq.n	800d3e4 <put_lfn+0x6c>
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	61fa      	str	r2, [r7, #28]
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	4413      	add	r3, r2
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d3e4:	4a17      	ldr	r2, [pc, #92]	@ (800d444 <put_lfn+0xcc>)
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	8afa      	ldrh	r2, [r7, #22]
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fe ff95 	bl	800c326 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d3fc:	8afb      	ldrh	r3, [r7, #22]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d102      	bne.n	800d408 <put_lfn+0x90>
 800d402:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d406:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	3301      	adds	r3, #1
 800d40c:	61bb      	str	r3, [r7, #24]
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	2b0c      	cmp	r3, #12
 800d412:	d9da      	bls.n	800d3ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d414:	8afb      	ldrh	r3, [r7, #22]
 800d416:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d006      	beq.n	800d42c <put_lfn+0xb4>
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	4413      	add	r3, r2
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d103      	bne.n	800d434 <put_lfn+0xbc>
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d432:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	79fa      	ldrb	r2, [r7, #7]
 800d438:	701a      	strb	r2, [r3, #0]
}
 800d43a:	bf00      	nop
 800d43c:	3720      	adds	r7, #32
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	080127bc 	.word	0x080127bc

0800d448 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08c      	sub	sp, #48	@ 0x30
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d456:	220b      	movs	r2, #11
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7fe ffaa 	bl	800c3b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	2b05      	cmp	r3, #5
 800d464:	d929      	bls.n	800d4ba <gen_numname+0x72>
		sr = seq;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d46a:	e020      	b.n	800d4ae <gen_numname+0x66>
			wc = *lfn++;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	1c9a      	adds	r2, r3, #2
 800d470:	607a      	str	r2, [r7, #4]
 800d472:	881b      	ldrh	r3, [r3, #0]
 800d474:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d476:	2300      	movs	r3, #0
 800d478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d47a:	e015      	b.n	800d4a8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	005a      	lsls	r2, r3, #1
 800d480:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d482:	f003 0301 	and.w	r3, r3, #1
 800d486:	4413      	add	r3, r2
 800d488:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d48a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d48c:	085b      	lsrs	r3, r3, #1
 800d48e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <gen_numname+0x5a>
 800d49a:	69fa      	ldr	r2, [r7, #28]
 800d49c:	4b30      	ldr	r3, [pc, #192]	@ (800d560 <gen_numname+0x118>)
 800d49e:	4053      	eors	r3, r2
 800d4a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4aa:	2b0f      	cmp	r3, #15
 800d4ac:	d9e6      	bls.n	800d47c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1da      	bne.n	800d46c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d4ba:	2307      	movs	r3, #7
 800d4bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	f003 030f 	and.w	r3, r3, #15
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	3330      	adds	r3, #48	@ 0x30
 800d4ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d4ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4d2:	2b39      	cmp	r3, #57	@ 0x39
 800d4d4:	d904      	bls.n	800d4e0 <gen_numname+0x98>
 800d4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4da:	3307      	adds	r3, #7
 800d4dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e2:	1e5a      	subs	r2, r3, #1
 800d4e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d4e6:	3330      	adds	r3, #48	@ 0x30
 800d4e8:	443b      	add	r3, r7
 800d4ea:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d4ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	091b      	lsrs	r3, r3, #4
 800d4f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1df      	bne.n	800d4be <gen_numname+0x76>
	ns[i] = '~';
 800d4fe:	f107 0214 	add.w	r2, r7, #20
 800d502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d504:	4413      	add	r3, r2
 800d506:	227e      	movs	r2, #126	@ 0x7e
 800d508:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d50a:	2300      	movs	r3, #0
 800d50c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d50e:	e002      	b.n	800d516 <gen_numname+0xce>
 800d510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d512:	3301      	adds	r3, #1
 800d514:	627b      	str	r3, [r7, #36]	@ 0x24
 800d516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d205      	bcs.n	800d52a <gen_numname+0xe2>
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d522:	4413      	add	r3, r2
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	2b20      	cmp	r3, #32
 800d528:	d1f2      	bne.n	800d510 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52c:	2b07      	cmp	r3, #7
 800d52e:	d807      	bhi.n	800d540 <gen_numname+0xf8>
 800d530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d536:	3330      	adds	r3, #48	@ 0x30
 800d538:	443b      	add	r3, r7
 800d53a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d53e:	e000      	b.n	800d542 <gen_numname+0xfa>
 800d540:	2120      	movs	r1, #32
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	627a      	str	r2, [r7, #36]	@ 0x24
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	4413      	add	r3, r2
 800d54c:	460a      	mov	r2, r1
 800d54e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d552:	2b07      	cmp	r3, #7
 800d554:	d9e9      	bls.n	800d52a <gen_numname+0xe2>
}
 800d556:	bf00      	nop
 800d558:	bf00      	nop
 800d55a:	3730      	adds	r7, #48	@ 0x30
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	00011021 	.word	0x00011021

0800d564 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d570:	230b      	movs	r3, #11
 800d572:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	b2da      	uxtb	r2, r3
 800d578:	0852      	lsrs	r2, r2, #1
 800d57a:	01db      	lsls	r3, r3, #7
 800d57c:	4313      	orrs	r3, r2
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	1c59      	adds	r1, r3, #1
 800d584:	6079      	str	r1, [r7, #4]
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	4413      	add	r3, r2
 800d58a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	3b01      	subs	r3, #1
 800d590:	60bb      	str	r3, [r7, #8]
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1ed      	bne.n	800d574 <sum_sfn+0x10>
	return sum;
 800d598:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3714      	adds	r7, #20
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b086      	sub	sp, #24
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff fca7 	bl	800cf0a <dir_sdi>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d5c0:	7dfb      	ldrb	r3, [r7, #23]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <dir_find+0x24>
 800d5c6:	7dfb      	ldrb	r3, [r7, #23]
 800d5c8:	e0a9      	b.n	800d71e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d5ca:	23ff      	movs	r3, #255	@ 0xff
 800d5cc:	753b      	strb	r3, [r7, #20]
 800d5ce:	7d3b      	ldrb	r3, [r7, #20]
 800d5d0:	757b      	strb	r3, [r7, #21]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	69db      	ldr	r3, [r3, #28]
 800d5de:	4619      	mov	r1, r3
 800d5e0:	6938      	ldr	r0, [r7, #16]
 800d5e2:	f7ff f915 	bl	800c810 <move_window>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d5ea:	7dfb      	ldrb	r3, [r7, #23]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f040 8090 	bne.w	800d712 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d5fa:	7dbb      	ldrb	r3, [r7, #22]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d102      	bne.n	800d606 <dir_find+0x60>
 800d600:	2304      	movs	r3, #4
 800d602:	75fb      	strb	r3, [r7, #23]
 800d604:	e08a      	b.n	800d71c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	330b      	adds	r3, #11
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d612:	73fb      	strb	r3, [r7, #15]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	7bfa      	ldrb	r2, [r7, #15]
 800d618:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d61a:	7dbb      	ldrb	r3, [r7, #22]
 800d61c:	2be5      	cmp	r3, #229	@ 0xe5
 800d61e:	d007      	beq.n	800d630 <dir_find+0x8a>
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	f003 0308 	and.w	r3, r3, #8
 800d626:	2b00      	cmp	r3, #0
 800d628:	d009      	beq.n	800d63e <dir_find+0x98>
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
 800d62c:	2b0f      	cmp	r3, #15
 800d62e:	d006      	beq.n	800d63e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d630:	23ff      	movs	r3, #255	@ 0xff
 800d632:	757b      	strb	r3, [r7, #21]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f04f 32ff 	mov.w	r2, #4294967295
 800d63a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d63c:	e05e      	b.n	800d6fc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d63e:	7bfb      	ldrb	r3, [r7, #15]
 800d640:	2b0f      	cmp	r3, #15
 800d642:	d136      	bne.n	800d6b2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d64a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d154      	bne.n	800d6fc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d652:	7dbb      	ldrb	r3, [r7, #22]
 800d654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00d      	beq.n	800d678 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a1b      	ldr	r3, [r3, #32]
 800d660:	7b5b      	ldrb	r3, [r3, #13]
 800d662:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d664:	7dbb      	ldrb	r3, [r7, #22]
 800d666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d66a:	75bb      	strb	r3, [r7, #22]
 800d66c:	7dbb      	ldrb	r3, [r7, #22]
 800d66e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	695a      	ldr	r2, [r3, #20]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d678:	7dba      	ldrb	r2, [r7, #22]
 800d67a:	7d7b      	ldrb	r3, [r7, #21]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d115      	bne.n	800d6ac <dir_find+0x106>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a1b      	ldr	r3, [r3, #32]
 800d684:	330d      	adds	r3, #13
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	7d3a      	ldrb	r2, [r7, #20]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d10e      	bne.n	800d6ac <dir_find+0x106>
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	68da      	ldr	r2, [r3, #12]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	4619      	mov	r1, r3
 800d698:	4610      	mov	r0, r2
 800d69a:	f7ff fdfd 	bl	800d298 <cmp_lfn>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d003      	beq.n	800d6ac <dir_find+0x106>
 800d6a4:	7d7b      	ldrb	r3, [r7, #21]
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	e000      	b.n	800d6ae <dir_find+0x108>
 800d6ac:	23ff      	movs	r3, #255	@ 0xff
 800d6ae:	757b      	strb	r3, [r7, #21]
 800d6b0:	e024      	b.n	800d6fc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d6b2:	7d7b      	ldrb	r3, [r7, #21]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d109      	bne.n	800d6cc <dir_find+0x126>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a1b      	ldr	r3, [r3, #32]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff ff51 	bl	800d564 <sum_sfn>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	7d3b      	ldrb	r3, [r7, #20]
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d024      	beq.n	800d716 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d6d2:	f003 0301 	and.w	r3, r3, #1
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10a      	bne.n	800d6f0 <dir_find+0x14a>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a18      	ldr	r0, [r3, #32]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	3324      	adds	r3, #36	@ 0x24
 800d6e2:	220b      	movs	r2, #11
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	f7fe fea1 	bl	800c42c <mem_cmp>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d014      	beq.n	800d71a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d6f0:	23ff      	movs	r3, #255	@ 0xff
 800d6f2:	757b      	strb	r3, [r7, #21]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6fa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7ff fc7e 	bl	800d000 <dir_next>
 800d704:	4603      	mov	r3, r0
 800d706:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d708:	7dfb      	ldrb	r3, [r7, #23]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f43f af65 	beq.w	800d5da <dir_find+0x34>
 800d710:	e004      	b.n	800d71c <dir_find+0x176>
		if (res != FR_OK) break;
 800d712:	bf00      	nop
 800d714:	e002      	b.n	800d71c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d716:	bf00      	nop
 800d718:	e000      	b.n	800d71c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d71a:	bf00      	nop

	return res;
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3718      	adds	r7, #24
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08c      	sub	sp, #48	@ 0x30
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d73c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d001      	beq.n	800d748 <dir_register+0x20>
 800d744:	2306      	movs	r3, #6
 800d746:	e0e0      	b.n	800d90a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d748:	2300      	movs	r3, #0
 800d74a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d74c:	e002      	b.n	800d754 <dir_register+0x2c>
 800d74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d750:	3301      	adds	r3, #1
 800d752:	627b      	str	r3, [r7, #36]	@ 0x24
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	68da      	ldr	r2, [r3, #12]
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	4413      	add	r3, r2
 800d75e:	881b      	ldrh	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1f4      	bne.n	800d74e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d76a:	f107 030c 	add.w	r3, r7, #12
 800d76e:	220c      	movs	r2, #12
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fe1f 	bl	800c3b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d032      	beq.n	800d7e6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2240      	movs	r2, #64	@ 0x40
 800d784:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d788:	2301      	movs	r3, #1
 800d78a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d78c:	e016      	b.n	800d7bc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	68da      	ldr	r2, [r3, #12]
 800d798:	f107 010c 	add.w	r1, r7, #12
 800d79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79e:	f7ff fe53 	bl	800d448 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff feff 	bl	800d5a6 <dir_find>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d7ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7be:	2b63      	cmp	r3, #99	@ 0x63
 800d7c0:	d9e5      	bls.n	800d78e <dir_register+0x66>
 800d7c2:	e000      	b.n	800d7c6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d7c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c8:	2b64      	cmp	r3, #100	@ 0x64
 800d7ca:	d101      	bne.n	800d7d0 <dir_register+0xa8>
 800d7cc:	2307      	movs	r3, #7
 800d7ce:	e09c      	b.n	800d90a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d7d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7d4:	2b04      	cmp	r3, #4
 800d7d6:	d002      	beq.n	800d7de <dir_register+0xb6>
 800d7d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7dc:	e095      	b.n	800d90a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d7de:	7dfa      	ldrb	r2, [r7, #23]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	f003 0302 	and.w	r3, r3, #2
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d007      	beq.n	800d800 <dir_register+0xd8>
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	330c      	adds	r3, #12
 800d7f4:	4a47      	ldr	r2, [pc, #284]	@ (800d914 <dir_register+0x1ec>)
 800d7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7fa:	089b      	lsrs	r3, r3, #2
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	e000      	b.n	800d802 <dir_register+0xda>
 800d800:	2301      	movs	r3, #1
 800d802:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d804:	6a39      	ldr	r1, [r7, #32]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7ff fcbf 	bl	800d18a <dir_alloc>
 800d80c:	4603      	mov	r3, r0
 800d80e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d816:	2b00      	cmp	r3, #0
 800d818:	d148      	bne.n	800d8ac <dir_register+0x184>
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	623b      	str	r3, [r7, #32]
 800d820:	6a3b      	ldr	r3, [r7, #32]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d042      	beq.n	800d8ac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	695a      	ldr	r2, [r3, #20]
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	015b      	lsls	r3, r3, #5
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	4619      	mov	r1, r3
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7ff fb69 	bl	800cf0a <dir_sdi>
 800d838:	4603      	mov	r3, r0
 800d83a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d83e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d842:	2b00      	cmp	r3, #0
 800d844:	d132      	bne.n	800d8ac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	3324      	adds	r3, #36	@ 0x24
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff fe8a 	bl	800d564 <sum_sfn>
 800d850:	4603      	mov	r3, r0
 800d852:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	4619      	mov	r1, r3
 800d85a:	69f8      	ldr	r0, [r7, #28]
 800d85c:	f7fe ffd8 	bl	800c810 <move_window>
 800d860:	4603      	mov	r3, r0
 800d862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d866:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d11d      	bne.n	800d8aa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	68d8      	ldr	r0, [r3, #12]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a19      	ldr	r1, [r3, #32]
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	7efb      	ldrb	r3, [r7, #27]
 800d87c:	f7ff fd7c 	bl	800d378 <put_lfn>
				fs->wflag = 1;
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	2201      	movs	r2, #1
 800d884:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d886:	2100      	movs	r1, #0
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7ff fbb9 	bl	800d000 <dir_next>
 800d88e:	4603      	mov	r3, r0
 800d890:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d107      	bne.n	800d8ac <dir_register+0x184>
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	623b      	str	r3, [r7, #32]
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1d5      	bne.n	800d854 <dir_register+0x12c>
 800d8a8:	e000      	b.n	800d8ac <dir_register+0x184>
				if (res != FR_OK) break;
 800d8aa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d8ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d128      	bne.n	800d906 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	69db      	ldr	r3, [r3, #28]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	69f8      	ldr	r0, [r7, #28]
 800d8bc:	f7fe ffa8 	bl	800c810 <move_window>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d8c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d11b      	bne.n	800d906 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	2220      	movs	r2, #32
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fe fd8d 	bl	800c3f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a18      	ldr	r0, [r3, #32]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3324      	adds	r3, #36	@ 0x24
 800d8e4:	220b      	movs	r2, #11
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	f7fe fd64 	bl	800c3b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	330c      	adds	r3, #12
 800d8f8:	f002 0218 	and.w	r2, r2, #24
 800d8fc:	b2d2      	uxtb	r2, r2
 800d8fe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	2201      	movs	r2, #1
 800d904:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3730      	adds	r7, #48	@ 0x30
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	4ec4ec4f 	.word	0x4ec4ec4f

0800d918 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08a      	sub	sp, #40	@ 0x28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	613b      	str	r3, [r7, #16]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	2300      	movs	r3, #0
 800d932:	617b      	str	r3, [r7, #20]
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	61ba      	str	r2, [r7, #24]
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	4413      	add	r3, r2
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d946:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d948:	2b1f      	cmp	r3, #31
 800d94a:	d940      	bls.n	800d9ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d94c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d94e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d950:	d006      	beq.n	800d960 <create_name+0x48>
 800d952:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d954:	2b5c      	cmp	r3, #92	@ 0x5c
 800d956:	d110      	bne.n	800d97a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d958:	e002      	b.n	800d960 <create_name+0x48>
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	3301      	adds	r3, #1
 800d95e:	61bb      	str	r3, [r7, #24]
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	4413      	add	r3, r2
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b2f      	cmp	r3, #47	@ 0x2f
 800d96a:	d0f6      	beq.n	800d95a <create_name+0x42>
 800d96c:	693a      	ldr	r2, [r7, #16]
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	4413      	add	r3, r2
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b5c      	cmp	r3, #92	@ 0x5c
 800d976:	d0f0      	beq.n	800d95a <create_name+0x42>
			break;
 800d978:	e02a      	b.n	800d9d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2bfe      	cmp	r3, #254	@ 0xfe
 800d97e:	d901      	bls.n	800d984 <create_name+0x6c>
 800d980:	2306      	movs	r3, #6
 800d982:	e17d      	b.n	800dc80 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d986:	b2db      	uxtb	r3, r3
 800d988:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d98a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d98c:	2101      	movs	r1, #1
 800d98e:	4618      	mov	r0, r3
 800d990:	f001 f950 	bl	800ec34 <ff_convert>
 800d994:	4603      	mov	r3, r0
 800d996:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d998:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d101      	bne.n	800d9a2 <create_name+0x8a>
 800d99e:	2306      	movs	r3, #6
 800d9a0:	e16e      	b.n	800dc80 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d9a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9a6:	d809      	bhi.n	800d9bc <create_name+0xa4>
 800d9a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	488d      	ldr	r0, [pc, #564]	@ (800dbe4 <create_name+0x2cc>)
 800d9ae:	f7fe fd64 	bl	800c47a <chk_chr>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <create_name+0xa4>
 800d9b8:	2306      	movs	r3, #6
 800d9ba:	e161      	b.n	800dc80 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	617a      	str	r2, [r7, #20]
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	68fa      	ldr	r2, [r7, #12]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d9ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d9cc:	e7b4      	b.n	800d938 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d9ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	441a      	add	r2, r3
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d9da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9dc:	2b1f      	cmp	r3, #31
 800d9de:	d801      	bhi.n	800d9e4 <create_name+0xcc>
 800d9e0:	2304      	movs	r3, #4
 800d9e2:	e000      	b.n	800d9e6 <create_name+0xce>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d9ea:	e011      	b.n	800da10 <create_name+0xf8>
		w = lfn[di - 1];
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d9f2:	4413      	add	r3, r2
 800d9f4:	005b      	lsls	r3, r3, #1
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	881b      	ldrh	r3, [r3, #0]
 800d9fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d9fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da00:	2b20      	cmp	r3, #32
 800da02:	d002      	beq.n	800da0a <create_name+0xf2>
 800da04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da06:	2b2e      	cmp	r3, #46	@ 0x2e
 800da08:	d106      	bne.n	800da18 <create_name+0x100>
		di--;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1ea      	bne.n	800d9ec <create_name+0xd4>
 800da16:	e000      	b.n	800da1a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800da18:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	4413      	add	r3, r2
 800da22:	2200      	movs	r2, #0
 800da24:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d101      	bne.n	800da30 <create_name+0x118>
 800da2c:	2306      	movs	r3, #6
 800da2e:	e127      	b.n	800dc80 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	3324      	adds	r3, #36	@ 0x24
 800da34:	220b      	movs	r2, #11
 800da36:	2120      	movs	r1, #32
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fe fcdc 	bl	800c3f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800da3e:	2300      	movs	r3, #0
 800da40:	61bb      	str	r3, [r7, #24]
 800da42:	e002      	b.n	800da4a <create_name+0x132>
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	3301      	adds	r3, #1
 800da48:	61bb      	str	r3, [r7, #24]
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	005b      	lsls	r3, r3, #1
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	4413      	add	r3, r2
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	2b20      	cmp	r3, #32
 800da56:	d0f5      	beq.n	800da44 <create_name+0x12c>
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	4413      	add	r3, r2
 800da60:	881b      	ldrh	r3, [r3, #0]
 800da62:	2b2e      	cmp	r3, #46	@ 0x2e
 800da64:	d0ee      	beq.n	800da44 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d009      	beq.n	800da80 <create_name+0x168>
 800da6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da70:	f043 0303 	orr.w	r3, r3, #3
 800da74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800da78:	e002      	b.n	800da80 <create_name+0x168>
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	3b01      	subs	r3, #1
 800da7e:	617b      	str	r3, [r7, #20]
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d009      	beq.n	800da9a <create_name+0x182>
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800da8c:	4413      	add	r3, r2
 800da8e:	005b      	lsls	r3, r3, #1
 800da90:	68fa      	ldr	r2, [r7, #12]
 800da92:	4413      	add	r3, r2
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	2b2e      	cmp	r3, #46	@ 0x2e
 800da98:	d1ef      	bne.n	800da7a <create_name+0x162>

	i = b = 0; ni = 8;
 800da9a:	2300      	movs	r3, #0
 800da9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800daa0:	2300      	movs	r3, #0
 800daa2:	623b      	str	r3, [r7, #32]
 800daa4:	2308      	movs	r3, #8
 800daa6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	61ba      	str	r2, [r7, #24]
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	4413      	add	r3, r2
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dab8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 8090 	beq.w	800dbe0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dac2:	2b20      	cmp	r3, #32
 800dac4:	d006      	beq.n	800dad4 <create_name+0x1bc>
 800dac6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dac8:	2b2e      	cmp	r3, #46	@ 0x2e
 800daca:	d10a      	bne.n	800dae2 <create_name+0x1ca>
 800dacc:	69ba      	ldr	r2, [r7, #24]
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d006      	beq.n	800dae2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dad8:	f043 0303 	orr.w	r3, r3, #3
 800dadc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dae0:	e07d      	b.n	800dbde <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dae2:	6a3a      	ldr	r2, [r7, #32]
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d203      	bcs.n	800daf2 <create_name+0x1da>
 800daea:	69ba      	ldr	r2, [r7, #24]
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d123      	bne.n	800db3a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	2b0b      	cmp	r3, #11
 800daf6:	d106      	bne.n	800db06 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800daf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dafc:	f043 0303 	orr.w	r3, r3, #3
 800db00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800db04:	e075      	b.n	800dbf2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800db06:	69ba      	ldr	r2, [r7, #24]
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d005      	beq.n	800db1a <create_name+0x202>
 800db0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db12:	f043 0303 	orr.w	r3, r3, #3
 800db16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800db1a:	69ba      	ldr	r2, [r7, #24]
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d866      	bhi.n	800dbf0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	61bb      	str	r3, [r7, #24]
 800db26:	2308      	movs	r3, #8
 800db28:	623b      	str	r3, [r7, #32]
 800db2a:	230b      	movs	r3, #11
 800db2c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800db2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800db38:	e051      	b.n	800dbde <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800db3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db3c:	2b7f      	cmp	r3, #127	@ 0x7f
 800db3e:	d914      	bls.n	800db6a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800db40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db42:	2100      	movs	r1, #0
 800db44:	4618      	mov	r0, r3
 800db46:	f001 f875 	bl	800ec34 <ff_convert>
 800db4a:	4603      	mov	r3, r0
 800db4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800db4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db50:	2b00      	cmp	r3, #0
 800db52:	d004      	beq.n	800db5e <create_name+0x246>
 800db54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db56:	3b80      	subs	r3, #128	@ 0x80
 800db58:	4a23      	ldr	r2, [pc, #140]	@ (800dbe8 <create_name+0x2d0>)
 800db5a:	5cd3      	ldrb	r3, [r2, r3]
 800db5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800db5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db62:	f043 0302 	orr.w	r3, r3, #2
 800db66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800db6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d007      	beq.n	800db80 <create_name+0x268>
 800db70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db72:	4619      	mov	r1, r3
 800db74:	481d      	ldr	r0, [pc, #116]	@ (800dbec <create_name+0x2d4>)
 800db76:	f7fe fc80 	bl	800c47a <chk_chr>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d008      	beq.n	800db92 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800db80:	235f      	movs	r3, #95	@ 0x5f
 800db82:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800db84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db88:	f043 0303 	orr.w	r3, r3, #3
 800db8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800db90:	e01b      	b.n	800dbca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800db92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db94:	2b40      	cmp	r3, #64	@ 0x40
 800db96:	d909      	bls.n	800dbac <create_name+0x294>
 800db98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db9a:	2b5a      	cmp	r3, #90	@ 0x5a
 800db9c:	d806      	bhi.n	800dbac <create_name+0x294>
					b |= 2;
 800db9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dba2:	f043 0302 	orr.w	r3, r3, #2
 800dba6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dbaa:	e00e      	b.n	800dbca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dbac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbae:	2b60      	cmp	r3, #96	@ 0x60
 800dbb0:	d90b      	bls.n	800dbca <create_name+0x2b2>
 800dbb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbb4:	2b7a      	cmp	r3, #122	@ 0x7a
 800dbb6:	d808      	bhi.n	800dbca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dbb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dbbc:	f043 0301 	orr.w	r3, r3, #1
 800dbc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dbc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbc6:	3b20      	subs	r3, #32
 800dbc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	1c5a      	adds	r2, r3, #1
 800dbce:	623a      	str	r2, [r7, #32]
 800dbd0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dbd2:	b2d1      	uxtb	r1, r2
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	460a      	mov	r2, r1
 800dbda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dbde:	e763      	b.n	800daa8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dbe0:	bf00      	nop
 800dbe2:	e006      	b.n	800dbf2 <create_name+0x2da>
 800dbe4:	080126d0 	.word	0x080126d0
 800dbe8:	0801273c 	.word	0x0801273c
 800dbec:	080126dc 	.word	0x080126dc
			if (si > di) break;			/* No extension */
 800dbf0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dbf8:	2be5      	cmp	r3, #229	@ 0xe5
 800dbfa:	d103      	bne.n	800dc04 <create_name+0x2ec>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2205      	movs	r2, #5
 800dc00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	2b08      	cmp	r3, #8
 800dc08:	d104      	bne.n	800dc14 <create_name+0x2fc>
 800dc0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dc14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc18:	f003 030c 	and.w	r3, r3, #12
 800dc1c:	2b0c      	cmp	r3, #12
 800dc1e:	d005      	beq.n	800dc2c <create_name+0x314>
 800dc20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc24:	f003 0303 	and.w	r3, r3, #3
 800dc28:	2b03      	cmp	r3, #3
 800dc2a:	d105      	bne.n	800dc38 <create_name+0x320>
 800dc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc30:	f043 0302 	orr.w	r3, r3, #2
 800dc34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dc38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc3c:	f003 0302 	and.w	r3, r3, #2
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d117      	bne.n	800dc74 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dc44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc48:	f003 0303 	and.w	r3, r3, #3
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d105      	bne.n	800dc5c <create_name+0x344>
 800dc50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc54:	f043 0310 	orr.w	r3, r3, #16
 800dc58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dc5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc60:	f003 030c 	and.w	r3, r3, #12
 800dc64:	2b04      	cmp	r3, #4
 800dc66:	d105      	bne.n	800dc74 <create_name+0x35c>
 800dc68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc6c:	f043 0308 	orr.w	r3, r3, #8
 800dc70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dc7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800dc7e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3728      	adds	r7, #40	@ 0x28
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dc9c:	e002      	b.n	800dca4 <follow_path+0x1c>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	3301      	adds	r3, #1
 800dca2:	603b      	str	r3, [r7, #0]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b2f      	cmp	r3, #47	@ 0x2f
 800dcaa:	d0f8      	beq.n	800dc9e <follow_path+0x16>
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	2b5c      	cmp	r3, #92	@ 0x5c
 800dcb2:	d0f4      	beq.n	800dc9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	2b1f      	cmp	r3, #31
 800dcc0:	d80a      	bhi.n	800dcd8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2280      	movs	r2, #128	@ 0x80
 800dcc6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800dcca:	2100      	movs	r1, #0
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7ff f91c 	bl	800cf0a <dir_sdi>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	75fb      	strb	r3, [r7, #23]
 800dcd6:	e043      	b.n	800dd60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dcd8:	463b      	mov	r3, r7
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7ff fe1b 	bl	800d918 <create_name>
 800dce2:	4603      	mov	r3, r0
 800dce4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dce6:	7dfb      	ldrb	r3, [r7, #23]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d134      	bne.n	800dd56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7ff fc5a 	bl	800d5a6 <dir_find>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dcfc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00a      	beq.n	800dd1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dd04:	7dfb      	ldrb	r3, [r7, #23]
 800dd06:	2b04      	cmp	r3, #4
 800dd08:	d127      	bne.n	800dd5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dd0a:	7afb      	ldrb	r3, [r7, #11]
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d122      	bne.n	800dd5a <follow_path+0xd2>
 800dd14:	2305      	movs	r3, #5
 800dd16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dd18:	e01f      	b.n	800dd5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd1a:	7afb      	ldrb	r3, [r7, #11]
 800dd1c:	f003 0304 	and.w	r3, r3, #4
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d11c      	bne.n	800dd5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	799b      	ldrb	r3, [r3, #6]
 800dd28:	f003 0310 	and.w	r3, r3, #16
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dd30:	2305      	movs	r3, #5
 800dd32:	75fb      	strb	r3, [r7, #23]
 800dd34:	e014      	b.n	800dd60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd44:	4413      	add	r3, r2
 800dd46:	4619      	mov	r1, r3
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7ff fa65 	bl	800d218 <ld_clust>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd54:	e7c0      	b.n	800dcd8 <follow_path+0x50>
			if (res != FR_OK) break;
 800dd56:	bf00      	nop
 800dd58:	e002      	b.n	800dd60 <follow_path+0xd8>
				break;
 800dd5a:	bf00      	nop
 800dd5c:	e000      	b.n	800dd60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd5e:	bf00      	nop
			}
		}
	}

	return res;
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dd6a:	b480      	push	{r7}
 800dd6c:	b087      	sub	sp, #28
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dd72:	f04f 33ff 	mov.w	r3, #4294967295
 800dd76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d031      	beq.n	800dde4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	617b      	str	r3, [r7, #20]
 800dd86:	e002      	b.n	800dd8e <get_ldnumber+0x24>
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2b1f      	cmp	r3, #31
 800dd94:	d903      	bls.n	800dd9e <get_ldnumber+0x34>
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	2b3a      	cmp	r3, #58	@ 0x3a
 800dd9c:	d1f4      	bne.n	800dd88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	2b3a      	cmp	r3, #58	@ 0x3a
 800dda4:	d11c      	bne.n	800dde0 <get_ldnumber+0x76>
			tp = *path;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	1c5a      	adds	r2, r3, #1
 800ddb0:	60fa      	str	r2, [r7, #12]
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	3b30      	subs	r3, #48	@ 0x30
 800ddb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	2b09      	cmp	r3, #9
 800ddbc:	d80e      	bhi.n	800dddc <get_ldnumber+0x72>
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d10a      	bne.n	800dddc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d107      	bne.n	800dddc <get_ldnumber+0x72>
					vol = (int)i;
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	617b      	str	r3, [r7, #20]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	697a      	ldr	r2, [r7, #20]
 800ddda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	e002      	b.n	800dde6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dde0:	2300      	movs	r3, #0
 800dde2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dde4:	693b      	ldr	r3, [r7, #16]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	371c      	adds	r7, #28
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
	...

0800ddf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	70da      	strb	r2, [r3, #3]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f04f 32ff 	mov.w	r2, #4294967295
 800de0a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7fe fcfe 	bl	800c810 <move_window>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d001      	beq.n	800de1e <check_fs+0x2a>
 800de1a:	2304      	movs	r3, #4
 800de1c:	e038      	b.n	800de90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3334      	adds	r3, #52	@ 0x34
 800de22:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800de26:	4618      	mov	r0, r3
 800de28:	f7fe fa42 	bl	800c2b0 <ld_word>
 800de2c:	4603      	mov	r3, r0
 800de2e:	461a      	mov	r2, r3
 800de30:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800de34:	429a      	cmp	r2, r3
 800de36:	d001      	beq.n	800de3c <check_fs+0x48>
 800de38:	2303      	movs	r3, #3
 800de3a:	e029      	b.n	800de90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800de42:	2be9      	cmp	r3, #233	@ 0xe9
 800de44:	d009      	beq.n	800de5a <check_fs+0x66>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800de4c:	2beb      	cmp	r3, #235	@ 0xeb
 800de4e:	d11e      	bne.n	800de8e <check_fs+0x9a>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800de56:	2b90      	cmp	r3, #144	@ 0x90
 800de58:	d119      	bne.n	800de8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	3334      	adds	r3, #52	@ 0x34
 800de5e:	3336      	adds	r3, #54	@ 0x36
 800de60:	4618      	mov	r0, r3
 800de62:	f7fe fa3d 	bl	800c2e0 <ld_dword>
 800de66:	4603      	mov	r3, r0
 800de68:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800de6c:	4a0a      	ldr	r2, [pc, #40]	@ (800de98 <check_fs+0xa4>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d101      	bne.n	800de76 <check_fs+0x82>
 800de72:	2300      	movs	r3, #0
 800de74:	e00c      	b.n	800de90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	3334      	adds	r3, #52	@ 0x34
 800de7a:	3352      	adds	r3, #82	@ 0x52
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fe fa2f 	bl	800c2e0 <ld_dword>
 800de82:	4603      	mov	r3, r0
 800de84:	4a05      	ldr	r2, [pc, #20]	@ (800de9c <check_fs+0xa8>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d101      	bne.n	800de8e <check_fs+0x9a>
 800de8a:	2300      	movs	r3, #0
 800de8c:	e000      	b.n	800de90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800de8e:	2302      	movs	r3, #2
}
 800de90:	4618      	mov	r0, r3
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	00544146 	.word	0x00544146
 800de9c:	33544146 	.word	0x33544146

0800dea0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b096      	sub	sp, #88	@ 0x58
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	4613      	mov	r3, r2
 800deac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2200      	movs	r2, #0
 800deb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f7ff ff58 	bl	800dd6a <get_ldnumber>
 800deba:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800debc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800debe:	2b00      	cmp	r3, #0
 800dec0:	da01      	bge.n	800dec6 <find_volume+0x26>
 800dec2:	230b      	movs	r3, #11
 800dec4:	e230      	b.n	800e328 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dec6:	4aa1      	ldr	r2, [pc, #644]	@ (800e14c <find_volume+0x2ac>)
 800dec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dece:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ded0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d101      	bne.n	800deda <find_volume+0x3a>
 800ded6:	230c      	movs	r3, #12
 800ded8:	e226      	b.n	800e328 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dede:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dee0:	79fb      	ldrb	r3, [r7, #7]
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d01a      	beq.n	800df26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800def0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def2:	785b      	ldrb	r3, [r3, #1]
 800def4:	4618      	mov	r0, r3
 800def6:	f7fe f93d 	bl	800c174 <disk_status>
 800defa:	4603      	mov	r3, r0
 800defc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800df00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df04:	f003 0301 	and.w	r3, r3, #1
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10c      	bne.n	800df26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800df0c:	79fb      	ldrb	r3, [r7, #7]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d007      	beq.n	800df22 <find_volume+0x82>
 800df12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df16:	f003 0304 	and.w	r3, r3, #4
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800df1e:	230a      	movs	r3, #10
 800df20:	e202      	b.n	800e328 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800df22:	2300      	movs	r3, #0
 800df24:	e200      	b.n	800e328 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800df26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df28:	2200      	movs	r2, #0
 800df2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800df2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800df34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df36:	785b      	ldrb	r3, [r3, #1]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fe f935 	bl	800c1a8 <disk_initialize>
 800df3e:	4603      	mov	r3, r0
 800df40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800df44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df48:	f003 0301 	and.w	r3, r3, #1
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800df50:	2303      	movs	r3, #3
 800df52:	e1e9      	b.n	800e328 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d007      	beq.n	800df6a <find_volume+0xca>
 800df5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df5e:	f003 0304 	and.w	r3, r3, #4
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800df66:	230a      	movs	r3, #10
 800df68:	e1de      	b.n	800e328 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800df6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800df72:	f7ff ff3f 	bl	800ddf4 <check_fs>
 800df76:	4603      	mov	r3, r0
 800df78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800df7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df80:	2b02      	cmp	r3, #2
 800df82:	d149      	bne.n	800e018 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800df84:	2300      	movs	r3, #0
 800df86:	643b      	str	r3, [r7, #64]	@ 0x40
 800df88:	e01e      	b.n	800dfc8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800df8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800df90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df92:	011b      	lsls	r3, r3, #4
 800df94:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800df98:	4413      	add	r3, r2
 800df9a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800df9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df9e:	3304      	adds	r3, #4
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d006      	beq.n	800dfb4 <find_volume+0x114>
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fe f998 	bl	800c2e0 <ld_dword>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	e000      	b.n	800dfb6 <find_volume+0x116>
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	3358      	adds	r3, #88	@ 0x58
 800dfbc:	443b      	add	r3, r7
 800dfbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dfc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfca:	2b03      	cmp	r3, #3
 800dfcc:	d9dd      	bls.n	800df8a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dfce:	2300      	movs	r3, #0
 800dfd0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dfd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <find_volume+0x13e>
 800dfd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dfde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	3358      	adds	r3, #88	@ 0x58
 800dfe4:	443b      	add	r3, r7
 800dfe6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dfea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dfec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d005      	beq.n	800dffe <find_volume+0x15e>
 800dff2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dff4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dff6:	f7ff fefd 	bl	800ddf4 <check_fs>
 800dffa:	4603      	mov	r3, r0
 800dffc:	e000      	b.n	800e000 <find_volume+0x160>
 800dffe:	2303      	movs	r3, #3
 800e000:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e004:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d905      	bls.n	800e018 <find_volume+0x178>
 800e00c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e00e:	3301      	adds	r3, #1
 800e010:	643b      	str	r3, [r7, #64]	@ 0x40
 800e012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e014:	2b03      	cmp	r3, #3
 800e016:	d9e2      	bls.n	800dfde <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e018:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e01c:	2b04      	cmp	r3, #4
 800e01e:	d101      	bne.n	800e024 <find_volume+0x184>
 800e020:	2301      	movs	r3, #1
 800e022:	e181      	b.n	800e328 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e024:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d901      	bls.n	800e030 <find_volume+0x190>
 800e02c:	230d      	movs	r3, #13
 800e02e:	e17b      	b.n	800e328 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e032:	3334      	adds	r3, #52	@ 0x34
 800e034:	330b      	adds	r3, #11
 800e036:	4618      	mov	r0, r3
 800e038:	f7fe f93a 	bl	800c2b0 <ld_word>
 800e03c:	4603      	mov	r3, r0
 800e03e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e042:	d001      	beq.n	800e048 <find_volume+0x1a8>
 800e044:	230d      	movs	r3, #13
 800e046:	e16f      	b.n	800e328 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04a:	3334      	adds	r3, #52	@ 0x34
 800e04c:	3316      	adds	r3, #22
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fe f92e 	bl	800c2b0 <ld_word>
 800e054:	4603      	mov	r3, r0
 800e056:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d106      	bne.n	800e06c <find_volume+0x1cc>
 800e05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e060:	3334      	adds	r3, #52	@ 0x34
 800e062:	3324      	adds	r3, #36	@ 0x24
 800e064:	4618      	mov	r0, r3
 800e066:	f7fe f93b 	bl	800c2e0 <ld_dword>
 800e06a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e06e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e070:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e074:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e07a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e07e:	789b      	ldrb	r3, [r3, #2]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d005      	beq.n	800e090 <find_volume+0x1f0>
 800e084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e086:	789b      	ldrb	r3, [r3, #2]
 800e088:	2b02      	cmp	r3, #2
 800e08a:	d001      	beq.n	800e090 <find_volume+0x1f0>
 800e08c:	230d      	movs	r3, #13
 800e08e:	e14b      	b.n	800e328 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e092:	789b      	ldrb	r3, [r3, #2]
 800e094:	461a      	mov	r2, r3
 800e096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e098:	fb02 f303 	mul.w	r3, r2, r3
 800e09c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ac:	895b      	ldrh	r3, [r3, #10]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d008      	beq.n	800e0c4 <find_volume+0x224>
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b4:	895b      	ldrh	r3, [r3, #10]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ba:	895b      	ldrh	r3, [r3, #10]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	4013      	ands	r3, r2
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <find_volume+0x228>
 800e0c4:	230d      	movs	r3, #13
 800e0c6:	e12f      	b.n	800e328 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ca:	3334      	adds	r3, #52	@ 0x34
 800e0cc:	3311      	adds	r3, #17
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fe f8ee 	bl	800c2b0 <ld_word>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0de:	891b      	ldrh	r3, [r3, #8]
 800e0e0:	f003 030f 	and.w	r3, r3, #15
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <find_volume+0x24e>
 800e0ea:	230d      	movs	r3, #13
 800e0ec:	e11c      	b.n	800e328 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f0:	3334      	adds	r3, #52	@ 0x34
 800e0f2:	3313      	adds	r3, #19
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fe f8db 	bl	800c2b0 <ld_word>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e0fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e100:	2b00      	cmp	r3, #0
 800e102:	d106      	bne.n	800e112 <find_volume+0x272>
 800e104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e106:	3334      	adds	r3, #52	@ 0x34
 800e108:	3320      	adds	r3, #32
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe f8e8 	bl	800c2e0 <ld_dword>
 800e110:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e114:	3334      	adds	r3, #52	@ 0x34
 800e116:	330e      	adds	r3, #14
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fe f8c9 	bl	800c2b0 <ld_word>
 800e11e:	4603      	mov	r3, r0
 800e120:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e122:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <find_volume+0x28c>
 800e128:	230d      	movs	r3, #13
 800e12a:	e0fd      	b.n	800e328 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e12c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e12e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e130:	4413      	add	r3, r2
 800e132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e134:	8912      	ldrh	r2, [r2, #8]
 800e136:	0912      	lsrs	r2, r2, #4
 800e138:	b292      	uxth	r2, r2
 800e13a:	4413      	add	r3, r2
 800e13c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e13e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e142:	429a      	cmp	r2, r3
 800e144:	d204      	bcs.n	800e150 <find_volume+0x2b0>
 800e146:	230d      	movs	r3, #13
 800e148:	e0ee      	b.n	800e328 <find_volume+0x488>
 800e14a:	bf00      	nop
 800e14c:	20002688 	.word	0x20002688
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e158:	8952      	ldrh	r2, [r2, #10]
 800e15a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e15e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e162:	2b00      	cmp	r3, #0
 800e164:	d101      	bne.n	800e16a <find_volume+0x2ca>
 800e166:	230d      	movs	r3, #13
 800e168:	e0de      	b.n	800e328 <find_volume+0x488>
		fmt = FS_FAT32;
 800e16a:	2303      	movs	r3, #3
 800e16c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e172:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e176:	4293      	cmp	r3, r2
 800e178:	d802      	bhi.n	800e180 <find_volume+0x2e0>
 800e17a:	2302      	movs	r3, #2
 800e17c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e182:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e186:	4293      	cmp	r3, r2
 800e188:	d802      	bhi.n	800e190 <find_volume+0x2f0>
 800e18a:	2301      	movs	r3, #1
 800e18c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e192:	1c9a      	adds	r2, r3, #2
 800e194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e196:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e19c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e19e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e1a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1a2:	441a      	add	r2, r3
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e1a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ac:	441a      	add	r2, r3
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e1b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e1b6:	2b03      	cmp	r3, #3
 800e1b8:	d11e      	bne.n	800e1f8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1bc:	3334      	adds	r3, #52	@ 0x34
 800e1be:	332a      	adds	r3, #42	@ 0x2a
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fe f875 	bl	800c2b0 <ld_word>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <find_volume+0x330>
 800e1cc:	230d      	movs	r3, #13
 800e1ce:	e0ab      	b.n	800e328 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d2:	891b      	ldrh	r3, [r3, #8]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <find_volume+0x33c>
 800e1d8:	230d      	movs	r3, #13
 800e1da:	e0a5      	b.n	800e328 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1de:	3334      	adds	r3, #52	@ 0x34
 800e1e0:	332c      	adds	r3, #44	@ 0x2c
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fe f87c 	bl	800c2e0 <ld_dword>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ec:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f0:	699b      	ldr	r3, [r3, #24]
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1f6:	e01f      	b.n	800e238 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fa:	891b      	ldrh	r3, [r3, #8]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d101      	bne.n	800e204 <find_volume+0x364>
 800e200:	230d      	movs	r3, #13
 800e202:	e091      	b.n	800e328 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e20a:	441a      	add	r2, r3
 800e20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e20e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e210:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e214:	2b02      	cmp	r3, #2
 800e216:	d103      	bne.n	800e220 <find_volume+0x380>
 800e218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	005b      	lsls	r3, r3, #1
 800e21e:	e00a      	b.n	800e236 <find_volume+0x396>
 800e220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e222:	699a      	ldr	r2, [r3, #24]
 800e224:	4613      	mov	r3, r2
 800e226:	005b      	lsls	r3, r3, #1
 800e228:	4413      	add	r3, r2
 800e22a:	085a      	lsrs	r2, r3, #1
 800e22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e22e:	699b      	ldr	r3, [r3, #24]
 800e230:	f003 0301 	and.w	r3, r3, #1
 800e234:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e236:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23a:	69da      	ldr	r2, [r3, #28]
 800e23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e23e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e242:	0a5b      	lsrs	r3, r3, #9
 800e244:	429a      	cmp	r2, r3
 800e246:	d201      	bcs.n	800e24c <find_volume+0x3ac>
 800e248:	230d      	movs	r3, #13
 800e24a:	e06d      	b.n	800e328 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24e:	f04f 32ff 	mov.w	r2, #4294967295
 800e252:	615a      	str	r2, [r3, #20]
 800e254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e256:	695a      	ldr	r2, [r3, #20]
 800e258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25e:	2280      	movs	r2, #128	@ 0x80
 800e260:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e262:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e266:	2b03      	cmp	r3, #3
 800e268:	d149      	bne.n	800e2fe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26c:	3334      	adds	r3, #52	@ 0x34
 800e26e:	3330      	adds	r3, #48	@ 0x30
 800e270:	4618      	mov	r0, r3
 800e272:	f7fe f81d 	bl	800c2b0 <ld_word>
 800e276:	4603      	mov	r3, r0
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d140      	bne.n	800e2fe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e27c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e27e:	3301      	adds	r3, #1
 800e280:	4619      	mov	r1, r3
 800e282:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e284:	f7fe fac4 	bl	800c810 <move_window>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d137      	bne.n	800e2fe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e290:	2200      	movs	r2, #0
 800e292:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e296:	3334      	adds	r3, #52	@ 0x34
 800e298:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7fe f807 	bl	800c2b0 <ld_word>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d127      	bne.n	800e2fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b0:	3334      	adds	r3, #52	@ 0x34
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe f814 	bl	800c2e0 <ld_dword>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	4a1d      	ldr	r2, [pc, #116]	@ (800e330 <find_volume+0x490>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d11e      	bne.n	800e2fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c2:	3334      	adds	r3, #52	@ 0x34
 800e2c4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fe f809 	bl	800c2e0 <ld_dword>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	4a18      	ldr	r2, [pc, #96]	@ (800e334 <find_volume+0x494>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d113      	bne.n	800e2fe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d8:	3334      	adds	r3, #52	@ 0x34
 800e2da:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fd fffe 	bl	800c2e0 <ld_dword>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ec:	3334      	adds	r3, #52	@ 0x34
 800e2ee:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fd fff4 	bl	800c2e0 <ld_dword>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e300:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e304:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e306:	4b0c      	ldr	r3, [pc, #48]	@ (800e338 <find_volume+0x498>)
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	3301      	adds	r3, #1
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	4b0a      	ldr	r3, [pc, #40]	@ (800e338 <find_volume+0x498>)
 800e310:	801a      	strh	r2, [r3, #0]
 800e312:	4b09      	ldr	r3, [pc, #36]	@ (800e338 <find_volume+0x498>)
 800e314:	881a      	ldrh	r2, [r3, #0]
 800e316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e318:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31c:	4a07      	ldr	r2, [pc, #28]	@ (800e33c <find_volume+0x49c>)
 800e31e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e320:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e322:	f7fe fa0d 	bl	800c740 <clear_lock>
#endif
	return FR_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3758      	adds	r7, #88	@ 0x58
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	41615252 	.word	0x41615252
 800e334:	61417272 	.word	0x61417272
 800e338:	2000268c 	.word	0x2000268c
 800e33c:	200026b0 	.word	0x200026b0

0800e340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e34a:	2309      	movs	r3, #9
 800e34c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d01c      	beq.n	800e38e <validate+0x4e>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d018      	beq.n	800e38e <validate+0x4e>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d013      	beq.n	800e38e <validate+0x4e>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	889a      	ldrh	r2, [r3, #4]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	88db      	ldrh	r3, [r3, #6]
 800e370:	429a      	cmp	r2, r3
 800e372:	d10c      	bne.n	800e38e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	785b      	ldrb	r3, [r3, #1]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fd fefa 	bl	800c174 <disk_status>
 800e380:	4603      	mov	r3, r0
 800e382:	f003 0301 	and.w	r3, r3, #1
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <validate+0x4e>
			res = FR_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e38e:	7bfb      	ldrb	r3, [r7, #15]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d102      	bne.n	800e39a <validate+0x5a>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	e000      	b.n	800e39c <validate+0x5c>
 800e39a:	2300      	movs	r3, #0
 800e39c:	683a      	ldr	r2, [r7, #0]
 800e39e:	6013      	str	r3, [r2, #0]
	return res;
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
	...

0800e3ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b088      	sub	sp, #32
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e3be:	f107 0310 	add.w	r3, r7, #16
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff fcd1 	bl	800dd6a <get_ldnumber>
 800e3c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	da01      	bge.n	800e3d4 <f_mount+0x28>
 800e3d0:	230b      	movs	r3, #11
 800e3d2:	e02b      	b.n	800e42c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e3d4:	4a17      	ldr	r2, [pc, #92]	@ (800e434 <f_mount+0x88>)
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d005      	beq.n	800e3f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e3e4:	69b8      	ldr	r0, [r7, #24]
 800e3e6:	f7fe f9ab 	bl	800c740 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	490d      	ldr	r1, [pc, #52]	@ (800e434 <f_mount+0x88>)
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d002      	beq.n	800e412 <f_mount+0x66>
 800e40c:	79fb      	ldrb	r3, [r7, #7]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d001      	beq.n	800e416 <f_mount+0x6a>
 800e412:	2300      	movs	r3, #0
 800e414:	e00a      	b.n	800e42c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e416:	f107 010c 	add.w	r1, r7, #12
 800e41a:	f107 0308 	add.w	r3, r7, #8
 800e41e:	2200      	movs	r2, #0
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff fd3d 	bl	800dea0 <find_volume>
 800e426:	4603      	mov	r3, r0
 800e428:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3720      	adds	r7, #32
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	20002688 	.word	0x20002688

0800e438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b09a      	sub	sp, #104	@ 0x68
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	4613      	mov	r3, r2
 800e444:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <f_open+0x18>
 800e44c:	2309      	movs	r3, #9
 800e44e:	e1a9      	b.n	800e7a4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e450:	79fb      	ldrb	r3, [r7, #7]
 800e452:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e456:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e458:	79fa      	ldrb	r2, [r7, #7]
 800e45a:	f107 0114 	add.w	r1, r7, #20
 800e45e:	f107 0308 	add.w	r3, r7, #8
 800e462:	4618      	mov	r0, r3
 800e464:	f7ff fd1c 	bl	800dea0 <find_volume>
 800e468:	4603      	mov	r3, r0
 800e46a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e46e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e472:	2b00      	cmp	r3, #0
 800e474:	f040 818d 	bne.w	800e792 <f_open+0x35a>
		dj.obj.fs = fs;
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	f107 0318 	add.w	r3, r7, #24
 800e482:	4611      	mov	r1, r2
 800e484:	4618      	mov	r0, r3
 800e486:	f7ff fbff 	bl	800dc88 <follow_path>
 800e48a:	4603      	mov	r3, r0
 800e48c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e490:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e494:	2b00      	cmp	r3, #0
 800e496:	d118      	bne.n	800e4ca <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e498:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e49c:	b25b      	sxtb	r3, r3
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	da03      	bge.n	800e4aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800e4a2:	2306      	movs	r3, #6
 800e4a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e4a8:	e00f      	b.n	800e4ca <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e4aa:	79fb      	ldrb	r3, [r7, #7]
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	bf8c      	ite	hi
 800e4b0:	2301      	movhi	r3, #1
 800e4b2:	2300      	movls	r3, #0
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	f107 0318 	add.w	r3, r7, #24
 800e4bc:	4611      	mov	r1, r2
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fd fff6 	bl	800c4b0 <chk_lock>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e4ca:	79fb      	ldrb	r3, [r7, #7]
 800e4cc:	f003 031c 	and.w	r3, r3, #28
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d07f      	beq.n	800e5d4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e4d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d017      	beq.n	800e50c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e4dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e4e0:	2b04      	cmp	r3, #4
 800e4e2:	d10e      	bne.n	800e502 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e4e4:	f7fe f840 	bl	800c568 <enq_lock>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d006      	beq.n	800e4fc <f_open+0xc4>
 800e4ee:	f107 0318 	add.w	r3, r7, #24
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7ff f918 	bl	800d728 <dir_register>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	e000      	b.n	800e4fe <f_open+0xc6>
 800e4fc:	2312      	movs	r3, #18
 800e4fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	f043 0308 	orr.w	r3, r3, #8
 800e508:	71fb      	strb	r3, [r7, #7]
 800e50a:	e010      	b.n	800e52e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e50c:	7fbb      	ldrb	r3, [r7, #30]
 800e50e:	f003 0311 	and.w	r3, r3, #17
 800e512:	2b00      	cmp	r3, #0
 800e514:	d003      	beq.n	800e51e <f_open+0xe6>
					res = FR_DENIED;
 800e516:	2307      	movs	r3, #7
 800e518:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e51c:	e007      	b.n	800e52e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e51e:	79fb      	ldrb	r3, [r7, #7]
 800e520:	f003 0304 	and.w	r3, r3, #4
 800e524:	2b00      	cmp	r3, #0
 800e526:	d002      	beq.n	800e52e <f_open+0xf6>
 800e528:	2308      	movs	r3, #8
 800e52a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e52e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e532:	2b00      	cmp	r3, #0
 800e534:	d168      	bne.n	800e608 <f_open+0x1d0>
 800e536:	79fb      	ldrb	r3, [r7, #7]
 800e538:	f003 0308 	and.w	r3, r3, #8
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d063      	beq.n	800e608 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e540:	f7fd f8d4 	bl	800b6ec <get_fattime>
 800e544:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e548:	330e      	adds	r3, #14
 800e54a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fd ff05 	bl	800c35c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e554:	3316      	adds	r3, #22
 800e556:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fd feff 	bl	800c35c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e560:	330b      	adds	r3, #11
 800e562:	2220      	movs	r2, #32
 800e564:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e56a:	4611      	mov	r1, r2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fe fe53 	bl	800d218 <ld_clust>
 800e572:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e578:	2200      	movs	r2, #0
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fe fe6b 	bl	800d256 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e582:	331c      	adds	r3, #28
 800e584:	2100      	movs	r1, #0
 800e586:	4618      	mov	r0, r3
 800e588:	f7fd fee8 	bl	800c35c <st_dword>
					fs->wflag = 1;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	2201      	movs	r2, #1
 800e590:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e594:	2b00      	cmp	r3, #0
 800e596:	d037      	beq.n	800e608 <f_open+0x1d0>
						dw = fs->winsect;
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e59c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e59e:	f107 0318 	add.w	r3, r7, #24
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fe fb7e 	bl	800cca8 <remove_chain>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e5b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d126      	bne.n	800e608 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe f926 	bl	800c810 <move_window>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e5ce:	3a01      	subs	r2, #1
 800e5d0:	611a      	str	r2, [r3, #16]
 800e5d2:	e019      	b.n	800e608 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e5d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d115      	bne.n	800e608 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e5dc:	7fbb      	ldrb	r3, [r7, #30]
 800e5de:	f003 0310 	and.w	r3, r3, #16
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d003      	beq.n	800e5ee <f_open+0x1b6>
					res = FR_NO_FILE;
 800e5e6:	2304      	movs	r3, #4
 800e5e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e5ec:	e00c      	b.n	800e608 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e5ee:	79fb      	ldrb	r3, [r7, #7]
 800e5f0:	f003 0302 	and.w	r3, r3, #2
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d007      	beq.n	800e608 <f_open+0x1d0>
 800e5f8:	7fbb      	ldrb	r3, [r7, #30]
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <f_open+0x1d0>
						res = FR_DENIED;
 800e602:	2307      	movs	r3, #7
 800e604:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e608:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d126      	bne.n	800e65e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e610:	79fb      	ldrb	r3, [r7, #7]
 800e612:	f003 0308 	and.w	r3, r3, #8
 800e616:	2b00      	cmp	r3, #0
 800e618:	d003      	beq.n	800e622 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e61a:	79fb      	ldrb	r3, [r7, #7]
 800e61c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e620:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e62a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e630:	79fb      	ldrb	r3, [r7, #7]
 800e632:	2b01      	cmp	r3, #1
 800e634:	bf8c      	ite	hi
 800e636:	2301      	movhi	r3, #1
 800e638:	2300      	movls	r3, #0
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	461a      	mov	r2, r3
 800e63e:	f107 0318 	add.w	r3, r7, #24
 800e642:	4611      	mov	r1, r2
 800e644:	4618      	mov	r0, r3
 800e646:	f7fd ffb1 	bl	800c5ac <inc_lock>
 800e64a:	4602      	mov	r2, r0
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	691b      	ldr	r3, [r3, #16]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d102      	bne.n	800e65e <f_open+0x226>
 800e658:	2302      	movs	r3, #2
 800e65a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e65e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e662:	2b00      	cmp	r3, #0
 800e664:	f040 8095 	bne.w	800e792 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e66c:	4611      	mov	r1, r2
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe fdd2 	bl	800d218 <ld_clust>
 800e674:	4602      	mov	r2, r0
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e67c:	331c      	adds	r3, #28
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fd fe2e 	bl	800c2e0 <ld_dword>
 800e684:	4602      	mov	r2, r0
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2200      	movs	r2, #0
 800e68e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e690:	697a      	ldr	r2, [r7, #20]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	88da      	ldrh	r2, [r3, #6]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	79fa      	ldrb	r2, [r7, #7]
 800e6a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	3330      	adds	r3, #48	@ 0x30
 800e6ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e6be:	2100      	movs	r1, #0
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fd fe98 	bl	800c3f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e6c6:	79fb      	ldrb	r3, [r7, #7]
 800e6c8:	f003 0320 	and.w	r3, r3, #32
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d060      	beq.n	800e792 <f_open+0x35a>
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d05c      	beq.n	800e792 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	68da      	ldr	r2, [r3, #12]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	895b      	ldrh	r3, [r3, #10]
 800e6e4:	025b      	lsls	r3, r3, #9
 800e6e6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6f4:	e016      	b.n	800e724 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fe f943 	bl	800c986 <get_fat>
 800e700:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e704:	2b01      	cmp	r3, #1
 800e706:	d802      	bhi.n	800e70e <f_open+0x2d6>
 800e708:	2302      	movs	r3, #2
 800e70a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e70e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e714:	d102      	bne.n	800e71c <f_open+0x2e4>
 800e716:	2301      	movs	r3, #1
 800e718:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e71c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e71e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e724:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d103      	bne.n	800e734 <f_open+0x2fc>
 800e72c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e72e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e730:	429a      	cmp	r2, r3
 800e732:	d8e0      	bhi.n	800e6f6 <f_open+0x2be>
				}
				fp->clust = clst;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e738:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e73a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d127      	bne.n	800e792 <f_open+0x35a>
 800e742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d022      	beq.n	800e792 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e750:	4618      	mov	r0, r3
 800e752:	f7fe f8f9 	bl	800c948 <clust2sect>
 800e756:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800e758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d103      	bne.n	800e766 <f_open+0x32e>
						res = FR_INT_ERR;
 800e75e:	2302      	movs	r3, #2
 800e760:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e764:	e015      	b.n	800e792 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e768:	0a5a      	lsrs	r2, r3, #9
 800e76a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e76c:	441a      	add	r2, r3
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	7858      	ldrb	r0, [r3, #1]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	6a1a      	ldr	r2, [r3, #32]
 800e780:	2301      	movs	r3, #1
 800e782:	f7fd fd37 	bl	800c1f4 <disk_read>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <f_open+0x35a>
 800e78c:	2301      	movs	r3, #1
 800e78e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e792:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <f_open+0x368>
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2200      	movs	r2, #0
 800e79e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e7a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3768      	adds	r7, #104	@ 0x68
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08e      	sub	sp, #56	@ 0x38
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f107 0214 	add.w	r2, r7, #20
 800e7ca:	4611      	mov	r1, r2
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7ff fdb7 	bl	800e340 <validate>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e7d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d107      	bne.n	800e7f0 <f_read+0x44>
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	7d5b      	ldrb	r3, [r3, #21]
 800e7e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e7e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <f_read+0x4a>
 800e7f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e7f4:	e115      	b.n	800ea22 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	7d1b      	ldrb	r3, [r3, #20]
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d101      	bne.n	800e806 <f_read+0x5a>
 800e802:	2307      	movs	r3, #7
 800e804:	e10d      	b.n	800ea22 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	68da      	ldr	r2, [r3, #12]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	699b      	ldr	r3, [r3, #24]
 800e80e:	1ad3      	subs	r3, r2, r3
 800e810:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	6a3b      	ldr	r3, [r7, #32]
 800e816:	429a      	cmp	r2, r3
 800e818:	f240 80fe 	bls.w	800ea18 <f_read+0x26c>
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e820:	e0fa      	b.n	800ea18 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	699b      	ldr	r3, [r3, #24]
 800e826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f040 80c6 	bne.w	800e9bc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	699b      	ldr	r3, [r3, #24]
 800e834:	0a5b      	lsrs	r3, r3, #9
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	8952      	ldrh	r2, [r2, #10]
 800e83a:	3a01      	subs	r2, #1
 800e83c:	4013      	ands	r3, r2
 800e83e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d12f      	bne.n	800e8a6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d103      	bne.n	800e856 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	633b      	str	r3, [r7, #48]	@ 0x30
 800e854:	e013      	b.n	800e87e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d007      	beq.n	800e86e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	699b      	ldr	r3, [r3, #24]
 800e862:	4619      	mov	r1, r3
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7fe fb1c 	bl	800cea2 <clmt_clust>
 800e86a:	6338      	str	r0, [r7, #48]	@ 0x30
 800e86c:	e007      	b.n	800e87e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	69db      	ldr	r3, [r3, #28]
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f7fe f885 	bl	800c986 <get_fat>
 800e87c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e880:	2b01      	cmp	r3, #1
 800e882:	d804      	bhi.n	800e88e <f_read+0xe2>
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2202      	movs	r2, #2
 800e888:	755a      	strb	r2, [r3, #21]
 800e88a:	2302      	movs	r3, #2
 800e88c:	e0c9      	b.n	800ea22 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e894:	d104      	bne.n	800e8a0 <f_read+0xf4>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	755a      	strb	r2, [r3, #21]
 800e89c:	2301      	movs	r3, #1
 800e89e:	e0c0      	b.n	800ea22 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8a4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	69db      	ldr	r3, [r3, #28]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	4610      	mov	r0, r2
 800e8b0:	f7fe f84a 	bl	800c948 <clust2sect>
 800e8b4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d104      	bne.n	800e8c6 <f_read+0x11a>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2202      	movs	r2, #2
 800e8c0:	755a      	strb	r2, [r3, #21]
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	e0ad      	b.n	800ea22 <f_read+0x276>
			sect += csect;
 800e8c6:	69ba      	ldr	r2, [r7, #24]
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	0a5b      	lsrs	r3, r3, #9
 800e8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d039      	beq.n	800e94e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e8da:	69fa      	ldr	r2, [r7, #28]
 800e8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8de:	4413      	add	r3, r2
 800e8e0:	697a      	ldr	r2, [r7, #20]
 800e8e2:	8952      	ldrh	r2, [r2, #10]
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d905      	bls.n	800e8f4 <f_read+0x148>
					cc = fs->csize - csect;
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	895b      	ldrh	r3, [r3, #10]
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	7858      	ldrb	r0, [r3, #1]
 800e8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fa:	69ba      	ldr	r2, [r7, #24]
 800e8fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e8fe:	f7fd fc79 	bl	800c1f4 <disk_read>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d004      	beq.n	800e912 <f_read+0x166>
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2201      	movs	r2, #1
 800e90c:	755a      	strb	r2, [r3, #21]
 800e90e:	2301      	movs	r3, #1
 800e910:	e087      	b.n	800ea22 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	7d1b      	ldrb	r3, [r3, #20]
 800e916:	b25b      	sxtb	r3, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	da14      	bge.n	800e946 <f_read+0x19a>
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6a1a      	ldr	r2, [r3, #32]
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	1ad3      	subs	r3, r2, r3
 800e924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e926:	429a      	cmp	r2, r3
 800e928:	d90d      	bls.n	800e946 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6a1a      	ldr	r2, [r3, #32]
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	025b      	lsls	r3, r3, #9
 800e934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e936:	18d0      	adds	r0, r2, r3
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	3330      	adds	r3, #48	@ 0x30
 800e93c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e940:	4619      	mov	r1, r3
 800e942:	f7fd fd37 	bl	800c3b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e948:	025b      	lsls	r3, r3, #9
 800e94a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e94c:	e050      	b.n	800e9f0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	69ba      	ldr	r2, [r7, #24]
 800e954:	429a      	cmp	r2, r3
 800e956:	d02e      	beq.n	800e9b6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	7d1b      	ldrb	r3, [r3, #20]
 800e95c:	b25b      	sxtb	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	da18      	bge.n	800e994 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	7858      	ldrb	r0, [r3, #1]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6a1a      	ldr	r2, [r3, #32]
 800e970:	2301      	movs	r3, #1
 800e972:	f7fd fc5f 	bl	800c234 <disk_write>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d004      	beq.n	800e986 <f_read+0x1da>
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2201      	movs	r2, #1
 800e980:	755a      	strb	r2, [r3, #21]
 800e982:	2301      	movs	r3, #1
 800e984:	e04d      	b.n	800ea22 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	7d1b      	ldrb	r3, [r3, #20]
 800e98a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	7858      	ldrb	r0, [r3, #1]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e99e:	2301      	movs	r3, #1
 800e9a0:	69ba      	ldr	r2, [r7, #24]
 800e9a2:	f7fd fc27 	bl	800c1f4 <disk_read>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d004      	beq.n	800e9b6 <f_read+0x20a>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	755a      	strb	r2, [r3, #21]
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e035      	b.n	800ea22 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	69ba      	ldr	r2, [r7, #24]
 800e9ba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9c4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e9c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e9ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d901      	bls.n	800e9d6 <f_read+0x22a>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9e4:	4413      	add	r3, r2
 800e9e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e9ec:	f7fd fce2 	bl	800c3b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e9f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f4:	4413      	add	r3, r2
 800e9f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	699a      	ldr	r2, [r3, #24]
 800e9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9fe:	441a      	add	r2, r3
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	619a      	str	r2, [r3, #24]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0a:	441a      	add	r2, r3
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	601a      	str	r2, [r3, #0]
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f47f af01 	bne.w	800e822 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3738      	adds	r7, #56	@ 0x38
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b086      	sub	sp, #24
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f107 0208 	add.w	r2, r7, #8
 800ea38:	4611      	mov	r1, r2
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7ff fc80 	bl	800e340 <validate>
 800ea40:	4603      	mov	r3, r0
 800ea42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea44:	7dfb      	ldrb	r3, [r7, #23]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d168      	bne.n	800eb1c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	7d1b      	ldrb	r3, [r3, #20]
 800ea4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d062      	beq.n	800eb1c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7d1b      	ldrb	r3, [r3, #20]
 800ea5a:	b25b      	sxtb	r3, r3
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	da15      	bge.n	800ea8c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	7858      	ldrb	r0, [r3, #1]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a1a      	ldr	r2, [r3, #32]
 800ea6e:	2301      	movs	r3, #1
 800ea70:	f7fd fbe0 	bl	800c234 <disk_write>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d001      	beq.n	800ea7e <f_sync+0x54>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e04f      	b.n	800eb1e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	7d1b      	ldrb	r3, [r3, #20]
 800ea82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ea8c:	f7fc fe2e 	bl	800b6ec <get_fattime>
 800ea90:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ea92:	68ba      	ldr	r2, [r7, #8]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea98:	4619      	mov	r1, r3
 800ea9a:	4610      	mov	r0, r2
 800ea9c:	f7fd feb8 	bl	800c810 <move_window>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eaa4:	7dfb      	ldrb	r3, [r7, #23]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d138      	bne.n	800eb1c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	330b      	adds	r3, #11
 800eab4:	781a      	ldrb	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	330b      	adds	r3, #11
 800eaba:	f042 0220 	orr.w	r2, r2, #32
 800eabe:	b2d2      	uxtb	r2, r2
 800eac0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6818      	ldr	r0, [r3, #0]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	461a      	mov	r2, r3
 800eacc:	68f9      	ldr	r1, [r7, #12]
 800eace:	f7fe fbc2 	bl	800d256 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f103 021c 	add.w	r2, r3, #28
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	4619      	mov	r1, r3
 800eade:	4610      	mov	r0, r2
 800eae0:	f7fd fc3c 	bl	800c35c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	3316      	adds	r3, #22
 800eae8:	6939      	ldr	r1, [r7, #16]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fd fc36 	bl	800c35c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	3312      	adds	r3, #18
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fd fc15 	bl	800c326 <st_word>
					fs->wflag = 1;
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2201      	movs	r2, #1
 800eb00:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7fd feb1 	bl	800c86c <sync_fs>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	7d1b      	ldrb	r3, [r3, #20]
 800eb12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eb1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3718      	adds	r7, #24
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b084      	sub	sp, #16
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7ff ff7b 	bl	800ea2a <f_sync>
 800eb34:	4603      	mov	r3, r0
 800eb36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eb38:	7bfb      	ldrb	r3, [r7, #15]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d118      	bne.n	800eb70 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f107 0208 	add.w	r2, r7, #8
 800eb44:	4611      	mov	r1, r2
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7ff fbfa 	bl	800e340 <validate>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eb50:	7bfb      	ldrb	r3, [r7, #15]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10c      	bne.n	800eb70 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fd fdb4 	bl	800c6c8 <dec_lock>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d102      	bne.n	800eb70 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
	...

0800eb7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b087      	sub	sp, #28
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	4613      	mov	r3, r2
 800eb88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb92:	4b1f      	ldr	r3, [pc, #124]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800eb94:	7a5b      	ldrb	r3, [r3, #9]
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d131      	bne.n	800ec00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eb9c:	4b1c      	ldr	r3, [pc, #112]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800eb9e:	7a5b      	ldrb	r3, [r3, #9]
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	461a      	mov	r2, r3
 800eba4:	4b1a      	ldr	r3, [pc, #104]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800eba6:	2100      	movs	r1, #0
 800eba8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ebaa:	4b19      	ldr	r3, [pc, #100]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800ebac:	7a5b      	ldrb	r3, [r3, #9]
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	4a17      	ldr	r2, [pc, #92]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	4413      	add	r3, r2
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ebba:	4b15      	ldr	r3, [pc, #84]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800ebbc:	7a5b      	ldrb	r3, [r3, #9]
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	4b13      	ldr	r3, [pc, #76]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800ebc4:	4413      	add	r3, r2
 800ebc6:	79fa      	ldrb	r2, [r7, #7]
 800ebc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ebca:	4b11      	ldr	r3, [pc, #68]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800ebcc:	7a5b      	ldrb	r3, [r3, #9]
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	1c5a      	adds	r2, r3, #1
 800ebd2:	b2d1      	uxtb	r1, r2
 800ebd4:	4a0e      	ldr	r2, [pc, #56]	@ (800ec10 <FATFS_LinkDriverEx+0x94>)
 800ebd6:	7251      	strb	r1, [r2, #9]
 800ebd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ebda:	7dbb      	ldrb	r3, [r7, #22]
 800ebdc:	3330      	adds	r3, #48	@ 0x30
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	223a      	movs	r2, #58	@ 0x3a
 800ebea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	3302      	adds	r3, #2
 800ebf0:	222f      	movs	r2, #47	@ 0x2f
 800ebf2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	3303      	adds	r3, #3
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ec00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	371c      	adds	r7, #28
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	200028b0 	.word	0x200028b0

0800ec14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ec1e:	2200      	movs	r2, #0
 800ec20:	6839      	ldr	r1, [r7, #0]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff ffaa 	bl	800eb7c <FATFS_LinkDriverEx>
 800ec28:	4603      	mov	r3, r0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
	...

0800ec34 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b085      	sub	sp, #20
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	6039      	str	r1, [r7, #0]
 800ec3e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ec40:	88fb      	ldrh	r3, [r7, #6]
 800ec42:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec44:	d802      	bhi.n	800ec4c <ff_convert+0x18>
		c = chr;
 800ec46:	88fb      	ldrh	r3, [r7, #6]
 800ec48:	81fb      	strh	r3, [r7, #14]
 800ec4a:	e025      	b.n	800ec98 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00b      	beq.n	800ec6a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ec52:	88fb      	ldrh	r3, [r7, #6]
 800ec54:	2bff      	cmp	r3, #255	@ 0xff
 800ec56:	d805      	bhi.n	800ec64 <ff_convert+0x30>
 800ec58:	88fb      	ldrh	r3, [r7, #6]
 800ec5a:	3b80      	subs	r3, #128	@ 0x80
 800ec5c:	4a12      	ldr	r2, [pc, #72]	@ (800eca8 <ff_convert+0x74>)
 800ec5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec62:	e000      	b.n	800ec66 <ff_convert+0x32>
 800ec64:	2300      	movs	r3, #0
 800ec66:	81fb      	strh	r3, [r7, #14]
 800ec68:	e016      	b.n	800ec98 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	81fb      	strh	r3, [r7, #14]
 800ec6e:	e009      	b.n	800ec84 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ec70:	89fb      	ldrh	r3, [r7, #14]
 800ec72:	4a0d      	ldr	r2, [pc, #52]	@ (800eca8 <ff_convert+0x74>)
 800ec74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec78:	88fa      	ldrh	r2, [r7, #6]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d006      	beq.n	800ec8c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ec7e:	89fb      	ldrh	r3, [r7, #14]
 800ec80:	3301      	adds	r3, #1
 800ec82:	81fb      	strh	r3, [r7, #14]
 800ec84:	89fb      	ldrh	r3, [r7, #14]
 800ec86:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec88:	d9f2      	bls.n	800ec70 <ff_convert+0x3c>
 800ec8a:	e000      	b.n	800ec8e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ec8c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ec8e:	89fb      	ldrh	r3, [r7, #14]
 800ec90:	3380      	adds	r3, #128	@ 0x80
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ec98:	89fb      	ldrh	r3, [r7, #14]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	080127cc 	.word	0x080127cc

0800ecac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b087      	sub	sp, #28
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ecb6:	88fb      	ldrh	r3, [r7, #6]
 800ecb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ecbc:	d201      	bcs.n	800ecc2 <ff_wtoupper+0x16>
 800ecbe:	4b3e      	ldr	r3, [pc, #248]	@ (800edb8 <ff_wtoupper+0x10c>)
 800ecc0:	e000      	b.n	800ecc4 <ff_wtoupper+0x18>
 800ecc2:	4b3e      	ldr	r3, [pc, #248]	@ (800edbc <ff_wtoupper+0x110>)
 800ecc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	1c9a      	adds	r2, r3, #2
 800ecca:	617a      	str	r2, [r7, #20]
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ecd0:	8a7b      	ldrh	r3, [r7, #18]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d068      	beq.n	800eda8 <ff_wtoupper+0xfc>
 800ecd6:	88fa      	ldrh	r2, [r7, #6]
 800ecd8:	8a7b      	ldrh	r3, [r7, #18]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d364      	bcc.n	800eda8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	1c9a      	adds	r2, r3, #2
 800ece2:	617a      	str	r2, [r7, #20]
 800ece4:	881b      	ldrh	r3, [r3, #0]
 800ece6:	823b      	strh	r3, [r7, #16]
 800ece8:	8a3b      	ldrh	r3, [r7, #16]
 800ecea:	0a1b      	lsrs	r3, r3, #8
 800ecec:	81fb      	strh	r3, [r7, #14]
 800ecee:	8a3b      	ldrh	r3, [r7, #16]
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ecf4:	88fa      	ldrh	r2, [r7, #6]
 800ecf6:	8a79      	ldrh	r1, [r7, #18]
 800ecf8:	8a3b      	ldrh	r3, [r7, #16]
 800ecfa:	440b      	add	r3, r1
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	da49      	bge.n	800ed94 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ed00:	89fb      	ldrh	r3, [r7, #14]
 800ed02:	2b08      	cmp	r3, #8
 800ed04:	d84f      	bhi.n	800eda6 <ff_wtoupper+0xfa>
 800ed06:	a201      	add	r2, pc, #4	@ (adr r2, 800ed0c <ff_wtoupper+0x60>)
 800ed08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0c:	0800ed31 	.word	0x0800ed31
 800ed10:	0800ed43 	.word	0x0800ed43
 800ed14:	0800ed59 	.word	0x0800ed59
 800ed18:	0800ed61 	.word	0x0800ed61
 800ed1c:	0800ed69 	.word	0x0800ed69
 800ed20:	0800ed71 	.word	0x0800ed71
 800ed24:	0800ed79 	.word	0x0800ed79
 800ed28:	0800ed81 	.word	0x0800ed81
 800ed2c:	0800ed89 	.word	0x0800ed89
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ed30:	88fa      	ldrh	r2, [r7, #6]
 800ed32:	8a7b      	ldrh	r3, [r7, #18]
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	697a      	ldr	r2, [r7, #20]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	881b      	ldrh	r3, [r3, #0]
 800ed3e:	80fb      	strh	r3, [r7, #6]
 800ed40:	e027      	b.n	800ed92 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ed42:	88fa      	ldrh	r2, [r7, #6]
 800ed44:	8a7b      	ldrh	r3, [r7, #18]
 800ed46:	1ad3      	subs	r3, r2, r3
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	f003 0301 	and.w	r3, r3, #1
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	88fa      	ldrh	r2, [r7, #6]
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	80fb      	strh	r3, [r7, #6]
 800ed56:	e01c      	b.n	800ed92 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ed58:	88fb      	ldrh	r3, [r7, #6]
 800ed5a:	3b10      	subs	r3, #16
 800ed5c:	80fb      	strh	r3, [r7, #6]
 800ed5e:	e018      	b.n	800ed92 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ed60:	88fb      	ldrh	r3, [r7, #6]
 800ed62:	3b20      	subs	r3, #32
 800ed64:	80fb      	strh	r3, [r7, #6]
 800ed66:	e014      	b.n	800ed92 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ed68:	88fb      	ldrh	r3, [r7, #6]
 800ed6a:	3b30      	subs	r3, #48	@ 0x30
 800ed6c:	80fb      	strh	r3, [r7, #6]
 800ed6e:	e010      	b.n	800ed92 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ed70:	88fb      	ldrh	r3, [r7, #6]
 800ed72:	3b1a      	subs	r3, #26
 800ed74:	80fb      	strh	r3, [r7, #6]
 800ed76:	e00c      	b.n	800ed92 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ed78:	88fb      	ldrh	r3, [r7, #6]
 800ed7a:	3308      	adds	r3, #8
 800ed7c:	80fb      	strh	r3, [r7, #6]
 800ed7e:	e008      	b.n	800ed92 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ed80:	88fb      	ldrh	r3, [r7, #6]
 800ed82:	3b50      	subs	r3, #80	@ 0x50
 800ed84:	80fb      	strh	r3, [r7, #6]
 800ed86:	e004      	b.n	800ed92 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ed88:	88fb      	ldrh	r3, [r7, #6]
 800ed8a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ed8e:	80fb      	strh	r3, [r7, #6]
 800ed90:	bf00      	nop
			}
			break;
 800ed92:	e008      	b.n	800eda6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ed94:	89fb      	ldrh	r3, [r7, #14]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d195      	bne.n	800ecc6 <ff_wtoupper+0x1a>
 800ed9a:	8a3b      	ldrh	r3, [r7, #16]
 800ed9c:	005b      	lsls	r3, r3, #1
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	4413      	add	r3, r2
 800eda2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800eda4:	e78f      	b.n	800ecc6 <ff_wtoupper+0x1a>
			break;
 800eda6:	bf00      	nop
	}

	return chr;
 800eda8:	88fb      	ldrh	r3, [r7, #6]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	371c      	adds	r7, #28
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	080128cc 	.word	0x080128cc
 800edbc:	08012ac0 	.word	0x08012ac0

0800edc0 <sulp>:
 800edc0:	b570      	push	{r4, r5, r6, lr}
 800edc2:	4604      	mov	r4, r0
 800edc4:	460d      	mov	r5, r1
 800edc6:	ec45 4b10 	vmov	d0, r4, r5
 800edca:	4616      	mov	r6, r2
 800edcc:	f002 f856 	bl	8010e7c <__ulp>
 800edd0:	ec51 0b10 	vmov	r0, r1, d0
 800edd4:	b17e      	cbz	r6, 800edf6 <sulp+0x36>
 800edd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800edda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800edde:	2b00      	cmp	r3, #0
 800ede0:	dd09      	ble.n	800edf6 <sulp+0x36>
 800ede2:	051b      	lsls	r3, r3, #20
 800ede4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ede8:	2400      	movs	r4, #0
 800edea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800edee:	4622      	mov	r2, r4
 800edf0:	462b      	mov	r3, r5
 800edf2:	f7f1 fc21 	bl	8000638 <__aeabi_dmul>
 800edf6:	ec41 0b10 	vmov	d0, r0, r1
 800edfa:	bd70      	pop	{r4, r5, r6, pc}
 800edfc:	0000      	movs	r0, r0
	...

0800ee00 <_strtod_l>:
 800ee00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	b09f      	sub	sp, #124	@ 0x7c
 800ee06:	460c      	mov	r4, r1
 800ee08:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ee0e:	9005      	str	r0, [sp, #20]
 800ee10:	f04f 0a00 	mov.w	sl, #0
 800ee14:	f04f 0b00 	mov.w	fp, #0
 800ee18:	460a      	mov	r2, r1
 800ee1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee1c:	7811      	ldrb	r1, [r2, #0]
 800ee1e:	292b      	cmp	r1, #43	@ 0x2b
 800ee20:	d04a      	beq.n	800eeb8 <_strtod_l+0xb8>
 800ee22:	d838      	bhi.n	800ee96 <_strtod_l+0x96>
 800ee24:	290d      	cmp	r1, #13
 800ee26:	d832      	bhi.n	800ee8e <_strtod_l+0x8e>
 800ee28:	2908      	cmp	r1, #8
 800ee2a:	d832      	bhi.n	800ee92 <_strtod_l+0x92>
 800ee2c:	2900      	cmp	r1, #0
 800ee2e:	d03b      	beq.n	800eea8 <_strtod_l+0xa8>
 800ee30:	2200      	movs	r2, #0
 800ee32:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ee34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ee36:	782a      	ldrb	r2, [r5, #0]
 800ee38:	2a30      	cmp	r2, #48	@ 0x30
 800ee3a:	f040 80b3 	bne.w	800efa4 <_strtod_l+0x1a4>
 800ee3e:	786a      	ldrb	r2, [r5, #1]
 800ee40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ee44:	2a58      	cmp	r2, #88	@ 0x58
 800ee46:	d16e      	bne.n	800ef26 <_strtod_l+0x126>
 800ee48:	9302      	str	r3, [sp, #8]
 800ee4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	4a8e      	ldr	r2, [pc, #568]	@ (800f08c <_strtod_l+0x28c>)
 800ee54:	9805      	ldr	r0, [sp, #20]
 800ee56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ee58:	a919      	add	r1, sp, #100	@ 0x64
 800ee5a:	f001 f909 	bl	8010070 <__gethex>
 800ee5e:	f010 060f 	ands.w	r6, r0, #15
 800ee62:	4604      	mov	r4, r0
 800ee64:	d005      	beq.n	800ee72 <_strtod_l+0x72>
 800ee66:	2e06      	cmp	r6, #6
 800ee68:	d128      	bne.n	800eebc <_strtod_l+0xbc>
 800ee6a:	3501      	adds	r5, #1
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ee70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f040 858e 	bne.w	800f996 <_strtod_l+0xb96>
 800ee7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee7c:	b1cb      	cbz	r3, 800eeb2 <_strtod_l+0xb2>
 800ee7e:	4652      	mov	r2, sl
 800ee80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ee84:	ec43 2b10 	vmov	d0, r2, r3
 800ee88:	b01f      	add	sp, #124	@ 0x7c
 800ee8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8e:	2920      	cmp	r1, #32
 800ee90:	d1ce      	bne.n	800ee30 <_strtod_l+0x30>
 800ee92:	3201      	adds	r2, #1
 800ee94:	e7c1      	b.n	800ee1a <_strtod_l+0x1a>
 800ee96:	292d      	cmp	r1, #45	@ 0x2d
 800ee98:	d1ca      	bne.n	800ee30 <_strtod_l+0x30>
 800ee9a:	2101      	movs	r1, #1
 800ee9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ee9e:	1c51      	adds	r1, r2, #1
 800eea0:	9119      	str	r1, [sp, #100]	@ 0x64
 800eea2:	7852      	ldrb	r2, [r2, #1]
 800eea4:	2a00      	cmp	r2, #0
 800eea6:	d1c5      	bne.n	800ee34 <_strtod_l+0x34>
 800eea8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eeaa:	9419      	str	r4, [sp, #100]	@ 0x64
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f040 8570 	bne.w	800f992 <_strtod_l+0xb92>
 800eeb2:	4652      	mov	r2, sl
 800eeb4:	465b      	mov	r3, fp
 800eeb6:	e7e5      	b.n	800ee84 <_strtod_l+0x84>
 800eeb8:	2100      	movs	r1, #0
 800eeba:	e7ef      	b.n	800ee9c <_strtod_l+0x9c>
 800eebc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eebe:	b13a      	cbz	r2, 800eed0 <_strtod_l+0xd0>
 800eec0:	2135      	movs	r1, #53	@ 0x35
 800eec2:	a81c      	add	r0, sp, #112	@ 0x70
 800eec4:	f002 f8d4 	bl	8011070 <__copybits>
 800eec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eeca:	9805      	ldr	r0, [sp, #20]
 800eecc:	f001 fca2 	bl	8010814 <_Bfree>
 800eed0:	3e01      	subs	r6, #1
 800eed2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800eed4:	2e04      	cmp	r6, #4
 800eed6:	d806      	bhi.n	800eee6 <_strtod_l+0xe6>
 800eed8:	e8df f006 	tbb	[pc, r6]
 800eedc:	201d0314 	.word	0x201d0314
 800eee0:	14          	.byte	0x14
 800eee1:	00          	.byte	0x00
 800eee2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800eee6:	05e1      	lsls	r1, r4, #23
 800eee8:	bf48      	it	mi
 800eeea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800eeee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eef2:	0d1b      	lsrs	r3, r3, #20
 800eef4:	051b      	lsls	r3, r3, #20
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d1bb      	bne.n	800ee72 <_strtod_l+0x72>
 800eefa:	f000 ffbb 	bl	800fe74 <__errno>
 800eefe:	2322      	movs	r3, #34	@ 0x22
 800ef00:	6003      	str	r3, [r0, #0]
 800ef02:	e7b6      	b.n	800ee72 <_strtod_l+0x72>
 800ef04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ef08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ef0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ef10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ef14:	e7e7      	b.n	800eee6 <_strtod_l+0xe6>
 800ef16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f094 <_strtod_l+0x294>
 800ef1a:	e7e4      	b.n	800eee6 <_strtod_l+0xe6>
 800ef1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ef20:	f04f 3aff 	mov.w	sl, #4294967295
 800ef24:	e7df      	b.n	800eee6 <_strtod_l+0xe6>
 800ef26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef2c:	785b      	ldrb	r3, [r3, #1]
 800ef2e:	2b30      	cmp	r3, #48	@ 0x30
 800ef30:	d0f9      	beq.n	800ef26 <_strtod_l+0x126>
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d09d      	beq.n	800ee72 <_strtod_l+0x72>
 800ef36:	2301      	movs	r3, #1
 800ef38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ef3e:	2300      	movs	r3, #0
 800ef40:	9308      	str	r3, [sp, #32]
 800ef42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef44:	461f      	mov	r7, r3
 800ef46:	220a      	movs	r2, #10
 800ef48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ef4a:	7805      	ldrb	r5, [r0, #0]
 800ef4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ef50:	b2d9      	uxtb	r1, r3
 800ef52:	2909      	cmp	r1, #9
 800ef54:	d928      	bls.n	800efa8 <_strtod_l+0x1a8>
 800ef56:	494e      	ldr	r1, [pc, #312]	@ (800f090 <_strtod_l+0x290>)
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f000 ff33 	bl	800fdc4 <strncmp>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d032      	beq.n	800efc8 <_strtod_l+0x1c8>
 800ef62:	2000      	movs	r0, #0
 800ef64:	462a      	mov	r2, r5
 800ef66:	4681      	mov	r9, r0
 800ef68:	463d      	mov	r5, r7
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2a65      	cmp	r2, #101	@ 0x65
 800ef6e:	d001      	beq.n	800ef74 <_strtod_l+0x174>
 800ef70:	2a45      	cmp	r2, #69	@ 0x45
 800ef72:	d114      	bne.n	800ef9e <_strtod_l+0x19e>
 800ef74:	b91d      	cbnz	r5, 800ef7e <_strtod_l+0x17e>
 800ef76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef78:	4302      	orrs	r2, r0
 800ef7a:	d095      	beq.n	800eea8 <_strtod_l+0xa8>
 800ef7c:	2500      	movs	r5, #0
 800ef7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ef80:	1c62      	adds	r2, r4, #1
 800ef82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef84:	7862      	ldrb	r2, [r4, #1]
 800ef86:	2a2b      	cmp	r2, #43	@ 0x2b
 800ef88:	d077      	beq.n	800f07a <_strtod_l+0x27a>
 800ef8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ef8c:	d07b      	beq.n	800f086 <_strtod_l+0x286>
 800ef8e:	f04f 0c00 	mov.w	ip, #0
 800ef92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ef96:	2909      	cmp	r1, #9
 800ef98:	f240 8082 	bls.w	800f0a0 <_strtod_l+0x2a0>
 800ef9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ef9e:	f04f 0800 	mov.w	r8, #0
 800efa2:	e0a2      	b.n	800f0ea <_strtod_l+0x2ea>
 800efa4:	2300      	movs	r3, #0
 800efa6:	e7c7      	b.n	800ef38 <_strtod_l+0x138>
 800efa8:	2f08      	cmp	r7, #8
 800efaa:	bfd5      	itete	le
 800efac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800efae:	9908      	ldrgt	r1, [sp, #32]
 800efb0:	fb02 3301 	mlale	r3, r2, r1, r3
 800efb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800efb8:	f100 0001 	add.w	r0, r0, #1
 800efbc:	bfd4      	ite	le
 800efbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800efc0:	9308      	strgt	r3, [sp, #32]
 800efc2:	3701      	adds	r7, #1
 800efc4:	9019      	str	r0, [sp, #100]	@ 0x64
 800efc6:	e7bf      	b.n	800ef48 <_strtod_l+0x148>
 800efc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	9219      	str	r2, [sp, #100]	@ 0x64
 800efce:	785a      	ldrb	r2, [r3, #1]
 800efd0:	b37f      	cbz	r7, 800f032 <_strtod_l+0x232>
 800efd2:	4681      	mov	r9, r0
 800efd4:	463d      	mov	r5, r7
 800efd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800efda:	2b09      	cmp	r3, #9
 800efdc:	d912      	bls.n	800f004 <_strtod_l+0x204>
 800efde:	2301      	movs	r3, #1
 800efe0:	e7c4      	b.n	800ef6c <_strtod_l+0x16c>
 800efe2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	9219      	str	r2, [sp, #100]	@ 0x64
 800efe8:	785a      	ldrb	r2, [r3, #1]
 800efea:	3001      	adds	r0, #1
 800efec:	2a30      	cmp	r2, #48	@ 0x30
 800efee:	d0f8      	beq.n	800efe2 <_strtod_l+0x1e2>
 800eff0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eff4:	2b08      	cmp	r3, #8
 800eff6:	f200 84d3 	bhi.w	800f9a0 <_strtod_l+0xba0>
 800effa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800effc:	930c      	str	r3, [sp, #48]	@ 0x30
 800effe:	4681      	mov	r9, r0
 800f000:	2000      	movs	r0, #0
 800f002:	4605      	mov	r5, r0
 800f004:	3a30      	subs	r2, #48	@ 0x30
 800f006:	f100 0301 	add.w	r3, r0, #1
 800f00a:	d02a      	beq.n	800f062 <_strtod_l+0x262>
 800f00c:	4499      	add	r9, r3
 800f00e:	eb00 0c05 	add.w	ip, r0, r5
 800f012:	462b      	mov	r3, r5
 800f014:	210a      	movs	r1, #10
 800f016:	4563      	cmp	r3, ip
 800f018:	d10d      	bne.n	800f036 <_strtod_l+0x236>
 800f01a:	1c69      	adds	r1, r5, #1
 800f01c:	4401      	add	r1, r0
 800f01e:	4428      	add	r0, r5
 800f020:	2808      	cmp	r0, #8
 800f022:	dc16      	bgt.n	800f052 <_strtod_l+0x252>
 800f024:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f026:	230a      	movs	r3, #10
 800f028:	fb03 2300 	mla	r3, r3, r0, r2
 800f02c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f02e:	2300      	movs	r3, #0
 800f030:	e018      	b.n	800f064 <_strtod_l+0x264>
 800f032:	4638      	mov	r0, r7
 800f034:	e7da      	b.n	800efec <_strtod_l+0x1ec>
 800f036:	2b08      	cmp	r3, #8
 800f038:	f103 0301 	add.w	r3, r3, #1
 800f03c:	dc03      	bgt.n	800f046 <_strtod_l+0x246>
 800f03e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f040:	434e      	muls	r6, r1
 800f042:	960a      	str	r6, [sp, #40]	@ 0x28
 800f044:	e7e7      	b.n	800f016 <_strtod_l+0x216>
 800f046:	2b10      	cmp	r3, #16
 800f048:	bfde      	ittt	le
 800f04a:	9e08      	ldrle	r6, [sp, #32]
 800f04c:	434e      	mulle	r6, r1
 800f04e:	9608      	strle	r6, [sp, #32]
 800f050:	e7e1      	b.n	800f016 <_strtod_l+0x216>
 800f052:	280f      	cmp	r0, #15
 800f054:	dceb      	bgt.n	800f02e <_strtod_l+0x22e>
 800f056:	9808      	ldr	r0, [sp, #32]
 800f058:	230a      	movs	r3, #10
 800f05a:	fb03 2300 	mla	r3, r3, r0, r2
 800f05e:	9308      	str	r3, [sp, #32]
 800f060:	e7e5      	b.n	800f02e <_strtod_l+0x22e>
 800f062:	4629      	mov	r1, r5
 800f064:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f066:	1c50      	adds	r0, r2, #1
 800f068:	9019      	str	r0, [sp, #100]	@ 0x64
 800f06a:	7852      	ldrb	r2, [r2, #1]
 800f06c:	4618      	mov	r0, r3
 800f06e:	460d      	mov	r5, r1
 800f070:	e7b1      	b.n	800efd6 <_strtod_l+0x1d6>
 800f072:	f04f 0900 	mov.w	r9, #0
 800f076:	2301      	movs	r3, #1
 800f078:	e77d      	b.n	800ef76 <_strtod_l+0x176>
 800f07a:	f04f 0c00 	mov.w	ip, #0
 800f07e:	1ca2      	adds	r2, r4, #2
 800f080:	9219      	str	r2, [sp, #100]	@ 0x64
 800f082:	78a2      	ldrb	r2, [r4, #2]
 800f084:	e785      	b.n	800ef92 <_strtod_l+0x192>
 800f086:	f04f 0c01 	mov.w	ip, #1
 800f08a:	e7f8      	b.n	800f07e <_strtod_l+0x27e>
 800f08c:	08012ba0 	.word	0x08012ba0
 800f090:	08012b7c 	.word	0x08012b7c
 800f094:	7ff00000 	.word	0x7ff00000
 800f098:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f09a:	1c51      	adds	r1, r2, #1
 800f09c:	9119      	str	r1, [sp, #100]	@ 0x64
 800f09e:	7852      	ldrb	r2, [r2, #1]
 800f0a0:	2a30      	cmp	r2, #48	@ 0x30
 800f0a2:	d0f9      	beq.n	800f098 <_strtod_l+0x298>
 800f0a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f0a8:	2908      	cmp	r1, #8
 800f0aa:	f63f af78 	bhi.w	800ef9e <_strtod_l+0x19e>
 800f0ae:	3a30      	subs	r2, #48	@ 0x30
 800f0b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f0b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f0b6:	f04f 080a 	mov.w	r8, #10
 800f0ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0bc:	1c56      	adds	r6, r2, #1
 800f0be:	9619      	str	r6, [sp, #100]	@ 0x64
 800f0c0:	7852      	ldrb	r2, [r2, #1]
 800f0c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f0c6:	f1be 0f09 	cmp.w	lr, #9
 800f0ca:	d939      	bls.n	800f140 <_strtod_l+0x340>
 800f0cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f0ce:	1a76      	subs	r6, r6, r1
 800f0d0:	2e08      	cmp	r6, #8
 800f0d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f0d6:	dc03      	bgt.n	800f0e0 <_strtod_l+0x2e0>
 800f0d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f0da:	4588      	cmp	r8, r1
 800f0dc:	bfa8      	it	ge
 800f0de:	4688      	movge	r8, r1
 800f0e0:	f1bc 0f00 	cmp.w	ip, #0
 800f0e4:	d001      	beq.n	800f0ea <_strtod_l+0x2ea>
 800f0e6:	f1c8 0800 	rsb	r8, r8, #0
 800f0ea:	2d00      	cmp	r5, #0
 800f0ec:	d14e      	bne.n	800f18c <_strtod_l+0x38c>
 800f0ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0f0:	4308      	orrs	r0, r1
 800f0f2:	f47f aebe 	bne.w	800ee72 <_strtod_l+0x72>
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	f47f aed6 	bne.w	800eea8 <_strtod_l+0xa8>
 800f0fc:	2a69      	cmp	r2, #105	@ 0x69
 800f0fe:	d028      	beq.n	800f152 <_strtod_l+0x352>
 800f100:	dc25      	bgt.n	800f14e <_strtod_l+0x34e>
 800f102:	2a49      	cmp	r2, #73	@ 0x49
 800f104:	d025      	beq.n	800f152 <_strtod_l+0x352>
 800f106:	2a4e      	cmp	r2, #78	@ 0x4e
 800f108:	f47f aece 	bne.w	800eea8 <_strtod_l+0xa8>
 800f10c:	499b      	ldr	r1, [pc, #620]	@ (800f37c <_strtod_l+0x57c>)
 800f10e:	a819      	add	r0, sp, #100	@ 0x64
 800f110:	f001 f9d0 	bl	80104b4 <__match>
 800f114:	2800      	cmp	r0, #0
 800f116:	f43f aec7 	beq.w	800eea8 <_strtod_l+0xa8>
 800f11a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	2b28      	cmp	r3, #40	@ 0x28
 800f120:	d12e      	bne.n	800f180 <_strtod_l+0x380>
 800f122:	4997      	ldr	r1, [pc, #604]	@ (800f380 <_strtod_l+0x580>)
 800f124:	aa1c      	add	r2, sp, #112	@ 0x70
 800f126:	a819      	add	r0, sp, #100	@ 0x64
 800f128:	f001 f9d8 	bl	80104dc <__hexnan>
 800f12c:	2805      	cmp	r0, #5
 800f12e:	d127      	bne.n	800f180 <_strtod_l+0x380>
 800f130:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f132:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f136:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f13a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f13e:	e698      	b.n	800ee72 <_strtod_l+0x72>
 800f140:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f142:	fb08 2101 	mla	r1, r8, r1, r2
 800f146:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f14a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f14c:	e7b5      	b.n	800f0ba <_strtod_l+0x2ba>
 800f14e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f150:	e7da      	b.n	800f108 <_strtod_l+0x308>
 800f152:	498c      	ldr	r1, [pc, #560]	@ (800f384 <_strtod_l+0x584>)
 800f154:	a819      	add	r0, sp, #100	@ 0x64
 800f156:	f001 f9ad 	bl	80104b4 <__match>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	f43f aea4 	beq.w	800eea8 <_strtod_l+0xa8>
 800f160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f162:	4989      	ldr	r1, [pc, #548]	@ (800f388 <_strtod_l+0x588>)
 800f164:	3b01      	subs	r3, #1
 800f166:	a819      	add	r0, sp, #100	@ 0x64
 800f168:	9319      	str	r3, [sp, #100]	@ 0x64
 800f16a:	f001 f9a3 	bl	80104b4 <__match>
 800f16e:	b910      	cbnz	r0, 800f176 <_strtod_l+0x376>
 800f170:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f172:	3301      	adds	r3, #1
 800f174:	9319      	str	r3, [sp, #100]	@ 0x64
 800f176:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f398 <_strtod_l+0x598>
 800f17a:	f04f 0a00 	mov.w	sl, #0
 800f17e:	e678      	b.n	800ee72 <_strtod_l+0x72>
 800f180:	4882      	ldr	r0, [pc, #520]	@ (800f38c <_strtod_l+0x58c>)
 800f182:	f000 feb5 	bl	800fef0 <nan>
 800f186:	ec5b ab10 	vmov	sl, fp, d0
 800f18a:	e672      	b.n	800ee72 <_strtod_l+0x72>
 800f18c:	eba8 0309 	sub.w	r3, r8, r9
 800f190:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f192:	9309      	str	r3, [sp, #36]	@ 0x24
 800f194:	2f00      	cmp	r7, #0
 800f196:	bf08      	it	eq
 800f198:	462f      	moveq	r7, r5
 800f19a:	2d10      	cmp	r5, #16
 800f19c:	462c      	mov	r4, r5
 800f19e:	bfa8      	it	ge
 800f1a0:	2410      	movge	r4, #16
 800f1a2:	f7f1 f9cf 	bl	8000544 <__aeabi_ui2d>
 800f1a6:	2d09      	cmp	r5, #9
 800f1a8:	4682      	mov	sl, r0
 800f1aa:	468b      	mov	fp, r1
 800f1ac:	dc13      	bgt.n	800f1d6 <_strtod_l+0x3d6>
 800f1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f43f ae5e 	beq.w	800ee72 <_strtod_l+0x72>
 800f1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b8:	dd78      	ble.n	800f2ac <_strtod_l+0x4ac>
 800f1ba:	2b16      	cmp	r3, #22
 800f1bc:	dc5f      	bgt.n	800f27e <_strtod_l+0x47e>
 800f1be:	4974      	ldr	r1, [pc, #464]	@ (800f390 <_strtod_l+0x590>)
 800f1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1c8:	4652      	mov	r2, sl
 800f1ca:	465b      	mov	r3, fp
 800f1cc:	f7f1 fa34 	bl	8000638 <__aeabi_dmul>
 800f1d0:	4682      	mov	sl, r0
 800f1d2:	468b      	mov	fp, r1
 800f1d4:	e64d      	b.n	800ee72 <_strtod_l+0x72>
 800f1d6:	4b6e      	ldr	r3, [pc, #440]	@ (800f390 <_strtod_l+0x590>)
 800f1d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f1e0:	f7f1 fa2a 	bl	8000638 <__aeabi_dmul>
 800f1e4:	4682      	mov	sl, r0
 800f1e6:	9808      	ldr	r0, [sp, #32]
 800f1e8:	468b      	mov	fp, r1
 800f1ea:	f7f1 f9ab 	bl	8000544 <__aeabi_ui2d>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	4650      	mov	r0, sl
 800f1f4:	4659      	mov	r1, fp
 800f1f6:	f7f1 f869 	bl	80002cc <__adddf3>
 800f1fa:	2d0f      	cmp	r5, #15
 800f1fc:	4682      	mov	sl, r0
 800f1fe:	468b      	mov	fp, r1
 800f200:	ddd5      	ble.n	800f1ae <_strtod_l+0x3ae>
 800f202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f204:	1b2c      	subs	r4, r5, r4
 800f206:	441c      	add	r4, r3
 800f208:	2c00      	cmp	r4, #0
 800f20a:	f340 8096 	ble.w	800f33a <_strtod_l+0x53a>
 800f20e:	f014 030f 	ands.w	r3, r4, #15
 800f212:	d00a      	beq.n	800f22a <_strtod_l+0x42a>
 800f214:	495e      	ldr	r1, [pc, #376]	@ (800f390 <_strtod_l+0x590>)
 800f216:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f21a:	4652      	mov	r2, sl
 800f21c:	465b      	mov	r3, fp
 800f21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f222:	f7f1 fa09 	bl	8000638 <__aeabi_dmul>
 800f226:	4682      	mov	sl, r0
 800f228:	468b      	mov	fp, r1
 800f22a:	f034 040f 	bics.w	r4, r4, #15
 800f22e:	d073      	beq.n	800f318 <_strtod_l+0x518>
 800f230:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f234:	dd48      	ble.n	800f2c8 <_strtod_l+0x4c8>
 800f236:	2400      	movs	r4, #0
 800f238:	46a0      	mov	r8, r4
 800f23a:	940a      	str	r4, [sp, #40]	@ 0x28
 800f23c:	46a1      	mov	r9, r4
 800f23e:	9a05      	ldr	r2, [sp, #20]
 800f240:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f398 <_strtod_l+0x598>
 800f244:	2322      	movs	r3, #34	@ 0x22
 800f246:	6013      	str	r3, [r2, #0]
 800f248:	f04f 0a00 	mov.w	sl, #0
 800f24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f43f ae0f 	beq.w	800ee72 <_strtod_l+0x72>
 800f254:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f256:	9805      	ldr	r0, [sp, #20]
 800f258:	f001 fadc 	bl	8010814 <_Bfree>
 800f25c:	9805      	ldr	r0, [sp, #20]
 800f25e:	4649      	mov	r1, r9
 800f260:	f001 fad8 	bl	8010814 <_Bfree>
 800f264:	9805      	ldr	r0, [sp, #20]
 800f266:	4641      	mov	r1, r8
 800f268:	f001 fad4 	bl	8010814 <_Bfree>
 800f26c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f26e:	9805      	ldr	r0, [sp, #20]
 800f270:	f001 fad0 	bl	8010814 <_Bfree>
 800f274:	9805      	ldr	r0, [sp, #20]
 800f276:	4621      	mov	r1, r4
 800f278:	f001 facc 	bl	8010814 <_Bfree>
 800f27c:	e5f9      	b.n	800ee72 <_strtod_l+0x72>
 800f27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f280:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f284:	4293      	cmp	r3, r2
 800f286:	dbbc      	blt.n	800f202 <_strtod_l+0x402>
 800f288:	4c41      	ldr	r4, [pc, #260]	@ (800f390 <_strtod_l+0x590>)
 800f28a:	f1c5 050f 	rsb	r5, r5, #15
 800f28e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f292:	4652      	mov	r2, sl
 800f294:	465b      	mov	r3, fp
 800f296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f29a:	f7f1 f9cd 	bl	8000638 <__aeabi_dmul>
 800f29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a0:	1b5d      	subs	r5, r3, r5
 800f2a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f2a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2aa:	e78f      	b.n	800f1cc <_strtod_l+0x3cc>
 800f2ac:	3316      	adds	r3, #22
 800f2ae:	dba8      	blt.n	800f202 <_strtod_l+0x402>
 800f2b0:	4b37      	ldr	r3, [pc, #220]	@ (800f390 <_strtod_l+0x590>)
 800f2b2:	eba9 0808 	sub.w	r8, r9, r8
 800f2b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f2ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f2be:	4650      	mov	r0, sl
 800f2c0:	4659      	mov	r1, fp
 800f2c2:	f7f1 fae3 	bl	800088c <__aeabi_ddiv>
 800f2c6:	e783      	b.n	800f1d0 <_strtod_l+0x3d0>
 800f2c8:	4b32      	ldr	r3, [pc, #200]	@ (800f394 <_strtod_l+0x594>)
 800f2ca:	9308      	str	r3, [sp, #32]
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	1124      	asrs	r4, r4, #4
 800f2d0:	4650      	mov	r0, sl
 800f2d2:	4659      	mov	r1, fp
 800f2d4:	461e      	mov	r6, r3
 800f2d6:	2c01      	cmp	r4, #1
 800f2d8:	dc21      	bgt.n	800f31e <_strtod_l+0x51e>
 800f2da:	b10b      	cbz	r3, 800f2e0 <_strtod_l+0x4e0>
 800f2dc:	4682      	mov	sl, r0
 800f2de:	468b      	mov	fp, r1
 800f2e0:	492c      	ldr	r1, [pc, #176]	@ (800f394 <_strtod_l+0x594>)
 800f2e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f2e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f2ea:	4652      	mov	r2, sl
 800f2ec:	465b      	mov	r3, fp
 800f2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2f2:	f7f1 f9a1 	bl	8000638 <__aeabi_dmul>
 800f2f6:	4b28      	ldr	r3, [pc, #160]	@ (800f398 <_strtod_l+0x598>)
 800f2f8:	460a      	mov	r2, r1
 800f2fa:	400b      	ands	r3, r1
 800f2fc:	4927      	ldr	r1, [pc, #156]	@ (800f39c <_strtod_l+0x59c>)
 800f2fe:	428b      	cmp	r3, r1
 800f300:	4682      	mov	sl, r0
 800f302:	d898      	bhi.n	800f236 <_strtod_l+0x436>
 800f304:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f308:	428b      	cmp	r3, r1
 800f30a:	bf86      	itte	hi
 800f30c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f3a0 <_strtod_l+0x5a0>
 800f310:	f04f 3aff 	movhi.w	sl, #4294967295
 800f314:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f318:	2300      	movs	r3, #0
 800f31a:	9308      	str	r3, [sp, #32]
 800f31c:	e07a      	b.n	800f414 <_strtod_l+0x614>
 800f31e:	07e2      	lsls	r2, r4, #31
 800f320:	d505      	bpl.n	800f32e <_strtod_l+0x52e>
 800f322:	9b08      	ldr	r3, [sp, #32]
 800f324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f328:	f7f1 f986 	bl	8000638 <__aeabi_dmul>
 800f32c:	2301      	movs	r3, #1
 800f32e:	9a08      	ldr	r2, [sp, #32]
 800f330:	3208      	adds	r2, #8
 800f332:	3601      	adds	r6, #1
 800f334:	1064      	asrs	r4, r4, #1
 800f336:	9208      	str	r2, [sp, #32]
 800f338:	e7cd      	b.n	800f2d6 <_strtod_l+0x4d6>
 800f33a:	d0ed      	beq.n	800f318 <_strtod_l+0x518>
 800f33c:	4264      	negs	r4, r4
 800f33e:	f014 020f 	ands.w	r2, r4, #15
 800f342:	d00a      	beq.n	800f35a <_strtod_l+0x55a>
 800f344:	4b12      	ldr	r3, [pc, #72]	@ (800f390 <_strtod_l+0x590>)
 800f346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f34a:	4650      	mov	r0, sl
 800f34c:	4659      	mov	r1, fp
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	f7f1 fa9b 	bl	800088c <__aeabi_ddiv>
 800f356:	4682      	mov	sl, r0
 800f358:	468b      	mov	fp, r1
 800f35a:	1124      	asrs	r4, r4, #4
 800f35c:	d0dc      	beq.n	800f318 <_strtod_l+0x518>
 800f35e:	2c1f      	cmp	r4, #31
 800f360:	dd20      	ble.n	800f3a4 <_strtod_l+0x5a4>
 800f362:	2400      	movs	r4, #0
 800f364:	46a0      	mov	r8, r4
 800f366:	940a      	str	r4, [sp, #40]	@ 0x28
 800f368:	46a1      	mov	r9, r4
 800f36a:	9a05      	ldr	r2, [sp, #20]
 800f36c:	2322      	movs	r3, #34	@ 0x22
 800f36e:	f04f 0a00 	mov.w	sl, #0
 800f372:	f04f 0b00 	mov.w	fp, #0
 800f376:	6013      	str	r3, [r2, #0]
 800f378:	e768      	b.n	800f24c <_strtod_l+0x44c>
 800f37a:	bf00      	nop
 800f37c:	08012b87 	.word	0x08012b87
 800f380:	08012b8c 	.word	0x08012b8c
 800f384:	08012b7e 	.word	0x08012b7e
 800f388:	08012b81 	.word	0x08012b81
 800f38c:	08012f36 	.word	0x08012f36
 800f390:	08012e00 	.word	0x08012e00
 800f394:	08012dd8 	.word	0x08012dd8
 800f398:	7ff00000 	.word	0x7ff00000
 800f39c:	7ca00000 	.word	0x7ca00000
 800f3a0:	7fefffff 	.word	0x7fefffff
 800f3a4:	f014 0310 	ands.w	r3, r4, #16
 800f3a8:	bf18      	it	ne
 800f3aa:	236a      	movne	r3, #106	@ 0x6a
 800f3ac:	4ea9      	ldr	r6, [pc, #676]	@ (800f654 <_strtod_l+0x854>)
 800f3ae:	9308      	str	r3, [sp, #32]
 800f3b0:	4650      	mov	r0, sl
 800f3b2:	4659      	mov	r1, fp
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	07e2      	lsls	r2, r4, #31
 800f3b8:	d504      	bpl.n	800f3c4 <_strtod_l+0x5c4>
 800f3ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f3be:	f7f1 f93b 	bl	8000638 <__aeabi_dmul>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	1064      	asrs	r4, r4, #1
 800f3c6:	f106 0608 	add.w	r6, r6, #8
 800f3ca:	d1f4      	bne.n	800f3b6 <_strtod_l+0x5b6>
 800f3cc:	b10b      	cbz	r3, 800f3d2 <_strtod_l+0x5d2>
 800f3ce:	4682      	mov	sl, r0
 800f3d0:	468b      	mov	fp, r1
 800f3d2:	9b08      	ldr	r3, [sp, #32]
 800f3d4:	b1b3      	cbz	r3, 800f404 <_strtod_l+0x604>
 800f3d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f3da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	4659      	mov	r1, fp
 800f3e2:	dd0f      	ble.n	800f404 <_strtod_l+0x604>
 800f3e4:	2b1f      	cmp	r3, #31
 800f3e6:	dd55      	ble.n	800f494 <_strtod_l+0x694>
 800f3e8:	2b34      	cmp	r3, #52	@ 0x34
 800f3ea:	bfde      	ittt	le
 800f3ec:	f04f 33ff 	movle.w	r3, #4294967295
 800f3f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f3f4:	4093      	lslle	r3, r2
 800f3f6:	f04f 0a00 	mov.w	sl, #0
 800f3fa:	bfcc      	ite	gt
 800f3fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f400:	ea03 0b01 	andle.w	fp, r3, r1
 800f404:	2200      	movs	r2, #0
 800f406:	2300      	movs	r3, #0
 800f408:	4650      	mov	r0, sl
 800f40a:	4659      	mov	r1, fp
 800f40c:	f7f1 fb7c 	bl	8000b08 <__aeabi_dcmpeq>
 800f410:	2800      	cmp	r0, #0
 800f412:	d1a6      	bne.n	800f362 <_strtod_l+0x562>
 800f414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f41a:	9805      	ldr	r0, [sp, #20]
 800f41c:	462b      	mov	r3, r5
 800f41e:	463a      	mov	r2, r7
 800f420:	f001 fa60 	bl	80108e4 <__s2b>
 800f424:	900a      	str	r0, [sp, #40]	@ 0x28
 800f426:	2800      	cmp	r0, #0
 800f428:	f43f af05 	beq.w	800f236 <_strtod_l+0x436>
 800f42c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f42e:	2a00      	cmp	r2, #0
 800f430:	eba9 0308 	sub.w	r3, r9, r8
 800f434:	bfa8      	it	ge
 800f436:	2300      	movge	r3, #0
 800f438:	9312      	str	r3, [sp, #72]	@ 0x48
 800f43a:	2400      	movs	r4, #0
 800f43c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f440:	9316      	str	r3, [sp, #88]	@ 0x58
 800f442:	46a0      	mov	r8, r4
 800f444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f446:	9805      	ldr	r0, [sp, #20]
 800f448:	6859      	ldr	r1, [r3, #4]
 800f44a:	f001 f9a3 	bl	8010794 <_Balloc>
 800f44e:	4681      	mov	r9, r0
 800f450:	2800      	cmp	r0, #0
 800f452:	f43f aef4 	beq.w	800f23e <_strtod_l+0x43e>
 800f456:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f458:	691a      	ldr	r2, [r3, #16]
 800f45a:	3202      	adds	r2, #2
 800f45c:	f103 010c 	add.w	r1, r3, #12
 800f460:	0092      	lsls	r2, r2, #2
 800f462:	300c      	adds	r0, #12
 800f464:	f000 fd33 	bl	800fece <memcpy>
 800f468:	ec4b ab10 	vmov	d0, sl, fp
 800f46c:	9805      	ldr	r0, [sp, #20]
 800f46e:	aa1c      	add	r2, sp, #112	@ 0x70
 800f470:	a91b      	add	r1, sp, #108	@ 0x6c
 800f472:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f476:	f001 fd71 	bl	8010f5c <__d2b>
 800f47a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f47c:	2800      	cmp	r0, #0
 800f47e:	f43f aede 	beq.w	800f23e <_strtod_l+0x43e>
 800f482:	9805      	ldr	r0, [sp, #20]
 800f484:	2101      	movs	r1, #1
 800f486:	f001 fac3 	bl	8010a10 <__i2b>
 800f48a:	4680      	mov	r8, r0
 800f48c:	b948      	cbnz	r0, 800f4a2 <_strtod_l+0x6a2>
 800f48e:	f04f 0800 	mov.w	r8, #0
 800f492:	e6d4      	b.n	800f23e <_strtod_l+0x43e>
 800f494:	f04f 32ff 	mov.w	r2, #4294967295
 800f498:	fa02 f303 	lsl.w	r3, r2, r3
 800f49c:	ea03 0a0a 	and.w	sl, r3, sl
 800f4a0:	e7b0      	b.n	800f404 <_strtod_l+0x604>
 800f4a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f4a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f4a6:	2d00      	cmp	r5, #0
 800f4a8:	bfab      	itete	ge
 800f4aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f4ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f4ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f4b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f4b2:	bfac      	ite	ge
 800f4b4:	18ef      	addge	r7, r5, r3
 800f4b6:	1b5e      	sublt	r6, r3, r5
 800f4b8:	9b08      	ldr	r3, [sp, #32]
 800f4ba:	1aed      	subs	r5, r5, r3
 800f4bc:	4415      	add	r5, r2
 800f4be:	4b66      	ldr	r3, [pc, #408]	@ (800f658 <_strtod_l+0x858>)
 800f4c0:	3d01      	subs	r5, #1
 800f4c2:	429d      	cmp	r5, r3
 800f4c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f4c8:	da50      	bge.n	800f56c <_strtod_l+0x76c>
 800f4ca:	1b5b      	subs	r3, r3, r5
 800f4cc:	2b1f      	cmp	r3, #31
 800f4ce:	eba2 0203 	sub.w	r2, r2, r3
 800f4d2:	f04f 0101 	mov.w	r1, #1
 800f4d6:	dc3d      	bgt.n	800f554 <_strtod_l+0x754>
 800f4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f4de:	2300      	movs	r3, #0
 800f4e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f4e2:	18bd      	adds	r5, r7, r2
 800f4e4:	9b08      	ldr	r3, [sp, #32]
 800f4e6:	42af      	cmp	r7, r5
 800f4e8:	4416      	add	r6, r2
 800f4ea:	441e      	add	r6, r3
 800f4ec:	463b      	mov	r3, r7
 800f4ee:	bfa8      	it	ge
 800f4f0:	462b      	movge	r3, r5
 800f4f2:	42b3      	cmp	r3, r6
 800f4f4:	bfa8      	it	ge
 800f4f6:	4633      	movge	r3, r6
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	bfc2      	ittt	gt
 800f4fc:	1aed      	subgt	r5, r5, r3
 800f4fe:	1af6      	subgt	r6, r6, r3
 800f500:	1aff      	subgt	r7, r7, r3
 800f502:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f504:	2b00      	cmp	r3, #0
 800f506:	dd16      	ble.n	800f536 <_strtod_l+0x736>
 800f508:	4641      	mov	r1, r8
 800f50a:	9805      	ldr	r0, [sp, #20]
 800f50c:	461a      	mov	r2, r3
 800f50e:	f001 fb3f 	bl	8010b90 <__pow5mult>
 800f512:	4680      	mov	r8, r0
 800f514:	2800      	cmp	r0, #0
 800f516:	d0ba      	beq.n	800f48e <_strtod_l+0x68e>
 800f518:	4601      	mov	r1, r0
 800f51a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f51c:	9805      	ldr	r0, [sp, #20]
 800f51e:	f001 fa8d 	bl	8010a3c <__multiply>
 800f522:	900e      	str	r0, [sp, #56]	@ 0x38
 800f524:	2800      	cmp	r0, #0
 800f526:	f43f ae8a 	beq.w	800f23e <_strtod_l+0x43e>
 800f52a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f52c:	9805      	ldr	r0, [sp, #20]
 800f52e:	f001 f971 	bl	8010814 <_Bfree>
 800f532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f534:	931a      	str	r3, [sp, #104]	@ 0x68
 800f536:	2d00      	cmp	r5, #0
 800f538:	dc1d      	bgt.n	800f576 <_strtod_l+0x776>
 800f53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	dd23      	ble.n	800f588 <_strtod_l+0x788>
 800f540:	4649      	mov	r1, r9
 800f542:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f544:	9805      	ldr	r0, [sp, #20]
 800f546:	f001 fb23 	bl	8010b90 <__pow5mult>
 800f54a:	4681      	mov	r9, r0
 800f54c:	b9e0      	cbnz	r0, 800f588 <_strtod_l+0x788>
 800f54e:	f04f 0900 	mov.w	r9, #0
 800f552:	e674      	b.n	800f23e <_strtod_l+0x43e>
 800f554:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f558:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f55c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f560:	35e2      	adds	r5, #226	@ 0xe2
 800f562:	fa01 f305 	lsl.w	r3, r1, r5
 800f566:	9310      	str	r3, [sp, #64]	@ 0x40
 800f568:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f56a:	e7ba      	b.n	800f4e2 <_strtod_l+0x6e2>
 800f56c:	2300      	movs	r3, #0
 800f56e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f570:	2301      	movs	r3, #1
 800f572:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f574:	e7b5      	b.n	800f4e2 <_strtod_l+0x6e2>
 800f576:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f578:	9805      	ldr	r0, [sp, #20]
 800f57a:	462a      	mov	r2, r5
 800f57c:	f001 fb62 	bl	8010c44 <__lshift>
 800f580:	901a      	str	r0, [sp, #104]	@ 0x68
 800f582:	2800      	cmp	r0, #0
 800f584:	d1d9      	bne.n	800f53a <_strtod_l+0x73a>
 800f586:	e65a      	b.n	800f23e <_strtod_l+0x43e>
 800f588:	2e00      	cmp	r6, #0
 800f58a:	dd07      	ble.n	800f59c <_strtod_l+0x79c>
 800f58c:	4649      	mov	r1, r9
 800f58e:	9805      	ldr	r0, [sp, #20]
 800f590:	4632      	mov	r2, r6
 800f592:	f001 fb57 	bl	8010c44 <__lshift>
 800f596:	4681      	mov	r9, r0
 800f598:	2800      	cmp	r0, #0
 800f59a:	d0d8      	beq.n	800f54e <_strtod_l+0x74e>
 800f59c:	2f00      	cmp	r7, #0
 800f59e:	dd08      	ble.n	800f5b2 <_strtod_l+0x7b2>
 800f5a0:	4641      	mov	r1, r8
 800f5a2:	9805      	ldr	r0, [sp, #20]
 800f5a4:	463a      	mov	r2, r7
 800f5a6:	f001 fb4d 	bl	8010c44 <__lshift>
 800f5aa:	4680      	mov	r8, r0
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	f43f ae46 	beq.w	800f23e <_strtod_l+0x43e>
 800f5b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5b4:	9805      	ldr	r0, [sp, #20]
 800f5b6:	464a      	mov	r2, r9
 800f5b8:	f001 fbcc 	bl	8010d54 <__mdiff>
 800f5bc:	4604      	mov	r4, r0
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	f43f ae3d 	beq.w	800f23e <_strtod_l+0x43e>
 800f5c4:	68c3      	ldr	r3, [r0, #12]
 800f5c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	60c3      	str	r3, [r0, #12]
 800f5cc:	4641      	mov	r1, r8
 800f5ce:	f001 fba5 	bl	8010d1c <__mcmp>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	da46      	bge.n	800f664 <_strtod_l+0x864>
 800f5d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5d8:	ea53 030a 	orrs.w	r3, r3, sl
 800f5dc:	d16c      	bne.n	800f6b8 <_strtod_l+0x8b8>
 800f5de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d168      	bne.n	800f6b8 <_strtod_l+0x8b8>
 800f5e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f5ea:	0d1b      	lsrs	r3, r3, #20
 800f5ec:	051b      	lsls	r3, r3, #20
 800f5ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f5f2:	d961      	bls.n	800f6b8 <_strtod_l+0x8b8>
 800f5f4:	6963      	ldr	r3, [r4, #20]
 800f5f6:	b913      	cbnz	r3, 800f5fe <_strtod_l+0x7fe>
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	dd5c      	ble.n	800f6b8 <_strtod_l+0x8b8>
 800f5fe:	4621      	mov	r1, r4
 800f600:	2201      	movs	r2, #1
 800f602:	9805      	ldr	r0, [sp, #20]
 800f604:	f001 fb1e 	bl	8010c44 <__lshift>
 800f608:	4641      	mov	r1, r8
 800f60a:	4604      	mov	r4, r0
 800f60c:	f001 fb86 	bl	8010d1c <__mcmp>
 800f610:	2800      	cmp	r0, #0
 800f612:	dd51      	ble.n	800f6b8 <_strtod_l+0x8b8>
 800f614:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f618:	9a08      	ldr	r2, [sp, #32]
 800f61a:	0d1b      	lsrs	r3, r3, #20
 800f61c:	051b      	lsls	r3, r3, #20
 800f61e:	2a00      	cmp	r2, #0
 800f620:	d06b      	beq.n	800f6fa <_strtod_l+0x8fa>
 800f622:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f626:	d868      	bhi.n	800f6fa <_strtod_l+0x8fa>
 800f628:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f62c:	f67f ae9d 	bls.w	800f36a <_strtod_l+0x56a>
 800f630:	4b0a      	ldr	r3, [pc, #40]	@ (800f65c <_strtod_l+0x85c>)
 800f632:	4650      	mov	r0, sl
 800f634:	4659      	mov	r1, fp
 800f636:	2200      	movs	r2, #0
 800f638:	f7f0 fffe 	bl	8000638 <__aeabi_dmul>
 800f63c:	4b08      	ldr	r3, [pc, #32]	@ (800f660 <_strtod_l+0x860>)
 800f63e:	400b      	ands	r3, r1
 800f640:	4682      	mov	sl, r0
 800f642:	468b      	mov	fp, r1
 800f644:	2b00      	cmp	r3, #0
 800f646:	f47f ae05 	bne.w	800f254 <_strtod_l+0x454>
 800f64a:	9a05      	ldr	r2, [sp, #20]
 800f64c:	2322      	movs	r3, #34	@ 0x22
 800f64e:	6013      	str	r3, [r2, #0]
 800f650:	e600      	b.n	800f254 <_strtod_l+0x454>
 800f652:	bf00      	nop
 800f654:	08012bb8 	.word	0x08012bb8
 800f658:	fffffc02 	.word	0xfffffc02
 800f65c:	39500000 	.word	0x39500000
 800f660:	7ff00000 	.word	0x7ff00000
 800f664:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f668:	d165      	bne.n	800f736 <_strtod_l+0x936>
 800f66a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f66c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f670:	b35a      	cbz	r2, 800f6ca <_strtod_l+0x8ca>
 800f672:	4a9f      	ldr	r2, [pc, #636]	@ (800f8f0 <_strtod_l+0xaf0>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d12b      	bne.n	800f6d0 <_strtod_l+0x8d0>
 800f678:	9b08      	ldr	r3, [sp, #32]
 800f67a:	4651      	mov	r1, sl
 800f67c:	b303      	cbz	r3, 800f6c0 <_strtod_l+0x8c0>
 800f67e:	4b9d      	ldr	r3, [pc, #628]	@ (800f8f4 <_strtod_l+0xaf4>)
 800f680:	465a      	mov	r2, fp
 800f682:	4013      	ands	r3, r2
 800f684:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f688:	f04f 32ff 	mov.w	r2, #4294967295
 800f68c:	d81b      	bhi.n	800f6c6 <_strtod_l+0x8c6>
 800f68e:	0d1b      	lsrs	r3, r3, #20
 800f690:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f694:	fa02 f303 	lsl.w	r3, r2, r3
 800f698:	4299      	cmp	r1, r3
 800f69a:	d119      	bne.n	800f6d0 <_strtod_l+0x8d0>
 800f69c:	4b96      	ldr	r3, [pc, #600]	@ (800f8f8 <_strtod_l+0xaf8>)
 800f69e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d102      	bne.n	800f6aa <_strtod_l+0x8aa>
 800f6a4:	3101      	adds	r1, #1
 800f6a6:	f43f adca 	beq.w	800f23e <_strtod_l+0x43e>
 800f6aa:	4b92      	ldr	r3, [pc, #584]	@ (800f8f4 <_strtod_l+0xaf4>)
 800f6ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6ae:	401a      	ands	r2, r3
 800f6b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f6b4:	f04f 0a00 	mov.w	sl, #0
 800f6b8:	9b08      	ldr	r3, [sp, #32]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1b8      	bne.n	800f630 <_strtod_l+0x830>
 800f6be:	e5c9      	b.n	800f254 <_strtod_l+0x454>
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c4:	e7e8      	b.n	800f698 <_strtod_l+0x898>
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	e7e6      	b.n	800f698 <_strtod_l+0x898>
 800f6ca:	ea53 030a 	orrs.w	r3, r3, sl
 800f6ce:	d0a1      	beq.n	800f614 <_strtod_l+0x814>
 800f6d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f6d2:	b1db      	cbz	r3, 800f70c <_strtod_l+0x90c>
 800f6d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6d6:	4213      	tst	r3, r2
 800f6d8:	d0ee      	beq.n	800f6b8 <_strtod_l+0x8b8>
 800f6da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6dc:	9a08      	ldr	r2, [sp, #32]
 800f6de:	4650      	mov	r0, sl
 800f6e0:	4659      	mov	r1, fp
 800f6e2:	b1bb      	cbz	r3, 800f714 <_strtod_l+0x914>
 800f6e4:	f7ff fb6c 	bl	800edc0 <sulp>
 800f6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f6ec:	ec53 2b10 	vmov	r2, r3, d0
 800f6f0:	f7f0 fdec 	bl	80002cc <__adddf3>
 800f6f4:	4682      	mov	sl, r0
 800f6f6:	468b      	mov	fp, r1
 800f6f8:	e7de      	b.n	800f6b8 <_strtod_l+0x8b8>
 800f6fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f6fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f702:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f706:	f04f 3aff 	mov.w	sl, #4294967295
 800f70a:	e7d5      	b.n	800f6b8 <_strtod_l+0x8b8>
 800f70c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f70e:	ea13 0f0a 	tst.w	r3, sl
 800f712:	e7e1      	b.n	800f6d8 <_strtod_l+0x8d8>
 800f714:	f7ff fb54 	bl	800edc0 <sulp>
 800f718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f71c:	ec53 2b10 	vmov	r2, r3, d0
 800f720:	f7f0 fdd2 	bl	80002c8 <__aeabi_dsub>
 800f724:	2200      	movs	r2, #0
 800f726:	2300      	movs	r3, #0
 800f728:	4682      	mov	sl, r0
 800f72a:	468b      	mov	fp, r1
 800f72c:	f7f1 f9ec 	bl	8000b08 <__aeabi_dcmpeq>
 800f730:	2800      	cmp	r0, #0
 800f732:	d0c1      	beq.n	800f6b8 <_strtod_l+0x8b8>
 800f734:	e619      	b.n	800f36a <_strtod_l+0x56a>
 800f736:	4641      	mov	r1, r8
 800f738:	4620      	mov	r0, r4
 800f73a:	f001 fc67 	bl	801100c <__ratio>
 800f73e:	ec57 6b10 	vmov	r6, r7, d0
 800f742:	2200      	movs	r2, #0
 800f744:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f748:	4630      	mov	r0, r6
 800f74a:	4639      	mov	r1, r7
 800f74c:	f7f1 f9f0 	bl	8000b30 <__aeabi_dcmple>
 800f750:	2800      	cmp	r0, #0
 800f752:	d06f      	beq.n	800f834 <_strtod_l+0xa34>
 800f754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f756:	2b00      	cmp	r3, #0
 800f758:	d17a      	bne.n	800f850 <_strtod_l+0xa50>
 800f75a:	f1ba 0f00 	cmp.w	sl, #0
 800f75e:	d158      	bne.n	800f812 <_strtod_l+0xa12>
 800f760:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f766:	2b00      	cmp	r3, #0
 800f768:	d15a      	bne.n	800f820 <_strtod_l+0xa20>
 800f76a:	4b64      	ldr	r3, [pc, #400]	@ (800f8fc <_strtod_l+0xafc>)
 800f76c:	2200      	movs	r2, #0
 800f76e:	4630      	mov	r0, r6
 800f770:	4639      	mov	r1, r7
 800f772:	f7f1 f9d3 	bl	8000b1c <__aeabi_dcmplt>
 800f776:	2800      	cmp	r0, #0
 800f778:	d159      	bne.n	800f82e <_strtod_l+0xa2e>
 800f77a:	4630      	mov	r0, r6
 800f77c:	4639      	mov	r1, r7
 800f77e:	4b60      	ldr	r3, [pc, #384]	@ (800f900 <_strtod_l+0xb00>)
 800f780:	2200      	movs	r2, #0
 800f782:	f7f0 ff59 	bl	8000638 <__aeabi_dmul>
 800f786:	4606      	mov	r6, r0
 800f788:	460f      	mov	r7, r1
 800f78a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f78e:	9606      	str	r6, [sp, #24]
 800f790:	9307      	str	r3, [sp, #28]
 800f792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f796:	4d57      	ldr	r5, [pc, #348]	@ (800f8f4 <_strtod_l+0xaf4>)
 800f798:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f79c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f79e:	401d      	ands	r5, r3
 800f7a0:	4b58      	ldr	r3, [pc, #352]	@ (800f904 <_strtod_l+0xb04>)
 800f7a2:	429d      	cmp	r5, r3
 800f7a4:	f040 80b2 	bne.w	800f90c <_strtod_l+0xb0c>
 800f7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f7ae:	ec4b ab10 	vmov	d0, sl, fp
 800f7b2:	f001 fb63 	bl	8010e7c <__ulp>
 800f7b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7ba:	ec51 0b10 	vmov	r0, r1, d0
 800f7be:	f7f0 ff3b 	bl	8000638 <__aeabi_dmul>
 800f7c2:	4652      	mov	r2, sl
 800f7c4:	465b      	mov	r3, fp
 800f7c6:	f7f0 fd81 	bl	80002cc <__adddf3>
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	4949      	ldr	r1, [pc, #292]	@ (800f8f4 <_strtod_l+0xaf4>)
 800f7ce:	4a4e      	ldr	r2, [pc, #312]	@ (800f908 <_strtod_l+0xb08>)
 800f7d0:	4019      	ands	r1, r3
 800f7d2:	4291      	cmp	r1, r2
 800f7d4:	4682      	mov	sl, r0
 800f7d6:	d942      	bls.n	800f85e <_strtod_l+0xa5e>
 800f7d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7da:	4b47      	ldr	r3, [pc, #284]	@ (800f8f8 <_strtod_l+0xaf8>)
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d103      	bne.n	800f7e8 <_strtod_l+0x9e8>
 800f7e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	f43f ad2b 	beq.w	800f23e <_strtod_l+0x43e>
 800f7e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f8f8 <_strtod_l+0xaf8>
 800f7ec:	f04f 3aff 	mov.w	sl, #4294967295
 800f7f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f7f2:	9805      	ldr	r0, [sp, #20]
 800f7f4:	f001 f80e 	bl	8010814 <_Bfree>
 800f7f8:	9805      	ldr	r0, [sp, #20]
 800f7fa:	4649      	mov	r1, r9
 800f7fc:	f001 f80a 	bl	8010814 <_Bfree>
 800f800:	9805      	ldr	r0, [sp, #20]
 800f802:	4641      	mov	r1, r8
 800f804:	f001 f806 	bl	8010814 <_Bfree>
 800f808:	9805      	ldr	r0, [sp, #20]
 800f80a:	4621      	mov	r1, r4
 800f80c:	f001 f802 	bl	8010814 <_Bfree>
 800f810:	e618      	b.n	800f444 <_strtod_l+0x644>
 800f812:	f1ba 0f01 	cmp.w	sl, #1
 800f816:	d103      	bne.n	800f820 <_strtod_l+0xa20>
 800f818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f43f ada5 	beq.w	800f36a <_strtod_l+0x56a>
 800f820:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f8d0 <_strtod_l+0xad0>
 800f824:	4f35      	ldr	r7, [pc, #212]	@ (800f8fc <_strtod_l+0xafc>)
 800f826:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f82a:	2600      	movs	r6, #0
 800f82c:	e7b1      	b.n	800f792 <_strtod_l+0x992>
 800f82e:	4f34      	ldr	r7, [pc, #208]	@ (800f900 <_strtod_l+0xb00>)
 800f830:	2600      	movs	r6, #0
 800f832:	e7aa      	b.n	800f78a <_strtod_l+0x98a>
 800f834:	4b32      	ldr	r3, [pc, #200]	@ (800f900 <_strtod_l+0xb00>)
 800f836:	4630      	mov	r0, r6
 800f838:	4639      	mov	r1, r7
 800f83a:	2200      	movs	r2, #0
 800f83c:	f7f0 fefc 	bl	8000638 <__aeabi_dmul>
 800f840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f842:	4606      	mov	r6, r0
 800f844:	460f      	mov	r7, r1
 800f846:	2b00      	cmp	r3, #0
 800f848:	d09f      	beq.n	800f78a <_strtod_l+0x98a>
 800f84a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f84e:	e7a0      	b.n	800f792 <_strtod_l+0x992>
 800f850:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f8d8 <_strtod_l+0xad8>
 800f854:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f858:	ec57 6b17 	vmov	r6, r7, d7
 800f85c:	e799      	b.n	800f792 <_strtod_l+0x992>
 800f85e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f862:	9b08      	ldr	r3, [sp, #32]
 800f864:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1c1      	bne.n	800f7f0 <_strtod_l+0x9f0>
 800f86c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f870:	0d1b      	lsrs	r3, r3, #20
 800f872:	051b      	lsls	r3, r3, #20
 800f874:	429d      	cmp	r5, r3
 800f876:	d1bb      	bne.n	800f7f0 <_strtod_l+0x9f0>
 800f878:	4630      	mov	r0, r6
 800f87a:	4639      	mov	r1, r7
 800f87c:	f7f1 fa14 	bl	8000ca8 <__aeabi_d2lz>
 800f880:	f7f0 feac 	bl	80005dc <__aeabi_l2d>
 800f884:	4602      	mov	r2, r0
 800f886:	460b      	mov	r3, r1
 800f888:	4630      	mov	r0, r6
 800f88a:	4639      	mov	r1, r7
 800f88c:	f7f0 fd1c 	bl	80002c8 <__aeabi_dsub>
 800f890:	460b      	mov	r3, r1
 800f892:	4602      	mov	r2, r0
 800f894:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f898:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f89c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f89e:	ea46 060a 	orr.w	r6, r6, sl
 800f8a2:	431e      	orrs	r6, r3
 800f8a4:	d06f      	beq.n	800f986 <_strtod_l+0xb86>
 800f8a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f8e0 <_strtod_l+0xae0>)
 800f8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ac:	f7f1 f936 	bl	8000b1c <__aeabi_dcmplt>
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	f47f accf 	bne.w	800f254 <_strtod_l+0x454>
 800f8b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f8e8 <_strtod_l+0xae8>)
 800f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8c0:	f7f1 f94a 	bl	8000b58 <__aeabi_dcmpgt>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d093      	beq.n	800f7f0 <_strtod_l+0x9f0>
 800f8c8:	e4c4      	b.n	800f254 <_strtod_l+0x454>
 800f8ca:	bf00      	nop
 800f8cc:	f3af 8000 	nop.w
 800f8d0:	00000000 	.word	0x00000000
 800f8d4:	bff00000 	.word	0xbff00000
 800f8d8:	00000000 	.word	0x00000000
 800f8dc:	3ff00000 	.word	0x3ff00000
 800f8e0:	94a03595 	.word	0x94a03595
 800f8e4:	3fdfffff 	.word	0x3fdfffff
 800f8e8:	35afe535 	.word	0x35afe535
 800f8ec:	3fe00000 	.word	0x3fe00000
 800f8f0:	000fffff 	.word	0x000fffff
 800f8f4:	7ff00000 	.word	0x7ff00000
 800f8f8:	7fefffff 	.word	0x7fefffff
 800f8fc:	3ff00000 	.word	0x3ff00000
 800f900:	3fe00000 	.word	0x3fe00000
 800f904:	7fe00000 	.word	0x7fe00000
 800f908:	7c9fffff 	.word	0x7c9fffff
 800f90c:	9b08      	ldr	r3, [sp, #32]
 800f90e:	b323      	cbz	r3, 800f95a <_strtod_l+0xb5a>
 800f910:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f914:	d821      	bhi.n	800f95a <_strtod_l+0xb5a>
 800f916:	a328      	add	r3, pc, #160	@ (adr r3, 800f9b8 <_strtod_l+0xbb8>)
 800f918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91c:	4630      	mov	r0, r6
 800f91e:	4639      	mov	r1, r7
 800f920:	f7f1 f906 	bl	8000b30 <__aeabi_dcmple>
 800f924:	b1a0      	cbz	r0, 800f950 <_strtod_l+0xb50>
 800f926:	4639      	mov	r1, r7
 800f928:	4630      	mov	r0, r6
 800f92a:	f7f1 f935 	bl	8000b98 <__aeabi_d2uiz>
 800f92e:	2801      	cmp	r0, #1
 800f930:	bf38      	it	cc
 800f932:	2001      	movcc	r0, #1
 800f934:	f7f0 fe06 	bl	8000544 <__aeabi_ui2d>
 800f938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f93a:	4606      	mov	r6, r0
 800f93c:	460f      	mov	r7, r1
 800f93e:	b9fb      	cbnz	r3, 800f980 <_strtod_l+0xb80>
 800f940:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f944:	9014      	str	r0, [sp, #80]	@ 0x50
 800f946:	9315      	str	r3, [sp, #84]	@ 0x54
 800f948:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f94c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f950:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f952:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f956:	1b5b      	subs	r3, r3, r5
 800f958:	9311      	str	r3, [sp, #68]	@ 0x44
 800f95a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f95e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f962:	f001 fa8b 	bl	8010e7c <__ulp>
 800f966:	4650      	mov	r0, sl
 800f968:	ec53 2b10 	vmov	r2, r3, d0
 800f96c:	4659      	mov	r1, fp
 800f96e:	f7f0 fe63 	bl	8000638 <__aeabi_dmul>
 800f972:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f976:	f7f0 fca9 	bl	80002cc <__adddf3>
 800f97a:	4682      	mov	sl, r0
 800f97c:	468b      	mov	fp, r1
 800f97e:	e770      	b.n	800f862 <_strtod_l+0xa62>
 800f980:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f984:	e7e0      	b.n	800f948 <_strtod_l+0xb48>
 800f986:	a30e      	add	r3, pc, #56	@ (adr r3, 800f9c0 <_strtod_l+0xbc0>)
 800f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98c:	f7f1 f8c6 	bl	8000b1c <__aeabi_dcmplt>
 800f990:	e798      	b.n	800f8c4 <_strtod_l+0xac4>
 800f992:	2300      	movs	r3, #0
 800f994:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f996:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f99a:	6013      	str	r3, [r2, #0]
 800f99c:	f7ff ba6d 	b.w	800ee7a <_strtod_l+0x7a>
 800f9a0:	2a65      	cmp	r2, #101	@ 0x65
 800f9a2:	f43f ab66 	beq.w	800f072 <_strtod_l+0x272>
 800f9a6:	2a45      	cmp	r2, #69	@ 0x45
 800f9a8:	f43f ab63 	beq.w	800f072 <_strtod_l+0x272>
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	f7ff bb9e 	b.w	800f0ee <_strtod_l+0x2ee>
 800f9b2:	bf00      	nop
 800f9b4:	f3af 8000 	nop.w
 800f9b8:	ffc00000 	.word	0xffc00000
 800f9bc:	41dfffff 	.word	0x41dfffff
 800f9c0:	94a03595 	.word	0x94a03595
 800f9c4:	3fcfffff 	.word	0x3fcfffff

0800f9c8 <strtof>:
 800f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9cc:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800fa8c <strtof+0xc4>
 800f9d0:	4b29      	ldr	r3, [pc, #164]	@ (800fa78 <strtof+0xb0>)
 800f9d2:	460a      	mov	r2, r1
 800f9d4:	ed2d 8b02 	vpush	{d8}
 800f9d8:	4601      	mov	r1, r0
 800f9da:	f8d8 0000 	ldr.w	r0, [r8]
 800f9de:	f7ff fa0f 	bl	800ee00 <_strtod_l>
 800f9e2:	ec55 4b10 	vmov	r4, r5, d0
 800f9e6:	4622      	mov	r2, r4
 800f9e8:	462b      	mov	r3, r5
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	f7f1 f8bd 	bl	8000b6c <__aeabi_dcmpun>
 800f9f2:	b190      	cbz	r0, 800fa1a <strtof+0x52>
 800f9f4:	2d00      	cmp	r5, #0
 800f9f6:	4821      	ldr	r0, [pc, #132]	@ (800fa7c <strtof+0xb4>)
 800f9f8:	da09      	bge.n	800fa0e <strtof+0x46>
 800f9fa:	f000 fa81 	bl	800ff00 <nanf>
 800f9fe:	eeb1 8a40 	vneg.f32	s16, s0
 800fa02:	eeb0 0a48 	vmov.f32	s0, s16
 800fa06:	ecbd 8b02 	vpop	{d8}
 800fa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa0e:	ecbd 8b02 	vpop	{d8}
 800fa12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa16:	f000 ba73 	b.w	800ff00 <nanf>
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	4629      	mov	r1, r5
 800fa1e:	f7f1 f8db 	bl	8000bd8 <__aeabi_d2f>
 800fa22:	ee08 0a10 	vmov	s16, r0
 800fa26:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800fa80 <strtof+0xb8>
 800fa2a:	eeb0 7ac8 	vabs.f32	s14, s16
 800fa2e:	eeb4 7a67 	vcmp.f32	s14, s15
 800fa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa36:	dd11      	ble.n	800fa5c <strtof+0x94>
 800fa38:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800fa3c:	4b11      	ldr	r3, [pc, #68]	@ (800fa84 <strtof+0xbc>)
 800fa3e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa42:	4620      	mov	r0, r4
 800fa44:	4639      	mov	r1, r7
 800fa46:	f7f1 f891 	bl	8000b6c <__aeabi_dcmpun>
 800fa4a:	b980      	cbnz	r0, 800fa6e <strtof+0xa6>
 800fa4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa84 <strtof+0xbc>)
 800fa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa52:	4620      	mov	r0, r4
 800fa54:	4639      	mov	r1, r7
 800fa56:	f7f1 f86b 	bl	8000b30 <__aeabi_dcmple>
 800fa5a:	b940      	cbnz	r0, 800fa6e <strtof+0xa6>
 800fa5c:	ee18 3a10 	vmov	r3, s16
 800fa60:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fa64:	d1cd      	bne.n	800fa02 <strtof+0x3a>
 800fa66:	4b08      	ldr	r3, [pc, #32]	@ (800fa88 <strtof+0xc0>)
 800fa68:	402b      	ands	r3, r5
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d0c9      	beq.n	800fa02 <strtof+0x3a>
 800fa6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fa72:	2222      	movs	r2, #34	@ 0x22
 800fa74:	601a      	str	r2, [r3, #0]
 800fa76:	e7c4      	b.n	800fa02 <strtof+0x3a>
 800fa78:	2000007c 	.word	0x2000007c
 800fa7c:	08012f36 	.word	0x08012f36
 800fa80:	7f7fffff 	.word	0x7f7fffff
 800fa84:	7fefffff 	.word	0x7fefffff
 800fa88:	7ff00000 	.word	0x7ff00000
 800fa8c:	200001e8 	.word	0x200001e8

0800fa90 <std>:
 800fa90:	2300      	movs	r3, #0
 800fa92:	b510      	push	{r4, lr}
 800fa94:	4604      	mov	r4, r0
 800fa96:	e9c0 3300 	strd	r3, r3, [r0]
 800fa9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa9e:	6083      	str	r3, [r0, #8]
 800faa0:	8181      	strh	r1, [r0, #12]
 800faa2:	6643      	str	r3, [r0, #100]	@ 0x64
 800faa4:	81c2      	strh	r2, [r0, #14]
 800faa6:	6183      	str	r3, [r0, #24]
 800faa8:	4619      	mov	r1, r3
 800faaa:	2208      	movs	r2, #8
 800faac:	305c      	adds	r0, #92	@ 0x5c
 800faae:	f000 f981 	bl	800fdb4 <memset>
 800fab2:	4b0d      	ldr	r3, [pc, #52]	@ (800fae8 <std+0x58>)
 800fab4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fab6:	4b0d      	ldr	r3, [pc, #52]	@ (800faec <std+0x5c>)
 800fab8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800faba:	4b0d      	ldr	r3, [pc, #52]	@ (800faf0 <std+0x60>)
 800fabc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fabe:	4b0d      	ldr	r3, [pc, #52]	@ (800faf4 <std+0x64>)
 800fac0:	6323      	str	r3, [r4, #48]	@ 0x30
 800fac2:	4b0d      	ldr	r3, [pc, #52]	@ (800faf8 <std+0x68>)
 800fac4:	6224      	str	r4, [r4, #32]
 800fac6:	429c      	cmp	r4, r3
 800fac8:	d006      	beq.n	800fad8 <std+0x48>
 800faca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800face:	4294      	cmp	r4, r2
 800fad0:	d002      	beq.n	800fad8 <std+0x48>
 800fad2:	33d0      	adds	r3, #208	@ 0xd0
 800fad4:	429c      	cmp	r4, r3
 800fad6:	d105      	bne.n	800fae4 <std+0x54>
 800fad8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fae0:	f000 b9f2 	b.w	800fec8 <__retarget_lock_init_recursive>
 800fae4:	bd10      	pop	{r4, pc}
 800fae6:	bf00      	nop
 800fae8:	0800fcbd 	.word	0x0800fcbd
 800faec:	0800fcdf 	.word	0x0800fcdf
 800faf0:	0800fd17 	.word	0x0800fd17
 800faf4:	0800fd3b 	.word	0x0800fd3b
 800faf8:	200028bc 	.word	0x200028bc

0800fafc <stdio_exit_handler>:
 800fafc:	4a02      	ldr	r2, [pc, #8]	@ (800fb08 <stdio_exit_handler+0xc>)
 800fafe:	4903      	ldr	r1, [pc, #12]	@ (800fb0c <stdio_exit_handler+0x10>)
 800fb00:	4803      	ldr	r0, [pc, #12]	@ (800fb10 <stdio_exit_handler+0x14>)
 800fb02:	f000 b869 	b.w	800fbd8 <_fwalk_sglue>
 800fb06:	bf00      	nop
 800fb08:	20000070 	.word	0x20000070
 800fb0c:	080117e5 	.word	0x080117e5
 800fb10:	200001ec 	.word	0x200001ec

0800fb14 <cleanup_stdio>:
 800fb14:	6841      	ldr	r1, [r0, #4]
 800fb16:	4b0c      	ldr	r3, [pc, #48]	@ (800fb48 <cleanup_stdio+0x34>)
 800fb18:	4299      	cmp	r1, r3
 800fb1a:	b510      	push	{r4, lr}
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	d001      	beq.n	800fb24 <cleanup_stdio+0x10>
 800fb20:	f001 fe60 	bl	80117e4 <_fflush_r>
 800fb24:	68a1      	ldr	r1, [r4, #8]
 800fb26:	4b09      	ldr	r3, [pc, #36]	@ (800fb4c <cleanup_stdio+0x38>)
 800fb28:	4299      	cmp	r1, r3
 800fb2a:	d002      	beq.n	800fb32 <cleanup_stdio+0x1e>
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f001 fe59 	bl	80117e4 <_fflush_r>
 800fb32:	68e1      	ldr	r1, [r4, #12]
 800fb34:	4b06      	ldr	r3, [pc, #24]	@ (800fb50 <cleanup_stdio+0x3c>)
 800fb36:	4299      	cmp	r1, r3
 800fb38:	d004      	beq.n	800fb44 <cleanup_stdio+0x30>
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb40:	f001 be50 	b.w	80117e4 <_fflush_r>
 800fb44:	bd10      	pop	{r4, pc}
 800fb46:	bf00      	nop
 800fb48:	200028bc 	.word	0x200028bc
 800fb4c:	20002924 	.word	0x20002924
 800fb50:	2000298c 	.word	0x2000298c

0800fb54 <global_stdio_init.part.0>:
 800fb54:	b510      	push	{r4, lr}
 800fb56:	4b0b      	ldr	r3, [pc, #44]	@ (800fb84 <global_stdio_init.part.0+0x30>)
 800fb58:	4c0b      	ldr	r4, [pc, #44]	@ (800fb88 <global_stdio_init.part.0+0x34>)
 800fb5a:	4a0c      	ldr	r2, [pc, #48]	@ (800fb8c <global_stdio_init.part.0+0x38>)
 800fb5c:	601a      	str	r2, [r3, #0]
 800fb5e:	4620      	mov	r0, r4
 800fb60:	2200      	movs	r2, #0
 800fb62:	2104      	movs	r1, #4
 800fb64:	f7ff ff94 	bl	800fa90 <std>
 800fb68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	2109      	movs	r1, #9
 800fb70:	f7ff ff8e 	bl	800fa90 <std>
 800fb74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb78:	2202      	movs	r2, #2
 800fb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb7e:	2112      	movs	r1, #18
 800fb80:	f7ff bf86 	b.w	800fa90 <std>
 800fb84:	200029f4 	.word	0x200029f4
 800fb88:	200028bc 	.word	0x200028bc
 800fb8c:	0800fafd 	.word	0x0800fafd

0800fb90 <__sfp_lock_acquire>:
 800fb90:	4801      	ldr	r0, [pc, #4]	@ (800fb98 <__sfp_lock_acquire+0x8>)
 800fb92:	f000 b99a 	b.w	800feca <__retarget_lock_acquire_recursive>
 800fb96:	bf00      	nop
 800fb98:	200029fd 	.word	0x200029fd

0800fb9c <__sfp_lock_release>:
 800fb9c:	4801      	ldr	r0, [pc, #4]	@ (800fba4 <__sfp_lock_release+0x8>)
 800fb9e:	f000 b995 	b.w	800fecc <__retarget_lock_release_recursive>
 800fba2:	bf00      	nop
 800fba4:	200029fd 	.word	0x200029fd

0800fba8 <__sinit>:
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	4604      	mov	r4, r0
 800fbac:	f7ff fff0 	bl	800fb90 <__sfp_lock_acquire>
 800fbb0:	6a23      	ldr	r3, [r4, #32]
 800fbb2:	b11b      	cbz	r3, 800fbbc <__sinit+0x14>
 800fbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbb8:	f7ff bff0 	b.w	800fb9c <__sfp_lock_release>
 800fbbc:	4b04      	ldr	r3, [pc, #16]	@ (800fbd0 <__sinit+0x28>)
 800fbbe:	6223      	str	r3, [r4, #32]
 800fbc0:	4b04      	ldr	r3, [pc, #16]	@ (800fbd4 <__sinit+0x2c>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1f5      	bne.n	800fbb4 <__sinit+0xc>
 800fbc8:	f7ff ffc4 	bl	800fb54 <global_stdio_init.part.0>
 800fbcc:	e7f2      	b.n	800fbb4 <__sinit+0xc>
 800fbce:	bf00      	nop
 800fbd0:	0800fb15 	.word	0x0800fb15
 800fbd4:	200029f4 	.word	0x200029f4

0800fbd8 <_fwalk_sglue>:
 800fbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbdc:	4607      	mov	r7, r0
 800fbde:	4688      	mov	r8, r1
 800fbe0:	4614      	mov	r4, r2
 800fbe2:	2600      	movs	r6, #0
 800fbe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbe8:	f1b9 0901 	subs.w	r9, r9, #1
 800fbec:	d505      	bpl.n	800fbfa <_fwalk_sglue+0x22>
 800fbee:	6824      	ldr	r4, [r4, #0]
 800fbf0:	2c00      	cmp	r4, #0
 800fbf2:	d1f7      	bne.n	800fbe4 <_fwalk_sglue+0xc>
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbfa:	89ab      	ldrh	r3, [r5, #12]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d907      	bls.n	800fc10 <_fwalk_sglue+0x38>
 800fc00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc04:	3301      	adds	r3, #1
 800fc06:	d003      	beq.n	800fc10 <_fwalk_sglue+0x38>
 800fc08:	4629      	mov	r1, r5
 800fc0a:	4638      	mov	r0, r7
 800fc0c:	47c0      	blx	r8
 800fc0e:	4306      	orrs	r6, r0
 800fc10:	3568      	adds	r5, #104	@ 0x68
 800fc12:	e7e9      	b.n	800fbe8 <_fwalk_sglue+0x10>

0800fc14 <sniprintf>:
 800fc14:	b40c      	push	{r2, r3}
 800fc16:	b530      	push	{r4, r5, lr}
 800fc18:	4b17      	ldr	r3, [pc, #92]	@ (800fc78 <sniprintf+0x64>)
 800fc1a:	1e0c      	subs	r4, r1, #0
 800fc1c:	681d      	ldr	r5, [r3, #0]
 800fc1e:	b09d      	sub	sp, #116	@ 0x74
 800fc20:	da08      	bge.n	800fc34 <sniprintf+0x20>
 800fc22:	238b      	movs	r3, #139	@ 0x8b
 800fc24:	602b      	str	r3, [r5, #0]
 800fc26:	f04f 30ff 	mov.w	r0, #4294967295
 800fc2a:	b01d      	add	sp, #116	@ 0x74
 800fc2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc30:	b002      	add	sp, #8
 800fc32:	4770      	bx	lr
 800fc34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fc3c:	bf14      	ite	ne
 800fc3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fc42:	4623      	moveq	r3, r4
 800fc44:	9304      	str	r3, [sp, #16]
 800fc46:	9307      	str	r3, [sp, #28]
 800fc48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc4c:	9002      	str	r0, [sp, #8]
 800fc4e:	9006      	str	r0, [sp, #24]
 800fc50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fc54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fc56:	ab21      	add	r3, sp, #132	@ 0x84
 800fc58:	a902      	add	r1, sp, #8
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	9301      	str	r3, [sp, #4]
 800fc5e:	f001 fab3 	bl	80111c8 <_svfiprintf_r>
 800fc62:	1c43      	adds	r3, r0, #1
 800fc64:	bfbc      	itt	lt
 800fc66:	238b      	movlt	r3, #139	@ 0x8b
 800fc68:	602b      	strlt	r3, [r5, #0]
 800fc6a:	2c00      	cmp	r4, #0
 800fc6c:	d0dd      	beq.n	800fc2a <sniprintf+0x16>
 800fc6e:	9b02      	ldr	r3, [sp, #8]
 800fc70:	2200      	movs	r2, #0
 800fc72:	701a      	strb	r2, [r3, #0]
 800fc74:	e7d9      	b.n	800fc2a <sniprintf+0x16>
 800fc76:	bf00      	nop
 800fc78:	200001e8 	.word	0x200001e8

0800fc7c <siprintf>:
 800fc7c:	b40e      	push	{r1, r2, r3}
 800fc7e:	b500      	push	{lr}
 800fc80:	b09c      	sub	sp, #112	@ 0x70
 800fc82:	ab1d      	add	r3, sp, #116	@ 0x74
 800fc84:	9002      	str	r0, [sp, #8]
 800fc86:	9006      	str	r0, [sp, #24]
 800fc88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fc8c:	4809      	ldr	r0, [pc, #36]	@ (800fcb4 <siprintf+0x38>)
 800fc8e:	9107      	str	r1, [sp, #28]
 800fc90:	9104      	str	r1, [sp, #16]
 800fc92:	4909      	ldr	r1, [pc, #36]	@ (800fcb8 <siprintf+0x3c>)
 800fc94:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc98:	9105      	str	r1, [sp, #20]
 800fc9a:	6800      	ldr	r0, [r0, #0]
 800fc9c:	9301      	str	r3, [sp, #4]
 800fc9e:	a902      	add	r1, sp, #8
 800fca0:	f001 fa92 	bl	80111c8 <_svfiprintf_r>
 800fca4:	9b02      	ldr	r3, [sp, #8]
 800fca6:	2200      	movs	r2, #0
 800fca8:	701a      	strb	r2, [r3, #0]
 800fcaa:	b01c      	add	sp, #112	@ 0x70
 800fcac:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcb0:	b003      	add	sp, #12
 800fcb2:	4770      	bx	lr
 800fcb4:	200001e8 	.word	0x200001e8
 800fcb8:	ffff0208 	.word	0xffff0208

0800fcbc <__sread>:
 800fcbc:	b510      	push	{r4, lr}
 800fcbe:	460c      	mov	r4, r1
 800fcc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcc4:	f000 f8b2 	bl	800fe2c <_read_r>
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	bfab      	itete	ge
 800fccc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fcce:	89a3      	ldrhlt	r3, [r4, #12]
 800fcd0:	181b      	addge	r3, r3, r0
 800fcd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fcd6:	bfac      	ite	ge
 800fcd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fcda:	81a3      	strhlt	r3, [r4, #12]
 800fcdc:	bd10      	pop	{r4, pc}

0800fcde <__swrite>:
 800fcde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce2:	461f      	mov	r7, r3
 800fce4:	898b      	ldrh	r3, [r1, #12]
 800fce6:	05db      	lsls	r3, r3, #23
 800fce8:	4605      	mov	r5, r0
 800fcea:	460c      	mov	r4, r1
 800fcec:	4616      	mov	r6, r2
 800fcee:	d505      	bpl.n	800fcfc <__swrite+0x1e>
 800fcf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcf4:	2302      	movs	r3, #2
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f000 f886 	bl	800fe08 <_lseek_r>
 800fcfc:	89a3      	ldrh	r3, [r4, #12]
 800fcfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fd06:	81a3      	strh	r3, [r4, #12]
 800fd08:	4632      	mov	r2, r6
 800fd0a:	463b      	mov	r3, r7
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd12:	f000 b89d 	b.w	800fe50 <_write_r>

0800fd16 <__sseek>:
 800fd16:	b510      	push	{r4, lr}
 800fd18:	460c      	mov	r4, r1
 800fd1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd1e:	f000 f873 	bl	800fe08 <_lseek_r>
 800fd22:	1c43      	adds	r3, r0, #1
 800fd24:	89a3      	ldrh	r3, [r4, #12]
 800fd26:	bf15      	itete	ne
 800fd28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fd2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fd2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fd32:	81a3      	strheq	r3, [r4, #12]
 800fd34:	bf18      	it	ne
 800fd36:	81a3      	strhne	r3, [r4, #12]
 800fd38:	bd10      	pop	{r4, pc}

0800fd3a <__sclose>:
 800fd3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd3e:	f000 b853 	b.w	800fde8 <_close_r>

0800fd42 <_vsniprintf_r>:
 800fd42:	b530      	push	{r4, r5, lr}
 800fd44:	4614      	mov	r4, r2
 800fd46:	2c00      	cmp	r4, #0
 800fd48:	b09b      	sub	sp, #108	@ 0x6c
 800fd4a:	4605      	mov	r5, r0
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	da05      	bge.n	800fd5c <_vsniprintf_r+0x1a>
 800fd50:	238b      	movs	r3, #139	@ 0x8b
 800fd52:	6003      	str	r3, [r0, #0]
 800fd54:	f04f 30ff 	mov.w	r0, #4294967295
 800fd58:	b01b      	add	sp, #108	@ 0x6c
 800fd5a:	bd30      	pop	{r4, r5, pc}
 800fd5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fd60:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fd64:	bf14      	ite	ne
 800fd66:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd6a:	4623      	moveq	r3, r4
 800fd6c:	9302      	str	r3, [sp, #8]
 800fd6e:	9305      	str	r3, [sp, #20]
 800fd70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd74:	9100      	str	r1, [sp, #0]
 800fd76:	9104      	str	r1, [sp, #16]
 800fd78:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fd7c:	4669      	mov	r1, sp
 800fd7e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fd80:	f001 fa22 	bl	80111c8 <_svfiprintf_r>
 800fd84:	1c43      	adds	r3, r0, #1
 800fd86:	bfbc      	itt	lt
 800fd88:	238b      	movlt	r3, #139	@ 0x8b
 800fd8a:	602b      	strlt	r3, [r5, #0]
 800fd8c:	2c00      	cmp	r4, #0
 800fd8e:	d0e3      	beq.n	800fd58 <_vsniprintf_r+0x16>
 800fd90:	9b00      	ldr	r3, [sp, #0]
 800fd92:	2200      	movs	r2, #0
 800fd94:	701a      	strb	r2, [r3, #0]
 800fd96:	e7df      	b.n	800fd58 <_vsniprintf_r+0x16>

0800fd98 <vsniprintf>:
 800fd98:	b507      	push	{r0, r1, r2, lr}
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	4613      	mov	r3, r2
 800fd9e:	460a      	mov	r2, r1
 800fda0:	4601      	mov	r1, r0
 800fda2:	4803      	ldr	r0, [pc, #12]	@ (800fdb0 <vsniprintf+0x18>)
 800fda4:	6800      	ldr	r0, [r0, #0]
 800fda6:	f7ff ffcc 	bl	800fd42 <_vsniprintf_r>
 800fdaa:	b003      	add	sp, #12
 800fdac:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdb0:	200001e8 	.word	0x200001e8

0800fdb4 <memset>:
 800fdb4:	4402      	add	r2, r0
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d100      	bne.n	800fdbe <memset+0xa>
 800fdbc:	4770      	bx	lr
 800fdbe:	f803 1b01 	strb.w	r1, [r3], #1
 800fdc2:	e7f9      	b.n	800fdb8 <memset+0x4>

0800fdc4 <strncmp>:
 800fdc4:	b510      	push	{r4, lr}
 800fdc6:	b16a      	cbz	r2, 800fde4 <strncmp+0x20>
 800fdc8:	3901      	subs	r1, #1
 800fdca:	1884      	adds	r4, r0, r2
 800fdcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d103      	bne.n	800fde0 <strncmp+0x1c>
 800fdd8:	42a0      	cmp	r0, r4
 800fdda:	d001      	beq.n	800fde0 <strncmp+0x1c>
 800fddc:	2a00      	cmp	r2, #0
 800fdde:	d1f5      	bne.n	800fdcc <strncmp+0x8>
 800fde0:	1ad0      	subs	r0, r2, r3
 800fde2:	bd10      	pop	{r4, pc}
 800fde4:	4610      	mov	r0, r2
 800fde6:	e7fc      	b.n	800fde2 <strncmp+0x1e>

0800fde8 <_close_r>:
 800fde8:	b538      	push	{r3, r4, r5, lr}
 800fdea:	4d06      	ldr	r5, [pc, #24]	@ (800fe04 <_close_r+0x1c>)
 800fdec:	2300      	movs	r3, #0
 800fdee:	4604      	mov	r4, r0
 800fdf0:	4608      	mov	r0, r1
 800fdf2:	602b      	str	r3, [r5, #0]
 800fdf4:	f7f4 fd70 	bl	80048d8 <_close>
 800fdf8:	1c43      	adds	r3, r0, #1
 800fdfa:	d102      	bne.n	800fe02 <_close_r+0x1a>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	b103      	cbz	r3, 800fe02 <_close_r+0x1a>
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	bd38      	pop	{r3, r4, r5, pc}
 800fe04:	200029f8 	.word	0x200029f8

0800fe08 <_lseek_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4d07      	ldr	r5, [pc, #28]	@ (800fe28 <_lseek_r+0x20>)
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	4608      	mov	r0, r1
 800fe10:	4611      	mov	r1, r2
 800fe12:	2200      	movs	r2, #0
 800fe14:	602a      	str	r2, [r5, #0]
 800fe16:	461a      	mov	r2, r3
 800fe18:	f7f4 fd85 	bl	8004926 <_lseek>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d102      	bne.n	800fe26 <_lseek_r+0x1e>
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	b103      	cbz	r3, 800fe26 <_lseek_r+0x1e>
 800fe24:	6023      	str	r3, [r4, #0]
 800fe26:	bd38      	pop	{r3, r4, r5, pc}
 800fe28:	200029f8 	.word	0x200029f8

0800fe2c <_read_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	4d07      	ldr	r5, [pc, #28]	@ (800fe4c <_read_r+0x20>)
 800fe30:	4604      	mov	r4, r0
 800fe32:	4608      	mov	r0, r1
 800fe34:	4611      	mov	r1, r2
 800fe36:	2200      	movs	r2, #0
 800fe38:	602a      	str	r2, [r5, #0]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	f7f4 fd13 	bl	8004866 <_read>
 800fe40:	1c43      	adds	r3, r0, #1
 800fe42:	d102      	bne.n	800fe4a <_read_r+0x1e>
 800fe44:	682b      	ldr	r3, [r5, #0]
 800fe46:	b103      	cbz	r3, 800fe4a <_read_r+0x1e>
 800fe48:	6023      	str	r3, [r4, #0]
 800fe4a:	bd38      	pop	{r3, r4, r5, pc}
 800fe4c:	200029f8 	.word	0x200029f8

0800fe50 <_write_r>:
 800fe50:	b538      	push	{r3, r4, r5, lr}
 800fe52:	4d07      	ldr	r5, [pc, #28]	@ (800fe70 <_write_r+0x20>)
 800fe54:	4604      	mov	r4, r0
 800fe56:	4608      	mov	r0, r1
 800fe58:	4611      	mov	r1, r2
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	602a      	str	r2, [r5, #0]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	f7f4 fd1e 	bl	80048a0 <_write>
 800fe64:	1c43      	adds	r3, r0, #1
 800fe66:	d102      	bne.n	800fe6e <_write_r+0x1e>
 800fe68:	682b      	ldr	r3, [r5, #0]
 800fe6a:	b103      	cbz	r3, 800fe6e <_write_r+0x1e>
 800fe6c:	6023      	str	r3, [r4, #0]
 800fe6e:	bd38      	pop	{r3, r4, r5, pc}
 800fe70:	200029f8 	.word	0x200029f8

0800fe74 <__errno>:
 800fe74:	4b01      	ldr	r3, [pc, #4]	@ (800fe7c <__errno+0x8>)
 800fe76:	6818      	ldr	r0, [r3, #0]
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop
 800fe7c:	200001e8 	.word	0x200001e8

0800fe80 <__libc_init_array>:
 800fe80:	b570      	push	{r4, r5, r6, lr}
 800fe82:	4d0d      	ldr	r5, [pc, #52]	@ (800feb8 <__libc_init_array+0x38>)
 800fe84:	4c0d      	ldr	r4, [pc, #52]	@ (800febc <__libc_init_array+0x3c>)
 800fe86:	1b64      	subs	r4, r4, r5
 800fe88:	10a4      	asrs	r4, r4, #2
 800fe8a:	2600      	movs	r6, #0
 800fe8c:	42a6      	cmp	r6, r4
 800fe8e:	d109      	bne.n	800fea4 <__libc_init_array+0x24>
 800fe90:	4d0b      	ldr	r5, [pc, #44]	@ (800fec0 <__libc_init_array+0x40>)
 800fe92:	4c0c      	ldr	r4, [pc, #48]	@ (800fec4 <__libc_init_array+0x44>)
 800fe94:	f002 f874 	bl	8011f80 <_init>
 800fe98:	1b64      	subs	r4, r4, r5
 800fe9a:	10a4      	asrs	r4, r4, #2
 800fe9c:	2600      	movs	r6, #0
 800fe9e:	42a6      	cmp	r6, r4
 800fea0:	d105      	bne.n	800feae <__libc_init_array+0x2e>
 800fea2:	bd70      	pop	{r4, r5, r6, pc}
 800fea4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fea8:	4798      	blx	r3
 800feaa:	3601      	adds	r6, #1
 800feac:	e7ee      	b.n	800fe8c <__libc_init_array+0xc>
 800feae:	f855 3b04 	ldr.w	r3, [r5], #4
 800feb2:	4798      	blx	r3
 800feb4:	3601      	adds	r6, #1
 800feb6:	e7f2      	b.n	800fe9e <__libc_init_array+0x1e>
 800feb8:	08012f40 	.word	0x08012f40
 800febc:	08012f40 	.word	0x08012f40
 800fec0:	08012f40 	.word	0x08012f40
 800fec4:	08012f44 	.word	0x08012f44

0800fec8 <__retarget_lock_init_recursive>:
 800fec8:	4770      	bx	lr

0800feca <__retarget_lock_acquire_recursive>:
 800feca:	4770      	bx	lr

0800fecc <__retarget_lock_release_recursive>:
 800fecc:	4770      	bx	lr

0800fece <memcpy>:
 800fece:	440a      	add	r2, r1
 800fed0:	4291      	cmp	r1, r2
 800fed2:	f100 33ff 	add.w	r3, r0, #4294967295
 800fed6:	d100      	bne.n	800feda <memcpy+0xc>
 800fed8:	4770      	bx	lr
 800feda:	b510      	push	{r4, lr}
 800fedc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fee4:	4291      	cmp	r1, r2
 800fee6:	d1f9      	bne.n	800fedc <memcpy+0xe>
 800fee8:	bd10      	pop	{r4, pc}
 800feea:	0000      	movs	r0, r0
 800feec:	0000      	movs	r0, r0
	...

0800fef0 <nan>:
 800fef0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fef8 <nan+0x8>
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	00000000 	.word	0x00000000
 800fefc:	7ff80000 	.word	0x7ff80000

0800ff00 <nanf>:
 800ff00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ff08 <nanf+0x8>
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	7fc00000 	.word	0x7fc00000

0800ff0c <_free_r>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	4605      	mov	r5, r0
 800ff10:	2900      	cmp	r1, #0
 800ff12:	d041      	beq.n	800ff98 <_free_r+0x8c>
 800ff14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff18:	1f0c      	subs	r4, r1, #4
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	bfb8      	it	lt
 800ff1e:	18e4      	addlt	r4, r4, r3
 800ff20:	f000 fc2c 	bl	801077c <__malloc_lock>
 800ff24:	4a1d      	ldr	r2, [pc, #116]	@ (800ff9c <_free_r+0x90>)
 800ff26:	6813      	ldr	r3, [r2, #0]
 800ff28:	b933      	cbnz	r3, 800ff38 <_free_r+0x2c>
 800ff2a:	6063      	str	r3, [r4, #4]
 800ff2c:	6014      	str	r4, [r2, #0]
 800ff2e:	4628      	mov	r0, r5
 800ff30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff34:	f000 bc28 	b.w	8010788 <__malloc_unlock>
 800ff38:	42a3      	cmp	r3, r4
 800ff3a:	d908      	bls.n	800ff4e <_free_r+0x42>
 800ff3c:	6820      	ldr	r0, [r4, #0]
 800ff3e:	1821      	adds	r1, r4, r0
 800ff40:	428b      	cmp	r3, r1
 800ff42:	bf01      	itttt	eq
 800ff44:	6819      	ldreq	r1, [r3, #0]
 800ff46:	685b      	ldreq	r3, [r3, #4]
 800ff48:	1809      	addeq	r1, r1, r0
 800ff4a:	6021      	streq	r1, [r4, #0]
 800ff4c:	e7ed      	b.n	800ff2a <_free_r+0x1e>
 800ff4e:	461a      	mov	r2, r3
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	b10b      	cbz	r3, 800ff58 <_free_r+0x4c>
 800ff54:	42a3      	cmp	r3, r4
 800ff56:	d9fa      	bls.n	800ff4e <_free_r+0x42>
 800ff58:	6811      	ldr	r1, [r2, #0]
 800ff5a:	1850      	adds	r0, r2, r1
 800ff5c:	42a0      	cmp	r0, r4
 800ff5e:	d10b      	bne.n	800ff78 <_free_r+0x6c>
 800ff60:	6820      	ldr	r0, [r4, #0]
 800ff62:	4401      	add	r1, r0
 800ff64:	1850      	adds	r0, r2, r1
 800ff66:	4283      	cmp	r3, r0
 800ff68:	6011      	str	r1, [r2, #0]
 800ff6a:	d1e0      	bne.n	800ff2e <_free_r+0x22>
 800ff6c:	6818      	ldr	r0, [r3, #0]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	6053      	str	r3, [r2, #4]
 800ff72:	4408      	add	r0, r1
 800ff74:	6010      	str	r0, [r2, #0]
 800ff76:	e7da      	b.n	800ff2e <_free_r+0x22>
 800ff78:	d902      	bls.n	800ff80 <_free_r+0x74>
 800ff7a:	230c      	movs	r3, #12
 800ff7c:	602b      	str	r3, [r5, #0]
 800ff7e:	e7d6      	b.n	800ff2e <_free_r+0x22>
 800ff80:	6820      	ldr	r0, [r4, #0]
 800ff82:	1821      	adds	r1, r4, r0
 800ff84:	428b      	cmp	r3, r1
 800ff86:	bf04      	itt	eq
 800ff88:	6819      	ldreq	r1, [r3, #0]
 800ff8a:	685b      	ldreq	r3, [r3, #4]
 800ff8c:	6063      	str	r3, [r4, #4]
 800ff8e:	bf04      	itt	eq
 800ff90:	1809      	addeq	r1, r1, r0
 800ff92:	6021      	streq	r1, [r4, #0]
 800ff94:	6054      	str	r4, [r2, #4]
 800ff96:	e7ca      	b.n	800ff2e <_free_r+0x22>
 800ff98:	bd38      	pop	{r3, r4, r5, pc}
 800ff9a:	bf00      	nop
 800ff9c:	20002a04 	.word	0x20002a04

0800ffa0 <rshift>:
 800ffa0:	6903      	ldr	r3, [r0, #16]
 800ffa2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ffa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffaa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ffae:	f100 0414 	add.w	r4, r0, #20
 800ffb2:	dd45      	ble.n	8010040 <rshift+0xa0>
 800ffb4:	f011 011f 	ands.w	r1, r1, #31
 800ffb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ffbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ffc0:	d10c      	bne.n	800ffdc <rshift+0x3c>
 800ffc2:	f100 0710 	add.w	r7, r0, #16
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	42b1      	cmp	r1, r6
 800ffca:	d334      	bcc.n	8010036 <rshift+0x96>
 800ffcc:	1a9b      	subs	r3, r3, r2
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	1eea      	subs	r2, r5, #3
 800ffd2:	4296      	cmp	r6, r2
 800ffd4:	bf38      	it	cc
 800ffd6:	2300      	movcc	r3, #0
 800ffd8:	4423      	add	r3, r4
 800ffda:	e015      	b.n	8010008 <rshift+0x68>
 800ffdc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ffe0:	f1c1 0820 	rsb	r8, r1, #32
 800ffe4:	40cf      	lsrs	r7, r1
 800ffe6:	f105 0e04 	add.w	lr, r5, #4
 800ffea:	46a1      	mov	r9, r4
 800ffec:	4576      	cmp	r6, lr
 800ffee:	46f4      	mov	ip, lr
 800fff0:	d815      	bhi.n	801001e <rshift+0x7e>
 800fff2:	1a9a      	subs	r2, r3, r2
 800fff4:	0092      	lsls	r2, r2, #2
 800fff6:	3a04      	subs	r2, #4
 800fff8:	3501      	adds	r5, #1
 800fffa:	42ae      	cmp	r6, r5
 800fffc:	bf38      	it	cc
 800fffe:	2200      	movcc	r2, #0
 8010000:	18a3      	adds	r3, r4, r2
 8010002:	50a7      	str	r7, [r4, r2]
 8010004:	b107      	cbz	r7, 8010008 <rshift+0x68>
 8010006:	3304      	adds	r3, #4
 8010008:	1b1a      	subs	r2, r3, r4
 801000a:	42a3      	cmp	r3, r4
 801000c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010010:	bf08      	it	eq
 8010012:	2300      	moveq	r3, #0
 8010014:	6102      	str	r2, [r0, #16]
 8010016:	bf08      	it	eq
 8010018:	6143      	streq	r3, [r0, #20]
 801001a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801001e:	f8dc c000 	ldr.w	ip, [ip]
 8010022:	fa0c fc08 	lsl.w	ip, ip, r8
 8010026:	ea4c 0707 	orr.w	r7, ip, r7
 801002a:	f849 7b04 	str.w	r7, [r9], #4
 801002e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010032:	40cf      	lsrs	r7, r1
 8010034:	e7da      	b.n	800ffec <rshift+0x4c>
 8010036:	f851 cb04 	ldr.w	ip, [r1], #4
 801003a:	f847 cf04 	str.w	ip, [r7, #4]!
 801003e:	e7c3      	b.n	800ffc8 <rshift+0x28>
 8010040:	4623      	mov	r3, r4
 8010042:	e7e1      	b.n	8010008 <rshift+0x68>

08010044 <__hexdig_fun>:
 8010044:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010048:	2b09      	cmp	r3, #9
 801004a:	d802      	bhi.n	8010052 <__hexdig_fun+0xe>
 801004c:	3820      	subs	r0, #32
 801004e:	b2c0      	uxtb	r0, r0
 8010050:	4770      	bx	lr
 8010052:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010056:	2b05      	cmp	r3, #5
 8010058:	d801      	bhi.n	801005e <__hexdig_fun+0x1a>
 801005a:	3847      	subs	r0, #71	@ 0x47
 801005c:	e7f7      	b.n	801004e <__hexdig_fun+0xa>
 801005e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010062:	2b05      	cmp	r3, #5
 8010064:	d801      	bhi.n	801006a <__hexdig_fun+0x26>
 8010066:	3827      	subs	r0, #39	@ 0x27
 8010068:	e7f1      	b.n	801004e <__hexdig_fun+0xa>
 801006a:	2000      	movs	r0, #0
 801006c:	4770      	bx	lr
	...

08010070 <__gethex>:
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	b085      	sub	sp, #20
 8010076:	468a      	mov	sl, r1
 8010078:	9302      	str	r3, [sp, #8]
 801007a:	680b      	ldr	r3, [r1, #0]
 801007c:	9001      	str	r0, [sp, #4]
 801007e:	4690      	mov	r8, r2
 8010080:	1c9c      	adds	r4, r3, #2
 8010082:	46a1      	mov	r9, r4
 8010084:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010088:	2830      	cmp	r0, #48	@ 0x30
 801008a:	d0fa      	beq.n	8010082 <__gethex+0x12>
 801008c:	eba9 0303 	sub.w	r3, r9, r3
 8010090:	f1a3 0b02 	sub.w	fp, r3, #2
 8010094:	f7ff ffd6 	bl	8010044 <__hexdig_fun>
 8010098:	4605      	mov	r5, r0
 801009a:	2800      	cmp	r0, #0
 801009c:	d168      	bne.n	8010170 <__gethex+0x100>
 801009e:	49a0      	ldr	r1, [pc, #640]	@ (8010320 <__gethex+0x2b0>)
 80100a0:	2201      	movs	r2, #1
 80100a2:	4648      	mov	r0, r9
 80100a4:	f7ff fe8e 	bl	800fdc4 <strncmp>
 80100a8:	4607      	mov	r7, r0
 80100aa:	2800      	cmp	r0, #0
 80100ac:	d167      	bne.n	801017e <__gethex+0x10e>
 80100ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 80100b2:	4626      	mov	r6, r4
 80100b4:	f7ff ffc6 	bl	8010044 <__hexdig_fun>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	d062      	beq.n	8010182 <__gethex+0x112>
 80100bc:	4623      	mov	r3, r4
 80100be:	7818      	ldrb	r0, [r3, #0]
 80100c0:	2830      	cmp	r0, #48	@ 0x30
 80100c2:	4699      	mov	r9, r3
 80100c4:	f103 0301 	add.w	r3, r3, #1
 80100c8:	d0f9      	beq.n	80100be <__gethex+0x4e>
 80100ca:	f7ff ffbb 	bl	8010044 <__hexdig_fun>
 80100ce:	fab0 f580 	clz	r5, r0
 80100d2:	096d      	lsrs	r5, r5, #5
 80100d4:	f04f 0b01 	mov.w	fp, #1
 80100d8:	464a      	mov	r2, r9
 80100da:	4616      	mov	r6, r2
 80100dc:	3201      	adds	r2, #1
 80100de:	7830      	ldrb	r0, [r6, #0]
 80100e0:	f7ff ffb0 	bl	8010044 <__hexdig_fun>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d1f8      	bne.n	80100da <__gethex+0x6a>
 80100e8:	498d      	ldr	r1, [pc, #564]	@ (8010320 <__gethex+0x2b0>)
 80100ea:	2201      	movs	r2, #1
 80100ec:	4630      	mov	r0, r6
 80100ee:	f7ff fe69 	bl	800fdc4 <strncmp>
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d13f      	bne.n	8010176 <__gethex+0x106>
 80100f6:	b944      	cbnz	r4, 801010a <__gethex+0x9a>
 80100f8:	1c74      	adds	r4, r6, #1
 80100fa:	4622      	mov	r2, r4
 80100fc:	4616      	mov	r6, r2
 80100fe:	3201      	adds	r2, #1
 8010100:	7830      	ldrb	r0, [r6, #0]
 8010102:	f7ff ff9f 	bl	8010044 <__hexdig_fun>
 8010106:	2800      	cmp	r0, #0
 8010108:	d1f8      	bne.n	80100fc <__gethex+0x8c>
 801010a:	1ba4      	subs	r4, r4, r6
 801010c:	00a7      	lsls	r7, r4, #2
 801010e:	7833      	ldrb	r3, [r6, #0]
 8010110:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010114:	2b50      	cmp	r3, #80	@ 0x50
 8010116:	d13e      	bne.n	8010196 <__gethex+0x126>
 8010118:	7873      	ldrb	r3, [r6, #1]
 801011a:	2b2b      	cmp	r3, #43	@ 0x2b
 801011c:	d033      	beq.n	8010186 <__gethex+0x116>
 801011e:	2b2d      	cmp	r3, #45	@ 0x2d
 8010120:	d034      	beq.n	801018c <__gethex+0x11c>
 8010122:	1c71      	adds	r1, r6, #1
 8010124:	2400      	movs	r4, #0
 8010126:	7808      	ldrb	r0, [r1, #0]
 8010128:	f7ff ff8c 	bl	8010044 <__hexdig_fun>
 801012c:	1e43      	subs	r3, r0, #1
 801012e:	b2db      	uxtb	r3, r3
 8010130:	2b18      	cmp	r3, #24
 8010132:	d830      	bhi.n	8010196 <__gethex+0x126>
 8010134:	f1a0 0210 	sub.w	r2, r0, #16
 8010138:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801013c:	f7ff ff82 	bl	8010044 <__hexdig_fun>
 8010140:	f100 3cff 	add.w	ip, r0, #4294967295
 8010144:	fa5f fc8c 	uxtb.w	ip, ip
 8010148:	f1bc 0f18 	cmp.w	ip, #24
 801014c:	f04f 030a 	mov.w	r3, #10
 8010150:	d91e      	bls.n	8010190 <__gethex+0x120>
 8010152:	b104      	cbz	r4, 8010156 <__gethex+0xe6>
 8010154:	4252      	negs	r2, r2
 8010156:	4417      	add	r7, r2
 8010158:	f8ca 1000 	str.w	r1, [sl]
 801015c:	b1ed      	cbz	r5, 801019a <__gethex+0x12a>
 801015e:	f1bb 0f00 	cmp.w	fp, #0
 8010162:	bf0c      	ite	eq
 8010164:	2506      	moveq	r5, #6
 8010166:	2500      	movne	r5, #0
 8010168:	4628      	mov	r0, r5
 801016a:	b005      	add	sp, #20
 801016c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010170:	2500      	movs	r5, #0
 8010172:	462c      	mov	r4, r5
 8010174:	e7b0      	b.n	80100d8 <__gethex+0x68>
 8010176:	2c00      	cmp	r4, #0
 8010178:	d1c7      	bne.n	801010a <__gethex+0x9a>
 801017a:	4627      	mov	r7, r4
 801017c:	e7c7      	b.n	801010e <__gethex+0x9e>
 801017e:	464e      	mov	r6, r9
 8010180:	462f      	mov	r7, r5
 8010182:	2501      	movs	r5, #1
 8010184:	e7c3      	b.n	801010e <__gethex+0x9e>
 8010186:	2400      	movs	r4, #0
 8010188:	1cb1      	adds	r1, r6, #2
 801018a:	e7cc      	b.n	8010126 <__gethex+0xb6>
 801018c:	2401      	movs	r4, #1
 801018e:	e7fb      	b.n	8010188 <__gethex+0x118>
 8010190:	fb03 0002 	mla	r0, r3, r2, r0
 8010194:	e7ce      	b.n	8010134 <__gethex+0xc4>
 8010196:	4631      	mov	r1, r6
 8010198:	e7de      	b.n	8010158 <__gethex+0xe8>
 801019a:	eba6 0309 	sub.w	r3, r6, r9
 801019e:	3b01      	subs	r3, #1
 80101a0:	4629      	mov	r1, r5
 80101a2:	2b07      	cmp	r3, #7
 80101a4:	dc0a      	bgt.n	80101bc <__gethex+0x14c>
 80101a6:	9801      	ldr	r0, [sp, #4]
 80101a8:	f000 faf4 	bl	8010794 <_Balloc>
 80101ac:	4604      	mov	r4, r0
 80101ae:	b940      	cbnz	r0, 80101c2 <__gethex+0x152>
 80101b0:	4b5c      	ldr	r3, [pc, #368]	@ (8010324 <__gethex+0x2b4>)
 80101b2:	4602      	mov	r2, r0
 80101b4:	21e4      	movs	r1, #228	@ 0xe4
 80101b6:	485c      	ldr	r0, [pc, #368]	@ (8010328 <__gethex+0x2b8>)
 80101b8:	f001 fb66 	bl	8011888 <__assert_func>
 80101bc:	3101      	adds	r1, #1
 80101be:	105b      	asrs	r3, r3, #1
 80101c0:	e7ef      	b.n	80101a2 <__gethex+0x132>
 80101c2:	f100 0a14 	add.w	sl, r0, #20
 80101c6:	2300      	movs	r3, #0
 80101c8:	4655      	mov	r5, sl
 80101ca:	469b      	mov	fp, r3
 80101cc:	45b1      	cmp	r9, r6
 80101ce:	d337      	bcc.n	8010240 <__gethex+0x1d0>
 80101d0:	f845 bb04 	str.w	fp, [r5], #4
 80101d4:	eba5 050a 	sub.w	r5, r5, sl
 80101d8:	10ad      	asrs	r5, r5, #2
 80101da:	6125      	str	r5, [r4, #16]
 80101dc:	4658      	mov	r0, fp
 80101de:	f000 fbcb 	bl	8010978 <__hi0bits>
 80101e2:	016d      	lsls	r5, r5, #5
 80101e4:	f8d8 6000 	ldr.w	r6, [r8]
 80101e8:	1a2d      	subs	r5, r5, r0
 80101ea:	42b5      	cmp	r5, r6
 80101ec:	dd54      	ble.n	8010298 <__gethex+0x228>
 80101ee:	1bad      	subs	r5, r5, r6
 80101f0:	4629      	mov	r1, r5
 80101f2:	4620      	mov	r0, r4
 80101f4:	f000 ff5f 	bl	80110b6 <__any_on>
 80101f8:	4681      	mov	r9, r0
 80101fa:	b178      	cbz	r0, 801021c <__gethex+0x1ac>
 80101fc:	1e6b      	subs	r3, r5, #1
 80101fe:	1159      	asrs	r1, r3, #5
 8010200:	f003 021f 	and.w	r2, r3, #31
 8010204:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010208:	f04f 0901 	mov.w	r9, #1
 801020c:	fa09 f202 	lsl.w	r2, r9, r2
 8010210:	420a      	tst	r2, r1
 8010212:	d003      	beq.n	801021c <__gethex+0x1ac>
 8010214:	454b      	cmp	r3, r9
 8010216:	dc36      	bgt.n	8010286 <__gethex+0x216>
 8010218:	f04f 0902 	mov.w	r9, #2
 801021c:	4629      	mov	r1, r5
 801021e:	4620      	mov	r0, r4
 8010220:	f7ff febe 	bl	800ffa0 <rshift>
 8010224:	442f      	add	r7, r5
 8010226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801022a:	42bb      	cmp	r3, r7
 801022c:	da42      	bge.n	80102b4 <__gethex+0x244>
 801022e:	9801      	ldr	r0, [sp, #4]
 8010230:	4621      	mov	r1, r4
 8010232:	f000 faef 	bl	8010814 <_Bfree>
 8010236:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010238:	2300      	movs	r3, #0
 801023a:	6013      	str	r3, [r2, #0]
 801023c:	25a3      	movs	r5, #163	@ 0xa3
 801023e:	e793      	b.n	8010168 <__gethex+0xf8>
 8010240:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010244:	2a2e      	cmp	r2, #46	@ 0x2e
 8010246:	d012      	beq.n	801026e <__gethex+0x1fe>
 8010248:	2b20      	cmp	r3, #32
 801024a:	d104      	bne.n	8010256 <__gethex+0x1e6>
 801024c:	f845 bb04 	str.w	fp, [r5], #4
 8010250:	f04f 0b00 	mov.w	fp, #0
 8010254:	465b      	mov	r3, fp
 8010256:	7830      	ldrb	r0, [r6, #0]
 8010258:	9303      	str	r3, [sp, #12]
 801025a:	f7ff fef3 	bl	8010044 <__hexdig_fun>
 801025e:	9b03      	ldr	r3, [sp, #12]
 8010260:	f000 000f 	and.w	r0, r0, #15
 8010264:	4098      	lsls	r0, r3
 8010266:	ea4b 0b00 	orr.w	fp, fp, r0
 801026a:	3304      	adds	r3, #4
 801026c:	e7ae      	b.n	80101cc <__gethex+0x15c>
 801026e:	45b1      	cmp	r9, r6
 8010270:	d8ea      	bhi.n	8010248 <__gethex+0x1d8>
 8010272:	492b      	ldr	r1, [pc, #172]	@ (8010320 <__gethex+0x2b0>)
 8010274:	9303      	str	r3, [sp, #12]
 8010276:	2201      	movs	r2, #1
 8010278:	4630      	mov	r0, r6
 801027a:	f7ff fda3 	bl	800fdc4 <strncmp>
 801027e:	9b03      	ldr	r3, [sp, #12]
 8010280:	2800      	cmp	r0, #0
 8010282:	d1e1      	bne.n	8010248 <__gethex+0x1d8>
 8010284:	e7a2      	b.n	80101cc <__gethex+0x15c>
 8010286:	1ea9      	subs	r1, r5, #2
 8010288:	4620      	mov	r0, r4
 801028a:	f000 ff14 	bl	80110b6 <__any_on>
 801028e:	2800      	cmp	r0, #0
 8010290:	d0c2      	beq.n	8010218 <__gethex+0x1a8>
 8010292:	f04f 0903 	mov.w	r9, #3
 8010296:	e7c1      	b.n	801021c <__gethex+0x1ac>
 8010298:	da09      	bge.n	80102ae <__gethex+0x23e>
 801029a:	1b75      	subs	r5, r6, r5
 801029c:	4621      	mov	r1, r4
 801029e:	9801      	ldr	r0, [sp, #4]
 80102a0:	462a      	mov	r2, r5
 80102a2:	f000 fccf 	bl	8010c44 <__lshift>
 80102a6:	1b7f      	subs	r7, r7, r5
 80102a8:	4604      	mov	r4, r0
 80102aa:	f100 0a14 	add.w	sl, r0, #20
 80102ae:	f04f 0900 	mov.w	r9, #0
 80102b2:	e7b8      	b.n	8010226 <__gethex+0x1b6>
 80102b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80102b8:	42bd      	cmp	r5, r7
 80102ba:	dd6f      	ble.n	801039c <__gethex+0x32c>
 80102bc:	1bed      	subs	r5, r5, r7
 80102be:	42ae      	cmp	r6, r5
 80102c0:	dc34      	bgt.n	801032c <__gethex+0x2bc>
 80102c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d022      	beq.n	8010310 <__gethex+0x2a0>
 80102ca:	2b03      	cmp	r3, #3
 80102cc:	d024      	beq.n	8010318 <__gethex+0x2a8>
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d115      	bne.n	80102fe <__gethex+0x28e>
 80102d2:	42ae      	cmp	r6, r5
 80102d4:	d113      	bne.n	80102fe <__gethex+0x28e>
 80102d6:	2e01      	cmp	r6, #1
 80102d8:	d10b      	bne.n	80102f2 <__gethex+0x282>
 80102da:	9a02      	ldr	r2, [sp, #8]
 80102dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80102e0:	6013      	str	r3, [r2, #0]
 80102e2:	2301      	movs	r3, #1
 80102e4:	6123      	str	r3, [r4, #16]
 80102e6:	f8ca 3000 	str.w	r3, [sl]
 80102ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102ec:	2562      	movs	r5, #98	@ 0x62
 80102ee:	601c      	str	r4, [r3, #0]
 80102f0:	e73a      	b.n	8010168 <__gethex+0xf8>
 80102f2:	1e71      	subs	r1, r6, #1
 80102f4:	4620      	mov	r0, r4
 80102f6:	f000 fede 	bl	80110b6 <__any_on>
 80102fa:	2800      	cmp	r0, #0
 80102fc:	d1ed      	bne.n	80102da <__gethex+0x26a>
 80102fe:	9801      	ldr	r0, [sp, #4]
 8010300:	4621      	mov	r1, r4
 8010302:	f000 fa87 	bl	8010814 <_Bfree>
 8010306:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010308:	2300      	movs	r3, #0
 801030a:	6013      	str	r3, [r2, #0]
 801030c:	2550      	movs	r5, #80	@ 0x50
 801030e:	e72b      	b.n	8010168 <__gethex+0xf8>
 8010310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1f3      	bne.n	80102fe <__gethex+0x28e>
 8010316:	e7e0      	b.n	80102da <__gethex+0x26a>
 8010318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1dd      	bne.n	80102da <__gethex+0x26a>
 801031e:	e7ee      	b.n	80102fe <__gethex+0x28e>
 8010320:	08012b7c 	.word	0x08012b7c
 8010324:	08012ce9 	.word	0x08012ce9
 8010328:	08012cfa 	.word	0x08012cfa
 801032c:	1e6f      	subs	r7, r5, #1
 801032e:	f1b9 0f00 	cmp.w	r9, #0
 8010332:	d130      	bne.n	8010396 <__gethex+0x326>
 8010334:	b127      	cbz	r7, 8010340 <__gethex+0x2d0>
 8010336:	4639      	mov	r1, r7
 8010338:	4620      	mov	r0, r4
 801033a:	f000 febc 	bl	80110b6 <__any_on>
 801033e:	4681      	mov	r9, r0
 8010340:	117a      	asrs	r2, r7, #5
 8010342:	2301      	movs	r3, #1
 8010344:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010348:	f007 071f 	and.w	r7, r7, #31
 801034c:	40bb      	lsls	r3, r7
 801034e:	4213      	tst	r3, r2
 8010350:	4629      	mov	r1, r5
 8010352:	4620      	mov	r0, r4
 8010354:	bf18      	it	ne
 8010356:	f049 0902 	orrne.w	r9, r9, #2
 801035a:	f7ff fe21 	bl	800ffa0 <rshift>
 801035e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010362:	1b76      	subs	r6, r6, r5
 8010364:	2502      	movs	r5, #2
 8010366:	f1b9 0f00 	cmp.w	r9, #0
 801036a:	d047      	beq.n	80103fc <__gethex+0x38c>
 801036c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010370:	2b02      	cmp	r3, #2
 8010372:	d015      	beq.n	80103a0 <__gethex+0x330>
 8010374:	2b03      	cmp	r3, #3
 8010376:	d017      	beq.n	80103a8 <__gethex+0x338>
 8010378:	2b01      	cmp	r3, #1
 801037a:	d109      	bne.n	8010390 <__gethex+0x320>
 801037c:	f019 0f02 	tst.w	r9, #2
 8010380:	d006      	beq.n	8010390 <__gethex+0x320>
 8010382:	f8da 3000 	ldr.w	r3, [sl]
 8010386:	ea49 0903 	orr.w	r9, r9, r3
 801038a:	f019 0f01 	tst.w	r9, #1
 801038e:	d10e      	bne.n	80103ae <__gethex+0x33e>
 8010390:	f045 0510 	orr.w	r5, r5, #16
 8010394:	e032      	b.n	80103fc <__gethex+0x38c>
 8010396:	f04f 0901 	mov.w	r9, #1
 801039a:	e7d1      	b.n	8010340 <__gethex+0x2d0>
 801039c:	2501      	movs	r5, #1
 801039e:	e7e2      	b.n	8010366 <__gethex+0x2f6>
 80103a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103a2:	f1c3 0301 	rsb	r3, r3, #1
 80103a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d0f0      	beq.n	8010390 <__gethex+0x320>
 80103ae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80103b2:	f104 0314 	add.w	r3, r4, #20
 80103b6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80103ba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80103be:	f04f 0c00 	mov.w	ip, #0
 80103c2:	4618      	mov	r0, r3
 80103c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80103c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80103cc:	d01b      	beq.n	8010406 <__gethex+0x396>
 80103ce:	3201      	adds	r2, #1
 80103d0:	6002      	str	r2, [r0, #0]
 80103d2:	2d02      	cmp	r5, #2
 80103d4:	f104 0314 	add.w	r3, r4, #20
 80103d8:	d13c      	bne.n	8010454 <__gethex+0x3e4>
 80103da:	f8d8 2000 	ldr.w	r2, [r8]
 80103de:	3a01      	subs	r2, #1
 80103e0:	42b2      	cmp	r2, r6
 80103e2:	d109      	bne.n	80103f8 <__gethex+0x388>
 80103e4:	1171      	asrs	r1, r6, #5
 80103e6:	2201      	movs	r2, #1
 80103e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80103ec:	f006 061f 	and.w	r6, r6, #31
 80103f0:	fa02 f606 	lsl.w	r6, r2, r6
 80103f4:	421e      	tst	r6, r3
 80103f6:	d13a      	bne.n	801046e <__gethex+0x3fe>
 80103f8:	f045 0520 	orr.w	r5, r5, #32
 80103fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103fe:	601c      	str	r4, [r3, #0]
 8010400:	9b02      	ldr	r3, [sp, #8]
 8010402:	601f      	str	r7, [r3, #0]
 8010404:	e6b0      	b.n	8010168 <__gethex+0xf8>
 8010406:	4299      	cmp	r1, r3
 8010408:	f843 cc04 	str.w	ip, [r3, #-4]
 801040c:	d8d9      	bhi.n	80103c2 <__gethex+0x352>
 801040e:	68a3      	ldr	r3, [r4, #8]
 8010410:	459b      	cmp	fp, r3
 8010412:	db17      	blt.n	8010444 <__gethex+0x3d4>
 8010414:	6861      	ldr	r1, [r4, #4]
 8010416:	9801      	ldr	r0, [sp, #4]
 8010418:	3101      	adds	r1, #1
 801041a:	f000 f9bb 	bl	8010794 <_Balloc>
 801041e:	4681      	mov	r9, r0
 8010420:	b918      	cbnz	r0, 801042a <__gethex+0x3ba>
 8010422:	4b1a      	ldr	r3, [pc, #104]	@ (801048c <__gethex+0x41c>)
 8010424:	4602      	mov	r2, r0
 8010426:	2184      	movs	r1, #132	@ 0x84
 8010428:	e6c5      	b.n	80101b6 <__gethex+0x146>
 801042a:	6922      	ldr	r2, [r4, #16]
 801042c:	3202      	adds	r2, #2
 801042e:	f104 010c 	add.w	r1, r4, #12
 8010432:	0092      	lsls	r2, r2, #2
 8010434:	300c      	adds	r0, #12
 8010436:	f7ff fd4a 	bl	800fece <memcpy>
 801043a:	4621      	mov	r1, r4
 801043c:	9801      	ldr	r0, [sp, #4]
 801043e:	f000 f9e9 	bl	8010814 <_Bfree>
 8010442:	464c      	mov	r4, r9
 8010444:	6923      	ldr	r3, [r4, #16]
 8010446:	1c5a      	adds	r2, r3, #1
 8010448:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801044c:	6122      	str	r2, [r4, #16]
 801044e:	2201      	movs	r2, #1
 8010450:	615a      	str	r2, [r3, #20]
 8010452:	e7be      	b.n	80103d2 <__gethex+0x362>
 8010454:	6922      	ldr	r2, [r4, #16]
 8010456:	455a      	cmp	r2, fp
 8010458:	dd0b      	ble.n	8010472 <__gethex+0x402>
 801045a:	2101      	movs	r1, #1
 801045c:	4620      	mov	r0, r4
 801045e:	f7ff fd9f 	bl	800ffa0 <rshift>
 8010462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010466:	3701      	adds	r7, #1
 8010468:	42bb      	cmp	r3, r7
 801046a:	f6ff aee0 	blt.w	801022e <__gethex+0x1be>
 801046e:	2501      	movs	r5, #1
 8010470:	e7c2      	b.n	80103f8 <__gethex+0x388>
 8010472:	f016 061f 	ands.w	r6, r6, #31
 8010476:	d0fa      	beq.n	801046e <__gethex+0x3fe>
 8010478:	4453      	add	r3, sl
 801047a:	f1c6 0620 	rsb	r6, r6, #32
 801047e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010482:	f000 fa79 	bl	8010978 <__hi0bits>
 8010486:	42b0      	cmp	r0, r6
 8010488:	dbe7      	blt.n	801045a <__gethex+0x3ea>
 801048a:	e7f0      	b.n	801046e <__gethex+0x3fe>
 801048c:	08012ce9 	.word	0x08012ce9

08010490 <L_shift>:
 8010490:	f1c2 0208 	rsb	r2, r2, #8
 8010494:	0092      	lsls	r2, r2, #2
 8010496:	b570      	push	{r4, r5, r6, lr}
 8010498:	f1c2 0620 	rsb	r6, r2, #32
 801049c:	6843      	ldr	r3, [r0, #4]
 801049e:	6804      	ldr	r4, [r0, #0]
 80104a0:	fa03 f506 	lsl.w	r5, r3, r6
 80104a4:	432c      	orrs	r4, r5
 80104a6:	40d3      	lsrs	r3, r2
 80104a8:	6004      	str	r4, [r0, #0]
 80104aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80104ae:	4288      	cmp	r0, r1
 80104b0:	d3f4      	bcc.n	801049c <L_shift+0xc>
 80104b2:	bd70      	pop	{r4, r5, r6, pc}

080104b4 <__match>:
 80104b4:	b530      	push	{r4, r5, lr}
 80104b6:	6803      	ldr	r3, [r0, #0]
 80104b8:	3301      	adds	r3, #1
 80104ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104be:	b914      	cbnz	r4, 80104c6 <__match+0x12>
 80104c0:	6003      	str	r3, [r0, #0]
 80104c2:	2001      	movs	r0, #1
 80104c4:	bd30      	pop	{r4, r5, pc}
 80104c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80104ce:	2d19      	cmp	r5, #25
 80104d0:	bf98      	it	ls
 80104d2:	3220      	addls	r2, #32
 80104d4:	42a2      	cmp	r2, r4
 80104d6:	d0f0      	beq.n	80104ba <__match+0x6>
 80104d8:	2000      	movs	r0, #0
 80104da:	e7f3      	b.n	80104c4 <__match+0x10>

080104dc <__hexnan>:
 80104dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	680b      	ldr	r3, [r1, #0]
 80104e2:	6801      	ldr	r1, [r0, #0]
 80104e4:	115e      	asrs	r6, r3, #5
 80104e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80104ea:	f013 031f 	ands.w	r3, r3, #31
 80104ee:	b087      	sub	sp, #28
 80104f0:	bf18      	it	ne
 80104f2:	3604      	addne	r6, #4
 80104f4:	2500      	movs	r5, #0
 80104f6:	1f37      	subs	r7, r6, #4
 80104f8:	4682      	mov	sl, r0
 80104fa:	4690      	mov	r8, r2
 80104fc:	9301      	str	r3, [sp, #4]
 80104fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8010502:	46b9      	mov	r9, r7
 8010504:	463c      	mov	r4, r7
 8010506:	9502      	str	r5, [sp, #8]
 8010508:	46ab      	mov	fp, r5
 801050a:	784a      	ldrb	r2, [r1, #1]
 801050c:	1c4b      	adds	r3, r1, #1
 801050e:	9303      	str	r3, [sp, #12]
 8010510:	b342      	cbz	r2, 8010564 <__hexnan+0x88>
 8010512:	4610      	mov	r0, r2
 8010514:	9105      	str	r1, [sp, #20]
 8010516:	9204      	str	r2, [sp, #16]
 8010518:	f7ff fd94 	bl	8010044 <__hexdig_fun>
 801051c:	2800      	cmp	r0, #0
 801051e:	d151      	bne.n	80105c4 <__hexnan+0xe8>
 8010520:	9a04      	ldr	r2, [sp, #16]
 8010522:	9905      	ldr	r1, [sp, #20]
 8010524:	2a20      	cmp	r2, #32
 8010526:	d818      	bhi.n	801055a <__hexnan+0x7e>
 8010528:	9b02      	ldr	r3, [sp, #8]
 801052a:	459b      	cmp	fp, r3
 801052c:	dd13      	ble.n	8010556 <__hexnan+0x7a>
 801052e:	454c      	cmp	r4, r9
 8010530:	d206      	bcs.n	8010540 <__hexnan+0x64>
 8010532:	2d07      	cmp	r5, #7
 8010534:	dc04      	bgt.n	8010540 <__hexnan+0x64>
 8010536:	462a      	mov	r2, r5
 8010538:	4649      	mov	r1, r9
 801053a:	4620      	mov	r0, r4
 801053c:	f7ff ffa8 	bl	8010490 <L_shift>
 8010540:	4544      	cmp	r4, r8
 8010542:	d952      	bls.n	80105ea <__hexnan+0x10e>
 8010544:	2300      	movs	r3, #0
 8010546:	f1a4 0904 	sub.w	r9, r4, #4
 801054a:	f844 3c04 	str.w	r3, [r4, #-4]
 801054e:	f8cd b008 	str.w	fp, [sp, #8]
 8010552:	464c      	mov	r4, r9
 8010554:	461d      	mov	r5, r3
 8010556:	9903      	ldr	r1, [sp, #12]
 8010558:	e7d7      	b.n	801050a <__hexnan+0x2e>
 801055a:	2a29      	cmp	r2, #41	@ 0x29
 801055c:	d157      	bne.n	801060e <__hexnan+0x132>
 801055e:	3102      	adds	r1, #2
 8010560:	f8ca 1000 	str.w	r1, [sl]
 8010564:	f1bb 0f00 	cmp.w	fp, #0
 8010568:	d051      	beq.n	801060e <__hexnan+0x132>
 801056a:	454c      	cmp	r4, r9
 801056c:	d206      	bcs.n	801057c <__hexnan+0xa0>
 801056e:	2d07      	cmp	r5, #7
 8010570:	dc04      	bgt.n	801057c <__hexnan+0xa0>
 8010572:	462a      	mov	r2, r5
 8010574:	4649      	mov	r1, r9
 8010576:	4620      	mov	r0, r4
 8010578:	f7ff ff8a 	bl	8010490 <L_shift>
 801057c:	4544      	cmp	r4, r8
 801057e:	d936      	bls.n	80105ee <__hexnan+0x112>
 8010580:	f1a8 0204 	sub.w	r2, r8, #4
 8010584:	4623      	mov	r3, r4
 8010586:	f853 1b04 	ldr.w	r1, [r3], #4
 801058a:	f842 1f04 	str.w	r1, [r2, #4]!
 801058e:	429f      	cmp	r7, r3
 8010590:	d2f9      	bcs.n	8010586 <__hexnan+0xaa>
 8010592:	1b3b      	subs	r3, r7, r4
 8010594:	f023 0303 	bic.w	r3, r3, #3
 8010598:	3304      	adds	r3, #4
 801059a:	3401      	adds	r4, #1
 801059c:	3e03      	subs	r6, #3
 801059e:	42b4      	cmp	r4, r6
 80105a0:	bf88      	it	hi
 80105a2:	2304      	movhi	r3, #4
 80105a4:	4443      	add	r3, r8
 80105a6:	2200      	movs	r2, #0
 80105a8:	f843 2b04 	str.w	r2, [r3], #4
 80105ac:	429f      	cmp	r7, r3
 80105ae:	d2fb      	bcs.n	80105a8 <__hexnan+0xcc>
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	b91b      	cbnz	r3, 80105bc <__hexnan+0xe0>
 80105b4:	4547      	cmp	r7, r8
 80105b6:	d128      	bne.n	801060a <__hexnan+0x12e>
 80105b8:	2301      	movs	r3, #1
 80105ba:	603b      	str	r3, [r7, #0]
 80105bc:	2005      	movs	r0, #5
 80105be:	b007      	add	sp, #28
 80105c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c4:	3501      	adds	r5, #1
 80105c6:	2d08      	cmp	r5, #8
 80105c8:	f10b 0b01 	add.w	fp, fp, #1
 80105cc:	dd06      	ble.n	80105dc <__hexnan+0x100>
 80105ce:	4544      	cmp	r4, r8
 80105d0:	d9c1      	bls.n	8010556 <__hexnan+0x7a>
 80105d2:	2300      	movs	r3, #0
 80105d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80105d8:	2501      	movs	r5, #1
 80105da:	3c04      	subs	r4, #4
 80105dc:	6822      	ldr	r2, [r4, #0]
 80105de:	f000 000f 	and.w	r0, r0, #15
 80105e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80105e6:	6020      	str	r0, [r4, #0]
 80105e8:	e7b5      	b.n	8010556 <__hexnan+0x7a>
 80105ea:	2508      	movs	r5, #8
 80105ec:	e7b3      	b.n	8010556 <__hexnan+0x7a>
 80105ee:	9b01      	ldr	r3, [sp, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d0dd      	beq.n	80105b0 <__hexnan+0xd4>
 80105f4:	f1c3 0320 	rsb	r3, r3, #32
 80105f8:	f04f 32ff 	mov.w	r2, #4294967295
 80105fc:	40da      	lsrs	r2, r3
 80105fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010602:	4013      	ands	r3, r2
 8010604:	f846 3c04 	str.w	r3, [r6, #-4]
 8010608:	e7d2      	b.n	80105b0 <__hexnan+0xd4>
 801060a:	3f04      	subs	r7, #4
 801060c:	e7d0      	b.n	80105b0 <__hexnan+0xd4>
 801060e:	2004      	movs	r0, #4
 8010610:	e7d5      	b.n	80105be <__hexnan+0xe2>
	...

08010614 <sbrk_aligned>:
 8010614:	b570      	push	{r4, r5, r6, lr}
 8010616:	4e0f      	ldr	r6, [pc, #60]	@ (8010654 <sbrk_aligned+0x40>)
 8010618:	460c      	mov	r4, r1
 801061a:	6831      	ldr	r1, [r6, #0]
 801061c:	4605      	mov	r5, r0
 801061e:	b911      	cbnz	r1, 8010626 <sbrk_aligned+0x12>
 8010620:	f001 f922 	bl	8011868 <_sbrk_r>
 8010624:	6030      	str	r0, [r6, #0]
 8010626:	4621      	mov	r1, r4
 8010628:	4628      	mov	r0, r5
 801062a:	f001 f91d 	bl	8011868 <_sbrk_r>
 801062e:	1c43      	adds	r3, r0, #1
 8010630:	d103      	bne.n	801063a <sbrk_aligned+0x26>
 8010632:	f04f 34ff 	mov.w	r4, #4294967295
 8010636:	4620      	mov	r0, r4
 8010638:	bd70      	pop	{r4, r5, r6, pc}
 801063a:	1cc4      	adds	r4, r0, #3
 801063c:	f024 0403 	bic.w	r4, r4, #3
 8010640:	42a0      	cmp	r0, r4
 8010642:	d0f8      	beq.n	8010636 <sbrk_aligned+0x22>
 8010644:	1a21      	subs	r1, r4, r0
 8010646:	4628      	mov	r0, r5
 8010648:	f001 f90e 	bl	8011868 <_sbrk_r>
 801064c:	3001      	adds	r0, #1
 801064e:	d1f2      	bne.n	8010636 <sbrk_aligned+0x22>
 8010650:	e7ef      	b.n	8010632 <sbrk_aligned+0x1e>
 8010652:	bf00      	nop
 8010654:	20002a00 	.word	0x20002a00

08010658 <_malloc_r>:
 8010658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801065c:	1ccd      	adds	r5, r1, #3
 801065e:	f025 0503 	bic.w	r5, r5, #3
 8010662:	3508      	adds	r5, #8
 8010664:	2d0c      	cmp	r5, #12
 8010666:	bf38      	it	cc
 8010668:	250c      	movcc	r5, #12
 801066a:	2d00      	cmp	r5, #0
 801066c:	4606      	mov	r6, r0
 801066e:	db01      	blt.n	8010674 <_malloc_r+0x1c>
 8010670:	42a9      	cmp	r1, r5
 8010672:	d904      	bls.n	801067e <_malloc_r+0x26>
 8010674:	230c      	movs	r3, #12
 8010676:	6033      	str	r3, [r6, #0]
 8010678:	2000      	movs	r0, #0
 801067a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801067e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010754 <_malloc_r+0xfc>
 8010682:	f000 f87b 	bl	801077c <__malloc_lock>
 8010686:	f8d8 3000 	ldr.w	r3, [r8]
 801068a:	461c      	mov	r4, r3
 801068c:	bb44      	cbnz	r4, 80106e0 <_malloc_r+0x88>
 801068e:	4629      	mov	r1, r5
 8010690:	4630      	mov	r0, r6
 8010692:	f7ff ffbf 	bl	8010614 <sbrk_aligned>
 8010696:	1c43      	adds	r3, r0, #1
 8010698:	4604      	mov	r4, r0
 801069a:	d158      	bne.n	801074e <_malloc_r+0xf6>
 801069c:	f8d8 4000 	ldr.w	r4, [r8]
 80106a0:	4627      	mov	r7, r4
 80106a2:	2f00      	cmp	r7, #0
 80106a4:	d143      	bne.n	801072e <_malloc_r+0xd6>
 80106a6:	2c00      	cmp	r4, #0
 80106a8:	d04b      	beq.n	8010742 <_malloc_r+0xea>
 80106aa:	6823      	ldr	r3, [r4, #0]
 80106ac:	4639      	mov	r1, r7
 80106ae:	4630      	mov	r0, r6
 80106b0:	eb04 0903 	add.w	r9, r4, r3
 80106b4:	f001 f8d8 	bl	8011868 <_sbrk_r>
 80106b8:	4581      	cmp	r9, r0
 80106ba:	d142      	bne.n	8010742 <_malloc_r+0xea>
 80106bc:	6821      	ldr	r1, [r4, #0]
 80106be:	1a6d      	subs	r5, r5, r1
 80106c0:	4629      	mov	r1, r5
 80106c2:	4630      	mov	r0, r6
 80106c4:	f7ff ffa6 	bl	8010614 <sbrk_aligned>
 80106c8:	3001      	adds	r0, #1
 80106ca:	d03a      	beq.n	8010742 <_malloc_r+0xea>
 80106cc:	6823      	ldr	r3, [r4, #0]
 80106ce:	442b      	add	r3, r5
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	f8d8 3000 	ldr.w	r3, [r8]
 80106d6:	685a      	ldr	r2, [r3, #4]
 80106d8:	bb62      	cbnz	r2, 8010734 <_malloc_r+0xdc>
 80106da:	f8c8 7000 	str.w	r7, [r8]
 80106de:	e00f      	b.n	8010700 <_malloc_r+0xa8>
 80106e0:	6822      	ldr	r2, [r4, #0]
 80106e2:	1b52      	subs	r2, r2, r5
 80106e4:	d420      	bmi.n	8010728 <_malloc_r+0xd0>
 80106e6:	2a0b      	cmp	r2, #11
 80106e8:	d917      	bls.n	801071a <_malloc_r+0xc2>
 80106ea:	1961      	adds	r1, r4, r5
 80106ec:	42a3      	cmp	r3, r4
 80106ee:	6025      	str	r5, [r4, #0]
 80106f0:	bf18      	it	ne
 80106f2:	6059      	strne	r1, [r3, #4]
 80106f4:	6863      	ldr	r3, [r4, #4]
 80106f6:	bf08      	it	eq
 80106f8:	f8c8 1000 	streq.w	r1, [r8]
 80106fc:	5162      	str	r2, [r4, r5]
 80106fe:	604b      	str	r3, [r1, #4]
 8010700:	4630      	mov	r0, r6
 8010702:	f000 f841 	bl	8010788 <__malloc_unlock>
 8010706:	f104 000b 	add.w	r0, r4, #11
 801070a:	1d23      	adds	r3, r4, #4
 801070c:	f020 0007 	bic.w	r0, r0, #7
 8010710:	1ac2      	subs	r2, r0, r3
 8010712:	bf1c      	itt	ne
 8010714:	1a1b      	subne	r3, r3, r0
 8010716:	50a3      	strne	r3, [r4, r2]
 8010718:	e7af      	b.n	801067a <_malloc_r+0x22>
 801071a:	6862      	ldr	r2, [r4, #4]
 801071c:	42a3      	cmp	r3, r4
 801071e:	bf0c      	ite	eq
 8010720:	f8c8 2000 	streq.w	r2, [r8]
 8010724:	605a      	strne	r2, [r3, #4]
 8010726:	e7eb      	b.n	8010700 <_malloc_r+0xa8>
 8010728:	4623      	mov	r3, r4
 801072a:	6864      	ldr	r4, [r4, #4]
 801072c:	e7ae      	b.n	801068c <_malloc_r+0x34>
 801072e:	463c      	mov	r4, r7
 8010730:	687f      	ldr	r7, [r7, #4]
 8010732:	e7b6      	b.n	80106a2 <_malloc_r+0x4a>
 8010734:	461a      	mov	r2, r3
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	42a3      	cmp	r3, r4
 801073a:	d1fb      	bne.n	8010734 <_malloc_r+0xdc>
 801073c:	2300      	movs	r3, #0
 801073e:	6053      	str	r3, [r2, #4]
 8010740:	e7de      	b.n	8010700 <_malloc_r+0xa8>
 8010742:	230c      	movs	r3, #12
 8010744:	6033      	str	r3, [r6, #0]
 8010746:	4630      	mov	r0, r6
 8010748:	f000 f81e 	bl	8010788 <__malloc_unlock>
 801074c:	e794      	b.n	8010678 <_malloc_r+0x20>
 801074e:	6005      	str	r5, [r0, #0]
 8010750:	e7d6      	b.n	8010700 <_malloc_r+0xa8>
 8010752:	bf00      	nop
 8010754:	20002a04 	.word	0x20002a04

08010758 <__ascii_mbtowc>:
 8010758:	b082      	sub	sp, #8
 801075a:	b901      	cbnz	r1, 801075e <__ascii_mbtowc+0x6>
 801075c:	a901      	add	r1, sp, #4
 801075e:	b142      	cbz	r2, 8010772 <__ascii_mbtowc+0x1a>
 8010760:	b14b      	cbz	r3, 8010776 <__ascii_mbtowc+0x1e>
 8010762:	7813      	ldrb	r3, [r2, #0]
 8010764:	600b      	str	r3, [r1, #0]
 8010766:	7812      	ldrb	r2, [r2, #0]
 8010768:	1e10      	subs	r0, r2, #0
 801076a:	bf18      	it	ne
 801076c:	2001      	movne	r0, #1
 801076e:	b002      	add	sp, #8
 8010770:	4770      	bx	lr
 8010772:	4610      	mov	r0, r2
 8010774:	e7fb      	b.n	801076e <__ascii_mbtowc+0x16>
 8010776:	f06f 0001 	mvn.w	r0, #1
 801077a:	e7f8      	b.n	801076e <__ascii_mbtowc+0x16>

0801077c <__malloc_lock>:
 801077c:	4801      	ldr	r0, [pc, #4]	@ (8010784 <__malloc_lock+0x8>)
 801077e:	f7ff bba4 	b.w	800feca <__retarget_lock_acquire_recursive>
 8010782:	bf00      	nop
 8010784:	200029fc 	.word	0x200029fc

08010788 <__malloc_unlock>:
 8010788:	4801      	ldr	r0, [pc, #4]	@ (8010790 <__malloc_unlock+0x8>)
 801078a:	f7ff bb9f 	b.w	800fecc <__retarget_lock_release_recursive>
 801078e:	bf00      	nop
 8010790:	200029fc 	.word	0x200029fc

08010794 <_Balloc>:
 8010794:	b570      	push	{r4, r5, r6, lr}
 8010796:	69c6      	ldr	r6, [r0, #28]
 8010798:	4604      	mov	r4, r0
 801079a:	460d      	mov	r5, r1
 801079c:	b976      	cbnz	r6, 80107bc <_Balloc+0x28>
 801079e:	2010      	movs	r0, #16
 80107a0:	f001 f8a4 	bl	80118ec <malloc>
 80107a4:	4602      	mov	r2, r0
 80107a6:	61e0      	str	r0, [r4, #28]
 80107a8:	b920      	cbnz	r0, 80107b4 <_Balloc+0x20>
 80107aa:	4b18      	ldr	r3, [pc, #96]	@ (801080c <_Balloc+0x78>)
 80107ac:	4818      	ldr	r0, [pc, #96]	@ (8010810 <_Balloc+0x7c>)
 80107ae:	216b      	movs	r1, #107	@ 0x6b
 80107b0:	f001 f86a 	bl	8011888 <__assert_func>
 80107b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107b8:	6006      	str	r6, [r0, #0]
 80107ba:	60c6      	str	r6, [r0, #12]
 80107bc:	69e6      	ldr	r6, [r4, #28]
 80107be:	68f3      	ldr	r3, [r6, #12]
 80107c0:	b183      	cbz	r3, 80107e4 <_Balloc+0x50>
 80107c2:	69e3      	ldr	r3, [r4, #28]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80107ca:	b9b8      	cbnz	r0, 80107fc <_Balloc+0x68>
 80107cc:	2101      	movs	r1, #1
 80107ce:	fa01 f605 	lsl.w	r6, r1, r5
 80107d2:	1d72      	adds	r2, r6, #5
 80107d4:	0092      	lsls	r2, r2, #2
 80107d6:	4620      	mov	r0, r4
 80107d8:	f001 f874 	bl	80118c4 <_calloc_r>
 80107dc:	b160      	cbz	r0, 80107f8 <_Balloc+0x64>
 80107de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80107e2:	e00e      	b.n	8010802 <_Balloc+0x6e>
 80107e4:	2221      	movs	r2, #33	@ 0x21
 80107e6:	2104      	movs	r1, #4
 80107e8:	4620      	mov	r0, r4
 80107ea:	f001 f86b 	bl	80118c4 <_calloc_r>
 80107ee:	69e3      	ldr	r3, [r4, #28]
 80107f0:	60f0      	str	r0, [r6, #12]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d1e4      	bne.n	80107c2 <_Balloc+0x2e>
 80107f8:	2000      	movs	r0, #0
 80107fa:	bd70      	pop	{r4, r5, r6, pc}
 80107fc:	6802      	ldr	r2, [r0, #0]
 80107fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010802:	2300      	movs	r3, #0
 8010804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010808:	e7f7      	b.n	80107fa <_Balloc+0x66>
 801080a:	bf00      	nop
 801080c:	08012d5a 	.word	0x08012d5a
 8010810:	08012d71 	.word	0x08012d71

08010814 <_Bfree>:
 8010814:	b570      	push	{r4, r5, r6, lr}
 8010816:	69c6      	ldr	r6, [r0, #28]
 8010818:	4605      	mov	r5, r0
 801081a:	460c      	mov	r4, r1
 801081c:	b976      	cbnz	r6, 801083c <_Bfree+0x28>
 801081e:	2010      	movs	r0, #16
 8010820:	f001 f864 	bl	80118ec <malloc>
 8010824:	4602      	mov	r2, r0
 8010826:	61e8      	str	r0, [r5, #28]
 8010828:	b920      	cbnz	r0, 8010834 <_Bfree+0x20>
 801082a:	4b09      	ldr	r3, [pc, #36]	@ (8010850 <_Bfree+0x3c>)
 801082c:	4809      	ldr	r0, [pc, #36]	@ (8010854 <_Bfree+0x40>)
 801082e:	218f      	movs	r1, #143	@ 0x8f
 8010830:	f001 f82a 	bl	8011888 <__assert_func>
 8010834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010838:	6006      	str	r6, [r0, #0]
 801083a:	60c6      	str	r6, [r0, #12]
 801083c:	b13c      	cbz	r4, 801084e <_Bfree+0x3a>
 801083e:	69eb      	ldr	r3, [r5, #28]
 8010840:	6862      	ldr	r2, [r4, #4]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010848:	6021      	str	r1, [r4, #0]
 801084a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801084e:	bd70      	pop	{r4, r5, r6, pc}
 8010850:	08012d5a 	.word	0x08012d5a
 8010854:	08012d71 	.word	0x08012d71

08010858 <__multadd>:
 8010858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801085c:	690d      	ldr	r5, [r1, #16]
 801085e:	4607      	mov	r7, r0
 8010860:	460c      	mov	r4, r1
 8010862:	461e      	mov	r6, r3
 8010864:	f101 0c14 	add.w	ip, r1, #20
 8010868:	2000      	movs	r0, #0
 801086a:	f8dc 3000 	ldr.w	r3, [ip]
 801086e:	b299      	uxth	r1, r3
 8010870:	fb02 6101 	mla	r1, r2, r1, r6
 8010874:	0c1e      	lsrs	r6, r3, #16
 8010876:	0c0b      	lsrs	r3, r1, #16
 8010878:	fb02 3306 	mla	r3, r2, r6, r3
 801087c:	b289      	uxth	r1, r1
 801087e:	3001      	adds	r0, #1
 8010880:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010884:	4285      	cmp	r5, r0
 8010886:	f84c 1b04 	str.w	r1, [ip], #4
 801088a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801088e:	dcec      	bgt.n	801086a <__multadd+0x12>
 8010890:	b30e      	cbz	r6, 80108d6 <__multadd+0x7e>
 8010892:	68a3      	ldr	r3, [r4, #8]
 8010894:	42ab      	cmp	r3, r5
 8010896:	dc19      	bgt.n	80108cc <__multadd+0x74>
 8010898:	6861      	ldr	r1, [r4, #4]
 801089a:	4638      	mov	r0, r7
 801089c:	3101      	adds	r1, #1
 801089e:	f7ff ff79 	bl	8010794 <_Balloc>
 80108a2:	4680      	mov	r8, r0
 80108a4:	b928      	cbnz	r0, 80108b2 <__multadd+0x5a>
 80108a6:	4602      	mov	r2, r0
 80108a8:	4b0c      	ldr	r3, [pc, #48]	@ (80108dc <__multadd+0x84>)
 80108aa:	480d      	ldr	r0, [pc, #52]	@ (80108e0 <__multadd+0x88>)
 80108ac:	21ba      	movs	r1, #186	@ 0xba
 80108ae:	f000 ffeb 	bl	8011888 <__assert_func>
 80108b2:	6922      	ldr	r2, [r4, #16]
 80108b4:	3202      	adds	r2, #2
 80108b6:	f104 010c 	add.w	r1, r4, #12
 80108ba:	0092      	lsls	r2, r2, #2
 80108bc:	300c      	adds	r0, #12
 80108be:	f7ff fb06 	bl	800fece <memcpy>
 80108c2:	4621      	mov	r1, r4
 80108c4:	4638      	mov	r0, r7
 80108c6:	f7ff ffa5 	bl	8010814 <_Bfree>
 80108ca:	4644      	mov	r4, r8
 80108cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80108d0:	3501      	adds	r5, #1
 80108d2:	615e      	str	r6, [r3, #20]
 80108d4:	6125      	str	r5, [r4, #16]
 80108d6:	4620      	mov	r0, r4
 80108d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108dc:	08012ce9 	.word	0x08012ce9
 80108e0:	08012d71 	.word	0x08012d71

080108e4 <__s2b>:
 80108e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108e8:	460c      	mov	r4, r1
 80108ea:	4615      	mov	r5, r2
 80108ec:	461f      	mov	r7, r3
 80108ee:	2209      	movs	r2, #9
 80108f0:	3308      	adds	r3, #8
 80108f2:	4606      	mov	r6, r0
 80108f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80108f8:	2100      	movs	r1, #0
 80108fa:	2201      	movs	r2, #1
 80108fc:	429a      	cmp	r2, r3
 80108fe:	db09      	blt.n	8010914 <__s2b+0x30>
 8010900:	4630      	mov	r0, r6
 8010902:	f7ff ff47 	bl	8010794 <_Balloc>
 8010906:	b940      	cbnz	r0, 801091a <__s2b+0x36>
 8010908:	4602      	mov	r2, r0
 801090a:	4b19      	ldr	r3, [pc, #100]	@ (8010970 <__s2b+0x8c>)
 801090c:	4819      	ldr	r0, [pc, #100]	@ (8010974 <__s2b+0x90>)
 801090e:	21d3      	movs	r1, #211	@ 0xd3
 8010910:	f000 ffba 	bl	8011888 <__assert_func>
 8010914:	0052      	lsls	r2, r2, #1
 8010916:	3101      	adds	r1, #1
 8010918:	e7f0      	b.n	80108fc <__s2b+0x18>
 801091a:	9b08      	ldr	r3, [sp, #32]
 801091c:	6143      	str	r3, [r0, #20]
 801091e:	2d09      	cmp	r5, #9
 8010920:	f04f 0301 	mov.w	r3, #1
 8010924:	6103      	str	r3, [r0, #16]
 8010926:	dd16      	ble.n	8010956 <__s2b+0x72>
 8010928:	f104 0909 	add.w	r9, r4, #9
 801092c:	46c8      	mov	r8, r9
 801092e:	442c      	add	r4, r5
 8010930:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010934:	4601      	mov	r1, r0
 8010936:	3b30      	subs	r3, #48	@ 0x30
 8010938:	220a      	movs	r2, #10
 801093a:	4630      	mov	r0, r6
 801093c:	f7ff ff8c 	bl	8010858 <__multadd>
 8010940:	45a0      	cmp	r8, r4
 8010942:	d1f5      	bne.n	8010930 <__s2b+0x4c>
 8010944:	f1a5 0408 	sub.w	r4, r5, #8
 8010948:	444c      	add	r4, r9
 801094a:	1b2d      	subs	r5, r5, r4
 801094c:	1963      	adds	r3, r4, r5
 801094e:	42bb      	cmp	r3, r7
 8010950:	db04      	blt.n	801095c <__s2b+0x78>
 8010952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010956:	340a      	adds	r4, #10
 8010958:	2509      	movs	r5, #9
 801095a:	e7f6      	b.n	801094a <__s2b+0x66>
 801095c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010960:	4601      	mov	r1, r0
 8010962:	3b30      	subs	r3, #48	@ 0x30
 8010964:	220a      	movs	r2, #10
 8010966:	4630      	mov	r0, r6
 8010968:	f7ff ff76 	bl	8010858 <__multadd>
 801096c:	e7ee      	b.n	801094c <__s2b+0x68>
 801096e:	bf00      	nop
 8010970:	08012ce9 	.word	0x08012ce9
 8010974:	08012d71 	.word	0x08012d71

08010978 <__hi0bits>:
 8010978:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801097c:	4603      	mov	r3, r0
 801097e:	bf36      	itet	cc
 8010980:	0403      	lslcc	r3, r0, #16
 8010982:	2000      	movcs	r0, #0
 8010984:	2010      	movcc	r0, #16
 8010986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801098a:	bf3c      	itt	cc
 801098c:	021b      	lslcc	r3, r3, #8
 801098e:	3008      	addcc	r0, #8
 8010990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010994:	bf3c      	itt	cc
 8010996:	011b      	lslcc	r3, r3, #4
 8010998:	3004      	addcc	r0, #4
 801099a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801099e:	bf3c      	itt	cc
 80109a0:	009b      	lslcc	r3, r3, #2
 80109a2:	3002      	addcc	r0, #2
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	db05      	blt.n	80109b4 <__hi0bits+0x3c>
 80109a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80109ac:	f100 0001 	add.w	r0, r0, #1
 80109b0:	bf08      	it	eq
 80109b2:	2020      	moveq	r0, #32
 80109b4:	4770      	bx	lr

080109b6 <__lo0bits>:
 80109b6:	6803      	ldr	r3, [r0, #0]
 80109b8:	4602      	mov	r2, r0
 80109ba:	f013 0007 	ands.w	r0, r3, #7
 80109be:	d00b      	beq.n	80109d8 <__lo0bits+0x22>
 80109c0:	07d9      	lsls	r1, r3, #31
 80109c2:	d421      	bmi.n	8010a08 <__lo0bits+0x52>
 80109c4:	0798      	lsls	r0, r3, #30
 80109c6:	bf49      	itett	mi
 80109c8:	085b      	lsrmi	r3, r3, #1
 80109ca:	089b      	lsrpl	r3, r3, #2
 80109cc:	2001      	movmi	r0, #1
 80109ce:	6013      	strmi	r3, [r2, #0]
 80109d0:	bf5c      	itt	pl
 80109d2:	6013      	strpl	r3, [r2, #0]
 80109d4:	2002      	movpl	r0, #2
 80109d6:	4770      	bx	lr
 80109d8:	b299      	uxth	r1, r3
 80109da:	b909      	cbnz	r1, 80109e0 <__lo0bits+0x2a>
 80109dc:	0c1b      	lsrs	r3, r3, #16
 80109de:	2010      	movs	r0, #16
 80109e0:	b2d9      	uxtb	r1, r3
 80109e2:	b909      	cbnz	r1, 80109e8 <__lo0bits+0x32>
 80109e4:	3008      	adds	r0, #8
 80109e6:	0a1b      	lsrs	r3, r3, #8
 80109e8:	0719      	lsls	r1, r3, #28
 80109ea:	bf04      	itt	eq
 80109ec:	091b      	lsreq	r3, r3, #4
 80109ee:	3004      	addeq	r0, #4
 80109f0:	0799      	lsls	r1, r3, #30
 80109f2:	bf04      	itt	eq
 80109f4:	089b      	lsreq	r3, r3, #2
 80109f6:	3002      	addeq	r0, #2
 80109f8:	07d9      	lsls	r1, r3, #31
 80109fa:	d403      	bmi.n	8010a04 <__lo0bits+0x4e>
 80109fc:	085b      	lsrs	r3, r3, #1
 80109fe:	f100 0001 	add.w	r0, r0, #1
 8010a02:	d003      	beq.n	8010a0c <__lo0bits+0x56>
 8010a04:	6013      	str	r3, [r2, #0]
 8010a06:	4770      	bx	lr
 8010a08:	2000      	movs	r0, #0
 8010a0a:	4770      	bx	lr
 8010a0c:	2020      	movs	r0, #32
 8010a0e:	4770      	bx	lr

08010a10 <__i2b>:
 8010a10:	b510      	push	{r4, lr}
 8010a12:	460c      	mov	r4, r1
 8010a14:	2101      	movs	r1, #1
 8010a16:	f7ff febd 	bl	8010794 <_Balloc>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	b928      	cbnz	r0, 8010a2a <__i2b+0x1a>
 8010a1e:	4b05      	ldr	r3, [pc, #20]	@ (8010a34 <__i2b+0x24>)
 8010a20:	4805      	ldr	r0, [pc, #20]	@ (8010a38 <__i2b+0x28>)
 8010a22:	f240 1145 	movw	r1, #325	@ 0x145
 8010a26:	f000 ff2f 	bl	8011888 <__assert_func>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	6144      	str	r4, [r0, #20]
 8010a2e:	6103      	str	r3, [r0, #16]
 8010a30:	bd10      	pop	{r4, pc}
 8010a32:	bf00      	nop
 8010a34:	08012ce9 	.word	0x08012ce9
 8010a38:	08012d71 	.word	0x08012d71

08010a3c <__multiply>:
 8010a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a40:	4614      	mov	r4, r2
 8010a42:	690a      	ldr	r2, [r1, #16]
 8010a44:	6923      	ldr	r3, [r4, #16]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	bfa8      	it	ge
 8010a4a:	4623      	movge	r3, r4
 8010a4c:	460f      	mov	r7, r1
 8010a4e:	bfa4      	itt	ge
 8010a50:	460c      	movge	r4, r1
 8010a52:	461f      	movge	r7, r3
 8010a54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010a58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010a5c:	68a3      	ldr	r3, [r4, #8]
 8010a5e:	6861      	ldr	r1, [r4, #4]
 8010a60:	eb0a 0609 	add.w	r6, sl, r9
 8010a64:	42b3      	cmp	r3, r6
 8010a66:	b085      	sub	sp, #20
 8010a68:	bfb8      	it	lt
 8010a6a:	3101      	addlt	r1, #1
 8010a6c:	f7ff fe92 	bl	8010794 <_Balloc>
 8010a70:	b930      	cbnz	r0, 8010a80 <__multiply+0x44>
 8010a72:	4602      	mov	r2, r0
 8010a74:	4b44      	ldr	r3, [pc, #272]	@ (8010b88 <__multiply+0x14c>)
 8010a76:	4845      	ldr	r0, [pc, #276]	@ (8010b8c <__multiply+0x150>)
 8010a78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010a7c:	f000 ff04 	bl	8011888 <__assert_func>
 8010a80:	f100 0514 	add.w	r5, r0, #20
 8010a84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010a88:	462b      	mov	r3, r5
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	4543      	cmp	r3, r8
 8010a8e:	d321      	bcc.n	8010ad4 <__multiply+0x98>
 8010a90:	f107 0114 	add.w	r1, r7, #20
 8010a94:	f104 0214 	add.w	r2, r4, #20
 8010a98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010a9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010aa0:	9302      	str	r3, [sp, #8]
 8010aa2:	1b13      	subs	r3, r2, r4
 8010aa4:	3b15      	subs	r3, #21
 8010aa6:	f023 0303 	bic.w	r3, r3, #3
 8010aaa:	3304      	adds	r3, #4
 8010aac:	f104 0715 	add.w	r7, r4, #21
 8010ab0:	42ba      	cmp	r2, r7
 8010ab2:	bf38      	it	cc
 8010ab4:	2304      	movcc	r3, #4
 8010ab6:	9301      	str	r3, [sp, #4]
 8010ab8:	9b02      	ldr	r3, [sp, #8]
 8010aba:	9103      	str	r1, [sp, #12]
 8010abc:	428b      	cmp	r3, r1
 8010abe:	d80c      	bhi.n	8010ada <__multiply+0x9e>
 8010ac0:	2e00      	cmp	r6, #0
 8010ac2:	dd03      	ble.n	8010acc <__multiply+0x90>
 8010ac4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d05b      	beq.n	8010b84 <__multiply+0x148>
 8010acc:	6106      	str	r6, [r0, #16]
 8010ace:	b005      	add	sp, #20
 8010ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad4:	f843 2b04 	str.w	r2, [r3], #4
 8010ad8:	e7d8      	b.n	8010a8c <__multiply+0x50>
 8010ada:	f8b1 a000 	ldrh.w	sl, [r1]
 8010ade:	f1ba 0f00 	cmp.w	sl, #0
 8010ae2:	d024      	beq.n	8010b2e <__multiply+0xf2>
 8010ae4:	f104 0e14 	add.w	lr, r4, #20
 8010ae8:	46a9      	mov	r9, r5
 8010aea:	f04f 0c00 	mov.w	ip, #0
 8010aee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010af2:	f8d9 3000 	ldr.w	r3, [r9]
 8010af6:	fa1f fb87 	uxth.w	fp, r7
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	fb0a 330b 	mla	r3, sl, fp, r3
 8010b00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010b04:	f8d9 7000 	ldr.w	r7, [r9]
 8010b08:	4463      	add	r3, ip
 8010b0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010b0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010b12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010b16:	b29b      	uxth	r3, r3
 8010b18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010b1c:	4572      	cmp	r2, lr
 8010b1e:	f849 3b04 	str.w	r3, [r9], #4
 8010b22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010b26:	d8e2      	bhi.n	8010aee <__multiply+0xb2>
 8010b28:	9b01      	ldr	r3, [sp, #4]
 8010b2a:	f845 c003 	str.w	ip, [r5, r3]
 8010b2e:	9b03      	ldr	r3, [sp, #12]
 8010b30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010b34:	3104      	adds	r1, #4
 8010b36:	f1b9 0f00 	cmp.w	r9, #0
 8010b3a:	d021      	beq.n	8010b80 <__multiply+0x144>
 8010b3c:	682b      	ldr	r3, [r5, #0]
 8010b3e:	f104 0c14 	add.w	ip, r4, #20
 8010b42:	46ae      	mov	lr, r5
 8010b44:	f04f 0a00 	mov.w	sl, #0
 8010b48:	f8bc b000 	ldrh.w	fp, [ip]
 8010b4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010b50:	fb09 770b 	mla	r7, r9, fp, r7
 8010b54:	4457      	add	r7, sl
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010b5c:	f84e 3b04 	str.w	r3, [lr], #4
 8010b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010b64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b68:	f8be 3000 	ldrh.w	r3, [lr]
 8010b6c:	fb09 330a 	mla	r3, r9, sl, r3
 8010b70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010b74:	4562      	cmp	r2, ip
 8010b76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b7a:	d8e5      	bhi.n	8010b48 <__multiply+0x10c>
 8010b7c:	9f01      	ldr	r7, [sp, #4]
 8010b7e:	51eb      	str	r3, [r5, r7]
 8010b80:	3504      	adds	r5, #4
 8010b82:	e799      	b.n	8010ab8 <__multiply+0x7c>
 8010b84:	3e01      	subs	r6, #1
 8010b86:	e79b      	b.n	8010ac0 <__multiply+0x84>
 8010b88:	08012ce9 	.word	0x08012ce9
 8010b8c:	08012d71 	.word	0x08012d71

08010b90 <__pow5mult>:
 8010b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b94:	4615      	mov	r5, r2
 8010b96:	f012 0203 	ands.w	r2, r2, #3
 8010b9a:	4607      	mov	r7, r0
 8010b9c:	460e      	mov	r6, r1
 8010b9e:	d007      	beq.n	8010bb0 <__pow5mult+0x20>
 8010ba0:	4c25      	ldr	r4, [pc, #148]	@ (8010c38 <__pow5mult+0xa8>)
 8010ba2:	3a01      	subs	r2, #1
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010baa:	f7ff fe55 	bl	8010858 <__multadd>
 8010bae:	4606      	mov	r6, r0
 8010bb0:	10ad      	asrs	r5, r5, #2
 8010bb2:	d03d      	beq.n	8010c30 <__pow5mult+0xa0>
 8010bb4:	69fc      	ldr	r4, [r7, #28]
 8010bb6:	b97c      	cbnz	r4, 8010bd8 <__pow5mult+0x48>
 8010bb8:	2010      	movs	r0, #16
 8010bba:	f000 fe97 	bl	80118ec <malloc>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	61f8      	str	r0, [r7, #28]
 8010bc2:	b928      	cbnz	r0, 8010bd0 <__pow5mult+0x40>
 8010bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8010c3c <__pow5mult+0xac>)
 8010bc6:	481e      	ldr	r0, [pc, #120]	@ (8010c40 <__pow5mult+0xb0>)
 8010bc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010bcc:	f000 fe5c 	bl	8011888 <__assert_func>
 8010bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010bd4:	6004      	str	r4, [r0, #0]
 8010bd6:	60c4      	str	r4, [r0, #12]
 8010bd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010be0:	b94c      	cbnz	r4, 8010bf6 <__pow5mult+0x66>
 8010be2:	f240 2171 	movw	r1, #625	@ 0x271
 8010be6:	4638      	mov	r0, r7
 8010be8:	f7ff ff12 	bl	8010a10 <__i2b>
 8010bec:	2300      	movs	r3, #0
 8010bee:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	6003      	str	r3, [r0, #0]
 8010bf6:	f04f 0900 	mov.w	r9, #0
 8010bfa:	07eb      	lsls	r3, r5, #31
 8010bfc:	d50a      	bpl.n	8010c14 <__pow5mult+0x84>
 8010bfe:	4631      	mov	r1, r6
 8010c00:	4622      	mov	r2, r4
 8010c02:	4638      	mov	r0, r7
 8010c04:	f7ff ff1a 	bl	8010a3c <__multiply>
 8010c08:	4631      	mov	r1, r6
 8010c0a:	4680      	mov	r8, r0
 8010c0c:	4638      	mov	r0, r7
 8010c0e:	f7ff fe01 	bl	8010814 <_Bfree>
 8010c12:	4646      	mov	r6, r8
 8010c14:	106d      	asrs	r5, r5, #1
 8010c16:	d00b      	beq.n	8010c30 <__pow5mult+0xa0>
 8010c18:	6820      	ldr	r0, [r4, #0]
 8010c1a:	b938      	cbnz	r0, 8010c2c <__pow5mult+0x9c>
 8010c1c:	4622      	mov	r2, r4
 8010c1e:	4621      	mov	r1, r4
 8010c20:	4638      	mov	r0, r7
 8010c22:	f7ff ff0b 	bl	8010a3c <__multiply>
 8010c26:	6020      	str	r0, [r4, #0]
 8010c28:	f8c0 9000 	str.w	r9, [r0]
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	e7e4      	b.n	8010bfa <__pow5mult+0x6a>
 8010c30:	4630      	mov	r0, r6
 8010c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c36:	bf00      	nop
 8010c38:	08012dcc 	.word	0x08012dcc
 8010c3c:	08012d5a 	.word	0x08012d5a
 8010c40:	08012d71 	.word	0x08012d71

08010c44 <__lshift>:
 8010c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c48:	460c      	mov	r4, r1
 8010c4a:	6849      	ldr	r1, [r1, #4]
 8010c4c:	6923      	ldr	r3, [r4, #16]
 8010c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c52:	68a3      	ldr	r3, [r4, #8]
 8010c54:	4607      	mov	r7, r0
 8010c56:	4691      	mov	r9, r2
 8010c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c5c:	f108 0601 	add.w	r6, r8, #1
 8010c60:	42b3      	cmp	r3, r6
 8010c62:	db0b      	blt.n	8010c7c <__lshift+0x38>
 8010c64:	4638      	mov	r0, r7
 8010c66:	f7ff fd95 	bl	8010794 <_Balloc>
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	b948      	cbnz	r0, 8010c82 <__lshift+0x3e>
 8010c6e:	4602      	mov	r2, r0
 8010c70:	4b28      	ldr	r3, [pc, #160]	@ (8010d14 <__lshift+0xd0>)
 8010c72:	4829      	ldr	r0, [pc, #164]	@ (8010d18 <__lshift+0xd4>)
 8010c74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010c78:	f000 fe06 	bl	8011888 <__assert_func>
 8010c7c:	3101      	adds	r1, #1
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	e7ee      	b.n	8010c60 <__lshift+0x1c>
 8010c82:	2300      	movs	r3, #0
 8010c84:	f100 0114 	add.w	r1, r0, #20
 8010c88:	f100 0210 	add.w	r2, r0, #16
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	4553      	cmp	r3, sl
 8010c90:	db33      	blt.n	8010cfa <__lshift+0xb6>
 8010c92:	6920      	ldr	r0, [r4, #16]
 8010c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c98:	f104 0314 	add.w	r3, r4, #20
 8010c9c:	f019 091f 	ands.w	r9, r9, #31
 8010ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ca4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ca8:	d02b      	beq.n	8010d02 <__lshift+0xbe>
 8010caa:	f1c9 0e20 	rsb	lr, r9, #32
 8010cae:	468a      	mov	sl, r1
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	6818      	ldr	r0, [r3, #0]
 8010cb4:	fa00 f009 	lsl.w	r0, r0, r9
 8010cb8:	4310      	orrs	r0, r2
 8010cba:	f84a 0b04 	str.w	r0, [sl], #4
 8010cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cc2:	459c      	cmp	ip, r3
 8010cc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010cc8:	d8f3      	bhi.n	8010cb2 <__lshift+0x6e>
 8010cca:	ebac 0304 	sub.w	r3, ip, r4
 8010cce:	3b15      	subs	r3, #21
 8010cd0:	f023 0303 	bic.w	r3, r3, #3
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	f104 0015 	add.w	r0, r4, #21
 8010cda:	4584      	cmp	ip, r0
 8010cdc:	bf38      	it	cc
 8010cde:	2304      	movcc	r3, #4
 8010ce0:	50ca      	str	r2, [r1, r3]
 8010ce2:	b10a      	cbz	r2, 8010ce8 <__lshift+0xa4>
 8010ce4:	f108 0602 	add.w	r6, r8, #2
 8010ce8:	3e01      	subs	r6, #1
 8010cea:	4638      	mov	r0, r7
 8010cec:	612e      	str	r6, [r5, #16]
 8010cee:	4621      	mov	r1, r4
 8010cf0:	f7ff fd90 	bl	8010814 <_Bfree>
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010cfe:	3301      	adds	r3, #1
 8010d00:	e7c5      	b.n	8010c8e <__lshift+0x4a>
 8010d02:	3904      	subs	r1, #4
 8010d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d08:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d0c:	459c      	cmp	ip, r3
 8010d0e:	d8f9      	bhi.n	8010d04 <__lshift+0xc0>
 8010d10:	e7ea      	b.n	8010ce8 <__lshift+0xa4>
 8010d12:	bf00      	nop
 8010d14:	08012ce9 	.word	0x08012ce9
 8010d18:	08012d71 	.word	0x08012d71

08010d1c <__mcmp>:
 8010d1c:	690a      	ldr	r2, [r1, #16]
 8010d1e:	4603      	mov	r3, r0
 8010d20:	6900      	ldr	r0, [r0, #16]
 8010d22:	1a80      	subs	r0, r0, r2
 8010d24:	b530      	push	{r4, r5, lr}
 8010d26:	d10e      	bne.n	8010d46 <__mcmp+0x2a>
 8010d28:	3314      	adds	r3, #20
 8010d2a:	3114      	adds	r1, #20
 8010d2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010d30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010d34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010d38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010d3c:	4295      	cmp	r5, r2
 8010d3e:	d003      	beq.n	8010d48 <__mcmp+0x2c>
 8010d40:	d205      	bcs.n	8010d4e <__mcmp+0x32>
 8010d42:	f04f 30ff 	mov.w	r0, #4294967295
 8010d46:	bd30      	pop	{r4, r5, pc}
 8010d48:	42a3      	cmp	r3, r4
 8010d4a:	d3f3      	bcc.n	8010d34 <__mcmp+0x18>
 8010d4c:	e7fb      	b.n	8010d46 <__mcmp+0x2a>
 8010d4e:	2001      	movs	r0, #1
 8010d50:	e7f9      	b.n	8010d46 <__mcmp+0x2a>
	...

08010d54 <__mdiff>:
 8010d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d58:	4689      	mov	r9, r1
 8010d5a:	4606      	mov	r6, r0
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	4648      	mov	r0, r9
 8010d60:	4614      	mov	r4, r2
 8010d62:	f7ff ffdb 	bl	8010d1c <__mcmp>
 8010d66:	1e05      	subs	r5, r0, #0
 8010d68:	d112      	bne.n	8010d90 <__mdiff+0x3c>
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7ff fd11 	bl	8010794 <_Balloc>
 8010d72:	4602      	mov	r2, r0
 8010d74:	b928      	cbnz	r0, 8010d82 <__mdiff+0x2e>
 8010d76:	4b3f      	ldr	r3, [pc, #252]	@ (8010e74 <__mdiff+0x120>)
 8010d78:	f240 2137 	movw	r1, #567	@ 0x237
 8010d7c:	483e      	ldr	r0, [pc, #248]	@ (8010e78 <__mdiff+0x124>)
 8010d7e:	f000 fd83 	bl	8011888 <__assert_func>
 8010d82:	2301      	movs	r3, #1
 8010d84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d88:	4610      	mov	r0, r2
 8010d8a:	b003      	add	sp, #12
 8010d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d90:	bfbc      	itt	lt
 8010d92:	464b      	movlt	r3, r9
 8010d94:	46a1      	movlt	r9, r4
 8010d96:	4630      	mov	r0, r6
 8010d98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010d9c:	bfba      	itte	lt
 8010d9e:	461c      	movlt	r4, r3
 8010da0:	2501      	movlt	r5, #1
 8010da2:	2500      	movge	r5, #0
 8010da4:	f7ff fcf6 	bl	8010794 <_Balloc>
 8010da8:	4602      	mov	r2, r0
 8010daa:	b918      	cbnz	r0, 8010db4 <__mdiff+0x60>
 8010dac:	4b31      	ldr	r3, [pc, #196]	@ (8010e74 <__mdiff+0x120>)
 8010dae:	f240 2145 	movw	r1, #581	@ 0x245
 8010db2:	e7e3      	b.n	8010d7c <__mdiff+0x28>
 8010db4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010db8:	6926      	ldr	r6, [r4, #16]
 8010dba:	60c5      	str	r5, [r0, #12]
 8010dbc:	f109 0310 	add.w	r3, r9, #16
 8010dc0:	f109 0514 	add.w	r5, r9, #20
 8010dc4:	f104 0e14 	add.w	lr, r4, #20
 8010dc8:	f100 0b14 	add.w	fp, r0, #20
 8010dcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010dd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010dd4:	9301      	str	r3, [sp, #4]
 8010dd6:	46d9      	mov	r9, fp
 8010dd8:	f04f 0c00 	mov.w	ip, #0
 8010ddc:	9b01      	ldr	r3, [sp, #4]
 8010dde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010de2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010de6:	9301      	str	r3, [sp, #4]
 8010de8:	fa1f f38a 	uxth.w	r3, sl
 8010dec:	4619      	mov	r1, r3
 8010dee:	b283      	uxth	r3, r0
 8010df0:	1acb      	subs	r3, r1, r3
 8010df2:	0c00      	lsrs	r0, r0, #16
 8010df4:	4463      	add	r3, ip
 8010df6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010dfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010e04:	4576      	cmp	r6, lr
 8010e06:	f849 3b04 	str.w	r3, [r9], #4
 8010e0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010e0e:	d8e5      	bhi.n	8010ddc <__mdiff+0x88>
 8010e10:	1b33      	subs	r3, r6, r4
 8010e12:	3b15      	subs	r3, #21
 8010e14:	f023 0303 	bic.w	r3, r3, #3
 8010e18:	3415      	adds	r4, #21
 8010e1a:	3304      	adds	r3, #4
 8010e1c:	42a6      	cmp	r6, r4
 8010e1e:	bf38      	it	cc
 8010e20:	2304      	movcc	r3, #4
 8010e22:	441d      	add	r5, r3
 8010e24:	445b      	add	r3, fp
 8010e26:	461e      	mov	r6, r3
 8010e28:	462c      	mov	r4, r5
 8010e2a:	4544      	cmp	r4, r8
 8010e2c:	d30e      	bcc.n	8010e4c <__mdiff+0xf8>
 8010e2e:	f108 0103 	add.w	r1, r8, #3
 8010e32:	1b49      	subs	r1, r1, r5
 8010e34:	f021 0103 	bic.w	r1, r1, #3
 8010e38:	3d03      	subs	r5, #3
 8010e3a:	45a8      	cmp	r8, r5
 8010e3c:	bf38      	it	cc
 8010e3e:	2100      	movcc	r1, #0
 8010e40:	440b      	add	r3, r1
 8010e42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e46:	b191      	cbz	r1, 8010e6e <__mdiff+0x11a>
 8010e48:	6117      	str	r7, [r2, #16]
 8010e4a:	e79d      	b.n	8010d88 <__mdiff+0x34>
 8010e4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010e50:	46e6      	mov	lr, ip
 8010e52:	0c08      	lsrs	r0, r1, #16
 8010e54:	fa1c fc81 	uxtah	ip, ip, r1
 8010e58:	4471      	add	r1, lr
 8010e5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010e5e:	b289      	uxth	r1, r1
 8010e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010e64:	f846 1b04 	str.w	r1, [r6], #4
 8010e68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010e6c:	e7dd      	b.n	8010e2a <__mdiff+0xd6>
 8010e6e:	3f01      	subs	r7, #1
 8010e70:	e7e7      	b.n	8010e42 <__mdiff+0xee>
 8010e72:	bf00      	nop
 8010e74:	08012ce9 	.word	0x08012ce9
 8010e78:	08012d71 	.word	0x08012d71

08010e7c <__ulp>:
 8010e7c:	b082      	sub	sp, #8
 8010e7e:	ed8d 0b00 	vstr	d0, [sp]
 8010e82:	9a01      	ldr	r2, [sp, #4]
 8010e84:	4b0f      	ldr	r3, [pc, #60]	@ (8010ec4 <__ulp+0x48>)
 8010e86:	4013      	ands	r3, r2
 8010e88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	dc08      	bgt.n	8010ea2 <__ulp+0x26>
 8010e90:	425b      	negs	r3, r3
 8010e92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010e96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010e9a:	da04      	bge.n	8010ea6 <__ulp+0x2a>
 8010e9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010ea0:	4113      	asrs	r3, r2
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	e008      	b.n	8010eb8 <__ulp+0x3c>
 8010ea6:	f1a2 0314 	sub.w	r3, r2, #20
 8010eaa:	2b1e      	cmp	r3, #30
 8010eac:	bfda      	itte	le
 8010eae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010eb2:	40da      	lsrle	r2, r3
 8010eb4:	2201      	movgt	r2, #1
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	4619      	mov	r1, r3
 8010eba:	4610      	mov	r0, r2
 8010ebc:	ec41 0b10 	vmov	d0, r0, r1
 8010ec0:	b002      	add	sp, #8
 8010ec2:	4770      	bx	lr
 8010ec4:	7ff00000 	.word	0x7ff00000

08010ec8 <__b2d>:
 8010ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ecc:	6906      	ldr	r6, [r0, #16]
 8010ece:	f100 0814 	add.w	r8, r0, #20
 8010ed2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010ed6:	1f37      	subs	r7, r6, #4
 8010ed8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010edc:	4610      	mov	r0, r2
 8010ede:	f7ff fd4b 	bl	8010978 <__hi0bits>
 8010ee2:	f1c0 0320 	rsb	r3, r0, #32
 8010ee6:	280a      	cmp	r0, #10
 8010ee8:	600b      	str	r3, [r1, #0]
 8010eea:	491b      	ldr	r1, [pc, #108]	@ (8010f58 <__b2d+0x90>)
 8010eec:	dc15      	bgt.n	8010f1a <__b2d+0x52>
 8010eee:	f1c0 0c0b 	rsb	ip, r0, #11
 8010ef2:	fa22 f30c 	lsr.w	r3, r2, ip
 8010ef6:	45b8      	cmp	r8, r7
 8010ef8:	ea43 0501 	orr.w	r5, r3, r1
 8010efc:	bf34      	ite	cc
 8010efe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010f02:	2300      	movcs	r3, #0
 8010f04:	3015      	adds	r0, #21
 8010f06:	fa02 f000 	lsl.w	r0, r2, r0
 8010f0a:	fa23 f30c 	lsr.w	r3, r3, ip
 8010f0e:	4303      	orrs	r3, r0
 8010f10:	461c      	mov	r4, r3
 8010f12:	ec45 4b10 	vmov	d0, r4, r5
 8010f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f1a:	45b8      	cmp	r8, r7
 8010f1c:	bf3a      	itte	cc
 8010f1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010f22:	f1a6 0708 	subcc.w	r7, r6, #8
 8010f26:	2300      	movcs	r3, #0
 8010f28:	380b      	subs	r0, #11
 8010f2a:	d012      	beq.n	8010f52 <__b2d+0x8a>
 8010f2c:	f1c0 0120 	rsb	r1, r0, #32
 8010f30:	fa23 f401 	lsr.w	r4, r3, r1
 8010f34:	4082      	lsls	r2, r0
 8010f36:	4322      	orrs	r2, r4
 8010f38:	4547      	cmp	r7, r8
 8010f3a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010f3e:	bf8c      	ite	hi
 8010f40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010f44:	2200      	movls	r2, #0
 8010f46:	4083      	lsls	r3, r0
 8010f48:	40ca      	lsrs	r2, r1
 8010f4a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010f4e:	4313      	orrs	r3, r2
 8010f50:	e7de      	b.n	8010f10 <__b2d+0x48>
 8010f52:	ea42 0501 	orr.w	r5, r2, r1
 8010f56:	e7db      	b.n	8010f10 <__b2d+0x48>
 8010f58:	3ff00000 	.word	0x3ff00000

08010f5c <__d2b>:
 8010f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f60:	460f      	mov	r7, r1
 8010f62:	2101      	movs	r1, #1
 8010f64:	ec59 8b10 	vmov	r8, r9, d0
 8010f68:	4616      	mov	r6, r2
 8010f6a:	f7ff fc13 	bl	8010794 <_Balloc>
 8010f6e:	4604      	mov	r4, r0
 8010f70:	b930      	cbnz	r0, 8010f80 <__d2b+0x24>
 8010f72:	4602      	mov	r2, r0
 8010f74:	4b23      	ldr	r3, [pc, #140]	@ (8011004 <__d2b+0xa8>)
 8010f76:	4824      	ldr	r0, [pc, #144]	@ (8011008 <__d2b+0xac>)
 8010f78:	f240 310f 	movw	r1, #783	@ 0x30f
 8010f7c:	f000 fc84 	bl	8011888 <__assert_func>
 8010f80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010f84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f88:	b10d      	cbz	r5, 8010f8e <__d2b+0x32>
 8010f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010f8e:	9301      	str	r3, [sp, #4]
 8010f90:	f1b8 0300 	subs.w	r3, r8, #0
 8010f94:	d023      	beq.n	8010fde <__d2b+0x82>
 8010f96:	4668      	mov	r0, sp
 8010f98:	9300      	str	r3, [sp, #0]
 8010f9a:	f7ff fd0c 	bl	80109b6 <__lo0bits>
 8010f9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010fa2:	b1d0      	cbz	r0, 8010fda <__d2b+0x7e>
 8010fa4:	f1c0 0320 	rsb	r3, r0, #32
 8010fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fac:	430b      	orrs	r3, r1
 8010fae:	40c2      	lsrs	r2, r0
 8010fb0:	6163      	str	r3, [r4, #20]
 8010fb2:	9201      	str	r2, [sp, #4]
 8010fb4:	9b01      	ldr	r3, [sp, #4]
 8010fb6:	61a3      	str	r3, [r4, #24]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	bf0c      	ite	eq
 8010fbc:	2201      	moveq	r2, #1
 8010fbe:	2202      	movne	r2, #2
 8010fc0:	6122      	str	r2, [r4, #16]
 8010fc2:	b1a5      	cbz	r5, 8010fee <__d2b+0x92>
 8010fc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010fc8:	4405      	add	r5, r0
 8010fca:	603d      	str	r5, [r7, #0]
 8010fcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010fd0:	6030      	str	r0, [r6, #0]
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	b003      	add	sp, #12
 8010fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fda:	6161      	str	r1, [r4, #20]
 8010fdc:	e7ea      	b.n	8010fb4 <__d2b+0x58>
 8010fde:	a801      	add	r0, sp, #4
 8010fe0:	f7ff fce9 	bl	80109b6 <__lo0bits>
 8010fe4:	9b01      	ldr	r3, [sp, #4]
 8010fe6:	6163      	str	r3, [r4, #20]
 8010fe8:	3020      	adds	r0, #32
 8010fea:	2201      	movs	r2, #1
 8010fec:	e7e8      	b.n	8010fc0 <__d2b+0x64>
 8010fee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ff2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010ff6:	6038      	str	r0, [r7, #0]
 8010ff8:	6918      	ldr	r0, [r3, #16]
 8010ffa:	f7ff fcbd 	bl	8010978 <__hi0bits>
 8010ffe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011002:	e7e5      	b.n	8010fd0 <__d2b+0x74>
 8011004:	08012ce9 	.word	0x08012ce9
 8011008:	08012d71 	.word	0x08012d71

0801100c <__ratio>:
 801100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011010:	b085      	sub	sp, #20
 8011012:	e9cd 1000 	strd	r1, r0, [sp]
 8011016:	a902      	add	r1, sp, #8
 8011018:	f7ff ff56 	bl	8010ec8 <__b2d>
 801101c:	9800      	ldr	r0, [sp, #0]
 801101e:	a903      	add	r1, sp, #12
 8011020:	ec55 4b10 	vmov	r4, r5, d0
 8011024:	f7ff ff50 	bl	8010ec8 <__b2d>
 8011028:	9b01      	ldr	r3, [sp, #4]
 801102a:	6919      	ldr	r1, [r3, #16]
 801102c:	9b00      	ldr	r3, [sp, #0]
 801102e:	691b      	ldr	r3, [r3, #16]
 8011030:	1ac9      	subs	r1, r1, r3
 8011032:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011036:	1a9b      	subs	r3, r3, r2
 8011038:	ec5b ab10 	vmov	sl, fp, d0
 801103c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011040:	2b00      	cmp	r3, #0
 8011042:	bfce      	itee	gt
 8011044:	462a      	movgt	r2, r5
 8011046:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801104a:	465a      	movle	r2, fp
 801104c:	462f      	mov	r7, r5
 801104e:	46d9      	mov	r9, fp
 8011050:	bfcc      	ite	gt
 8011052:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011056:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801105a:	464b      	mov	r3, r9
 801105c:	4652      	mov	r2, sl
 801105e:	4620      	mov	r0, r4
 8011060:	4639      	mov	r1, r7
 8011062:	f7ef fc13 	bl	800088c <__aeabi_ddiv>
 8011066:	ec41 0b10 	vmov	d0, r0, r1
 801106a:	b005      	add	sp, #20
 801106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011070 <__copybits>:
 8011070:	3901      	subs	r1, #1
 8011072:	b570      	push	{r4, r5, r6, lr}
 8011074:	1149      	asrs	r1, r1, #5
 8011076:	6914      	ldr	r4, [r2, #16]
 8011078:	3101      	adds	r1, #1
 801107a:	f102 0314 	add.w	r3, r2, #20
 801107e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011082:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011086:	1f05      	subs	r5, r0, #4
 8011088:	42a3      	cmp	r3, r4
 801108a:	d30c      	bcc.n	80110a6 <__copybits+0x36>
 801108c:	1aa3      	subs	r3, r4, r2
 801108e:	3b11      	subs	r3, #17
 8011090:	f023 0303 	bic.w	r3, r3, #3
 8011094:	3211      	adds	r2, #17
 8011096:	42a2      	cmp	r2, r4
 8011098:	bf88      	it	hi
 801109a:	2300      	movhi	r3, #0
 801109c:	4418      	add	r0, r3
 801109e:	2300      	movs	r3, #0
 80110a0:	4288      	cmp	r0, r1
 80110a2:	d305      	bcc.n	80110b0 <__copybits+0x40>
 80110a4:	bd70      	pop	{r4, r5, r6, pc}
 80110a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80110aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80110ae:	e7eb      	b.n	8011088 <__copybits+0x18>
 80110b0:	f840 3b04 	str.w	r3, [r0], #4
 80110b4:	e7f4      	b.n	80110a0 <__copybits+0x30>

080110b6 <__any_on>:
 80110b6:	f100 0214 	add.w	r2, r0, #20
 80110ba:	6900      	ldr	r0, [r0, #16]
 80110bc:	114b      	asrs	r3, r1, #5
 80110be:	4298      	cmp	r0, r3
 80110c0:	b510      	push	{r4, lr}
 80110c2:	db11      	blt.n	80110e8 <__any_on+0x32>
 80110c4:	dd0a      	ble.n	80110dc <__any_on+0x26>
 80110c6:	f011 011f 	ands.w	r1, r1, #31
 80110ca:	d007      	beq.n	80110dc <__any_on+0x26>
 80110cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80110d0:	fa24 f001 	lsr.w	r0, r4, r1
 80110d4:	fa00 f101 	lsl.w	r1, r0, r1
 80110d8:	428c      	cmp	r4, r1
 80110da:	d10b      	bne.n	80110f4 <__any_on+0x3e>
 80110dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d803      	bhi.n	80110ec <__any_on+0x36>
 80110e4:	2000      	movs	r0, #0
 80110e6:	bd10      	pop	{r4, pc}
 80110e8:	4603      	mov	r3, r0
 80110ea:	e7f7      	b.n	80110dc <__any_on+0x26>
 80110ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80110f0:	2900      	cmp	r1, #0
 80110f2:	d0f5      	beq.n	80110e0 <__any_on+0x2a>
 80110f4:	2001      	movs	r0, #1
 80110f6:	e7f6      	b.n	80110e6 <__any_on+0x30>

080110f8 <__ascii_wctomb>:
 80110f8:	4603      	mov	r3, r0
 80110fa:	4608      	mov	r0, r1
 80110fc:	b141      	cbz	r1, 8011110 <__ascii_wctomb+0x18>
 80110fe:	2aff      	cmp	r2, #255	@ 0xff
 8011100:	d904      	bls.n	801110c <__ascii_wctomb+0x14>
 8011102:	228a      	movs	r2, #138	@ 0x8a
 8011104:	601a      	str	r2, [r3, #0]
 8011106:	f04f 30ff 	mov.w	r0, #4294967295
 801110a:	4770      	bx	lr
 801110c:	700a      	strb	r2, [r1, #0]
 801110e:	2001      	movs	r0, #1
 8011110:	4770      	bx	lr

08011112 <__ssputs_r>:
 8011112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011116:	688e      	ldr	r6, [r1, #8]
 8011118:	461f      	mov	r7, r3
 801111a:	42be      	cmp	r6, r7
 801111c:	680b      	ldr	r3, [r1, #0]
 801111e:	4682      	mov	sl, r0
 8011120:	460c      	mov	r4, r1
 8011122:	4690      	mov	r8, r2
 8011124:	d82d      	bhi.n	8011182 <__ssputs_r+0x70>
 8011126:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801112a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801112e:	d026      	beq.n	801117e <__ssputs_r+0x6c>
 8011130:	6965      	ldr	r5, [r4, #20]
 8011132:	6909      	ldr	r1, [r1, #16]
 8011134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011138:	eba3 0901 	sub.w	r9, r3, r1
 801113c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011140:	1c7b      	adds	r3, r7, #1
 8011142:	444b      	add	r3, r9
 8011144:	106d      	asrs	r5, r5, #1
 8011146:	429d      	cmp	r5, r3
 8011148:	bf38      	it	cc
 801114a:	461d      	movcc	r5, r3
 801114c:	0553      	lsls	r3, r2, #21
 801114e:	d527      	bpl.n	80111a0 <__ssputs_r+0x8e>
 8011150:	4629      	mov	r1, r5
 8011152:	f7ff fa81 	bl	8010658 <_malloc_r>
 8011156:	4606      	mov	r6, r0
 8011158:	b360      	cbz	r0, 80111b4 <__ssputs_r+0xa2>
 801115a:	6921      	ldr	r1, [r4, #16]
 801115c:	464a      	mov	r2, r9
 801115e:	f7fe feb6 	bl	800fece <memcpy>
 8011162:	89a3      	ldrh	r3, [r4, #12]
 8011164:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801116c:	81a3      	strh	r3, [r4, #12]
 801116e:	6126      	str	r6, [r4, #16]
 8011170:	6165      	str	r5, [r4, #20]
 8011172:	444e      	add	r6, r9
 8011174:	eba5 0509 	sub.w	r5, r5, r9
 8011178:	6026      	str	r6, [r4, #0]
 801117a:	60a5      	str	r5, [r4, #8]
 801117c:	463e      	mov	r6, r7
 801117e:	42be      	cmp	r6, r7
 8011180:	d900      	bls.n	8011184 <__ssputs_r+0x72>
 8011182:	463e      	mov	r6, r7
 8011184:	6820      	ldr	r0, [r4, #0]
 8011186:	4632      	mov	r2, r6
 8011188:	4641      	mov	r1, r8
 801118a:	f000 fb53 	bl	8011834 <memmove>
 801118e:	68a3      	ldr	r3, [r4, #8]
 8011190:	1b9b      	subs	r3, r3, r6
 8011192:	60a3      	str	r3, [r4, #8]
 8011194:	6823      	ldr	r3, [r4, #0]
 8011196:	4433      	add	r3, r6
 8011198:	6023      	str	r3, [r4, #0]
 801119a:	2000      	movs	r0, #0
 801119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a0:	462a      	mov	r2, r5
 80111a2:	f000 fbab 	bl	80118fc <_realloc_r>
 80111a6:	4606      	mov	r6, r0
 80111a8:	2800      	cmp	r0, #0
 80111aa:	d1e0      	bne.n	801116e <__ssputs_r+0x5c>
 80111ac:	6921      	ldr	r1, [r4, #16]
 80111ae:	4650      	mov	r0, sl
 80111b0:	f7fe feac 	bl	800ff0c <_free_r>
 80111b4:	230c      	movs	r3, #12
 80111b6:	f8ca 3000 	str.w	r3, [sl]
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111c0:	81a3      	strh	r3, [r4, #12]
 80111c2:	f04f 30ff 	mov.w	r0, #4294967295
 80111c6:	e7e9      	b.n	801119c <__ssputs_r+0x8a>

080111c8 <_svfiprintf_r>:
 80111c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111cc:	4698      	mov	r8, r3
 80111ce:	898b      	ldrh	r3, [r1, #12]
 80111d0:	061b      	lsls	r3, r3, #24
 80111d2:	b09d      	sub	sp, #116	@ 0x74
 80111d4:	4607      	mov	r7, r0
 80111d6:	460d      	mov	r5, r1
 80111d8:	4614      	mov	r4, r2
 80111da:	d510      	bpl.n	80111fe <_svfiprintf_r+0x36>
 80111dc:	690b      	ldr	r3, [r1, #16]
 80111de:	b973      	cbnz	r3, 80111fe <_svfiprintf_r+0x36>
 80111e0:	2140      	movs	r1, #64	@ 0x40
 80111e2:	f7ff fa39 	bl	8010658 <_malloc_r>
 80111e6:	6028      	str	r0, [r5, #0]
 80111e8:	6128      	str	r0, [r5, #16]
 80111ea:	b930      	cbnz	r0, 80111fa <_svfiprintf_r+0x32>
 80111ec:	230c      	movs	r3, #12
 80111ee:	603b      	str	r3, [r7, #0]
 80111f0:	f04f 30ff 	mov.w	r0, #4294967295
 80111f4:	b01d      	add	sp, #116	@ 0x74
 80111f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111fa:	2340      	movs	r3, #64	@ 0x40
 80111fc:	616b      	str	r3, [r5, #20]
 80111fe:	2300      	movs	r3, #0
 8011200:	9309      	str	r3, [sp, #36]	@ 0x24
 8011202:	2320      	movs	r3, #32
 8011204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011208:	f8cd 800c 	str.w	r8, [sp, #12]
 801120c:	2330      	movs	r3, #48	@ 0x30
 801120e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80113ac <_svfiprintf_r+0x1e4>
 8011212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011216:	f04f 0901 	mov.w	r9, #1
 801121a:	4623      	mov	r3, r4
 801121c:	469a      	mov	sl, r3
 801121e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011222:	b10a      	cbz	r2, 8011228 <_svfiprintf_r+0x60>
 8011224:	2a25      	cmp	r2, #37	@ 0x25
 8011226:	d1f9      	bne.n	801121c <_svfiprintf_r+0x54>
 8011228:	ebba 0b04 	subs.w	fp, sl, r4
 801122c:	d00b      	beq.n	8011246 <_svfiprintf_r+0x7e>
 801122e:	465b      	mov	r3, fp
 8011230:	4622      	mov	r2, r4
 8011232:	4629      	mov	r1, r5
 8011234:	4638      	mov	r0, r7
 8011236:	f7ff ff6c 	bl	8011112 <__ssputs_r>
 801123a:	3001      	adds	r0, #1
 801123c:	f000 80a7 	beq.w	801138e <_svfiprintf_r+0x1c6>
 8011240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011242:	445a      	add	r2, fp
 8011244:	9209      	str	r2, [sp, #36]	@ 0x24
 8011246:	f89a 3000 	ldrb.w	r3, [sl]
 801124a:	2b00      	cmp	r3, #0
 801124c:	f000 809f 	beq.w	801138e <_svfiprintf_r+0x1c6>
 8011250:	2300      	movs	r3, #0
 8011252:	f04f 32ff 	mov.w	r2, #4294967295
 8011256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801125a:	f10a 0a01 	add.w	sl, sl, #1
 801125e:	9304      	str	r3, [sp, #16]
 8011260:	9307      	str	r3, [sp, #28]
 8011262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011266:	931a      	str	r3, [sp, #104]	@ 0x68
 8011268:	4654      	mov	r4, sl
 801126a:	2205      	movs	r2, #5
 801126c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011270:	484e      	ldr	r0, [pc, #312]	@ (80113ac <_svfiprintf_r+0x1e4>)
 8011272:	f7ee ffd5 	bl	8000220 <memchr>
 8011276:	9a04      	ldr	r2, [sp, #16]
 8011278:	b9d8      	cbnz	r0, 80112b2 <_svfiprintf_r+0xea>
 801127a:	06d0      	lsls	r0, r2, #27
 801127c:	bf44      	itt	mi
 801127e:	2320      	movmi	r3, #32
 8011280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011284:	0711      	lsls	r1, r2, #28
 8011286:	bf44      	itt	mi
 8011288:	232b      	movmi	r3, #43	@ 0x2b
 801128a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801128e:	f89a 3000 	ldrb.w	r3, [sl]
 8011292:	2b2a      	cmp	r3, #42	@ 0x2a
 8011294:	d015      	beq.n	80112c2 <_svfiprintf_r+0xfa>
 8011296:	9a07      	ldr	r2, [sp, #28]
 8011298:	4654      	mov	r4, sl
 801129a:	2000      	movs	r0, #0
 801129c:	f04f 0c0a 	mov.w	ip, #10
 80112a0:	4621      	mov	r1, r4
 80112a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112a6:	3b30      	subs	r3, #48	@ 0x30
 80112a8:	2b09      	cmp	r3, #9
 80112aa:	d94b      	bls.n	8011344 <_svfiprintf_r+0x17c>
 80112ac:	b1b0      	cbz	r0, 80112dc <_svfiprintf_r+0x114>
 80112ae:	9207      	str	r2, [sp, #28]
 80112b0:	e014      	b.n	80112dc <_svfiprintf_r+0x114>
 80112b2:	eba0 0308 	sub.w	r3, r0, r8
 80112b6:	fa09 f303 	lsl.w	r3, r9, r3
 80112ba:	4313      	orrs	r3, r2
 80112bc:	9304      	str	r3, [sp, #16]
 80112be:	46a2      	mov	sl, r4
 80112c0:	e7d2      	b.n	8011268 <_svfiprintf_r+0xa0>
 80112c2:	9b03      	ldr	r3, [sp, #12]
 80112c4:	1d19      	adds	r1, r3, #4
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	9103      	str	r1, [sp, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	bfbb      	ittet	lt
 80112ce:	425b      	neglt	r3, r3
 80112d0:	f042 0202 	orrlt.w	r2, r2, #2
 80112d4:	9307      	strge	r3, [sp, #28]
 80112d6:	9307      	strlt	r3, [sp, #28]
 80112d8:	bfb8      	it	lt
 80112da:	9204      	strlt	r2, [sp, #16]
 80112dc:	7823      	ldrb	r3, [r4, #0]
 80112de:	2b2e      	cmp	r3, #46	@ 0x2e
 80112e0:	d10a      	bne.n	80112f8 <_svfiprintf_r+0x130>
 80112e2:	7863      	ldrb	r3, [r4, #1]
 80112e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80112e6:	d132      	bne.n	801134e <_svfiprintf_r+0x186>
 80112e8:	9b03      	ldr	r3, [sp, #12]
 80112ea:	1d1a      	adds	r2, r3, #4
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	9203      	str	r2, [sp, #12]
 80112f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80112f4:	3402      	adds	r4, #2
 80112f6:	9305      	str	r3, [sp, #20]
 80112f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80113bc <_svfiprintf_r+0x1f4>
 80112fc:	7821      	ldrb	r1, [r4, #0]
 80112fe:	2203      	movs	r2, #3
 8011300:	4650      	mov	r0, sl
 8011302:	f7ee ff8d 	bl	8000220 <memchr>
 8011306:	b138      	cbz	r0, 8011318 <_svfiprintf_r+0x150>
 8011308:	9b04      	ldr	r3, [sp, #16]
 801130a:	eba0 000a 	sub.w	r0, r0, sl
 801130e:	2240      	movs	r2, #64	@ 0x40
 8011310:	4082      	lsls	r2, r0
 8011312:	4313      	orrs	r3, r2
 8011314:	3401      	adds	r4, #1
 8011316:	9304      	str	r3, [sp, #16]
 8011318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801131c:	4824      	ldr	r0, [pc, #144]	@ (80113b0 <_svfiprintf_r+0x1e8>)
 801131e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011322:	2206      	movs	r2, #6
 8011324:	f7ee ff7c 	bl	8000220 <memchr>
 8011328:	2800      	cmp	r0, #0
 801132a:	d036      	beq.n	801139a <_svfiprintf_r+0x1d2>
 801132c:	4b21      	ldr	r3, [pc, #132]	@ (80113b4 <_svfiprintf_r+0x1ec>)
 801132e:	bb1b      	cbnz	r3, 8011378 <_svfiprintf_r+0x1b0>
 8011330:	9b03      	ldr	r3, [sp, #12]
 8011332:	3307      	adds	r3, #7
 8011334:	f023 0307 	bic.w	r3, r3, #7
 8011338:	3308      	adds	r3, #8
 801133a:	9303      	str	r3, [sp, #12]
 801133c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801133e:	4433      	add	r3, r6
 8011340:	9309      	str	r3, [sp, #36]	@ 0x24
 8011342:	e76a      	b.n	801121a <_svfiprintf_r+0x52>
 8011344:	fb0c 3202 	mla	r2, ip, r2, r3
 8011348:	460c      	mov	r4, r1
 801134a:	2001      	movs	r0, #1
 801134c:	e7a8      	b.n	80112a0 <_svfiprintf_r+0xd8>
 801134e:	2300      	movs	r3, #0
 8011350:	3401      	adds	r4, #1
 8011352:	9305      	str	r3, [sp, #20]
 8011354:	4619      	mov	r1, r3
 8011356:	f04f 0c0a 	mov.w	ip, #10
 801135a:	4620      	mov	r0, r4
 801135c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011360:	3a30      	subs	r2, #48	@ 0x30
 8011362:	2a09      	cmp	r2, #9
 8011364:	d903      	bls.n	801136e <_svfiprintf_r+0x1a6>
 8011366:	2b00      	cmp	r3, #0
 8011368:	d0c6      	beq.n	80112f8 <_svfiprintf_r+0x130>
 801136a:	9105      	str	r1, [sp, #20]
 801136c:	e7c4      	b.n	80112f8 <_svfiprintf_r+0x130>
 801136e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011372:	4604      	mov	r4, r0
 8011374:	2301      	movs	r3, #1
 8011376:	e7f0      	b.n	801135a <_svfiprintf_r+0x192>
 8011378:	ab03      	add	r3, sp, #12
 801137a:	9300      	str	r3, [sp, #0]
 801137c:	462a      	mov	r2, r5
 801137e:	4b0e      	ldr	r3, [pc, #56]	@ (80113b8 <_svfiprintf_r+0x1f0>)
 8011380:	a904      	add	r1, sp, #16
 8011382:	4638      	mov	r0, r7
 8011384:	f3af 8000 	nop.w
 8011388:	1c42      	adds	r2, r0, #1
 801138a:	4606      	mov	r6, r0
 801138c:	d1d6      	bne.n	801133c <_svfiprintf_r+0x174>
 801138e:	89ab      	ldrh	r3, [r5, #12]
 8011390:	065b      	lsls	r3, r3, #25
 8011392:	f53f af2d 	bmi.w	80111f0 <_svfiprintf_r+0x28>
 8011396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011398:	e72c      	b.n	80111f4 <_svfiprintf_r+0x2c>
 801139a:	ab03      	add	r3, sp, #12
 801139c:	9300      	str	r3, [sp, #0]
 801139e:	462a      	mov	r2, r5
 80113a0:	4b05      	ldr	r3, [pc, #20]	@ (80113b8 <_svfiprintf_r+0x1f0>)
 80113a2:	a904      	add	r1, sp, #16
 80113a4:	4638      	mov	r0, r7
 80113a6:	f000 f879 	bl	801149c <_printf_i>
 80113aa:	e7ed      	b.n	8011388 <_svfiprintf_r+0x1c0>
 80113ac:	08012ec8 	.word	0x08012ec8
 80113b0:	08012ed2 	.word	0x08012ed2
 80113b4:	00000000 	.word	0x00000000
 80113b8:	08011113 	.word	0x08011113
 80113bc:	08012ece 	.word	0x08012ece

080113c0 <_printf_common>:
 80113c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c4:	4616      	mov	r6, r2
 80113c6:	4698      	mov	r8, r3
 80113c8:	688a      	ldr	r2, [r1, #8]
 80113ca:	690b      	ldr	r3, [r1, #16]
 80113cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113d0:	4293      	cmp	r3, r2
 80113d2:	bfb8      	it	lt
 80113d4:	4613      	movlt	r3, r2
 80113d6:	6033      	str	r3, [r6, #0]
 80113d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80113dc:	4607      	mov	r7, r0
 80113de:	460c      	mov	r4, r1
 80113e0:	b10a      	cbz	r2, 80113e6 <_printf_common+0x26>
 80113e2:	3301      	adds	r3, #1
 80113e4:	6033      	str	r3, [r6, #0]
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	0699      	lsls	r1, r3, #26
 80113ea:	bf42      	ittt	mi
 80113ec:	6833      	ldrmi	r3, [r6, #0]
 80113ee:	3302      	addmi	r3, #2
 80113f0:	6033      	strmi	r3, [r6, #0]
 80113f2:	6825      	ldr	r5, [r4, #0]
 80113f4:	f015 0506 	ands.w	r5, r5, #6
 80113f8:	d106      	bne.n	8011408 <_printf_common+0x48>
 80113fa:	f104 0a19 	add.w	sl, r4, #25
 80113fe:	68e3      	ldr	r3, [r4, #12]
 8011400:	6832      	ldr	r2, [r6, #0]
 8011402:	1a9b      	subs	r3, r3, r2
 8011404:	42ab      	cmp	r3, r5
 8011406:	dc26      	bgt.n	8011456 <_printf_common+0x96>
 8011408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801140c:	6822      	ldr	r2, [r4, #0]
 801140e:	3b00      	subs	r3, #0
 8011410:	bf18      	it	ne
 8011412:	2301      	movne	r3, #1
 8011414:	0692      	lsls	r2, r2, #26
 8011416:	d42b      	bmi.n	8011470 <_printf_common+0xb0>
 8011418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801141c:	4641      	mov	r1, r8
 801141e:	4638      	mov	r0, r7
 8011420:	47c8      	blx	r9
 8011422:	3001      	adds	r0, #1
 8011424:	d01e      	beq.n	8011464 <_printf_common+0xa4>
 8011426:	6823      	ldr	r3, [r4, #0]
 8011428:	6922      	ldr	r2, [r4, #16]
 801142a:	f003 0306 	and.w	r3, r3, #6
 801142e:	2b04      	cmp	r3, #4
 8011430:	bf02      	ittt	eq
 8011432:	68e5      	ldreq	r5, [r4, #12]
 8011434:	6833      	ldreq	r3, [r6, #0]
 8011436:	1aed      	subeq	r5, r5, r3
 8011438:	68a3      	ldr	r3, [r4, #8]
 801143a:	bf0c      	ite	eq
 801143c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011440:	2500      	movne	r5, #0
 8011442:	4293      	cmp	r3, r2
 8011444:	bfc4      	itt	gt
 8011446:	1a9b      	subgt	r3, r3, r2
 8011448:	18ed      	addgt	r5, r5, r3
 801144a:	2600      	movs	r6, #0
 801144c:	341a      	adds	r4, #26
 801144e:	42b5      	cmp	r5, r6
 8011450:	d11a      	bne.n	8011488 <_printf_common+0xc8>
 8011452:	2000      	movs	r0, #0
 8011454:	e008      	b.n	8011468 <_printf_common+0xa8>
 8011456:	2301      	movs	r3, #1
 8011458:	4652      	mov	r2, sl
 801145a:	4641      	mov	r1, r8
 801145c:	4638      	mov	r0, r7
 801145e:	47c8      	blx	r9
 8011460:	3001      	adds	r0, #1
 8011462:	d103      	bne.n	801146c <_printf_common+0xac>
 8011464:	f04f 30ff 	mov.w	r0, #4294967295
 8011468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801146c:	3501      	adds	r5, #1
 801146e:	e7c6      	b.n	80113fe <_printf_common+0x3e>
 8011470:	18e1      	adds	r1, r4, r3
 8011472:	1c5a      	adds	r2, r3, #1
 8011474:	2030      	movs	r0, #48	@ 0x30
 8011476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801147a:	4422      	add	r2, r4
 801147c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011484:	3302      	adds	r3, #2
 8011486:	e7c7      	b.n	8011418 <_printf_common+0x58>
 8011488:	2301      	movs	r3, #1
 801148a:	4622      	mov	r2, r4
 801148c:	4641      	mov	r1, r8
 801148e:	4638      	mov	r0, r7
 8011490:	47c8      	blx	r9
 8011492:	3001      	adds	r0, #1
 8011494:	d0e6      	beq.n	8011464 <_printf_common+0xa4>
 8011496:	3601      	adds	r6, #1
 8011498:	e7d9      	b.n	801144e <_printf_common+0x8e>
	...

0801149c <_printf_i>:
 801149c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114a0:	7e0f      	ldrb	r7, [r1, #24]
 80114a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80114a4:	2f78      	cmp	r7, #120	@ 0x78
 80114a6:	4691      	mov	r9, r2
 80114a8:	4680      	mov	r8, r0
 80114aa:	460c      	mov	r4, r1
 80114ac:	469a      	mov	sl, r3
 80114ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80114b2:	d807      	bhi.n	80114c4 <_printf_i+0x28>
 80114b4:	2f62      	cmp	r7, #98	@ 0x62
 80114b6:	d80a      	bhi.n	80114ce <_printf_i+0x32>
 80114b8:	2f00      	cmp	r7, #0
 80114ba:	f000 80d2 	beq.w	8011662 <_printf_i+0x1c6>
 80114be:	2f58      	cmp	r7, #88	@ 0x58
 80114c0:	f000 80b9 	beq.w	8011636 <_printf_i+0x19a>
 80114c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80114cc:	e03a      	b.n	8011544 <_printf_i+0xa8>
 80114ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80114d2:	2b15      	cmp	r3, #21
 80114d4:	d8f6      	bhi.n	80114c4 <_printf_i+0x28>
 80114d6:	a101      	add	r1, pc, #4	@ (adr r1, 80114dc <_printf_i+0x40>)
 80114d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114dc:	08011535 	.word	0x08011535
 80114e0:	08011549 	.word	0x08011549
 80114e4:	080114c5 	.word	0x080114c5
 80114e8:	080114c5 	.word	0x080114c5
 80114ec:	080114c5 	.word	0x080114c5
 80114f0:	080114c5 	.word	0x080114c5
 80114f4:	08011549 	.word	0x08011549
 80114f8:	080114c5 	.word	0x080114c5
 80114fc:	080114c5 	.word	0x080114c5
 8011500:	080114c5 	.word	0x080114c5
 8011504:	080114c5 	.word	0x080114c5
 8011508:	08011649 	.word	0x08011649
 801150c:	08011573 	.word	0x08011573
 8011510:	08011603 	.word	0x08011603
 8011514:	080114c5 	.word	0x080114c5
 8011518:	080114c5 	.word	0x080114c5
 801151c:	0801166b 	.word	0x0801166b
 8011520:	080114c5 	.word	0x080114c5
 8011524:	08011573 	.word	0x08011573
 8011528:	080114c5 	.word	0x080114c5
 801152c:	080114c5 	.word	0x080114c5
 8011530:	0801160b 	.word	0x0801160b
 8011534:	6833      	ldr	r3, [r6, #0]
 8011536:	1d1a      	adds	r2, r3, #4
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	6032      	str	r2, [r6, #0]
 801153c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011544:	2301      	movs	r3, #1
 8011546:	e09d      	b.n	8011684 <_printf_i+0x1e8>
 8011548:	6833      	ldr	r3, [r6, #0]
 801154a:	6820      	ldr	r0, [r4, #0]
 801154c:	1d19      	adds	r1, r3, #4
 801154e:	6031      	str	r1, [r6, #0]
 8011550:	0606      	lsls	r6, r0, #24
 8011552:	d501      	bpl.n	8011558 <_printf_i+0xbc>
 8011554:	681d      	ldr	r5, [r3, #0]
 8011556:	e003      	b.n	8011560 <_printf_i+0xc4>
 8011558:	0645      	lsls	r5, r0, #25
 801155a:	d5fb      	bpl.n	8011554 <_printf_i+0xb8>
 801155c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011560:	2d00      	cmp	r5, #0
 8011562:	da03      	bge.n	801156c <_printf_i+0xd0>
 8011564:	232d      	movs	r3, #45	@ 0x2d
 8011566:	426d      	negs	r5, r5
 8011568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801156c:	4859      	ldr	r0, [pc, #356]	@ (80116d4 <_printf_i+0x238>)
 801156e:	230a      	movs	r3, #10
 8011570:	e011      	b.n	8011596 <_printf_i+0xfa>
 8011572:	6821      	ldr	r1, [r4, #0]
 8011574:	6833      	ldr	r3, [r6, #0]
 8011576:	0608      	lsls	r0, r1, #24
 8011578:	f853 5b04 	ldr.w	r5, [r3], #4
 801157c:	d402      	bmi.n	8011584 <_printf_i+0xe8>
 801157e:	0649      	lsls	r1, r1, #25
 8011580:	bf48      	it	mi
 8011582:	b2ad      	uxthmi	r5, r5
 8011584:	2f6f      	cmp	r7, #111	@ 0x6f
 8011586:	4853      	ldr	r0, [pc, #332]	@ (80116d4 <_printf_i+0x238>)
 8011588:	6033      	str	r3, [r6, #0]
 801158a:	bf14      	ite	ne
 801158c:	230a      	movne	r3, #10
 801158e:	2308      	moveq	r3, #8
 8011590:	2100      	movs	r1, #0
 8011592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011596:	6866      	ldr	r6, [r4, #4]
 8011598:	60a6      	str	r6, [r4, #8]
 801159a:	2e00      	cmp	r6, #0
 801159c:	bfa2      	ittt	ge
 801159e:	6821      	ldrge	r1, [r4, #0]
 80115a0:	f021 0104 	bicge.w	r1, r1, #4
 80115a4:	6021      	strge	r1, [r4, #0]
 80115a6:	b90d      	cbnz	r5, 80115ac <_printf_i+0x110>
 80115a8:	2e00      	cmp	r6, #0
 80115aa:	d04b      	beq.n	8011644 <_printf_i+0x1a8>
 80115ac:	4616      	mov	r6, r2
 80115ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80115b2:	fb03 5711 	mls	r7, r3, r1, r5
 80115b6:	5dc7      	ldrb	r7, [r0, r7]
 80115b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115bc:	462f      	mov	r7, r5
 80115be:	42bb      	cmp	r3, r7
 80115c0:	460d      	mov	r5, r1
 80115c2:	d9f4      	bls.n	80115ae <_printf_i+0x112>
 80115c4:	2b08      	cmp	r3, #8
 80115c6:	d10b      	bne.n	80115e0 <_printf_i+0x144>
 80115c8:	6823      	ldr	r3, [r4, #0]
 80115ca:	07df      	lsls	r7, r3, #31
 80115cc:	d508      	bpl.n	80115e0 <_printf_i+0x144>
 80115ce:	6923      	ldr	r3, [r4, #16]
 80115d0:	6861      	ldr	r1, [r4, #4]
 80115d2:	4299      	cmp	r1, r3
 80115d4:	bfde      	ittt	le
 80115d6:	2330      	movle	r3, #48	@ 0x30
 80115d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80115dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80115e0:	1b92      	subs	r2, r2, r6
 80115e2:	6122      	str	r2, [r4, #16]
 80115e4:	f8cd a000 	str.w	sl, [sp]
 80115e8:	464b      	mov	r3, r9
 80115ea:	aa03      	add	r2, sp, #12
 80115ec:	4621      	mov	r1, r4
 80115ee:	4640      	mov	r0, r8
 80115f0:	f7ff fee6 	bl	80113c0 <_printf_common>
 80115f4:	3001      	adds	r0, #1
 80115f6:	d14a      	bne.n	801168e <_printf_i+0x1f2>
 80115f8:	f04f 30ff 	mov.w	r0, #4294967295
 80115fc:	b004      	add	sp, #16
 80115fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011602:	6823      	ldr	r3, [r4, #0]
 8011604:	f043 0320 	orr.w	r3, r3, #32
 8011608:	6023      	str	r3, [r4, #0]
 801160a:	4833      	ldr	r0, [pc, #204]	@ (80116d8 <_printf_i+0x23c>)
 801160c:	2778      	movs	r7, #120	@ 0x78
 801160e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	6831      	ldr	r1, [r6, #0]
 8011616:	061f      	lsls	r7, r3, #24
 8011618:	f851 5b04 	ldr.w	r5, [r1], #4
 801161c:	d402      	bmi.n	8011624 <_printf_i+0x188>
 801161e:	065f      	lsls	r7, r3, #25
 8011620:	bf48      	it	mi
 8011622:	b2ad      	uxthmi	r5, r5
 8011624:	6031      	str	r1, [r6, #0]
 8011626:	07d9      	lsls	r1, r3, #31
 8011628:	bf44      	itt	mi
 801162a:	f043 0320 	orrmi.w	r3, r3, #32
 801162e:	6023      	strmi	r3, [r4, #0]
 8011630:	b11d      	cbz	r5, 801163a <_printf_i+0x19e>
 8011632:	2310      	movs	r3, #16
 8011634:	e7ac      	b.n	8011590 <_printf_i+0xf4>
 8011636:	4827      	ldr	r0, [pc, #156]	@ (80116d4 <_printf_i+0x238>)
 8011638:	e7e9      	b.n	801160e <_printf_i+0x172>
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	f023 0320 	bic.w	r3, r3, #32
 8011640:	6023      	str	r3, [r4, #0]
 8011642:	e7f6      	b.n	8011632 <_printf_i+0x196>
 8011644:	4616      	mov	r6, r2
 8011646:	e7bd      	b.n	80115c4 <_printf_i+0x128>
 8011648:	6833      	ldr	r3, [r6, #0]
 801164a:	6825      	ldr	r5, [r4, #0]
 801164c:	6961      	ldr	r1, [r4, #20]
 801164e:	1d18      	adds	r0, r3, #4
 8011650:	6030      	str	r0, [r6, #0]
 8011652:	062e      	lsls	r6, r5, #24
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	d501      	bpl.n	801165c <_printf_i+0x1c0>
 8011658:	6019      	str	r1, [r3, #0]
 801165a:	e002      	b.n	8011662 <_printf_i+0x1c6>
 801165c:	0668      	lsls	r0, r5, #25
 801165e:	d5fb      	bpl.n	8011658 <_printf_i+0x1bc>
 8011660:	8019      	strh	r1, [r3, #0]
 8011662:	2300      	movs	r3, #0
 8011664:	6123      	str	r3, [r4, #16]
 8011666:	4616      	mov	r6, r2
 8011668:	e7bc      	b.n	80115e4 <_printf_i+0x148>
 801166a:	6833      	ldr	r3, [r6, #0]
 801166c:	1d1a      	adds	r2, r3, #4
 801166e:	6032      	str	r2, [r6, #0]
 8011670:	681e      	ldr	r6, [r3, #0]
 8011672:	6862      	ldr	r2, [r4, #4]
 8011674:	2100      	movs	r1, #0
 8011676:	4630      	mov	r0, r6
 8011678:	f7ee fdd2 	bl	8000220 <memchr>
 801167c:	b108      	cbz	r0, 8011682 <_printf_i+0x1e6>
 801167e:	1b80      	subs	r0, r0, r6
 8011680:	6060      	str	r0, [r4, #4]
 8011682:	6863      	ldr	r3, [r4, #4]
 8011684:	6123      	str	r3, [r4, #16]
 8011686:	2300      	movs	r3, #0
 8011688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801168c:	e7aa      	b.n	80115e4 <_printf_i+0x148>
 801168e:	6923      	ldr	r3, [r4, #16]
 8011690:	4632      	mov	r2, r6
 8011692:	4649      	mov	r1, r9
 8011694:	4640      	mov	r0, r8
 8011696:	47d0      	blx	sl
 8011698:	3001      	adds	r0, #1
 801169a:	d0ad      	beq.n	80115f8 <_printf_i+0x15c>
 801169c:	6823      	ldr	r3, [r4, #0]
 801169e:	079b      	lsls	r3, r3, #30
 80116a0:	d413      	bmi.n	80116ca <_printf_i+0x22e>
 80116a2:	68e0      	ldr	r0, [r4, #12]
 80116a4:	9b03      	ldr	r3, [sp, #12]
 80116a6:	4298      	cmp	r0, r3
 80116a8:	bfb8      	it	lt
 80116aa:	4618      	movlt	r0, r3
 80116ac:	e7a6      	b.n	80115fc <_printf_i+0x160>
 80116ae:	2301      	movs	r3, #1
 80116b0:	4632      	mov	r2, r6
 80116b2:	4649      	mov	r1, r9
 80116b4:	4640      	mov	r0, r8
 80116b6:	47d0      	blx	sl
 80116b8:	3001      	adds	r0, #1
 80116ba:	d09d      	beq.n	80115f8 <_printf_i+0x15c>
 80116bc:	3501      	adds	r5, #1
 80116be:	68e3      	ldr	r3, [r4, #12]
 80116c0:	9903      	ldr	r1, [sp, #12]
 80116c2:	1a5b      	subs	r3, r3, r1
 80116c4:	42ab      	cmp	r3, r5
 80116c6:	dcf2      	bgt.n	80116ae <_printf_i+0x212>
 80116c8:	e7eb      	b.n	80116a2 <_printf_i+0x206>
 80116ca:	2500      	movs	r5, #0
 80116cc:	f104 0619 	add.w	r6, r4, #25
 80116d0:	e7f5      	b.n	80116be <_printf_i+0x222>
 80116d2:	bf00      	nop
 80116d4:	08012ed9 	.word	0x08012ed9
 80116d8:	08012eea 	.word	0x08012eea

080116dc <__sflush_r>:
 80116dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80116e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e4:	0716      	lsls	r6, r2, #28
 80116e6:	4605      	mov	r5, r0
 80116e8:	460c      	mov	r4, r1
 80116ea:	d454      	bmi.n	8011796 <__sflush_r+0xba>
 80116ec:	684b      	ldr	r3, [r1, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	dc02      	bgt.n	80116f8 <__sflush_r+0x1c>
 80116f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	dd48      	ble.n	801178a <__sflush_r+0xae>
 80116f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80116fa:	2e00      	cmp	r6, #0
 80116fc:	d045      	beq.n	801178a <__sflush_r+0xae>
 80116fe:	2300      	movs	r3, #0
 8011700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011704:	682f      	ldr	r7, [r5, #0]
 8011706:	6a21      	ldr	r1, [r4, #32]
 8011708:	602b      	str	r3, [r5, #0]
 801170a:	d030      	beq.n	801176e <__sflush_r+0x92>
 801170c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801170e:	89a3      	ldrh	r3, [r4, #12]
 8011710:	0759      	lsls	r1, r3, #29
 8011712:	d505      	bpl.n	8011720 <__sflush_r+0x44>
 8011714:	6863      	ldr	r3, [r4, #4]
 8011716:	1ad2      	subs	r2, r2, r3
 8011718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801171a:	b10b      	cbz	r3, 8011720 <__sflush_r+0x44>
 801171c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801171e:	1ad2      	subs	r2, r2, r3
 8011720:	2300      	movs	r3, #0
 8011722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011724:	6a21      	ldr	r1, [r4, #32]
 8011726:	4628      	mov	r0, r5
 8011728:	47b0      	blx	r6
 801172a:	1c43      	adds	r3, r0, #1
 801172c:	89a3      	ldrh	r3, [r4, #12]
 801172e:	d106      	bne.n	801173e <__sflush_r+0x62>
 8011730:	6829      	ldr	r1, [r5, #0]
 8011732:	291d      	cmp	r1, #29
 8011734:	d82b      	bhi.n	801178e <__sflush_r+0xb2>
 8011736:	4a2a      	ldr	r2, [pc, #168]	@ (80117e0 <__sflush_r+0x104>)
 8011738:	410a      	asrs	r2, r1
 801173a:	07d6      	lsls	r6, r2, #31
 801173c:	d427      	bmi.n	801178e <__sflush_r+0xb2>
 801173e:	2200      	movs	r2, #0
 8011740:	6062      	str	r2, [r4, #4]
 8011742:	04d9      	lsls	r1, r3, #19
 8011744:	6922      	ldr	r2, [r4, #16]
 8011746:	6022      	str	r2, [r4, #0]
 8011748:	d504      	bpl.n	8011754 <__sflush_r+0x78>
 801174a:	1c42      	adds	r2, r0, #1
 801174c:	d101      	bne.n	8011752 <__sflush_r+0x76>
 801174e:	682b      	ldr	r3, [r5, #0]
 8011750:	b903      	cbnz	r3, 8011754 <__sflush_r+0x78>
 8011752:	6560      	str	r0, [r4, #84]	@ 0x54
 8011754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011756:	602f      	str	r7, [r5, #0]
 8011758:	b1b9      	cbz	r1, 801178a <__sflush_r+0xae>
 801175a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801175e:	4299      	cmp	r1, r3
 8011760:	d002      	beq.n	8011768 <__sflush_r+0x8c>
 8011762:	4628      	mov	r0, r5
 8011764:	f7fe fbd2 	bl	800ff0c <_free_r>
 8011768:	2300      	movs	r3, #0
 801176a:	6363      	str	r3, [r4, #52]	@ 0x34
 801176c:	e00d      	b.n	801178a <__sflush_r+0xae>
 801176e:	2301      	movs	r3, #1
 8011770:	4628      	mov	r0, r5
 8011772:	47b0      	blx	r6
 8011774:	4602      	mov	r2, r0
 8011776:	1c50      	adds	r0, r2, #1
 8011778:	d1c9      	bne.n	801170e <__sflush_r+0x32>
 801177a:	682b      	ldr	r3, [r5, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d0c6      	beq.n	801170e <__sflush_r+0x32>
 8011780:	2b1d      	cmp	r3, #29
 8011782:	d001      	beq.n	8011788 <__sflush_r+0xac>
 8011784:	2b16      	cmp	r3, #22
 8011786:	d11e      	bne.n	80117c6 <__sflush_r+0xea>
 8011788:	602f      	str	r7, [r5, #0]
 801178a:	2000      	movs	r0, #0
 801178c:	e022      	b.n	80117d4 <__sflush_r+0xf8>
 801178e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011792:	b21b      	sxth	r3, r3
 8011794:	e01b      	b.n	80117ce <__sflush_r+0xf2>
 8011796:	690f      	ldr	r7, [r1, #16]
 8011798:	2f00      	cmp	r7, #0
 801179a:	d0f6      	beq.n	801178a <__sflush_r+0xae>
 801179c:	0793      	lsls	r3, r2, #30
 801179e:	680e      	ldr	r6, [r1, #0]
 80117a0:	bf08      	it	eq
 80117a2:	694b      	ldreq	r3, [r1, #20]
 80117a4:	600f      	str	r7, [r1, #0]
 80117a6:	bf18      	it	ne
 80117a8:	2300      	movne	r3, #0
 80117aa:	eba6 0807 	sub.w	r8, r6, r7
 80117ae:	608b      	str	r3, [r1, #8]
 80117b0:	f1b8 0f00 	cmp.w	r8, #0
 80117b4:	dde9      	ble.n	801178a <__sflush_r+0xae>
 80117b6:	6a21      	ldr	r1, [r4, #32]
 80117b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80117ba:	4643      	mov	r3, r8
 80117bc:	463a      	mov	r2, r7
 80117be:	4628      	mov	r0, r5
 80117c0:	47b0      	blx	r6
 80117c2:	2800      	cmp	r0, #0
 80117c4:	dc08      	bgt.n	80117d8 <__sflush_r+0xfc>
 80117c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117ce:	81a3      	strh	r3, [r4, #12]
 80117d0:	f04f 30ff 	mov.w	r0, #4294967295
 80117d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117d8:	4407      	add	r7, r0
 80117da:	eba8 0800 	sub.w	r8, r8, r0
 80117de:	e7e7      	b.n	80117b0 <__sflush_r+0xd4>
 80117e0:	dfbffffe 	.word	0xdfbffffe

080117e4 <_fflush_r>:
 80117e4:	b538      	push	{r3, r4, r5, lr}
 80117e6:	690b      	ldr	r3, [r1, #16]
 80117e8:	4605      	mov	r5, r0
 80117ea:	460c      	mov	r4, r1
 80117ec:	b913      	cbnz	r3, 80117f4 <_fflush_r+0x10>
 80117ee:	2500      	movs	r5, #0
 80117f0:	4628      	mov	r0, r5
 80117f2:	bd38      	pop	{r3, r4, r5, pc}
 80117f4:	b118      	cbz	r0, 80117fe <_fflush_r+0x1a>
 80117f6:	6a03      	ldr	r3, [r0, #32]
 80117f8:	b90b      	cbnz	r3, 80117fe <_fflush_r+0x1a>
 80117fa:	f7fe f9d5 	bl	800fba8 <__sinit>
 80117fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d0f3      	beq.n	80117ee <_fflush_r+0xa>
 8011806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011808:	07d0      	lsls	r0, r2, #31
 801180a:	d404      	bmi.n	8011816 <_fflush_r+0x32>
 801180c:	0599      	lsls	r1, r3, #22
 801180e:	d402      	bmi.n	8011816 <_fflush_r+0x32>
 8011810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011812:	f7fe fb5a 	bl	800feca <__retarget_lock_acquire_recursive>
 8011816:	4628      	mov	r0, r5
 8011818:	4621      	mov	r1, r4
 801181a:	f7ff ff5f 	bl	80116dc <__sflush_r>
 801181e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011820:	07da      	lsls	r2, r3, #31
 8011822:	4605      	mov	r5, r0
 8011824:	d4e4      	bmi.n	80117f0 <_fflush_r+0xc>
 8011826:	89a3      	ldrh	r3, [r4, #12]
 8011828:	059b      	lsls	r3, r3, #22
 801182a:	d4e1      	bmi.n	80117f0 <_fflush_r+0xc>
 801182c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801182e:	f7fe fb4d 	bl	800fecc <__retarget_lock_release_recursive>
 8011832:	e7dd      	b.n	80117f0 <_fflush_r+0xc>

08011834 <memmove>:
 8011834:	4288      	cmp	r0, r1
 8011836:	b510      	push	{r4, lr}
 8011838:	eb01 0402 	add.w	r4, r1, r2
 801183c:	d902      	bls.n	8011844 <memmove+0x10>
 801183e:	4284      	cmp	r4, r0
 8011840:	4623      	mov	r3, r4
 8011842:	d807      	bhi.n	8011854 <memmove+0x20>
 8011844:	1e43      	subs	r3, r0, #1
 8011846:	42a1      	cmp	r1, r4
 8011848:	d008      	beq.n	801185c <memmove+0x28>
 801184a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801184e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011852:	e7f8      	b.n	8011846 <memmove+0x12>
 8011854:	4402      	add	r2, r0
 8011856:	4601      	mov	r1, r0
 8011858:	428a      	cmp	r2, r1
 801185a:	d100      	bne.n	801185e <memmove+0x2a>
 801185c:	bd10      	pop	{r4, pc}
 801185e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011866:	e7f7      	b.n	8011858 <memmove+0x24>

08011868 <_sbrk_r>:
 8011868:	b538      	push	{r3, r4, r5, lr}
 801186a:	4d06      	ldr	r5, [pc, #24]	@ (8011884 <_sbrk_r+0x1c>)
 801186c:	2300      	movs	r3, #0
 801186e:	4604      	mov	r4, r0
 8011870:	4608      	mov	r0, r1
 8011872:	602b      	str	r3, [r5, #0]
 8011874:	f7f3 f864 	bl	8004940 <_sbrk>
 8011878:	1c43      	adds	r3, r0, #1
 801187a:	d102      	bne.n	8011882 <_sbrk_r+0x1a>
 801187c:	682b      	ldr	r3, [r5, #0]
 801187e:	b103      	cbz	r3, 8011882 <_sbrk_r+0x1a>
 8011880:	6023      	str	r3, [r4, #0]
 8011882:	bd38      	pop	{r3, r4, r5, pc}
 8011884:	200029f8 	.word	0x200029f8

08011888 <__assert_func>:
 8011888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801188a:	4614      	mov	r4, r2
 801188c:	461a      	mov	r2, r3
 801188e:	4b09      	ldr	r3, [pc, #36]	@ (80118b4 <__assert_func+0x2c>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4605      	mov	r5, r0
 8011894:	68d8      	ldr	r0, [r3, #12]
 8011896:	b954      	cbnz	r4, 80118ae <__assert_func+0x26>
 8011898:	4b07      	ldr	r3, [pc, #28]	@ (80118b8 <__assert_func+0x30>)
 801189a:	461c      	mov	r4, r3
 801189c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118a0:	9100      	str	r1, [sp, #0]
 80118a2:	462b      	mov	r3, r5
 80118a4:	4905      	ldr	r1, [pc, #20]	@ (80118bc <__assert_func+0x34>)
 80118a6:	f000 f857 	bl	8011958 <fiprintf>
 80118aa:	f000 f867 	bl	801197c <abort>
 80118ae:	4b04      	ldr	r3, [pc, #16]	@ (80118c0 <__assert_func+0x38>)
 80118b0:	e7f4      	b.n	801189c <__assert_func+0x14>
 80118b2:	bf00      	nop
 80118b4:	200001e8 	.word	0x200001e8
 80118b8:	08012f36 	.word	0x08012f36
 80118bc:	08012f08 	.word	0x08012f08
 80118c0:	08012efb 	.word	0x08012efb

080118c4 <_calloc_r>:
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	fba1 5402 	umull	r5, r4, r1, r2
 80118ca:	b93c      	cbnz	r4, 80118dc <_calloc_r+0x18>
 80118cc:	4629      	mov	r1, r5
 80118ce:	f7fe fec3 	bl	8010658 <_malloc_r>
 80118d2:	4606      	mov	r6, r0
 80118d4:	b928      	cbnz	r0, 80118e2 <_calloc_r+0x1e>
 80118d6:	2600      	movs	r6, #0
 80118d8:	4630      	mov	r0, r6
 80118da:	bd70      	pop	{r4, r5, r6, pc}
 80118dc:	220c      	movs	r2, #12
 80118de:	6002      	str	r2, [r0, #0]
 80118e0:	e7f9      	b.n	80118d6 <_calloc_r+0x12>
 80118e2:	462a      	mov	r2, r5
 80118e4:	4621      	mov	r1, r4
 80118e6:	f7fe fa65 	bl	800fdb4 <memset>
 80118ea:	e7f5      	b.n	80118d8 <_calloc_r+0x14>

080118ec <malloc>:
 80118ec:	4b02      	ldr	r3, [pc, #8]	@ (80118f8 <malloc+0xc>)
 80118ee:	4601      	mov	r1, r0
 80118f0:	6818      	ldr	r0, [r3, #0]
 80118f2:	f7fe beb1 	b.w	8010658 <_malloc_r>
 80118f6:	bf00      	nop
 80118f8:	200001e8 	.word	0x200001e8

080118fc <_realloc_r>:
 80118fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011900:	4680      	mov	r8, r0
 8011902:	4615      	mov	r5, r2
 8011904:	460c      	mov	r4, r1
 8011906:	b921      	cbnz	r1, 8011912 <_realloc_r+0x16>
 8011908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801190c:	4611      	mov	r1, r2
 801190e:	f7fe bea3 	b.w	8010658 <_malloc_r>
 8011912:	b92a      	cbnz	r2, 8011920 <_realloc_r+0x24>
 8011914:	f7fe fafa 	bl	800ff0c <_free_r>
 8011918:	2400      	movs	r4, #0
 801191a:	4620      	mov	r0, r4
 801191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011920:	f000 f833 	bl	801198a <_malloc_usable_size_r>
 8011924:	4285      	cmp	r5, r0
 8011926:	4606      	mov	r6, r0
 8011928:	d802      	bhi.n	8011930 <_realloc_r+0x34>
 801192a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801192e:	d8f4      	bhi.n	801191a <_realloc_r+0x1e>
 8011930:	4629      	mov	r1, r5
 8011932:	4640      	mov	r0, r8
 8011934:	f7fe fe90 	bl	8010658 <_malloc_r>
 8011938:	4607      	mov	r7, r0
 801193a:	2800      	cmp	r0, #0
 801193c:	d0ec      	beq.n	8011918 <_realloc_r+0x1c>
 801193e:	42b5      	cmp	r5, r6
 8011940:	462a      	mov	r2, r5
 8011942:	4621      	mov	r1, r4
 8011944:	bf28      	it	cs
 8011946:	4632      	movcs	r2, r6
 8011948:	f7fe fac1 	bl	800fece <memcpy>
 801194c:	4621      	mov	r1, r4
 801194e:	4640      	mov	r0, r8
 8011950:	f7fe fadc 	bl	800ff0c <_free_r>
 8011954:	463c      	mov	r4, r7
 8011956:	e7e0      	b.n	801191a <_realloc_r+0x1e>

08011958 <fiprintf>:
 8011958:	b40e      	push	{r1, r2, r3}
 801195a:	b503      	push	{r0, r1, lr}
 801195c:	4601      	mov	r1, r0
 801195e:	ab03      	add	r3, sp, #12
 8011960:	4805      	ldr	r0, [pc, #20]	@ (8011978 <fiprintf+0x20>)
 8011962:	f853 2b04 	ldr.w	r2, [r3], #4
 8011966:	6800      	ldr	r0, [r0, #0]
 8011968:	9301      	str	r3, [sp, #4]
 801196a:	f000 f83f 	bl	80119ec <_vfiprintf_r>
 801196e:	b002      	add	sp, #8
 8011970:	f85d eb04 	ldr.w	lr, [sp], #4
 8011974:	b003      	add	sp, #12
 8011976:	4770      	bx	lr
 8011978:	200001e8 	.word	0x200001e8

0801197c <abort>:
 801197c:	b508      	push	{r3, lr}
 801197e:	2006      	movs	r0, #6
 8011980:	f000 fa08 	bl	8011d94 <raise>
 8011984:	2001      	movs	r0, #1
 8011986:	f7f2 ff63 	bl	8004850 <_exit>

0801198a <_malloc_usable_size_r>:
 801198a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801198e:	1f18      	subs	r0, r3, #4
 8011990:	2b00      	cmp	r3, #0
 8011992:	bfbc      	itt	lt
 8011994:	580b      	ldrlt	r3, [r1, r0]
 8011996:	18c0      	addlt	r0, r0, r3
 8011998:	4770      	bx	lr

0801199a <__sfputc_r>:
 801199a:	6893      	ldr	r3, [r2, #8]
 801199c:	3b01      	subs	r3, #1
 801199e:	2b00      	cmp	r3, #0
 80119a0:	b410      	push	{r4}
 80119a2:	6093      	str	r3, [r2, #8]
 80119a4:	da08      	bge.n	80119b8 <__sfputc_r+0x1e>
 80119a6:	6994      	ldr	r4, [r2, #24]
 80119a8:	42a3      	cmp	r3, r4
 80119aa:	db01      	blt.n	80119b0 <__sfputc_r+0x16>
 80119ac:	290a      	cmp	r1, #10
 80119ae:	d103      	bne.n	80119b8 <__sfputc_r+0x1e>
 80119b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119b4:	f000 b932 	b.w	8011c1c <__swbuf_r>
 80119b8:	6813      	ldr	r3, [r2, #0]
 80119ba:	1c58      	adds	r0, r3, #1
 80119bc:	6010      	str	r0, [r2, #0]
 80119be:	7019      	strb	r1, [r3, #0]
 80119c0:	4608      	mov	r0, r1
 80119c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119c6:	4770      	bx	lr

080119c8 <__sfputs_r>:
 80119c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ca:	4606      	mov	r6, r0
 80119cc:	460f      	mov	r7, r1
 80119ce:	4614      	mov	r4, r2
 80119d0:	18d5      	adds	r5, r2, r3
 80119d2:	42ac      	cmp	r4, r5
 80119d4:	d101      	bne.n	80119da <__sfputs_r+0x12>
 80119d6:	2000      	movs	r0, #0
 80119d8:	e007      	b.n	80119ea <__sfputs_r+0x22>
 80119da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119de:	463a      	mov	r2, r7
 80119e0:	4630      	mov	r0, r6
 80119e2:	f7ff ffda 	bl	801199a <__sfputc_r>
 80119e6:	1c43      	adds	r3, r0, #1
 80119e8:	d1f3      	bne.n	80119d2 <__sfputs_r+0xa>
 80119ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119ec <_vfiprintf_r>:
 80119ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f0:	460d      	mov	r5, r1
 80119f2:	b09d      	sub	sp, #116	@ 0x74
 80119f4:	4614      	mov	r4, r2
 80119f6:	4698      	mov	r8, r3
 80119f8:	4606      	mov	r6, r0
 80119fa:	b118      	cbz	r0, 8011a04 <_vfiprintf_r+0x18>
 80119fc:	6a03      	ldr	r3, [r0, #32]
 80119fe:	b90b      	cbnz	r3, 8011a04 <_vfiprintf_r+0x18>
 8011a00:	f7fe f8d2 	bl	800fba8 <__sinit>
 8011a04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a06:	07d9      	lsls	r1, r3, #31
 8011a08:	d405      	bmi.n	8011a16 <_vfiprintf_r+0x2a>
 8011a0a:	89ab      	ldrh	r3, [r5, #12]
 8011a0c:	059a      	lsls	r2, r3, #22
 8011a0e:	d402      	bmi.n	8011a16 <_vfiprintf_r+0x2a>
 8011a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a12:	f7fe fa5a 	bl	800feca <__retarget_lock_acquire_recursive>
 8011a16:	89ab      	ldrh	r3, [r5, #12]
 8011a18:	071b      	lsls	r3, r3, #28
 8011a1a:	d501      	bpl.n	8011a20 <_vfiprintf_r+0x34>
 8011a1c:	692b      	ldr	r3, [r5, #16]
 8011a1e:	b99b      	cbnz	r3, 8011a48 <_vfiprintf_r+0x5c>
 8011a20:	4629      	mov	r1, r5
 8011a22:	4630      	mov	r0, r6
 8011a24:	f000 f938 	bl	8011c98 <__swsetup_r>
 8011a28:	b170      	cbz	r0, 8011a48 <_vfiprintf_r+0x5c>
 8011a2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a2c:	07dc      	lsls	r4, r3, #31
 8011a2e:	d504      	bpl.n	8011a3a <_vfiprintf_r+0x4e>
 8011a30:	f04f 30ff 	mov.w	r0, #4294967295
 8011a34:	b01d      	add	sp, #116	@ 0x74
 8011a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3a:	89ab      	ldrh	r3, [r5, #12]
 8011a3c:	0598      	lsls	r0, r3, #22
 8011a3e:	d4f7      	bmi.n	8011a30 <_vfiprintf_r+0x44>
 8011a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a42:	f7fe fa43 	bl	800fecc <__retarget_lock_release_recursive>
 8011a46:	e7f3      	b.n	8011a30 <_vfiprintf_r+0x44>
 8011a48:	2300      	movs	r3, #0
 8011a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a4c:	2320      	movs	r3, #32
 8011a4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a56:	2330      	movs	r3, #48	@ 0x30
 8011a58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011c08 <_vfiprintf_r+0x21c>
 8011a5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a60:	f04f 0901 	mov.w	r9, #1
 8011a64:	4623      	mov	r3, r4
 8011a66:	469a      	mov	sl, r3
 8011a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a6c:	b10a      	cbz	r2, 8011a72 <_vfiprintf_r+0x86>
 8011a6e:	2a25      	cmp	r2, #37	@ 0x25
 8011a70:	d1f9      	bne.n	8011a66 <_vfiprintf_r+0x7a>
 8011a72:	ebba 0b04 	subs.w	fp, sl, r4
 8011a76:	d00b      	beq.n	8011a90 <_vfiprintf_r+0xa4>
 8011a78:	465b      	mov	r3, fp
 8011a7a:	4622      	mov	r2, r4
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	4630      	mov	r0, r6
 8011a80:	f7ff ffa2 	bl	80119c8 <__sfputs_r>
 8011a84:	3001      	adds	r0, #1
 8011a86:	f000 80a7 	beq.w	8011bd8 <_vfiprintf_r+0x1ec>
 8011a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a8c:	445a      	add	r2, fp
 8011a8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a90:	f89a 3000 	ldrb.w	r3, [sl]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f000 809f 	beq.w	8011bd8 <_vfiprintf_r+0x1ec>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8011aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011aa4:	f10a 0a01 	add.w	sl, sl, #1
 8011aa8:	9304      	str	r3, [sp, #16]
 8011aaa:	9307      	str	r3, [sp, #28]
 8011aac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ab0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ab2:	4654      	mov	r4, sl
 8011ab4:	2205      	movs	r2, #5
 8011ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aba:	4853      	ldr	r0, [pc, #332]	@ (8011c08 <_vfiprintf_r+0x21c>)
 8011abc:	f7ee fbb0 	bl	8000220 <memchr>
 8011ac0:	9a04      	ldr	r2, [sp, #16]
 8011ac2:	b9d8      	cbnz	r0, 8011afc <_vfiprintf_r+0x110>
 8011ac4:	06d1      	lsls	r1, r2, #27
 8011ac6:	bf44      	itt	mi
 8011ac8:	2320      	movmi	r3, #32
 8011aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ace:	0713      	lsls	r3, r2, #28
 8011ad0:	bf44      	itt	mi
 8011ad2:	232b      	movmi	r3, #43	@ 0x2b
 8011ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8011adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ade:	d015      	beq.n	8011b0c <_vfiprintf_r+0x120>
 8011ae0:	9a07      	ldr	r2, [sp, #28]
 8011ae2:	4654      	mov	r4, sl
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	f04f 0c0a 	mov.w	ip, #10
 8011aea:	4621      	mov	r1, r4
 8011aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011af0:	3b30      	subs	r3, #48	@ 0x30
 8011af2:	2b09      	cmp	r3, #9
 8011af4:	d94b      	bls.n	8011b8e <_vfiprintf_r+0x1a2>
 8011af6:	b1b0      	cbz	r0, 8011b26 <_vfiprintf_r+0x13a>
 8011af8:	9207      	str	r2, [sp, #28]
 8011afa:	e014      	b.n	8011b26 <_vfiprintf_r+0x13a>
 8011afc:	eba0 0308 	sub.w	r3, r0, r8
 8011b00:	fa09 f303 	lsl.w	r3, r9, r3
 8011b04:	4313      	orrs	r3, r2
 8011b06:	9304      	str	r3, [sp, #16]
 8011b08:	46a2      	mov	sl, r4
 8011b0a:	e7d2      	b.n	8011ab2 <_vfiprintf_r+0xc6>
 8011b0c:	9b03      	ldr	r3, [sp, #12]
 8011b0e:	1d19      	adds	r1, r3, #4
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	9103      	str	r1, [sp, #12]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	bfbb      	ittet	lt
 8011b18:	425b      	neglt	r3, r3
 8011b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8011b1e:	9307      	strge	r3, [sp, #28]
 8011b20:	9307      	strlt	r3, [sp, #28]
 8011b22:	bfb8      	it	lt
 8011b24:	9204      	strlt	r2, [sp, #16]
 8011b26:	7823      	ldrb	r3, [r4, #0]
 8011b28:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b2a:	d10a      	bne.n	8011b42 <_vfiprintf_r+0x156>
 8011b2c:	7863      	ldrb	r3, [r4, #1]
 8011b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b30:	d132      	bne.n	8011b98 <_vfiprintf_r+0x1ac>
 8011b32:	9b03      	ldr	r3, [sp, #12]
 8011b34:	1d1a      	adds	r2, r3, #4
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	9203      	str	r2, [sp, #12]
 8011b3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b3e:	3402      	adds	r4, #2
 8011b40:	9305      	str	r3, [sp, #20]
 8011b42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c18 <_vfiprintf_r+0x22c>
 8011b46:	7821      	ldrb	r1, [r4, #0]
 8011b48:	2203      	movs	r2, #3
 8011b4a:	4650      	mov	r0, sl
 8011b4c:	f7ee fb68 	bl	8000220 <memchr>
 8011b50:	b138      	cbz	r0, 8011b62 <_vfiprintf_r+0x176>
 8011b52:	9b04      	ldr	r3, [sp, #16]
 8011b54:	eba0 000a 	sub.w	r0, r0, sl
 8011b58:	2240      	movs	r2, #64	@ 0x40
 8011b5a:	4082      	lsls	r2, r0
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	3401      	adds	r4, #1
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b66:	4829      	ldr	r0, [pc, #164]	@ (8011c0c <_vfiprintf_r+0x220>)
 8011b68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b6c:	2206      	movs	r2, #6
 8011b6e:	f7ee fb57 	bl	8000220 <memchr>
 8011b72:	2800      	cmp	r0, #0
 8011b74:	d03f      	beq.n	8011bf6 <_vfiprintf_r+0x20a>
 8011b76:	4b26      	ldr	r3, [pc, #152]	@ (8011c10 <_vfiprintf_r+0x224>)
 8011b78:	bb1b      	cbnz	r3, 8011bc2 <_vfiprintf_r+0x1d6>
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	3307      	adds	r3, #7
 8011b7e:	f023 0307 	bic.w	r3, r3, #7
 8011b82:	3308      	adds	r3, #8
 8011b84:	9303      	str	r3, [sp, #12]
 8011b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b88:	443b      	add	r3, r7
 8011b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b8c:	e76a      	b.n	8011a64 <_vfiprintf_r+0x78>
 8011b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b92:	460c      	mov	r4, r1
 8011b94:	2001      	movs	r0, #1
 8011b96:	e7a8      	b.n	8011aea <_vfiprintf_r+0xfe>
 8011b98:	2300      	movs	r3, #0
 8011b9a:	3401      	adds	r4, #1
 8011b9c:	9305      	str	r3, [sp, #20]
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	f04f 0c0a 	mov.w	ip, #10
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011baa:	3a30      	subs	r2, #48	@ 0x30
 8011bac:	2a09      	cmp	r2, #9
 8011bae:	d903      	bls.n	8011bb8 <_vfiprintf_r+0x1cc>
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d0c6      	beq.n	8011b42 <_vfiprintf_r+0x156>
 8011bb4:	9105      	str	r1, [sp, #20]
 8011bb6:	e7c4      	b.n	8011b42 <_vfiprintf_r+0x156>
 8011bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	e7f0      	b.n	8011ba4 <_vfiprintf_r+0x1b8>
 8011bc2:	ab03      	add	r3, sp, #12
 8011bc4:	9300      	str	r3, [sp, #0]
 8011bc6:	462a      	mov	r2, r5
 8011bc8:	4b12      	ldr	r3, [pc, #72]	@ (8011c14 <_vfiprintf_r+0x228>)
 8011bca:	a904      	add	r1, sp, #16
 8011bcc:	4630      	mov	r0, r6
 8011bce:	f3af 8000 	nop.w
 8011bd2:	4607      	mov	r7, r0
 8011bd4:	1c78      	adds	r0, r7, #1
 8011bd6:	d1d6      	bne.n	8011b86 <_vfiprintf_r+0x19a>
 8011bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bda:	07d9      	lsls	r1, r3, #31
 8011bdc:	d405      	bmi.n	8011bea <_vfiprintf_r+0x1fe>
 8011bde:	89ab      	ldrh	r3, [r5, #12]
 8011be0:	059a      	lsls	r2, r3, #22
 8011be2:	d402      	bmi.n	8011bea <_vfiprintf_r+0x1fe>
 8011be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011be6:	f7fe f971 	bl	800fecc <__retarget_lock_release_recursive>
 8011bea:	89ab      	ldrh	r3, [r5, #12]
 8011bec:	065b      	lsls	r3, r3, #25
 8011bee:	f53f af1f 	bmi.w	8011a30 <_vfiprintf_r+0x44>
 8011bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bf4:	e71e      	b.n	8011a34 <_vfiprintf_r+0x48>
 8011bf6:	ab03      	add	r3, sp, #12
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	462a      	mov	r2, r5
 8011bfc:	4b05      	ldr	r3, [pc, #20]	@ (8011c14 <_vfiprintf_r+0x228>)
 8011bfe:	a904      	add	r1, sp, #16
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7ff fc4b 	bl	801149c <_printf_i>
 8011c06:	e7e4      	b.n	8011bd2 <_vfiprintf_r+0x1e6>
 8011c08:	08012ec8 	.word	0x08012ec8
 8011c0c:	08012ed2 	.word	0x08012ed2
 8011c10:	00000000 	.word	0x00000000
 8011c14:	080119c9 	.word	0x080119c9
 8011c18:	08012ece 	.word	0x08012ece

08011c1c <__swbuf_r>:
 8011c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1e:	460e      	mov	r6, r1
 8011c20:	4614      	mov	r4, r2
 8011c22:	4605      	mov	r5, r0
 8011c24:	b118      	cbz	r0, 8011c2e <__swbuf_r+0x12>
 8011c26:	6a03      	ldr	r3, [r0, #32]
 8011c28:	b90b      	cbnz	r3, 8011c2e <__swbuf_r+0x12>
 8011c2a:	f7fd ffbd 	bl	800fba8 <__sinit>
 8011c2e:	69a3      	ldr	r3, [r4, #24]
 8011c30:	60a3      	str	r3, [r4, #8]
 8011c32:	89a3      	ldrh	r3, [r4, #12]
 8011c34:	071a      	lsls	r2, r3, #28
 8011c36:	d501      	bpl.n	8011c3c <__swbuf_r+0x20>
 8011c38:	6923      	ldr	r3, [r4, #16]
 8011c3a:	b943      	cbnz	r3, 8011c4e <__swbuf_r+0x32>
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f000 f82a 	bl	8011c98 <__swsetup_r>
 8011c44:	b118      	cbz	r0, 8011c4e <__swbuf_r+0x32>
 8011c46:	f04f 37ff 	mov.w	r7, #4294967295
 8011c4a:	4638      	mov	r0, r7
 8011c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	6922      	ldr	r2, [r4, #16]
 8011c52:	1a98      	subs	r0, r3, r2
 8011c54:	6963      	ldr	r3, [r4, #20]
 8011c56:	b2f6      	uxtb	r6, r6
 8011c58:	4283      	cmp	r3, r0
 8011c5a:	4637      	mov	r7, r6
 8011c5c:	dc05      	bgt.n	8011c6a <__swbuf_r+0x4e>
 8011c5e:	4621      	mov	r1, r4
 8011c60:	4628      	mov	r0, r5
 8011c62:	f7ff fdbf 	bl	80117e4 <_fflush_r>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d1ed      	bne.n	8011c46 <__swbuf_r+0x2a>
 8011c6a:	68a3      	ldr	r3, [r4, #8]
 8011c6c:	3b01      	subs	r3, #1
 8011c6e:	60a3      	str	r3, [r4, #8]
 8011c70:	6823      	ldr	r3, [r4, #0]
 8011c72:	1c5a      	adds	r2, r3, #1
 8011c74:	6022      	str	r2, [r4, #0]
 8011c76:	701e      	strb	r6, [r3, #0]
 8011c78:	6962      	ldr	r2, [r4, #20]
 8011c7a:	1c43      	adds	r3, r0, #1
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d004      	beq.n	8011c8a <__swbuf_r+0x6e>
 8011c80:	89a3      	ldrh	r3, [r4, #12]
 8011c82:	07db      	lsls	r3, r3, #31
 8011c84:	d5e1      	bpl.n	8011c4a <__swbuf_r+0x2e>
 8011c86:	2e0a      	cmp	r6, #10
 8011c88:	d1df      	bne.n	8011c4a <__swbuf_r+0x2e>
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f7ff fda9 	bl	80117e4 <_fflush_r>
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d0d9      	beq.n	8011c4a <__swbuf_r+0x2e>
 8011c96:	e7d6      	b.n	8011c46 <__swbuf_r+0x2a>

08011c98 <__swsetup_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4b29      	ldr	r3, [pc, #164]	@ (8011d40 <__swsetup_r+0xa8>)
 8011c9c:	4605      	mov	r5, r0
 8011c9e:	6818      	ldr	r0, [r3, #0]
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	b118      	cbz	r0, 8011cac <__swsetup_r+0x14>
 8011ca4:	6a03      	ldr	r3, [r0, #32]
 8011ca6:	b90b      	cbnz	r3, 8011cac <__swsetup_r+0x14>
 8011ca8:	f7fd ff7e 	bl	800fba8 <__sinit>
 8011cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cb0:	0719      	lsls	r1, r3, #28
 8011cb2:	d422      	bmi.n	8011cfa <__swsetup_r+0x62>
 8011cb4:	06da      	lsls	r2, r3, #27
 8011cb6:	d407      	bmi.n	8011cc8 <__swsetup_r+0x30>
 8011cb8:	2209      	movs	r2, #9
 8011cba:	602a      	str	r2, [r5, #0]
 8011cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cc0:	81a3      	strh	r3, [r4, #12]
 8011cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011cc6:	e033      	b.n	8011d30 <__swsetup_r+0x98>
 8011cc8:	0758      	lsls	r0, r3, #29
 8011cca:	d512      	bpl.n	8011cf2 <__swsetup_r+0x5a>
 8011ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cce:	b141      	cbz	r1, 8011ce2 <__swsetup_r+0x4a>
 8011cd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011cd4:	4299      	cmp	r1, r3
 8011cd6:	d002      	beq.n	8011cde <__swsetup_r+0x46>
 8011cd8:	4628      	mov	r0, r5
 8011cda:	f7fe f917 	bl	800ff0c <_free_r>
 8011cde:	2300      	movs	r3, #0
 8011ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ce2:	89a3      	ldrh	r3, [r4, #12]
 8011ce4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ce8:	81a3      	strh	r3, [r4, #12]
 8011cea:	2300      	movs	r3, #0
 8011cec:	6063      	str	r3, [r4, #4]
 8011cee:	6923      	ldr	r3, [r4, #16]
 8011cf0:	6023      	str	r3, [r4, #0]
 8011cf2:	89a3      	ldrh	r3, [r4, #12]
 8011cf4:	f043 0308 	orr.w	r3, r3, #8
 8011cf8:	81a3      	strh	r3, [r4, #12]
 8011cfa:	6923      	ldr	r3, [r4, #16]
 8011cfc:	b94b      	cbnz	r3, 8011d12 <__swsetup_r+0x7a>
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d08:	d003      	beq.n	8011d12 <__swsetup_r+0x7a>
 8011d0a:	4621      	mov	r1, r4
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	f000 f883 	bl	8011e18 <__smakebuf_r>
 8011d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d16:	f013 0201 	ands.w	r2, r3, #1
 8011d1a:	d00a      	beq.n	8011d32 <__swsetup_r+0x9a>
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	60a2      	str	r2, [r4, #8]
 8011d20:	6962      	ldr	r2, [r4, #20]
 8011d22:	4252      	negs	r2, r2
 8011d24:	61a2      	str	r2, [r4, #24]
 8011d26:	6922      	ldr	r2, [r4, #16]
 8011d28:	b942      	cbnz	r2, 8011d3c <__swsetup_r+0xa4>
 8011d2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d2e:	d1c5      	bne.n	8011cbc <__swsetup_r+0x24>
 8011d30:	bd38      	pop	{r3, r4, r5, pc}
 8011d32:	0799      	lsls	r1, r3, #30
 8011d34:	bf58      	it	pl
 8011d36:	6962      	ldrpl	r2, [r4, #20]
 8011d38:	60a2      	str	r2, [r4, #8]
 8011d3a:	e7f4      	b.n	8011d26 <__swsetup_r+0x8e>
 8011d3c:	2000      	movs	r0, #0
 8011d3e:	e7f7      	b.n	8011d30 <__swsetup_r+0x98>
 8011d40:	200001e8 	.word	0x200001e8

08011d44 <_raise_r>:
 8011d44:	291f      	cmp	r1, #31
 8011d46:	b538      	push	{r3, r4, r5, lr}
 8011d48:	4605      	mov	r5, r0
 8011d4a:	460c      	mov	r4, r1
 8011d4c:	d904      	bls.n	8011d58 <_raise_r+0x14>
 8011d4e:	2316      	movs	r3, #22
 8011d50:	6003      	str	r3, [r0, #0]
 8011d52:	f04f 30ff 	mov.w	r0, #4294967295
 8011d56:	bd38      	pop	{r3, r4, r5, pc}
 8011d58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011d5a:	b112      	cbz	r2, 8011d62 <_raise_r+0x1e>
 8011d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d60:	b94b      	cbnz	r3, 8011d76 <_raise_r+0x32>
 8011d62:	4628      	mov	r0, r5
 8011d64:	f000 f830 	bl	8011dc8 <_getpid_r>
 8011d68:	4622      	mov	r2, r4
 8011d6a:	4601      	mov	r1, r0
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d72:	f000 b817 	b.w	8011da4 <_kill_r>
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d00a      	beq.n	8011d90 <_raise_r+0x4c>
 8011d7a:	1c59      	adds	r1, r3, #1
 8011d7c:	d103      	bne.n	8011d86 <_raise_r+0x42>
 8011d7e:	2316      	movs	r3, #22
 8011d80:	6003      	str	r3, [r0, #0]
 8011d82:	2001      	movs	r0, #1
 8011d84:	e7e7      	b.n	8011d56 <_raise_r+0x12>
 8011d86:	2100      	movs	r1, #0
 8011d88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	4798      	blx	r3
 8011d90:	2000      	movs	r0, #0
 8011d92:	e7e0      	b.n	8011d56 <_raise_r+0x12>

08011d94 <raise>:
 8011d94:	4b02      	ldr	r3, [pc, #8]	@ (8011da0 <raise+0xc>)
 8011d96:	4601      	mov	r1, r0
 8011d98:	6818      	ldr	r0, [r3, #0]
 8011d9a:	f7ff bfd3 	b.w	8011d44 <_raise_r>
 8011d9e:	bf00      	nop
 8011da0:	200001e8 	.word	0x200001e8

08011da4 <_kill_r>:
 8011da4:	b538      	push	{r3, r4, r5, lr}
 8011da6:	4d07      	ldr	r5, [pc, #28]	@ (8011dc4 <_kill_r+0x20>)
 8011da8:	2300      	movs	r3, #0
 8011daa:	4604      	mov	r4, r0
 8011dac:	4608      	mov	r0, r1
 8011dae:	4611      	mov	r1, r2
 8011db0:	602b      	str	r3, [r5, #0]
 8011db2:	f7f2 fd3d 	bl	8004830 <_kill>
 8011db6:	1c43      	adds	r3, r0, #1
 8011db8:	d102      	bne.n	8011dc0 <_kill_r+0x1c>
 8011dba:	682b      	ldr	r3, [r5, #0]
 8011dbc:	b103      	cbz	r3, 8011dc0 <_kill_r+0x1c>
 8011dbe:	6023      	str	r3, [r4, #0]
 8011dc0:	bd38      	pop	{r3, r4, r5, pc}
 8011dc2:	bf00      	nop
 8011dc4:	200029f8 	.word	0x200029f8

08011dc8 <_getpid_r>:
 8011dc8:	f7f2 bd2a 	b.w	8004820 <_getpid>

08011dcc <__swhatbuf_r>:
 8011dcc:	b570      	push	{r4, r5, r6, lr}
 8011dce:	460c      	mov	r4, r1
 8011dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dd4:	2900      	cmp	r1, #0
 8011dd6:	b096      	sub	sp, #88	@ 0x58
 8011dd8:	4615      	mov	r5, r2
 8011dda:	461e      	mov	r6, r3
 8011ddc:	da0d      	bge.n	8011dfa <__swhatbuf_r+0x2e>
 8011dde:	89a3      	ldrh	r3, [r4, #12]
 8011de0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011de4:	f04f 0100 	mov.w	r1, #0
 8011de8:	bf14      	ite	ne
 8011dea:	2340      	movne	r3, #64	@ 0x40
 8011dec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011df0:	2000      	movs	r0, #0
 8011df2:	6031      	str	r1, [r6, #0]
 8011df4:	602b      	str	r3, [r5, #0]
 8011df6:	b016      	add	sp, #88	@ 0x58
 8011df8:	bd70      	pop	{r4, r5, r6, pc}
 8011dfa:	466a      	mov	r2, sp
 8011dfc:	f000 f848 	bl	8011e90 <_fstat_r>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	dbec      	blt.n	8011dde <__swhatbuf_r+0x12>
 8011e04:	9901      	ldr	r1, [sp, #4]
 8011e06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011e0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011e0e:	4259      	negs	r1, r3
 8011e10:	4159      	adcs	r1, r3
 8011e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e16:	e7eb      	b.n	8011df0 <__swhatbuf_r+0x24>

08011e18 <__smakebuf_r>:
 8011e18:	898b      	ldrh	r3, [r1, #12]
 8011e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e1c:	079d      	lsls	r5, r3, #30
 8011e1e:	4606      	mov	r6, r0
 8011e20:	460c      	mov	r4, r1
 8011e22:	d507      	bpl.n	8011e34 <__smakebuf_r+0x1c>
 8011e24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e28:	6023      	str	r3, [r4, #0]
 8011e2a:	6123      	str	r3, [r4, #16]
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	6163      	str	r3, [r4, #20]
 8011e30:	b003      	add	sp, #12
 8011e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e34:	ab01      	add	r3, sp, #4
 8011e36:	466a      	mov	r2, sp
 8011e38:	f7ff ffc8 	bl	8011dcc <__swhatbuf_r>
 8011e3c:	9f00      	ldr	r7, [sp, #0]
 8011e3e:	4605      	mov	r5, r0
 8011e40:	4639      	mov	r1, r7
 8011e42:	4630      	mov	r0, r6
 8011e44:	f7fe fc08 	bl	8010658 <_malloc_r>
 8011e48:	b948      	cbnz	r0, 8011e5e <__smakebuf_r+0x46>
 8011e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e4e:	059a      	lsls	r2, r3, #22
 8011e50:	d4ee      	bmi.n	8011e30 <__smakebuf_r+0x18>
 8011e52:	f023 0303 	bic.w	r3, r3, #3
 8011e56:	f043 0302 	orr.w	r3, r3, #2
 8011e5a:	81a3      	strh	r3, [r4, #12]
 8011e5c:	e7e2      	b.n	8011e24 <__smakebuf_r+0xc>
 8011e5e:	89a3      	ldrh	r3, [r4, #12]
 8011e60:	6020      	str	r0, [r4, #0]
 8011e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e66:	81a3      	strh	r3, [r4, #12]
 8011e68:	9b01      	ldr	r3, [sp, #4]
 8011e6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e6e:	b15b      	cbz	r3, 8011e88 <__smakebuf_r+0x70>
 8011e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e74:	4630      	mov	r0, r6
 8011e76:	f000 f81d 	bl	8011eb4 <_isatty_r>
 8011e7a:	b128      	cbz	r0, 8011e88 <__smakebuf_r+0x70>
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	f023 0303 	bic.w	r3, r3, #3
 8011e82:	f043 0301 	orr.w	r3, r3, #1
 8011e86:	81a3      	strh	r3, [r4, #12]
 8011e88:	89a3      	ldrh	r3, [r4, #12]
 8011e8a:	431d      	orrs	r5, r3
 8011e8c:	81a5      	strh	r5, [r4, #12]
 8011e8e:	e7cf      	b.n	8011e30 <__smakebuf_r+0x18>

08011e90 <_fstat_r>:
 8011e90:	b538      	push	{r3, r4, r5, lr}
 8011e92:	4d07      	ldr	r5, [pc, #28]	@ (8011eb0 <_fstat_r+0x20>)
 8011e94:	2300      	movs	r3, #0
 8011e96:	4604      	mov	r4, r0
 8011e98:	4608      	mov	r0, r1
 8011e9a:	4611      	mov	r1, r2
 8011e9c:	602b      	str	r3, [r5, #0]
 8011e9e:	f7f2 fd27 	bl	80048f0 <_fstat>
 8011ea2:	1c43      	adds	r3, r0, #1
 8011ea4:	d102      	bne.n	8011eac <_fstat_r+0x1c>
 8011ea6:	682b      	ldr	r3, [r5, #0]
 8011ea8:	b103      	cbz	r3, 8011eac <_fstat_r+0x1c>
 8011eaa:	6023      	str	r3, [r4, #0]
 8011eac:	bd38      	pop	{r3, r4, r5, pc}
 8011eae:	bf00      	nop
 8011eb0:	200029f8 	.word	0x200029f8

08011eb4 <_isatty_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4d06      	ldr	r5, [pc, #24]	@ (8011ed0 <_isatty_r+0x1c>)
 8011eb8:	2300      	movs	r3, #0
 8011eba:	4604      	mov	r4, r0
 8011ebc:	4608      	mov	r0, r1
 8011ebe:	602b      	str	r3, [r5, #0]
 8011ec0:	f7f2 fd26 	bl	8004910 <_isatty>
 8011ec4:	1c43      	adds	r3, r0, #1
 8011ec6:	d102      	bne.n	8011ece <_isatty_r+0x1a>
 8011ec8:	682b      	ldr	r3, [r5, #0]
 8011eca:	b103      	cbz	r3, 8011ece <_isatty_r+0x1a>
 8011ecc:	6023      	str	r3, [r4, #0]
 8011ece:	bd38      	pop	{r3, r4, r5, pc}
 8011ed0:	200029f8 	.word	0x200029f8

08011ed4 <fmaxf>:
 8011ed4:	b508      	push	{r3, lr}
 8011ed6:	ed2d 8b02 	vpush	{d8}
 8011eda:	eeb0 8a40 	vmov.f32	s16, s0
 8011ede:	eef0 8a60 	vmov.f32	s17, s1
 8011ee2:	f000 f831 	bl	8011f48 <__fpclassifyf>
 8011ee6:	b930      	cbnz	r0, 8011ef6 <fmaxf+0x22>
 8011ee8:	eeb0 8a68 	vmov.f32	s16, s17
 8011eec:	eeb0 0a48 	vmov.f32	s0, s16
 8011ef0:	ecbd 8b02 	vpop	{d8}
 8011ef4:	bd08      	pop	{r3, pc}
 8011ef6:	eeb0 0a68 	vmov.f32	s0, s17
 8011efa:	f000 f825 	bl	8011f48 <__fpclassifyf>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d0f4      	beq.n	8011eec <fmaxf+0x18>
 8011f02:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f0a:	dded      	ble.n	8011ee8 <fmaxf+0x14>
 8011f0c:	e7ee      	b.n	8011eec <fmaxf+0x18>

08011f0e <fminf>:
 8011f0e:	b508      	push	{r3, lr}
 8011f10:	ed2d 8b02 	vpush	{d8}
 8011f14:	eeb0 8a40 	vmov.f32	s16, s0
 8011f18:	eef0 8a60 	vmov.f32	s17, s1
 8011f1c:	f000 f814 	bl	8011f48 <__fpclassifyf>
 8011f20:	b930      	cbnz	r0, 8011f30 <fminf+0x22>
 8011f22:	eeb0 8a68 	vmov.f32	s16, s17
 8011f26:	eeb0 0a48 	vmov.f32	s0, s16
 8011f2a:	ecbd 8b02 	vpop	{d8}
 8011f2e:	bd08      	pop	{r3, pc}
 8011f30:	eeb0 0a68 	vmov.f32	s0, s17
 8011f34:	f000 f808 	bl	8011f48 <__fpclassifyf>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d0f4      	beq.n	8011f26 <fminf+0x18>
 8011f3c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f44:	d5ed      	bpl.n	8011f22 <fminf+0x14>
 8011f46:	e7ee      	b.n	8011f26 <fminf+0x18>

08011f48 <__fpclassifyf>:
 8011f48:	ee10 3a10 	vmov	r3, s0
 8011f4c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8011f50:	d00d      	beq.n	8011f6e <__fpclassifyf+0x26>
 8011f52:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8011f56:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8011f5a:	d30a      	bcc.n	8011f72 <__fpclassifyf+0x2a>
 8011f5c:	4b07      	ldr	r3, [pc, #28]	@ (8011f7c <__fpclassifyf+0x34>)
 8011f5e:	1e42      	subs	r2, r0, #1
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d908      	bls.n	8011f76 <__fpclassifyf+0x2e>
 8011f64:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8011f68:	4258      	negs	r0, r3
 8011f6a:	4158      	adcs	r0, r3
 8011f6c:	4770      	bx	lr
 8011f6e:	2002      	movs	r0, #2
 8011f70:	4770      	bx	lr
 8011f72:	2004      	movs	r0, #4
 8011f74:	4770      	bx	lr
 8011f76:	2003      	movs	r0, #3
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop
 8011f7c:	007ffffe 	.word	0x007ffffe

08011f80 <_init>:
 8011f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f82:	bf00      	nop
 8011f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f86:	bc08      	pop	{r3}
 8011f88:	469e      	mov	lr, r3
 8011f8a:	4770      	bx	lr

08011f8c <_fini>:
 8011f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f8e:	bf00      	nop
 8011f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f92:	bc08      	pop	{r3}
 8011f94:	469e      	mov	lr, r3
 8011f96:	4770      	bx	lr
