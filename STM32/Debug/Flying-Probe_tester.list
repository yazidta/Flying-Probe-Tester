
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000915c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800932c  0800932c  0000a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d8  080098d8  0000b0a0  2**0
                  CONTENTS
  4 .ARM          00000008  080098d8  080098d8  0000a8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e0  080098e0  0000b0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e0  080098e0  0000a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098e4  080098e4  0000a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080098e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  200000a0  08009988  0000b0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  08009988  0000bb00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faf4  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004381  00000000  00000000  0002abc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  0002ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e9  00000000  00000000  00030910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a381  00000000  00000000  00031cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026197  00000000  00000000  0005c07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8579  00000000  00000000  00082211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a78a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071c4  00000000  00000000  0017a7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00181994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009314 	.word	0x08009314

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08009314 	.word	0x08009314

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f005 f985 	bl	80058d4 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f005 f9eb 	bl	80059b4 <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f003 fa0b 	bl	8003a94 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000bc 	.word	0x200000bc

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <LCD_I2C_SetCursor+0x30>)
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	78bb      	ldrb	r3, [r7, #2]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	3b80      	subs	r3, #128	@ 0x80
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff68 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08009880 	.word	0x08009880

080007d4 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 80007dc:	2101      	movs	r1, #1
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ff5a 	bl	8000698 <__lcd_i2c_write_command>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	460b      	mov	r3, r1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 80007fa:	7afb      	ldrb	r3, [r7, #11]
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	3340      	adds	r3, #64	@ 0x40
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff ff46 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 800080c:	2300      	movs	r3, #0
 800080e:	75fb      	strb	r3, [r7, #23]
 8000810:	e00a      	b.n	8000828 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	68f8      	ldr	r0, [r7, #12]
 800081e:	f7ff ff4b 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	3301      	adds	r3, #1
 8000826:	75fb      	strb	r3, [r7, #23]
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	2b07      	cmp	r3, #7
 800082c:	d9f1      	bls.n	8000812 <LCD_I2C_DefineChar+0x26>
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000844:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 8000846:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8000848:	69b8      	ldr	r0, [r7, #24]
 800084a:	f7ff fce1 	bl	8000210 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000852:	4a21      	ldr	r2, [pc, #132]	@ (80008d8 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800085c:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	461a      	mov	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ffbf 	bl	80007ec <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	77fb      	strb	r3, [r7, #31]
 8000872:	e025      	b.n	80008c0 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	3303      	adds	r3, #3
 8000878:	b2da      	uxtb	r2, r3
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	4619      	mov	r1, r3
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ff8e 	bl	80007a0 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ff7b 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe8b 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 800089a:	7ffb      	ldrb	r3, [r7, #31]
 800089c:	3303      	adds	r3, #3
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	4619      	mov	r1, r3
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff7b 	bl	80007a0 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 80008aa:	7ffb      	ldrb	r3, [r7, #31]
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff feff 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	3301      	adds	r3, #1
 80008be:	77fb      	strb	r3, [r7, #31]
 80008c0:	7ffa      	ldrb	r2, [r7, #31]
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d3d5      	bcc.n	8000874 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	08009338 	.word	0x08009338
 80008d8:	08009344 	.word	0x08009344

080008dc <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t stepsTaken;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e02a      	b.n	8000940 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4919      	ldr	r1, [pc, #100]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2058      	movs	r0, #88	@ 0x58
 80008f4:	fb00 f303 	mul.w	r3, r0, r3
 80008f8:	440b      	add	r3, r1
 80008fa:	330c      	adds	r3, #12
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d11a      	bne.n	800093a <HAL_TIM_PWM_PulseFinishedCallback+0x5e>
		  motors[i].stepsTaken++;
 8000904:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2158      	movs	r1, #88	@ 0x58
 800090a:	fb01 f303 	mul.w	r3, r1, r3
 800090e:	4413      	add	r3, r2
 8000910:	3344      	adds	r3, #68	@ 0x44
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	490f      	ldr	r1, [pc, #60]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2058      	movs	r0, #88	@ 0x58
 800091c:	fb00 f303 	mul.w	r3, r0, r3
 8000920:	440b      	add	r3, r1
 8000922:	3344      	adds	r3, #68	@ 0x44
 8000924:	601a      	str	r2, [r3, #0]
		  stepsTaken = motors[i].stepsTaken;  // increment counter
 8000926:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2158      	movs	r1, #88	@ 0x58
 800092c:	fb01 f303 	mul.w	r3, r1, r3
 8000930:	4413      	add	r3, r2
 8000932:	3344      	adds	r3, #68	@ 0x44
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8000938:	6013      	str	r3, [r2, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	ddd1      	ble.n	80008ea <HAL_TIM_PWM_PulseFinishedCallback+0xe>
	  }
  }

}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	200000e0 	.word	0x200000e0
 8000958:	200000dc 	.word	0x200000dc

0800095c <HAL_UART_RxCpltCallback>:

// UART callback for read from TMC2209
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <HAL_UART_RxCpltCallback+0x44>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d112      	bne.n	8000994 <HAL_UART_RxCpltCallback+0x38>
        for (uint8_t i = 0; i < TMC_REPLY_SIZE + 1 ; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	e009      	b.n	8000988 <HAL_UART_RxCpltCallback+0x2c>
            rxBuffer[i] = rxData[i + 1];
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	490a      	ldr	r1, [pc, #40]	@ (80009a4 <HAL_UART_RxCpltCallback+0x48>)
 800097c:	5c89      	ldrb	r1, [r1, r2]
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000980:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < TMC_REPLY_SIZE + 1 ; i++) {
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	3301      	adds	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b08      	cmp	r3, #8
 800098c:	d9f2      	bls.n	8000974 <HAL_UART_RxCpltCallback+0x18>
        }
        rxBufferReady = 1;
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <HAL_UART_RxCpltCallback+0x50>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
    }
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40004400 	.word	0x40004400
 80009a4:	200000c4 	.word	0x200000c4
 80009a8:	200000d0 	.word	0x200000d0
 80009ac:	200000d8 	.word	0x200000d8

080009b0 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69d8      	ldr	r0, [r3, #28]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8c1b      	ldrh	r3, [r3, #32]
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	4619      	mov	r1, r3
 80009c8:	f002 ff96 	bl	80038f8 <HAL_GPIO_WritePin>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80009e8:	78fa      	ldrb	r2, [r7, #3]
 80009ea:	4619      	mov	r1, r3
 80009ec:	f002 ff84 	bl	80038f8 <HAL_GPIO_WritePin>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 8000a0a:	f004 fa3d 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a20:	3b01      	subs	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d106      	bne.n	8000a4c <TMC2209_SetSpeed+0x54>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	0852      	lsrs	r2, r2, #1
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a4a:	e031      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d106      	bne.n	8000a62 <TMC2209_SetSpeed+0x6a>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	085b      	lsrs	r3, r3, #1
 8000a5e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a60:	e026      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d106      	bne.n	8000a78 <TMC2209_SetSpeed+0x80>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	085b      	lsrs	r3, r3, #1
 8000a74:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000a76:	e01b      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	2b0c      	cmp	r3, #12
 8000a7e:	d106      	bne.n	8000a8e <TMC2209_SetSpeed+0x96>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	085b      	lsrs	r3, r3, #1
 8000a8a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a8c:	e010      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	2b10      	cmp	r3, #16
 8000a94:	d106      	bne.n	8000aa4 <TMC2209_SetSpeed+0xac>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	085b      	lsrs	r3, r3, #1
 8000aa0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000aa2:	e005      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8000acc:	2101      	movs	r1, #1
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff80 	bl	80009d4 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f005 f932 	bl	8005d40 <HAL_TIM_PWM_Stop_IT>
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000af8:	2100      	movs	r1, #0
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff6a 	bl	80009d4 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f004 ffd4 	bl	8005ab0 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <debug_print>:
    }
}



 void debug_print(const char* msg) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 200);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fb75 	bl	8000210 <strlen>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	23c8      	movs	r3, #200	@ 0xc8
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <debug_print+0x24>)
 8000b30:	f006 f976 	bl	8006e20 <HAL_UART_Transmit>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200003d0 	.word	0x200003d0

08000b40 <debug_print_hex>:

 void debug_print_hex(uint8_t* data, uint8_t length) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09e      	sub	sp, #120	@ 0x78
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
    char buffer[100];
    char* ptr = buffer;
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	677b      	str	r3, [r7, #116]	@ 0x74

    ptr += sprintf(ptr, "[");
 8000b52:	491c      	ldr	r1, [pc, #112]	@ (8000bc4 <debug_print_hex+0x84>)
 8000b54:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000b56:	f007 ff3d 	bl	80089d4 <siprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b60:	4413      	add	r3, r2
 8000b62:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000b6a:	e013      	b.n	8000b94 <debug_print_hex+0x54>
        ptr += sprintf(ptr, "%02X ", data[i]);
 8000b6c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4913      	ldr	r1, [pc, #76]	@ (8000bc8 <debug_print_hex+0x88>)
 8000b7a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000b7c:	f007 ff2a 	bl	80089d4 <siprintf>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b86:	4413      	add	r3, r2
 8000b88:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 8000b8a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000b8e:	3301      	adds	r3, #1
 8000b90:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000b94:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d3e6      	bcc.n	8000b6c <debug_print_hex+0x2c>
    }
    ptr += sprintf(ptr, "]\r\n");
 8000b9e:	490b      	ldr	r1, [pc, #44]	@ (8000bcc <debug_print_hex+0x8c>)
 8000ba0:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000ba2:	f007 ff17 	bl	80089d4 <siprintf>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bac:	4413      	add	r3, r2
 8000bae:	677b      	str	r3, [r7, #116]	@ 0x74

    debug_print(buffer);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffaf 	bl	8000b18 <debug_print>
}
 8000bba:	bf00      	nop
 8000bbc:	3778      	adds	r7, #120	@ 0x78
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	080093fc 	.word	0x080093fc
 8000bc8:	08009400 	.word	0x08009400
 8000bcc:	08009408 	.word	0x08009408

08000bd0 <calculate_CRC>:

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	73bb      	strb	r3, [r7, #14]
 8000be4:	e027      	b.n	8000c36 <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	733b      	strb	r3, [r7, #12]
 8000bf4:	e019      	b.n	8000c2a <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	09db      	lsrs	r3, r3, #7
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	7b7b      	ldrb	r3, [r7, #13]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d007      	beq.n	8000c18 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	f083 0307 	eor.w	r3, r3, #7
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e002      	b.n	8000c1e <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8000c1e:	7b7b      	ldrb	r3, [r7, #13]
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000c24:	7b3b      	ldrb	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	733b      	strb	r3, [r7, #12]
 8000c2a:	7b3b      	ldrb	r3, [r7, #12]
 8000c2c:	2b07      	cmp	r3, #7
 8000c2e:	d9e2      	bls.n	8000bf6 <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	3301      	adds	r3, #1
 8000c34:	73bb      	strb	r3, [r7, #14]
 8000c36:	7bba      	ldrb	r2, [r7, #14]
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d3d3      	bcc.n	8000be6 <calculate_CRC+0x16>
        }
    }
    return crc;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <TMC2209_WaitForReply>:
}




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8000c54:	f001 ff40 	bl	8002ad8 <HAL_GetTick>
 8000c58:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 8000c5a:	e00c      	b.n	8000c76 <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 8000c5c:	f001 ff3c 	bl	8002ad8 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d204      	bcs.n	8000c76 <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 8000c6c:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <TMC2209_WaitForReply+0x44>)
 8000c6e:	f7ff ff53 	bl	8000b18 <debug_print>
             return 0; // Timeout
 8000c72:	2300      	movs	r3, #0
 8000c74:	e008      	b.n	8000c88 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <TMC2209_WaitForReply+0x48>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0ed      	beq.n	8000c5c <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <TMC2209_WaitForReply+0x48>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 8000c86:	2301      	movs	r3, #1
 }
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	08009428 	.word	0x08009428
 8000c94:	200000d8 	.word	0x200000d8

08000c98 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
	uint8_t flag = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	75fb      	strb	r3, [r7, #23]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(&huart2, command, writeLength, 10) != HAL_OK) {
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	230a      	movs	r3, #10
 8000cae:	68f9      	ldr	r1, [r7, #12]
 8000cb0:	481c      	ldr	r0, [pc, #112]	@ (8000d24 <TMC2209_sendCommand+0x8c>)
 8000cb2:	f006 f8b5 	bl	8006e20 <HAL_UART_Transmit>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d004      	beq.n	8000cc6 <TMC2209_sendCommand+0x2e>
         debug_print("Failed to send command.\r\n");
 8000cbc:	481a      	ldr	r0, [pc, #104]	@ (8000d28 <TMC2209_sendCommand+0x90>)
 8000cbe:	f7ff ff2b 	bl	8000b18 <debug_print>
         return 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e029      	b.n	8000d1a <TMC2209_sendCommand+0x82>
     }


     if(readLength){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d025      	beq.n	8000d18 <TMC2209_sendCommand+0x80>

     // Wait for reply
     HAL_UART_Receive_DMA(&huart2, rxData, readLength + 1);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4915      	ldr	r1, [pc, #84]	@ (8000d2c <TMC2209_sendCommand+0x94>)
 8000cd8:	4812      	ldr	r0, [pc, #72]	@ (8000d24 <TMC2209_sendCommand+0x8c>)
 8000cda:	f006 f92a 	bl	8006f32 <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 8000cde:	20c8      	movs	r0, #200	@ 0xc8
 8000ce0:	f7ff ffb4 	bl	8000c4c <TMC2209_WaitForReply>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <TMC2209_sendCommand+0x5c>
         debug_print("No reply received.\r\n");
 8000cea:	4811      	ldr	r0, [pc, #68]	@ (8000d30 <TMC2209_sendCommand+0x98>)
 8000cec:	f7ff ff14 	bl	8000b18 <debug_print>
         return 0; // command failed
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e012      	b.n	8000d1a <TMC2209_sendCommand+0x82>
     }
     // Send transmitted data -- Note: this can't be called before receiving or else it will interfere with huart2
     debug_print("Data Transmitted: ");
 8000cf4:	480f      	ldr	r0, [pc, #60]	@ (8000d34 <TMC2209_sendCommand+0x9c>)
 8000cf6:	f7ff ff0f 	bl	8000b18 <debug_print>
     debug_print_hex(command, writeLength);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff ff1d 	bl	8000b40 <debug_print_hex>
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
 8000d06:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <TMC2209_sendCommand+0xa0>)
 8000d08:	f7ff ff06 	bl	8000b18 <debug_print>
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <TMC2209_sendCommand+0xa4>)
 8000d10:	f7ff ff16 	bl	8000b40 <debug_print_hex>

     return rxBuffer; // Success
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <TMC2209_sendCommand+0xa4>)
 8000d16:	e000      	b.n	8000d1a <TMC2209_sendCommand+0x82>
     }

     return flag;
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000348 	.word	0x20000348
 8000d28:	08009448 	.word	0x08009448
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	08009464 	.word	0x08009464
 8000d34:	0800947c 	.word	0x0800947c
 8000d38:	08009490 	.word	0x08009490
 8000d3c:	200000d0 	.word	0x200000d0

08000d40 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8000d4e:	2305      	movs	r3, #5
 8000d50:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	7a1b      	ldrb	r3, [r3, #8]
 8000d56:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8000d58:	7afb      	ldrb	r3, [r7, #11]
 8000d5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0e1b      	lsrs	r3, r3, #24
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	141b      	asrs	r3, r3, #16
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	121b      	asrs	r3, r3, #8
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2107      	movs	r1, #7
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff22 	bl	8000bd0 <calculate_CRC>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2200      	movs	r2, #0
 8000d96:	2108      	movs	r1, #8
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff7d 	bl	8000c98 <TMC2209_sendCommand>
 	HAL_Delay(2);
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f001 fea6 	bl	8002af0 <HAL_Delay>

 }
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
 	uint8_t read_request_command[8] = { 0 };
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]

// 	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
// 		return tmc2209->config->shadowRegister[address];

 	read_request_command[0] = SYNC;
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7a1b      	ldrb	r3, [r3, #8]
 8000dc8:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fefb 	bl	8000bd0 <calculate_CRC>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE);
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2208      	movs	r2, #8
 8000de4:	2104      	movs	r1, #4
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff56 	bl	8000c98 <TMC2209_sendCommand>
 8000dec:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d00c      	beq.n	8000e10 <TMC2209_readInit+0x64>
 		// If first byte equals 0 then it means no reply so return
 		if (verifyBuffer[0] == 0)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <TMC2209_readInit+0x58>
 			return -1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e041      	b.n	8000e88 <TMC2209_readInit+0xdc>
 		debug_print("Invalid data received!(SYNC Byte)\r\n");
 8000e04:	4822      	ldr	r0, [pc, #136]	@ (8000e90 <TMC2209_readInit+0xe4>)
 8000e06:	f7ff fe87 	bl	8000b18 <debug_print>
 		return -1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e03b      	b.n	8000e88 <TMC2209_readInit+0xdc>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2bff      	cmp	r3, #255	@ 0xff
 8000e18:	d005      	beq.n	8000e26 <TMC2209_readInit+0x7a>
 		debug_print("Invalid data received!(MCU Address)\r\n");
 8000e1a:	481e      	ldr	r0, [pc, #120]	@ (8000e94 <TMC2209_readInit+0xe8>)
 8000e1c:	f7ff fe7c 	bl	8000b18 <debug_print>
 		return -1;
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	e030      	b.n	8000e88 <TMC2209_readInit+0xdc>
 	}
 	// Byte 2: Register ddress correct?
 	if (verifyBuffer[2] != regAddress){
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3302      	adds	r3, #2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	78fa      	ldrb	r2, [r7, #3]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d005      	beq.n	8000e3e <TMC2209_readInit+0x92>
 		debug_print("Invalid data received!(Register Address)\r\n");
 8000e32:	4819      	ldr	r0, [pc, #100]	@ (8000e98 <TMC2209_readInit+0xec>)
 8000e34:	f7ff fe70 	bl	8000b18 <debug_print>
 		return -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	e024      	b.n	8000e88 <TMC2209_readInit+0xdc>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3307      	adds	r3, #7
 8000e42:	781c      	ldrb	r4, [r3, #0]
 8000e44:	2107      	movs	r1, #7
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff fec2 	bl	8000bd0 <calculate_CRC>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	429c      	cmp	r4, r3
 8000e50:	d005      	beq.n	8000e5e <TMC2209_readInit+0xb2>
 		debug_print("Invalid data received!(CRC)\r\n");
 8000e52:	4812      	ldr	r0, [pc, #72]	@ (8000e9c <TMC2209_readInit+0xf0>)
 8000e54:	f7ff fe60 	bl	8000b18 <debug_print>
 		return -1;
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	e014      	b.n	8000e88 <TMC2209_readInit+0xdc>
 	}
 	HAL_Delay(2);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f001 fe46 	bl	8002af0 <HAL_Delay>
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3303      	adds	r3, #3
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	061a      	lsls	r2, r3, #24
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3304      	adds	r3, #4
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	041b      	lsls	r3, r3, #16
 8000e74:	431a      	orrs	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3305      	adds	r3, #5
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	3206      	adds	r2, #6
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	4313      	orrs	r3, r2
 }
 8000e88:	4618      	mov	r0, r3
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	080094a4 	.word	0x080094a4
 8000e94:	080094c8 	.word	0x080094c8
 8000e98:	080094f0 	.word	0x080094f0
 8000e9c:	0800951c 	.word	0x0800951c

08000ea0 <TMC2209_SetSpreadCycle>:


uint8_t TMC2209_SetSpreadCycle(Motor *motor, uint8_t enable) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	uint32_t gconf;
	uint32_t check_gconf;

	debug_print("Read current SpreadCycle value...");
 8000eac:	4821      	ldr	r0, [pc, #132]	@ (8000f34 <TMC2209_SetSpreadCycle+0x94>)
 8000eae:	f7ff fe33 	bl	8000b18 <debug_print>
	gconf = TMC2209_readInit(motor, TMC2209_REG_GCONF);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff79 	bl	8000dac <TMC2209_readInit>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60fb      	str	r3, [r7, #12]

    if(gconf == TMC_ERROR){
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d105      	bne.n	8000ed2 <TMC2209_SetSpreadCycle+0x32>
    	debug_print("Failed to set SpreadCycle Mode!(Invalid Reply 1)\r\n");
 8000ec6:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <TMC2209_SetSpreadCycle+0x98>)
 8000ec8:	f7ff fe26 	bl	8000b18 <debug_print>
    	return gconf;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	e02b      	b.n	8000f2a <TMC2209_SetSpreadCycle+0x8a>
    }

    check_gconf = gconf;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
    if(enable) {
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <TMC2209_SetSpreadCycle+0x46>
    	gconf |= (1 << TMC2209_EN_SPREADCYCLE_POS);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e003      	b.n	8000eee <TMC2209_SetSpreadCycle+0x4e>
    } else {
    	gconf &= ~(1 << TMC2209_EN_SPREADCYCLE_POS);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	60fb      	str	r3, [r7, #12]
    }

    if(gconf == check_gconf){ //Setpread is already EN/DIS ABLED so skip and return
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d104      	bne.n	8000f00 <TMC2209_SetSpreadCycle+0x60>
    	debug_print("Failed to set SpreadCycle Mode! (Spread is already on that Mode!)\r\n");
 8000ef6:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <TMC2209_SetSpreadCycle+0x9c>)
 8000ef8:	f7ff fe0e 	bl	8000b18 <debug_print>
    	return enable;
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	e014      	b.n	8000f2a <TMC2209_SetSpreadCycle+0x8a>
    }

    TMC2209_writeInit(motor, TMC2209_REG_GCONF, gconf);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	461a      	mov	r2, r3
 8000f04:	2100      	movs	r1, #0
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff1a 	bl	8000d40 <TMC2209_writeInit>

    check_gconf = TMC2209_readInit(motor, TMC2209_REG_GCONF);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <TMC2209_readInit>
 8000f14:	4603      	mov	r3, r0
 8000f16:	60bb      	str	r3, [r7, #8]
    if(check_gconf != gconf){
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d002      	beq.n	8000f26 <TMC2209_SetSpreadCycle+0x86>
    	debug_print("Failed to set SpreadCycle Mode!(invalid Reply 2)\r\n");
 8000f20:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <TMC2209_SetSpreadCycle+0xa0>)
 8000f22:	f7ff fdf9 	bl	8000b18 <debug_print>
    }
    return check_gconf;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	b2db      	uxtb	r3, r3
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800953c 	.word	0x0800953c
 8000f38:	08009560 	.word	0x08009560
 8000f3c:	08009594 	.word	0x08009594
 8000f40:	080095d8 	.word	0x080095d8

08000f44 <TMC2209_read_ifcnt>:
void TMC2209_enable_PDNuart(Motor *tmc2209){
	  // Enable the driver by writing to the GCONF register
	  debug_print("Enabling driver via GCONF register...\r\n");
	  TMC2209_writeInit(tmc2209, 0x00, 0x00000040); // Set `pdn_disable = 1` in GCONF
}
uint8_t TMC2209_read_ifcnt(Motor *tmc2209) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b090      	sub	sp, #64	@ 0x40
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

     debug_print("Reading IFCNT register...\r\n");
 8000f4c:	4810      	ldr	r0, [pc, #64]	@ (8000f90 <TMC2209_read_ifcnt+0x4c>)
 8000f4e:	f7ff fde3 	bl	8000b18 <debug_print>
     int32_t ifcnt_value = TMC2209_readInit(tmc2209, TMC2209_REG_IFCNT); // IFCNT register address is 0x02
 8000f52:	2102      	movs	r1, #2
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff29 	bl	8000dac <TMC2209_readInit>
 8000f5a:	63f8      	str	r0, [r7, #60]	@ 0x3c

     if (ifcnt_value >= 0) { // This value gets incremented with every sucessful UART write access 0 to 255 then wraps around.
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0e      	blt.n	8000f80 <TMC2209_read_ifcnt+0x3c>
         char debug_msg[50];
         sprintf(debug_msg, "IFCNT Value: %d\r\n",  (int)ifcnt_value);
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f68:	490a      	ldr	r1, [pc, #40]	@ (8000f94 <TMC2209_read_ifcnt+0x50>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f007 fd32 	bl	80089d4 <siprintf>
         debug_print(debug_msg);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fdcf 	bl	8000b18 <debug_print>
         return ifcnt_value;
 8000f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	e003      	b.n	8000f88 <TMC2209_read_ifcnt+0x44>
     } else {
         debug_print("Failed to read IFCNT register!\r\n");
 8000f80:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <TMC2209_read_ifcnt+0x54>)
 8000f82:	f7ff fdc9 	bl	8000b18 <debug_print>
         return 0;
 8000f86:	2300      	movs	r3, #0
     }

 }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3740      	adds	r7, #64	@ 0x40
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	08009684 	.word	0x08009684
 8000f94:	080096a0 	.word	0x080096a0
 8000f98:	080096b4 	.word	0x080096b4

08000f9c <setMicrosteppingResolution>:


// Function to set the microstepping resolution through UART
void setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	@ 0x50
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8000fae:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff fec2 	bl	8000d40 <TMC2209_writeInit>


    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8000fbc:	216c      	movs	r1, #108	@ 0x6c
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fef4 	bl	8000dac <TMC2209_readInit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	64bb      	str	r3, [r7, #72]	@ 0x48


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8000fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fca:	0e1b      	lsrs	r3, r3, #24
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fdc:	d053      	beq.n	8001086 <setMicrosteppingResolution+0xea>
 8000fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fe2:	dc74      	bgt.n	80010ce <setMicrosteppingResolution+0x132>
 8000fe4:	2b80      	cmp	r3, #128	@ 0x80
 8000fe6:	d052      	beq.n	800108e <setMicrosteppingResolution+0xf2>
 8000fe8:	2b80      	cmp	r3, #128	@ 0x80
 8000fea:	dc70      	bgt.n	80010ce <setMicrosteppingResolution+0x132>
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	dc47      	bgt.n	8001080 <setMicrosteppingResolution+0xe4>
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dd6c      	ble.n	80010ce <setMicrosteppingResolution+0x132>
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	2b1f      	cmp	r3, #31
 8000ff8:	d869      	bhi.n	80010ce <setMicrosteppingResolution+0x132>
 8000ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <setMicrosteppingResolution+0x64>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	080010c7 	.word	0x080010c7
 8001004:	080010bf 	.word	0x080010bf
 8001008:	080010cf 	.word	0x080010cf
 800100c:	080010b7 	.word	0x080010b7
 8001010:	080010cf 	.word	0x080010cf
 8001014:	080010cf 	.word	0x080010cf
 8001018:	080010cf 	.word	0x080010cf
 800101c:	080010af 	.word	0x080010af
 8001020:	080010cf 	.word	0x080010cf
 8001024:	080010cf 	.word	0x080010cf
 8001028:	080010cf 	.word	0x080010cf
 800102c:	080010cf 	.word	0x080010cf
 8001030:	080010cf 	.word	0x080010cf
 8001034:	080010cf 	.word	0x080010cf
 8001038:	080010cf 	.word	0x080010cf
 800103c:	080010a7 	.word	0x080010a7
 8001040:	080010cf 	.word	0x080010cf
 8001044:	080010cf 	.word	0x080010cf
 8001048:	080010cf 	.word	0x080010cf
 800104c:	080010cf 	.word	0x080010cf
 8001050:	080010cf 	.word	0x080010cf
 8001054:	080010cf 	.word	0x080010cf
 8001058:	080010cf 	.word	0x080010cf
 800105c:	080010cf 	.word	0x080010cf
 8001060:	080010cf 	.word	0x080010cf
 8001064:	080010cf 	.word	0x080010cf
 8001068:	080010cf 	.word	0x080010cf
 800106c:	080010cf 	.word	0x080010cf
 8001070:	080010cf 	.word	0x080010cf
 8001074:	080010cf 	.word	0x080010cf
 8001078:	080010cf 	.word	0x080010cf
 800107c:	0800109f 	.word	0x0800109f
 8001080:	2b40      	cmp	r3, #64	@ 0x40
 8001082:	d008      	beq.n	8001096 <setMicrosteppingResolution+0xfa>
 8001084:	e023      	b.n	80010ce <setMicrosteppingResolution+0x132>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 8001086:	2300      	movs	r3, #0
 8001088:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 800108c:	e024      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 800108e:	2301      	movs	r3, #1
 8001090:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001094:	e020      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 8001096:	2302      	movs	r3, #2
 8001098:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 800109c:	e01c      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 800109e:	2303      	movs	r3, #3
 80010a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010a4:	e018      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 80010a6:	2304      	movs	r3, #4
 80010a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010ac:	e014      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 80010ae:	2305      	movs	r3, #5
 80010b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010b4:	e010      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 80010b6:	2306      	movs	r3, #6
 80010b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010bc:	e00c      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 80010be:	2307      	movs	r3, #7
 80010c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010c4:	e008      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 80010c6:	2308      	movs	r3, #8
 80010c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010cc:	e004      	b.n	80010d8 <setMicrosteppingResolution+0x13c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 80010ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010d6:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 80010d8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80010dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d103      	bne.n	80010ec <setMicrosteppingResolution+0x150>
        debug_print("Resolution unchanged, no update needed.\n");
 80010e4:	4810      	ldr	r0, [pc, #64]	@ (8001128 <setMicrosteppingResolution+0x18c>)
 80010e6:	f7ff fd17 	bl	8000b18 <debug_print>
 80010ea:	e019      	b.n	8001120 <setMicrosteppingResolution+0x184>
        return;
    }

    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 80010ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ee:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80010f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80010f6:	061b      	lsls	r3, r3, #24
 80010f8:	4313      	orrs	r3, r2
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 80010fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010fe:	461a      	mov	r2, r3
 8001100:	216c      	movs	r1, #108	@ 0x6c
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fe1c 	bl	8000d40 <TMC2209_writeInit>

    // Debug
    char debug_msg[50];
    sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
 8001108:	887a      	ldrh	r2, [r7, #2]
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4907      	ldr	r1, [pc, #28]	@ (800112c <setMicrosteppingResolution+0x190>)
 8001110:	4618      	mov	r0, r3
 8001112:	f007 fc5f 	bl	80089d4 <siprintf>
    debug_print(debug_msg);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fcfc 	bl	8000b18 <debug_print>

}
 8001120:	3750      	adds	r7, #80	@ 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	080096d8 	.word	0x080096d8
 800112c:	08009704 	.word	0x08009704

08001130 <checkMicrosteppingResolution>:


uint16_t checkMicrosteppingResolution(Motor *tmc2209) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b092      	sub	sp, #72	@ 0x48
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    // Read the CHOPCONF register
    uint32_t chopconf = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8001138:	216c      	movs	r1, #108	@ 0x6c
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fe36 	bl	8000dac <TMC2209_readInit>
 8001140:	4603      	mov	r3, r0
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
    // Extract the MRES bits (bits 24–27 in CHOPCONF)
    uint8_t mres = (chopconf >> 24) & 0x0F;
 8001144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001146:	0e1b      	lsrs	r3, r3, #24
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // Calculate the current microstepping resolution
    uint16_t resolution;
    switch (mres) {
 8001152:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001156:	2b08      	cmp	r3, #8
 8001158:	d839      	bhi.n	80011ce <checkMicrosteppingResolution+0x9e>
 800115a:	a201      	add	r2, pc, #4	@ (adr r2, 8001160 <checkMicrosteppingResolution+0x30>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	08001185 	.word	0x08001185
 8001164:	0800118f 	.word	0x0800118f
 8001168:	08001197 	.word	0x08001197
 800116c:	0800119f 	.word	0x0800119f
 8001170:	080011a7 	.word	0x080011a7
 8001174:	080011af 	.word	0x080011af
 8001178:	080011b7 	.word	0x080011b7
 800117c:	080011bf 	.word	0x080011bf
 8001180:	080011c7 	.word	0x080011c7
        case 0x00: resolution = 256; break;
 8001184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001188:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800118c:	e022      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        case 0x01: resolution = 128; break;
 800118e:	2380      	movs	r3, #128	@ 0x80
 8001190:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001194:	e01e      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        case 0x02: resolution = 64; break;
 8001196:	2340      	movs	r3, #64	@ 0x40
 8001198:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800119c:	e01a      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        case 0x03: resolution = 32; break;
 800119e:	2320      	movs	r3, #32
 80011a0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011a4:	e016      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        case 0x04: resolution = 16; break;
 80011a6:	2310      	movs	r3, #16
 80011a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011ac:	e012      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        case 0x05: resolution = 8; break;
 80011ae:	2308      	movs	r3, #8
 80011b0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011b4:	e00e      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        case 0x06: resolution = 4; break;
 80011b6:	2304      	movs	r3, #4
 80011b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011bc:	e00a      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        case 0x07: resolution = 2; break;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011c4:	e006      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        case 0x08: resolution = 1; break;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011cc:	e002      	b.n	80011d4 <checkMicrosteppingResolution+0xa4>
        default: resolution = 0; // Unknown value
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }

    // Debug
    char debug_msg[50];
    sprintf(debug_msg, "Current microstepping resolution: %u\n", resolution);
 80011d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4907      	ldr	r1, [pc, #28]	@ (80011fc <checkMicrosteppingResolution+0xcc>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f007 fbf8 	bl	80089d4 <siprintf>
    debug_print(debug_msg);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fc95 	bl	8000b18 <debug_print>

    return resolution;
 80011ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3748      	adds	r7, #72	@ 0x48
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	08009730 	.word	0x08009730

08001200 <configureGCONF>:
    debug_print(debug_msg);

    return irun_value;
}

void configureGCONF(Motor *tmc2209) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    uint32_t gconf = 0x000000C0; // pdn_disable = 1, mstep_reg_select = 1
 8001208:	23c0      	movs	r3, #192	@ 0xc0
 800120a:	60fb      	str	r3, [r7, #12]
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	461a      	mov	r2, r3
 8001210:	2100      	movs	r1, #0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fd94 	bl	8000d40 <TMC2209_writeInit>
    HAL_Delay(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f001 fc69 	bl	8002af0 <HAL_Delay>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <CarriageHoming>:
void TMC2209_setStallGuardThreshold(Motor *tmc2209, uint8_t sgthrs) {
    TMC2209_writeInit(tmc2209, TMC2209_REG_SGTHRS, sgthrs); // SGTHRS register
    debug_print("StallGuard threshold set successfully! \r\n");
    debug_print("\r\n");
}
void CarriageHoming(Motor *motor){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    TMC2209_SetDirection(&motors[0], 1);
 8001230:	2101      	movs	r1, #1
 8001232:	480b      	ldr	r0, [pc, #44]	@ (8001260 <CarriageHoming+0x38>)
 8001234:	f7ff fbbc 	bl	80009b0 <TMC2209_SetDirection>
    TMC2209_Start(motor);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fc53 	bl	8000ae4 <TMC2209_Start>
    if(IsSensorTriggered(GPIOF,GPIO_PIN_11, 200) == true){
 800123e:	22c8      	movs	r2, #200	@ 0xc8
 8001240:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001244:	4807      	ldr	r0, [pc, #28]	@ (8001264 <CarriageHoming+0x3c>)
 8001246:	f000 fb09 	bl	800185c <IsSensorTriggered>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <CarriageHoming+0x2e>
        TMC2209_Stop(motor);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fc31 	bl	8000ab8 <TMC2209_Stop>
    }


}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000e0 	.word	0x200000e0
 8001264:	40021400 	.word	0x40021400

08001268 <initializeMotors>:
// Motors & axis
Motor motors[MAX_MOTORS];
Axis axes[MAX_MOTORS_PER_AXIS - 1];


void initializeMotors() {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e263      	b.n	800173c <initializeMotors+0x4d4>
    	// Setting all for all drivers/motors
    	motors[i].driver.huart = &huart2; // UART handler
 8001274:	4aa2      	ldr	r2, [pc, #648]	@ (8001500 <initializeMotors+0x298>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2158      	movs	r1, #88	@ 0x58
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	3304      	adds	r3, #4
 8001282:	4aa0      	ldr	r2, [pc, #640]	@ (8001504 <initializeMotors+0x29c>)
 8001284:	601a      	str	r2, [r3, #0]
    	motors[i].driver.address = 0x00+i; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	b2d8      	uxtb	r0, r3
 800128a:	4a9d      	ldr	r2, [pc, #628]	@ (8001500 <initializeMotors+0x298>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2158      	movs	r1, #88	@ 0x58
 8001290:	fb01 f303 	mul.w	r3, r1, r3
 8001294:	4413      	add	r3, r2
 8001296:	3308      	adds	r3, #8
 8001298:	4602      	mov	r2, r0
 800129a:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i + 1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2d8      	uxtb	r0, r3
 80012a4:	4a96      	ldr	r2, [pc, #600]	@ (8001500 <initializeMotors+0x298>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2158      	movs	r1, #88	@ 0x58
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	4602      	mov	r2, r0
 80012b2:	701a      	strb	r2, [r3, #0]

        motors[i].stepsTaken = 0;
 80012b4:	4a92      	ldr	r2, [pc, #584]	@ (8001500 <initializeMotors+0x298>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2158      	movs	r1, #88	@ 0x58
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	4413      	add	r3, r2
 80012c0:	3344      	adds	r3, #68	@ 0x44
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 80012c6:	4a8e      	ldr	r2, [pc, #568]	@ (8001500 <initializeMotors+0x298>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2158      	movs	r1, #88	@ 0x58
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	3348      	adds	r3, #72	@ 0x48
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 80012d8:	4a89      	ldr	r2, [pc, #548]	@ (8001500 <initializeMotors+0x298>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2158      	movs	r1, #88	@ 0x58
 80012de:	fb01 f303 	mul.w	r3, r1, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	334c      	adds	r3, #76	@ 0x4c
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 80012ea:	4a85      	ldr	r2, [pc, #532]	@ (8001500 <initializeMotors+0x298>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2158      	movs	r1, #88	@ 0x58
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	3350      	adds	r3, #80	@ 0x50
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 80012fc:	4a80      	ldr	r2, [pc, #512]	@ (8001500 <initializeMotors+0x298>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2158      	movs	r1, #88	@ 0x58
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	3354      	adds	r3, #84	@ 0x54
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f040 8082 	bne.w	800141a <initializeMotors+0x1b2>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8001316:	4a7a      	ldr	r2, [pc, #488]	@ (8001500 <initializeMotors+0x298>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2158      	movs	r1, #88	@ 0x58
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	4413      	add	r3, r2
 8001322:	330c      	adds	r3, #12
 8001324:	4a78      	ldr	r2, [pc, #480]	@ (8001508 <initializeMotors+0x2a0>)
 8001326:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8001328:	4a75      	ldr	r2, [pc, #468]	@ (8001500 <initializeMotors+0x298>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2158      	movs	r1, #88	@ 0x58
 800132e:	fb01 f303 	mul.w	r3, r1, r3
 8001332:	4413      	add	r3, r2
 8001334:	3310      	adds	r3, #16
 8001336:	2208      	movs	r2, #8
 8001338:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 8;
 800133a:	4a71      	ldr	r2, [pc, #452]	@ (8001500 <initializeMotors+0x298>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2158      	movs	r1, #88	@ 0x58
 8001340:	fb01 f303 	mul.w	r3, r1, r3
 8001344:	4413      	add	r3, r2
 8001346:	3301      	adds	r3, #1
 8001348:	2208      	movs	r2, #8
 800134a:	701a      	strb	r2, [r3, #0]
        motors[i].stepsPerRevolution = 200;
 800134c:	4a6c      	ldr	r2, [pc, #432]	@ (8001500 <initializeMotors+0x298>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2158      	movs	r1, #88	@ 0x58
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	333c      	adds	r3, #60	@ 0x3c
 800135a:	22c8      	movs	r2, #200	@ 0xc8
 800135c:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = GPIOB;
 800135e:	4a68      	ldr	r2, [pc, #416]	@ (8001500 <initializeMotors+0x298>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2158      	movs	r1, #88	@ 0x58
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	4413      	add	r3, r2
 800136a:	3314      	adds	r3, #20
 800136c:	4a67      	ldr	r2, [pc, #412]	@ (800150c <initializeMotors+0x2a4>)
 800136e:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = GPIO_PIN_10;
 8001370:	4a63      	ldr	r2, [pc, #396]	@ (8001500 <initializeMotors+0x298>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2158      	movs	r1, #88	@ 0x58
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3318      	adds	r3, #24
 800137e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001382:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = GPIOF;
 8001384:	4a5e      	ldr	r2, [pc, #376]	@ (8001500 <initializeMotors+0x298>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2158      	movs	r1, #88	@ 0x58
 800138a:	fb01 f303 	mul.w	r3, r1, r3
 800138e:	4413      	add	r3, r2
 8001390:	331c      	adds	r3, #28
 8001392:	4a5f      	ldr	r2, [pc, #380]	@ (8001510 <initializeMotors+0x2a8>)
 8001394:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = GPIO_PIN_9;
 8001396:	4a5a      	ldr	r2, [pc, #360]	@ (8001500 <initializeMotors+0x298>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2158      	movs	r1, #88	@ 0x58
 800139c:	fb01 f303 	mul.w	r3, r1, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	3320      	adds	r3, #32
 80013a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a8:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = GPIOB;
 80013aa:	4a55      	ldr	r2, [pc, #340]	@ (8001500 <initializeMotors+0x298>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2158      	movs	r1, #88	@ 0x58
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	3324      	adds	r3, #36	@ 0x24
 80013b8:	4a54      	ldr	r2, [pc, #336]	@ (800150c <initializeMotors+0x2a4>)
 80013ba:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = GPIO_PIN_11;
 80013bc:	4a50      	ldr	r2, [pc, #320]	@ (8001500 <initializeMotors+0x298>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2158      	movs	r1, #88	@ 0x58
 80013c2:	fb01 f303 	mul.w	r3, r1, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	3328      	adds	r3, #40	@ 0x28
 80013ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013ce:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = GPIOD;
 80013d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001500 <initializeMotors+0x298>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2158      	movs	r1, #88	@ 0x58
 80013d6:	fb01 f303 	mul.w	r3, r1, r3
 80013da:	4413      	add	r3, r2
 80013dc:	332c      	adds	r3, #44	@ 0x2c
 80013de:	4a4d      	ldr	r2, [pc, #308]	@ (8001514 <initializeMotors+0x2ac>)
 80013e0:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = GPIO_PIN_1;
 80013e2:	4a47      	ldr	r2, [pc, #284]	@ (8001500 <initializeMotors+0x298>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2158      	movs	r1, #88	@ 0x58
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	3330      	adds	r3, #48	@ 0x30
 80013f0:	2202      	movs	r2, #2
 80013f2:	801a      	strh	r2, [r3, #0]
        motors[i].driver.index_port = GPIOA;
 80013f4:	4a42      	ldr	r2, [pc, #264]	@ (8001500 <initializeMotors+0x298>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2158      	movs	r1, #88	@ 0x58
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	3334      	adds	r3, #52	@ 0x34
 8001402:	4a45      	ldr	r2, [pc, #276]	@ (8001518 <initializeMotors+0x2b0>)
 8001404:	601a      	str	r2, [r3, #0]
        motors[i].driver.index_pin = GPIO_PIN_5;
 8001406:	4a3e      	ldr	r2, [pc, #248]	@ (8001500 <initializeMotors+0x298>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2158      	movs	r1, #88	@ 0x58
 800140c:	fb01 f303 	mul.w	r3, r1, r3
 8001410:	4413      	add	r3, r2
 8001412:	3338      	adds	r3, #56	@ 0x38
 8001414:	2220      	movs	r2, #32
 8001416:	801a      	strh	r2, [r3, #0]
 8001418:	e18d      	b.n	8001736 <initializeMotors+0x4ce>
        }


        else if(i == 1){
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d17d      	bne.n	800151c <initializeMotors+0x2b4>
        	// Configure motor 2 X-axis
            // TIMER configurations
            //motors[i].driver.htim = &htim3;				 // TIMER HANDLER
           // motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
            motors[i].driver.mstep = 2;
 8001420:	4a37      	ldr	r2, [pc, #220]	@ (8001500 <initializeMotors+0x298>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2158      	movs	r1, #88	@ 0x58
 8001426:	fb01 f303 	mul.w	r3, r1, r3
 800142a:	4413      	add	r3, r2
 800142c:	3301      	adds	r3, #1
 800142e:	2202      	movs	r2, #2
 8001430:	701a      	strb	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8001432:	4a33      	ldr	r2, [pc, #204]	@ (8001500 <initializeMotors+0x298>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2158      	movs	r1, #88	@ 0x58
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	4413      	add	r3, r2
 800143e:	333c      	adds	r3, #60	@ 0x3c
 8001440:	22c8      	movs	r2, #200	@ 0xc8
 8001442:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 8001444:	4a2e      	ldr	r2, [pc, #184]	@ (8001500 <initializeMotors+0x298>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2158      	movs	r1, #88	@ 0x58
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	3314      	adds	r3, #20
 8001452:	4a2e      	ldr	r2, [pc, #184]	@ (800150c <initializeMotors+0x2a4>)
 8001454:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_10;
 8001456:	4a2a      	ldr	r2, [pc, #168]	@ (8001500 <initializeMotors+0x298>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2158      	movs	r1, #88	@ 0x58
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	4413      	add	r3, r2
 8001462:	3318      	adds	r3, #24
 8001464:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001468:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOF;
 800146a:	4a25      	ldr	r2, [pc, #148]	@ (8001500 <initializeMotors+0x298>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2158      	movs	r1, #88	@ 0x58
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	4413      	add	r3, r2
 8001476:	331c      	adds	r3, #28
 8001478:	4a25      	ldr	r2, [pc, #148]	@ (8001510 <initializeMotors+0x2a8>)
 800147a:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_9;
 800147c:	4a20      	ldr	r2, [pc, #128]	@ (8001500 <initializeMotors+0x298>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2158      	movs	r1, #88	@ 0x58
 8001482:	fb01 f303 	mul.w	r3, r1, r3
 8001486:	4413      	add	r3, r2
 8001488:	3320      	adds	r3, #32
 800148a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800148e:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOB;
 8001490:	4a1b      	ldr	r2, [pc, #108]	@ (8001500 <initializeMotors+0x298>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2158      	movs	r1, #88	@ 0x58
 8001496:	fb01 f303 	mul.w	r3, r1, r3
 800149a:	4413      	add	r3, r2
 800149c:	3324      	adds	r3, #36	@ 0x24
 800149e:	4a1b      	ldr	r2, [pc, #108]	@ (800150c <initializeMotors+0x2a4>)
 80014a0:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_11;
 80014a2:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <initializeMotors+0x298>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2158      	movs	r1, #88	@ 0x58
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	3328      	adds	r3, #40	@ 0x28
 80014b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <initializeMotors+0x298>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2158      	movs	r1, #88	@ 0x58
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	332c      	adds	r3, #44	@ 0x2c
 80014c4:	4a13      	ldr	r2, [pc, #76]	@ (8001514 <initializeMotors+0x2ac>)
 80014c6:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <initializeMotors+0x298>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2158      	movs	r1, #88	@ 0x58
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	3330      	adds	r3, #48	@ 0x30
 80014d6:	2202      	movs	r2, #2
 80014d8:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 80014da:	4a09      	ldr	r2, [pc, #36]	@ (8001500 <initializeMotors+0x298>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2158      	movs	r1, #88	@ 0x58
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	3334      	adds	r3, #52	@ 0x34
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <initializeMotors+0x2b0>)
 80014ea:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <initializeMotors+0x298>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2158      	movs	r1, #88	@ 0x58
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	3338      	adds	r3, #56	@ 0x38
 80014fa:	2220      	movs	r2, #32
 80014fc:	801a      	strh	r2, [r3, #0]
 80014fe:	e11a      	b.n	8001736 <initializeMotors+0x4ce>
 8001500:	200000e0 	.word	0x200000e0
 8001504:	20000348 	.word	0x20000348
 8001508:	20000218 	.word	0x20000218
 800150c:	40020400 	.word	0x40020400
 8001510:	40021400 	.word	0x40021400
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40020000 	.word	0x40020000

        }


        else if(i == 2){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	f040 8083 	bne.w	800162a <initializeMotors+0x3c2>
        	// Configure motor 3 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 8001524:	4a8b      	ldr	r2, [pc, #556]	@ (8001754 <initializeMotors+0x4ec>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2158      	movs	r1, #88	@ 0x58
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	330c      	adds	r3, #12
 8001532:	4a89      	ldr	r2, [pc, #548]	@ (8001758 <initializeMotors+0x4f0>)
 8001534:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001536:	4a87      	ldr	r2, [pc, #540]	@ (8001754 <initializeMotors+0x4ec>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2158      	movs	r1, #88	@ 0x58
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	4413      	add	r3, r2
 8001542:	3310      	adds	r3, #16
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 2;
 8001548:	4a82      	ldr	r2, [pc, #520]	@ (8001754 <initializeMotors+0x4ec>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2158      	movs	r1, #88	@ 0x58
 800154e:	fb01 f303 	mul.w	r3, r1, r3
 8001552:	4413      	add	r3, r2
 8001554:	3301      	adds	r3, #1
 8001556:	2202      	movs	r2, #2
 8001558:	701a      	strb	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 800155a:	4a7e      	ldr	r2, [pc, #504]	@ (8001754 <initializeMotors+0x4ec>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2158      	movs	r1, #88	@ 0x58
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4413      	add	r3, r2
 8001566:	333c      	adds	r3, #60	@ 0x3c
 8001568:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800156c:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 800156e:	4a79      	ldr	r2, [pc, #484]	@ (8001754 <initializeMotors+0x4ec>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2158      	movs	r1, #88	@ 0x58
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	4413      	add	r3, r2
 800157a:	3314      	adds	r3, #20
 800157c:	4a77      	ldr	r2, [pc, #476]	@ (800175c <initializeMotors+0x4f4>)
 800157e:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_10;
 8001580:	4a74      	ldr	r2, [pc, #464]	@ (8001754 <initializeMotors+0x4ec>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2158      	movs	r1, #88	@ 0x58
 8001586:	fb01 f303 	mul.w	r3, r1, r3
 800158a:	4413      	add	r3, r2
 800158c:	3318      	adds	r3, #24
 800158e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001592:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOF;
 8001594:	4a6f      	ldr	r2, [pc, #444]	@ (8001754 <initializeMotors+0x4ec>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2158      	movs	r1, #88	@ 0x58
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	331c      	adds	r3, #28
 80015a2:	4a6f      	ldr	r2, [pc, #444]	@ (8001760 <initializeMotors+0x4f8>)
 80015a4:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_9;
 80015a6:	4a6b      	ldr	r2, [pc, #428]	@ (8001754 <initializeMotors+0x4ec>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2158      	movs	r1, #88	@ 0x58
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	3320      	adds	r3, #32
 80015b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b8:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOB;
 80015ba:	4a66      	ldr	r2, [pc, #408]	@ (8001754 <initializeMotors+0x4ec>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2158      	movs	r1, #88	@ 0x58
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	3324      	adds	r3, #36	@ 0x24
 80015c8:	4a64      	ldr	r2, [pc, #400]	@ (800175c <initializeMotors+0x4f4>)
 80015ca:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_11;
 80015cc:	4a61      	ldr	r2, [pc, #388]	@ (8001754 <initializeMotors+0x4ec>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2158      	movs	r1, #88	@ 0x58
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	3328      	adds	r3, #40	@ 0x28
 80015da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015de:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 80015e0:	4a5c      	ldr	r2, [pc, #368]	@ (8001754 <initializeMotors+0x4ec>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2158      	movs	r1, #88	@ 0x58
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	332c      	adds	r3, #44	@ 0x2c
 80015ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001764 <initializeMotors+0x4fc>)
 80015f0:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 80015f2:	4a58      	ldr	r2, [pc, #352]	@ (8001754 <initializeMotors+0x4ec>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2158      	movs	r1, #88	@ 0x58
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	3330      	adds	r3, #48	@ 0x30
 8001600:	2202      	movs	r2, #2
 8001602:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 8001604:	4a53      	ldr	r2, [pc, #332]	@ (8001754 <initializeMotors+0x4ec>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2158      	movs	r1, #88	@ 0x58
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	3334      	adds	r3, #52	@ 0x34
 8001612:	4a55      	ldr	r2, [pc, #340]	@ (8001768 <initializeMotors+0x500>)
 8001614:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 8001616:	4a4f      	ldr	r2, [pc, #316]	@ (8001754 <initializeMotors+0x4ec>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2158      	movs	r1, #88	@ 0x58
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	3338      	adds	r3, #56	@ 0x38
 8001624:	2220      	movs	r2, #32
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	e085      	b.n	8001736 <initializeMotors+0x4ce>

        }

        else if(i == 3){
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b03      	cmp	r3, #3
 800162e:	f040 8082 	bne.w	8001736 <initializeMotors+0x4ce>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 8001632:	4a48      	ldr	r2, [pc, #288]	@ (8001754 <initializeMotors+0x4ec>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2158      	movs	r1, #88	@ 0x58
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	330c      	adds	r3, #12
 8001640:	4a45      	ldr	r2, [pc, #276]	@ (8001758 <initializeMotors+0x4f0>)
 8001642:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001644:	4a43      	ldr	r2, [pc, #268]	@ (8001754 <initializeMotors+0x4ec>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2158      	movs	r1, #88	@ 0x58
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	3310      	adds	r3, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 2;
 8001656:	4a3f      	ldr	r2, [pc, #252]	@ (8001754 <initializeMotors+0x4ec>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2158      	movs	r1, #88	@ 0x58
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	3301      	adds	r3, #1
 8001664:	2202      	movs	r2, #2
 8001666:	701a      	strb	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 8001668:	4a3a      	ldr	r2, [pc, #232]	@ (8001754 <initializeMotors+0x4ec>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2158      	movs	r1, #88	@ 0x58
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	333c      	adds	r3, #60	@ 0x3c
 8001676:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800167a:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 800167c:	4a35      	ldr	r2, [pc, #212]	@ (8001754 <initializeMotors+0x4ec>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2158      	movs	r1, #88	@ 0x58
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	4413      	add	r3, r2
 8001688:	3314      	adds	r3, #20
 800168a:	4a34      	ldr	r2, [pc, #208]	@ (800175c <initializeMotors+0x4f4>)
 800168c:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_10;
 800168e:	4a31      	ldr	r2, [pc, #196]	@ (8001754 <initializeMotors+0x4ec>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2158      	movs	r1, #88	@ 0x58
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	3318      	adds	r3, #24
 800169c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a0:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOF;
 80016a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <initializeMotors+0x4ec>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2158      	movs	r1, #88	@ 0x58
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	331c      	adds	r3, #28
 80016b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001760 <initializeMotors+0x4f8>)
 80016b2:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_9;
 80016b4:	4a27      	ldr	r2, [pc, #156]	@ (8001754 <initializeMotors+0x4ec>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2158      	movs	r1, #88	@ 0x58
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	3320      	adds	r3, #32
 80016c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOB;
 80016c8:	4a22      	ldr	r2, [pc, #136]	@ (8001754 <initializeMotors+0x4ec>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2158      	movs	r1, #88	@ 0x58
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3324      	adds	r3, #36	@ 0x24
 80016d6:	4a21      	ldr	r2, [pc, #132]	@ (800175c <initializeMotors+0x4f4>)
 80016d8:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_11;
 80016da:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <initializeMotors+0x4ec>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2158      	movs	r1, #88	@ 0x58
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3328      	adds	r3, #40	@ 0x28
 80016e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016ec:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 80016ee:	4a19      	ldr	r2, [pc, #100]	@ (8001754 <initializeMotors+0x4ec>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2158      	movs	r1, #88	@ 0x58
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	332c      	adds	r3, #44	@ 0x2c
 80016fc:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <initializeMotors+0x4fc>)
 80016fe:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 8001700:	4a14      	ldr	r2, [pc, #80]	@ (8001754 <initializeMotors+0x4ec>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2158      	movs	r1, #88	@ 0x58
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	3330      	adds	r3, #48	@ 0x30
 800170e:	2202      	movs	r2, #2
 8001710:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <initializeMotors+0x4ec>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2158      	movs	r1, #88	@ 0x58
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	3334      	adds	r3, #52	@ 0x34
 8001720:	4a11      	ldr	r2, [pc, #68]	@ (8001768 <initializeMotors+0x500>)
 8001722:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 8001724:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <initializeMotors+0x4ec>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2158      	movs	r1, #88	@ 0x58
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3338      	adds	r3, #56	@ 0x38
 8001732:	2220      	movs	r2, #32
 8001734:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f77f ad98 	ble.w	8001274 <initializeMotors+0xc>


    }


}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200000e0 	.word	0x200000e0
 8001758:	20000264 	.word	0x20000264
 800175c:	40020400 	.word	0x40020400
 8001760:	40021400 	.word	0x40021400
 8001764:	40020c00 	.word	0x40020c00
 8001768:	40020000 	.word	0x40020000

0800176c <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	7852      	ldrb	r2, [r2, #1]
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	641a      	str	r2, [r3, #64]	@ 0x40
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40
    axis->stepPerUnit = totalStepsPerRevolution / circumference;;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f103 0014 	add.w	r0, r3, #20
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <initializeAxis+0x84>)
 80017c6:	210a      	movs	r1, #10
 80017c8:	f007 f8d0 	bl	800896c <sniprintf>
    if (motor2 != NULL) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <initializeAxis+0x7c>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f103 001e 	add.w	r0, r3, #30
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	4a03      	ldr	r2, [pc, #12]	@ (80017f0 <initializeAxis+0x84>)
 80017e2:	210a      	movs	r1, #10
 80017e4:	f007 f8c2 	bl	800896c <sniprintf>
    }
}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	08009870 	.word	0x08009870

080017f4 <initializeSystem>:

void initializeSystem(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af02      	add	r7, sp, #8
    // X-axis
    initializeAxis(&axes[0], &motors[0],&motors[1], 8, "X");
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <initializeSystem+0x2c>)
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2308      	movs	r3, #8
 8001800:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <initializeSystem+0x30>)
 8001802:	4909      	ldr	r1, [pc, #36]	@ (8001828 <initializeSystem+0x34>)
 8001804:	4809      	ldr	r0, [pc, #36]	@ (800182c <initializeSystem+0x38>)
 8001806:	f7ff ffb1 	bl	800176c <initializeAxis>
    initializeAxis(&axes[1], &motors[2],&motors[3], 40, "Y");
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <initializeSystem+0x3c>)
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2328      	movs	r3, #40	@ 0x28
 8001810:	4a08      	ldr	r2, [pc, #32]	@ (8001834 <initializeSystem+0x40>)
 8001812:	4909      	ldr	r1, [pc, #36]	@ (8001838 <initializeSystem+0x44>)
 8001814:	4809      	ldr	r0, [pc, #36]	@ (800183c <initializeSystem+0x48>)
 8001816:	f7ff ffa9 	bl	800176c <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[0], &motors[2], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	08009878 	.word	0x08009878
 8001824:	20000138 	.word	0x20000138
 8001828:	200000e0 	.word	0x200000e0
 800182c:	20000138 	.word	0x20000138
 8001830:	0800987c 	.word	0x0800987c
 8001834:	200001e8 	.word	0x200001e8
 8001838:	20000190 	.word	0x20000190
 800183c:	20000160 	.word	0x20000160

08001840 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	213c      	movs	r1, #60	@ 0x3c
 800184e:	4618      	mov	r0, r3
 8001850:	f004 fbea 	bl	8006028 <HAL_TIM_Encoder_Start>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <IsSensorTriggered>:
#include "extras.h"
#include "LCD.h"
#include "encoder.h"

bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin, uint32_t delayMs)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	460b      	mov	r3, r1
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	817b      	strh	r3, [r7, #10]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 800186a:	897b      	ldrh	r3, [r7, #10]
 800186c:	4619      	mov	r1, r3
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f002 f82a 	bl	80038c8 <HAL_GPIO_ReadPin>
 8001874:	4603      	mov	r3, r0
 8001876:	75fb      	strb	r3, [r7, #23]

    // Small delay to avoid button bounce or noise
    HAL_Delay(delayMs);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f001 f939 	bl	8002af0 <HAL_Delay>

    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise
    return (sensor_state == GPIO_PIN_SET);
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	2b01      	cmp	r3, #1
 8001882:	bf0c      	ite	eq
 8001884:	2301      	moveq	r3, #1
 8001886:	2300      	movne	r3, #0
 8001888:	b2db      	uxtb	r3, r3
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018a4:	d102      	bne.n	80018ac <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Disable further interrupts for the button

        // Reset the motor steps and trigger motion
    	Flag = 1;
 80018a6:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <HAL_GPIO_EXTI_Callback+0x24>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]


        // Re-enable the interrupt after the motion is complete (done in a later step)

}
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	20000998 	.word	0x20000998

080018bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c0:	f001 f8b9 	bl	8002a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c4:	f000 f876 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c8:	f000 fb4e 	bl	8001f68 <MX_GPIO_Init>
  MX_DMA_Init();
 80018cc:	f000 fb2e 	bl	8001f2c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018d0:	f000 face 	bl	8001e70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80018d4:	f000 fafc 	bl	8001ed0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 80018d8:	f000 fa64 	bl	8001da4 <MX_TIM7_Init>
  MX_I2C1_Init();
 80018dc:	f000 f8d8 	bl	8001a90 <MX_I2C1_Init>
  MX_TIM4_Init();
 80018e0:	f000 fa0a 	bl	8001cf8 <MX_TIM4_Init>
  MX_TIM2_Init();
 80018e4:	f000 f952 	bl	8001b8c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80018e8:	f000 fa92 	bl	8001e10 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80018ec:	f000 f910 	bl	8001b10 <MX_SPI2_Init>
  MX_FATFS_Init();
 80018f0:	f006 ff76 	bl	80087e0 <MX_FATFS_Init>
  MX_TIM3_Init();
 80018f4:	f000 f9a4 	bl	8001c40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  initializeMotors();
 80018f8:	f7ff fcb6 	bl	8001268 <initializeMotors>
  initializeSystem();
 80018fc:	f7ff ff7a 	bl	80017f4 <initializeSystem>
   ENC_Init(&henc1);
 8001900:	4827      	ldr	r0, [pc, #156]	@ (80019a0 <main+0xe4>)
 8001902:	f7ff ff9d 	bl	8001840 <ENC_Init>
   //HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);

    //TMC2209_enable_PDNuart(&motors[0]);

    //TMC2209_read_ifcnt(&motors[0]);
    configureGCONF(&motors[0]);
 8001906:	4827      	ldr	r0, [pc, #156]	@ (80019a4 <main+0xe8>)
 8001908:	f7ff fc7a 	bl	8001200 <configureGCONF>
    TMC2209_SetSpreadCycle(&motors[0], 1);
 800190c:	2101      	movs	r1, #1
 800190e:	4825      	ldr	r0, [pc, #148]	@ (80019a4 <main+0xe8>)
 8001910:	f7ff fac6 	bl	8000ea0 <TMC2209_SetSpreadCycle>
    //TMC2209_read_ifcnt(&motors[0]);
    //TMC2209_EnableDriver(&motors[0], 1);
    HAL_Delay(2);
 8001914:	2002      	movs	r0, #2
 8001916:	f001 f8eb 	bl	8002af0 <HAL_Delay>
    //TMC2209_configureSpreadCycle(&motors[0], 5, 2, 10, 13);

   TMC2209_read_ifcnt(&motors[0]);
 800191a:	4822      	ldr	r0, [pc, #136]	@ (80019a4 <main+0xe8>)
 800191c:	f7ff fb12 	bl	8000f44 <TMC2209_read_ifcnt>
    HAL_Delay(2);
 8001920:	2002      	movs	r0, #2
 8001922:	f001 f8e5 	bl	8002af0 <HAL_Delay>
    setMicrosteppingResolution(&motors[0], 16);
 8001926:	2110      	movs	r1, #16
 8001928:	481e      	ldr	r0, [pc, #120]	@ (80019a4 <main+0xe8>)
 800192a:	f7ff fb37 	bl	8000f9c <setMicrosteppingResolution>
    HAL_Delay(2);
 800192e:	2002      	movs	r0, #2
 8001930:	f001 f8de 	bl	8002af0 <HAL_Delay>

    checkMicrosteppingResolution(&motors[0]);
 8001934:	481b      	ldr	r0, [pc, #108]	@ (80019a4 <main+0xe8>)
 8001936:	f7ff fbfb 	bl	8001130 <checkMicrosteppingResolution>
    HAL_Delay(2);
 800193a:	2002      	movs	r0, #2
 800193c:	f001 f8d8 	bl	8002af0 <HAL_Delay>
  //  TMC2209_SetSpreadCycle(&motors[0], 1);
   // HAL_Delay(2);
   // TMC2209_setStallGuardThreshold(&motors[0], 10);
    HAL_Delay(2);
 8001940:	2002      	movs	r0, #2
 8001942:	f001 f8d5 	bl	8002af0 <HAL_Delay>
    TMC2209_SetDirection(&motors[0], dir);
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <main+0xec>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <main+0xe8>)
 800194e:	f7ff f82f 	bl	80009b0 <TMC2209_SetDirection>
    TMC2209_SetSpeed(&motors[0], 16000);
 8001952:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001956:	4813      	ldr	r0, [pc, #76]	@ (80019a4 <main+0xe8>)
 8001958:	f7ff f84e 	bl	80009f8 <TMC2209_SetSpeed>
  //  testIHOLDIRUN(&motors[0], 31, 16, 8);
  //  HAL_Delay(2);



   LCD_I2C_Clear(&hlcd3);
 800195c:	4813      	ldr	r0, [pc, #76]	@ (80019ac <main+0xf0>)
 800195e:	f7fe ff39 	bl	80007d4 <LCD_I2C_Clear>
   LCD_I2C_Init(&hlcd3);
 8001962:	4812      	ldr	r0, [pc, #72]	@ (80019ac <main+0xf0>)
 8001964:	f7fe feb8 	bl	80006d8 <LCD_I2C_Init>
   LCD_I2C_SetCursor(&hlcd3, 3, 3);
 8001968:	2203      	movs	r2, #3
 800196a:	2103      	movs	r1, #3
 800196c:	480f      	ldr	r0, [pc, #60]	@ (80019ac <main+0xf0>)
 800196e:	f7fe ff17 	bl	80007a0 <LCD_I2C_SetCursor>
   LCD_I2C_DisplaySequentialGlossyText(&hlcd3,1);
 8001972:	2101      	movs	r1, #1
 8001974:	480d      	ldr	r0, [pc, #52]	@ (80019ac <main+0xf0>)
 8001976:	f7fe ff5f 	bl	8000838 <LCD_I2C_DisplaySequentialGlossyText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   //sd_card_read_gcode();
  while (1){

      if (Flag) // Adjust based on button state
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <main+0xf4>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0fa      	beq.n	800197a <main+0xbe>
      {
    	         HAL_Delay(200);
 8001984:	20c8      	movs	r0, #200	@ 0xc8
 8001986:	f001 f8b3 	bl	8002af0 <HAL_Delay>
    	         CarriageHoming(&motors[0]);
 800198a:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <main+0xe8>)
 800198c:	f7ff fc4c 	bl	8001228 <CarriageHoming>

    	         //TMC2209_Step(&motors[0], 3200);
    	         HAL_Delay(2000);
 8001990:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001994:	f001 f8ac 	bl	8002af0 <HAL_Delay>

    	  	  	 Flag = 0;
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <main+0xf4>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
      if (Flag) // Adjust based on button state
 800199e:	e7ec      	b.n	800197a <main+0xbe>
 80019a0:	20000000 	.word	0x20000000
 80019a4:	200000e0 	.word	0x200000e0
 80019a8:	2000002c 	.word	0x2000002c
 80019ac:	20000018 	.word	0x20000018
 80019b0:	20000998 	.word	0x20000998

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	@ 0x50
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	2230      	movs	r2, #48	@ 0x30
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f007 f826 	bl	8008a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019d8:	f002 fd60 	bl	800449c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <SystemClock_Config+0xd4>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a29      	ldr	r2, [pc, #164]	@ (8001a88 <SystemClock_Config+0xd4>)
 80019e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e8:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <SystemClock_Config+0xd4>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f4:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <SystemClock_Config+0xd8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a24      	ldr	r2, [pc, #144]	@ (8001a8c <SystemClock_Config+0xd8>)
 80019fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <SystemClock_Config+0xd8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a10:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a16:	2302      	movs	r3, #2
 8001a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a20:	2304      	movs	r3, #4
 8001a22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001a24:	23d8      	movs	r3, #216	@ 0xd8
 8001a26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001a2c:	2309      	movs	r3, #9
 8001a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a30:	f107 0320 	add.w	r3, r7, #32
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fd91 	bl	800455c <HAL_RCC_OscConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a40:	f000 fbe6 	bl	8002210 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a44:	f002 fd3a 	bl	80044bc <HAL_PWREx_EnableOverDrive>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a4e:	f000 fbdf 	bl	8002210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a52:	230f      	movs	r3, #15
 8001a54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a56:	2302      	movs	r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2107      	movs	r1, #7
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 f817 	bl	8004aa4 <HAL_RCC_ClockConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001a7c:	f000 fbc8 	bl	8002210 <Error_Handler>
  }
}
 8001a80:	bf00      	nop
 8001a82:	3750      	adds	r7, #80	@ 0x50
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000

08001a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001a96:	4a1c      	ldr	r2, [pc, #112]	@ (8001b08 <MX_I2C1_Init+0x78>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b0c <MX_I2C1_Init+0x7c>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001acc:	f001 ff46 	bl	800395c <HAL_I2C_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ad6:	f000 fb9b 	bl	8002210 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001ade:	f002 fb0b 	bl	80040f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f000 fb92 	bl	8002210 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <MX_I2C1_Init+0x74>)
 8001af0:	f002 fb4d 	bl	800418e <HAL_I2CEx_ConfigDigitalFilter>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001afa:	f000 fb89 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000160 	.word	0x20000160
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	6000030d 	.word	0x6000030d

08001b10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b16:	4a1c      	ldr	r2, [pc, #112]	@ (8001b88 <MX_SPI2_Init+0x78>)
 8001b18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b28:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b2a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b46:	2238      	movs	r2, #56	@ 0x38
 8001b48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b5e:	2207      	movs	r2, #7
 8001b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_SPI2_Init+0x74>)
 8001b70:	f003 fdae 	bl	80056d0 <HAL_SPI_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b7a:	f000 fb49 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200001b4 	.word	0x200001b4
 8001b88:	40003800 	.word	0x40003800

08001b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]
 8001bae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001bb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 8001bb8:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001bba:	22d7      	movs	r2, #215	@ 0xd7
 8001bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001bc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bd8:	4818      	ldr	r0, [pc, #96]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001bda:	f003 ff12 	bl	8005a02 <HAL_TIM_PWM_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001be4:	f000 fb14 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4811      	ldr	r0, [pc, #68]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001bf8:	f005 f818 	bl	8006c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001c02:	f000 fb05 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c06:	2360      	movs	r3, #96	@ 0x60
 8001c08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001c0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001c20:	f004 fb98 	bl	8006354 <HAL_TIM_PWM_ConfigChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001c2a:	f000 faf1 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c2e:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <MX_TIM2_Init+0xb0>)
 8001c30:	f000 fc7e 	bl	8002530 <HAL_TIM_MspPostInit>

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	@ 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000218 	.word	0x20000218

08001c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c52:	463b      	mov	r3, r7
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	615a      	str	r2, [r3, #20]
 8001c62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c64:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001c66:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <MX_TIM3_Init+0xb4>)
 8001c68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001c6c:	22d7      	movs	r2, #215	@ 0xd7
 8001c6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001c78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c8a:	4819      	ldr	r0, [pc, #100]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001c8c:	f003 feb9 	bl	8005a02 <HAL_TIM_PWM_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c96:	f000 fabb 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4811      	ldr	r0, [pc, #68]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001caa:	f004 ffbf 	bl	8006c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001cb4:	f000 faac 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb8:	2360      	movs	r3, #96	@ 0x60
 8001cba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001cbc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001cd2:	f004 fb3f 	bl	8006354 <HAL_TIM_PWM_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001cdc:	f000 fa98 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ce0:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <MX_TIM3_Init+0xb0>)
 8001ce2:	f000 fc25 	bl	8002530 <HAL_TIM_MspPostInit>

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	@ 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000264 	.word	0x20000264
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	@ 0x30
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	2224      	movs	r2, #36	@ 0x24
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 fe84 	bl	8008a14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d16:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <MX_TIM4_Init+0xa4>)
 8001d18:	4a21      	ldr	r2, [pc, #132]	@ (8001da0 <MX_TIM4_Init+0xa8>)
 8001d1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <MX_TIM4_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <MX_TIM4_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8001d28:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <MX_TIM4_Init+0xa4>)
 8001d2a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001d2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <MX_TIM4_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <MX_TIM4_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	480d      	ldr	r0, [pc, #52]	@ (8001d9c <MX_TIM4_Init+0xa4>)
 8001d68:	f004 f8b8 	bl	8005edc <HAL_TIM_Encoder_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d72:	f000 fa4d 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	@ (8001d9c <MX_TIM4_Init+0xa4>)
 8001d84:	f004 ff52 	bl	8006c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d8e:	f000 fa3f 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3730      	adds	r7, #48	@ 0x30
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200002b0 	.word	0x200002b0
 8001da0:	40000800 	.word	0x40000800

08001da4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_TIM7_Init+0x64>)
 8001db6:	4a15      	ldr	r2, [pc, #84]	@ (8001e0c <MX_TIM7_Init+0x68>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <MX_TIM7_Init+0x64>)
 8001dbc:	22d7      	movs	r2, #215	@ 0xd7
 8001dbe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <MX_TIM7_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <MX_TIM7_Init+0x64>)
 8001dc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dcc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <MX_TIM7_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <MX_TIM7_Init+0x64>)
 8001dd6:	f003 fd26 	bl	8005826 <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001de0:	f000 fa16 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_TIM7_Init+0x64>)
 8001df2:	f004 ff1b 	bl	8006c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001dfc:	f000 fa08 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200002fc 	.word	0x200002fc
 8001e0c:	40001400 	.word	0x40001400

08001e10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e16:	4a15      	ldr	r2, [pc, #84]	@ (8001e6c <MX_USART2_UART_Init+0x5c>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <MX_USART2_UART_Init+0x58>)
 8001e54:	f004 ff96 	bl	8006d84 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e5e:	f000 f9d7 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000348 	.word	0x20000348
 8001e6c:	40004400 	.word	0x40004400

08001e70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001e76:	4a15      	ldr	r2, [pc, #84]	@ (8001ecc <MX_USART3_UART_Init+0x5c>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <MX_USART3_UART_Init+0x58>)
 8001eb4:	f004 ff66 	bl	8006d84 <HAL_UART_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ebe:	f000 f9a7 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200003d0 	.word	0x200003d0
 8001ecc:	40004800 	.word	0x40004800

08001ed0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ed6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001eda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ede:	2206      	movs	r2, #6
 8001ee0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f06:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f12:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f14:	f002 f987 	bl	8004226 <HAL_PCD_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f1e:	f000 f977 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200004b8 	.word	0x200004b8

08001f2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f32:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <MX_DMA_Init+0x38>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a0b      	ldr	r2, [pc, #44]	@ (8001f64 <MX_DMA_Init+0x38>)
 8001f38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <MX_DMA_Init+0x38>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2010      	movs	r0, #16
 8001f50:	f000 fecd 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f54:	2010      	movs	r0, #16
 8001f56:	f000 fee6 	bl	8002d26 <HAL_NVIC_EnableIRQ>

}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	@ 0x30
 8001f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	4b9d      	ldr	r3, [pc, #628]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a9c      	ldr	r2, [pc, #624]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b9a      	ldr	r3, [pc, #616]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f96:	4b97      	ldr	r3, [pc, #604]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a96      	ldr	r2, [pc, #600]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001f9c:	f043 0320 	orr.w	r3, r3, #32
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b94      	ldr	r3, [pc, #592]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fae:	4b91      	ldr	r3, [pc, #580]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a90      	ldr	r2, [pc, #576]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b8e      	ldr	r3, [pc, #568]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a8a      	ldr	r2, [pc, #552]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b88      	ldr	r3, [pc, #544]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b85      	ldr	r3, [pc, #532]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a84      	ldr	r2, [pc, #528]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b82      	ldr	r3, [pc, #520]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a7e      	ldr	r2, [pc, #504]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b7c      	ldr	r3, [pc, #496]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800200e:	4b79      	ldr	r3, [pc, #484]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	4a78      	ldr	r2, [pc, #480]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 8002014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002018:	6313      	str	r3, [r2, #48]	@ 0x30
 800201a:	4b76      	ldr	r3, [pc, #472]	@ (80021f4 <MX_GPIO_Init+0x28c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800202c:	4872      	ldr	r0, [pc, #456]	@ (80021f8 <MX_GPIO_Init+0x290>)
 800202e:	f001 fc63 	bl	80038f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 6109 	mov.w	r1, #2192	@ 0x890
 8002038:	4870      	ldr	r0, [pc, #448]	@ (80021fc <MX_GPIO_Init+0x294>)
 800203a:	f001 fc5d 	bl	80038f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_cs_GPIO_Port, SPI_cs_Pin, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002044:	486e      	ldr	r0, [pc, #440]	@ (8002200 <MX_GPIO_Init+0x298>)
 8002046:	f001 fc57 	bl	80038f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2140      	movs	r1, #64	@ 0x40
 800204e:	486d      	ldr	r0, [pc, #436]	@ (8002204 <MX_GPIO_Init+0x29c>)
 8002050:	f001 fc52 	bl	80038f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800205e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4867      	ldr	r0, [pc, #412]	@ (8002208 <MX_GPIO_Init+0x2a0>)
 800206c:	f001 fa80 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002070:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	485b      	ldr	r0, [pc, #364]	@ (80021f8 <MX_GPIO_Init+0x290>)
 800208a:	f001 fa71 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 800208e:	2302      	movs	r3, #2
 8002090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800209e:	230b      	movs	r3, #11
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	4857      	ldr	r0, [pc, #348]	@ (8002208 <MX_GPIO_Init+0x2a0>)
 80020aa:	f001 fa61 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80020ae:	2306      	movs	r3, #6
 80020b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020be:	230b      	movs	r3, #11
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4850      	ldr	r0, [pc, #320]	@ (800220c <MX_GPIO_Init+0x2a4>)
 80020ca:	f001 fa51 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020ce:	2308      	movs	r3, #8
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	484a      	ldr	r0, [pc, #296]	@ (800220c <MX_GPIO_Init+0x2a4>)
 80020e2:	f001 fa45 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor1IndexPin_Pin */
  GPIO_InitStruct.Pin = Motor1IndexPin_Pin;
 80020e6:	2320      	movs	r3, #32
 80020e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Motor1IndexPin_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	4844      	ldr	r0, [pc, #272]	@ (800220c <MX_GPIO_Init+0x2a4>)
 80020fa:	f001 fa39 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020fe:	230e      	movs	r3, #14
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	483a      	ldr	r0, [pc, #232]	@ (80021fc <MX_GPIO_Init+0x294>)
 8002112:	f001 fa2d 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop1_Pin PF13 */
  GPIO_InitStruct.Pin = EndStop1_Pin|GPIO_PIN_13;
 8002116:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800211a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4619      	mov	r1, r3
 800212a:	4833      	ldr	r0, [pc, #204]	@ (80021f8 <MX_GPIO_Init+0x290>)
 800212c:	f001 fa20 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4|LD2_Pin;
 8002130:	f44f 6309 	mov.w	r3, #2192	@ 0x890
 8002134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002136:	2301      	movs	r3, #1
 8002138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	482c      	ldr	r0, [pc, #176]	@ (80021fc <MX_GPIO_Init+0x294>)
 800214a:	f001 fa11 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_cs_Pin */
  GPIO_InitStruct.Pin = SPI_cs_Pin;
 800214e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002154:	2301      	movs	r3, #1
 8002156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002158:	2301      	movs	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_cs_GPIO_Port, &GPIO_InitStruct);
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4619      	mov	r1, r3
 8002166:	4826      	ldr	r0, [pc, #152]	@ (8002200 <MX_GPIO_Init+0x298>)
 8002168:	f001 fa02 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800216c:	2340      	movs	r3, #64	@ 0x40
 800216e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	4619      	mov	r1, r3
 8002182:	4820      	ldr	r0, [pc, #128]	@ (8002204 <MX_GPIO_Init+0x29c>)
 8002184:	f001 f9f4 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	4619      	mov	r1, r3
 800219a:	481a      	ldr	r0, [pc, #104]	@ (8002204 <MX_GPIO_Init+0x29c>)
 800219c:	f001 f9e8 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4813      	ldr	r0, [pc, #76]	@ (8002200 <MX_GPIO_Init+0x298>)
 80021b4:	f001 f9dc 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021ca:	230b      	movs	r3, #11
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	480b      	ldr	r0, [pc, #44]	@ (8002204 <MX_GPIO_Init+0x29c>)
 80021d6:	f001 f9cb 	bl	8003570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2028      	movs	r0, #40	@ 0x28
 80021e0:	f000 fd85 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021e4:	2028      	movs	r0, #40	@ 0x28
 80021e6:	f000 fd9e 	bl	8002d26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ea:	bf00      	nop
 80021ec:	3730      	adds	r7, #48	@ 0x30
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40021400 	.word	0x40021400
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021800 	.word	0x40021800
 8002208:	40020800 	.word	0x40020800
 800220c:	40020000 	.word	0x40020000

08002210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002214:	b672      	cpsid	i
}
 8002216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <Error_Handler+0x8>

0800221c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <HAL_MspInit+0x44>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	4a0e      	ldr	r2, [pc, #56]	@ (8002260 <HAL_MspInit+0x44>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	@ 0x40
 800222e:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <HAL_MspInit+0x44>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_MspInit+0x44>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <HAL_MspInit+0x44>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_MspInit+0x44>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0aa      	sub	sp, #168	@ 0xa8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	2284      	movs	r2, #132	@ 0x84
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f006 fbc5 	bl	8008a14 <memset>
  if(hi2c->Instance==I2C1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <HAL_I2C_MspInit+0xb4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d13c      	bne.n	800230e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002294:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002298:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800229a:	2300      	movs	r3, #0
 800229c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fe24 	bl	8004ef0 <HAL_RCCEx_PeriphCLKConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022ae:	f7ff ffaf 	bl	8002210 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <HAL_I2C_MspInit+0xb8>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a19      	ldr	r2, [pc, #100]	@ (800231c <HAL_I2C_MspInit+0xb8>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b17      	ldr	r3, [pc, #92]	@ (800231c <HAL_I2C_MspInit+0xb8>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d2:	2312      	movs	r3, #18
 80022d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022e4:	2304      	movs	r3, #4
 80022e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80022ee:	4619      	mov	r1, r3
 80022f0:	480b      	ldr	r0, [pc, #44]	@ (8002320 <HAL_I2C_MspInit+0xbc>)
 80022f2:	f001 f93d 	bl	8003570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_I2C_MspInit+0xb8>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <HAL_I2C_MspInit+0xb8>)
 80022fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002300:	6413      	str	r3, [r2, #64]	@ 0x40
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_I2C_MspInit+0xb8>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800230e:	bf00      	nop
 8002310:	37a8      	adds	r7, #168	@ 0xa8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40005400 	.word	0x40005400
 800231c:	40023800 	.word	0x40023800
 8002320:	40020400 	.word	0x40020400

08002324 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a25      	ldr	r2, [pc, #148]	@ (80023d8 <HAL_SPI_MspInit+0xb4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d143      	bne.n	80023ce <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002346:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a24      	ldr	r2, [pc, #144]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a1e      	ldr	r2, [pc, #120]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002376:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	4a18      	ldr	r2, [pc, #96]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6313      	str	r3, [r2, #48]	@ 0x30
 8002382:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <HAL_SPI_MspInit+0xb8>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800238e:	230c      	movs	r3, #12
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002396:	2301      	movs	r3, #1
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800239e:	2305      	movs	r3, #5
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	480d      	ldr	r0, [pc, #52]	@ (80023e0 <HAL_SPI_MspInit+0xbc>)
 80023aa:	f001 f8e1 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023ae:	2308      	movs	r3, #8
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023be:	2305      	movs	r3, #5
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	4806      	ldr	r0, [pc, #24]	@ (80023e4 <HAL_SPI_MspInit+0xc0>)
 80023ca:	f001 f8d1 	bl	8003570 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	@ 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40003800 	.word	0x40003800
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00

080023e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f8:	d114      	bne.n	8002424 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_TIM_PWM_MspInit+0x68>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <HAL_TIM_PWM_MspInit+0x68>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_TIM_PWM_MspInit+0x68>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	201c      	movs	r0, #28
 8002418:	f000 fc69 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800241c:	201c      	movs	r0, #28
 800241e:	f000 fc82 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002422:	e010      	b.n	8002446 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <HAL_TIM_PWM_MspInit+0x6c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10b      	bne.n	8002446 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <HAL_TIM_PWM_MspInit+0x68>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <HAL_TIM_PWM_MspInit+0x68>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_TIM_PWM_MspInit+0x68>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40000400 	.word	0x40000400

08002458 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1b      	ldr	r2, [pc, #108]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d130      	bne.n	80024dc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800247a:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x90>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a1a      	ldr	r2, [pc, #104]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x90>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x90>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002492:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x90>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x90>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x90>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 80024aa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024bc:	2302      	movs	r3, #2
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4809      	ldr	r0, [pc, #36]	@ (80024ec <HAL_TIM_Encoder_MspInit+0x94>)
 80024c8:	f001 f852 	bl	8003570 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	201e      	movs	r0, #30
 80024d2:	f000 fc0c 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024d6:	201e      	movs	r0, #30
 80024d8:	f000 fc25 	bl	8002d26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80024dc:	bf00      	nop
 80024de:	3728      	adds	r7, #40	@ 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020c00 	.word	0x40020c00

080024f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <HAL_TIM_Base_MspInit+0x38>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10b      	bne.n	800251a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002502:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <HAL_TIM_Base_MspInit+0x3c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	4a09      	ldr	r2, [pc, #36]	@ (800252c <HAL_TIM_Base_MspInit+0x3c>)
 8002508:	f043 0320 	orr.w	r3, r3, #32
 800250c:	6413      	str	r3, [r2, #64]	@ 0x40
 800250e:	4b07      	ldr	r3, [pc, #28]	@ (800252c <HAL_TIM_Base_MspInit+0x3c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40001400 	.word	0x40001400
 800252c:	40023800 	.word	0x40023800

08002530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002550:	d11d      	bne.n	800258e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_TIM_MspPostInit+0xa8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a20      	ldr	r2, [pc, #128]	@ (80025d8 <HAL_TIM_MspPostInit+0xa8>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <HAL_TIM_MspPostInit+0xa8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800256a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800256e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800257c:	2301      	movs	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	4619      	mov	r1, r3
 8002586:	4815      	ldr	r0, [pc, #84]	@ (80025dc <HAL_TIM_MspPostInit+0xac>)
 8002588:	f000 fff2 	bl	8003570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800258c:	e020      	b.n	80025d0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a13      	ldr	r2, [pc, #76]	@ (80025e0 <HAL_TIM_MspPostInit+0xb0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d11b      	bne.n	80025d0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_TIM_MspPostInit+0xa8>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	4a0e      	ldr	r2, [pc, #56]	@ (80025d8 <HAL_TIM_MspPostInit+0xa8>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <HAL_TIM_MspPostInit+0xa8>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025b0:	2340      	movs	r3, #64	@ 0x40
 80025b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025c0:	2302      	movs	r3, #2
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	4806      	ldr	r0, [pc, #24]	@ (80025e4 <HAL_TIM_MspPostInit+0xb4>)
 80025cc:	f000 ffd0 	bl	8003570 <HAL_GPIO_Init>
}
 80025d0:	bf00      	nop
 80025d2:	3728      	adds	r7, #40	@ 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40000400 	.word	0x40000400
 80025e4:	40020000 	.word	0x40020000

080025e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0ac      	sub	sp, #176	@ 0xb0
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002600:	f107 0318 	add.w	r3, r7, #24
 8002604:	2284      	movs	r2, #132	@ 0x84
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f006 fa03 	bl	8008a14 <memset>
  if(huart->Instance==USART2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5d      	ldr	r2, [pc, #372]	@ (8002788 <HAL_UART_MspInit+0x1a0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d171      	bne.n	80026fc <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800261c:	2300      	movs	r3, #0
 800261e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002620:	f107 0318 	add.w	r3, r7, #24
 8002624:	4618      	mov	r0, r3
 8002626:	f002 fc63 	bl	8004ef0 <HAL_RCCEx_PeriphCLKConfig>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002630:	f7ff fdee 	bl	8002210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002634:	4b55      	ldr	r3, [pc, #340]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	4a54      	ldr	r2, [pc, #336]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 800263a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002640:	4b52      	ldr	r3, [pc, #328]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800264c:	4b4f      	ldr	r3, [pc, #316]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	4a4e      	ldr	r2, [pc, #312]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6313      	str	r3, [r2, #48]	@ 0x30
 8002658:	4b4c      	ldr	r3, [pc, #304]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002664:	2360      	movs	r3, #96	@ 0x60
 8002666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800267c:	2307      	movs	r3, #7
 800267e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002682:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002686:	4619      	mov	r1, r3
 8002688:	4841      	ldr	r0, [pc, #260]	@ (8002790 <HAL_UART_MspInit+0x1a8>)
 800268a:	f000 ff71 	bl	8003570 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 8002690:	4a41      	ldr	r2, [pc, #260]	@ (8002798 <HAL_UART_MspInit+0x1b0>)
 8002692:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002694:	4b3f      	ldr	r3, [pc, #252]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 8002696:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800269a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800269c:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b0:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b6:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026bc:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026c2:	4b34      	ldr	r3, [pc, #208]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c8:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026ce:	4831      	ldr	r0, [pc, #196]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026d0:	f000 fb44 	bl	8002d5c <HAL_DMA_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80026da:	f7ff fd99 	bl	8002210 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026e2:	675a      	str	r2, [r3, #116]	@ 0x74
 80026e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002794 <HAL_UART_MspInit+0x1ac>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	2026      	movs	r0, #38	@ 0x26
 80026f0:	f000 fafd 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026f4:	2026      	movs	r0, #38	@ 0x26
 80026f6:	f000 fb16 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026fa:	e041      	b.n	8002780 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a26      	ldr	r2, [pc, #152]	@ (800279c <HAL_UART_MspInit+0x1b4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d13c      	bne.n	8002780 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002706:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800270a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800270c:	2300      	movs	r3, #0
 800270e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002710:	f107 0318 	add.w	r3, r7, #24
 8002714:	4618      	mov	r0, r3
 8002716:	f002 fbeb 	bl	8004ef0 <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002720:	f7ff fd76 	bl	8002210 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	4a18      	ldr	r2, [pc, #96]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 800272a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800272e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	4a12      	ldr	r2, [pc, #72]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 8002742:	f043 0308 	orr.w	r3, r3, #8
 8002746:	6313      	str	r3, [r2, #48]	@ 0x30
 8002748:	4b10      	ldr	r3, [pc, #64]	@ (800278c <HAL_UART_MspInit+0x1a4>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002754:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002762:	2301      	movs	r3, #1
 8002764:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800276e:	2307      	movs	r3, #7
 8002770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002774:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002778:	4619      	mov	r1, r3
 800277a:	4805      	ldr	r0, [pc, #20]	@ (8002790 <HAL_UART_MspInit+0x1a8>)
 800277c:	f000 fef8 	bl	8003570 <HAL_GPIO_Init>
}
 8002780:	bf00      	nop
 8002782:	37b0      	adds	r7, #176	@ 0xb0
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40004400 	.word	0x40004400
 800278c:	40023800 	.word	0x40023800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	20000458 	.word	0x20000458
 8002798:	40026088 	.word	0x40026088
 800279c:	40004800 	.word	0x40004800

080027a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0ac      	sub	sp, #176	@ 0xb0
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	2284      	movs	r2, #132	@ 0x84
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f006 f927 	bl	8008a14 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027ce:	d159      	bne.n	8002884 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80027d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027dc:	f107 0318 	add.w	r3, r7, #24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fb85 	bl	8004ef0 <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80027ec:	f7ff fd10 	bl	8002210 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f0:	4b26      	ldr	r3, [pc, #152]	@ (800288c <HAL_PCD_MspInit+0xec>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	4a25      	ldr	r2, [pc, #148]	@ (800288c <HAL_PCD_MspInit+0xec>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fc:	4b23      	ldr	r3, [pc, #140]	@ (800288c <HAL_PCD_MspInit+0xec>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002808:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800280c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002822:	230a      	movs	r3, #10
 8002824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800282c:	4619      	mov	r1, r3
 800282e:	4818      	ldr	r0, [pc, #96]	@ (8002890 <HAL_PCD_MspInit+0xf0>)
 8002830:	f000 fe9e 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800284c:	4619      	mov	r1, r3
 800284e:	4810      	ldr	r0, [pc, #64]	@ (8002890 <HAL_PCD_MspInit+0xf0>)
 8002850:	f000 fe8e 	bl	8003570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <HAL_PCD_MspInit+0xec>)
 8002856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002858:	4a0c      	ldr	r2, [pc, #48]	@ (800288c <HAL_PCD_MspInit+0xec>)
 800285a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800285e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002860:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <HAL_PCD_MspInit+0xec>)
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4b07      	ldr	r3, [pc, #28]	@ (800288c <HAL_PCD_MspInit+0xec>)
 800286e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002870:	4a06      	ldr	r2, [pc, #24]	@ (800288c <HAL_PCD_MspInit+0xec>)
 8002872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002876:	6453      	str	r3, [r2, #68]	@ 0x44
 8002878:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_PCD_MspInit+0xec>)
 800287a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002884:	bf00      	nop
 8002886:	37b0      	adds	r7, #176	@ 0xb0
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	40020000 	.word	0x40020000

08002894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <NMI_Handler+0x4>

0800289c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <HardFault_Handler+0x4>

080028a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <MemManage_Handler+0x4>

080028ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <BusFault_Handler+0x4>

080028b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <UsageFault_Handler+0x4>

080028bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ea:	f000 f8e1 	bl	8002ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028f8:	4802      	ldr	r0, [pc, #8]	@ (8002904 <DMA1_Stream5_IRQHandler+0x10>)
 80028fa:	f000 fbcf 	bl	800309c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000458 	.word	0x20000458

08002908 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800290c:	4802      	ldr	r0, [pc, #8]	@ (8002918 <TIM2_IRQHandler+0x10>)
 800290e:	f003 fc19 	bl	8006144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000218 	.word	0x20000218

0800291c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002920:	4802      	ldr	r0, [pc, #8]	@ (800292c <TIM4_IRQHandler+0x10>)
 8002922:	f003 fc0f 	bl	8006144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200002b0 	.word	0x200002b0

08002930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <USART2_IRQHandler+0x10>)
 8002936:	f004 fb41 	bl	8006fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000348 	.word	0x20000348

08002944 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002948:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800294c:	f000 ffee 	bl	800392c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}

08002954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800295c:	4a14      	ldr	r2, [pc, #80]	@ (80029b0 <_sbrk+0x5c>)
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <_sbrk+0x60>)
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002968:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002970:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <_sbrk+0x64>)
 8002972:	4a12      	ldr	r2, [pc, #72]	@ (80029bc <_sbrk+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002984:	f006 f84e 	bl	8008a24 <__errno>
 8002988:	4603      	mov	r3, r0
 800298a:	220c      	movs	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	e009      	b.n	80029a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002994:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299a:	4b07      	ldr	r3, [pc, #28]	@ (80029b8 <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <_sbrk+0x64>)
 80029a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20050000 	.word	0x20050000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	2000099c 	.word	0x2000099c
 80029bc:	20000b00 	.word	0x20000b00

080029c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <SystemInit+0x20>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <SystemInit+0x20>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029e8:	f7ff ffea 	bl	80029c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029ec:	480c      	ldr	r0, [pc, #48]	@ (8002a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ee:	490d      	ldr	r1, [pc, #52]	@ (8002a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f4:	e002      	b.n	80029fc <LoopCopyDataInit>

080029f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fa:	3304      	adds	r3, #4

080029fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a00:	d3f9      	bcc.n	80029f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a04:	4c0a      	ldr	r4, [pc, #40]	@ (8002a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a08:	e001      	b.n	8002a0e <LoopFillZerobss>

08002a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a0c:	3204      	adds	r2, #4

08002a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a10:	d3fb      	bcc.n	8002a0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f006 f80d 	bl	8008a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7fe ff51 	bl	80018bc <main>
  bx  lr    
 8002a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002a28:	080098e8 	.word	0x080098e8
  ldr r2, =_sbss
 8002a2c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002a30:	20000b00 	.word	0x20000b00

08002a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC_IRQHandler>

08002a36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3a:	2003      	movs	r0, #3
 8002a3c:	f000 f94c 	bl	8002cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f000 f805 	bl	8002a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a46:	f7ff fbe9 	bl	800221c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a58:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <HAL_InitTick+0x54>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <HAL_InitTick+0x58>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4619      	mov	r1, r3
 8002a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f967 	bl	8002d42 <HAL_SYSTICK_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00e      	b.n	8002a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b0f      	cmp	r3, #15
 8002a82:	d80a      	bhi.n	8002a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a84:	2200      	movs	r2, #0
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f000 f92f 	bl	8002cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a90:	4a06      	ldr	r2, [pc, #24]	@ (8002aac <HAL_InitTick+0x5c>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000030 	.word	0x20000030
 8002aa8:	20000038 	.word	0x20000038
 8002aac:	20000034 	.word	0x20000034

08002ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_IncTick+0x20>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_IncTick+0x24>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <HAL_IncTick+0x24>)
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000038 	.word	0x20000038
 8002ad4:	200009a0 	.word	0x200009a0

08002ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_GetTick+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	200009a0 	.word	0x200009a0

08002af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff ffee 	bl	8002ad8 <HAL_GetTick>
 8002afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d005      	beq.n	8002b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_Delay+0x44>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b16:	bf00      	nop
 8002b18:	f7ff ffde 	bl	8002ad8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d8f7      	bhi.n	8002b18 <HAL_Delay+0x28>
  {
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000038 	.word	0x20000038

08002b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <__NVIC_SetPriorityGrouping+0x40>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b66:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <__NVIC_SetPriorityGrouping+0x40>)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	60d3      	str	r3, [r2, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00
 8002b7c:	05fa0000 	.word	0x05fa0000

08002b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <__NVIC_GetPriorityGrouping+0x18>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	f003 0307 	and.w	r3, r3, #7
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	@ (8002bd4 <__NVIC_EnableIRQ+0x38>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	@ (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	@ (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	@ 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ca4:	d301      	bcc.n	8002caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00f      	b.n	8002cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002caa:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd4 <SysTick_Config+0x40>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f7ff ff8e 	bl	8002bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <SysTick_Config+0x40>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc2:	4b04      	ldr	r3, [pc, #16]	@ (8002cd4 <SysTick_Config+0x40>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010

08002cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff29 	bl	8002b38 <__NVIC_SetPriorityGrouping>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d00:	f7ff ff3e 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8002d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ff8e 	bl	8002c2c <NVIC_EncodePriority>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff5d 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff31 	bl	8002b9c <__NVIC_EnableIRQ>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ffa2 	bl	8002c94 <SysTick_Config>
 8002d50:	4603      	mov	r3, r0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7ff feb6 	bl	8002ad8 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e099      	b.n	8002eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d98:	e00f      	b.n	8002dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d9a:	f7ff fe9d 	bl	8002ad8 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d908      	bls.n	8002dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2203      	movs	r2, #3
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e078      	b.n	8002eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e8      	bne.n	8002d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4b38      	ldr	r3, [pc, #224]	@ (8002eb4 <HAL_DMA_Init+0x158>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d107      	bne.n	8002e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0307 	bic.w	r3, r3, #7
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d117      	bne.n	8002e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fb09 	bl	8003478 <DMA_CheckFifoParam>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2240      	movs	r2, #64	@ 0x40
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e016      	b.n	8002eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fac0 	bl	800340c <DMA_CalcBaseAndBitshift>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	223f      	movs	r2, #63	@ 0x3f
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	f010803f 	.word	0xf010803f

08002eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_DMA_Start_IT+0x26>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e048      	b.n	8002f70 <HAL_DMA_Start_IT+0xb8>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d137      	bne.n	8002f62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa52 	bl	80033b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	223f      	movs	r2, #63	@ 0x3f
 8002f12:	409a      	lsls	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0216 	orr.w	r2, r2, #22
 8002f26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0208 	orr.w	r2, r2, #8
 8002f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e005      	b.n	8002f6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f86:	f7ff fda7 	bl	8002ad8 <HAL_GetTick>
 8002f8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d008      	beq.n	8002faa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2280      	movs	r2, #128	@ 0x80
 8002f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e052      	b.n	8003050 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0216 	bic.w	r2, r2, #22
 8002fb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_DMA_Abort+0x62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0208 	bic.w	r2, r2, #8
 8002fe8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ffa:	e013      	b.n	8003024 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffc:	f7ff fd6c 	bl	8002ad8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b05      	cmp	r3, #5
 8003008:	d90c      	bls.n	8003024 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2203      	movs	r2, #3
 8003014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e015      	b.n	8003050 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e4      	bne.n	8002ffc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	223f      	movs	r2, #63	@ 0x3f
 8003038:	409a      	lsls	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d004      	beq.n	8003076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2280      	movs	r2, #128	@ 0x80
 8003070:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e00c      	b.n	8003090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2205      	movs	r2, #5
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80030a8:	4b8e      	ldr	r3, [pc, #568]	@ (80032e4 <HAL_DMA_IRQHandler+0x248>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a8e      	ldr	r2, [pc, #568]	@ (80032e8 <HAL_DMA_IRQHandler+0x24c>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0a9b      	lsrs	r3, r3, #10
 80030b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c6:	2208      	movs	r2, #8
 80030c8:	409a      	lsls	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01a      	beq.n	8003108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	2208      	movs	r2, #8
 80030f6:	409a      	lsls	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	2201      	movs	r2, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d012      	beq.n	800313e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	2201      	movs	r2, #1
 800312c:	409a      	lsls	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003136:	f043 0202 	orr.w	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	2204      	movs	r2, #4
 8003144:	409a      	lsls	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d012      	beq.n	8003174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	2204      	movs	r2, #4
 8003162:	409a      	lsls	r2, r3
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	2210      	movs	r2, #16
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d043      	beq.n	800320c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d03c      	beq.n	800320c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	2210      	movs	r2, #16
 8003198:	409a      	lsls	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d018      	beq.n	80031de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d108      	bne.n	80031cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d024      	beq.n	800320c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
 80031ca:	e01f      	b.n	800320c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e016      	b.n	800320c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0208 	bic.w	r2, r2, #8
 80031fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	2220      	movs	r2, #32
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 808f 	beq.w	800333c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8087 	beq.w	800333c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003232:	2220      	movs	r2, #32
 8003234:	409a      	lsls	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b05      	cmp	r3, #5
 8003244:	d136      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0216 	bic.w	r2, r2, #22
 8003254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <HAL_DMA_IRQHandler+0x1da>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0208 	bic.w	r2, r2, #8
 8003284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	223f      	movs	r2, #63	@ 0x3f
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d07e      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
        }
        return;
 80032b2:	e079      	b.n	80033a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01d      	beq.n	80032fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d031      	beq.n	800333c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
 80032e0:	e02c      	b.n	800333c <HAL_DMA_IRQHandler+0x2a0>
 80032e2:	bf00      	nop
 80032e4:	20000030 	.word	0x20000030
 80032e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d023      	beq.n	800333c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
 80032fc:	e01e      	b.n	800333c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10f      	bne.n	800332c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0210 	bic.w	r2, r2, #16
 800331a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003340:	2b00      	cmp	r3, #0
 8003342:	d032      	beq.n	80033aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d022      	beq.n	8003396 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2205      	movs	r2, #5
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3301      	adds	r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	429a      	cmp	r2, r3
 8003372:	d307      	bcc.n	8003384 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f2      	bne.n	8003368 <HAL_DMA_IRQHandler+0x2cc>
 8003382:	e000      	b.n	8003386 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003384:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
 80033a6:	e000      	b.n	80033aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80033a8:	bf00      	nop
    }
  }
}
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b40      	cmp	r3, #64	@ 0x40
 80033dc:	d108      	bne.n	80033f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ee:	e007      	b.n	8003400 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3b10      	subs	r3, #16
 800341c:	4a13      	ldr	r2, [pc, #76]	@ (800346c <DMA_CalcBaseAndBitshift+0x60>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003426:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <DMA_CalcBaseAndBitshift+0x64>)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d908      	bls.n	800344c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <DMA_CalcBaseAndBitshift+0x68>)
 8003442:	4013      	ands	r3, r2
 8003444:	1d1a      	adds	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	659a      	str	r2, [r3, #88]	@ 0x58
 800344a:	e006      	b.n	800345a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b08      	ldr	r3, [pc, #32]	@ (8003474 <DMA_CalcBaseAndBitshift+0x68>)
 8003454:	4013      	ands	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	aaaaaaab 	.word	0xaaaaaaab
 8003470:	0800989c 	.word	0x0800989c
 8003474:	fffffc00 	.word	0xfffffc00

08003478 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003488:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d11f      	bne.n	80034d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d856      	bhi.n	8003546 <DMA_CheckFifoParam+0xce>
 8003498:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <DMA_CheckFifoParam+0x28>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034c3 	.word	0x080034c3
 80034a8:	080034b1 	.word	0x080034b1
 80034ac:	08003547 	.word	0x08003547
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d046      	beq.n	800354a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e043      	b.n	800354a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034ca:	d140      	bne.n	800354e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e03d      	b.n	800354e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034da:	d121      	bne.n	8003520 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d837      	bhi.n	8003552 <DMA_CheckFifoParam+0xda>
 80034e2:	a201      	add	r2, pc, #4	@ (adr r2, 80034e8 <DMA_CheckFifoParam+0x70>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	080034ff 	.word	0x080034ff
 80034f0:	080034f9 	.word	0x080034f9
 80034f4:	08003511 	.word	0x08003511
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e030      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d025      	beq.n	8003556 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350e:	e022      	b.n	8003556 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003518:	d11f      	bne.n	800355a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800351e:	e01c      	b.n	800355a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d903      	bls.n	800352e <DMA_CheckFifoParam+0xb6>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d003      	beq.n	8003534 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800352c:	e018      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
      break;
 8003532:	e015      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e00b      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      break;
 8003546:	bf00      	nop
 8003548:	e00a      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 800354a:	bf00      	nop
 800354c:	e008      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
 8003550:	e006      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 8003552:	bf00      	nop
 8003554:	e004      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;   
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 800355e:	bf00      	nop
    }
  } 
  
  return status; 
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	@ 0x24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	e175      	b.n	800387c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f040 8164 	bne.w	8003876 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d005      	beq.n	80035c6 <HAL_GPIO_Init+0x56>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d130      	bne.n	8003628 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2203      	movs	r2, #3
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 0201 	and.w	r2, r3, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b03      	cmp	r3, #3
 8003632:	d017      	beq.n	8003664 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d123      	bne.n	80036b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	08da      	lsrs	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3208      	adds	r2, #8
 8003678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	220f      	movs	r2, #15
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	08da      	lsrs	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3208      	adds	r2, #8
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0203 	and.w	r2, r3, #3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80be 	beq.w	8003876 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fa:	4b66      	ldr	r3, [pc, #408]	@ (8003894 <HAL_GPIO_Init+0x324>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	4a65      	ldr	r2, [pc, #404]	@ (8003894 <HAL_GPIO_Init+0x324>)
 8003700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003704:	6453      	str	r3, [r2, #68]	@ 0x44
 8003706:	4b63      	ldr	r3, [pc, #396]	@ (8003894 <HAL_GPIO_Init+0x324>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003712:	4a61      	ldr	r2, [pc, #388]	@ (8003898 <HAL_GPIO_Init+0x328>)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	3302      	adds	r3, #2
 800371a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	220f      	movs	r2, #15
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a58      	ldr	r2, [pc, #352]	@ (800389c <HAL_GPIO_Init+0x32c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d037      	beq.n	80037ae <HAL_GPIO_Init+0x23e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a57      	ldr	r2, [pc, #348]	@ (80038a0 <HAL_GPIO_Init+0x330>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d031      	beq.n	80037aa <HAL_GPIO_Init+0x23a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a56      	ldr	r2, [pc, #344]	@ (80038a4 <HAL_GPIO_Init+0x334>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02b      	beq.n	80037a6 <HAL_GPIO_Init+0x236>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a55      	ldr	r2, [pc, #340]	@ (80038a8 <HAL_GPIO_Init+0x338>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d025      	beq.n	80037a2 <HAL_GPIO_Init+0x232>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a54      	ldr	r2, [pc, #336]	@ (80038ac <HAL_GPIO_Init+0x33c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01f      	beq.n	800379e <HAL_GPIO_Init+0x22e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a53      	ldr	r2, [pc, #332]	@ (80038b0 <HAL_GPIO_Init+0x340>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d019      	beq.n	800379a <HAL_GPIO_Init+0x22a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a52      	ldr	r2, [pc, #328]	@ (80038b4 <HAL_GPIO_Init+0x344>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_GPIO_Init+0x226>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a51      	ldr	r2, [pc, #324]	@ (80038b8 <HAL_GPIO_Init+0x348>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00d      	beq.n	8003792 <HAL_GPIO_Init+0x222>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a50      	ldr	r2, [pc, #320]	@ (80038bc <HAL_GPIO_Init+0x34c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <HAL_GPIO_Init+0x21e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4f      	ldr	r2, [pc, #316]	@ (80038c0 <HAL_GPIO_Init+0x350>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_GPIO_Init+0x21a>
 8003786:	2309      	movs	r3, #9
 8003788:	e012      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 800378a:	230a      	movs	r3, #10
 800378c:	e010      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 800378e:	2308      	movs	r3, #8
 8003790:	e00e      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 8003792:	2307      	movs	r3, #7
 8003794:	e00c      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 8003796:	2306      	movs	r3, #6
 8003798:	e00a      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 800379a:	2305      	movs	r3, #5
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 800379e:	2304      	movs	r3, #4
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x240>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	@ (8003898 <HAL_GPIO_Init+0x328>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b3d      	ldr	r3, [pc, #244]	@ (80038c4 <HAL_GPIO_Init+0x354>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a34      	ldr	r2, [pc, #208]	@ (80038c4 <HAL_GPIO_Init+0x354>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b32      	ldr	r3, [pc, #200]	@ (80038c4 <HAL_GPIO_Init+0x354>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a29      	ldr	r2, [pc, #164]	@ (80038c4 <HAL_GPIO_Init+0x354>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003822:	4b28      	ldr	r3, [pc, #160]	@ (80038c4 <HAL_GPIO_Init+0x354>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003846:	4a1f      	ldr	r2, [pc, #124]	@ (80038c4 <HAL_GPIO_Init+0x354>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384c:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <HAL_GPIO_Init+0x354>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003870:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <HAL_GPIO_Init+0x354>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f ae86 	bls.w	8003590 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	@ 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40021400 	.word	0x40021400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40021c00 	.word	0x40021c00
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40022400 	.word	0x40022400
 80038c4:	40013c00 	.word	0x40013c00

080038c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	887b      	ldrh	r3, [r7, #2]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	e001      	b.n	80038ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
 8003904:	4613      	mov	r3, r2
 8003906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003908:	787b      	ldrb	r3, [r7, #1]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390e:	887a      	ldrh	r2, [r7, #2]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003914:	e003      	b.n	800391e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003916:	887b      	ldrh	r3, [r7, #2]
 8003918:	041a      	lsls	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	619a      	str	r2, [r3, #24]
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003942:	4a05      	ldr	r2, [pc, #20]	@ (8003958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd ffa2 	bl	8001894 <HAL_GPIO_EXTI_Callback>
  }
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40013c00 	.word	0x40013c00

0800395c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e08b      	b.n	8003a86 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe fc6e 	bl	8002264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	@ 0x24
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	e006      	b.n	80039e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d108      	bne.n	80039fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	e007      	b.n	8003a0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <HAL_I2C_Init+0x134>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69d9      	ldr	r1, [r3, #28]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	02008000 	.word	0x02008000

08003a94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	817b      	strh	r3, [r7, #10]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	f040 80fd 	bne.w	8003cb0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2C_Master_Transmit+0x30>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0f6      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x21e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003acc:	f7ff f804 	bl	8002ad8 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2319      	movs	r3, #25
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f914 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0e1      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2221      	movs	r2, #33	@ 0x21
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2210      	movs	r2, #16
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	893a      	ldrh	r2, [r7, #8]
 8003b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2bff      	cmp	r3, #255	@ 0xff
 8003b1e:	d906      	bls.n	8003b2e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	22ff      	movs	r2, #255	@ 0xff
 8003b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e007      	b.n	8003b3e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b3c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d024      	beq.n	8003b90 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	8979      	ldrh	r1, [r7, #10]
 8003b82:	4b4e      	ldr	r3, [pc, #312]	@ (8003cbc <HAL_I2C_Master_Transmit+0x228>)
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fa83 	bl	8004094 <I2C_TransferConfig>
 8003b8e:	e066      	b.n	8003c5e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	8979      	ldrh	r1, [r7, #10]
 8003b98:	4b48      	ldr	r3, [pc, #288]	@ (8003cbc <HAL_I2C_Master_Transmit+0x228>)
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fa78 	bl	8004094 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ba4:	e05b      	b.n	8003c5e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f907 	bl	8003dbe <I2C_WaitOnTXISFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07b      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d034      	beq.n	8003c5e <HAL_I2C_Master_Transmit+0x1ca>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d130      	bne.n	8003c5e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	2200      	movs	r2, #0
 8003c04:	2180      	movs	r1, #128	@ 0x80
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f880 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e04d      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2bff      	cmp	r3, #255	@ 0xff
 8003c1e:	d90e      	bls.n	8003c3e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	22ff      	movs	r2, #255	@ 0xff
 8003c24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	8979      	ldrh	r1, [r7, #10]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fa2c 	bl	8004094 <I2C_TransferConfig>
 8003c3c:	e00f      	b.n	8003c5e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	8979      	ldrh	r1, [r7, #10]
 8003c50:	2300      	movs	r3, #0
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fa1b 	bl	8004094 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d19e      	bne.n	8003ba6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	6a39      	ldr	r1, [r7, #32]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8ed 	bl	8003e4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e01a      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2220      	movs	r2, #32
 8003c82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc0 <HAL_I2C_Master_Transmit+0x22c>)
 8003c90:	400b      	ands	r3, r1
 8003c92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	80002000 	.word	0x80002000
 8003cc0:	fe00e800 	.word	0xfe00e800

08003cc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d103      	bne.n	8003ce2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d007      	beq.n	8003d00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	619a      	str	r2, [r3, #24]
  }
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d1c:	e03b      	b.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	6839      	ldr	r1, [r7, #0]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f8d6 	bl	8003ed4 <I2C_IsErrorOccurred>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e041      	b.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d02d      	beq.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fe fecd 	bl	8002ad8 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d122      	bne.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d113      	bne.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00f      	b.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d0b4      	beq.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dca:	e033      	b.n	8003e34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f87f 	bl	8003ed4 <I2C_IsErrorOccurred>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e031      	b.n	8003e44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d025      	beq.n	8003e34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de8:	f7fe fe76 	bl	8002ad8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d302      	bcc.n	8003dfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d11a      	bne.n	8003e34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d013      	beq.n	8003e34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e007      	b.n	8003e44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d1c4      	bne.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e58:	e02f      	b.n	8003eba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f838 	bl	8003ed4 <I2C_IsErrorOccurred>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e02d      	b.n	8003eca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7fe fe33 	bl	8002ad8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d11a      	bne.n	8003eba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d013      	beq.n	8003eba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e007      	b.n	8003eca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d1c8      	bne.n	8003e5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	@ 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d068      	beq.n	8003fd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2210      	movs	r2, #16
 8003f06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f08:	e049      	b.n	8003f9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d045      	beq.n	8003f9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fe fde1 	bl	8002ad8 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <I2C_IsErrorOccurred+0x54>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d13a      	bne.n	8003f9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4a:	d121      	bne.n	8003f90 <I2C_IsErrorOccurred+0xbc>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f52:	d01d      	beq.n	8003f90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d01a      	beq.n	8003f90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f6a:	f7fe fdb5 	bl	8002ad8 <HAL_GetTick>
 8003f6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f70:	e00e      	b.n	8003f90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f72:	f7fe fdb1 	bl	8002ad8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b19      	cmp	r3, #25
 8003f7e:	d907      	bls.n	8003f90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	f043 0320 	orr.w	r3, r3, #32
 8003f86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f8e:	e006      	b.n	8003f9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d1e9      	bne.n	8003f72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d003      	beq.n	8003fb4 <I2C_IsErrorOccurred+0xe0>
 8003fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0aa      	beq.n	8003f0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d103      	bne.n	8003fc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	f043 0304 	orr.w	r3, r3, #4
 8003fca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004016:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00b      	beq.n	8004040 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f043 0302 	orr.w	r3, r3, #2
 800402e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004038:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01c      	beq.n	8004082 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff fe3b 	bl	8003cc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <I2C_IsErrorOccurred+0x1bc>)
 800405a:	400b      	ands	r3, r1
 800405c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	431a      	orrs	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004086:	4618      	mov	r0, r3
 8004088:	3728      	adds	r7, #40	@ 0x28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	fe00e800 	.word	0xfe00e800

08004094 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	817b      	strh	r3, [r7, #10]
 80040a2:	4613      	mov	r3, r2
 80040a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040ac:	7a7b      	ldrb	r3, [r7, #9]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	4313      	orrs	r3, r2
 80040be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	0d5b      	lsrs	r3, r3, #21
 80040ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040d2:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <I2C_TransferConfig+0x60>)
 80040d4:	430b      	orrs	r3, r1
 80040d6:	43db      	mvns	r3, r3
 80040d8:	ea02 0103 	and.w	r1, r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	03ff63ff 	.word	0x03ff63ff

080040f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	d138      	bne.n	8004180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004118:	2302      	movs	r3, #2
 800411a:	e032      	b.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	@ 0x24
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800414a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d139      	bne.n	8004218 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e033      	b.n	800421a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2224      	movs	r2, #36	@ 0x24
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af02      	add	r7, sp, #8
 800422c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e108      	b.n	800444a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fe faa4 	bl	80027a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2203      	movs	r2, #3
 800425c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004266:	d102      	bne.n	800426e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f004 f81e 	bl	80082b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	7c1a      	ldrb	r2, [r3, #16]
 8004280:	f88d 2000 	strb.w	r2, [sp]
 8004284:	3304      	adds	r3, #4
 8004286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004288:	f003 ffba 	bl	8008200 <USB_CoreInit>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e0d5      	b.n	800444a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f004 f816 	bl	80082d6 <USB_SetCurrentMode>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0c6      	b.n	800444a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e04a      	b.n	8004358 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042c2:	7bfa      	ldrb	r2, [r7, #15]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	3315      	adds	r3, #21
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	3314      	adds	r3, #20
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	b298      	uxth	r0, r3
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	332e      	adds	r3, #46	@ 0x2e
 80042fe:	4602      	mov	r2, r0
 8004300:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3318      	adds	r3, #24
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	331c      	adds	r3, #28
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	3320      	adds	r3, #32
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3324      	adds	r3, #36	@ 0x24
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	3301      	adds	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	791b      	ldrb	r3, [r3, #4]
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	429a      	cmp	r2, r3
 8004360:	d3af      	bcc.n	80042c2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
 8004366:	e044      	b.n	80043f2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800437e:	7bfa      	ldrb	r2, [r7, #15]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004390:	7bfa      	ldrb	r2, [r7, #15]
 8004392:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043c0:	7bfa      	ldrb	r2, [r7, #15]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	3301      	adds	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	791b      	ldrb	r3, [r3, #4]
 80043f6:	7bfa      	ldrb	r2, [r7, #15]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d3b5      	bcc.n	8004368 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	7c1a      	ldrb	r2, [r3, #16]
 8004404:	f88d 2000 	strb.w	r2, [sp]
 8004408:	3304      	adds	r3, #4
 800440a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800440c:	f003 ffb0 	bl	8008370 <USB_DevInit>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e013      	b.n	800444a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7b1b      	ldrb	r3, [r3, #12]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f80b 	bl	8004454 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f004 f96b 	bl	800871e <USB_DevDisconnect>

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004482:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <HAL_PCDEx_ActivateLPM+0x44>)
 8004484:	4313      	orrs	r3, r2
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	10000003 	.word	0x10000003

0800449c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a0:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40007000 	.word	0x40007000

080044bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	4b23      	ldr	r3, [pc, #140]	@ (8004554 <HAL_PWREx_EnableOverDrive+0x98>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	4a22      	ldr	r2, [pc, #136]	@ (8004554 <HAL_PWREx_EnableOverDrive+0x98>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d2:	4b20      	ldr	r3, [pc, #128]	@ (8004554 <HAL_PWREx_EnableOverDrive+0x98>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ea:	f7fe faf5 	bl	8002ad8 <HAL_GetTick>
 80044ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044f0:	e009      	b.n	8004506 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044f2:	f7fe faf1 	bl	8002ad8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004500:	d901      	bls.n	8004506 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e022      	b.n	800454c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004506:	4b14      	ldr	r3, [pc, #80]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800450e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004512:	d1ee      	bne.n	80044f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004514:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0f      	ldr	r2, [pc, #60]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800451a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800451e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004520:	f7fe fada 	bl	8002ad8 <HAL_GetTick>
 8004524:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004526:	e009      	b.n	800453c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004528:	f7fe fad6 	bl	8002ad8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004536:	d901      	bls.n	800453c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e007      	b.n	800454c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800453c:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004548:	d1ee      	bne.n	8004528 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	40007000 	.word	0x40007000

0800455c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e291      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8087 	beq.w	800468e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004580:	4b96      	ldr	r3, [pc, #600]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b04      	cmp	r3, #4
 800458a:	d00c      	beq.n	80045a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458c:	4b93      	ldr	r3, [pc, #588]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	d112      	bne.n	80045be <HAL_RCC_OscConfig+0x62>
 8004598:	4b90      	ldr	r3, [pc, #576]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a4:	d10b      	bne.n	80045be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a6:	4b8d      	ldr	r3, [pc, #564]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d06c      	beq.n	800468c <HAL_RCC_OscConfig+0x130>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d168      	bne.n	800468c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e26b      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x7a>
 80045c8:	4b84      	ldr	r3, [pc, #528]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a83      	ldr	r2, [pc, #524]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e02e      	b.n	8004634 <HAL_RCC_OscConfig+0xd8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x9c>
 80045de:	4b7f      	ldr	r3, [pc, #508]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a7e      	ldr	r2, [pc, #504]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80045e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b7c      	ldr	r3, [pc, #496]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a7b      	ldr	r2, [pc, #492]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80045f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e01d      	b.n	8004634 <HAL_RCC_OscConfig+0xd8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0xc0>
 8004602:	4b76      	ldr	r3, [pc, #472]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a75      	ldr	r2, [pc, #468]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b73      	ldr	r3, [pc, #460]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a72      	ldr	r2, [pc, #456]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0xd8>
 800461c:	4b6f      	ldr	r3, [pc, #444]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a6e      	ldr	r2, [pc, #440]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b6c      	ldr	r3, [pc, #432]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a6b      	ldr	r2, [pc, #428]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 800462e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe fa4c 	bl	8002ad8 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fe fa48 	bl	8002ad8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	@ 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e21f      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b61      	ldr	r3, [pc, #388]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0xe8>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fe fa38 	bl	8002ad8 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe fa34 	bl	8002ad8 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	@ 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e20b      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	4b57      	ldr	r3, [pc, #348]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x110>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d069      	beq.n	800476e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800469a:	4b50      	ldr	r3, [pc, #320]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a6:	4b4d      	ldr	r3, [pc, #308]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d11c      	bne.n	80046ec <HAL_RCC_OscConfig+0x190>
 80046b2:	4b4a      	ldr	r3, [pc, #296]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d116      	bne.n	80046ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	4b47      	ldr	r3, [pc, #284]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCC_OscConfig+0x17a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e1df      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d6:	4b41      	ldr	r3, [pc, #260]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	493d      	ldr	r1, [pc, #244]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	e040      	b.n	800476e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d023      	beq.n	800473c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f4:	4b39      	ldr	r3, [pc, #228]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a38      	ldr	r2, [pc, #224]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fe f9ea 	bl	8002ad8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004708:	f7fe f9e6 	bl	8002ad8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e1bd      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004726:	4b2d      	ldr	r3, [pc, #180]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4929      	ldr	r1, [pc, #164]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
 800473a:	e018      	b.n	800476e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473c:	4b27      	ldr	r3, [pc, #156]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a26      	ldr	r2, [pc, #152]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fe f9c6 	bl	8002ad8 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004750:	f7fe f9c2 	bl	8002ad8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e199      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004762:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d038      	beq.n	80047ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d019      	beq.n	80047b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004782:	4b16      	ldr	r3, [pc, #88]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004786:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478e:	f7fe f9a3 	bl	8002ad8 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004796:	f7fe f99f 	bl	8002ad8 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e176      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047a8:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80047aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x23a>
 80047b4:	e01a      	b.n	80047ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b6:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80047b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ba:	4a08      	ldr	r2, [pc, #32]	@ (80047dc <HAL_RCC_OscConfig+0x280>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c2:	f7fe f989 	bl	8002ad8 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ca:	f7fe f985 	bl	8002ad8 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d903      	bls.n	80047e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e15c      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
 80047dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e0:	4b91      	ldr	r3, [pc, #580]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80047e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ee      	bne.n	80047ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a4 	beq.w	8004942 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004806:	4b88      	ldr	r3, [pc, #544]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	4a87      	ldr	r2, [pc, #540]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 800480c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004810:	6413      	str	r3, [r2, #64]	@ 0x40
 8004812:	4b85      	ldr	r3, [pc, #532]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481e:	2301      	movs	r3, #1
 8004820:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004822:	4b82      	ldr	r3, [pc, #520]	@ (8004a2c <HAL_RCC_OscConfig+0x4d0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d118      	bne.n	8004860 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800482e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a2c <HAL_RCC_OscConfig+0x4d0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7e      	ldr	r2, [pc, #504]	@ (8004a2c <HAL_RCC_OscConfig+0x4d0>)
 8004834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800483a:	f7fe f94d 	bl	8002ad8 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004842:	f7fe f949 	bl	8002ad8 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b64      	cmp	r3, #100	@ 0x64
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e120      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004854:	4b75      	ldr	r3, [pc, #468]	@ (8004a2c <HAL_RCC_OscConfig+0x4d0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d106      	bne.n	8004876 <HAL_RCC_OscConfig+0x31a>
 8004868:	4b6f      	ldr	r3, [pc, #444]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	4a6e      	ldr	r2, [pc, #440]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6713      	str	r3, [r2, #112]	@ 0x70
 8004874:	e02d      	b.n	80048d2 <HAL_RCC_OscConfig+0x376>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10c      	bne.n	8004898 <HAL_RCC_OscConfig+0x33c>
 800487e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004882:	4a69      	ldr	r2, [pc, #420]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	6713      	str	r3, [r2, #112]	@ 0x70
 800488a:	4b67      	ldr	r3, [pc, #412]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a66      	ldr	r2, [pc, #408]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004890:	f023 0304 	bic.w	r3, r3, #4
 8004894:	6713      	str	r3, [r2, #112]	@ 0x70
 8004896:	e01c      	b.n	80048d2 <HAL_RCC_OscConfig+0x376>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b05      	cmp	r3, #5
 800489e:	d10c      	bne.n	80048ba <HAL_RCC_OscConfig+0x35e>
 80048a0:	4b61      	ldr	r3, [pc, #388]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a4:	4a60      	ldr	r2, [pc, #384]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048a6:	f043 0304 	orr.w	r3, r3, #4
 80048aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b8:	e00b      	b.n	80048d2 <HAL_RCC_OscConfig+0x376>
 80048ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	4a5a      	ldr	r2, [pc, #360]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c6:	4b58      	ldr	r3, [pc, #352]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	4a57      	ldr	r2, [pc, #348]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048cc:	f023 0304 	bic.w	r3, r3, #4
 80048d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d015      	beq.n	8004906 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fe f8fd 	bl	8002ad8 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fe f8f9 	bl	8002ad8 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e0ce      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0ee      	beq.n	80048e2 <HAL_RCC_OscConfig+0x386>
 8004904:	e014      	b.n	8004930 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7fe f8e7 	bl	8002ad8 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490c:	e00a      	b.n	8004924 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490e:	f7fe f8e3 	bl	8002ad8 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e0b8      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004924:	4b40      	ldr	r3, [pc, #256]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ee      	bne.n	800490e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004936:	4b3c      	ldr	r3, [pc, #240]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 800493c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004940:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 80a4 	beq.w	8004a94 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800494c:	4b36      	ldr	r3, [pc, #216]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	2b08      	cmp	r3, #8
 8004956:	d06b      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d149      	bne.n	80049f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004960:	4b31      	ldr	r3, [pc, #196]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a30      	ldr	r2, [pc, #192]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800496a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fe f8b4 	bl	8002ad8 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004974:	f7fe f8b0 	bl	8002ad8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e087      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	4b28      	ldr	r3, [pc, #160]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	019b      	lsls	r3, r3, #6
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	3b01      	subs	r3, #1
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	4313      	orrs	r3, r2
 80049b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80049ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c0:	4b19      	ldr	r3, [pc, #100]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a18      	ldr	r2, [pc, #96]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80049c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fe f884 	bl	8002ad8 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fe f880 	bl	8002ad8 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e057      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x478>
 80049f2:	e04f      	b.n	8004a94 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 80049fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fe f86a 	bl	8002ad8 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fe f866 	bl	8002ad8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e03d      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <HAL_RCC_OscConfig+0x4cc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4ac>
 8004a26:	e035      	b.n	8004a94 <HAL_RCC_OscConfig+0x538>
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <HAL_RCC_OscConfig+0x544>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d028      	beq.n	8004a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d121      	bne.n	8004a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d11a      	bne.n	8004a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d111      	bne.n	8004a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0d0      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b6a      	ldr	r3, [pc, #424]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d910      	bls.n	8004aec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b67      	ldr	r3, [pc, #412]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 020f 	bic.w	r2, r3, #15
 8004ad2:	4965      	ldr	r1, [pc, #404]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b63      	ldr	r3, [pc, #396]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0b8      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b04:	4b59      	ldr	r3, [pc, #356]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4a58      	ldr	r2, [pc, #352]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b1c:	4b53      	ldr	r3, [pc, #332]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a52      	ldr	r2, [pc, #328]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b50      	ldr	r3, [pc, #320]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	494d      	ldr	r1, [pc, #308]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d040      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4b47      	ldr	r3, [pc, #284]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d115      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e07f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b41      	ldr	r3, [pc, #260]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e073      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	4b3d      	ldr	r3, [pc, #244]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e06b      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b86:	4b39      	ldr	r3, [pc, #228]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 0203 	bic.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4936      	ldr	r1, [pc, #216]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fd ff9e 	bl	8002ad8 <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	f7fd ff9a 	bl	8002ad8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e053      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 020c 	and.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1eb      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d210      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 020f 	bic.w	r2, r3, #15
 8004bde:	4922      	ldr	r1, [pc, #136]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b20      	ldr	r3, [pc, #128]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e032      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c04:	4b19      	ldr	r3, [pc, #100]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4916      	ldr	r1, [pc, #88]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c22:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	490e      	ldr	r1, [pc, #56]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c36:	f000 f821 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	490a      	ldr	r1, [pc, #40]	@ (8004c70 <HAL_RCC_ClockConfig+0x1cc>)
 8004c48:	5ccb      	ldrb	r3, [r1, r3]
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	4a09      	ldr	r2, [pc, #36]	@ (8004c74 <HAL_RCC_ClockConfig+0x1d0>)
 8004c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c52:	4b09      	ldr	r3, [pc, #36]	@ (8004c78 <HAL_RCC_ClockConfig+0x1d4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd fefa 	bl	8002a50 <HAL_InitTick>

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023c00 	.word	0x40023c00
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	08009884 	.word	0x08009884
 8004c74:	20000030 	.word	0x20000030
 8004c78:	20000034 	.word	0x20000034

08004c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c80:	b094      	sub	sp, #80	@ 0x50
 8004c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c88:	2300      	movs	r3, #0
 8004c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c94:	4b79      	ldr	r3, [pc, #484]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d00d      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x40>
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	f200 80e1 	bhi.w	8004e68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cae:	e0db      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb0:	4b73      	ldr	r3, [pc, #460]	@ (8004e80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cb4:	e0db      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cb6:	4b73      	ldr	r3, [pc, #460]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cba:	e0d8      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d063      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	2200      	movs	r2, #0
 8004cda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	0159      	lsls	r1, r3, #5
 8004cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d00:	0150      	lsls	r0, r2, #5
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4621      	mov	r1, r4
 8004d08:	1a51      	subs	r1, r2, r1
 8004d0a:	6139      	str	r1, [r7, #16]
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d20:	4659      	mov	r1, fp
 8004d22:	018b      	lsls	r3, r1, #6
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	018a      	lsls	r2, r1, #6
 8004d2e:	4651      	mov	r1, sl
 8004d30:	ebb2 0801 	subs.w	r8, r2, r1
 8004d34:	4659      	mov	r1, fp
 8004d36:	eb63 0901 	sbc.w	r9, r3, r1
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d4e:	4690      	mov	r8, r2
 8004d50:	4699      	mov	r9, r3
 8004d52:	4623      	mov	r3, r4
 8004d54:	eb18 0303 	adds.w	r3, r8, r3
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	eb49 0303 	adc.w	r3, r9, r3
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d6e:	4629      	mov	r1, r5
 8004d70:	024b      	lsls	r3, r1, #9
 8004d72:	4621      	mov	r1, r4
 8004d74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d78:	4621      	mov	r1, r4
 8004d7a:	024a      	lsls	r2, r1, #9
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d82:	2200      	movs	r2, #0
 8004d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d8c:	f7fb fa98 	bl	80002c0 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4613      	mov	r3, r2
 8004d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d98:	e058      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d9a:	4b38      	ldr	r3, [pc, #224]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	099b      	lsrs	r3, r3, #6
 8004da0:	2200      	movs	r2, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	4611      	mov	r1, r2
 8004da6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004daa:	623b      	str	r3, [r7, #32]
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004db0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	f04f 0000 	mov.w	r0, #0
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	0159      	lsls	r1, r3, #5
 8004dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dc6:	0150      	lsls	r0, r2, #5
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4641      	mov	r1, r8
 8004dce:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004de4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004de8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dec:	ebb2 040a 	subs.w	r4, r2, sl
 8004df0:	eb63 050b 	sbc.w	r5, r3, fp
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	00eb      	lsls	r3, r5, #3
 8004dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e02:	00e2      	lsls	r2, r4, #3
 8004e04:	4614      	mov	r4, r2
 8004e06:	461d      	mov	r5, r3
 8004e08:	4643      	mov	r3, r8
 8004e0a:	18e3      	adds	r3, r4, r3
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	464b      	mov	r3, r9
 8004e10:	eb45 0303 	adc.w	r3, r5, r3
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e22:	4629      	mov	r1, r5
 8004e24:	028b      	lsls	r3, r1, #10
 8004e26:	4621      	mov	r1, r4
 8004e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	028a      	lsls	r2, r1, #10
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e36:	2200      	movs	r2, #0
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	61fa      	str	r2, [r7, #28]
 8004e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e40:	f7fb fa3e 	bl	80002c0 <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4613      	mov	r3, r2
 8004e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	3301      	adds	r3, #1
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e66:	e002      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3750      	adds	r7, #80	@ 0x50
 8004e74:	46bd      	mov	sp, r7
 8004e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	00f42400 	.word	0x00f42400
 8004e84:	007a1200 	.word	0x007a1200

08004e88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e8c:	4b03      	ldr	r3, [pc, #12]	@ (8004e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	20000030 	.word	0x20000030

08004ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ea4:	f7ff fff0 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0a9b      	lsrs	r3, r3, #10
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	@ (8004ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	08009894 	.word	0x08009894

08004ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ecc:	f7ff ffdc 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0b5b      	lsrs	r3, r3, #13
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4903      	ldr	r1, [pc, #12]	@ (8004eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ede:	5ccb      	ldrb	r3, [r1, r3]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	08009894 	.word	0x08009894

08004ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d012      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f18:	4b69      	ldr	r3, [pc, #420]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4a68      	ldr	r2, [pc, #416]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f22:	6093      	str	r3, [r2, #8]
 8004f24:	4b66      	ldr	r3, [pc, #408]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2c:	4964      	ldr	r1, [pc, #400]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f58:	4959      	ldr	r1, [pc, #356]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d017      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f86:	4b4e      	ldr	r3, [pc, #312]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	494a      	ldr	r1, [pc, #296]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa4:	d101      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 808b 	beq.w	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	4a39      	ldr	r2, [pc, #228]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fe0:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fec:	4b35      	ldr	r3, [pc, #212]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a34      	ldr	r2, [pc, #208]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff8:	f7fd fd6e 	bl	8002ad8 <HAL_GetTick>
 8004ffc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005000:	f7fd fd6a 	bl	8002ad8 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b64      	cmp	r3, #100	@ 0x64
 800500c:	d901      	bls.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e357      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005012:	4b2c      	ldr	r3, [pc, #176]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800501e:	4b28      	ldr	r3, [pc, #160]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005026:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d035      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	d02e      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800503c:	4b20      	ldr	r3, [pc, #128]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005044:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005046:	4b1e      	ldr	r3, [pc, #120]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504a:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005050:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005052:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005056:	4a1a      	ldr	r2, [pc, #104]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005064:	4b16      	ldr	r3, [pc, #88]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d114      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd fd32 	bl	8002ad8 <HAL_GetTick>
 8005074:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005076:	e00a      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005078:	f7fd fd2e 	bl	8002ad8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e319      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508e:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0ee      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a6:	d111      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050b4:	4b04      	ldr	r3, [pc, #16]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050b6:	400b      	ands	r3, r1
 80050b8:	4901      	ldr	r1, [pc, #4]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
 80050be:	e00b      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40007000 	.word	0x40007000
 80050c8:	0ffffcff 	.word	0x0ffffcff
 80050cc:	4baa      	ldr	r3, [pc, #680]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4aa9      	ldr	r2, [pc, #676]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050d6:	6093      	str	r3, [r2, #8]
 80050d8:	4ba7      	ldr	r3, [pc, #668]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e4:	49a4      	ldr	r1, [pc, #656]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d010      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050f6:	4ba0      	ldr	r3, [pc, #640]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050fc:	4a9e      	ldr	r2, [pc, #632]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005102:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005106:	4b9c      	ldr	r3, [pc, #624]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005108:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	4999      	ldr	r1, [pc, #612]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005124:	4b94      	ldr	r3, [pc, #592]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005132:	4991      	ldr	r1, [pc, #580]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005146:	4b8c      	ldr	r3, [pc, #560]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005154:	4988      	ldr	r1, [pc, #544]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005168:	4b83      	ldr	r3, [pc, #524]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005176:	4980      	ldr	r1, [pc, #512]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800518a:	4b7b      	ldr	r3, [pc, #492]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005190:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005198:	4977      	ldr	r1, [pc, #476]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ac:	4b72      	ldr	r3, [pc, #456]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b2:	f023 0203 	bic.w	r2, r3, #3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	496f      	ldr	r1, [pc, #444]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d4:	f023 020c 	bic.w	r2, r3, #12
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051dc:	4966      	ldr	r1, [pc, #408]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051f0:	4b61      	ldr	r3, [pc, #388]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fe:	495e      	ldr	r1, [pc, #376]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005212:	4b59      	ldr	r3, [pc, #356]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005218:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005220:	4955      	ldr	r1, [pc, #340]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005234:	4b50      	ldr	r3, [pc, #320]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005242:	494d      	ldr	r1, [pc, #308]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005256:	4b48      	ldr	r3, [pc, #288]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005264:	4944      	ldr	r1, [pc, #272]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005278:	4b3f      	ldr	r3, [pc, #252]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005286:	493c      	ldr	r1, [pc, #240]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800529a:	4b37      	ldr	r3, [pc, #220]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a8:	4933      	ldr	r1, [pc, #204]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052ca:	492b      	ldr	r1, [pc, #172]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d011      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052de:	4b26      	ldr	r3, [pc, #152]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ec:	4922      	ldr	r1, [pc, #136]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052fc:	d101      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800530e:	2301      	movs	r3, #1
 8005310:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800531e:	4b16      	ldr	r3, [pc, #88]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005324:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532c:	4912      	ldr	r1, [pc, #72]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005340:	4b0d      	ldr	r3, [pc, #52]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005346:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005350:	4909      	ldr	r1, [pc, #36]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d006      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80d9 	beq.w	800551e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800536c:	4b02      	ldr	r3, [pc, #8]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a01      	ldr	r2, [pc, #4]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005372:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005376:	e001      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005378:	40023800 	.word	0x40023800
 800537c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537e:	f7fd fbab 	bl	8002ad8 <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005384:	e008      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005386:	f7fd fba7 	bl	8002ad8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b64      	cmp	r3, #100	@ 0x64
 8005392:	d901      	bls.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e194      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005398:	4b6c      	ldr	r3, [pc, #432]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f0      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d021      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11d      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053b8:	4b64      	ldr	r3, [pc, #400]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053be:	0c1b      	lsrs	r3, r3, #16
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053c6:	4b61      	ldr	r3, [pc, #388]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053cc:	0e1b      	lsrs	r3, r3, #24
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	019a      	lsls	r2, r3, #6
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	431a      	orrs	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	061b      	lsls	r3, r3, #24
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	071b      	lsls	r3, r3, #28
 80053ec:	4957      	ldr	r1, [pc, #348]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005412:	2b00      	cmp	r3, #0
 8005414:	d02e      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800541e:	d129      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005420:	4b4a      	ldr	r3, [pc, #296]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800542e:	4b47      	ldr	r3, [pc, #284]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005434:	0f1b      	lsrs	r3, r3, #28
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	019a      	lsls	r2, r3, #6
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	061b      	lsls	r3, r3, #24
 800544e:	431a      	orrs	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	071b      	lsls	r3, r3, #28
 8005454:	493d      	ldr	r1, [pc, #244]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800545c:	4b3b      	ldr	r3, [pc, #236]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005462:	f023 021f 	bic.w	r2, r3, #31
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	3b01      	subs	r3, #1
 800546c:	4937      	ldr	r1, [pc, #220]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01d      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005480:	4b32      	ldr	r3, [pc, #200]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005486:	0e1b      	lsrs	r3, r3, #24
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800548e:	4b2f      	ldr	r3, [pc, #188]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005494:	0f1b      	lsrs	r3, r3, #28
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	019a      	lsls	r2, r3, #6
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	431a      	orrs	r2, r3
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	431a      	orrs	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	071b      	lsls	r3, r3, #28
 80054b4:	4925      	ldr	r1, [pc, #148]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d011      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	019a      	lsls	r2, r3, #6
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	071b      	lsls	r3, r3, #28
 80054e4:	4919      	ldr	r1, [pc, #100]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054ec:	4b17      	ldr	r3, [pc, #92]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a16      	ldr	r2, [pc, #88]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f8:	f7fd faee 	bl	8002ad8 <HAL_GetTick>
 80054fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005500:	f7fd faea 	bl	8002ad8 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b64      	cmp	r3, #100	@ 0x64
 800550c:	d901      	bls.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e0d7      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005512:	4b0e      	ldr	r3, [pc, #56]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b01      	cmp	r3, #1
 8005522:	f040 80cd 	bne.w	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005526:	4b09      	ldr	r3, [pc, #36]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a08      	ldr	r2, [pc, #32]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800552c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005532:	f7fd fad1 	bl	8002ad8 <HAL_GetTick>
 8005536:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005538:	e00a      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800553a:	f7fd facd 	bl	8002ad8 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b64      	cmp	r3, #100	@ 0x64
 8005546:	d903      	bls.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e0ba      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800554c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005550:	4b5e      	ldr	r3, [pc, #376]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800555c:	d0ed      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02e      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d12a      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005586:	4b51      	ldr	r3, [pc, #324]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005594:	4b4d      	ldr	r3, [pc, #308]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559a:	0f1b      	lsrs	r3, r3, #28
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	019a      	lsls	r2, r3, #6
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	061b      	lsls	r3, r3, #24
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	071b      	lsls	r3, r3, #28
 80055ba:	4944      	ldr	r1, [pc, #272]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055c2:	4b42      	ldr	r3, [pc, #264]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	3b01      	subs	r3, #1
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	493d      	ldr	r1, [pc, #244]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d022      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055f0:	d11d      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055f2:	4b36      	ldr	r3, [pc, #216]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005600:	4b32      	ldr	r3, [pc, #200]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005606:	0f1b      	lsrs	r3, r3, #28
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	019a      	lsls	r2, r3, #6
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	431a      	orrs	r2, r3
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	061b      	lsls	r3, r3, #24
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	071b      	lsls	r3, r3, #28
 8005626:	4929      	ldr	r1, [pc, #164]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d028      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800563a:	4b24      	ldr	r3, [pc, #144]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005640:	0e1b      	lsrs	r3, r3, #24
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005648:	4b20      	ldr	r3, [pc, #128]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	0c1b      	lsrs	r3, r3, #16
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	019a      	lsls	r2, r3, #6
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	041b      	lsls	r3, r3, #16
 8005660:	431a      	orrs	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	061b      	lsls	r3, r3, #24
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	071b      	lsls	r3, r3, #28
 800566e:	4917      	ldr	r1, [pc, #92]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005676:	4b15      	ldr	r3, [pc, #84]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800567c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	4911      	ldr	r1, [pc, #68]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800568c:	4b0f      	ldr	r3, [pc, #60]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a0e      	ldr	r2, [pc, #56]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005698:	f7fd fa1e 	bl	8002ad8 <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056a0:	f7fd fa1a 	bl	8002ad8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	@ 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e007      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056b2:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056be:	d1ef      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800

080056d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e09d      	b.n	800581e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d108      	bne.n	80056fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056f2:	d009      	beq.n	8005708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	61da      	str	r2, [r3, #28]
 80056fa:	e005      	b.n	8005708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc fdfe 	bl	8002324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800573e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005748:	d902      	bls.n	8005750 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e002      	b.n	8005756 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005754:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800575e:	d007      	beq.n	8005770 <HAL_SPI_Init+0xa0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005768:	d002      	beq.n	8005770 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b2:	ea42 0103 	orr.w	r1, r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	0c1b      	lsrs	r3, r3, #16
 80057cc:	f003 0204 	and.w	r2, r3, #4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80057ec:	ea42 0103 	orr.w	r1, r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800580c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e049      	b.n	80058cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fc fe4f 	bl	80024f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f000 feb1 	bl	80065cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d001      	beq.n	80058ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e04c      	b.n	8005986 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a26      	ldr	r2, [pc, #152]	@ (8005994 <HAL_TIM_Base_Start+0xc0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d022      	beq.n	8005944 <HAL_TIM_Base_Start+0x70>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005906:	d01d      	beq.n	8005944 <HAL_TIM_Base_Start+0x70>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a22      	ldr	r2, [pc, #136]	@ (8005998 <HAL_TIM_Base_Start+0xc4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_TIM_Base_Start+0x70>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	@ (800599c <HAL_TIM_Base_Start+0xc8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d013      	beq.n	8005944 <HAL_TIM_Base_Start+0x70>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1f      	ldr	r2, [pc, #124]	@ (80059a0 <HAL_TIM_Base_Start+0xcc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_TIM_Base_Start+0x70>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <HAL_TIM_Base_Start+0xd0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_TIM_Base_Start+0x70>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <HAL_TIM_Base_Start+0xd4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_TIM_Base_Start+0x70>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <HAL_TIM_Base_Start+0xd8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d115      	bne.n	8005970 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	4b19      	ldr	r3, [pc, #100]	@ (80059b0 <HAL_TIM_Base_Start+0xdc>)
 800594c:	4013      	ands	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b06      	cmp	r3, #6
 8005954:	d015      	beq.n	8005982 <HAL_TIM_Base_Start+0xae>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595c:	d011      	beq.n	8005982 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0201 	orr.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	e008      	b.n	8005982 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e000      	b.n	8005984 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40010000 	.word	0x40010000
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40010400 	.word	0x40010400
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40001800 	.word	0x40001800
 80059b0:	00010007 	.word	0x00010007

080059b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a1a      	ldr	r2, [r3, #32]
 80059c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10f      	bne.n	80059ec <HAL_TIM_Base_Stop+0x38>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a1a      	ldr	r2, [r3, #32]
 80059d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d107      	bne.n	80059ec <HAL_TIM_Base_Stop+0x38>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0201 	bic.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e049      	b.n	8005aa8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fc fcdd 	bl	80023e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f000 fdc3 	bl	80065cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIM_PWM_Start_IT+0x28>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e03c      	b.n	8005b52 <HAL_TIM_PWM_Start_IT+0xa2>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d109      	bne.n	8005af2 <HAL_TIM_PWM_Start_IT+0x42>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e02f      	b.n	8005b52 <HAL_TIM_PWM_Start_IT+0xa2>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start_IT+0x5c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e022      	b.n	8005b52 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d109      	bne.n	8005b26 <HAL_TIM_PWM_Start_IT+0x76>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	bf14      	ite	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	2300      	moveq	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	e015      	b.n	8005b52 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d109      	bne.n	8005b40 <HAL_TIM_PWM_Start_IT+0x90>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e008      	b.n	8005b52 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e0dd      	b.n	8005d16 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_PWM_Start_IT+0xba>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b68:	e023      	b.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x102>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_PWM_Start_IT+0xca>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b78:	e01b      	b.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x102>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start_IT+0xda>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b88:	e013      	b.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x102>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b0c      	cmp	r3, #12
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PWM_Start_IT+0xea>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b98:	e00b      	b.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x102>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d104      	bne.n	8005baa <HAL_TIM_PWM_Start_IT+0xfa>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ba8:	e003      	b.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x102>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b0c      	cmp	r3, #12
 8005bb6:	d841      	bhi.n	8005c3c <HAL_TIM_PWM_Start_IT+0x18c>
 8005bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc0 <HAL_TIM_PWM_Start_IT+0x110>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bf5 	.word	0x08005bf5
 8005bc4:	08005c3d 	.word	0x08005c3d
 8005bc8:	08005c3d 	.word	0x08005c3d
 8005bcc:	08005c3d 	.word	0x08005c3d
 8005bd0:	08005c07 	.word	0x08005c07
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005c3d 	.word	0x08005c3d
 8005be0:	08005c19 	.word	0x08005c19
 8005be4:	08005c3d 	.word	0x08005c3d
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005c3d 	.word	0x08005c3d
 8005bf0:	08005c2b 	.word	0x08005c2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0202 	orr.w	r2, r2, #2
 8005c02:	60da      	str	r2, [r3, #12]
      break;
 8005c04:	e01d      	b.n	8005c42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0204 	orr.w	r2, r2, #4
 8005c14:	60da      	str	r2, [r3, #12]
      break;
 8005c16:	e014      	b.n	8005c42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0208 	orr.w	r2, r2, #8
 8005c26:	60da      	str	r2, [r3, #12]
      break;
 8005c28:	e00b      	b.n	8005c42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0210 	orr.w	r2, r2, #16
 8005c38:	60da      	str	r2, [r3, #12]
      break;
 8005c3a:	e002      	b.n	8005c42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c40:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d165      	bne.n	8005d14 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 ffc5 	bl	8006be0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a31      	ldr	r2, [pc, #196]	@ (8005d20 <HAL_TIM_PWM_Start_IT+0x270>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIM_PWM_Start_IT+0x1ba>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2f      	ldr	r2, [pc, #188]	@ (8005d24 <HAL_TIM_PWM_Start_IT+0x274>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_Start_IT+0x1be>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_TIM_PWM_Start_IT+0x1c0>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c82:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a25      	ldr	r2, [pc, #148]	@ (8005d20 <HAL_TIM_PWM_Start_IT+0x270>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d022      	beq.n	8005cd4 <HAL_TIM_PWM_Start_IT+0x224>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c96:	d01d      	beq.n	8005cd4 <HAL_TIM_PWM_Start_IT+0x224>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a22      	ldr	r2, [pc, #136]	@ (8005d28 <HAL_TIM_PWM_Start_IT+0x278>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d018      	beq.n	8005cd4 <HAL_TIM_PWM_Start_IT+0x224>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a21      	ldr	r2, [pc, #132]	@ (8005d2c <HAL_TIM_PWM_Start_IT+0x27c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <HAL_TIM_PWM_Start_IT+0x224>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d30 <HAL_TIM_PWM_Start_IT+0x280>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00e      	beq.n	8005cd4 <HAL_TIM_PWM_Start_IT+0x224>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1a      	ldr	r2, [pc, #104]	@ (8005d24 <HAL_TIM_PWM_Start_IT+0x274>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d009      	beq.n	8005cd4 <HAL_TIM_PWM_Start_IT+0x224>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d34 <HAL_TIM_PWM_Start_IT+0x284>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <HAL_TIM_PWM_Start_IT+0x224>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1a      	ldr	r2, [pc, #104]	@ (8005d38 <HAL_TIM_PWM_Start_IT+0x288>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d115      	bne.n	8005d00 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	4b18      	ldr	r3, [pc, #96]	@ (8005d3c <HAL_TIM_PWM_Start_IT+0x28c>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b06      	cmp	r3, #6
 8005ce4:	d015      	beq.n	8005d12 <HAL_TIM_PWM_Start_IT+0x262>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cec:	d011      	beq.n	8005d12 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	e008      	b.n	8005d12 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e000      	b.n	8005d14 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d12:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40010400 	.word	0x40010400
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40001800 	.word	0x40001800
 8005d3c:	00010007 	.word	0x00010007

08005d40 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d841      	bhi.n	8005dd8 <HAL_TIM_PWM_Stop_IT+0x98>
 8005d54:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005dd9 	.word	0x08005dd9
 8005d64:	08005dd9 	.word	0x08005dd9
 8005d68:	08005dd9 	.word	0x08005dd9
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005dd9 	.word	0x08005dd9
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08005dd9 	.word	0x08005dd9
 8005d7c:	08005db5 	.word	0x08005db5
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005dd9 	.word	0x08005dd9
 8005d8c:	08005dc7 	.word	0x08005dc7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0202 	bic.w	r2, r2, #2
 8005d9e:	60da      	str	r2, [r3, #12]
      break;
 8005da0:	e01d      	b.n	8005dde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0204 	bic.w	r2, r2, #4
 8005db0:	60da      	str	r2, [r3, #12]
      break;
 8005db2:	e014      	b.n	8005dde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0208 	bic.w	r2, r2, #8
 8005dc2:	60da      	str	r2, [r3, #12]
      break;
 8005dc4:	e00b      	b.n	8005dde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0210 	bic.w	r2, r2, #16
 8005dd4:	60da      	str	r2, [r3, #12]
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      break;
 8005ddc:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d171      	bne.n	8005ec8 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2200      	movs	r2, #0
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fef7 	bl	8006be0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a37      	ldr	r2, [pc, #220]	@ (8005ed4 <HAL_TIM_PWM_Stop_IT+0x194>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIM_PWM_Stop_IT+0xc6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a35      	ldr	r2, [pc, #212]	@ (8005ed8 <HAL_TIM_PWM_Stop_IT+0x198>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_PWM_Stop_IT+0xca>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_TIM_PWM_Stop_IT+0xcc>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d017      	beq.n	8005e40 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10f      	bne.n	8005e40 <HAL_TIM_PWM_Stop_IT+0x100>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <HAL_TIM_PWM_Stop_IT+0x100>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6a1a      	ldr	r2, [r3, #32]
 8005e46:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10f      	bne.n	8005e70 <HAL_TIM_PWM_Stop_IT+0x130>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_PWM_Stop_IT+0x130>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <HAL_TIM_PWM_Stop_IT+0x140>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e7e:	e023      	b.n	8005ec8 <HAL_TIM_PWM_Stop_IT+0x188>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d104      	bne.n	8005e90 <HAL_TIM_PWM_Stop_IT+0x150>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e8e:	e01b      	b.n	8005ec8 <HAL_TIM_PWM_Stop_IT+0x188>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d104      	bne.n	8005ea0 <HAL_TIM_PWM_Stop_IT+0x160>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e9e:	e013      	b.n	8005ec8 <HAL_TIM_PWM_Stop_IT+0x188>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d104      	bne.n	8005eb0 <HAL_TIM_PWM_Stop_IT+0x170>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005eae:	e00b      	b.n	8005ec8 <HAL_TIM_PWM_Stop_IT+0x188>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b10      	cmp	r3, #16
 8005eb4:	d104      	bne.n	8005ec0 <HAL_TIM_PWM_Stop_IT+0x180>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ebe:	e003      	b.n	8005ec8 <HAL_TIM_PWM_Stop_IT+0x188>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40010400 	.word	0x40010400

08005edc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e08f      	b.n	8006010 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d106      	bne.n	8005f0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7fc faa7 	bl	8002458 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6899      	ldr	r1, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8006018 <HAL_TIM_Encoder_Init+0x13c>)
 8005f1e:	400b      	ands	r3, r1
 8005f20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f000 fb4d 	bl	80065cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4b31      	ldr	r3, [pc, #196]	@ (800601c <HAL_TIM_Encoder_Init+0x140>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	4313      	orrs	r3, r2
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4b2b      	ldr	r3, [pc, #172]	@ (8006020 <HAL_TIM_Encoder_Init+0x144>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4b2a      	ldr	r3, [pc, #168]	@ (8006024 <HAL_TIM_Encoder_Init+0x148>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	031b      	lsls	r3, r3, #12
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	fffebff8 	.word	0xfffebff8
 800601c:	fffffcfc 	.word	0xfffffcfc
 8006020:	fffff3f3 	.word	0xfffff3f3
 8006024:	ffff0f0f 	.word	0xffff0f0f

08006028 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006038:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006040:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006048:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006050:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d110      	bne.n	800607a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d102      	bne.n	8006064 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800605e:	7b7b      	ldrb	r3, [r7, #13]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d001      	beq.n	8006068 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e069      	b.n	800613c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006078:	e031      	b.n	80060de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b04      	cmp	r3, #4
 800607e:	d110      	bne.n	80060a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d102      	bne.n	800608c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006086:	7b3b      	ldrb	r3, [r7, #12]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d001      	beq.n	8006090 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e055      	b.n	800613c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060a0:	e01d      	b.n	80060de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d108      	bne.n	80060ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d105      	bne.n	80060ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ae:	7b7b      	ldrb	r3, [r7, #13]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d102      	bne.n	80060ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060b4:	7b3b      	ldrb	r3, [r7, #12]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d001      	beq.n	80060be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e03e      	b.n	800613c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_TIM_Encoder_Start+0xc4>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d008      	beq.n	80060fc <HAL_TIM_Encoder_Start+0xd4>
 80060ea:	e00f      	b.n	800610c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2201      	movs	r2, #1
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fd73 	bl	8006be0 <TIM_CCxChannelCmd>
      break;
 80060fa:	e016      	b.n	800612a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2201      	movs	r2, #1
 8006102:	2104      	movs	r1, #4
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fd6b 	bl	8006be0 <TIM_CCxChannelCmd>
      break;
 800610a:	e00e      	b.n	800612a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2201      	movs	r2, #1
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fd63 	bl	8006be0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2201      	movs	r2, #1
 8006120:	2104      	movs	r1, #4
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fd5c 	bl	8006be0 <TIM_CCxChannelCmd>
      break;
 8006128:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0201 	orr.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d020      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01b      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0202 	mvn.w	r2, #2
 8006178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa08 	bl	80065a4 <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f9fa 	bl	8006590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fa fb9d 	bl	80008dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d020      	beq.n	80061f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01b      	beq.n	80061f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0204 	mvn.w	r2, #4
 80061c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9e2 	bl	80065a4 <HAL_TIM_IC_CaptureCallback>
 80061e0:	e005      	b.n	80061ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9d4 	bl	8006590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7fa fb77 	bl	80008dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d020      	beq.n	8006240 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01b      	beq.n	8006240 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0208 	mvn.w	r2, #8
 8006210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2204      	movs	r2, #4
 8006216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f9bc 	bl	80065a4 <HAL_TIM_IC_CaptureCallback>
 800622c:	e005      	b.n	800623a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9ae 	bl	8006590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fa fb51 	bl	80008dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b00      	cmp	r3, #0
 8006248:	d020      	beq.n	800628c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01b      	beq.n	800628c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0210 	mvn.w	r2, #16
 800625c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2208      	movs	r2, #8
 8006262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f996 	bl	80065a4 <HAL_TIM_IC_CaptureCallback>
 8006278:	e005      	b.n	8006286 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f988 	bl	8006590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fa fb2b 	bl	80008dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00c      	beq.n	80062b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0201 	mvn.w	r2, #1
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f966 	bl	800657c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00c      	beq.n	80062de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80062d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fd3f 	bl	8006d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fd37 	bl	8006d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00c      	beq.n	8006326 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f949 	bl	80065b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00c      	beq.n	800634a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f06f 0220 	mvn.w	r2, #32
 8006342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fcff 	bl	8006d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800636a:	2b01      	cmp	r3, #1
 800636c:	d101      	bne.n	8006372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800636e:	2302      	movs	r3, #2
 8006370:	e0ff      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b14      	cmp	r3, #20
 800637e:	f200 80f0 	bhi.w	8006562 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006382:	a201      	add	r2, pc, #4	@ (adr r2, 8006388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	080063dd 	.word	0x080063dd
 800638c:	08006563 	.word	0x08006563
 8006390:	08006563 	.word	0x08006563
 8006394:	08006563 	.word	0x08006563
 8006398:	0800641d 	.word	0x0800641d
 800639c:	08006563 	.word	0x08006563
 80063a0:	08006563 	.word	0x08006563
 80063a4:	08006563 	.word	0x08006563
 80063a8:	0800645f 	.word	0x0800645f
 80063ac:	08006563 	.word	0x08006563
 80063b0:	08006563 	.word	0x08006563
 80063b4:	08006563 	.word	0x08006563
 80063b8:	0800649f 	.word	0x0800649f
 80063bc:	08006563 	.word	0x08006563
 80063c0:	08006563 	.word	0x08006563
 80063c4:	08006563 	.word	0x08006563
 80063c8:	080064e1 	.word	0x080064e1
 80063cc:	08006563 	.word	0x08006563
 80063d0:	08006563 	.word	0x08006563
 80063d4:	08006563 	.word	0x08006563
 80063d8:	08006521 	.word	0x08006521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f99e 	bl	8006724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0208 	orr.w	r2, r2, #8
 80063f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0204 	bic.w	r2, r2, #4
 8006406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6999      	ldr	r1, [r3, #24]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	619a      	str	r2, [r3, #24]
      break;
 800641a:	e0a5      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 f9f0 	bl	8006808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6999      	ldr	r1, [r3, #24]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	021a      	lsls	r2, r3, #8
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	619a      	str	r2, [r3, #24]
      break;
 800645c:	e084      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fa47 	bl	80068f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0208 	orr.w	r2, r2, #8
 8006478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0204 	bic.w	r2, r2, #4
 8006488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69d9      	ldr	r1, [r3, #28]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	61da      	str	r2, [r3, #28]
      break;
 800649c:	e064      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fa9d 	bl	80069e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69d9      	ldr	r1, [r3, #28]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	021a      	lsls	r2, r3, #8
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	61da      	str	r2, [r3, #28]
      break;
 80064de:	e043      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fad4 	bl	8006a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0208 	orr.w	r2, r2, #8
 80064fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0204 	bic.w	r2, r2, #4
 800650a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800651e:	e023      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fb06 	bl	8006b38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800653a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800654a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	021a      	lsls	r2, r3, #8
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006560:	e002      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
      break;
 8006566:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop

0800657c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a46      	ldr	r2, [pc, #280]	@ (80066f8 <TIM_Base_SetConfig+0x12c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ea:	d00f      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a43      	ldr	r2, [pc, #268]	@ (80066fc <TIM_Base_SetConfig+0x130>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a42      	ldr	r2, [pc, #264]	@ (8006700 <TIM_Base_SetConfig+0x134>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a41      	ldr	r2, [pc, #260]	@ (8006704 <TIM_Base_SetConfig+0x138>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a40      	ldr	r2, [pc, #256]	@ (8006708 <TIM_Base_SetConfig+0x13c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d108      	bne.n	800661e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a35      	ldr	r2, [pc, #212]	@ (80066f8 <TIM_Base_SetConfig+0x12c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d02b      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662c:	d027      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a32      	ldr	r2, [pc, #200]	@ (80066fc <TIM_Base_SetConfig+0x130>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d023      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a31      	ldr	r2, [pc, #196]	@ (8006700 <TIM_Base_SetConfig+0x134>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01f      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a30      	ldr	r2, [pc, #192]	@ (8006704 <TIM_Base_SetConfig+0x138>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01b      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2f      	ldr	r2, [pc, #188]	@ (8006708 <TIM_Base_SetConfig+0x13c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d017      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2e      	ldr	r2, [pc, #184]	@ (800670c <TIM_Base_SetConfig+0x140>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2d      	ldr	r2, [pc, #180]	@ (8006710 <TIM_Base_SetConfig+0x144>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00f      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2c      	ldr	r2, [pc, #176]	@ (8006714 <TIM_Base_SetConfig+0x148>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00b      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2b      	ldr	r2, [pc, #172]	@ (8006718 <TIM_Base_SetConfig+0x14c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d007      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2a      	ldr	r2, [pc, #168]	@ (800671c <TIM_Base_SetConfig+0x150>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a29      	ldr	r2, [pc, #164]	@ (8006720 <TIM_Base_SetConfig+0x154>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d108      	bne.n	8006690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a10      	ldr	r2, [pc, #64]	@ (80066f8 <TIM_Base_SetConfig+0x12c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_Base_SetConfig+0xf8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a12      	ldr	r2, [pc, #72]	@ (8006708 <TIM_Base_SetConfig+0x13c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d103      	bne.n	80066cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d105      	bne.n	80066ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f023 0201 	bic.w	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	611a      	str	r2, [r3, #16]
  }
}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40010000 	.word	0x40010000
 80066fc:	40000400 	.word	0x40000400
 8006700:	40000800 	.word	0x40000800
 8006704:	40000c00 	.word	0x40000c00
 8006708:	40010400 	.word	0x40010400
 800670c:	40014000 	.word	0x40014000
 8006710:	40014400 	.word	0x40014400
 8006714:	40014800 	.word	0x40014800
 8006718:	40001800 	.word	0x40001800
 800671c:	40001c00 	.word	0x40001c00
 8006720:	40002000 	.word	0x40002000

08006724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f023 0201 	bic.w	r2, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4b2b      	ldr	r3, [pc, #172]	@ (80067fc <TIM_OC1_SetConfig+0xd8>)
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0303 	bic.w	r3, r3, #3
 800675a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f023 0302 	bic.w	r3, r3, #2
 800676c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a21      	ldr	r2, [pc, #132]	@ (8006800 <TIM_OC1_SetConfig+0xdc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC1_SetConfig+0x64>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a20      	ldr	r2, [pc, #128]	@ (8006804 <TIM_OC1_SetConfig+0xe0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10c      	bne.n	80067a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0308 	bic.w	r3, r3, #8
 800678e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f023 0304 	bic.w	r3, r3, #4
 80067a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <TIM_OC1_SetConfig+0xdc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC1_SetConfig+0x8e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <TIM_OC1_SetConfig+0xe0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d111      	bne.n	80067d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	621a      	str	r2, [r3, #32]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	fffeff8f 	.word	0xfffeff8f
 8006800:	40010000 	.word	0x40010000
 8006804:	40010400 	.word	0x40010400

08006808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f023 0210 	bic.w	r2, r3, #16
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4b2e      	ldr	r3, [pc, #184]	@ (80068ec <TIM_OC2_SetConfig+0xe4>)
 8006834:	4013      	ands	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0320 	bic.w	r3, r3, #32
 8006852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a23      	ldr	r2, [pc, #140]	@ (80068f0 <TIM_OC2_SetConfig+0xe8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC2_SetConfig+0x68>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a22      	ldr	r2, [pc, #136]	@ (80068f4 <TIM_OC2_SetConfig+0xec>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d10d      	bne.n	800688c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800688a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a18      	ldr	r2, [pc, #96]	@ (80068f0 <TIM_OC2_SetConfig+0xe8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_OC2_SetConfig+0x94>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <TIM_OC2_SetConfig+0xec>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d113      	bne.n	80068c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	feff8fff 	.word	0xfeff8fff
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400

080068f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4b2d      	ldr	r3, [pc, #180]	@ (80069d8 <TIM_OC3_SetConfig+0xe0>)
 8006924:	4013      	ands	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0303 	bic.w	r3, r3, #3
 800692e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a22      	ldr	r2, [pc, #136]	@ (80069dc <TIM_OC3_SetConfig+0xe4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_OC3_SetConfig+0x66>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a21      	ldr	r2, [pc, #132]	@ (80069e0 <TIM_OC3_SetConfig+0xe8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d10d      	bne.n	800697a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a17      	ldr	r2, [pc, #92]	@ (80069dc <TIM_OC3_SetConfig+0xe4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_OC3_SetConfig+0x92>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a16      	ldr	r2, [pc, #88]	@ (80069e0 <TIM_OC3_SetConfig+0xe8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d113      	bne.n	80069b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	621a      	str	r2, [r3, #32]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	fffeff8f 	.word	0xfffeff8f
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40010400 	.word	0x40010400

080069e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a88 <TIM_OC4_SetConfig+0xa4>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a13      	ldr	r2, [pc, #76]	@ (8006a8c <TIM_OC4_SetConfig+0xa8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC4_SetConfig+0x68>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a12      	ldr	r2, [pc, #72]	@ (8006a90 <TIM_OC4_SetConfig+0xac>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d109      	bne.n	8006a60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	feff8fff 	.word	0xfeff8fff
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40010400 	.word	0x40010400

08006a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4b1b      	ldr	r3, [pc, #108]	@ (8006b2c <TIM_OC5_SetConfig+0x98>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a12      	ldr	r2, [pc, #72]	@ (8006b30 <TIM_OC5_SetConfig+0x9c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC5_SetConfig+0x5e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a11      	ldr	r2, [pc, #68]	@ (8006b34 <TIM_OC5_SetConfig+0xa0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d109      	bne.n	8006b06 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	621a      	str	r2, [r3, #32]
}
 8006b20:	bf00      	nop
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	fffeff8f 	.word	0xfffeff8f
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40010400 	.word	0x40010400

08006b38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4b1c      	ldr	r3, [pc, #112]	@ (8006bd4 <TIM_OC6_SetConfig+0x9c>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	051b      	lsls	r3, r3, #20
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a13      	ldr	r2, [pc, #76]	@ (8006bd8 <TIM_OC6_SetConfig+0xa0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC6_SetConfig+0x60>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a12      	ldr	r2, [pc, #72]	@ (8006bdc <TIM_OC6_SetConfig+0xa4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d109      	bne.n	8006bac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	029b      	lsls	r3, r3, #10
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	feff8fff 	.word	0xfeff8fff
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40010400 	.word	0x40010400

08006be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	43db      	mvns	r3, r3
 8006c02:	401a      	ands	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1a      	ldr	r2, [r3, #32]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	fa01 f303 	lsl.w	r3, r1, r3
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e06d      	b.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a30      	ldr	r2, [pc, #192]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a2f      	ldr	r2, [pc, #188]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d108      	bne.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a20      	ldr	r2, [pc, #128]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d022      	beq.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb6:	d01d      	beq.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d018      	beq.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d013      	beq.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00e      	beq.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a15      	ldr	r2, [pc, #84]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d009      	beq.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d004      	beq.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a15      	ldr	r2, [pc, #84]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d10c      	bne.n	8006d0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40010400 	.word	0x40010400
 8006d34:	40000400 	.word	0x40000400
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	40000c00 	.word	0x40000c00
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40001800 	.word	0x40001800

08006d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e040      	b.n	8006e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fb fc1e 	bl	80025e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2224      	movs	r2, #36	@ 0x24
 8006db0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0201 	bic.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fe56 	bl	8007a7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fbef 	bl	80075b4 <UART_SetConfig>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e01b      	b.n	8006e18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fed5 	bl	8007bc0 <UART_CheckIdleState>
 8006e16:	4603      	mov	r3, r0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08a      	sub	sp, #40	@ 0x28
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d177      	bne.n	8006f28 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <HAL_UART_Transmit+0x24>
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e070      	b.n	8006f2a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2221      	movs	r2, #33	@ 0x21
 8006e54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e56:	f7fb fe3f 	bl	8002ad8 <HAL_GetTick>
 8006e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	88fa      	ldrh	r2, [r7, #6]
 8006e60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	88fa      	ldrh	r2, [r7, #6]
 8006e68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e74:	d108      	bne.n	8006e88 <HAL_UART_Transmit+0x68>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	e003      	b.n	8006e90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e90:	e02f      	b.n	8006ef2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2180      	movs	r1, #128	@ 0x80
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fee6 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e03b      	b.n	8006f2a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10b      	bne.n	8006ed0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ec6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	3302      	adds	r3, #2
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	e007      	b.n	8006ee0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	781a      	ldrb	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	3301      	adds	r3, #1
 8006ede:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1c9      	bne.n	8006e92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2200      	movs	r2, #0
 8006f06:	2140      	movs	r1, #64	@ 0x40
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 feb0 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2220      	movs	r2, #32
 8006f18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e005      	b.n	8006f2a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e000      	b.n	8006f2a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006f28:	2302      	movs	r3, #2
  }
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3720      	adds	r7, #32
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b08a      	sub	sp, #40	@ 0x28
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d132      	bne.n	8006fb0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_UART_Receive_DMA+0x24>
 8006f50:	88fb      	ldrh	r3, [r7, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e02b      	b.n	8006fb2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d018      	beq.n	8006fa0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	623b      	str	r3, [r7, #32]
 8006f8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	6a3a      	ldr	r2, [r7, #32]
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e6      	bne.n	8006f6e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006fa0:	88fb      	ldrh	r3, [r7, #6]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fece 	bl	8007d48 <UART_Start_Receive_DMA>
 8006fac:	4603      	mov	r3, r0
 8006fae:	e000      	b.n	8006fb2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3728      	adds	r7, #40	@ 0x28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b0ba      	sub	sp, #232	@ 0xe8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006fe6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006fea:	4013      	ands	r3, r2
 8006fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d115      	bne.n	8007024 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00f      	beq.n	8007024 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8297 	beq.w	8007548 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
      }
      return;
 8007022:	e291      	b.n	8007548 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 8117 	beq.w	800725c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800702e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800703a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800703e:	4b85      	ldr	r3, [pc, #532]	@ (8007254 <HAL_UART_IRQHandler+0x298>)
 8007040:	4013      	ands	r3, r2
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 810a 	beq.w	800725c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d011      	beq.n	8007078 <HAL_UART_IRQHandler+0xbc>
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2201      	movs	r2, #1
 8007066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800706e:	f043 0201 	orr.w	r2, r3, #1
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d011      	beq.n	80070a8 <HAL_UART_IRQHandler+0xec>
 8007084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2202      	movs	r2, #2
 8007096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800709e:	f043 0204 	orr.w	r2, r3, #4
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d011      	beq.n	80070d8 <HAL_UART_IRQHandler+0x11c>
 80070b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2204      	movs	r2, #4
 80070c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ce:	f043 0202 	orr.w	r2, r3, #2
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d017      	beq.n	8007114 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d105      	bne.n	80070fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2208      	movs	r2, #8
 8007102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800710a:	f043 0208 	orr.w	r2, r3, #8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800711c:	2b00      	cmp	r3, #0
 800711e:	d012      	beq.n	8007146 <HAL_UART_IRQHandler+0x18a>
 8007120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007124:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00c      	beq.n	8007146 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 81fd 	beq.w	800754c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00d      	beq.n	800717a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800715e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007180:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718e:	2b40      	cmp	r3, #64	@ 0x40
 8007190:	d005      	beq.n	800719e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007196:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800719a:	2b00      	cmp	r3, #0
 800719c:	d04f      	beq.n	800723e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fe98 	bl	8007ed4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ae:	2b40      	cmp	r3, #64	@ 0x40
 80071b0:	d141      	bne.n	8007236 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3308      	adds	r3, #8
 80071da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1d9      	bne.n	80071b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007202:	2b00      	cmp	r3, #0
 8007204:	d013      	beq.n	800722e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800720a:	4a13      	ldr	r2, [pc, #76]	@ (8007258 <HAL_UART_IRQHandler+0x29c>)
 800720c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007212:	4618      	mov	r0, r3
 8007214:	f7fb ff20 	bl	8003058 <HAL_DMA_Abort_IT>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d017      	beq.n	800724e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007228:	4610      	mov	r0, r2
 800722a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722c:	e00f      	b.n	800724e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f9aa 	bl	8007588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007234:	e00b      	b.n	800724e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9a6 	bl	8007588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	e007      	b.n	800724e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f9a2 	bl	8007588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800724c:	e17e      	b.n	800754c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724e:	bf00      	nop
    return;
 8007250:	e17c      	b.n	800754c <HAL_UART_IRQHandler+0x590>
 8007252:	bf00      	nop
 8007254:	04000120 	.word	0x04000120
 8007258:	08008181 	.word	0x08008181

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007260:	2b01      	cmp	r3, #1
 8007262:	f040 814c 	bne.w	80074fe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8145 	beq.w	80074fe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 813e 	beq.w	80074fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2210      	movs	r2, #16
 8007288:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007294:	2b40      	cmp	r3, #64	@ 0x40
 8007296:	f040 80b6 	bne.w	8007406 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8150 	beq.w	8007550 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072ba:	429a      	cmp	r2, r3
 80072bc:	f080 8148 	bcs.w	8007550 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d4:	f000 8086 	beq.w	80073e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007306:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800730e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800731a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1da      	bne.n	80072d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3308      	adds	r3, #8
 8007328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3308      	adds	r3, #8
 8007342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800734a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800734e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e1      	bne.n	8007322 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800736e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e3      	bne.n	800735e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2220      	movs	r2, #32
 800739a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b4:	f023 0310 	bic.w	r3, r3, #16
 80073b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e4      	bne.n	80073a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fb fdca 	bl	8002f78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8cc 	bl	800759c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007404:	e0a4      	b.n	8007550 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007412:	b29b      	uxth	r3, r3
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8096 	beq.w	8007554 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8091 	beq.w	8007554 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007454:	647b      	str	r3, [r7, #68]	@ 0x44
 8007456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800745a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e4      	bne.n	8007432 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3308      	adds	r3, #8
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	623b      	str	r3, [r7, #32]
   return(result);
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3308      	adds	r3, #8
 8007488:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800748c:	633a      	str	r2, [r7, #48]	@ 0x30
 800748e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e3      	bne.n	8007468 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f023 0310 	bic.w	r3, r3, #16
 80074c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	69b9      	ldr	r1, [r7, #24]
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	617b      	str	r3, [r7, #20]
   return(result);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e4      	bne.n	80074b4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2202      	movs	r2, #2
 80074ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f850 	bl	800759c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074fc:	e02a      	b.n	8007554 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80074fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00e      	beq.n	8007528 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800750a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800750e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007512:	2b00      	cmp	r3, #0
 8007514:	d008      	beq.n	8007528 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01c      	beq.n	8007558 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
    }
    return;
 8007526:	e017      	b.n	8007558 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800752c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d012      	beq.n	800755a <HAL_UART_IRQHandler+0x59e>
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00c      	beq.n	800755a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fe33 	bl	80081ac <UART_EndTransmit_IT>
    return;
 8007546:	e008      	b.n	800755a <HAL_UART_IRQHandler+0x59e>
      return;
 8007548:	bf00      	nop
 800754a:	e006      	b.n	800755a <HAL_UART_IRQHandler+0x59e>
    return;
 800754c:	bf00      	nop
 800754e:	e004      	b.n	800755a <HAL_UART_IRQHandler+0x59e>
      return;
 8007550:	bf00      	nop
 8007552:	e002      	b.n	800755a <HAL_UART_IRQHandler+0x59e>
      return;
 8007554:	bf00      	nop
 8007556:	e000      	b.n	800755a <HAL_UART_IRQHandler+0x59e>
    return;
 8007558:	bf00      	nop
  }

}
 800755a:	37e8      	adds	r7, #232	@ 0xe8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4ba6      	ldr	r3, [pc, #664]	@ (8007878 <UART_SetConfig+0x2c4>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	6979      	ldr	r1, [r7, #20]
 80075e8:	430b      	orrs	r3, r1
 80075ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	430a      	orrs	r2, r1
 8007624:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a94      	ldr	r2, [pc, #592]	@ (800787c <UART_SetConfig+0x2c8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d120      	bne.n	8007672 <UART_SetConfig+0xbe>
 8007630:	4b93      	ldr	r3, [pc, #588]	@ (8007880 <UART_SetConfig+0x2cc>)
 8007632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	2b03      	cmp	r3, #3
 800763c:	d816      	bhi.n	800766c <UART_SetConfig+0xb8>
 800763e:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <UART_SetConfig+0x90>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007655 	.word	0x08007655
 8007648:	08007661 	.word	0x08007661
 800764c:	0800765b 	.word	0x0800765b
 8007650:	08007667 	.word	0x08007667
 8007654:	2301      	movs	r3, #1
 8007656:	77fb      	strb	r3, [r7, #31]
 8007658:	e150      	b.n	80078fc <UART_SetConfig+0x348>
 800765a:	2302      	movs	r3, #2
 800765c:	77fb      	strb	r3, [r7, #31]
 800765e:	e14d      	b.n	80078fc <UART_SetConfig+0x348>
 8007660:	2304      	movs	r3, #4
 8007662:	77fb      	strb	r3, [r7, #31]
 8007664:	e14a      	b.n	80078fc <UART_SetConfig+0x348>
 8007666:	2308      	movs	r3, #8
 8007668:	77fb      	strb	r3, [r7, #31]
 800766a:	e147      	b.n	80078fc <UART_SetConfig+0x348>
 800766c:	2310      	movs	r3, #16
 800766e:	77fb      	strb	r3, [r7, #31]
 8007670:	e144      	b.n	80078fc <UART_SetConfig+0x348>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a83      	ldr	r2, [pc, #524]	@ (8007884 <UART_SetConfig+0x2d0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d132      	bne.n	80076e2 <UART_SetConfig+0x12e>
 800767c:	4b80      	ldr	r3, [pc, #512]	@ (8007880 <UART_SetConfig+0x2cc>)
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007682:	f003 030c 	and.w	r3, r3, #12
 8007686:	2b0c      	cmp	r3, #12
 8007688:	d828      	bhi.n	80076dc <UART_SetConfig+0x128>
 800768a:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0xdc>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080076dd 	.word	0x080076dd
 8007698:	080076dd 	.word	0x080076dd
 800769c:	080076dd 	.word	0x080076dd
 80076a0:	080076d1 	.word	0x080076d1
 80076a4:	080076dd 	.word	0x080076dd
 80076a8:	080076dd 	.word	0x080076dd
 80076ac:	080076dd 	.word	0x080076dd
 80076b0:	080076cb 	.word	0x080076cb
 80076b4:	080076dd 	.word	0x080076dd
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	080076d7 	.word	0x080076d7
 80076c4:	2300      	movs	r3, #0
 80076c6:	77fb      	strb	r3, [r7, #31]
 80076c8:	e118      	b.n	80078fc <UART_SetConfig+0x348>
 80076ca:	2302      	movs	r3, #2
 80076cc:	77fb      	strb	r3, [r7, #31]
 80076ce:	e115      	b.n	80078fc <UART_SetConfig+0x348>
 80076d0:	2304      	movs	r3, #4
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	e112      	b.n	80078fc <UART_SetConfig+0x348>
 80076d6:	2308      	movs	r3, #8
 80076d8:	77fb      	strb	r3, [r7, #31]
 80076da:	e10f      	b.n	80078fc <UART_SetConfig+0x348>
 80076dc:	2310      	movs	r3, #16
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e10c      	b.n	80078fc <UART_SetConfig+0x348>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a68      	ldr	r2, [pc, #416]	@ (8007888 <UART_SetConfig+0x2d4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d120      	bne.n	800772e <UART_SetConfig+0x17a>
 80076ec:	4b64      	ldr	r3, [pc, #400]	@ (8007880 <UART_SetConfig+0x2cc>)
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076f6:	2b30      	cmp	r3, #48	@ 0x30
 80076f8:	d013      	beq.n	8007722 <UART_SetConfig+0x16e>
 80076fa:	2b30      	cmp	r3, #48	@ 0x30
 80076fc:	d814      	bhi.n	8007728 <UART_SetConfig+0x174>
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d009      	beq.n	8007716 <UART_SetConfig+0x162>
 8007702:	2b20      	cmp	r3, #32
 8007704:	d810      	bhi.n	8007728 <UART_SetConfig+0x174>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <UART_SetConfig+0x15c>
 800770a:	2b10      	cmp	r3, #16
 800770c:	d006      	beq.n	800771c <UART_SetConfig+0x168>
 800770e:	e00b      	b.n	8007728 <UART_SetConfig+0x174>
 8007710:	2300      	movs	r3, #0
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	e0f2      	b.n	80078fc <UART_SetConfig+0x348>
 8007716:	2302      	movs	r3, #2
 8007718:	77fb      	strb	r3, [r7, #31]
 800771a:	e0ef      	b.n	80078fc <UART_SetConfig+0x348>
 800771c:	2304      	movs	r3, #4
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e0ec      	b.n	80078fc <UART_SetConfig+0x348>
 8007722:	2308      	movs	r3, #8
 8007724:	77fb      	strb	r3, [r7, #31]
 8007726:	e0e9      	b.n	80078fc <UART_SetConfig+0x348>
 8007728:	2310      	movs	r3, #16
 800772a:	77fb      	strb	r3, [r7, #31]
 800772c:	e0e6      	b.n	80078fc <UART_SetConfig+0x348>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a56      	ldr	r2, [pc, #344]	@ (800788c <UART_SetConfig+0x2d8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d120      	bne.n	800777a <UART_SetConfig+0x1c6>
 8007738:	4b51      	ldr	r3, [pc, #324]	@ (8007880 <UART_SetConfig+0x2cc>)
 800773a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007742:	2bc0      	cmp	r3, #192	@ 0xc0
 8007744:	d013      	beq.n	800776e <UART_SetConfig+0x1ba>
 8007746:	2bc0      	cmp	r3, #192	@ 0xc0
 8007748:	d814      	bhi.n	8007774 <UART_SetConfig+0x1c0>
 800774a:	2b80      	cmp	r3, #128	@ 0x80
 800774c:	d009      	beq.n	8007762 <UART_SetConfig+0x1ae>
 800774e:	2b80      	cmp	r3, #128	@ 0x80
 8007750:	d810      	bhi.n	8007774 <UART_SetConfig+0x1c0>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <UART_SetConfig+0x1a8>
 8007756:	2b40      	cmp	r3, #64	@ 0x40
 8007758:	d006      	beq.n	8007768 <UART_SetConfig+0x1b4>
 800775a:	e00b      	b.n	8007774 <UART_SetConfig+0x1c0>
 800775c:	2300      	movs	r3, #0
 800775e:	77fb      	strb	r3, [r7, #31]
 8007760:	e0cc      	b.n	80078fc <UART_SetConfig+0x348>
 8007762:	2302      	movs	r3, #2
 8007764:	77fb      	strb	r3, [r7, #31]
 8007766:	e0c9      	b.n	80078fc <UART_SetConfig+0x348>
 8007768:	2304      	movs	r3, #4
 800776a:	77fb      	strb	r3, [r7, #31]
 800776c:	e0c6      	b.n	80078fc <UART_SetConfig+0x348>
 800776e:	2308      	movs	r3, #8
 8007770:	77fb      	strb	r3, [r7, #31]
 8007772:	e0c3      	b.n	80078fc <UART_SetConfig+0x348>
 8007774:	2310      	movs	r3, #16
 8007776:	77fb      	strb	r3, [r7, #31]
 8007778:	e0c0      	b.n	80078fc <UART_SetConfig+0x348>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a44      	ldr	r2, [pc, #272]	@ (8007890 <UART_SetConfig+0x2dc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d125      	bne.n	80077d0 <UART_SetConfig+0x21c>
 8007784:	4b3e      	ldr	r3, [pc, #248]	@ (8007880 <UART_SetConfig+0x2cc>)
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800778a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800778e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007792:	d017      	beq.n	80077c4 <UART_SetConfig+0x210>
 8007794:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007798:	d817      	bhi.n	80077ca <UART_SetConfig+0x216>
 800779a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800779e:	d00b      	beq.n	80077b8 <UART_SetConfig+0x204>
 80077a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077a4:	d811      	bhi.n	80077ca <UART_SetConfig+0x216>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <UART_SetConfig+0x1fe>
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ae:	d006      	beq.n	80077be <UART_SetConfig+0x20a>
 80077b0:	e00b      	b.n	80077ca <UART_SetConfig+0x216>
 80077b2:	2300      	movs	r3, #0
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e0a1      	b.n	80078fc <UART_SetConfig+0x348>
 80077b8:	2302      	movs	r3, #2
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e09e      	b.n	80078fc <UART_SetConfig+0x348>
 80077be:	2304      	movs	r3, #4
 80077c0:	77fb      	strb	r3, [r7, #31]
 80077c2:	e09b      	b.n	80078fc <UART_SetConfig+0x348>
 80077c4:	2308      	movs	r3, #8
 80077c6:	77fb      	strb	r3, [r7, #31]
 80077c8:	e098      	b.n	80078fc <UART_SetConfig+0x348>
 80077ca:	2310      	movs	r3, #16
 80077cc:	77fb      	strb	r3, [r7, #31]
 80077ce:	e095      	b.n	80078fc <UART_SetConfig+0x348>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007894 <UART_SetConfig+0x2e0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d125      	bne.n	8007826 <UART_SetConfig+0x272>
 80077da:	4b29      	ldr	r3, [pc, #164]	@ (8007880 <UART_SetConfig+0x2cc>)
 80077dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077e8:	d017      	beq.n	800781a <UART_SetConfig+0x266>
 80077ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077ee:	d817      	bhi.n	8007820 <UART_SetConfig+0x26c>
 80077f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077f4:	d00b      	beq.n	800780e <UART_SetConfig+0x25a>
 80077f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077fa:	d811      	bhi.n	8007820 <UART_SetConfig+0x26c>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <UART_SetConfig+0x254>
 8007800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007804:	d006      	beq.n	8007814 <UART_SetConfig+0x260>
 8007806:	e00b      	b.n	8007820 <UART_SetConfig+0x26c>
 8007808:	2301      	movs	r3, #1
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e076      	b.n	80078fc <UART_SetConfig+0x348>
 800780e:	2302      	movs	r3, #2
 8007810:	77fb      	strb	r3, [r7, #31]
 8007812:	e073      	b.n	80078fc <UART_SetConfig+0x348>
 8007814:	2304      	movs	r3, #4
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e070      	b.n	80078fc <UART_SetConfig+0x348>
 800781a:	2308      	movs	r3, #8
 800781c:	77fb      	strb	r3, [r7, #31]
 800781e:	e06d      	b.n	80078fc <UART_SetConfig+0x348>
 8007820:	2310      	movs	r3, #16
 8007822:	77fb      	strb	r3, [r7, #31]
 8007824:	e06a      	b.n	80078fc <UART_SetConfig+0x348>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1b      	ldr	r2, [pc, #108]	@ (8007898 <UART_SetConfig+0x2e4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d138      	bne.n	80078a2 <UART_SetConfig+0x2ee>
 8007830:	4b13      	ldr	r3, [pc, #76]	@ (8007880 <UART_SetConfig+0x2cc>)
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007836:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800783a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800783e:	d017      	beq.n	8007870 <UART_SetConfig+0x2bc>
 8007840:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007844:	d82a      	bhi.n	800789c <UART_SetConfig+0x2e8>
 8007846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800784a:	d00b      	beq.n	8007864 <UART_SetConfig+0x2b0>
 800784c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007850:	d824      	bhi.n	800789c <UART_SetConfig+0x2e8>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <UART_SetConfig+0x2aa>
 8007856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800785a:	d006      	beq.n	800786a <UART_SetConfig+0x2b6>
 800785c:	e01e      	b.n	800789c <UART_SetConfig+0x2e8>
 800785e:	2300      	movs	r3, #0
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e04b      	b.n	80078fc <UART_SetConfig+0x348>
 8007864:	2302      	movs	r3, #2
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e048      	b.n	80078fc <UART_SetConfig+0x348>
 800786a:	2304      	movs	r3, #4
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e045      	b.n	80078fc <UART_SetConfig+0x348>
 8007870:	2308      	movs	r3, #8
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	e042      	b.n	80078fc <UART_SetConfig+0x348>
 8007876:	bf00      	nop
 8007878:	efff69f3 	.word	0xefff69f3
 800787c:	40011000 	.word	0x40011000
 8007880:	40023800 	.word	0x40023800
 8007884:	40004400 	.word	0x40004400
 8007888:	40004800 	.word	0x40004800
 800788c:	40004c00 	.word	0x40004c00
 8007890:	40005000 	.word	0x40005000
 8007894:	40011400 	.word	0x40011400
 8007898:	40007800 	.word	0x40007800
 800789c:	2310      	movs	r3, #16
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e02c      	b.n	80078fc <UART_SetConfig+0x348>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a72      	ldr	r2, [pc, #456]	@ (8007a70 <UART_SetConfig+0x4bc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d125      	bne.n	80078f8 <UART_SetConfig+0x344>
 80078ac:	4b71      	ldr	r3, [pc, #452]	@ (8007a74 <UART_SetConfig+0x4c0>)
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80078b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80078ba:	d017      	beq.n	80078ec <UART_SetConfig+0x338>
 80078bc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80078c0:	d817      	bhi.n	80078f2 <UART_SetConfig+0x33e>
 80078c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c6:	d00b      	beq.n	80078e0 <UART_SetConfig+0x32c>
 80078c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078cc:	d811      	bhi.n	80078f2 <UART_SetConfig+0x33e>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <UART_SetConfig+0x326>
 80078d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078d6:	d006      	beq.n	80078e6 <UART_SetConfig+0x332>
 80078d8:	e00b      	b.n	80078f2 <UART_SetConfig+0x33e>
 80078da:	2300      	movs	r3, #0
 80078dc:	77fb      	strb	r3, [r7, #31]
 80078de:	e00d      	b.n	80078fc <UART_SetConfig+0x348>
 80078e0:	2302      	movs	r3, #2
 80078e2:	77fb      	strb	r3, [r7, #31]
 80078e4:	e00a      	b.n	80078fc <UART_SetConfig+0x348>
 80078e6:	2304      	movs	r3, #4
 80078e8:	77fb      	strb	r3, [r7, #31]
 80078ea:	e007      	b.n	80078fc <UART_SetConfig+0x348>
 80078ec:	2308      	movs	r3, #8
 80078ee:	77fb      	strb	r3, [r7, #31]
 80078f0:	e004      	b.n	80078fc <UART_SetConfig+0x348>
 80078f2:	2310      	movs	r3, #16
 80078f4:	77fb      	strb	r3, [r7, #31]
 80078f6:	e001      	b.n	80078fc <UART_SetConfig+0x348>
 80078f8:	2310      	movs	r3, #16
 80078fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007904:	d15b      	bne.n	80079be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007906:	7ffb      	ldrb	r3, [r7, #31]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d828      	bhi.n	800795e <UART_SetConfig+0x3aa>
 800790c:	a201      	add	r2, pc, #4	@ (adr r2, 8007914 <UART_SetConfig+0x360>)
 800790e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007912:	bf00      	nop
 8007914:	08007939 	.word	0x08007939
 8007918:	08007941 	.word	0x08007941
 800791c:	08007949 	.word	0x08007949
 8007920:	0800795f 	.word	0x0800795f
 8007924:	0800794f 	.word	0x0800794f
 8007928:	0800795f 	.word	0x0800795f
 800792c:	0800795f 	.word	0x0800795f
 8007930:	0800795f 	.word	0x0800795f
 8007934:	08007957 	.word	0x08007957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007938:	f7fd fab2 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 800793c:	61b8      	str	r0, [r7, #24]
        break;
 800793e:	e013      	b.n	8007968 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007940:	f7fd fac2 	bl	8004ec8 <HAL_RCC_GetPCLK2Freq>
 8007944:	61b8      	str	r0, [r7, #24]
        break;
 8007946:	e00f      	b.n	8007968 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007948:	4b4b      	ldr	r3, [pc, #300]	@ (8007a78 <UART_SetConfig+0x4c4>)
 800794a:	61bb      	str	r3, [r7, #24]
        break;
 800794c:	e00c      	b.n	8007968 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800794e:	f7fd f995 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8007952:	61b8      	str	r0, [r7, #24]
        break;
 8007954:	e008      	b.n	8007968 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800795a:	61bb      	str	r3, [r7, #24]
        break;
 800795c:	e004      	b.n	8007968 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	77bb      	strb	r3, [r7, #30]
        break;
 8007966:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d074      	beq.n	8007a58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	005a      	lsls	r2, r3, #1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	441a      	add	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007982:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b0f      	cmp	r3, #15
 8007988:	d916      	bls.n	80079b8 <UART_SetConfig+0x404>
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007990:	d212      	bcs.n	80079b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f023 030f 	bic.w	r3, r3, #15
 800799a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	89fb      	ldrh	r3, [r7, #14]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	89fa      	ldrh	r2, [r7, #14]
 80079b4:	60da      	str	r2, [r3, #12]
 80079b6:	e04f      	b.n	8007a58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	77bb      	strb	r3, [r7, #30]
 80079bc:	e04c      	b.n	8007a58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079be:	7ffb      	ldrb	r3, [r7, #31]
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d828      	bhi.n	8007a16 <UART_SetConfig+0x462>
 80079c4:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0x418>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	080079f9 	.word	0x080079f9
 80079d4:	08007a01 	.word	0x08007a01
 80079d8:	08007a17 	.word	0x08007a17
 80079dc:	08007a07 	.word	0x08007a07
 80079e0:	08007a17 	.word	0x08007a17
 80079e4:	08007a17 	.word	0x08007a17
 80079e8:	08007a17 	.word	0x08007a17
 80079ec:	08007a0f 	.word	0x08007a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f0:	f7fd fa56 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 80079f4:	61b8      	str	r0, [r7, #24]
        break;
 80079f6:	e013      	b.n	8007a20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f8:	f7fd fa66 	bl	8004ec8 <HAL_RCC_GetPCLK2Freq>
 80079fc:	61b8      	str	r0, [r7, #24]
        break;
 80079fe:	e00f      	b.n	8007a20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a00:	4b1d      	ldr	r3, [pc, #116]	@ (8007a78 <UART_SetConfig+0x4c4>)
 8007a02:	61bb      	str	r3, [r7, #24]
        break;
 8007a04:	e00c      	b.n	8007a20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a06:	f7fd f939 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8007a0a:	61b8      	str	r0, [r7, #24]
        break;
 8007a0c:	e008      	b.n	8007a20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a12:	61bb      	str	r3, [r7, #24]
        break;
 8007a14:	e004      	b.n	8007a20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	77bb      	strb	r3, [r7, #30]
        break;
 8007a1e:	bf00      	nop
    }

    if (pclk != 0U)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d018      	beq.n	8007a58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	085a      	lsrs	r2, r3, #1
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	441a      	add	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b0f      	cmp	r3, #15
 8007a3e:	d909      	bls.n	8007a54 <UART_SetConfig+0x4a0>
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a46:	d205      	bcs.n	8007a54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60da      	str	r2, [r3, #12]
 8007a52:	e001      	b.n	8007a58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007a64:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3720      	adds	r7, #32
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40007c00 	.word	0x40007c00
 8007a74:	40023800 	.word	0x40023800
 8007a78:	00f42400 	.word	0x00f42400

08007a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a88:	f003 0308 	and.w	r3, r3, #8
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	f003 0310 	and.w	r3, r3, #16
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01a      	beq.n	8007b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b7a:	d10a      	bne.n	8007b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	605a      	str	r2, [r3, #4]
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08c      	sub	sp, #48	@ 0x30
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bd0:	f7fa ff82 	bl	8002ad8 <HAL_GetTick>
 8007bd4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d12e      	bne.n	8007c42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007be4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	2200      	movs	r2, #0
 8007bee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f83b 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d021      	beq.n	8007c42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c12:	623b      	str	r3, [r7, #32]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	61fb      	str	r3, [r7, #28]
 8007c1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	69b9      	ldr	r1, [r7, #24]
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e6      	bne.n	8007bfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e011      	b.n	8007c66 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3728      	adds	r7, #40	@ 0x28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7e:	e04f      	b.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c86:	d04b      	beq.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c88:	f7fa ff26 	bl	8002ad8 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d302      	bcc.n	8007c9e <UART_WaitOnFlagUntilTimeout+0x30>
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e04e      	b.n	8007d40 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d037      	beq.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b80      	cmp	r3, #128	@ 0x80
 8007cb4:	d034      	beq.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b40      	cmp	r3, #64	@ 0x40
 8007cba:	d031      	beq.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d110      	bne.n	8007cec <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2208      	movs	r2, #8
 8007cd0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f8fe 	bl	8007ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2208      	movs	r2, #8
 8007cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e029      	b.n	8007d40 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cfa:	d111      	bne.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 f8e4 	bl	8007ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e00f      	b.n	8007d40 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69da      	ldr	r2, [r3, #28]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	bf0c      	ite	eq
 8007d30:	2301      	moveq	r3, #1
 8007d32:	2300      	movne	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d0a0      	beq.n	8007c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b096      	sub	sp, #88	@ 0x58
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	88fa      	ldrh	r2, [r7, #6]
 8007d60:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2222      	movs	r2, #34	@ 0x22
 8007d70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d028      	beq.n	8007dce <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d80:	4a3e      	ldr	r2, [pc, #248]	@ (8007e7c <UART_Start_Receive_DMA+0x134>)
 8007d82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d88:	4a3d      	ldr	r2, [pc, #244]	@ (8007e80 <UART_Start_Receive_DMA+0x138>)
 8007d8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d90:	4a3c      	ldr	r2, [pc, #240]	@ (8007e84 <UART_Start_Receive_DMA+0x13c>)
 8007d92:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d98:	2200      	movs	r2, #0
 8007d9a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3324      	adds	r3, #36	@ 0x24
 8007da6:	4619      	mov	r1, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dac:	461a      	mov	r2, r3
 8007dae:	88fb      	ldrh	r3, [r7, #6]
 8007db0:	f7fb f882 	bl	8002eb8 <HAL_DMA_Start_IT>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2210      	movs	r2, #16
 8007dbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e051      	b.n	8007e72 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d018      	beq.n	8007e08 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007df4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007df6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e6      	bne.n	8007dd6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e28:	637a      	str	r2, [r7, #52]	@ 0x34
 8007e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e5      	bne.n	8007e08 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3308      	adds	r3, #8
 8007e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e5c:	623a      	str	r2, [r7, #32]
 8007e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	69f9      	ldr	r1, [r7, #28]
 8007e62:	6a3a      	ldr	r2, [r7, #32]
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e5      	bne.n	8007e3c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3758      	adds	r7, #88	@ 0x58
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08007f9d 	.word	0x08007f9d
 8007e80:	080080c5 	.word	0x080080c5
 8007e84:	08008103 	.word	0x08008103

08007e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b089      	sub	sp, #36	@ 0x24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	61bb      	str	r3, [r7, #24]
 8007eb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6979      	ldr	r1, [r7, #20]
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	613b      	str	r3, [r7, #16]
   return(result);
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e6      	bne.n	8007e90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007ec8:	bf00      	nop
 8007eca:	3724      	adds	r7, #36	@ 0x24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b095      	sub	sp, #84	@ 0x54
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007efc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e6      	bne.n	8007edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3308      	adds	r3, #8
 8007f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f023 0301 	bic.w	r3, r3, #1
 8007f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e5      	bne.n	8007f0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d118      	bne.n	8007f7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f023 0310 	bic.w	r3, r3, #16
 8007f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6979      	ldr	r1, [r7, #20]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	613b      	str	r3, [r7, #16]
   return(result);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f90:	bf00      	nop
 8007f92:	3754      	adds	r7, #84	@ 0x54
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b09c      	sub	sp, #112	@ 0x70
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fb2:	d071      	beq.n	8008098 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e6      	bne.n	8007fbc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	667b      	str	r3, [r7, #100]	@ 0x64
 8008006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3308      	adds	r3, #8
 800800c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800800e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008010:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800801c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e5      	bne.n	8007fee <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	623b      	str	r3, [r7, #32]
   return(result);
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008038:	663b      	str	r3, [r7, #96]	@ 0x60
 800803a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3308      	adds	r3, #8
 8008040:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008042:	633a      	str	r2, [r7, #48]	@ 0x30
 8008044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e5      	bne.n	8008022 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008062:	2b01      	cmp	r3, #1
 8008064:	d118      	bne.n	8008098 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	60fb      	str	r3, [r7, #12]
   return(result);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0310 	bic.w	r3, r3, #16
 800807a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800807c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008088:	69b9      	ldr	r1, [r7, #24]
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	e841 2300 	strex	r3, r2, [r1]
 8008090:	617b      	str	r3, [r7, #20]
   return(result);
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e6      	bne.n	8008066 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800809a:	2200      	movs	r2, #0
 800809c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800809e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d107      	bne.n	80080b6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80080ac:	4619      	mov	r1, r3
 80080ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80080b0:	f7ff fa74 	bl	800759c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080b4:	e002      	b.n	80080bc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80080b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80080b8:	f7f8 fc50 	bl	800095c <HAL_UART_RxCpltCallback>
}
 80080bc:	bf00      	nop
 80080be:	3770      	adds	r7, #112	@ 0x70
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d109      	bne.n	80080f4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	4619      	mov	r1, r3
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff fa55 	bl	800759c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080f2:	e002      	b.n	80080fa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fa3d 	bl	8007574 <HAL_UART_RxHalfCpltCallback>
}
 80080fa:	bf00      	nop
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008114:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800811c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008128:	2b80      	cmp	r3, #128	@ 0x80
 800812a:	d109      	bne.n	8008140 <UART_DMAError+0x3e>
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	2b21      	cmp	r3, #33	@ 0x21
 8008130:	d106      	bne.n	8008140 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2200      	movs	r2, #0
 8008136:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800813a:	6978      	ldr	r0, [r7, #20]
 800813c:	f7ff fea4 	bl	8007e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814a:	2b40      	cmp	r3, #64	@ 0x40
 800814c:	d109      	bne.n	8008162 <UART_DMAError+0x60>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b22      	cmp	r3, #34	@ 0x22
 8008152:	d106      	bne.n	8008162 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2200      	movs	r2, #0
 8008158:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800815c:	6978      	ldr	r0, [r7, #20]
 800815e:	f7ff feb9 	bl	8007ed4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008168:	f043 0210 	orr.w	r2, r3, #16
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008172:	6978      	ldr	r0, [r7, #20]
 8008174:	f7ff fa08 	bl	8007588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008178:	bf00      	nop
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff f9f2 	bl	8007588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	61bb      	str	r3, [r7, #24]
 80081d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6979      	ldr	r1, [r7, #20]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	613b      	str	r3, [r7, #16]
   return(result);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e6      	bne.n	80081b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff f9b4 	bl	8007560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081f8:	bf00      	nop
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008200:	b084      	sub	sp, #16
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	f107 001c 	add.w	r0, r7, #28
 800820e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008212:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008216:	2b01      	cmp	r3, #1
 8008218:	d121      	bne.n	800825e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	4b21      	ldr	r3, [pc, #132]	@ (80082b0 <USB_CoreInit+0xb0>)
 800822c:	4013      	ands	r3, r2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800823e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008242:	2b01      	cmp	r3, #1
 8008244:	d105      	bne.n	8008252 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fa92 	bl	800877c <USB_CoreReset>
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]
 800825c:	e010      	b.n	8008280 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa86 	bl	800877c <USB_CoreReset>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008278:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008280:	7fbb      	ldrb	r3, [r7, #30]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d10b      	bne.n	800829e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f043 0206 	orr.w	r2, r3, #6
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f043 0220 	orr.w	r2, r3, #32
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082aa:	b004      	add	sp, #16
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	ffbdffbf 	.word	0xffbdffbf

080082b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f023 0201 	bic.w	r2, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d115      	bne.n	8008324 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008304:	200a      	movs	r0, #10
 8008306:	f7fa fbf3 	bl	8002af0 <HAL_Delay>
      ms += 10U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	330a      	adds	r3, #10
 800830e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fa25 	bl	8008760 <USB_GetMode>
 8008316:	4603      	mov	r3, r0
 8008318:	2b01      	cmp	r3, #1
 800831a:	d01e      	beq.n	800835a <USB_SetCurrentMode+0x84>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008320:	d9f0      	bls.n	8008304 <USB_SetCurrentMode+0x2e>
 8008322:	e01a      	b.n	800835a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d115      	bne.n	8008356 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008336:	200a      	movs	r0, #10
 8008338:	f7fa fbda 	bl	8002af0 <HAL_Delay>
      ms += 10U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	330a      	adds	r3, #10
 8008340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa0c 	bl	8008760 <USB_GetMode>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <USB_SetCurrentMode+0x84>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2bc7      	cmp	r3, #199	@ 0xc7
 8008352:	d9f0      	bls.n	8008336 <USB_SetCurrentMode+0x60>
 8008354:	e001      	b.n	800835a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e005      	b.n	8008366 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2bc8      	cmp	r3, #200	@ 0xc8
 800835e:	d101      	bne.n	8008364 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e000      	b.n	8008366 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008370:	b084      	sub	sp, #16
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800837e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	e009      	b.n	80083a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	3340      	adds	r3, #64	@ 0x40
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	2200      	movs	r2, #0
 800839c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	3301      	adds	r3, #1
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b0e      	cmp	r3, #14
 80083a8:	d9f2      	bls.n	8008390 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d11c      	bne.n	80083ec <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083c0:	f043 0302 	orr.w	r3, r3, #2
 80083c4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	e005      	b.n	80083f8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083fe:	461a      	mov	r2, r3
 8008400:	2300      	movs	r3, #0
 8008402:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008404:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008408:	2b01      	cmp	r3, #1
 800840a:	d10d      	bne.n	8008428 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800840c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008414:	2100      	movs	r1, #0
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f968 	bl	80086ec <USB_SetDevSpeed>
 800841c:	e008      	b.n	8008430 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800841e:	2101      	movs	r1, #1
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f963 	bl	80086ec <USB_SetDevSpeed>
 8008426:	e003      	b.n	8008430 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008428:	2103      	movs	r1, #3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f95e 	bl	80086ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008430:	2110      	movs	r1, #16
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f8fa 	bl	800862c <USB_FlushTxFifo>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f924 	bl	8008690 <USB_FlushRxFifo>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008458:	461a      	mov	r2, r3
 800845a:	2300      	movs	r3, #0
 800845c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008464:	461a      	mov	r2, r3
 8008466:	2300      	movs	r3, #0
 8008468:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008470:	461a      	mov	r2, r3
 8008472:	2300      	movs	r3, #0
 8008474:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008476:	2300      	movs	r3, #0
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	e043      	b.n	8008504 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800848e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008492:	d118      	bne.n	80084c6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a6:	461a      	mov	r2, r3
 80084a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	e013      	b.n	80084d8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084bc:	461a      	mov	r2, r3
 80084be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	e008      	b.n	80084d8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d2:	461a      	mov	r2, r3
 80084d4:	2300      	movs	r3, #0
 80084d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e4:	461a      	mov	r2, r3
 80084e6:	2300      	movs	r3, #0
 80084e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f6:	461a      	mov	r2, r3
 80084f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	3301      	adds	r3, #1
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008508:	461a      	mov	r2, r3
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	4293      	cmp	r3, r2
 800850e:	d3b5      	bcc.n	800847c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008510:	2300      	movs	r3, #0
 8008512:	613b      	str	r3, [r7, #16]
 8008514:	e043      	b.n	800859e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008528:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800852c:	d118      	bne.n	8008560 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008540:	461a      	mov	r2, r3
 8008542:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	e013      	b.n	8008572 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008556:	461a      	mov	r2, r3
 8008558:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	e008      	b.n	8008572 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856c:	461a      	mov	r2, r3
 800856e:	2300      	movs	r3, #0
 8008570:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857e:	461a      	mov	r2, r3
 8008580:	2300      	movs	r3, #0
 8008582:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008590:	461a      	mov	r2, r3
 8008592:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008596:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3301      	adds	r3, #1
 800859c:	613b      	str	r3, [r7, #16]
 800859e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80085a2:	461a      	mov	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d3b5      	bcc.n	8008516 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80085ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d105      	bne.n	80085e0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	f043 0210 	orr.w	r2, r3, #16
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008624 <USB_DevInit+0x2b4>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	f043 0208 	orr.w	r2, r3, #8
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008600:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008604:	2b01      	cmp	r3, #1
 8008606:	d105      	bne.n	8008614 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	699a      	ldr	r2, [r3, #24]
 800860c:	4b06      	ldr	r3, [pc, #24]	@ (8008628 <USB_DevInit+0x2b8>)
 800860e:	4313      	orrs	r3, r2
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008620:	b004      	add	sp, #16
 8008622:	4770      	bx	lr
 8008624:	803c3800 	.word	0x803c3800
 8008628:	40000004 	.word	0x40000004

0800862c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008646:	d901      	bls.n	800864c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e01b      	b.n	8008684 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	daf2      	bge.n	800863a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	019b      	lsls	r3, r3, #6
 800865c:	f043 0220 	orr.w	r2, r3, #32
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3301      	adds	r3, #1
 8008668:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008670:	d901      	bls.n	8008676 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e006      	b.n	8008684 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b20      	cmp	r3, #32
 8008680:	d0f0      	beq.n	8008664 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086a8:	d901      	bls.n	80086ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e018      	b.n	80086e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	daf2      	bge.n	800869c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2210      	movs	r2, #16
 80086be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086cc:	d901      	bls.n	80086d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e006      	b.n	80086e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b10      	cmp	r3, #16
 80086dc:	d0f0      	beq.n	80086c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800870c:	4313      	orrs	r3, r2
 800870e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800871e:	b480      	push	{r7}
 8008720:	b085      	sub	sp, #20
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008738:	f023 0303 	bic.w	r3, r3, #3
 800873c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f003 0301 	and.w	r3, r3, #1
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3301      	adds	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008794:	d901      	bls.n	800879a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e01b      	b.n	80087d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	daf2      	bge.n	8008788 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f043 0201 	orr.w	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087be:	d901      	bls.n	80087c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e006      	b.n	80087d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d0f0      	beq.n	80087b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80087e4:	4904      	ldr	r1, [pc, #16]	@ (80087f8 <MX_FATFS_Init+0x18>)
 80087e6:	4805      	ldr	r0, [pc, #20]	@ (80087fc <MX_FATFS_Init+0x1c>)
 80087e8:	f000 f8b0 	bl	800894c <FATFS_LinkDriver>
 80087ec:	4603      	mov	r3, r0
 80087ee:	461a      	mov	r2, r3
 80087f0:	4b03      	ldr	r3, [pc, #12]	@ (8008800 <MX_FATFS_Init+0x20>)
 80087f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80087f4:	bf00      	nop
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	200009a8 	.word	0x200009a8
 80087fc:	2000003c 	.word	0x2000003c
 8008800:	200009a4 	.word	0x200009a4

08008804 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800880e:	4b06      	ldr	r3, [pc, #24]	@ (8008828 <USER_initialize+0x24>)
 8008810:	2201      	movs	r2, #1
 8008812:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008814:	4b04      	ldr	r3, [pc, #16]	@ (8008828 <USER_initialize+0x24>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20000039 	.word	0x20000039

0800882c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008836:	4b06      	ldr	r3, [pc, #24]	@ (8008850 <USER_status+0x24>)
 8008838:	2201      	movs	r2, #1
 800883a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800883c:	4b04      	ldr	r3, [pc, #16]	@ (8008850 <USER_status+0x24>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20000039 	.word	0x20000039

08008854 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008864:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008872:	b480      	push	{r7}
 8008874:	b085      	sub	sp, #20
 8008876:	af00      	add	r7, sp, #0
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
 800887e:	4603      	mov	r3, r0
 8008880:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008882:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	603a      	str	r2, [r7, #0]
 800889a:	71fb      	strb	r3, [r7, #7]
 800889c:	460b      	mov	r3, r1
 800889e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
    return res;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80088c2:	2301      	movs	r3, #1
 80088c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80088ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 80088cc:	7a5b      	ldrb	r3, [r3, #9]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d131      	bne.n	8008938 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80088d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 80088d6:	7a5b      	ldrb	r3, [r3, #9]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 80088de:	2100      	movs	r1, #0
 80088e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80088e2:	4b19      	ldr	r3, [pc, #100]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 80088e4:	7a5b      	ldrb	r3, [r3, #9]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4a17      	ldr	r2, [pc, #92]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80088f2:	4b15      	ldr	r3, [pc, #84]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 80088f4:	7a5b      	ldrb	r3, [r3, #9]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	4b13      	ldr	r3, [pc, #76]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 80088fc:	4413      	add	r3, r2
 80088fe:	79fa      	ldrb	r2, [r7, #7]
 8008900:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008902:	4b11      	ldr	r3, [pc, #68]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 8008904:	7a5b      	ldrb	r3, [r3, #9]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	b2d1      	uxtb	r1, r2
 800890c:	4a0e      	ldr	r2, [pc, #56]	@ (8008948 <FATFS_LinkDriverEx+0x94>)
 800890e:	7251      	strb	r1, [r2, #9]
 8008910:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008912:	7dbb      	ldrb	r3, [r7, #22]
 8008914:	3330      	adds	r3, #48	@ 0x30
 8008916:	b2da      	uxtb	r2, r3
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	3301      	adds	r3, #1
 8008920:	223a      	movs	r2, #58	@ 0x3a
 8008922:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3302      	adds	r3, #2
 8008928:	222f      	movs	r2, #47	@ 0x2f
 800892a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	3303      	adds	r3, #3
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
}
 800893a:	4618      	mov	r0, r3
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	200009ac 	.word	0x200009ac

0800894c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008956:	2200      	movs	r2, #0
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff ffaa 	bl	80088b4 <FATFS_LinkDriverEx>
 8008960:	4603      	mov	r3, r0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <sniprintf>:
 800896c:	b40c      	push	{r2, r3}
 800896e:	b530      	push	{r4, r5, lr}
 8008970:	4b17      	ldr	r3, [pc, #92]	@ (80089d0 <sniprintf+0x64>)
 8008972:	1e0c      	subs	r4, r1, #0
 8008974:	681d      	ldr	r5, [r3, #0]
 8008976:	b09d      	sub	sp, #116	@ 0x74
 8008978:	da08      	bge.n	800898c <sniprintf+0x20>
 800897a:	238b      	movs	r3, #139	@ 0x8b
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	f04f 30ff 	mov.w	r0, #4294967295
 8008982:	b01d      	add	sp, #116	@ 0x74
 8008984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008988:	b002      	add	sp, #8
 800898a:	4770      	bx	lr
 800898c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008990:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008994:	bf14      	ite	ne
 8008996:	f104 33ff 	addne.w	r3, r4, #4294967295
 800899a:	4623      	moveq	r3, r4
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	9307      	str	r3, [sp, #28]
 80089a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089a4:	9002      	str	r0, [sp, #8]
 80089a6:	9006      	str	r0, [sp, #24]
 80089a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80089ae:	ab21      	add	r3, sp, #132	@ 0x84
 80089b0:	a902      	add	r1, sp, #8
 80089b2:	4628      	mov	r0, r5
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	f000 f9c3 	bl	8008d40 <_svfiprintf_r>
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	bfbc      	itt	lt
 80089be:	238b      	movlt	r3, #139	@ 0x8b
 80089c0:	602b      	strlt	r3, [r5, #0]
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	d0dd      	beq.n	8008982 <sniprintf+0x16>
 80089c6:	9b02      	ldr	r3, [sp, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	e7d9      	b.n	8008982 <sniprintf+0x16>
 80089ce:	bf00      	nop
 80089d0:	20000050 	.word	0x20000050

080089d4 <siprintf>:
 80089d4:	b40e      	push	{r1, r2, r3}
 80089d6:	b500      	push	{lr}
 80089d8:	b09c      	sub	sp, #112	@ 0x70
 80089da:	ab1d      	add	r3, sp, #116	@ 0x74
 80089dc:	9002      	str	r0, [sp, #8]
 80089de:	9006      	str	r0, [sp, #24]
 80089e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80089e4:	4809      	ldr	r0, [pc, #36]	@ (8008a0c <siprintf+0x38>)
 80089e6:	9107      	str	r1, [sp, #28]
 80089e8:	9104      	str	r1, [sp, #16]
 80089ea:	4909      	ldr	r1, [pc, #36]	@ (8008a10 <siprintf+0x3c>)
 80089ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f0:	9105      	str	r1, [sp, #20]
 80089f2:	6800      	ldr	r0, [r0, #0]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	a902      	add	r1, sp, #8
 80089f8:	f000 f9a2 	bl	8008d40 <_svfiprintf_r>
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	b01c      	add	sp, #112	@ 0x70
 8008a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a08:	b003      	add	sp, #12
 8008a0a:	4770      	bx	lr
 8008a0c:	20000050 	.word	0x20000050
 8008a10:	ffff0208 	.word	0xffff0208

08008a14 <memset>:
 8008a14:	4402      	add	r2, r0
 8008a16:	4603      	mov	r3, r0
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d100      	bne.n	8008a1e <memset+0xa>
 8008a1c:	4770      	bx	lr
 8008a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a22:	e7f9      	b.n	8008a18 <memset+0x4>

08008a24 <__errno>:
 8008a24:	4b01      	ldr	r3, [pc, #4]	@ (8008a2c <__errno+0x8>)
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20000050 	.word	0x20000050

08008a30 <__libc_init_array>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	4d0d      	ldr	r5, [pc, #52]	@ (8008a68 <__libc_init_array+0x38>)
 8008a34:	4c0d      	ldr	r4, [pc, #52]	@ (8008a6c <__libc_init_array+0x3c>)
 8008a36:	1b64      	subs	r4, r4, r5
 8008a38:	10a4      	asrs	r4, r4, #2
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	42a6      	cmp	r6, r4
 8008a3e:	d109      	bne.n	8008a54 <__libc_init_array+0x24>
 8008a40:	4d0b      	ldr	r5, [pc, #44]	@ (8008a70 <__libc_init_array+0x40>)
 8008a42:	4c0c      	ldr	r4, [pc, #48]	@ (8008a74 <__libc_init_array+0x44>)
 8008a44:	f000 fc66 	bl	8009314 <_init>
 8008a48:	1b64      	subs	r4, r4, r5
 8008a4a:	10a4      	asrs	r4, r4, #2
 8008a4c:	2600      	movs	r6, #0
 8008a4e:	42a6      	cmp	r6, r4
 8008a50:	d105      	bne.n	8008a5e <__libc_init_array+0x2e>
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a58:	4798      	blx	r3
 8008a5a:	3601      	adds	r6, #1
 8008a5c:	e7ee      	b.n	8008a3c <__libc_init_array+0xc>
 8008a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a62:	4798      	blx	r3
 8008a64:	3601      	adds	r6, #1
 8008a66:	e7f2      	b.n	8008a4e <__libc_init_array+0x1e>
 8008a68:	080098e0 	.word	0x080098e0
 8008a6c:	080098e0 	.word	0x080098e0
 8008a70:	080098e0 	.word	0x080098e0
 8008a74:	080098e4 	.word	0x080098e4

08008a78 <__retarget_lock_acquire_recursive>:
 8008a78:	4770      	bx	lr

08008a7a <__retarget_lock_release_recursive>:
 8008a7a:	4770      	bx	lr

08008a7c <memcpy>:
 8008a7c:	440a      	add	r2, r1
 8008a7e:	4291      	cmp	r1, r2
 8008a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a84:	d100      	bne.n	8008a88 <memcpy+0xc>
 8008a86:	4770      	bx	lr
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a92:	4291      	cmp	r1, r2
 8008a94:	d1f9      	bne.n	8008a8a <memcpy+0xe>
 8008a96:	bd10      	pop	{r4, pc}

08008a98 <_free_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	d041      	beq.n	8008b24 <_free_r+0x8c>
 8008aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa4:	1f0c      	subs	r4, r1, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	bfb8      	it	lt
 8008aaa:	18e4      	addlt	r4, r4, r3
 8008aac:	f000 f8e0 	bl	8008c70 <__malloc_lock>
 8008ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b28 <_free_r+0x90>)
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	b933      	cbnz	r3, 8008ac4 <_free_r+0x2c>
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	6014      	str	r4, [r2, #0]
 8008aba:	4628      	mov	r0, r5
 8008abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac0:	f000 b8dc 	b.w	8008c7c <__malloc_unlock>
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d908      	bls.n	8008ada <_free_r+0x42>
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	1821      	adds	r1, r4, r0
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf01      	itttt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	1809      	addeq	r1, r1, r0
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	e7ed      	b.n	8008ab6 <_free_r+0x1e>
 8008ada:	461a      	mov	r2, r3
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	b10b      	cbz	r3, 8008ae4 <_free_r+0x4c>
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d9fa      	bls.n	8008ada <_free_r+0x42>
 8008ae4:	6811      	ldr	r1, [r2, #0]
 8008ae6:	1850      	adds	r0, r2, r1
 8008ae8:	42a0      	cmp	r0, r4
 8008aea:	d10b      	bne.n	8008b04 <_free_r+0x6c>
 8008aec:	6820      	ldr	r0, [r4, #0]
 8008aee:	4401      	add	r1, r0
 8008af0:	1850      	adds	r0, r2, r1
 8008af2:	4283      	cmp	r3, r0
 8008af4:	6011      	str	r1, [r2, #0]
 8008af6:	d1e0      	bne.n	8008aba <_free_r+0x22>
 8008af8:	6818      	ldr	r0, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	6053      	str	r3, [r2, #4]
 8008afe:	4408      	add	r0, r1
 8008b00:	6010      	str	r0, [r2, #0]
 8008b02:	e7da      	b.n	8008aba <_free_r+0x22>
 8008b04:	d902      	bls.n	8008b0c <_free_r+0x74>
 8008b06:	230c      	movs	r3, #12
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	e7d6      	b.n	8008aba <_free_r+0x22>
 8008b0c:	6820      	ldr	r0, [r4, #0]
 8008b0e:	1821      	adds	r1, r4, r0
 8008b10:	428b      	cmp	r3, r1
 8008b12:	bf04      	itt	eq
 8008b14:	6819      	ldreq	r1, [r3, #0]
 8008b16:	685b      	ldreq	r3, [r3, #4]
 8008b18:	6063      	str	r3, [r4, #4]
 8008b1a:	bf04      	itt	eq
 8008b1c:	1809      	addeq	r1, r1, r0
 8008b1e:	6021      	streq	r1, [r4, #0]
 8008b20:	6054      	str	r4, [r2, #4]
 8008b22:	e7ca      	b.n	8008aba <_free_r+0x22>
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	bf00      	nop
 8008b28:	20000afc 	.word	0x20000afc

08008b2c <sbrk_aligned>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008b6c <sbrk_aligned+0x40>)
 8008b30:	460c      	mov	r4, r1
 8008b32:	6831      	ldr	r1, [r6, #0]
 8008b34:	4605      	mov	r5, r0
 8008b36:	b911      	cbnz	r1, 8008b3e <sbrk_aligned+0x12>
 8008b38:	f000 fba6 	bl	8009288 <_sbrk_r>
 8008b3c:	6030      	str	r0, [r6, #0]
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	f000 fba1 	bl	8009288 <_sbrk_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d103      	bne.n	8008b52 <sbrk_aligned+0x26>
 8008b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008b4e:	4620      	mov	r0, r4
 8008b50:	bd70      	pop	{r4, r5, r6, pc}
 8008b52:	1cc4      	adds	r4, r0, #3
 8008b54:	f024 0403 	bic.w	r4, r4, #3
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d0f8      	beq.n	8008b4e <sbrk_aligned+0x22>
 8008b5c:	1a21      	subs	r1, r4, r0
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 fb92 	bl	8009288 <_sbrk_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d1f2      	bne.n	8008b4e <sbrk_aligned+0x22>
 8008b68:	e7ef      	b.n	8008b4a <sbrk_aligned+0x1e>
 8008b6a:	bf00      	nop
 8008b6c:	20000af8 	.word	0x20000af8

08008b70 <_malloc_r>:
 8008b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b74:	1ccd      	adds	r5, r1, #3
 8008b76:	f025 0503 	bic.w	r5, r5, #3
 8008b7a:	3508      	adds	r5, #8
 8008b7c:	2d0c      	cmp	r5, #12
 8008b7e:	bf38      	it	cc
 8008b80:	250c      	movcc	r5, #12
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	4606      	mov	r6, r0
 8008b86:	db01      	blt.n	8008b8c <_malloc_r+0x1c>
 8008b88:	42a9      	cmp	r1, r5
 8008b8a:	d904      	bls.n	8008b96 <_malloc_r+0x26>
 8008b8c:	230c      	movs	r3, #12
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	2000      	movs	r0, #0
 8008b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c6c <_malloc_r+0xfc>
 8008b9a:	f000 f869 	bl	8008c70 <__malloc_lock>
 8008b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba2:	461c      	mov	r4, r3
 8008ba4:	bb44      	cbnz	r4, 8008bf8 <_malloc_r+0x88>
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff ffbf 	bl	8008b2c <sbrk_aligned>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	d158      	bne.n	8008c66 <_malloc_r+0xf6>
 8008bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8008bb8:	4627      	mov	r7, r4
 8008bba:	2f00      	cmp	r7, #0
 8008bbc:	d143      	bne.n	8008c46 <_malloc_r+0xd6>
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	d04b      	beq.n	8008c5a <_malloc_r+0xea>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	eb04 0903 	add.w	r9, r4, r3
 8008bcc:	f000 fb5c 	bl	8009288 <_sbrk_r>
 8008bd0:	4581      	cmp	r9, r0
 8008bd2:	d142      	bne.n	8008c5a <_malloc_r+0xea>
 8008bd4:	6821      	ldr	r1, [r4, #0]
 8008bd6:	1a6d      	subs	r5, r5, r1
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff ffa6 	bl	8008b2c <sbrk_aligned>
 8008be0:	3001      	adds	r0, #1
 8008be2:	d03a      	beq.n	8008c5a <_malloc_r+0xea>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	442b      	add	r3, r5
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	f8d8 3000 	ldr.w	r3, [r8]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	bb62      	cbnz	r2, 8008c4c <_malloc_r+0xdc>
 8008bf2:	f8c8 7000 	str.w	r7, [r8]
 8008bf6:	e00f      	b.n	8008c18 <_malloc_r+0xa8>
 8008bf8:	6822      	ldr	r2, [r4, #0]
 8008bfa:	1b52      	subs	r2, r2, r5
 8008bfc:	d420      	bmi.n	8008c40 <_malloc_r+0xd0>
 8008bfe:	2a0b      	cmp	r2, #11
 8008c00:	d917      	bls.n	8008c32 <_malloc_r+0xc2>
 8008c02:	1961      	adds	r1, r4, r5
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	6025      	str	r5, [r4, #0]
 8008c08:	bf18      	it	ne
 8008c0a:	6059      	strne	r1, [r3, #4]
 8008c0c:	6863      	ldr	r3, [r4, #4]
 8008c0e:	bf08      	it	eq
 8008c10:	f8c8 1000 	streq.w	r1, [r8]
 8008c14:	5162      	str	r2, [r4, r5]
 8008c16:	604b      	str	r3, [r1, #4]
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f000 f82f 	bl	8008c7c <__malloc_unlock>
 8008c1e:	f104 000b 	add.w	r0, r4, #11
 8008c22:	1d23      	adds	r3, r4, #4
 8008c24:	f020 0007 	bic.w	r0, r0, #7
 8008c28:	1ac2      	subs	r2, r0, r3
 8008c2a:	bf1c      	itt	ne
 8008c2c:	1a1b      	subne	r3, r3, r0
 8008c2e:	50a3      	strne	r3, [r4, r2]
 8008c30:	e7af      	b.n	8008b92 <_malloc_r+0x22>
 8008c32:	6862      	ldr	r2, [r4, #4]
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	bf0c      	ite	eq
 8008c38:	f8c8 2000 	streq.w	r2, [r8]
 8008c3c:	605a      	strne	r2, [r3, #4]
 8008c3e:	e7eb      	b.n	8008c18 <_malloc_r+0xa8>
 8008c40:	4623      	mov	r3, r4
 8008c42:	6864      	ldr	r4, [r4, #4]
 8008c44:	e7ae      	b.n	8008ba4 <_malloc_r+0x34>
 8008c46:	463c      	mov	r4, r7
 8008c48:	687f      	ldr	r7, [r7, #4]
 8008c4a:	e7b6      	b.n	8008bba <_malloc_r+0x4a>
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d1fb      	bne.n	8008c4c <_malloc_r+0xdc>
 8008c54:	2300      	movs	r3, #0
 8008c56:	6053      	str	r3, [r2, #4]
 8008c58:	e7de      	b.n	8008c18 <_malloc_r+0xa8>
 8008c5a:	230c      	movs	r3, #12
 8008c5c:	6033      	str	r3, [r6, #0]
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f000 f80c 	bl	8008c7c <__malloc_unlock>
 8008c64:	e794      	b.n	8008b90 <_malloc_r+0x20>
 8008c66:	6005      	str	r5, [r0, #0]
 8008c68:	e7d6      	b.n	8008c18 <_malloc_r+0xa8>
 8008c6a:	bf00      	nop
 8008c6c:	20000afc 	.word	0x20000afc

08008c70 <__malloc_lock>:
 8008c70:	4801      	ldr	r0, [pc, #4]	@ (8008c78 <__malloc_lock+0x8>)
 8008c72:	f7ff bf01 	b.w	8008a78 <__retarget_lock_acquire_recursive>
 8008c76:	bf00      	nop
 8008c78:	20000af4 	.word	0x20000af4

08008c7c <__malloc_unlock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	@ (8008c84 <__malloc_unlock+0x8>)
 8008c7e:	f7ff befc 	b.w	8008a7a <__retarget_lock_release_recursive>
 8008c82:	bf00      	nop
 8008c84:	20000af4 	.word	0x20000af4

08008c88 <__ssputs_r>:
 8008c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8c:	688e      	ldr	r6, [r1, #8]
 8008c8e:	461f      	mov	r7, r3
 8008c90:	42be      	cmp	r6, r7
 8008c92:	680b      	ldr	r3, [r1, #0]
 8008c94:	4682      	mov	sl, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	4690      	mov	r8, r2
 8008c9a:	d82d      	bhi.n	8008cf8 <__ssputs_r+0x70>
 8008c9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ca0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ca4:	d026      	beq.n	8008cf4 <__ssputs_r+0x6c>
 8008ca6:	6965      	ldr	r5, [r4, #20]
 8008ca8:	6909      	ldr	r1, [r1, #16]
 8008caa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cae:	eba3 0901 	sub.w	r9, r3, r1
 8008cb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cb6:	1c7b      	adds	r3, r7, #1
 8008cb8:	444b      	add	r3, r9
 8008cba:	106d      	asrs	r5, r5, #1
 8008cbc:	429d      	cmp	r5, r3
 8008cbe:	bf38      	it	cc
 8008cc0:	461d      	movcc	r5, r3
 8008cc2:	0553      	lsls	r3, r2, #21
 8008cc4:	d527      	bpl.n	8008d16 <__ssputs_r+0x8e>
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7ff ff52 	bl	8008b70 <_malloc_r>
 8008ccc:	4606      	mov	r6, r0
 8008cce:	b360      	cbz	r0, 8008d2a <__ssputs_r+0xa2>
 8008cd0:	6921      	ldr	r1, [r4, #16]
 8008cd2:	464a      	mov	r2, r9
 8008cd4:	f7ff fed2 	bl	8008a7c <memcpy>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	6126      	str	r6, [r4, #16]
 8008ce6:	6165      	str	r5, [r4, #20]
 8008ce8:	444e      	add	r6, r9
 8008cea:	eba5 0509 	sub.w	r5, r5, r9
 8008cee:	6026      	str	r6, [r4, #0]
 8008cf0:	60a5      	str	r5, [r4, #8]
 8008cf2:	463e      	mov	r6, r7
 8008cf4:	42be      	cmp	r6, r7
 8008cf6:	d900      	bls.n	8008cfa <__ssputs_r+0x72>
 8008cf8:	463e      	mov	r6, r7
 8008cfa:	6820      	ldr	r0, [r4, #0]
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	4641      	mov	r1, r8
 8008d00:	f000 faa8 	bl	8009254 <memmove>
 8008d04:	68a3      	ldr	r3, [r4, #8]
 8008d06:	1b9b      	subs	r3, r3, r6
 8008d08:	60a3      	str	r3, [r4, #8]
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	4433      	add	r3, r6
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	2000      	movs	r0, #0
 8008d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d16:	462a      	mov	r2, r5
 8008d18:	f000 fac6 	bl	80092a8 <_realloc_r>
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d1e0      	bne.n	8008ce4 <__ssputs_r+0x5c>
 8008d22:	6921      	ldr	r1, [r4, #16]
 8008d24:	4650      	mov	r0, sl
 8008d26:	f7ff feb7 	bl	8008a98 <_free_r>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	f8ca 3000 	str.w	r3, [sl]
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	e7e9      	b.n	8008d12 <__ssputs_r+0x8a>
	...

08008d40 <_svfiprintf_r>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	4698      	mov	r8, r3
 8008d46:	898b      	ldrh	r3, [r1, #12]
 8008d48:	061b      	lsls	r3, r3, #24
 8008d4a:	b09d      	sub	sp, #116	@ 0x74
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	460d      	mov	r5, r1
 8008d50:	4614      	mov	r4, r2
 8008d52:	d510      	bpl.n	8008d76 <_svfiprintf_r+0x36>
 8008d54:	690b      	ldr	r3, [r1, #16]
 8008d56:	b973      	cbnz	r3, 8008d76 <_svfiprintf_r+0x36>
 8008d58:	2140      	movs	r1, #64	@ 0x40
 8008d5a:	f7ff ff09 	bl	8008b70 <_malloc_r>
 8008d5e:	6028      	str	r0, [r5, #0]
 8008d60:	6128      	str	r0, [r5, #16]
 8008d62:	b930      	cbnz	r0, 8008d72 <_svfiprintf_r+0x32>
 8008d64:	230c      	movs	r3, #12
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	b01d      	add	sp, #116	@ 0x74
 8008d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d72:	2340      	movs	r3, #64	@ 0x40
 8008d74:	616b      	str	r3, [r5, #20]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d7a:	2320      	movs	r3, #32
 8008d7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d84:	2330      	movs	r3, #48	@ 0x30
 8008d86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f24 <_svfiprintf_r+0x1e4>
 8008d8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d8e:	f04f 0901 	mov.w	r9, #1
 8008d92:	4623      	mov	r3, r4
 8008d94:	469a      	mov	sl, r3
 8008d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9a:	b10a      	cbz	r2, 8008da0 <_svfiprintf_r+0x60>
 8008d9c:	2a25      	cmp	r2, #37	@ 0x25
 8008d9e:	d1f9      	bne.n	8008d94 <_svfiprintf_r+0x54>
 8008da0:	ebba 0b04 	subs.w	fp, sl, r4
 8008da4:	d00b      	beq.n	8008dbe <_svfiprintf_r+0x7e>
 8008da6:	465b      	mov	r3, fp
 8008da8:	4622      	mov	r2, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff ff6b 	bl	8008c88 <__ssputs_r>
 8008db2:	3001      	adds	r0, #1
 8008db4:	f000 80a7 	beq.w	8008f06 <_svfiprintf_r+0x1c6>
 8008db8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dba:	445a      	add	r2, fp
 8008dbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 809f 	beq.w	8008f06 <_svfiprintf_r+0x1c6>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd2:	f10a 0a01 	add.w	sl, sl, #1
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dde:	931a      	str	r3, [sp, #104]	@ 0x68
 8008de0:	4654      	mov	r4, sl
 8008de2:	2205      	movs	r2, #5
 8008de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de8:	484e      	ldr	r0, [pc, #312]	@ (8008f24 <_svfiprintf_r+0x1e4>)
 8008dea:	f7f7 fa19 	bl	8000220 <memchr>
 8008dee:	9a04      	ldr	r2, [sp, #16]
 8008df0:	b9d8      	cbnz	r0, 8008e2a <_svfiprintf_r+0xea>
 8008df2:	06d0      	lsls	r0, r2, #27
 8008df4:	bf44      	itt	mi
 8008df6:	2320      	movmi	r3, #32
 8008df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dfc:	0711      	lsls	r1, r2, #28
 8008dfe:	bf44      	itt	mi
 8008e00:	232b      	movmi	r3, #43	@ 0x2b
 8008e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e06:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e0c:	d015      	beq.n	8008e3a <_svfiprintf_r+0xfa>
 8008e0e:	9a07      	ldr	r2, [sp, #28]
 8008e10:	4654      	mov	r4, sl
 8008e12:	2000      	movs	r0, #0
 8008e14:	f04f 0c0a 	mov.w	ip, #10
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e1e:	3b30      	subs	r3, #48	@ 0x30
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	d94b      	bls.n	8008ebc <_svfiprintf_r+0x17c>
 8008e24:	b1b0      	cbz	r0, 8008e54 <_svfiprintf_r+0x114>
 8008e26:	9207      	str	r2, [sp, #28]
 8008e28:	e014      	b.n	8008e54 <_svfiprintf_r+0x114>
 8008e2a:	eba0 0308 	sub.w	r3, r0, r8
 8008e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e32:	4313      	orrs	r3, r2
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	46a2      	mov	sl, r4
 8008e38:	e7d2      	b.n	8008de0 <_svfiprintf_r+0xa0>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	1d19      	adds	r1, r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	9103      	str	r1, [sp, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfbb      	ittet	lt
 8008e46:	425b      	neglt	r3, r3
 8008e48:	f042 0202 	orrlt.w	r2, r2, #2
 8008e4c:	9307      	strge	r3, [sp, #28]
 8008e4e:	9307      	strlt	r3, [sp, #28]
 8008e50:	bfb8      	it	lt
 8008e52:	9204      	strlt	r2, [sp, #16]
 8008e54:	7823      	ldrb	r3, [r4, #0]
 8008e56:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e58:	d10a      	bne.n	8008e70 <_svfiprintf_r+0x130>
 8008e5a:	7863      	ldrb	r3, [r4, #1]
 8008e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e5e:	d132      	bne.n	8008ec6 <_svfiprintf_r+0x186>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	1d1a      	adds	r2, r3, #4
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	9203      	str	r2, [sp, #12]
 8008e68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e6c:	3402      	adds	r4, #2
 8008e6e:	9305      	str	r3, [sp, #20]
 8008e70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f34 <_svfiprintf_r+0x1f4>
 8008e74:	7821      	ldrb	r1, [r4, #0]
 8008e76:	2203      	movs	r2, #3
 8008e78:	4650      	mov	r0, sl
 8008e7a:	f7f7 f9d1 	bl	8000220 <memchr>
 8008e7e:	b138      	cbz	r0, 8008e90 <_svfiprintf_r+0x150>
 8008e80:	9b04      	ldr	r3, [sp, #16]
 8008e82:	eba0 000a 	sub.w	r0, r0, sl
 8008e86:	2240      	movs	r2, #64	@ 0x40
 8008e88:	4082      	lsls	r2, r0
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	3401      	adds	r4, #1
 8008e8e:	9304      	str	r3, [sp, #16]
 8008e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e94:	4824      	ldr	r0, [pc, #144]	@ (8008f28 <_svfiprintf_r+0x1e8>)
 8008e96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e9a:	2206      	movs	r2, #6
 8008e9c:	f7f7 f9c0 	bl	8000220 <memchr>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d036      	beq.n	8008f12 <_svfiprintf_r+0x1d2>
 8008ea4:	4b21      	ldr	r3, [pc, #132]	@ (8008f2c <_svfiprintf_r+0x1ec>)
 8008ea6:	bb1b      	cbnz	r3, 8008ef0 <_svfiprintf_r+0x1b0>
 8008ea8:	9b03      	ldr	r3, [sp, #12]
 8008eaa:	3307      	adds	r3, #7
 8008eac:	f023 0307 	bic.w	r3, r3, #7
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	9303      	str	r3, [sp, #12]
 8008eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb6:	4433      	add	r3, r6
 8008eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eba:	e76a      	b.n	8008d92 <_svfiprintf_r+0x52>
 8008ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	e7a8      	b.n	8008e18 <_svfiprintf_r+0xd8>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	3401      	adds	r4, #1
 8008eca:	9305      	str	r3, [sp, #20]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	f04f 0c0a 	mov.w	ip, #10
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed8:	3a30      	subs	r2, #48	@ 0x30
 8008eda:	2a09      	cmp	r2, #9
 8008edc:	d903      	bls.n	8008ee6 <_svfiprintf_r+0x1a6>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0c6      	beq.n	8008e70 <_svfiprintf_r+0x130>
 8008ee2:	9105      	str	r1, [sp, #20]
 8008ee4:	e7c4      	b.n	8008e70 <_svfiprintf_r+0x130>
 8008ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eea:	4604      	mov	r4, r0
 8008eec:	2301      	movs	r3, #1
 8008eee:	e7f0      	b.n	8008ed2 <_svfiprintf_r+0x192>
 8008ef0:	ab03      	add	r3, sp, #12
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	462a      	mov	r2, r5
 8008ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8008f30 <_svfiprintf_r+0x1f0>)
 8008ef8:	a904      	add	r1, sp, #16
 8008efa:	4638      	mov	r0, r7
 8008efc:	f3af 8000 	nop.w
 8008f00:	1c42      	adds	r2, r0, #1
 8008f02:	4606      	mov	r6, r0
 8008f04:	d1d6      	bne.n	8008eb4 <_svfiprintf_r+0x174>
 8008f06:	89ab      	ldrh	r3, [r5, #12]
 8008f08:	065b      	lsls	r3, r3, #25
 8008f0a:	f53f af2d 	bmi.w	8008d68 <_svfiprintf_r+0x28>
 8008f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f10:	e72c      	b.n	8008d6c <_svfiprintf_r+0x2c>
 8008f12:	ab03      	add	r3, sp, #12
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	462a      	mov	r2, r5
 8008f18:	4b05      	ldr	r3, [pc, #20]	@ (8008f30 <_svfiprintf_r+0x1f0>)
 8008f1a:	a904      	add	r1, sp, #16
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f000 f879 	bl	8009014 <_printf_i>
 8008f22:	e7ed      	b.n	8008f00 <_svfiprintf_r+0x1c0>
 8008f24:	080098a4 	.word	0x080098a4
 8008f28:	080098ae 	.word	0x080098ae
 8008f2c:	00000000 	.word	0x00000000
 8008f30:	08008c89 	.word	0x08008c89
 8008f34:	080098aa 	.word	0x080098aa

08008f38 <_printf_common>:
 8008f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	4698      	mov	r8, r3
 8008f40:	688a      	ldr	r2, [r1, #8]
 8008f42:	690b      	ldr	r3, [r1, #16]
 8008f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	bfb8      	it	lt
 8008f4c:	4613      	movlt	r3, r2
 8008f4e:	6033      	str	r3, [r6, #0]
 8008f50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f54:	4607      	mov	r7, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	b10a      	cbz	r2, 8008f5e <_printf_common+0x26>
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	6033      	str	r3, [r6, #0]
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	0699      	lsls	r1, r3, #26
 8008f62:	bf42      	ittt	mi
 8008f64:	6833      	ldrmi	r3, [r6, #0]
 8008f66:	3302      	addmi	r3, #2
 8008f68:	6033      	strmi	r3, [r6, #0]
 8008f6a:	6825      	ldr	r5, [r4, #0]
 8008f6c:	f015 0506 	ands.w	r5, r5, #6
 8008f70:	d106      	bne.n	8008f80 <_printf_common+0x48>
 8008f72:	f104 0a19 	add.w	sl, r4, #25
 8008f76:	68e3      	ldr	r3, [r4, #12]
 8008f78:	6832      	ldr	r2, [r6, #0]
 8008f7a:	1a9b      	subs	r3, r3, r2
 8008f7c:	42ab      	cmp	r3, r5
 8008f7e:	dc26      	bgt.n	8008fce <_printf_common+0x96>
 8008f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f84:	6822      	ldr	r2, [r4, #0]
 8008f86:	3b00      	subs	r3, #0
 8008f88:	bf18      	it	ne
 8008f8a:	2301      	movne	r3, #1
 8008f8c:	0692      	lsls	r2, r2, #26
 8008f8e:	d42b      	bmi.n	8008fe8 <_printf_common+0xb0>
 8008f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f94:	4641      	mov	r1, r8
 8008f96:	4638      	mov	r0, r7
 8008f98:	47c8      	blx	r9
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	d01e      	beq.n	8008fdc <_printf_common+0xa4>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	6922      	ldr	r2, [r4, #16]
 8008fa2:	f003 0306 	and.w	r3, r3, #6
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	bf02      	ittt	eq
 8008faa:	68e5      	ldreq	r5, [r4, #12]
 8008fac:	6833      	ldreq	r3, [r6, #0]
 8008fae:	1aed      	subeq	r5, r5, r3
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	bf0c      	ite	eq
 8008fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fb8:	2500      	movne	r5, #0
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	bfc4      	itt	gt
 8008fbe:	1a9b      	subgt	r3, r3, r2
 8008fc0:	18ed      	addgt	r5, r5, r3
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	341a      	adds	r4, #26
 8008fc6:	42b5      	cmp	r5, r6
 8008fc8:	d11a      	bne.n	8009000 <_printf_common+0xc8>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e008      	b.n	8008fe0 <_printf_common+0xa8>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	47c8      	blx	r9
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d103      	bne.n	8008fe4 <_printf_common+0xac>
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	e7c6      	b.n	8008f76 <_printf_common+0x3e>
 8008fe8:	18e1      	adds	r1, r4, r3
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	2030      	movs	r0, #48	@ 0x30
 8008fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ff2:	4422      	add	r2, r4
 8008ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ffc:	3302      	adds	r3, #2
 8008ffe:	e7c7      	b.n	8008f90 <_printf_common+0x58>
 8009000:	2301      	movs	r3, #1
 8009002:	4622      	mov	r2, r4
 8009004:	4641      	mov	r1, r8
 8009006:	4638      	mov	r0, r7
 8009008:	47c8      	blx	r9
 800900a:	3001      	adds	r0, #1
 800900c:	d0e6      	beq.n	8008fdc <_printf_common+0xa4>
 800900e:	3601      	adds	r6, #1
 8009010:	e7d9      	b.n	8008fc6 <_printf_common+0x8e>
	...

08009014 <_printf_i>:
 8009014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	7e0f      	ldrb	r7, [r1, #24]
 800901a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800901c:	2f78      	cmp	r7, #120	@ 0x78
 800901e:	4691      	mov	r9, r2
 8009020:	4680      	mov	r8, r0
 8009022:	460c      	mov	r4, r1
 8009024:	469a      	mov	sl, r3
 8009026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800902a:	d807      	bhi.n	800903c <_printf_i+0x28>
 800902c:	2f62      	cmp	r7, #98	@ 0x62
 800902e:	d80a      	bhi.n	8009046 <_printf_i+0x32>
 8009030:	2f00      	cmp	r7, #0
 8009032:	f000 80d2 	beq.w	80091da <_printf_i+0x1c6>
 8009036:	2f58      	cmp	r7, #88	@ 0x58
 8009038:	f000 80b9 	beq.w	80091ae <_printf_i+0x19a>
 800903c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009044:	e03a      	b.n	80090bc <_printf_i+0xa8>
 8009046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800904a:	2b15      	cmp	r3, #21
 800904c:	d8f6      	bhi.n	800903c <_printf_i+0x28>
 800904e:	a101      	add	r1, pc, #4	@ (adr r1, 8009054 <_printf_i+0x40>)
 8009050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009054:	080090ad 	.word	0x080090ad
 8009058:	080090c1 	.word	0x080090c1
 800905c:	0800903d 	.word	0x0800903d
 8009060:	0800903d 	.word	0x0800903d
 8009064:	0800903d 	.word	0x0800903d
 8009068:	0800903d 	.word	0x0800903d
 800906c:	080090c1 	.word	0x080090c1
 8009070:	0800903d 	.word	0x0800903d
 8009074:	0800903d 	.word	0x0800903d
 8009078:	0800903d 	.word	0x0800903d
 800907c:	0800903d 	.word	0x0800903d
 8009080:	080091c1 	.word	0x080091c1
 8009084:	080090eb 	.word	0x080090eb
 8009088:	0800917b 	.word	0x0800917b
 800908c:	0800903d 	.word	0x0800903d
 8009090:	0800903d 	.word	0x0800903d
 8009094:	080091e3 	.word	0x080091e3
 8009098:	0800903d 	.word	0x0800903d
 800909c:	080090eb 	.word	0x080090eb
 80090a0:	0800903d 	.word	0x0800903d
 80090a4:	0800903d 	.word	0x0800903d
 80090a8:	08009183 	.word	0x08009183
 80090ac:	6833      	ldr	r3, [r6, #0]
 80090ae:	1d1a      	adds	r2, r3, #4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6032      	str	r2, [r6, #0]
 80090b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090bc:	2301      	movs	r3, #1
 80090be:	e09d      	b.n	80091fc <_printf_i+0x1e8>
 80090c0:	6833      	ldr	r3, [r6, #0]
 80090c2:	6820      	ldr	r0, [r4, #0]
 80090c4:	1d19      	adds	r1, r3, #4
 80090c6:	6031      	str	r1, [r6, #0]
 80090c8:	0606      	lsls	r6, r0, #24
 80090ca:	d501      	bpl.n	80090d0 <_printf_i+0xbc>
 80090cc:	681d      	ldr	r5, [r3, #0]
 80090ce:	e003      	b.n	80090d8 <_printf_i+0xc4>
 80090d0:	0645      	lsls	r5, r0, #25
 80090d2:	d5fb      	bpl.n	80090cc <_printf_i+0xb8>
 80090d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090d8:	2d00      	cmp	r5, #0
 80090da:	da03      	bge.n	80090e4 <_printf_i+0xd0>
 80090dc:	232d      	movs	r3, #45	@ 0x2d
 80090de:	426d      	negs	r5, r5
 80090e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090e4:	4859      	ldr	r0, [pc, #356]	@ (800924c <_printf_i+0x238>)
 80090e6:	230a      	movs	r3, #10
 80090e8:	e011      	b.n	800910e <_printf_i+0xfa>
 80090ea:	6821      	ldr	r1, [r4, #0]
 80090ec:	6833      	ldr	r3, [r6, #0]
 80090ee:	0608      	lsls	r0, r1, #24
 80090f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80090f4:	d402      	bmi.n	80090fc <_printf_i+0xe8>
 80090f6:	0649      	lsls	r1, r1, #25
 80090f8:	bf48      	it	mi
 80090fa:	b2ad      	uxthmi	r5, r5
 80090fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80090fe:	4853      	ldr	r0, [pc, #332]	@ (800924c <_printf_i+0x238>)
 8009100:	6033      	str	r3, [r6, #0]
 8009102:	bf14      	ite	ne
 8009104:	230a      	movne	r3, #10
 8009106:	2308      	moveq	r3, #8
 8009108:	2100      	movs	r1, #0
 800910a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800910e:	6866      	ldr	r6, [r4, #4]
 8009110:	60a6      	str	r6, [r4, #8]
 8009112:	2e00      	cmp	r6, #0
 8009114:	bfa2      	ittt	ge
 8009116:	6821      	ldrge	r1, [r4, #0]
 8009118:	f021 0104 	bicge.w	r1, r1, #4
 800911c:	6021      	strge	r1, [r4, #0]
 800911e:	b90d      	cbnz	r5, 8009124 <_printf_i+0x110>
 8009120:	2e00      	cmp	r6, #0
 8009122:	d04b      	beq.n	80091bc <_printf_i+0x1a8>
 8009124:	4616      	mov	r6, r2
 8009126:	fbb5 f1f3 	udiv	r1, r5, r3
 800912a:	fb03 5711 	mls	r7, r3, r1, r5
 800912e:	5dc7      	ldrb	r7, [r0, r7]
 8009130:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009134:	462f      	mov	r7, r5
 8009136:	42bb      	cmp	r3, r7
 8009138:	460d      	mov	r5, r1
 800913a:	d9f4      	bls.n	8009126 <_printf_i+0x112>
 800913c:	2b08      	cmp	r3, #8
 800913e:	d10b      	bne.n	8009158 <_printf_i+0x144>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	07df      	lsls	r7, r3, #31
 8009144:	d508      	bpl.n	8009158 <_printf_i+0x144>
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	4299      	cmp	r1, r3
 800914c:	bfde      	ittt	le
 800914e:	2330      	movle	r3, #48	@ 0x30
 8009150:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009154:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009158:	1b92      	subs	r2, r2, r6
 800915a:	6122      	str	r2, [r4, #16]
 800915c:	f8cd a000 	str.w	sl, [sp]
 8009160:	464b      	mov	r3, r9
 8009162:	aa03      	add	r2, sp, #12
 8009164:	4621      	mov	r1, r4
 8009166:	4640      	mov	r0, r8
 8009168:	f7ff fee6 	bl	8008f38 <_printf_common>
 800916c:	3001      	adds	r0, #1
 800916e:	d14a      	bne.n	8009206 <_printf_i+0x1f2>
 8009170:	f04f 30ff 	mov.w	r0, #4294967295
 8009174:	b004      	add	sp, #16
 8009176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	f043 0320 	orr.w	r3, r3, #32
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	4833      	ldr	r0, [pc, #204]	@ (8009250 <_printf_i+0x23c>)
 8009184:	2778      	movs	r7, #120	@ 0x78
 8009186:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	6831      	ldr	r1, [r6, #0]
 800918e:	061f      	lsls	r7, r3, #24
 8009190:	f851 5b04 	ldr.w	r5, [r1], #4
 8009194:	d402      	bmi.n	800919c <_printf_i+0x188>
 8009196:	065f      	lsls	r7, r3, #25
 8009198:	bf48      	it	mi
 800919a:	b2ad      	uxthmi	r5, r5
 800919c:	6031      	str	r1, [r6, #0]
 800919e:	07d9      	lsls	r1, r3, #31
 80091a0:	bf44      	itt	mi
 80091a2:	f043 0320 	orrmi.w	r3, r3, #32
 80091a6:	6023      	strmi	r3, [r4, #0]
 80091a8:	b11d      	cbz	r5, 80091b2 <_printf_i+0x19e>
 80091aa:	2310      	movs	r3, #16
 80091ac:	e7ac      	b.n	8009108 <_printf_i+0xf4>
 80091ae:	4827      	ldr	r0, [pc, #156]	@ (800924c <_printf_i+0x238>)
 80091b0:	e7e9      	b.n	8009186 <_printf_i+0x172>
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	f023 0320 	bic.w	r3, r3, #32
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	e7f6      	b.n	80091aa <_printf_i+0x196>
 80091bc:	4616      	mov	r6, r2
 80091be:	e7bd      	b.n	800913c <_printf_i+0x128>
 80091c0:	6833      	ldr	r3, [r6, #0]
 80091c2:	6825      	ldr	r5, [r4, #0]
 80091c4:	6961      	ldr	r1, [r4, #20]
 80091c6:	1d18      	adds	r0, r3, #4
 80091c8:	6030      	str	r0, [r6, #0]
 80091ca:	062e      	lsls	r6, r5, #24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	d501      	bpl.n	80091d4 <_printf_i+0x1c0>
 80091d0:	6019      	str	r1, [r3, #0]
 80091d2:	e002      	b.n	80091da <_printf_i+0x1c6>
 80091d4:	0668      	lsls	r0, r5, #25
 80091d6:	d5fb      	bpl.n	80091d0 <_printf_i+0x1bc>
 80091d8:	8019      	strh	r1, [r3, #0]
 80091da:	2300      	movs	r3, #0
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	4616      	mov	r6, r2
 80091e0:	e7bc      	b.n	800915c <_printf_i+0x148>
 80091e2:	6833      	ldr	r3, [r6, #0]
 80091e4:	1d1a      	adds	r2, r3, #4
 80091e6:	6032      	str	r2, [r6, #0]
 80091e8:	681e      	ldr	r6, [r3, #0]
 80091ea:	6862      	ldr	r2, [r4, #4]
 80091ec:	2100      	movs	r1, #0
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7f7 f816 	bl	8000220 <memchr>
 80091f4:	b108      	cbz	r0, 80091fa <_printf_i+0x1e6>
 80091f6:	1b80      	subs	r0, r0, r6
 80091f8:	6060      	str	r0, [r4, #4]
 80091fa:	6863      	ldr	r3, [r4, #4]
 80091fc:	6123      	str	r3, [r4, #16]
 80091fe:	2300      	movs	r3, #0
 8009200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009204:	e7aa      	b.n	800915c <_printf_i+0x148>
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	4632      	mov	r2, r6
 800920a:	4649      	mov	r1, r9
 800920c:	4640      	mov	r0, r8
 800920e:	47d0      	blx	sl
 8009210:	3001      	adds	r0, #1
 8009212:	d0ad      	beq.n	8009170 <_printf_i+0x15c>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	079b      	lsls	r3, r3, #30
 8009218:	d413      	bmi.n	8009242 <_printf_i+0x22e>
 800921a:	68e0      	ldr	r0, [r4, #12]
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	4298      	cmp	r0, r3
 8009220:	bfb8      	it	lt
 8009222:	4618      	movlt	r0, r3
 8009224:	e7a6      	b.n	8009174 <_printf_i+0x160>
 8009226:	2301      	movs	r3, #1
 8009228:	4632      	mov	r2, r6
 800922a:	4649      	mov	r1, r9
 800922c:	4640      	mov	r0, r8
 800922e:	47d0      	blx	sl
 8009230:	3001      	adds	r0, #1
 8009232:	d09d      	beq.n	8009170 <_printf_i+0x15c>
 8009234:	3501      	adds	r5, #1
 8009236:	68e3      	ldr	r3, [r4, #12]
 8009238:	9903      	ldr	r1, [sp, #12]
 800923a:	1a5b      	subs	r3, r3, r1
 800923c:	42ab      	cmp	r3, r5
 800923e:	dcf2      	bgt.n	8009226 <_printf_i+0x212>
 8009240:	e7eb      	b.n	800921a <_printf_i+0x206>
 8009242:	2500      	movs	r5, #0
 8009244:	f104 0619 	add.w	r6, r4, #25
 8009248:	e7f5      	b.n	8009236 <_printf_i+0x222>
 800924a:	bf00      	nop
 800924c:	080098b5 	.word	0x080098b5
 8009250:	080098c6 	.word	0x080098c6

08009254 <memmove>:
 8009254:	4288      	cmp	r0, r1
 8009256:	b510      	push	{r4, lr}
 8009258:	eb01 0402 	add.w	r4, r1, r2
 800925c:	d902      	bls.n	8009264 <memmove+0x10>
 800925e:	4284      	cmp	r4, r0
 8009260:	4623      	mov	r3, r4
 8009262:	d807      	bhi.n	8009274 <memmove+0x20>
 8009264:	1e43      	subs	r3, r0, #1
 8009266:	42a1      	cmp	r1, r4
 8009268:	d008      	beq.n	800927c <memmove+0x28>
 800926a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800926e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009272:	e7f8      	b.n	8009266 <memmove+0x12>
 8009274:	4402      	add	r2, r0
 8009276:	4601      	mov	r1, r0
 8009278:	428a      	cmp	r2, r1
 800927a:	d100      	bne.n	800927e <memmove+0x2a>
 800927c:	bd10      	pop	{r4, pc}
 800927e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009286:	e7f7      	b.n	8009278 <memmove+0x24>

08009288 <_sbrk_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d06      	ldr	r5, [pc, #24]	@ (80092a4 <_sbrk_r+0x1c>)
 800928c:	2300      	movs	r3, #0
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	602b      	str	r3, [r5, #0]
 8009294:	f7f9 fb5e 	bl	8002954 <_sbrk>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_sbrk_r+0x1a>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_sbrk_r+0x1a>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	20000af0 	.word	0x20000af0

080092a8 <_realloc_r>:
 80092a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ac:	4680      	mov	r8, r0
 80092ae:	4615      	mov	r5, r2
 80092b0:	460c      	mov	r4, r1
 80092b2:	b921      	cbnz	r1, 80092be <_realloc_r+0x16>
 80092b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092b8:	4611      	mov	r1, r2
 80092ba:	f7ff bc59 	b.w	8008b70 <_malloc_r>
 80092be:	b92a      	cbnz	r2, 80092cc <_realloc_r+0x24>
 80092c0:	f7ff fbea 	bl	8008a98 <_free_r>
 80092c4:	2400      	movs	r4, #0
 80092c6:	4620      	mov	r0, r4
 80092c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092cc:	f000 f81a 	bl	8009304 <_malloc_usable_size_r>
 80092d0:	4285      	cmp	r5, r0
 80092d2:	4606      	mov	r6, r0
 80092d4:	d802      	bhi.n	80092dc <_realloc_r+0x34>
 80092d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092da:	d8f4      	bhi.n	80092c6 <_realloc_r+0x1e>
 80092dc:	4629      	mov	r1, r5
 80092de:	4640      	mov	r0, r8
 80092e0:	f7ff fc46 	bl	8008b70 <_malloc_r>
 80092e4:	4607      	mov	r7, r0
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0ec      	beq.n	80092c4 <_realloc_r+0x1c>
 80092ea:	42b5      	cmp	r5, r6
 80092ec:	462a      	mov	r2, r5
 80092ee:	4621      	mov	r1, r4
 80092f0:	bf28      	it	cs
 80092f2:	4632      	movcs	r2, r6
 80092f4:	f7ff fbc2 	bl	8008a7c <memcpy>
 80092f8:	4621      	mov	r1, r4
 80092fa:	4640      	mov	r0, r8
 80092fc:	f7ff fbcc 	bl	8008a98 <_free_r>
 8009300:	463c      	mov	r4, r7
 8009302:	e7e0      	b.n	80092c6 <_realloc_r+0x1e>

08009304 <_malloc_usable_size_r>:
 8009304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009308:	1f18      	subs	r0, r3, #4
 800930a:	2b00      	cmp	r3, #0
 800930c:	bfbc      	itt	lt
 800930e:	580b      	ldrlt	r3, [r1, r0]
 8009310:	18c0      	addlt	r0, r0, r3
 8009312:	4770      	bx	lr

08009314 <_init>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr

08009320 <_fini>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	bf00      	nop
 8009324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009326:	bc08      	pop	{r3}
 8009328:	469e      	mov	lr, r3
 800932a:	4770      	bx	lr
