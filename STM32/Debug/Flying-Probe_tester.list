
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd0c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800bedc  0800bedc  0000cedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c540  0800c540  0000e0c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c540  0800c540  0000d540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c548  0800c548  0000e0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c548  0800c548  0000d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c54c  0800c54c  0000d54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800c550  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e18  200000c0  0800c610  0000e0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed8  0800c610  0000eed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e9d  00000000  00000000  0000e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad6  00000000  00000000  00030f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00035a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001517  00000000  00000000  000375c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b226  00000000  00000000  00038ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026733  00000000  00000000  00063cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f97e4  00000000  00000000  0008a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183c14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000781c  00000000  00000000  00183c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018b474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bec4 	.word	0x0800bec4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800bec4 	.word	0x0800bec4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f006 ffc5 	bl	8007554 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f007 f82b 	bl	8007634 <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f004 fb2b 	bl	8004cd4 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000dc 	.word	0x200000dc

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <LCD_I2C_Cursor+0x30>)
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	78bb      	ldrb	r3, [r7, #2]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	3b80      	subs	r3, #128	@ 0x80
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff68 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800c4e8 	.word	0x0800c4e8

080007d4 <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d90a      	bls.n	8000800 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	3b02      	subs	r3, #2
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	78bb      	ldrb	r3, [r7, #2]
 80007f2:	3314      	adds	r3, #20
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffd1 	bl	80007a0 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 80007fe:	e005      	b.n	800080c <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8000800:	78ba      	ldrb	r2, [r7, #2]
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffca 	bl	80007a0 <LCD_I2C_Cursor>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ff3a 	bl	8000698 <__lcd_i2c_write_command>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3340      	adds	r3, #64	@ 0x40
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff ff26 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
 8000850:	e00a      	b.n	8000868 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff ff2b 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	3301      	adds	r3, #1
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d9f1      	bls.n	8000852 <LCD_I2C_DefineChar+0x26>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 8000886:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8000888:	69b8      	ldr	r0, [r7, #24]
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000892:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	461a      	mov	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffbf 	bl	800082c <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]
 80008b2:	e025      	b.n	8000900 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	3303      	adds	r3, #3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff88 	bl	80007d4 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff5b 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe6b 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	3303      	adds	r3, #3
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff75 	bl	80007d4 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fedf 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 80008fa:	7ffb      	ldrb	r3, [r7, #31]
 80008fc:	3301      	adds	r3, #1
 80008fe:	77fb      	strb	r3, [r7, #31]
 8000900:	7ffa      	ldrb	r2, [r7, #31]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3d5      	bcc.n	80008b4 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800bee8 	.word	0x0800bee8
 8000918:	0800bef4 	.word	0x0800bef4

0800091c <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t CurrentPosition;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e07d      	b.n	8000a26 <HAL_TIM_PWM_PulseFinishedCallback+0x10a>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4942      	ldr	r1, [pc, #264]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2064      	movs	r0, #100	@ 0x64
 8000934:	fb00 f303 	mul.w	r3, r0, r3
 8000938:	440b      	add	r3, r1
 800093a:	330c      	adds	r3, #12
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	429a      	cmp	r2, r3
 8000942:	d16d      	bne.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  motors[i].stepsTaken++;
 8000944:	4a3c      	ldr	r2, [pc, #240]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2164      	movs	r1, #100	@ 0x64
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	4413      	add	r3, r2
 8000950:	3344      	adds	r3, #68	@ 0x44
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	4938      	ldr	r1, [pc, #224]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2064      	movs	r0, #100	@ 0x64
 800095c:	fb00 f303 	mul.w	r3, r0, r3
 8000960:	440b      	add	r3, r1
 8000962:	3344      	adds	r3, #68	@ 0x44
 8000964:	601a      	str	r2, [r3, #0]
		  stepsTaken[i] = motors[i].stepsTaken;
 8000966:	4a34      	ldr	r2, [pc, #208]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2164      	movs	r1, #100	@ 0x64
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	4413      	add	r3, r2
 8000972:	3344      	adds	r3, #68	@ 0x44
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4931      	ldr	r1, [pc, #196]	@ (8000a3c <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 800097e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2164      	movs	r1, #100	@ 0x64
 8000984:	fb01 f303 	mul.w	r3, r1, r3
 8000988:	4413      	add	r3, r2
 800098a:	331c      	adds	r3, #28
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	492a      	ldr	r1, [pc, #168]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2064      	movs	r0, #100	@ 0x64
 8000994:	fb00 f303 	mul.w	r3, r0, r3
 8000998:	440b      	add	r3, r1
 800099a:	3320      	adds	r3, #32
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	4610      	mov	r0, r2
 80009a2:	f004 f8b1 	bl	8004b08 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d111      	bne.n	80009d0 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		  motors[i].StepsFront++;
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2164      	movs	r1, #100	@ 0x64
 80009b2:	fb01 f303 	mul.w	r3, r1, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	3358      	adds	r3, #88	@ 0x58
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	491e      	ldr	r1, [pc, #120]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2064      	movs	r0, #100	@ 0x64
 80009c4:	fb00 f303 	mul.w	r3, r0, r3
 80009c8:	440b      	add	r3, r1
 80009ca:	3358      	adds	r3, #88	@ 0x58
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e027      	b.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2164      	movs	r1, #100	@ 0x64
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	4413      	add	r3, r2
 80009dc:	331c      	adds	r3, #28
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4915      	ldr	r1, [pc, #84]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2064      	movs	r0, #100	@ 0x64
 80009e6:	fb00 f303 	mul.w	r3, r0, r3
 80009ea:	440b      	add	r3, r1
 80009ec:	3320      	adds	r3, #32
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4610      	mov	r0, r2
 80009f4:	f004 f888 	bl	8004b08 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>

			  		  motors[i].StepsBack++;
 80009fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2164      	movs	r1, #100	@ 0x64
 8000a04:	fb01 f303 	mul.w	r3, r1, r3
 8000a08:	4413      	add	r3, r2
 8000a0a:	335c      	adds	r3, #92	@ 0x5c
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	4909      	ldr	r1, [pc, #36]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2064      	movs	r0, #100	@ 0x64
 8000a16:	fb00 f303 	mul.w	r3, r0, r3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	335c      	adds	r3, #92	@ 0x5c
 8000a1e:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	f77f af7e 	ble.w	800092a <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		 }
      }

    }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000b88 	.word	0x20000b88
 8000a3c:	200000f8 	.word	0x200000f8

08000a40 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69d8      	ldr	r0, [r3, #28]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	8c1b      	ldrh	r3, [r3, #32]
 8000a54:	78fa      	ldrb	r2, [r7, #3]
 8000a56:	4619      	mov	r1, r3
 8000a58:	f004 f86e 	bl	8004b38 <HAL_GPIO_WritePin>
    direction = state;
 8000a5c:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <TMC2209_SetDirection+0x2c>)
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000f5 	.word	0x200000f5

08000a70 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a84:	78fa      	ldrb	r2, [r7, #3]
 8000a86:	4619      	mov	r1, r3
 8000a88:	f004 f856 	bl	8004b38 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 8000aa6:	f005 fb0f 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abc:	3b01      	subs	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d106      	bne.n	8000ae8 <TMC2209_SetSpeed+0x54>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	0852      	lsrs	r2, r2, #1
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ae6:	e031      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d106      	bne.n	8000afe <TMC2209_SetSpeed+0x6a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	085b      	lsrs	r3, r3, #1
 8000afa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000afc:	e026      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	d106      	bne.n	8000b14 <TMC2209_SetSpeed+0x80>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	085b      	lsrs	r3, r3, #1
 8000b10:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b12:	e01b      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b0c      	cmp	r3, #12
 8000b1a:	d106      	bne.n	8000b2a <TMC2209_SetSpeed+0x96>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	085b      	lsrs	r3, r3, #1
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b28:	e010      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d106      	bne.n	8000b40 <TMC2209_SetSpeed+0xac>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b3e:	e005      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff80 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f007 f81e 	bl	8007bb4 <HAL_TIM_PWM_Stop_IT>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000b94:	2100      	movs	r1, #0
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff6a 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f006 fec0 	bl	8007924 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <TMC2209_Start_C>:
void TMC2209_Start_C(Motor *motor) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	60bb      	str	r3, [r7, #8]
   //motor->stepsTaken = 0;
	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff50 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000bd0:	68b9      	ldr	r1, [r7, #8]
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f006 fea6 	bl	8007924 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <debug_print>:
    }
}



void debug_print(const char* msg) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fb0d 	bl	8000210 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <debug_print+0x28>)
 8000c02:	f008 f9ab 	bl	8008f5c <HAL_UART_Transmit>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200004c8 	.word	0x200004c8

08000c14 <debug_print_hex>:

 void debug_print_hex(uint8_t* data, uint8_t length) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b09e      	sub	sp, #120	@ 0x78
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
    char buffer[100];
    char* ptr = buffer;
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	677b      	str	r3, [r7, #116]	@ 0x74

    ptr += sprintf(ptr, "[");
 8000c26:	491c      	ldr	r1, [pc, #112]	@ (8000c98 <debug_print_hex+0x84>)
 8000c28:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000c2a:	f00a fc55 	bl	800b4d8 <siprintf>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c34:	4413      	add	r3, r2
 8000c36:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000c3e:	e013      	b.n	8000c68 <debug_print_hex+0x54>
        ptr += sprintf(ptr, "%02X ", data[i]);
 8000c40:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4913      	ldr	r1, [pc, #76]	@ (8000c9c <debug_print_hex+0x88>)
 8000c4e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000c50:	f00a fc42 	bl	800b4d8 <siprintf>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c5a:	4413      	add	r3, r2
 8000c5c:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 8000c5e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000c62:	3301      	adds	r3, #1
 8000c64:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000c68:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3e6      	bcc.n	8000c40 <debug_print_hex+0x2c>
    }
    ptr += sprintf(ptr, "]\r\n");
 8000c72:	490b      	ldr	r1, [pc, #44]	@ (8000ca0 <debug_print_hex+0x8c>)
 8000c74:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000c76:	f00a fc2f 	bl	800b4d8 <siprintf>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c80:	4413      	add	r3, r2
 8000c82:	677b      	str	r3, [r7, #116]	@ 0x74

    debug_print(buffer);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffad 	bl	8000be8 <debug_print>
}
 8000c8e:	bf00      	nop
 8000c90:	3778      	adds	r7, #120	@ 0x78
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	0800bfe8 	.word	0x0800bfe8
 8000c9c:	0800bfec 	.word	0x0800bfec
 8000ca0:	0800bff4 	.word	0x0800bff4

08000ca4 <calculate_CRC>:

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73bb      	strb	r3, [r7, #14]
 8000cb8:	e027      	b.n	8000d0a <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	733b      	strb	r3, [r7, #12]
 8000cc8:	e019      	b.n	8000cfe <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	09db      	lsrs	r3, r3, #7
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	7b7b      	ldrb	r3, [r7, #13]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d007      	beq.n	8000cec <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	f083 0307 	eor.w	r3, r3, #7
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e002      	b.n	8000cf2 <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8000cf2:	7b7b      	ldrb	r3, [r7, #13]
 8000cf4:	085b      	lsrs	r3, r3, #1
 8000cf6:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	733b      	strb	r3, [r7, #12]
 8000cfe:	7b3b      	ldrb	r3, [r7, #12]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9e2      	bls.n	8000cca <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	3301      	adds	r3, #1
 8000d08:	73bb      	strb	r3, [r7, #14]
 8000d0a:	7bba      	ldrb	r2, [r7, #14]
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3d3      	bcc.n	8000cba <calculate_CRC+0x16>
        }
    }
    return crc;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <TMC2209_WaitForReply>:
}




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8000d28:	f002 fff6 	bl	8003d18 <HAL_GetTick>
 8000d2c:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 8000d2e:	e00c      	b.n	8000d4a <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 8000d30:	f002 fff2 	bl	8003d18 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d204      	bcs.n	8000d4a <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <TMC2209_WaitForReply+0x44>)
 8000d42:	f7ff ff51 	bl	8000be8 <debug_print>
             return 0; // Timeout
 8000d46:	2300      	movs	r3, #0
 8000d48:	e008      	b.n	8000d5c <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <TMC2209_WaitForReply+0x48>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0ed      	beq.n	8000d30 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <TMC2209_WaitForReply+0x48>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 8000d5a:	2301      	movs	r3, #1
 }
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	0800c014 	.word	0x0800c014
 8000d68:	20000124 	.word	0x20000124

08000d6c <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
	uint8_t flag = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	6858      	ldr	r0, [r3, #4]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	68f9      	ldr	r1, [r7, #12]
 8000d8c:	f008 f8e6 	bl	8008f5c <HAL_UART_Transmit>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <TMC2209_sendCommand+0x34>
         debug_print("Failed to send command.\r\n");
 8000d96:	481a      	ldr	r0, [pc, #104]	@ (8000e00 <TMC2209_sendCommand+0x94>)
 8000d98:	f7ff ff26 	bl	8000be8 <debug_print>
         return 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e02a      	b.n	8000df6 <TMC2209_sendCommand+0x8a>
     }


     if(readLength){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d026      	beq.n	8000df4 <TMC2209_sendCommand+0x88>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	6858      	ldr	r0, [r3, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	4913      	ldr	r1, [pc, #76]	@ (8000e04 <TMC2209_sendCommand+0x98>)
 8000db6:	f008 f95a 	bl	800906e <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 8000dba:	20c8      	movs	r0, #200	@ 0xc8
 8000dbc:	f7ff ffb0 	bl	8000d20 <TMC2209_WaitForReply>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <TMC2209_sendCommand+0x64>
         debug_print("No reply received.\r\n");
 8000dc6:	4810      	ldr	r0, [pc, #64]	@ (8000e08 <TMC2209_sendCommand+0x9c>)
 8000dc8:	f7ff ff0e 	bl	8000be8 <debug_print>
         return 0; // command failed
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e012      	b.n	8000df6 <TMC2209_sendCommand+0x8a>
     }
     /// DEBUG ///
     // Send transmitted data -- Note: this can't be called before receiving or else it will interfere with huart2

     debug_print("Data Transmitted: ");
 8000dd0:	480e      	ldr	r0, [pc, #56]	@ (8000e0c <TMC2209_sendCommand+0xa0>)
 8000dd2:	f7ff ff09 	bl	8000be8 <debug_print>
     debug_print_hex(command, writeLength);
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff ff19 	bl	8000c14 <debug_print_hex>
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
 8000de2:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <TMC2209_sendCommand+0xa4>)
 8000de4:	f7ff ff00 	bl	8000be8 <debug_print>
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
 8000de8:	2108      	movs	r1, #8
 8000dea:	480a      	ldr	r0, [pc, #40]	@ (8000e14 <TMC2209_sendCommand+0xa8>)
 8000dec:	f7ff ff12 	bl	8000c14 <debug_print_hex>

     return rxBuffer; // Success
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <TMC2209_sendCommand+0xa8>)
 8000df2:	e000      	b.n	8000df6 <TMC2209_sendCommand+0x8a>
     }

     return flag;
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	0800c034 	.word	0x0800c034
 8000e04:	20000110 	.word	0x20000110
 8000e08:	0800c050 	.word	0x0800c050
 8000e0c:	0800c068 	.word	0x0800c068
 8000e10:	0800c07c 	.word	0x0800c07c
 8000e14:	2000011c 	.word	0x2000011c

08000e18 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	460b      	mov	r3, r1
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8000e26:	2305      	movs	r3, #5
 8000e28:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	7a1b      	ldrb	r3, [r3, #8]
 8000e2e:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8000e30:	7afb      	ldrb	r3, [r7, #11]
 8000e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0e1b      	lsrs	r3, r3, #24
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	141b      	asrs	r3, r3, #16
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	121b      	asrs	r3, r3, #8
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2107      	movs	r1, #7
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff20 	bl	8000ca4 <calculate_CRC>
 8000e64:	4603      	mov	r3, r0
 8000e66:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8000e68:	f107 0010 	add.w	r0, r7, #16
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2108      	movs	r1, #8
 8000e72:	f7ff ff7b 	bl	8000d6c <TMC2209_sendCommand>

 }
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 	uint8_t read_request_command[8] = { 0 };
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]

// 	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
// 		return tmc2209->config->shadowRegister[address];

 	read_request_command[0] = SYNC;
 8000e94:	2305      	movs	r3, #5
 8000e96:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7a1b      	ldrb	r3, [r3, #8]
 8000e9c:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fefb 	bl	8000ca4 <calculate_CRC>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 8000eb2:	f107 000c 	add.w	r0, r7, #12
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2208      	movs	r2, #8
 8000eba:	2104      	movs	r1, #4
 8000ebc:	f7ff ff56 	bl	8000d6c <TMC2209_sendCommand>
 8000ec0:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d00c      	beq.n	8000ee4 <TMC2209_readInit+0x64>
 		// If first byte equals 0 then it means no reply so return
 		if (verifyBuffer[0] == 0)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <TMC2209_readInit+0x58>
 			return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e03e      	b.n	8000f56 <TMC2209_readInit+0xd6>
 		debug_print("Invalid data received!(SYNC Byte)\r\n");
 8000ed8:	4821      	ldr	r0, [pc, #132]	@ (8000f60 <TMC2209_readInit+0xe0>)
 8000eda:	f7ff fe85 	bl	8000be8 <debug_print>
 		return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e038      	b.n	8000f56 <TMC2209_readInit+0xd6>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2bff      	cmp	r3, #255	@ 0xff
 8000eec:	d005      	beq.n	8000efa <TMC2209_readInit+0x7a>
 		debug_print("Invalid data received!(MCU Address)\r\n");
 8000eee:	481d      	ldr	r0, [pc, #116]	@ (8000f64 <TMC2209_readInit+0xe4>)
 8000ef0:	f7ff fe7a 	bl	8000be8 <debug_print>
 		return -1;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	e02d      	b.n	8000f56 <TMC2209_readInit+0xd6>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3302      	adds	r3, #2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d005      	beq.n	8000f12 <TMC2209_readInit+0x92>
 		debug_print("Invalid data received!(Register Address)\r\n");
 8000f06:	4818      	ldr	r0, [pc, #96]	@ (8000f68 <TMC2209_readInit+0xe8>)
 8000f08:	f7ff fe6e 	bl	8000be8 <debug_print>
 		return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	e021      	b.n	8000f56 <TMC2209_readInit+0xd6>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3307      	adds	r3, #7
 8000f16:	781c      	ldrb	r4, [r3, #0]
 8000f18:	2107      	movs	r1, #7
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff fec2 	bl	8000ca4 <calculate_CRC>
 8000f20:	4603      	mov	r3, r0
 8000f22:	429c      	cmp	r4, r3
 8000f24:	d005      	beq.n	8000f32 <TMC2209_readInit+0xb2>
 		debug_print("Invalid data received!(CRC)\r\n");
 8000f26:	4811      	ldr	r0, [pc, #68]	@ (8000f6c <TMC2209_readInit+0xec>)
 8000f28:	f7ff fe5e 	bl	8000be8 <debug_print>
 		return -1;
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	e011      	b.n	8000f56 <TMC2209_readInit+0xd6>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3303      	adds	r3, #3
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	061a      	lsls	r2, r3, #24
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	041b      	lsls	r3, r3, #16
 8000f42:	431a      	orrs	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3305      	adds	r3, #5
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	3206      	adds	r2, #6
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4313      	orrs	r3, r2
 }
 8000f56:	4618      	mov	r0, r3
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800c090 	.word	0x0800c090
 8000f64:	0800c0b4 	.word	0x0800c0b4
 8000f68:	0800c0dc 	.word	0x0800c0dc
 8000f6c:	0800c108 	.word	0x0800c108

08000f70 <TMC2209_enable_PDNuart>:
    }

    return spreadCycleEnabled; // Return 1 if SpreadCycle is enabled, 0 otherwise
}

void TMC2209_enable_PDNuart(Motor *tmc2209){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0a8      	sub	sp, #160	@ 0xa0
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f002 fed9 	bl	8003d30 <HAL_Delay>
	 uint8_t driverID = tmc2209->driver.id;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 char debug_msg[150];
	 snprintf(debug_msg, sizeof(debug_msg), "----- Enabling driver via GCONF registe Driver: %u -----\r\n", driverID);
 8000f86:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000f8a:	f107 0008 	add.w	r0, r7, #8
 8000f8e:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <TMC2209_enable_PDNuart+0x44>)
 8000f90:	2196      	movs	r1, #150	@ 0x96
 8000f92:	f00a fa6d 	bl	800b470 <sniprintf>
	 debug_print(debug_msg);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe24 	bl	8000be8 <debug_print>
	 TMC2209_writeInit(tmc2209, 0x00, 0x00000040); // Set `pdn_disable = 1` in GCONF
 8000fa0:	2240      	movs	r2, #64	@ 0x40
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff37 	bl	8000e18 <TMC2209_writeInit>
}
 8000faa:	bf00      	nop
 8000fac:	37a0      	adds	r7, #160	@ 0xa0
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0800c25c 	.word	0x0800c25c

08000fb8 <setMicrosteppingResolution>:

 }


// Function to set the microstepping resolution through UART
void setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ac      	sub	sp, #176	@ 0xb0
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f002 feb3 	bl	8003d30 <HAL_Delay>
    uint8_t driverID = tmc2209->driver.id;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
    char debug_msg[150];

    snprintf(debug_msg, sizeof(debug_msg), "----- Setting Microstepping For Driver ID: %u -----\r\n", driverID);
 8000fd2:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8000fd6:	f107 0008 	add.w	r0, r7, #8
 8000fda:	4a6d      	ldr	r2, [pc, #436]	@ (8001190 <setMicrosteppingResolution+0x1d8>)
 8000fdc:	2196      	movs	r1, #150	@ 0x96
 8000fde:	f00a fa47 	bl	800b470 <sniprintf>
    debug_print(debug_msg);
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fdfe 	bl	8000be8 <debug_print>
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2296      	movs	r2, #150	@ 0x96
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00a fa8f 	bl	800b518 <memset>
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8000ffa:	2380      	movs	r3, #128	@ 0x80
 8000ffc:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8001000:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8001004:	461a      	mov	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff05 	bl	8000e18 <TMC2209_writeInit>

    HAL_Delay(2);
 800100e:	2002      	movs	r0, #2
 8001010:	f002 fe8e 	bl	8003d30 <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8001014:	216c      	movs	r1, #108	@ 0x6c
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff32 	bl	8000e80 <TMC2209_readInit>
 800101c:	4603      	mov	r3, r0
 800101e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8001022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001026:	0e1b      	lsrs	r3, r3, #24
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001038:	d053      	beq.n	80010e2 <setMicrosteppingResolution+0x12a>
 800103a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800103e:	dc74      	bgt.n	800112a <setMicrosteppingResolution+0x172>
 8001040:	2b80      	cmp	r3, #128	@ 0x80
 8001042:	d052      	beq.n	80010ea <setMicrosteppingResolution+0x132>
 8001044:	2b80      	cmp	r3, #128	@ 0x80
 8001046:	dc70      	bgt.n	800112a <setMicrosteppingResolution+0x172>
 8001048:	2b20      	cmp	r3, #32
 800104a:	dc47      	bgt.n	80010dc <setMicrosteppingResolution+0x124>
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd6c      	ble.n	800112a <setMicrosteppingResolution+0x172>
 8001050:	3b01      	subs	r3, #1
 8001052:	2b1f      	cmp	r3, #31
 8001054:	d869      	bhi.n	800112a <setMicrosteppingResolution+0x172>
 8001056:	a201      	add	r2, pc, #4	@ (adr r2, 800105c <setMicrosteppingResolution+0xa4>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	08001123 	.word	0x08001123
 8001060:	0800111b 	.word	0x0800111b
 8001064:	0800112b 	.word	0x0800112b
 8001068:	08001113 	.word	0x08001113
 800106c:	0800112b 	.word	0x0800112b
 8001070:	0800112b 	.word	0x0800112b
 8001074:	0800112b 	.word	0x0800112b
 8001078:	0800110b 	.word	0x0800110b
 800107c:	0800112b 	.word	0x0800112b
 8001080:	0800112b 	.word	0x0800112b
 8001084:	0800112b 	.word	0x0800112b
 8001088:	0800112b 	.word	0x0800112b
 800108c:	0800112b 	.word	0x0800112b
 8001090:	0800112b 	.word	0x0800112b
 8001094:	0800112b 	.word	0x0800112b
 8001098:	08001103 	.word	0x08001103
 800109c:	0800112b 	.word	0x0800112b
 80010a0:	0800112b 	.word	0x0800112b
 80010a4:	0800112b 	.word	0x0800112b
 80010a8:	0800112b 	.word	0x0800112b
 80010ac:	0800112b 	.word	0x0800112b
 80010b0:	0800112b 	.word	0x0800112b
 80010b4:	0800112b 	.word	0x0800112b
 80010b8:	0800112b 	.word	0x0800112b
 80010bc:	0800112b 	.word	0x0800112b
 80010c0:	0800112b 	.word	0x0800112b
 80010c4:	0800112b 	.word	0x0800112b
 80010c8:	0800112b 	.word	0x0800112b
 80010cc:	0800112b 	.word	0x0800112b
 80010d0:	0800112b 	.word	0x0800112b
 80010d4:	0800112b 	.word	0x0800112b
 80010d8:	080010fb 	.word	0x080010fb
 80010dc:	2b40      	cmp	r3, #64	@ 0x40
 80010de:	d008      	beq.n	80010f2 <setMicrosteppingResolution+0x13a>
 80010e0:	e023      	b.n	800112a <setMicrosteppingResolution+0x172>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80010e8:	e024      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 80010ea:	2301      	movs	r3, #1
 80010ec:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80010f0:	e020      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 80010f2:	2302      	movs	r3, #2
 80010f4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80010f8:	e01c      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 80010fa:	2303      	movs	r3, #3
 80010fc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001100:	e018      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 8001102:	2304      	movs	r3, #4
 8001104:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001108:	e014      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 800110a:	2305      	movs	r3, #5
 800110c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001110:	e010      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 8001112:	2306      	movs	r3, #6
 8001114:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001118:	e00c      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 800111a:	2307      	movs	r3, #7
 800111c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001120:	e008      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 8001122:	2308      	movs	r3, #8
 8001124:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001128:	e004      	b.n	8001134 <setMicrosteppingResolution+0x17c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 800112a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800112e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001132:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 8001134:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 8001138:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800113c:	429a      	cmp	r2, r3
 800113e:	d103      	bne.n	8001148 <setMicrosteppingResolution+0x190>
        debug_print("Resolution unchanged, no update needed.\n");
 8001140:	4814      	ldr	r0, [pc, #80]	@ (8001194 <setMicrosteppingResolution+0x1dc>)
 8001142:	f7ff fd51 	bl	8000be8 <debug_print>
 8001146:	e01f      	b.n	8001188 <setMicrosteppingResolution+0x1d0>
        return;
    }
    HAL_Delay(2);
 8001148:	2002      	movs	r0, #2
 800114a:	f002 fdf1 	bl	8003d30 <HAL_Delay>
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 800114e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001152:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001156:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800115a:	061b      	lsls	r3, r3, #24
 800115c:	4313      	orrs	r3, r2
 800115e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8001162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001166:	461a      	mov	r2, r3
 8001168:	216c      	movs	r1, #108	@ 0x6c
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fe54 	bl	8000e18 <TMC2209_writeInit>

    // Debug
    sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
 8001170:	887a      	ldrh	r2, [r7, #2]
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4908      	ldr	r1, [pc, #32]	@ (8001198 <setMicrosteppingResolution+0x1e0>)
 8001178:	4618      	mov	r0, r3
 800117a:	f00a f9ad 	bl	800b4d8 <siprintf>
    debug_print(debug_msg);
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fd30 	bl	8000be8 <debug_print>

}
 8001188:	37b0      	adds	r7, #176	@ 0xb0
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0800c2ec 	.word	0x0800c2ec
 8001194:	0800c324 	.word	0x0800c324
 8001198:	0800c350 	.word	0x0800c350

0800119c <TMC2209_setMotorsConfiguration>:
	debug_print("Send Delay set successfully! \r\n");

}

void TMC2209_setMotorsConfiguration(Motor *motors, uint8_t sendDelay, bool enableSpreadCycle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e026      	b.n	8001200 <TMC2209_setMotorsConfiguration+0x64>
    	HAL_Delay(2000);
 80011b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011b6:	f002 fdbb 	bl	8003d30 <HAL_Delay>
        TMC2209_enable_PDNuart(&motors[i]);
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	2264      	movs	r2, #100	@ 0x64
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fed2 	bl	8000f70 <TMC2209_enable_PDNuart>
    	HAL_Delay(1000);
 80011cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011d0:	f002 fdae 	bl	8003d30 <HAL_Delay>
    	uint16_t mstep = motors[i].driver.mstep;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2264      	movs	r2, #100	@ 0x64
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	885b      	ldrh	r3, [r3, #2]
 80011e2:	81bb      	strh	r3, [r7, #12]
        setMicrosteppingResolution(&motors[i], mstep);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2264      	movs	r2, #100	@ 0x64
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	89ba      	ldrh	r2, [r7, #12]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fedf 	bl	8000fb8 <setMicrosteppingResolution>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d9d5      	bls.n	80011b2 <TMC2209_setMotorsConfiguration+0x16>
       // HAL_Delay(1000);
      //  checkMicrosteppingResolution(&motors[i]);
       // HAL_Delay(1000);
       // TMC2209_SetSpreadCycle(&motors[i], enableSpreadCycle);
    }
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <MotorsHoming>:



void MotorsHoming(Motor *motor){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<4; i++){
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e14a      	b.n	80014b4 <MotorsHoming+0x2a4>
		if(i == 0){
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d13c      	bne.n	800129e <MotorsHoming+0x8e>
			TMC2209_SetDirection(&motor[0],0);
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fc0a 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[0],16000);
 800122c:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fc2f 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0){
 8001236:	2110      	movs	r1, #16
 8001238:	48a3      	ldr	r0, [pc, #652]	@ (80014c8 <MotorsHoming+0x2b8>)
 800123a:	f000 ff15 	bl	8002068 <IsSensorTriggered>
 800123e:	4603      	mov	r3, r0
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d026      	beq.n	8001298 <MotorsHoming+0x88>
					TMC2209_Start(&motor[0]);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fc98 	bl	8000b80 <TMC2209_Start>
					while(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0);
 8001250:	bf00      	nop
 8001252:	2110      	movs	r1, #16
 8001254:	489c      	ldr	r0, [pc, #624]	@ (80014c8 <MotorsHoming+0x2b8>)
 8001256:	f000 ff07 	bl	8002068 <IsSensorTriggered>
 800125a:	4603      	mov	r3, r0
 800125c:	f083 0301 	eor.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f5      	bne.n	8001252 <MotorsHoming+0x42>
					if((IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 1)){
 8001266:	2110      	movs	r1, #16
 8001268:	4897      	ldr	r0, [pc, #604]	@ (80014c8 <MotorsHoming+0x2b8>)
 800126a:	f000 fefd 	bl	8002068 <IsSensorTriggered>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d011      	beq.n	8001298 <MotorsHoming+0x88>
						TMC2209_Stop(&motor[0]);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fc6d 	bl	8000b54 <TMC2209_Stop>
						motor[0].currentPositionMM = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	@ 0x4c
						motor[0].stepsTaken = 0;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	645a      	str	r2, [r3, #68]	@ 0x44
						motor[i].StepsBack = 0;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2264      	movs	r2, #100	@ 0x64
 800128c:	fb02 f303 	mul.w	r3, r2, r3
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	2200      	movs	r2, #0
 8001296:	65da      	str	r2, [r3, #92]	@ 0x5c

					}

				}
			TMC2209_Stop(&motor[0]);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fc5b 	bl	8000b54 <TMC2209_Stop>

		}
		if(i == 1){
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d150      	bne.n	8001346 <MotorsHoming+0x136>
			TMC2209_SetDirection(&motor[1],1);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3364      	adds	r3, #100	@ 0x64
 80012a8:	2101      	movs	r1, #1
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fbc8 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[1],10000);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3364      	adds	r3, #100	@ 0x64
 80012b4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fbeb 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0){
 80012be:	2104      	movs	r1, #4
 80012c0:	4881      	ldr	r0, [pc, #516]	@ (80014c8 <MotorsHoming+0x2b8>)
 80012c2:	f000 fed1 	bl	8002068 <IsSensorTriggered>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d034      	beq.n	800133c <MotorsHoming+0x12c>
				TMC2209_Start(&motor[1]);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3364      	adds	r3, #100	@ 0x64
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fc52 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0);
 80012dc:	bf00      	nop
 80012de:	2104      	movs	r1, #4
 80012e0:	4879      	ldr	r0, [pc, #484]	@ (80014c8 <MotorsHoming+0x2b8>)
 80012e2:	f000 fec1 	bl	8002068 <IsSensorTriggered>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f083 0301 	eor.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f5      	bne.n	80012de <MotorsHoming+0xce>
				if((IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 1)){
 80012f2:	2104      	movs	r1, #4
 80012f4:	4874      	ldr	r0, [pc, #464]	@ (80014c8 <MotorsHoming+0x2b8>)
 80012f6:	f000 feb7 	bl	8002068 <IsSensorTriggered>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01d      	beq.n	800133c <MotorsHoming+0x12c>
					TMC2209_Stop(&motor[1]);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3364      	adds	r3, #100	@ 0x64
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc25 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2264      	movs	r2, #100	@ 0x64
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2264      	movs	r2, #100	@ 0x64
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	645a      	str	r2, [r3, #68]	@ 0x44
	                motor[i].StepsFront = 0;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2264      	movs	r2, #100	@ 0x64
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	659a      	str	r2, [r3, #88]	@ 0x58
				}
			}
			TMC2209_Stop(&motor[1]);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3364      	adds	r3, #100	@ 0x64
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fc07 	bl	8000b54 <TMC2209_Stop>
		}
		if(i == 2){
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d158      	bne.n	80013fe <MotorsHoming+0x1ee>
			TMC2209_SetDirection(&motor[2],1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	33c8      	adds	r3, #200	@ 0xc8
 8001350:	2101      	movs	r1, #1
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fb74 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[2],16000);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	33c8      	adds	r3, #200	@ 0xc8
 800135c:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fb97 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0){
 8001366:	2110      	movs	r1, #16
 8001368:	4858      	ldr	r0, [pc, #352]	@ (80014cc <MotorsHoming+0x2bc>)
 800136a:	f000 fe7d 	bl	8002068 <IsSensorTriggered>
 800136e:	4603      	mov	r3, r0
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d03c      	beq.n	80013f4 <MotorsHoming+0x1e4>
				TMC2209_Start(&motor[2]);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	33c8      	adds	r3, #200	@ 0xc8
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fbfe 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0);
 8001384:	bf00      	nop
 8001386:	2110      	movs	r1, #16
 8001388:	4850      	ldr	r0, [pc, #320]	@ (80014cc <MotorsHoming+0x2bc>)
 800138a:	f000 fe6d 	bl	8002068 <IsSensorTriggered>
 800138e:	4603      	mov	r3, r0
 8001390:	f083 0301 	eor.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f5      	bne.n	8001386 <MotorsHoming+0x176>
				if((IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 1)){
 800139a:	2110      	movs	r1, #16
 800139c:	484b      	ldr	r0, [pc, #300]	@ (80014cc <MotorsHoming+0x2bc>)
 800139e:	f000 fe63 	bl	8002068 <IsSensorTriggered>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d025      	beq.n	80013f4 <MotorsHoming+0x1e4>
					TMC2209_Stop(&motor[2]);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	33c8      	adds	r3, #200	@ 0xc8
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fbd1 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2264      	movs	r2, #100	@ 0x64
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2264      	movs	r2, #100	@ 0x64
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	645a      	str	r2, [r3, #68]	@ 0x44
				    motor[i].StepsFront = 0;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2264      	movs	r2, #100	@ 0x64
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	2200      	movs	r2, #0
 80013e2:	659a      	str	r2, [r3, #88]	@ 0x58
				    motor[i].StepsBack = 0;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2264      	movs	r2, #100	@ 0x64
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	2200      	movs	r2, #0
 80013f2:	65da      	str	r2, [r3, #92]	@ 0x5c

				}
			}
			TMC2209_Stop(&motor[2]);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	33c8      	adds	r3, #200	@ 0xc8
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fbab 	bl	8000b54 <TMC2209_Stop>
	}
		if(i == 3){
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d154      	bne.n	80014ae <MotorsHoming+0x29e>
			TMC2209_SetDirection(&motor[3],0);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fb17 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[3],10000);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001418:	f242 7110 	movw	r1, #10000	@ 0x2710
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fb39 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0){
 8001422:	2108      	movs	r1, #8
 8001424:	482a      	ldr	r0, [pc, #168]	@ (80014d0 <MotorsHoming+0x2c0>)
 8001426:	f000 fe1f 	bl	8002068 <IsSensorTriggered>
 800142a:	4603      	mov	r3, r0
 800142c:	f083 0301 	eor.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d035      	beq.n	80014a2 <MotorsHoming+0x292>
				TMC2209_Start(&motor[3]);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fb9f 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0);
 8001442:	bf00      	nop
 8001444:	2108      	movs	r1, #8
 8001446:	4822      	ldr	r0, [pc, #136]	@ (80014d0 <MotorsHoming+0x2c0>)
 8001448:	f000 fe0e 	bl	8002068 <IsSensorTriggered>
 800144c:	4603      	mov	r3, r0
 800144e:	f083 0301 	eor.w	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f5      	bne.n	8001444 <MotorsHoming+0x234>
				if((IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 1)){
 8001458:	2108      	movs	r1, #8
 800145a:	481d      	ldr	r0, [pc, #116]	@ (80014d0 <MotorsHoming+0x2c0>)
 800145c:	f000 fe04 	bl	8002068 <IsSensorTriggered>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01d      	beq.n	80014a2 <MotorsHoming+0x292>
					TMC2209_Stop(&motor[3]);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fb71 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 450;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2264      	movs	r2, #100	@ 0x64
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a15      	ldr	r2, [pc, #84]	@ (80014d4 <MotorsHoming+0x2c4>)
 8001480:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2264      	movs	r2, #100	@ 0x64
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	@ 0x44
				    motor[i].StepsBack = 0;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2264      	movs	r2, #100	@ 0x64
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	2200      	movs	r2, #0
 80014a0:	65da      	str	r2, [r3, #92]	@ 0x5c
				}
			}
			TMC2209_Stop(&motor[3]);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fb53 	bl	8000b54 <TMC2209_Stop>
	for(int i = 0; i<4; i++){
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	f77f aeb1 	ble.w	800121e <MotorsHoming+0xe>




}
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020400 	.word	0x40020400
 80014d4:	43e10000 	.word	0x43e10000

080014d8 <MotorControl_ButtonHandler>:
void MotorControl_ButtonHandler(Motor *motors) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	static uint8_t CtrPressedFlag = 0; // Flag to detect button press edge
	    // StepsFront[0] = 0;
	    uint32_t pressStartTime = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
	    uint32_t debounceTime = 50;
 80014e4:	2332      	movs	r3, #50	@ 0x32
 80014e6:	613b      	str	r3, [r7, #16]
	    uint32_t currentTime = HAL_GetTick();
 80014e8:	f002 fc16 	bl	8003d18 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]
	    static uint32_t lastPressTime = 0; // Last valid press timestamp

	    if (HAL_GPIO_ReadPin(BtnCtr_GPIO_Port, BtnCtr_Pin) == GPIO_PIN_SET) {
 80014ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f2:	48b7      	ldr	r0, [pc, #732]	@ (80017d0 <MotorControl_ButtonHandler+0x2f8>)
 80014f4:	f003 fb08 	bl	8004b08 <HAL_GPIO_ReadPin>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10a      	bne.n	8001514 <MotorControl_ButtonHandler+0x3c>
	        if (CtrPressedFlag == 0) { // Only increment on first press
 80014fe:	4bb5      	ldr	r3, [pc, #724]	@ (80017d4 <MotorControl_ButtonHandler+0x2fc>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 817a 	bne.w	80017fc <MotorControl_ButtonHandler+0x324>
	            pressStartTime = currentTime;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	617b      	str	r3, [r7, #20]
	            CtrPressedFlag = 1; // Set flag to avoid multiple increments
 800150c:	4bb1      	ldr	r3, [pc, #708]	@ (80017d4 <MotorControl_ButtonHandler+0x2fc>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e173      	b.n	80017fc <MotorControl_ButtonHandler+0x324>
	        }
	    } else {
	        if (CtrPressedFlag == 1 && (currentTime - pressStartTime) >= debounceTime) {
 8001514:	4baf      	ldr	r3, [pc, #700]	@ (80017d4 <MotorControl_ButtonHandler+0x2fc>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d10e      	bne.n	800153a <MotorControl_ButtonHandler+0x62>
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d808      	bhi.n	800153a <MotorControl_ButtonHandler+0x62>
	            Pressed += 1;
 8001528:	4bab      	ldr	r3, [pc, #684]	@ (80017d8 <MotorControl_ButtonHandler+0x300>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4ba9      	ldr	r3, [pc, #676]	@ (80017d8 <MotorControl_ButtonHandler+0x300>)
 8001532:	701a      	strb	r2, [r3, #0]
	            lastPressTime = currentTime; // Update the last valid press time
 8001534:	4aa9      	ldr	r2, [pc, #676]	@ (80017dc <MotorControl_ButtonHandler+0x304>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6013      	str	r3, [r2, #0]
	              }
	        CtrPressedFlag = 0; // Reset flag when button is released
 800153a:	4ba6      	ldr	r3, [pc, #664]	@ (80017d4 <MotorControl_ButtonHandler+0x2fc>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
        switch (Pressed) {
 8001540:	4ba5      	ldr	r3, [pc, #660]	@ (80017d8 <MotorControl_ButtonHandler+0x300>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d003      	beq.n	8001550 <MotorControl_ButtonHandler+0x78>
 8001548:	2b02      	cmp	r3, #2
 800154a:	f000 80a5 	beq.w	8001698 <MotorControl_ButtonHandler+0x1c0>
 800154e:	e151      	b.n	80017f4 <MotorControl_ButtonHandler+0x31c>
            case 1:
                // Save calibration for first press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160;
 8001550:	4ba3      	ldr	r3, [pc, #652]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	23c8      	movs	r3, #200	@ 0xc8
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a9f      	ldr	r2, [pc, #636]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	4611      	mov	r1, r2
 8001568:	22c8      	movs	r2, #200	@ 0xc8
 800156a:	fb01 f202 	mul.w	r2, r1, r2
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	440a      	add	r2, r1
 8001572:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	bfb8      	it	lt
 800157a:	425b      	neglt	r3, r3
 800157c:	4a99      	ldr	r2, [pc, #612]	@ (80017e4 <MotorControl_ButtonHandler+0x30c>)
 800157e:	fb82 1203 	smull	r1, r2, r2, r3
 8001582:	1192      	asrs	r2, r2, #6
 8001584:	17db      	asrs	r3, r3, #31
 8001586:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2].currentPositionMM =
 8001588:	4b95      	ldr	r3, [pc, #596]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	23c8      	movs	r3, #200	@ 0xc8
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	ee07 1a90 	vmov	s15, r1
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400;
 80015a4:	4b8e      	ldr	r3, [pc, #568]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	23c8      	movs	r3, #200	@ 0xc8
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	3364      	adds	r3, #100	@ 0x64
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	4619      	mov	r1, r3
 80015ba:	4b89      	ldr	r3, [pc, #548]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	23c8      	movs	r3, #200	@ 0xc8
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	3364      	adds	r3, #100	@ 0x64
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	1acb      	subs	r3, r1, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bfb8      	it	lt
 80015d4:	425b      	neglt	r3, r3
 80015d6:	4a84      	ldr	r2, [pc, #528]	@ (80017e8 <MotorControl_ButtonHandler+0x310>)
 80015d8:	fb82 1203 	smull	r1, r2, r2, r3
 80015dc:	11d2      	asrs	r2, r2, #7
 80015de:	17db      	asrs	r3, r3, #31
 80015e0:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2 + 1].currentPositionMM =
 80015e2:	4b7f      	ldr	r3, [pc, #508]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	23c8      	movs	r3, #200	@ 0xc8
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	3364      	adds	r3, #100	@ 0x64
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	ee07 1a90 	vmov	s15, r1
 80015f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fc:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

                motors[motorGroup * 2].calib[0] = motors[motorGroup * 2].currentPositionMM;
 8001600:	4b77      	ldr	r3, [pc, #476]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	23c8      	movs	r3, #200	@ 0xc8
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001614:	4b72      	ldr	r3, [pc, #456]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	23c8      	movs	r3, #200	@ 0xc8
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001628:	ee17 2a90 	vmov	r2, s15
 800162c:	b292      	uxth	r2, r2
 800162e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                motors[motorGroup * 2 + 1].calib[0] = motors[motorGroup * 2 + 1].currentPositionMM;
 8001632:	4b6b      	ldr	r3, [pc, #428]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	23c8      	movs	r3, #200	@ 0xc8
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	3364      	adds	r3, #100	@ 0x64
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001648:	4b65      	ldr	r3, [pc, #404]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	23c8      	movs	r3, #200	@ 0xc8
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	3364      	adds	r3, #100	@ 0x64
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800165e:	ee17 2a90 	vmov	r2, s15
 8001662:	b292      	uxth	r2, r2
 8001664:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

                motors[motorGroup * 2].currentPositionMM = 0;
 8001668:	4b5d      	ldr	r3, [pc, #372]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	23c8      	movs	r3, #200	@ 0xc8
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	64da      	str	r2, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM = 0;
 800167e:	4b58      	ldr	r3, [pc, #352]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	23c8      	movs	r3, #200	@ 0xc8
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	3364      	adds	r3, #100	@ 0x64
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	64da      	str	r2, [r3, #76]	@ 0x4c
                break;
 8001696:	e0b1      	b.n	80017fc <MotorControl_ButtonHandler+0x324>

            case 2:
                // Save calibration for second press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 8001698:	4b51      	ldr	r3, [pc, #324]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	23c8      	movs	r3, #200	@ 0xc8
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	4a4d      	ldr	r2, [pc, #308]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	4611      	mov	r1, r2
 80016b0:	22c8      	movs	r2, #200	@ 0xc8
 80016b2:	fb01 f202 	mul.w	r2, r1, r2
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	440a      	add	r2, r1
 80016ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bfb8      	it	lt
 80016c2:	425b      	neglt	r3, r3
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2].currentPositionMM =
 80016cc:	4b44      	ldr	r3, [pc, #272]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	23c8      	movs	r3, #200	@ 0xc8
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 80016dc:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80017ec <MotorControl_ButtonHandler+0x314>
 80016e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2].currentPositionMM =
 80016e4:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 80016e8:	4b3d      	ldr	r3, [pc, #244]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	23c8      	movs	r3, #200	@ 0xc8
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	3364      	adds	r3, #100	@ 0x64
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fc:	4619      	mov	r1, r3
 80016fe:	4b38      	ldr	r3, [pc, #224]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	23c8      	movs	r3, #200	@ 0xc8
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	3364      	adds	r3, #100	@ 0x64
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	1acb      	subs	r3, r1, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	bfb8      	it	lt
 8001718:	425b      	neglt	r3, r3
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2 + 1].currentPositionMM =
 8001722:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	23c8      	movs	r3, #200	@ 0xc8
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	3364      	adds	r3, #100	@ 0x64
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 8001734:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80017f0 <MotorControl_ButtonHandler+0x318>
 8001738:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2 + 1].currentPositionMM =
 800173c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

                motors[motorGroup * 2].calib[1] = motors[motorGroup * 2].currentPositionMM;
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	23c8      	movs	r3, #200	@ 0xc8
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	23c8      	movs	r3, #200	@ 0xc8
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001768:	ee17 2a90 	vmov	r2, s15
 800176c:	b292      	uxth	r2, r2
 800176e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                motors[motorGroup * 2 + 1].calib[1] = motors[motorGroup * 2 + 1].currentPositionMM;
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	23c8      	movs	r3, #200	@ 0xc8
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	3364      	adds	r3, #100	@ 0x64
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	23c8      	movs	r3, #200	@ 0xc8
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	3364      	adds	r3, #100	@ 0x64
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179e:	ee17 2a90 	vmov	r2, s15
 80017a2:	b292      	uxth	r2, r2
 80017a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                motorGroup += 1;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80017b2:	701a      	strb	r2, [r3, #0]
                if (motorGroup >= 2) {
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d902      	bls.n	80017c2 <MotorControl_ButtonHandler+0x2ea>
                       motorGroup = 0;  // Reset or handle as per your system's requirement
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <MotorControl_ButtonHandler+0x308>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
                  }
                // Perform homing for all motors
                  MotorsHoming(motors);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fd24 	bl	8001210 <MotorsHoming>
//                for(int i = 0; i < 4; i++) {
//                TMC2209_MoveTo(axis,motorIndex,targetPositionMM);
//              }

           // Reset Pressed counter to prevent further calibration steps
                Pressed = 0;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <MotorControl_ButtonHandler+0x300>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
                    break;
 80017ce:	e015      	b.n	80017fc <MotorControl_ButtonHandler+0x324>
 80017d0:	40021000 	.word	0x40021000
 80017d4:	20000108 	.word	0x20000108
 80017d8:	200000f4 	.word	0x200000f4
 80017dc:	2000010c 	.word	0x2000010c
 80017e0:	200000f6 	.word	0x200000f6
 80017e4:	66666667 	.word	0x66666667
 80017e8:	51eb851f 	.word	0x51eb851f
 80017ec:	43200000 	.word	0x43200000
 80017f0:	43c80000 	.word	0x43c80000

                 default:
                                // Handle unexpected Pressed value
                   Pressed = 0;
 80017f4:	4b7c      	ldr	r3, [pc, #496]	@ (80019e8 <MotorControl_ButtonHandler+0x510>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
                   break;
 80017fa:	bf00      	nop

    }



	if(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 80017fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001800:	487a      	ldr	r0, [pc, #488]	@ (80019ec <MotorControl_ButtonHandler+0x514>)
 8001802:	f003 f981 	bl	8004b08 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d11f      	bne.n	800184c <MotorControl_ButtonHandler+0x374>
		    // Send one step for each millisecond the button is pressed
	    //setMicrosteppingResolution(&motors[motorGroup *2], 16);
		//TMC2209_SetSpeed(&motors[motorGroup *2+1],16000);
			//StepsFront[0] = 0;
            //LastSteps[0] += StepsFront[0];
			TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_SET);
 800180c:	4b78      	ldr	r3, [pc, #480]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	23c8      	movs	r3, #200	@ 0xc8
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	2101      	movs	r1, #1
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f90e 	bl	8000a40 <TMC2209_SetDirection>
		    TMC2209_Start_C(&motors[motorGroup * 2]);
 8001824:	4b72      	ldr	r3, [pc, #456]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	23c8      	movs	r3, #200	@ 0xc8
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f9bd 	bl	8000bb4 <TMC2209_Start_C>
		    while(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 800183a:	bf00      	nop
 800183c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001840:	486a      	ldr	r0, [pc, #424]	@ (80019ec <MotorControl_ButtonHandler+0x514>)
 8001842:	f003 f961 	bl	8004b08 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f7      	beq.n	800183c <MotorControl_ButtonHandler+0x364>
//        	TMC2209_Stop(&motors[motorGroup * 2]);
//        	StepsFront[0] = 0;

    	//}
}
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_SET ) {
 800184c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001850:	4866      	ldr	r0, [pc, #408]	@ (80019ec <MotorControl_ButtonHandler+0x514>)
 8001852:	f003 f959 	bl	8004b08 <HAL_GPIO_ReadPin>
 8001856:	4603      	mov	r3, r0
 8001858:	2b01      	cmp	r3, #1
 800185a:	d10a      	bne.n	8001872 <MotorControl_ButtonHandler+0x39a>
    	TMC2209_Stop(&motors[motorGroup * 2]);
 800185c:	4b64      	ldr	r3, [pc, #400]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	23c8      	movs	r3, #200	@ 0xc8
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f971 	bl	8000b54 <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 8001872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001876:	485d      	ldr	r0, [pc, #372]	@ (80019ec <MotorControl_ButtonHandler+0x514>)
 8001878:	f003 f946 	bl	8004b08 <HAL_GPIO_ReadPin>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11f      	bne.n	80018c2 <MotorControl_ButtonHandler+0x3ea>
		//motors[motorGroup*2].stepsTaken = 0;
		//StepsBack[0] = 0;
		//StepsBack[0] += motors[motorGroup*2].stepsTaken;
		TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_RESET);
 8001882:	4b5b      	ldr	r3, [pc, #364]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	23c8      	movs	r3, #200	@ 0xc8
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f8d3 	bl	8000a40 <TMC2209_SetDirection>
		TMC2209_Start_C(&motors[motorGroup * 2]);
 800189a:	4b55      	ldr	r3, [pc, #340]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	23c8      	movs	r3, #200	@ 0xc8
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f982 	bl	8000bb4 <TMC2209_Start_C>
		while(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 80018b0:	bf00      	nop
 80018b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b6:	484d      	ldr	r0, [pc, #308]	@ (80019ec <MotorControl_ButtonHandler+0x514>)
 80018b8:	f003 f926 	bl	8004b08 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f7      	beq.n	80018b2 <MotorControl_ButtonHandler+0x3da>
//
//    	}


}
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_SET || StepsBack[0] > 28000) {
 80018c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018c6:	4849      	ldr	r0, [pc, #292]	@ (80019ec <MotorControl_ButtonHandler+0x514>)
 80018c8:	f003 f91e 	bl	8004b08 <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <MotorControl_ButtonHandler+0x406>
 80018d2:	4b48      	ldr	r3, [pc, #288]	@ (80019f4 <MotorControl_ButtonHandler+0x51c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f646 5260 	movw	r2, #28000	@ 0x6d60
 80018da:	4293      	cmp	r3, r2
 80018dc:	dd0a      	ble.n	80018f4 <MotorControl_ButtonHandler+0x41c>
        // Button 1 pressed (Step Motor in one direction)
    	TMC2209_Stop(&motors[motorGroup * 2]);
 80018de:	4b44      	ldr	r3, [pc, #272]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	23c8      	movs	r3, #200	@ 0xc8
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff f930 	bl	8000b54 <TMC2209_Stop>

        //TMC2209_CountSteps_C(&motors[motorGroup * 2],StepsBack[0]);
    }


	if(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET){
 80018f4:	2102      	movs	r1, #2
 80018f6:	4840      	ldr	r0, [pc, #256]	@ (80019f8 <MotorControl_ButtonHandler+0x520>)
 80018f8:	f003 f906 	bl	8004b08 <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d120      	bne.n	8001944 <MotorControl_ButtonHandler+0x46c>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_SET);
 8001902:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	23c8      	movs	r3, #200	@ 0xc8
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	3364      	adds	r3, #100	@ 0x64
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	2101      	movs	r1, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f892 	bl	8000a40 <TMC2209_SetDirection>
        TMC2209_Start_C(&motors[motorGroup * 2+1]);
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	23c8      	movs	r3, #200	@ 0xc8
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	3364      	adds	r3, #100	@ 0x64
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f940 	bl	8000bb4 <TMC2209_Start_C>
        while(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET);
 8001934:	bf00      	nop
 8001936:	2102      	movs	r1, #2
 8001938:	482f      	ldr	r0, [pc, #188]	@ (80019f8 <MotorControl_ButtonHandler+0x520>)
 800193a:	f003 f8e5 	bl	8004b08 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f8      	beq.n	8001936 <MotorControl_ButtonHandler+0x45e>
}
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_SET) {
 8001944:	2102      	movs	r1, #2
 8001946:	482c      	ldr	r0, [pc, #176]	@ (80019f8 <MotorControl_ButtonHandler+0x520>)
 8001948:	f003 f8de 	bl	8004b08 <HAL_GPIO_ReadPin>
 800194c:	4603      	mov	r3, r0
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10b      	bne.n	800196a <MotorControl_ButtonHandler+0x492>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2 + 1]);
 8001952:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	23c8      	movs	r3, #200	@ 0xc8
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	3364      	adds	r3, #100	@ 0x64
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f8f5 	bl	8000b54 <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET){
 800196a:	2101      	movs	r1, #1
 800196c:	4822      	ldr	r0, [pc, #136]	@ (80019f8 <MotorControl_ButtonHandler+0x520>)
 800196e:	f003 f8cb 	bl	8004b08 <HAL_GPIO_ReadPin>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d120      	bne.n	80019ba <MotorControl_ButtonHandler+0x4e2>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_RESET);
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	23c8      	movs	r3, #200	@ 0xc8
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	3364      	adds	r3, #100	@ 0x64
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f857 	bl	8000a40 <TMC2209_SetDirection>
        TMC2209_Start_C(&motors[motorGroup * 2+1]);
 8001992:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	23c8      	movs	r3, #200	@ 0xc8
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	3364      	adds	r3, #100	@ 0x64
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f905 	bl	8000bb4 <TMC2209_Start_C>
        while(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET);
 80019aa:	bf00      	nop
 80019ac:	2101      	movs	r1, #1
 80019ae:	4812      	ldr	r0, [pc, #72]	@ (80019f8 <MotorControl_ButtonHandler+0x520>)
 80019b0:	f003 f8aa 	bl	8004b08 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f8      	beq.n	80019ac <MotorControl_ButtonHandler+0x4d4>
}
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_SET) {
 80019ba:	2101      	movs	r1, #1
 80019bc:	480e      	ldr	r0, [pc, #56]	@ (80019f8 <MotorControl_ButtonHandler+0x520>)
 80019be:	f003 f8a3 	bl	8004b08 <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d10b      	bne.n	80019e0 <MotorControl_ButtonHandler+0x508>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2+1]);
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MotorControl_ButtonHandler+0x518>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	23c8      	movs	r3, #200	@ 0xc8
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	3364      	adds	r3, #100	@ 0x64
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f8ba 	bl	8000b54 <TMC2209_Stop>
    }
}
 80019e0:	bf00      	nop
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200000f4 	.word	0x200000f4
 80019ec:	40021400 	.word	0x40021400
 80019f0:	200000f6 	.word	0x200000f6
 80019f4:	200000e4 	.word	0x200000e4
 80019f8:	40021800 	.word	0x40021800

080019fc <initializeMotors>:

// UART declaration
// UART_HandleTypeDef huart2; in my case it's already generated in main.c


void initializeMotors() {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	e25b      	b.n	8001ec0 <initializeMotors+0x4c4>
    	// Setting all for all drivers/motors
    	if( i < 2){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	dc0e      	bgt.n	8001a2c <initializeMotors+0x30>
        	motors[i].driver.huart = &huart2; // UART handler for drivers (0, 1)
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <initializeMotors+0x28>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2164      	movs	r1, #100	@ 0x64
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	4a02      	ldr	r2, [pc, #8]	@ (8001a28 <initializeMotors+0x2c>)
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e00d      	b.n	8001a3e <initializeMotors+0x42>
 8001a22:	bf00      	nop
 8001a24:	20000b88 	.word	0x20000b88
 8001a28:	20000440 	.word	0x20000440
    	}
    	else{
        	motors[i].driver.huart = &huart6; // UART handler for drivers (2, 3)
 8001a2c:	4ab8      	ldr	r2, [pc, #736]	@ (8001d10 <initializeMotors+0x314>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2164      	movs	r1, #100	@ 0x64
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3304      	adds	r3, #4
 8001a3a:	4ab6      	ldr	r2, [pc, #728]	@ (8001d14 <initializeMotors+0x318>)
 8001a3c:	601a      	str	r2, [r3, #0]
    	}
    	motors[i].driver.address = 0x00+i; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	b2d8      	uxtb	r0, r3
 8001a42:	4ab3      	ldr	r2, [pc, #716]	@ (8001d10 <initializeMotors+0x314>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2164      	movs	r1, #100	@ 0x64
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3308      	adds	r3, #8
 8001a50:	4602      	mov	r2, r0
 8001a52:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	b2d8      	uxtb	r0, r3
 8001a58:	4aad      	ldr	r2, [pc, #692]	@ (8001d10 <initializeMotors+0x314>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2164      	movs	r1, #100	@ 0x64
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	4602      	mov	r2, r0
 8001a66:	701a      	strb	r2, [r3, #0]

        motors[i].stepsTaken = 0;
 8001a68:	4aa9      	ldr	r2, [pc, #676]	@ (8001d10 <initializeMotors+0x314>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2164      	movs	r1, #100	@ 0x64
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3344      	adds	r3, #68	@ 0x44
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 8001a7a:	4aa5      	ldr	r2, [pc, #660]	@ (8001d10 <initializeMotors+0x314>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2164      	movs	r1, #100	@ 0x64
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3348      	adds	r3, #72	@ 0x48
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8001a8c:	4aa0      	ldr	r2, [pc, #640]	@ (8001d10 <initializeMotors+0x314>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2164      	movs	r1, #100	@ 0x64
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	334c      	adds	r3, #76	@ 0x4c
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 8001aa0:	4a9b      	ldr	r2, [pc, #620]	@ (8001d10 <initializeMotors+0x314>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2164      	movs	r1, #100	@ 0x64
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3350      	adds	r3, #80	@ 0x50
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 8001ab4:	4a96      	ldr	r2, [pc, #600]	@ (8001d10 <initializeMotors+0x314>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2164      	movs	r1, #100	@ 0x64
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3354      	adds	r3, #84	@ 0x54
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 8081 	bne.w	8001bd0 <initializeMotors+0x1d4>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8001ace:	4a90      	ldr	r2, [pc, #576]	@ (8001d10 <initializeMotors+0x314>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2164      	movs	r1, #100	@ 0x64
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	330c      	adds	r3, #12
 8001adc:	4a8e      	ldr	r2, [pc, #568]	@ (8001d18 <initializeMotors+0x31c>)
 8001ade:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8001ae0:	4a8b      	ldr	r2, [pc, #556]	@ (8001d10 <initializeMotors+0x314>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2164      	movs	r1, #100	@ 0x64
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	3310      	adds	r3, #16
 8001aee:	2208      	movs	r2, #8
 8001af0:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 16;
 8001af2:	4a87      	ldr	r2, [pc, #540]	@ (8001d10 <initializeMotors+0x314>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2164      	movs	r1, #100	@ 0x64
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	3302      	adds	r3, #2
 8001b00:	2210      	movs	r2, #16
 8001b02:	801a      	strh	r2, [r3, #0]
        motors[i].stepsPerRevolution = 400;
 8001b04:	4a82      	ldr	r2, [pc, #520]	@ (8001d10 <initializeMotors+0x314>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2164      	movs	r1, #100	@ 0x64
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	333c      	adds	r3, #60	@ 0x3c
 8001b12:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001b16:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = GPIOB;
 8001b18:	4a7d      	ldr	r2, [pc, #500]	@ (8001d10 <initializeMotors+0x314>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2164      	movs	r1, #100	@ 0x64
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3314      	adds	r3, #20
 8001b26:	4a7d      	ldr	r2, [pc, #500]	@ (8001d1c <initializeMotors+0x320>)
 8001b28:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = GPIO_PIN_10;
 8001b2a:	4a79      	ldr	r2, [pc, #484]	@ (8001d10 <initializeMotors+0x314>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2164      	movs	r1, #100	@ 0x64
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	3318      	adds	r3, #24
 8001b38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b3c:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = GPIOF;
 8001b3e:	4a74      	ldr	r2, [pc, #464]	@ (8001d10 <initializeMotors+0x314>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2164      	movs	r1, #100	@ 0x64
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	331c      	adds	r3, #28
 8001b4c:	4a74      	ldr	r2, [pc, #464]	@ (8001d20 <initializeMotors+0x324>)
 8001b4e:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = GPIO_PIN_7;
 8001b50:	4a6f      	ldr	r2, [pc, #444]	@ (8001d10 <initializeMotors+0x314>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2164      	movs	r1, #100	@ 0x64
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3320      	adds	r3, #32
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = GPIOB;
 8001b62:	4a6b      	ldr	r2, [pc, #428]	@ (8001d10 <initializeMotors+0x314>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2164      	movs	r1, #100	@ 0x64
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3324      	adds	r3, #36	@ 0x24
 8001b70:	4a6a      	ldr	r2, [pc, #424]	@ (8001d1c <initializeMotors+0x320>)
 8001b72:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = GPIO_PIN_11;
 8001b74:	4a66      	ldr	r2, [pc, #408]	@ (8001d10 <initializeMotors+0x314>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2164      	movs	r1, #100	@ 0x64
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3328      	adds	r3, #40	@ 0x28
 8001b82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b86:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = GPIOD;
 8001b88:	4a61      	ldr	r2, [pc, #388]	@ (8001d10 <initializeMotors+0x314>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2164      	movs	r1, #100	@ 0x64
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	332c      	adds	r3, #44	@ 0x2c
 8001b96:	4a63      	ldr	r2, [pc, #396]	@ (8001d24 <initializeMotors+0x328>)
 8001b98:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = GPIO_PIN_1;
 8001b9a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d10 <initializeMotors+0x314>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2164      	movs	r1, #100	@ 0x64
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3330      	adds	r3, #48	@ 0x30
 8001ba8:	2202      	movs	r2, #2
 8001baa:	801a      	strh	r2, [r3, #0]
        motors[i].driver.index_port = GPIOA;
 8001bac:	4a58      	ldr	r2, [pc, #352]	@ (8001d10 <initializeMotors+0x314>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2164      	movs	r1, #100	@ 0x64
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3334      	adds	r3, #52	@ 0x34
 8001bba:	4a5b      	ldr	r2, [pc, #364]	@ (8001d28 <initializeMotors+0x32c>)
 8001bbc:	601a      	str	r2, [r3, #0]
        motors[i].driver.index_pin = GPIO_PIN_5;
 8001bbe:	4a54      	ldr	r2, [pc, #336]	@ (8001d10 <initializeMotors+0x314>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2164      	movs	r1, #100	@ 0x64
 8001bc4:	fb01 f303 	mul.w	r3, r1, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	3338      	adds	r3, #56	@ 0x38
 8001bcc:	2220      	movs	r2, #32
 8001bce:	801a      	strh	r2, [r3, #0]
        }


        if(i == 1){
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d17d      	bne.n	8001cd2 <initializeMotors+0x2d6>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 8001bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001d10 <initializeMotors+0x314>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2164      	movs	r1, #100	@ 0x64
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	330c      	adds	r3, #12
 8001be4:	4a51      	ldr	r2, [pc, #324]	@ (8001d2c <initializeMotors+0x330>)
 8001be6:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001be8:	4a49      	ldr	r2, [pc, #292]	@ (8001d10 <initializeMotors+0x314>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2164      	movs	r1, #100	@ 0x64
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3310      	adds	r3, #16
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 8001bfa:	4a45      	ldr	r2, [pc, #276]	@ (8001d10 <initializeMotors+0x314>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2164      	movs	r1, #100	@ 0x64
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3302      	adds	r3, #2
 8001c08:	2210      	movs	r2, #16
 8001c0a:	801a      	strh	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8001c0c:	4a40      	ldr	r2, [pc, #256]	@ (8001d10 <initializeMotors+0x314>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2164      	movs	r1, #100	@ 0x64
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	333c      	adds	r3, #60	@ 0x3c
 8001c1a:	22c8      	movs	r2, #200	@ 0xc8
 8001c1c:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOA;
 8001c1e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d10 <initializeMotors+0x314>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2164      	movs	r1, #100	@ 0x64
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3314      	adds	r3, #20
 8001c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d28 <initializeMotors+0x32c>)
 8001c2e:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_6;
 8001c30:	4a37      	ldr	r2, [pc, #220]	@ (8001d10 <initializeMotors+0x314>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2164      	movs	r1, #100	@ 0x64
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3318      	adds	r3, #24
 8001c3e:	2240      	movs	r2, #64	@ 0x40
 8001c40:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOA;
 8001c42:	4a33      	ldr	r2, [pc, #204]	@ (8001d10 <initializeMotors+0x314>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2164      	movs	r1, #100	@ 0x64
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	331c      	adds	r3, #28
 8001c50:	4a35      	ldr	r2, [pc, #212]	@ (8001d28 <initializeMotors+0x32c>)
 8001c52:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_7;
 8001c54:	4a2e      	ldr	r2, [pc, #184]	@ (8001d10 <initializeMotors+0x314>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2164      	movs	r1, #100	@ 0x64
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3320      	adds	r3, #32
 8001c62:	2280      	movs	r2, #128	@ 0x80
 8001c64:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOA;
 8001c66:	4a2a      	ldr	r2, [pc, #168]	@ (8001d10 <initializeMotors+0x314>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2164      	movs	r1, #100	@ 0x64
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3324      	adds	r3, #36	@ 0x24
 8001c74:	4a2c      	ldr	r2, [pc, #176]	@ (8001d28 <initializeMotors+0x32c>)
 8001c76:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_5;
 8001c78:	4a25      	ldr	r2, [pc, #148]	@ (8001d10 <initializeMotors+0x314>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2164      	movs	r1, #100	@ 0x64
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3328      	adds	r3, #40	@ 0x28
 8001c86:	2220      	movs	r2, #32
 8001c88:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 8001c8a:	4a21      	ldr	r2, [pc, #132]	@ (8001d10 <initializeMotors+0x314>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2164      	movs	r1, #100	@ 0x64
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	332c      	adds	r3, #44	@ 0x2c
 8001c98:	4a22      	ldr	r2, [pc, #136]	@ (8001d24 <initializeMotors+0x328>)
 8001c9a:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <initializeMotors+0x314>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2164      	movs	r1, #100	@ 0x64
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3330      	adds	r3, #48	@ 0x30
 8001caa:	2202      	movs	r2, #2
 8001cac:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 8001cae:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <initializeMotors+0x314>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2164      	movs	r1, #100	@ 0x64
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3334      	adds	r3, #52	@ 0x34
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <initializeMotors+0x32c>)
 8001cbe:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 8001cc0:	4a13      	ldr	r2, [pc, #76]	@ (8001d10 <initializeMotors+0x314>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2164      	movs	r1, #100	@ 0x64
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	3338      	adds	r3, #56	@ 0x38
 8001cce:	2220      	movs	r2, #32
 8001cd0:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 8080 	bne.w	8001dda <initializeMotors+0x3de>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim9;				 // TIMER HANDLER
 8001cda:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <initializeMotors+0x314>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2164      	movs	r1, #100	@ 0x64
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	330c      	adds	r3, #12
 8001ce8:	4a11      	ldr	r2, [pc, #68]	@ (8001d30 <initializeMotors+0x334>)
 8001cea:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001cec:	4a08      	ldr	r2, [pc, #32]	@ (8001d10 <initializeMotors+0x314>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2164      	movs	r1, #100	@ 0x64
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3310      	adds	r3, #16
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <initializeMotors+0x314>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2164      	movs	r1, #100	@ 0x64
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	e011      	b.n	8001d34 <initializeMotors+0x338>
 8001d10:	20000b88 	.word	0x20000b88
 8001d14:	20000550 	.word	0x20000550
 8001d18:	200001e0 	.word	0x200001e0
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	2000022c 	.word	0x2000022c
 8001d30:	2000035c 	.word	0x2000035c
 8001d34:	801a      	strh	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 8001d36:	4a68      	ldr	r2, [pc, #416]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2164      	movs	r1, #100	@ 0x64
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	333c      	adds	r3, #60	@ 0x3c
 8001d44:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001d48:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = GPIOE;
 8001d4a:	4a63      	ldr	r2, [pc, #396]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2164      	movs	r1, #100	@ 0x64
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3314      	adds	r3, #20
 8001d58:	4a60      	ldr	r2, [pc, #384]	@ (8001edc <initializeMotors+0x4e0>)
 8001d5a:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_5;
 8001d5c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2164      	movs	r1, #100	@ 0x64
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	3318      	adds	r3, #24
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOE;
 8001d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2164      	movs	r1, #100	@ 0x64
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	331c      	adds	r3, #28
 8001d7c:	4a57      	ldr	r2, [pc, #348]	@ (8001edc <initializeMotors+0x4e0>)
 8001d7e:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_6;
 8001d80:	4a55      	ldr	r2, [pc, #340]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2164      	movs	r1, #100	@ 0x64
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3320      	adds	r3, #32
 8001d8e:	2240      	movs	r2, #64	@ 0x40
 8001d90:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOE;
 8001d92:	4a51      	ldr	r2, [pc, #324]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2164      	movs	r1, #100	@ 0x64
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3324      	adds	r3, #36	@ 0x24
 8001da0:	4a4e      	ldr	r2, [pc, #312]	@ (8001edc <initializeMotors+0x4e0>)
 8001da2:	601a      	str	r2, [r3, #0]
        	motors[i].driver.enn_pin = GPIO_PIN_3;
 8001da4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2164      	movs	r1, #100	@ 0x64
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	3328      	adds	r3, #40	@ 0x28
 8001db2:	2208      	movs	r2, #8
 8001db4:	801a      	strh	r2, [r3, #0]
        	motors[i].driver.diag_port = GPIOD;
 8001db6:	4a48      	ldr	r2, [pc, #288]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2164      	movs	r1, #100	@ 0x64
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	332c      	adds	r3, #44	@ 0x2c
 8001dc4:	4a46      	ldr	r2, [pc, #280]	@ (8001ee0 <initializeMotors+0x4e4>)
 8001dc6:	601a      	str	r2, [r3, #0]
        	motors[i].driver.diag_pin = GPIO_PIN_1;
 8001dc8:	4a43      	ldr	r2, [pc, #268]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2164      	movs	r1, #100	@ 0x64
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3330      	adds	r3, #48	@ 0x30
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	801a      	strh	r2, [r3, #0]
        	           // motors[i].driver.index_pin = GPIO_PIN_5;


        }

        if(i == 3){
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d16c      	bne.n	8001eba <initializeMotors+0x4be>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim10;				 // TIMER HANDLER
 8001de0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2164      	movs	r1, #100	@ 0x64
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	330c      	adds	r3, #12
 8001dee:	4a3d      	ldr	r2, [pc, #244]	@ (8001ee4 <initializeMotors+0x4e8>)
 8001df0:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001df2:	4a39      	ldr	r2, [pc, #228]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2164      	movs	r1, #100	@ 0x64
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3310      	adds	r3, #16
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 8;
 8001e04:	4a34      	ldr	r2, [pc, #208]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2164      	movs	r1, #100	@ 0x64
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3302      	adds	r3, #2
 8001e12:	2208      	movs	r2, #8
 8001e14:	801a      	strh	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8001e16:	4a30      	ldr	r2, [pc, #192]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2164      	movs	r1, #100	@ 0x64
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	333c      	adds	r3, #60	@ 0x3c
 8001e24:	22c8      	movs	r2, #200	@ 0xc8
 8001e26:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 8001e28:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2164      	movs	r1, #100	@ 0x64
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3314      	adds	r3, #20
 8001e36:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee8 <initializeMotors+0x4ec>)
 8001e38:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_8;
 8001e3a:	4a27      	ldr	r2, [pc, #156]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2164      	movs	r1, #100	@ 0x64
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	3318      	adds	r3, #24
 8001e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e4c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOD;
 8001e4e:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2164      	movs	r1, #100	@ 0x64
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	331c      	adds	r3, #28
 8001e5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ee0 <initializeMotors+0x4e4>)
 8001e5e:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_0;
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2164      	movs	r1, #100	@ 0x64
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3320      	adds	r3, #32
 8001e6e:	2201      	movs	r2, #1
 8001e70:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOF;
 8001e72:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2164      	movs	r1, #100	@ 0x64
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3324      	adds	r3, #36	@ 0x24
 8001e80:	4a1a      	ldr	r2, [pc, #104]	@ (8001eec <initializeMotors+0x4f0>)
 8001e82:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_0;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2164      	movs	r1, #100	@ 0x64
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3328      	adds	r3, #40	@ 0x28
 8001e92:	2201      	movs	r2, #1
 8001e94:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 8001e96:	4a10      	ldr	r2, [pc, #64]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2164      	movs	r1, #100	@ 0x64
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	332c      	adds	r3, #44	@ 0x2c
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <initializeMotors+0x4e4>)
 8001ea6:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <initializeMotors+0x4dc>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2164      	movs	r1, #100	@ 0x64
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3330      	adds	r3, #48	@ 0x30
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	f77f ada0 	ble.w	8001a08 <initializeMotors+0xc>


    }


}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000b88 	.word	0x20000b88
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	200003a8 	.word	0x200003a8
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40021400 	.word	0x40021400

08001ef0 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	64da      	str	r2, [r3, #76]	@ 0x4c
    axis->motors[1]->currentPositionMM = 0;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	8852      	ldrh	r2, [r2, #2]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	641a      	str	r2, [r3, #64]	@ 0x40
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	641a      	str	r2, [r3, #64]	@ 0x40
    axis->stepPerUnit = totalStepsPerRevolution / circumference;;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f103 0014 	add.w	r0, r3, #20
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <initializeAxis+0x98>)
 8001f5e:	210a      	movs	r1, #10
 8001f60:	f009 fa86 	bl	800b470 <sniprintf>
    if (motor2 != NULL) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <initializeAxis+0x90>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f103 001e 	add.w	r0, r3, #30
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <initializeAxis+0x98>)
 8001f7a:	210a      	movs	r1, #10
 8001f7c:	f009 fa78 	bl	800b470 <sniprintf>
    }
}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	0800c4d8 	.word	0x0800c4d8

08001f8c <initializeSystem>:

void initializeSystem(){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af02      	add	r7, sp, #8
    // X-axis
    initializeAxis(&axes[0], &motors[0],&motors[2], 40, "Y");
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <initializeSystem+0x2c>)
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2328      	movs	r3, #40	@ 0x28
 8001f98:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <initializeSystem+0x30>)
 8001f9a:	4909      	ldr	r1, [pc, #36]	@ (8001fc0 <initializeSystem+0x34>)
 8001f9c:	4809      	ldr	r0, [pc, #36]	@ (8001fc4 <initializeSystem+0x38>)
 8001f9e:	f7ff ffa7 	bl	8001ef0 <initializeAxis>
    initializeAxis(&axes[1], &motors[1],&motors[3], 8, "X");
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <initializeSystem+0x3c>)
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	4a08      	ldr	r2, [pc, #32]	@ (8001fcc <initializeSystem+0x40>)
 8001faa:	4909      	ldr	r1, [pc, #36]	@ (8001fd0 <initializeSystem+0x44>)
 8001fac:	4809      	ldr	r0, [pc, #36]	@ (8001fd4 <initializeSystem+0x48>)
 8001fae:	f7ff ff9f 	bl	8001ef0 <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[1], &motors[1], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	0800c4e0 	.word	0x0800c4e0
 8001fbc:	20000c50 	.word	0x20000c50
 8001fc0:	20000b88 	.word	0x20000b88
 8001fc4:	20000d18 	.word	0x20000d18
 8001fc8:	0800c4e4 	.word	0x0800c4e4
 8001fcc:	20000cb4 	.word	0x20000cb4
 8001fd0:	20000bec 	.word	0x20000bec
 8001fd4:	20000d40 	.word	0x20000d40

08001fd8 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	213c      	movs	r1, #60	@ 0x3c
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f005 ff58 	bl	8007e9c <HAL_TIM_Encoder_Start>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <CheckConnection>:



#include "extras.h"

bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo1){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, 50);
 8001ffe:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002054 <CheckConnection+0x60>
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8ea 	bl	80021dc <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 52);
 8002008:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002058 <CheckConnection+0x64>
 800200c:	6838      	ldr	r0, [r7, #0]
 800200e:	f000 f8e5 	bl	80021dc <SERVO_WritePosition>
	HAL_Delay(2000);
 8002012:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002016:	f001 fe8b 	bl	8003d30 <HAL_Delay>
	bool x =0;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin) == GPIO_PIN_SET){
 800201e:	2108      	movs	r1, #8
 8002020:	480e      	ldr	r0, [pc, #56]	@ (800205c <CheckConnection+0x68>)
 8002022:	f002 fd71 	bl	8004b08 <HAL_GPIO_ReadPin>
 8002026:	4603      	mov	r3, r0
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <CheckConnection+0x3e>
	     x = true;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	e001      	b.n	8002036 <CheckConnection+0x42>
	}
	else{
		 x=false;
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
	}
	SERVO_WritePosition(hservo, 90);
 8002036:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002060 <CheckConnection+0x6c>
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8ce 	bl	80021dc <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 92);
 8002040:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002064 <CheckConnection+0x70>
 8002044:	6838      	ldr	r0, [r7, #0]
 8002046:	f000 f8c9 	bl	80021dc <SERVO_WritePosition>
	return x;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	42480000 	.word	0x42480000
 8002058:	42500000 	.word	0x42500000
 800205c:	40020000 	.word	0x40020000
 8002060:	42b40000 	.word	0x42b40000
 8002064:	42b80000 	.word	0x42b80000

08002068 <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f002 fd45 	bl	8004b08 <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <IsSensorTriggered+0x24>
    	return false;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 800208c:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f80d 	bl	80020c8 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f005 fb39 	bl	8007730 <HAL_TIM_PWM_Start>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80020d4:	edd7 7a00 	vldr	s15, [r7]
 80020d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	d503      	bpl.n	80020ea <PWM_WriteDuty+0x22>
    duty = 0.0;
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	e00a      	b.n	8002100 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 80020ea:	edd7 7a00 	vldr	s15, [r7]
 80020ee:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80021ac <PWM_WriteDuty+0xe4>
 80020f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	dd01      	ble.n	8002100 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 80020fc:	4b2c      	ldr	r3, [pc, #176]	@ (80021b0 <PWM_WriteDuty+0xe8>)
 80020fe:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210e:	3301      	adds	r3, #1
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002118:	edd7 7a00 	vldr	s15, [r7]
 800211c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002120:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80021ac <PWM_WriteDuty+0xe4>
 8002124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212c:	ee17 3a90 	vmov	r3, s15
 8002130:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <PWM_WriteDuty+0x7e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002144:	e02c      	b.n	80021a0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d105      	bne.n	800215a <PWM_WriteDuty+0x92>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002158:	e022      	b.n	80021a0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b08      	cmp	r3, #8
 8002160:	d105      	bne.n	800216e <PWM_WriteDuty+0xa6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800216c:	e018      	b.n	80021a0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d105      	bne.n	8002182 <PWM_WriteDuty+0xba>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002180:	e00e      	b.n	80021a0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b10      	cmp	r3, #16
 8002188:	d105      	bne.n	8002196 <PWM_WriteDuty+0xce>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8002194:	e004      	b.n	80021a0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	42c80000 	.word	0x42c80000
 80021b0:	42c80000 	.word	0x42c80000

080021b4 <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 70.0f);
 80021bc:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80021d8 <SERVO_Init+0x24>
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f80b 	bl	80021dc <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff64 	bl	8002096 <PWM_Init>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	428c0000 	.word	0x428c0000

080021dc <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 80021e8:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002244 <SERVO_WritePosition+0x68>
 80021ec:	ed97 0a00 	vldr	s0, [r7]
 80021f0:	f009 fe2f 	bl	800be52 <fminf>
 80021f4:	eef0 7a40 	vmov.f32	s15, s0
 80021f8:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002248 <SERVO_WritePosition+0x6c>
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	f009 fe0a 	bl	800be18 <fmaxf>
 8002204:	eef0 7a40 	vmov.f32	s15, s0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	ed93 7a03 	vldr	s14, [r3, #12]
 8002214:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002244 <SERVO_WritePosition+0x68>
 8002218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002224:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8002228:	ee77 7a87 	vadd.f32	s15, s15, s14
 800222c:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	ed97 0a03 	vldr	s0, [r7, #12]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff46 	bl	80020c8 <PWM_WriteDuty>
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	43340000 	.word	0x43340000
 8002248:	00000000 	.word	0x00000000

0800224c <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_UART_RxCpltCallback+0x38>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_UART_RxCpltCallback+0x1c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <HAL_UART_RxCpltCallback+0x3c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d108      	bne.n	800227a <HAL_UART_RxCpltCallback+0x2e>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <HAL_UART_RxCpltCallback+0x40>)
 800226a:	2209      	movs	r2, #9
 800226c:	4619      	mov	r1, r3
 800226e:	4808      	ldr	r0, [pc, #32]	@ (8002290 <HAL_UART_RxCpltCallback+0x44>)
 8002270:	f009 f986 	bl	800b580 <memcpy>
        rxBufferReady = 1;
 8002274:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <HAL_UART_RxCpltCallback+0x48>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
    }

}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40004400 	.word	0x40004400
 8002288:	40011400 	.word	0x40011400
 800228c:	20000111 	.word	0x20000111
 8002290:	2000011c 	.word	0x2000011c
 8002294:	20000124 	.word	0x20000124

08002298 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022a8:	d102      	bne.n	80022b0 <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Disable further interrupts for the button

        // Reset the motor steps and trigger motion
    	Flag = 1;
 80022aa:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <HAL_GPIO_EXTI_Callback+0x24>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]


        // Re-enable the interrupt after the motion is complete (done in a later step)

}
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	20000b7c 	.word	0x20000b7c

080022c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c4:	f001 fcd7 	bl	8003c76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022c8:	f000 f8f0 	bl	80024ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022cc:	f000 fd82 	bl	8002dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80022d0:	f000 fd4e 	bl	8002d70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80022d4:	f000 fcbe 	bl	8002c54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80022d8:	f000 fd1c 	bl	8002d14 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 80022dc:	f000 fb72 	bl	80029c4 <MX_TIM7_Init>
  MX_TIM4_Init();
 80022e0:	f000 fac0 	bl	8002864 <MX_TIM4_Init>
  MX_TIM2_Init();
 80022e4:	f000 f9ce 	bl	8002684 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80022e8:	f000 fc84 	bl	8002bf4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80022ec:	f008 fb16 	bl	800a91c <MX_FATFS_Init>
  MX_SPI2_Init();
 80022f0:	f000 f98a 	bl	8002608 <MX_SPI2_Init>
  MX_TIM3_Init();
 80022f4:	f000 fa3e 	bl	8002774 <MX_TIM3_Init>
  MX_TIM14_Init();
 80022f8:	f000 fc2e 	bl	8002b58 <MX_TIM14_Init>
  MX_TIM5_Init();
 80022fc:	f000 fb08 	bl	8002910 <MX_TIM5_Init>
  MX_TIM9_Init();
 8002300:	f000 fb96 	bl	8002a30 <MX_TIM9_Init>
  MX_TIM10_Init();
 8002304:	f000 fbda 	bl	8002abc <MX_TIM10_Init>
  MX_I2C1_Init();
 8002308:	f000 f93e 	bl	8002588 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800230c:	f000 fcd2 	bl	8002cb4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(&hservo1);
 8002310:	4853      	ldr	r0, [pc, #332]	@ (8002460 <main+0x1a0>)
 8002312:	f7ff ff4f 	bl	80021b4 <SERVO_Init>
  SERVO_Init(&hservo2);
 8002316:	4853      	ldr	r0, [pc, #332]	@ (8002464 <main+0x1a4>)
 8002318:	f7ff ff4c 	bl	80021b4 <SERVO_Init>

  initializeMotors();
 800231c:	f7ff fb6e 	bl	80019fc <initializeMotors>
  initializeSystem();
 8002320:	f7ff fe34 	bl	8001f8c <initializeSystem>
   ENC_Init(&henc1);
 8002324:	4850      	ldr	r0, [pc, #320]	@ (8002468 <main+0x1a8>)
 8002326:	f7ff fe57 	bl	8001fd8 <ENC_Init>
   //HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);


        //TMC2209_Step(&motors[1], 16000);

   TMC2209_setMotorsConfiguration(motors,8,1);
 800232a:	2201      	movs	r2, #1
 800232c:	2108      	movs	r1, #8
 800232e:	484f      	ldr	r0, [pc, #316]	@ (800246c <main+0x1ac>)
 8002330:	f7fe ff34 	bl	800119c <TMC2209_setMotorsConfiguration>
   //checkMicrosteppingResolution(&motors[2]);
   TMC2209_SetSpeed(&motors[0], 26000);
 8002334:	f246 5190 	movw	r1, #26000	@ 0x6590
 8002338:	484c      	ldr	r0, [pc, #304]	@ (800246c <main+0x1ac>)
 800233a:	f7fe fbab 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[1], 16000);
 800233e:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8002342:	484b      	ldr	r0, [pc, #300]	@ (8002470 <main+0x1b0>)
 8002344:	f7fe fba6 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[2], 26000);
 8002348:	f246 5190 	movw	r1, #26000	@ 0x6590
 800234c:	4849      	ldr	r0, [pc, #292]	@ (8002474 <main+0x1b4>)
 800234e:	f7fe fba1 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[3], 16000);
 8002352:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8002356:	4848      	ldr	r0, [pc, #288]	@ (8002478 <main+0x1b8>)
 8002358:	f7fe fb9c 	bl	8000a94 <TMC2209_SetSpeed>


   LCD_I2C_Init(&hlcd3);
 800235c:	4847      	ldr	r0, [pc, #284]	@ (800247c <main+0x1bc>)
 800235e:	f7fe f9bb 	bl	80006d8 <LCD_I2C_Init>
   LCD_I2C_Clear(&hlcd3);
 8002362:	4846      	ldr	r0, [pc, #280]	@ (800247c <main+0x1bc>)
 8002364:	f7fe fa56 	bl	8000814 <LCD_I2C_Clear>
   LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
 8002368:	2102      	movs	r1, #2
 800236a:	4844      	ldr	r0, [pc, #272]	@ (800247c <main+0x1bc>)
 800236c:	f7fe fa84 	bl	8000878 <LCD_I2C_DisplaySequentialGlossyText>

   spiPre = SD_SPI_HANDLE.Instance->CR1;
 8002370:	4b43      	ldr	r3, [pc, #268]	@ (8002480 <main+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a43      	ldr	r2, [pc, #268]	@ (8002484 <main+0x1c4>)
 8002378:	6013      	str	r3, [r2, #0]

   //sd_card_read_gcode();
   spiPre = SD_SPI_HANDLE.Instance->CR1;
 800237a:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <main+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a40      	ldr	r2, [pc, #256]	@ (8002484 <main+0x1c4>)
 8002382:	6013      	str	r3, [r2, #0]
   //TMC2209_MoveTo(&axes[0], 0, 100); // Axis X, Motor X1*/
   //TMC2209_MoveTo(&axes[1], 0, -100); // Axis X, Motor X1
 // Axis X, Motor X1
   //TMC2209_Step(&motors[1], 3200);
//   TMC2209_SetDirection(&motors[0], dir);
     TMC2209_SetSpeed(&motors[0], 25000);
 8002384:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8002388:	4838      	ldr	r0, [pc, #224]	@ (800246c <main+0x1ac>)
 800238a:	f7fe fb83 	bl	8000a94 <TMC2209_SetSpeed>
//   TMC2209_SetDirection(&motors[1], dir);
     TMC2209_SetSpeed(&motors[1], 12000);
 800238e:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8002392:	4837      	ldr	r0, [pc, #220]	@ (8002470 <main+0x1b0>)
 8002394:	f7fe fb7e 	bl	8000a94 <TMC2209_SetSpeed>
//   TMC2209_SetDirection(&motors[2], dir);
   TMC2209_SetSpeed(&motors[2], 25000);
 8002398:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800239c:	4835      	ldr	r0, [pc, #212]	@ (8002474 <main+0x1b4>)
 800239e:	f7fe fb79 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[3], 12000);
 80023a2:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 80023a6:	4834      	ldr	r0, [pc, #208]	@ (8002478 <main+0x1b8>)
 80023a8:	f7fe fb74 	bl	8000a94 <TMC2209_SetSpeed>
   //TMC2209_Step(&motors[3], 6400);
   //TMC2209_EnableDriver(&motors[0], 1);
   //TMC2209_EnableDriver(&motors[1], 1);
   //TMC2209_EnableDriver(&motors[2], 1);
   //TMC2209_EnableDriver(&motors[3], 1);
   CheckConnection(&hservo2,&hservo1);
 80023ac:	492c      	ldr	r1, [pc, #176]	@ (8002460 <main+0x1a0>)
 80023ae:	482d      	ldr	r0, [pc, #180]	@ (8002464 <main+0x1a4>)
 80023b0:	f7ff fe20 	bl	8001ff4 <CheckConnection>
//   HAL_Delay(300);
//   SERVO_WritePosition(&hservo2, 40);
//   HAL_Delay(300);
   while (1){

      if (Flag) // Adjust based on button state
 80023b4:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <main+0x1c8>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <main+0x10a>
    	         //TMC2209_Step(&motors[1], 16000);
    	         //TMC2209_Start(&motors[0]);
    	         //TMC2209_Start(&motors[1]);


    	         MotorsHoming(&motors);
 80023be:	482b      	ldr	r0, [pc, #172]	@ (800246c <main+0x1ac>)
 80023c0:	f7fe ff26 	bl	8001210 <MotorsHoming>
//    	         stepsTaken[0] = 0;
//    	         HAL_Delay(200);
    	         //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
    	  	  	 Flag = 0;
 80023c4:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <main+0x1c8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]

      }
      //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
//
     es = IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin);
 80023ca:	2108      	movs	r1, #8
 80023cc:	482f      	ldr	r0, [pc, #188]	@ (800248c <main+0x1cc>)
 80023ce:	f7ff fe4b 	bl	8002068 <IsSensorTriggered>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002490 <main+0x1d0>)
 80023d8:	701a      	strb	r2, [r3, #0]
      x = IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin);
 80023da:	2110      	movs	r1, #16
 80023dc:	482d      	ldr	r0, [pc, #180]	@ (8002494 <main+0x1d4>)
 80023de:	f7ff fe43 	bl	8002068 <IsSensorTriggered>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <main+0x1d8>)
 80023e8:	701a      	strb	r2, [r3, #0]
      sensorX1=IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin);
 80023ea:	2104      	movs	r1, #4
 80023ec:	482b      	ldr	r0, [pc, #172]	@ (800249c <main+0x1dc>)
 80023ee:	f7ff fe3b 	bl	8002068 <IsSensorTriggered>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <main+0x1e0>)
 80023f8:	701a      	strb	r2, [r3, #0]
      xx =IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin);
 80023fa:	2110      	movs	r1, #16
 80023fc:	4827      	ldr	r0, [pc, #156]	@ (800249c <main+0x1dc>)
 80023fe:	f7ff fe33 	bl	8002068 <IsSensorTriggered>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	4b27      	ldr	r3, [pc, #156]	@ (80024a4 <main+0x1e4>)
 8002408:	701a      	strb	r2, [r3, #0]
      //xx= CheckConnection(&hservo2,&hservo1);


      sensorX1 = HAL_GPIO_ReadPin(BtnLeft_GPIO_Port,BtnLeft_Pin);
 800240a:	2101      	movs	r1, #1
 800240c:	4826      	ldr	r0, [pc, #152]	@ (80024a8 <main+0x1e8>)
 800240e:	f002 fb7b 	bl	8004b08 <HAL_GPIO_ReadPin>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	4b22      	ldr	r3, [pc, #136]	@ (80024a0 <main+0x1e0>)
 8002418:	701a      	strb	r2, [r3, #0]

      if(es && x &&sensorX1 && xx){
 800241a:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <main+0x1d0>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d010      	beq.n	8002446 <main+0x186>
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <main+0x1d8>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <main+0x186>
 800242e:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <main+0x1e0>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <main+0x186>
 8002436:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <main+0x1e4>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <main+0x186>
      xx =+1;
 800243e:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <main+0x1e4>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e002      	b.n	800244c <main+0x18c>
      }
      else{
    	  xx = 0;
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <main+0x1e4>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
      }
      while(xx >= 1){
 800244c:	e002      	b.n	8002454 <main+0x194>
      MotorControl_ButtonHandler(&motors);
 800244e:	4807      	ldr	r0, [pc, #28]	@ (800246c <main+0x1ac>)
 8002450:	f7ff f842 	bl	80014d8 <MotorControl_ButtonHandler>
      while(xx >= 1){
 8002454:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <main+0x1e4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f8      	bne.n	800244e <main+0x18e>
      if (Flag) // Adjust based on button state
 800245c:	e7aa      	b.n	80023b4 <main+0xf4>
 800245e:	bf00      	nop
 8002460:	2000002c 	.word	0x2000002c
 8002464:	2000003c 	.word	0x2000003c
 8002468:	20000000 	.word	0x20000000
 800246c:	20000b88 	.word	0x20000b88
 8002470:	20000bec 	.word	0x20000bec
 8002474:	20000c50 	.word	0x20000c50
 8002478:	20000cb4 	.word	0x20000cb4
 800247c:	20000018 	.word	0x20000018
 8002480:	2000017c 	.word	0x2000017c
 8002484:	20000b80 	.word	0x20000b80
 8002488:	20000b7c 	.word	0x20000b7c
 800248c:	40020400 	.word	0x40020400
 8002490:	20000b78 	.word	0x20000b78
 8002494:	40020000 	.word	0x40020000
 8002498:	20000b79 	.word	0x20000b79
 800249c:	40021000 	.word	0x40021000
 80024a0:	20000b7b 	.word	0x20000b7b
 80024a4:	20000b7a 	.word	0x20000b7a
 80024a8:	40021800 	.word	0x40021800

080024ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b094      	sub	sp, #80	@ 0x50
 80024b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b2:	f107 0320 	add.w	r3, r7, #32
 80024b6:	2230      	movs	r2, #48	@ 0x30
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f009 f82c 	bl	800b518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024d0:	f003 f904 	bl	80056dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002580 <SystemClock_Config+0xd4>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	4a29      	ldr	r2, [pc, #164]	@ (8002580 <SystemClock_Config+0xd4>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024de:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e0:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <SystemClock_Config+0xd4>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ec:	4b25      	ldr	r3, [pc, #148]	@ (8002584 <SystemClock_Config+0xd8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a24      	ldr	r2, [pc, #144]	@ (8002584 <SystemClock_Config+0xd8>)
 80024f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <SystemClock_Config+0xd8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002504:	2301      	movs	r3, #1
 8002506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002508:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800250e:	2302      	movs	r3, #2
 8002510:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002512:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002518:	2304      	movs	r3, #4
 800251a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800251c:	23d8      	movs	r3, #216	@ 0xd8
 800251e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002520:	2302      	movs	r3, #2
 8002522:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002524:	2309      	movs	r3, #9
 8002526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002528:	f107 0320 	add.w	r3, r7, #32
 800252c:	4618      	mov	r0, r3
 800252e:	f003 f935 	bl	800579c <HAL_RCC_OscConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002538:	f000 fddc 	bl	80030f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800253c:	f003 f8de 	bl	80056fc <HAL_PWREx_EnableOverDrive>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002546:	f000 fdd5 	bl	80030f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254a:	230f      	movs	r3, #15
 800254c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254e:	2302      	movs	r3, #2
 8002550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002556:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800255a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800255c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002560:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	2107      	movs	r1, #7
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fbbb 	bl	8005ce4 <HAL_RCC_ClockConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002574:	f000 fdbe 	bl	80030f4 <Error_Handler>
  }
}
 8002578:	bf00      	nop
 800257a:	3750      	adds	r7, #80	@ 0x50
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	40007000 	.word	0x40007000

08002588 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800258c:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <MX_I2C1_Init+0x74>)
 800258e:	4a1c      	ldr	r2, [pc, #112]	@ (8002600 <MX_I2C1_Init+0x78>)
 8002590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002592:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <MX_I2C1_Init+0x74>)
 8002594:	4a1b      	ldr	r2, [pc, #108]	@ (8002604 <MX_I2C1_Init+0x7c>)
 8002596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002598:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <MX_I2C1_Init+0x74>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800259e:	4b17      	ldr	r3, [pc, #92]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025a4:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025aa:	4b14      	ldr	r3, [pc, #80]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025b0:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025be:	2200      	movs	r2, #0
 80025c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025c2:	480e      	ldr	r0, [pc, #56]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025c4:	f002 faea 	bl	8004b9c <HAL_I2C_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025ce:	f000 fd91 	bl	80030f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025d2:	2100      	movs	r1, #0
 80025d4:	4809      	ldr	r0, [pc, #36]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025d6:	f002 feaf 	bl	8005338 <HAL_I2CEx_ConfigAnalogFilter>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025e0:	f000 fd88 	bl	80030f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025e4:	2100      	movs	r1, #0
 80025e6:	4805      	ldr	r0, [pc, #20]	@ (80025fc <MX_I2C1_Init+0x74>)
 80025e8:	f002 fef1 	bl	80053ce <HAL_I2CEx_ConfigDigitalFilter>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025f2:	f000 fd7f 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000128 	.word	0x20000128
 8002600:	40005400 	.word	0x40005400
 8002604:	20404768 	.word	0x20404768

08002608 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <MX_SPI2_Init+0x74>)
 800260e:	4a1c      	ldr	r2, [pc, #112]	@ (8002680 <MX_SPI2_Init+0x78>)
 8002610:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002612:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <MX_SPI2_Init+0x74>)
 8002614:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002618:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <MX_SPI2_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002620:	4b16      	ldr	r3, [pc, #88]	@ (800267c <MX_SPI2_Init+0x74>)
 8002622:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002626:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <MX_SPI2_Init+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <MX_SPI2_Init+0x74>)
 8002630:	2200      	movs	r2, #0
 8002632:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <MX_SPI2_Init+0x74>)
 8002636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800263a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800263c:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <MX_SPI2_Init+0x74>)
 800263e:	2238      	movs	r2, #56	@ 0x38
 8002640:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <MX_SPI2_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <MX_SPI2_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800264e:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <MX_SPI2_Init+0x74>)
 8002650:	2200      	movs	r2, #0
 8002652:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002654:	4b09      	ldr	r3, [pc, #36]	@ (800267c <MX_SPI2_Init+0x74>)
 8002656:	2207      	movs	r2, #7
 8002658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800265a:	4b08      	ldr	r3, [pc, #32]	@ (800267c <MX_SPI2_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <MX_SPI2_Init+0x74>)
 8002662:	2208      	movs	r2, #8
 8002664:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002666:	4805      	ldr	r0, [pc, #20]	@ (800267c <MX_SPI2_Init+0x74>)
 8002668:	f004 f952 	bl	8006910 <HAL_SPI_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002672:	f000 fd3f 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000017c 	.word	0x2000017c
 8002680:	40003800 	.word	0x40003800

08002684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08e      	sub	sp, #56	@ 0x38
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a4:	463b      	mov	r3, r7
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 80026be:	4b2c      	ldr	r3, [pc, #176]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026c0:	22d7      	movs	r2, #215	@ 0xd7
 80026c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80026ca:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026de:	4824      	ldr	r0, [pc, #144]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026e0:	f004 fee0 	bl	80074a4 <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80026ea:	f000 fd03 	bl	80030f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026f8:	4619      	mov	r1, r3
 80026fa:	481d      	ldr	r0, [pc, #116]	@ (8002770 <MX_TIM2_Init+0xec>)
 80026fc:	f005 fe78 	bl	80083f0 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002706:	f000 fcf5 	bl	80030f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800270a:	4819      	ldr	r0, [pc, #100]	@ (8002770 <MX_TIM2_Init+0xec>)
 800270c:	f004 ffb9 	bl	8007682 <HAL_TIM_PWM_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002716:	f000 fced 	bl	80030f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	4619      	mov	r1, r3
 8002728:	4811      	ldr	r0, [pc, #68]	@ (8002770 <MX_TIM2_Init+0xec>)
 800272a:	f006 fb1d 	bl	8008d68 <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002734:	f000 fcde 	bl	80030f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002738:	2360      	movs	r3, #96	@ 0x60
 800273a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800273c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002740:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800274a:	463b      	mov	r3, r7
 800274c:	2208      	movs	r2, #8
 800274e:	4619      	mov	r1, r3
 8002750:	4807      	ldr	r0, [pc, #28]	@ (8002770 <MX_TIM2_Init+0xec>)
 8002752:	f005 fd39 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800275c:	f000 fcca 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002760:	4803      	ldr	r0, [pc, #12]	@ (8002770 <MX_TIM2_Init+0xec>)
 8002762:	f000 febd 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8002766:	bf00      	nop
 8002768:	3738      	adds	r7, #56	@ 0x38
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200001e0 	.word	0x200001e0

08002774 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	@ 0x38
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002794:	463b      	mov	r3, r7
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	611a      	str	r2, [r3, #16]
 80027a2:	615a      	str	r2, [r3, #20]
 80027a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027a6:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002860 <MX_TIM3_Init+0xec>)
 80027aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 80027ac:	4b2b      	ldr	r3, [pc, #172]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027ae:	22d7      	movs	r2, #215	@ 0xd7
 80027b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80027b8:	4b28      	ldr	r3, [pc, #160]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c0:	4b26      	ldr	r3, [pc, #152]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c6:	4b25      	ldr	r3, [pc, #148]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027cc:	4823      	ldr	r0, [pc, #140]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027ce:	f004 fe69 	bl	80074a4 <HAL_TIM_Base_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80027d8:	f000 fc8c 	bl	80030f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027e6:	4619      	mov	r1, r3
 80027e8:	481c      	ldr	r0, [pc, #112]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027ea:	f005 fe01 	bl	80083f0 <HAL_TIM_ConfigClockSource>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80027f4:	f000 fc7e 	bl	80030f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027f8:	4818      	ldr	r0, [pc, #96]	@ (800285c <MX_TIM3_Init+0xe8>)
 80027fa:	f004 ff42 	bl	8007682 <HAL_TIM_PWM_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002804:	f000 fc76 	bl	80030f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	4619      	mov	r1, r3
 8002816:	4811      	ldr	r0, [pc, #68]	@ (800285c <MX_TIM3_Init+0xe8>)
 8002818:	f006 faa6 	bl	8008d68 <HAL_TIMEx_MasterConfigSynchronization>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002822:	f000 fc67 	bl	80030f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002826:	2360      	movs	r3, #96	@ 0x60
 8002828:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800282a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800282e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	2200      	movs	r2, #0
 800283c:	4619      	mov	r1, r3
 800283e:	4807      	ldr	r0, [pc, #28]	@ (800285c <MX_TIM3_Init+0xe8>)
 8002840:	f005 fcc2 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800284a:	f000 fc53 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800284e:	4803      	ldr	r0, [pc, #12]	@ (800285c <MX_TIM3_Init+0xe8>)
 8002850:	f000 fe46 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8002854:	bf00      	nop
 8002856:	3738      	adds	r7, #56	@ 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000022c 	.word	0x2000022c
 8002860:	40000400 	.word	0x40000400

08002864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	@ 0x30
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	2224      	movs	r2, #36	@ 0x24
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f008 fe50 	bl	800b518 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002878:	463b      	mov	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002882:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <MX_TIM4_Init+0xa4>)
 8002884:	4a21      	ldr	r2, [pc, #132]	@ (800290c <MX_TIM4_Init+0xa8>)
 8002886:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002888:	4b1f      	ldr	r3, [pc, #124]	@ (8002908 <MX_TIM4_Init+0xa4>)
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <MX_TIM4_Init+0xa4>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002894:	4b1c      	ldr	r3, [pc, #112]	@ (8002908 <MX_TIM4_Init+0xa4>)
 8002896:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800289a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <MX_TIM4_Init+0xa4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <MX_TIM4_Init+0xa4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028a8:	2303      	movs	r3, #3
 80028aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028b0:	2301      	movs	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80028b8:	230f      	movs	r3, #15
 80028ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028c0:	2301      	movs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80028c8:	230f      	movs	r3, #15
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	4619      	mov	r1, r3
 80028d2:	480d      	ldr	r0, [pc, #52]	@ (8002908 <MX_TIM4_Init+0xa4>)
 80028d4:	f005 fa3c 	bl	8007d50 <HAL_TIM_Encoder_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80028de:	f000 fc09 	bl	80030f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028ea:	463b      	mov	r3, r7
 80028ec:	4619      	mov	r1, r3
 80028ee:	4806      	ldr	r0, [pc, #24]	@ (8002908 <MX_TIM4_Init+0xa4>)
 80028f0:	f006 fa3a 	bl	8008d68 <HAL_TIMEx_MasterConfigSynchronization>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80028fa:	f000 fbfb 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	3730      	adds	r7, #48	@ 0x30
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000278 	.word	0x20000278
 800290c:	40000800 	.word	0x40000800

08002910 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	@ 0x28
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002922:	463b      	mov	r3, r7
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
 8002930:	615a      	str	r2, [r3, #20]
 8002932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002934:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <MX_TIM5_Init+0xac>)
 8002936:	4a22      	ldr	r2, [pc, #136]	@ (80029c0 <MX_TIM5_Init+0xb0>)
 8002938:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 800293a:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <MX_TIM5_Init+0xac>)
 800293c:	226b      	movs	r2, #107	@ 0x6b
 800293e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002940:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <MX_TIM5_Init+0xac>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002946:	4b1d      	ldr	r3, [pc, #116]	@ (80029bc <MX_TIM5_Init+0xac>)
 8002948:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800294c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <MX_TIM5_Init+0xac>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <MX_TIM5_Init+0xac>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800295a:	4818      	ldr	r0, [pc, #96]	@ (80029bc <MX_TIM5_Init+0xac>)
 800295c:	f004 fe91 	bl	8007682 <HAL_TIM_PWM_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002966:	f000 fbc5 	bl	80030f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002972:	f107 031c 	add.w	r3, r7, #28
 8002976:	4619      	mov	r1, r3
 8002978:	4810      	ldr	r0, [pc, #64]	@ (80029bc <MX_TIM5_Init+0xac>)
 800297a:	f006 f9f5 	bl	8008d68 <HAL_TIMEx_MasterConfigSynchronization>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002984:	f000 fbb6 	bl	80030f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002988:	2360      	movs	r3, #96	@ 0x60
 800298a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 800298c:	230a      	movs	r3, #10
 800298e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002998:	463b      	mov	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	4619      	mov	r1, r3
 800299e:	4807      	ldr	r0, [pc, #28]	@ (80029bc <MX_TIM5_Init+0xac>)
 80029a0:	f005 fc12 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80029aa:	f000 fba3 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80029ae:	4803      	ldr	r0, [pc, #12]	@ (80029bc <MX_TIM5_Init+0xac>)
 80029b0:	f000 fd96 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	@ 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200002c4 	.word	0x200002c4
 80029c0:	40000c00 	.word	0x40000c00

080029c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80029d4:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <MX_TIM7_Init+0x64>)
 80029d6:	4a15      	ldr	r2, [pc, #84]	@ (8002a2c <MX_TIM7_Init+0x68>)
 80029d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 80029da:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <MX_TIM7_Init+0x64>)
 80029dc:	22d7      	movs	r2, #215	@ 0xd7
 80029de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <MX_TIM7_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <MX_TIM7_Init+0x64>)
 80029e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <MX_TIM7_Init+0x64>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029f4:	480c      	ldr	r0, [pc, #48]	@ (8002a28 <MX_TIM7_Init+0x64>)
 80029f6:	f004 fd55 	bl	80074a4 <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002a00:	f000 fb78 	bl	80030f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a04:	2300      	movs	r3, #0
 8002a06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4805      	ldr	r0, [pc, #20]	@ (8002a28 <MX_TIM7_Init+0x64>)
 8002a12:	f006 f9a9 	bl	8008d68 <HAL_TIMEx_MasterConfigSynchronization>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002a1c:	f000 fb6a 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000310 	.word	0x20000310
 8002a2c:	40001400 	.word	0x40001400

08002a30 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <MX_TIM9_Init+0x88>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 215;
 8002a4e:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002a50:	22d7      	movs	r2, #215	@ 0xd7
 8002a52:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002a5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a60:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002a6e:	4811      	ldr	r0, [pc, #68]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002a70:	f004 fe07 	bl	8007682 <HAL_TIM_PWM_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002a7a:	f000 fb3b 	bl	80030f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a7e:	2360      	movs	r3, #96	@ 0x60
 8002a80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002a82:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	4619      	mov	r1, r3
 8002a96:	4807      	ldr	r0, [pc, #28]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002a98:	f005 fb96 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8002aa2:	f000 fb27 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002aa6:	4803      	ldr	r0, [pc, #12]	@ (8002ab4 <MX_TIM9_Init+0x84>)
 8002aa8:	f000 fd1a 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8002aac:	bf00      	nop
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000035c 	.word	0x2000035c
 8002ab8:	40014000 	.word	0x40014000

08002abc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b54 <MX_TIM10_Init+0x98>)
 8002ad8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 215;
 8002ada:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002adc:	22d7      	movs	r2, #215	@ 0xd7
 8002ade:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002ae8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002aec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af4:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002afa:	4815      	ldr	r0, [pc, #84]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002afc:	f004 fcd2 	bl	80074a4 <HAL_TIM_Base_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002b06:	f000 faf5 	bl	80030f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002b0a:	4811      	ldr	r0, [pc, #68]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002b0c:	f004 fdb9 	bl	8007682 <HAL_TIM_PWM_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002b16:	f000 faed 	bl	80030f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b1a:	2360      	movs	r3, #96	@ 0x60
 8002b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002b1e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4619      	mov	r1, r3
 8002b32:	4807      	ldr	r0, [pc, #28]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002b34:	f005 fb48 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8002b3e:	f000 fad9 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002b42:	4803      	ldr	r0, [pc, #12]	@ (8002b50 <MX_TIM10_Init+0x94>)
 8002b44:	f000 fccc 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8002b48:	bf00      	nop
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200003a8 	.word	0x200003a8
 8002b54:	40014400 	.word	0x40014400

08002b58 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002b70:	4b1e      	ldr	r3, [pc, #120]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002b72:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf0 <MX_TIM14_Init+0x98>)
 8002b74:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002b78:	226b      	movs	r2, #107	@ 0x6b
 8002b7a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002b84:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002b88:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8a:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b90:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002b96:	4815      	ldr	r0, [pc, #84]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002b98:	f004 fc84 	bl	80074a4 <HAL_TIM_Base_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002ba2:	f000 faa7 	bl	80030f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002ba6:	4811      	ldr	r0, [pc, #68]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002ba8:	f004 fd6b 	bl	8007682 <HAL_TIM_PWM_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002bb2:	f000 fa9f 	bl	80030f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb6:	2360      	movs	r3, #96	@ 0x60
 8002bb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002bba:	230a      	movs	r3, #10
 8002bbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4807      	ldr	r0, [pc, #28]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002bce:	f005 fafb 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002bd8:	f000 fa8c 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <MX_TIM14_Init+0x94>)
 8002bde:	f000 fc7f 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8002be2:	bf00      	nop
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200003f4 	.word	0x200003f4
 8002bf0:	40002000 	.word	0x40002000

08002bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bf8:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002bfa:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <MX_USART2_UART_Init+0x5c>)
 8002bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bfe:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c38:	f006 f942 	bl	8008ec0 <HAL_UART_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c42:	f000 fa57 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000440 	.word	0x20000440
 8002c50:	40004400 	.word	0x40004400

08002c54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c5a:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <MX_USART3_UART_Init+0x5c>)
 8002c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c60:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8002c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c66:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	@ (8002cac <MX_USART3_UART_Init+0x58>)
 8002c98:	f006 f912 	bl	8008ec0 <HAL_UART_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ca2:	f000 fa27 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200004c8 	.word	0x200004c8
 8002cb0:	40004800 	.word	0x40004800

08002cb4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cba:	4a15      	ldr	r2, [pc, #84]	@ (8002d10 <MX_USART6_UART_Init+0x5c>)
 8002cbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002cbe:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc6:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cda:	220c      	movs	r2, #12
 8002cdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce4:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cea:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	@ (8002d0c <MX_USART6_UART_Init+0x58>)
 8002cf8:	f006 f8e2 	bl	8008ec0 <HAL_UART_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002d02:	f000 f9f7 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000550 	.word	0x20000550
 8002d10:	40011400 	.word	0x40011400

08002d14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d18:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002d20:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d22:	2206      	movs	r2, #6
 8002d24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d28:	2202      	movs	r2, #2
 8002d2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d34:	2202      	movs	r2, #2
 8002d36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002d44:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	@ (8002d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d58:	f002 fb85 	bl	8005466 <HAL_PCD_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002d62:	f000 f9c7 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000698 	.word	0x20000698

08002d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <MX_DMA_Init+0x60>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	4a15      	ldr	r2, [pc, #84]	@ (8002dd0 <MX_DMA_Init+0x60>)
 8002d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <MX_DMA_Init+0x60>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d8e:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <MX_DMA_Init+0x60>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd0 <MX_DMA_Init+0x60>)
 8002d94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <MX_DMA_Init+0x60>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	2010      	movs	r0, #16
 8002dac:	f001 f8bf 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002db0:	2010      	movs	r0, #16
 8002db2:	f001 f8d8 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2039      	movs	r0, #57	@ 0x39
 8002dbc:	f001 f8b7 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002dc0:	2039      	movs	r0, #57	@ 0x39
 8002dc2:	f001 f8d0 	bl	8003f66 <HAL_NVIC_EnableIRQ>

}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08e      	sub	sp, #56	@ 0x38
 8002dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dea:	4bb5      	ldr	r3, [pc, #724]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4ab4      	ldr	r2, [pc, #720]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002df0:	f043 0310 	orr.w	r3, r3, #16
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4bb2      	ldr	r3, [pc, #712]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e02:	4baf      	ldr	r3, [pc, #700]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	4aae      	ldr	r2, [pc, #696]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0e:	4bac      	ldr	r3, [pc, #688]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e1a:	4ba9      	ldr	r3, [pc, #676]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	4aa8      	ldr	r2, [pc, #672]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e20:	f043 0320 	orr.w	r3, r3, #32
 8002e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e26:	4ba6      	ldr	r3, [pc, #664]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e32:	4ba3      	ldr	r3, [pc, #652]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	4aa2      	ldr	r2, [pc, #648]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3e:	4ba0      	ldr	r3, [pc, #640]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	4b9d      	ldr	r3, [pc, #628]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4a9c      	ldr	r2, [pc, #624]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e56:	4b9a      	ldr	r3, [pc, #616]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	4b97      	ldr	r3, [pc, #604]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	4a96      	ldr	r2, [pc, #600]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6e:	4b94      	ldr	r3, [pc, #592]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e7a:	4b91      	ldr	r3, [pc, #580]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	4a90      	ldr	r2, [pc, #576]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e86:	4b8e      	ldr	r3, [pc, #568]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e92:	4b8b      	ldr	r3, [pc, #556]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a8a      	ldr	r2, [pc, #552]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002e98:	f043 0308 	orr.w	r3, r3, #8
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b88      	ldr	r3, [pc, #544]	@ (80030c0 <MX_GPIO_Init+0x2ec>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enn3_Pin|dir3_Pin, GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2148      	movs	r1, #72	@ 0x48
 8002eae:	4885      	ldr	r0, [pc, #532]	@ (80030c4 <MX_GPIO_Init+0x2f0>)
 8002eb0:	f001 fe42 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, enn4_Pin|dir1_Pin, GPIO_PIN_RESET);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2181      	movs	r1, #129	@ 0x81
 8002eb8:	4883      	ldr	r0, [pc, #524]	@ (80030c8 <MX_GPIO_Init+0x2f4>)
 8002eba:	f001 fe3d 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enn2_Pin|dir2_Pin, GPIO_PIN_RESET);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	21a0      	movs	r1, #160	@ 0xa0
 8002ec2:	4882      	ldr	r0, [pc, #520]	@ (80030cc <MX_GPIO_Init+0x2f8>)
 8002ec4:	f001 fe38 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(enn1_GPIO_Port, enn1_Pin, GPIO_PIN_RESET);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ece:	4880      	ldr	r0, [pc, #512]	@ (80030d0 <MX_GPIO_Init+0x2fc>)
 8002ed0:	f001 fe32 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_cs_GPIO_Port, SPI_cs_Pin, GPIO_PIN_SET);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002eda:	487e      	ldr	r0, [pc, #504]	@ (80030d4 <MX_GPIO_Init+0x300>)
 8002edc:	f001 fe2c 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2140      	movs	r1, #64	@ 0x40
 8002ee4:	487c      	ldr	r0, [pc, #496]	@ (80030d8 <MX_GPIO_Init+0x304>)
 8002ee6:	f001 fe27 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir4_GPIO_Port, dir4_Pin, GPIO_PIN_RESET);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2101      	movs	r1, #1
 8002eee:	4879      	ldr	r0, [pc, #484]	@ (80030d4 <MX_GPIO_Init+0x300>)
 8002ef0:	f001 fe22 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EndStop1_Pin EndStop2_Pin BtnCtr_Pin */
  GPIO_InitStruct.Pin = EndStop1_Pin|EndStop2_Pin|BtnCtr_Pin;
 8002ef4:	f640 0314 	movw	r3, #2068	@ 0x814
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002efe:	2301      	movs	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f06:	4619      	mov	r1, r3
 8002f08:	486e      	ldr	r0, [pc, #440]	@ (80030c4 <MX_GPIO_Init+0x2f0>)
 8002f0a:	f001 fc51 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : enn3_Pin dir3_Pin */
  GPIO_InitStruct.Pin = enn3_Pin|dir3_Pin;
 8002f0e:	2348      	movs	r3, #72	@ 0x48
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f22:	4619      	mov	r1, r3
 8002f24:	4867      	ldr	r0, [pc, #412]	@ (80030c4 <MX_GPIO_Init+0x2f0>)
 8002f26:	f001 fc43 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4866      	ldr	r0, [pc, #408]	@ (80030dc <MX_GPIO_Init+0x308>)
 8002f42:	f001 fc35 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : enn4_Pin dir1_Pin */
  GPIO_InitStruct.Pin = enn4_Pin|dir1_Pin;
 8002f46:	2381      	movs	r3, #129	@ 0x81
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	485a      	ldr	r0, [pc, #360]	@ (80030c8 <MX_GPIO_Init+0x2f4>)
 8002f5e:	f001 fc27 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8002f62:	2308      	movs	r3, #8
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8002f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f72:	4619      	mov	r1, r3
 8002f74:	4855      	ldr	r0, [pc, #340]	@ (80030cc <MX_GPIO_Init+0x2f8>)
 8002f76:	f001 fc1b 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop3_Pin;
 8002f7a:	2310      	movs	r3, #16
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f82:	2301      	movs	r3, #1
 8002f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EndStop3_GPIO_Port, &GPIO_InitStruct);
 8002f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	484f      	ldr	r0, [pc, #316]	@ (80030cc <MX_GPIO_Init+0x2f8>)
 8002f8e:	f001 fc0f 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : enn2_Pin dir2_Pin */
  GPIO_InitStruct.Pin = enn2_Pin|dir2_Pin;
 8002f92:	23a0      	movs	r3, #160	@ 0xa0
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f96:	2301      	movs	r3, #1
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4848      	ldr	r0, [pc, #288]	@ (80030cc <MX_GPIO_Init+0x2f8>)
 8002faa:	f001 fc01 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EncoderBtn_Pin PB2 */
  GPIO_InitStruct.Pin = EncoderBtn_Pin|GPIO_PIN_2;
 8002fae:	2306      	movs	r3, #6
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4843      	ldr	r0, [pc, #268]	@ (80030d0 <MX_GPIO_Init+0x2fc>)
 8002fc2:	f001 fbf5 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnUp_Pin BtnDown_Pin */
  GPIO_InitStruct.Pin = BtnUp_Pin|BtnDown_Pin;
 8002fc6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	483b      	ldr	r0, [pc, #236]	@ (80030c8 <MX_GPIO_Init+0x2f4>)
 8002fdc:	f001 fbe8 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnLeft_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin|BtnRight_Pin;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4839      	ldr	r0, [pc, #228]	@ (80030d8 <MX_GPIO_Init+0x304>)
 8002ff4:	f001 fbdc 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : enn1_Pin */
  GPIO_InitStruct.Pin = enn1_Pin;
 8002ff8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffe:	2301      	movs	r3, #1
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(enn1_GPIO_Port, &GPIO_InitStruct);
 800300a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800300e:	4619      	mov	r1, r3
 8003010:	482f      	ldr	r0, [pc, #188]	@ (80030d0 <MX_GPIO_Init+0x2fc>)
 8003012:	f001 fbcd 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_cs_Pin */
  GPIO_InitStruct.Pin = SPI_cs_Pin;
 8003016:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301c:	2301      	movs	r3, #1
 800301e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003020:	2301      	movs	r3, #1
 8003022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI_cs_GPIO_Port, &GPIO_InitStruct);
 8003028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800302c:	4619      	mov	r1, r3
 800302e:	4829      	ldr	r0, [pc, #164]	@ (80030d4 <MX_GPIO_Init+0x300>)
 8003030:	f001 fbbe 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : diag_Pin diag1_Pin */
  GPIO_InitStruct.Pin = diag_Pin|diag1_Pin;
 8003034:	f248 0302 	movw	r3, #32770	@ 0x8002
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800303a:	2300      	movs	r3, #0
 800303c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003046:	4619      	mov	r1, r3
 8003048:	4822      	ldr	r0, [pc, #136]	@ (80030d4 <MX_GPIO_Init+0x300>)
 800304a:	f001 fbb1 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800304e:	2340      	movs	r3, #64	@ 0x40
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003052:	2301      	movs	r3, #1
 8003054:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003062:	4619      	mov	r1, r3
 8003064:	481c      	ldr	r0, [pc, #112]	@ (80030d8 <MX_GPIO_Init+0x304>)
 8003066:	f001 fba3 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800306e:	2300      	movs	r3, #0
 8003070:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800307a:	4619      	mov	r1, r3
 800307c:	4816      	ldr	r0, [pc, #88]	@ (80030d8 <MX_GPIO_Init+0x304>)
 800307e:	f001 fb97 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : dir4_Pin */
  GPIO_InitStruct.Pin = dir4_Pin;
 8003082:	2301      	movs	r3, #1
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003086:	2301      	movs	r3, #1
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(dir4_GPIO_Port, &GPIO_InitStruct);
 8003092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003096:	4619      	mov	r1, r3
 8003098:	480e      	ldr	r0, [pc, #56]	@ (80030d4 <MX_GPIO_Init+0x300>)
 800309a:	f001 fb89 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EndStop4_Pin */
  GPIO_InitStruct.Pin = EndStop4_Pin;
 800309e:	2308      	movs	r3, #8
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a6:	2301      	movs	r3, #1
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EndStop4_GPIO_Port, &GPIO_InitStruct);
 80030aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ae:	4619      	mov	r1, r3
 80030b0:	4807      	ldr	r0, [pc, #28]	@ (80030d0 <MX_GPIO_Init+0x2fc>)
 80030b2:	f001 fb7d 	bl	80047b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	2028      	movs	r0, #40	@ 0x28
 80030bc:	e010      	b.n	80030e0 <MX_GPIO_Init+0x30c>
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40020400 	.word	0x40020400
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	40021800 	.word	0x40021800
 80030dc:	40020800 	.word	0x40020800
 80030e0:	f000 ff25 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030e4:	2028      	movs	r0, #40	@ 0x28
 80030e6:	f000 ff3e 	bl	8003f66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ea:	bf00      	nop
 80030ec:	3738      	adds	r7, #56	@ 0x38
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop

080030f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
}
 80030fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <Error_Handler+0x8>

08003100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b0f      	ldr	r3, [pc, #60]	@ (8003144 <HAL_MspInit+0x44>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <HAL_MspInit+0x44>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	@ 0x40
 8003112:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <HAL_MspInit+0x44>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311e:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <HAL_MspInit+0x44>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	4a08      	ldr	r2, [pc, #32]	@ (8003144 <HAL_MspInit+0x44>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003128:	6453      	str	r3, [r2, #68]	@ 0x44
 800312a:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_MspInit+0x44>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b0aa      	sub	sp, #168	@ 0xa8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003160:	f107 0310 	add.w	r3, r7, #16
 8003164:	2284      	movs	r2, #132	@ 0x84
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f008 f9d5 	bl	800b518 <memset>
  if(hi2c->Instance==I2C1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a22      	ldr	r2, [pc, #136]	@ (80031fc <HAL_I2C_MspInit+0xb4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d13c      	bne.n	80031f2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003178:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800317c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800317e:	2300      	movs	r3, #0
 8003180:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	4618      	mov	r0, r3
 8003188:	f002 ffd2 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003192:	f7ff ffaf 	bl	80030f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <HAL_I2C_MspInit+0xb8>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	4a19      	ldr	r2, [pc, #100]	@ (8003200 <HAL_I2C_MspInit+0xb8>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <HAL_I2C_MspInit+0xb8>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80031ae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80031b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b6:	2312      	movs	r3, #18
 80031b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031c8:	2304      	movs	r3, #4
 80031ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ce:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031d2:	4619      	mov	r1, r3
 80031d4:	480b      	ldr	r0, [pc, #44]	@ (8003204 <HAL_I2C_MspInit+0xbc>)
 80031d6:	f001 faeb 	bl	80047b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031da:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <HAL_I2C_MspInit+0xb8>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	4a08      	ldr	r2, [pc, #32]	@ (8003200 <HAL_I2C_MspInit+0xb8>)
 80031e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_I2C_MspInit+0xb8>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80031f2:	bf00      	nop
 80031f4:	37a8      	adds	r7, #168	@ 0xa8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40005400 	.word	0x40005400
 8003200:	40023800 	.word	0x40023800
 8003204:	40020400 	.word	0x40020400

08003208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a25      	ldr	r2, [pc, #148]	@ (80032bc <HAL_SPI_MspInit+0xb4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d143      	bne.n	80032b2 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800322a:	4b25      	ldr	r3, [pc, #148]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	4a24      	ldr	r2, [pc, #144]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 8003230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003234:	6413      	str	r3, [r2, #64]	@ 0x40
 8003236:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003242:	4b1f      	ldr	r3, [pc, #124]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4a1e      	ldr	r2, [pc, #120]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6313      	str	r3, [r2, #48]	@ 0x30
 800324e:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800325a:	4b19      	ldr	r3, [pc, #100]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	4a18      	ldr	r2, [pc, #96]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 8003260:	f043 0308 	orr.w	r3, r3, #8
 8003264:	6313      	str	r3, [r2, #48]	@ 0x30
 8003266:	4b16      	ldr	r3, [pc, #88]	@ (80032c0 <HAL_SPI_MspInit+0xb8>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003272:	230c      	movs	r3, #12
 8003274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327e:	2303      	movs	r3, #3
 8003280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003282:	2305      	movs	r3, #5
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	480d      	ldr	r0, [pc, #52]	@ (80032c4 <HAL_SPI_MspInit+0xbc>)
 800328e:	f001 fa8f 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003292:	2308      	movs	r3, #8
 8003294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032a2:	2305      	movs	r3, #5
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	4806      	ldr	r0, [pc, #24]	@ (80032c8 <HAL_SPI_MspInit+0xc0>)
 80032ae:	f001 fa7f 	bl	80047b0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80032b2:	bf00      	nop
 80032b4:	3728      	adds	r7, #40	@ 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40003800 	.word	0x40003800
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40020c00 	.word	0x40020c00

080032cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032dc:	d114      	bne.n	8003308 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032de:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	4a37      	ldr	r2, [pc, #220]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ea:	4b35      	ldr	r3, [pc, #212]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	201c      	movs	r0, #28
 80032fc:	f000 fe17 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003300:	201c      	movs	r0, #28
 8003302:	f000 fe30 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003306:	e056      	b.n	80033b6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2d      	ldr	r2, [pc, #180]	@ (80033c4 <HAL_TIM_Base_MspInit+0xf8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d114      	bne.n	800333c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003312:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	4a2a      	ldr	r2, [pc, #168]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	6413      	str	r3, [r2, #64]	@ 0x40
 800331e:	4b28      	ldr	r3, [pc, #160]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	201d      	movs	r0, #29
 8003330:	f000 fdfd 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003334:	201d      	movs	r0, #29
 8003336:	f000 fe16 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 800333a:	e03c      	b.n	80033b6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM7)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a21      	ldr	r2, [pc, #132]	@ (80033c8 <HAL_TIM_Base_MspInit+0xfc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10c      	bne.n	8003360 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003346:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 800334c:	f043 0320 	orr.w	r3, r3, #32
 8003350:	6413      	str	r3, [r2, #64]	@ 0x40
 8003352:	4b1b      	ldr	r3, [pc, #108]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]
}
 800335e:	e02a      	b.n	80033b6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM10)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a19      	ldr	r2, [pc, #100]	@ (80033cc <HAL_TIM_Base_MspInit+0x100>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d114      	bne.n	8003394 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800336a:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	4a14      	ldr	r2, [pc, #80]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 8003370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003374:	6453      	str	r3, [r2, #68]	@ 0x44
 8003376:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	2019      	movs	r0, #25
 8003388:	f000 fdd1 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800338c:	2019      	movs	r0, #25
 800338e:	f000 fdea 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 8003392:	e010      	b.n	80033b6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM14)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0d      	ldr	r2, [pc, #52]	@ (80033d0 <HAL_TIM_Base_MspInit+0x104>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10b      	bne.n	80033b6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800339e:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	4a07      	ldr	r2, [pc, #28]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_TIM_Base_MspInit+0xf4>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
}
 80033b6:	bf00      	nop
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40001400 	.word	0x40001400
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40002000 	.word	0x40002000

080033d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <HAL_TIM_Encoder_MspInit+0x8c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d130      	bne.n	8003458 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <HAL_TIM_Encoder_MspInit+0x90>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003464 <HAL_TIM_Encoder_MspInit+0x90>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6413      	str	r3, [r2, #64]	@ 0x40
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <HAL_TIM_Encoder_MspInit+0x90>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <HAL_TIM_Encoder_MspInit+0x90>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	4a14      	ldr	r2, [pc, #80]	@ (8003464 <HAL_TIM_Encoder_MspInit+0x90>)
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6313      	str	r3, [r2, #48]	@ 0x30
 800341a:	4b12      	ldr	r3, [pc, #72]	@ (8003464 <HAL_TIM_Encoder_MspInit+0x90>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 8003426:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800342a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003438:	2302      	movs	r3, #2
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4619      	mov	r1, r3
 8003442:	4809      	ldr	r0, [pc, #36]	@ (8003468 <HAL_TIM_Encoder_MspInit+0x94>)
 8003444:	f001 f9b4 	bl	80047b0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003448:	2200      	movs	r2, #0
 800344a:	2100      	movs	r1, #0
 800344c:	201e      	movs	r0, #30
 800344e:	f000 fd6e 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003452:	201e      	movs	r0, #30
 8003454:	f000 fd87 	bl	8003f66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003458:	bf00      	nop
 800345a:	3728      	adds	r7, #40	@ 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40000800 	.word	0x40000800
 8003464:	40023800 	.word	0x40023800
 8003468:	40020c00 	.word	0x40020c00

0800346c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a16      	ldr	r2, [pc, #88]	@ (80034d4 <HAL_TIM_PWM_MspInit+0x68>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10c      	bne.n	8003498 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800347e:	4b16      	ldr	r3, [pc, #88]	@ (80034d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	6413      	str	r3, [r2, #64]	@ 0x40
 800348a:	4b13      	ldr	r3, [pc, #76]	@ (80034d8 <HAL_TIM_PWM_MspInit+0x6c>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003496:	e018      	b.n	80034ca <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM9)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0f      	ldr	r2, [pc, #60]	@ (80034dc <HAL_TIM_PWM_MspInit+0x70>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d113      	bne.n	80034ca <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80034a2:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	4a0c      	ldr	r2, [pc, #48]	@ (80034d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	2018      	movs	r0, #24
 80034c0:	f000 fd35 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80034c4:	2018      	movs	r0, #24
 80034c6:	f000 fd4e 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40014000 	.word	0x40014000

080034e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	@ 0x38
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003500:	d11d      	bne.n	800353e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	4b66      	ldr	r3, [pc, #408]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	6313      	str	r3, [r2, #48]	@ 0x30
 800350e:	4b63      	ldr	r3, [pc, #396]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = step1_Pin;
 800351a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	2300      	movs	r3, #0
 800352a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800352c:	2301      	movs	r3, #1
 800352e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 8003530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003534:	4619      	mov	r1, r3
 8003536:	485a      	ldr	r0, [pc, #360]	@ (80036a0 <HAL_TIM_MspPostInit+0x1c0>)
 8003538:	f001 f93a 	bl	80047b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800353c:	e0aa      	b.n	8003694 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM3)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a58      	ldr	r2, [pc, #352]	@ (80036a4 <HAL_TIM_MspPostInit+0x1c4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d11c      	bne.n	8003582 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	4b54      	ldr	r3, [pc, #336]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	4a53      	ldr	r2, [pc, #332]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6313      	str	r3, [r2, #48]	@ 0x30
 8003554:	4b51      	ldr	r3, [pc, #324]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = step2_Pin;
 8003560:	2340      	movs	r3, #64	@ 0x40
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	2300      	movs	r3, #0
 800356e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003570:	2302      	movs	r3, #2
 8003572:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 8003574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003578:	4619      	mov	r1, r3
 800357a:	484b      	ldr	r0, [pc, #300]	@ (80036a8 <HAL_TIM_MspPostInit+0x1c8>)
 800357c:	f001 f918 	bl	80047b0 <HAL_GPIO_Init>
}
 8003580:	e088      	b.n	8003694 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM5)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a49      	ldr	r2, [pc, #292]	@ (80036ac <HAL_TIM_MspPostInit+0x1cc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d11c      	bne.n	80035c6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358c:	4b43      	ldr	r3, [pc, #268]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	4a42      	ldr	r2, [pc, #264]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6313      	str	r3, [r2, #48]	@ 0x30
 8003598:	4b40      	ldr	r3, [pc, #256]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = servoPWM_Pin;
 80035a4:	2301      	movs	r3, #1
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035b4:	2302      	movs	r3, #2
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(servoPWM_GPIO_Port, &GPIO_InitStruct);
 80035b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035bc:	4619      	mov	r1, r3
 80035be:	483a      	ldr	r0, [pc, #232]	@ (80036a8 <HAL_TIM_MspPostInit+0x1c8>)
 80035c0:	f001 f8f6 	bl	80047b0 <HAL_GPIO_Init>
}
 80035c4:	e066      	b.n	8003694 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM9)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a39      	ldr	r2, [pc, #228]	@ (80036b0 <HAL_TIM_MspPostInit+0x1d0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d11c      	bne.n	800360a <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035d0:	4b32      	ldr	r3, [pc, #200]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	4a31      	ldr	r2, [pc, #196]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 80035d6:	f043 0310 	orr.w	r3, r3, #16
 80035da:	6313      	str	r3, [r2, #48]	@ 0x30
 80035dc:	4b2f      	ldr	r3, [pc, #188]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = step3_Pin;
 80035e8:	2320      	movs	r3, #32
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f4:	2300      	movs	r3, #0
 80035f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80035f8:	2303      	movs	r3, #3
 80035fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step3_GPIO_Port, &GPIO_InitStruct);
 80035fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003600:	4619      	mov	r1, r3
 8003602:	482c      	ldr	r0, [pc, #176]	@ (80036b4 <HAL_TIM_MspPostInit+0x1d4>)
 8003604:	f001 f8d4 	bl	80047b0 <HAL_GPIO_Init>
}
 8003608:	e044      	b.n	8003694 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM10)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a2a      	ldr	r2, [pc, #168]	@ (80036b8 <HAL_TIM_MspPostInit+0x1d8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d11d      	bne.n	8003650 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003614:	4b21      	ldr	r3, [pc, #132]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003618:	4a20      	ldr	r2, [pc, #128]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003620:	4b1e      	ldr	r3, [pc, #120]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = step4_Pin;
 800362c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800363e:	2303      	movs	r3, #3
 8003640:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step4_GPIO_Port, &GPIO_InitStruct);
 8003642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003646:	4619      	mov	r1, r3
 8003648:	4815      	ldr	r0, [pc, #84]	@ (80036a0 <HAL_TIM_MspPostInit+0x1c0>)
 800364a:	f001 f8b1 	bl	80047b0 <HAL_GPIO_Init>
}
 800364e:	e021      	b.n	8003694 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM14)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a19      	ldr	r2, [pc, #100]	@ (80036bc <HAL_TIM_MspPostInit+0x1dc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d11c      	bne.n	8003694 <HAL_TIM_MspPostInit+0x1b4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800365a:	4b10      	ldr	r3, [pc, #64]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	4a0f      	ldr	r2, [pc, #60]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	6313      	str	r3, [r2, #48]	@ 0x30
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <HAL_TIM_MspPostInit+0x1bc>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 8003672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	2300      	movs	r3, #0
 8003682:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003684:	2309      	movs	r3, #9
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 8003688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800368c:	4619      	mov	r1, r3
 800368e:	480c      	ldr	r0, [pc, #48]	@ (80036c0 <HAL_TIM_MspPostInit+0x1e0>)
 8003690:	f001 f88e 	bl	80047b0 <HAL_GPIO_Init>
}
 8003694:	bf00      	nop
 8003696:	3738      	adds	r7, #56	@ 0x38
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	40020400 	.word	0x40020400
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40002000 	.word	0x40002000
 80036c0:	40021400 	.word	0x40021400

080036c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b0ae      	sub	sp, #184	@ 0xb8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036dc:	f107 0320 	add.w	r3, r7, #32
 80036e0:	2284      	movs	r2, #132	@ 0x84
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f007 ff17 	bl	800b518 <memset>
  if(huart->Instance==USART2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a99      	ldr	r2, [pc, #612]	@ (8003954 <HAL_UART_MspInit+0x290>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d171      	bne.n	80037d8 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036f8:	2300      	movs	r3, #0
 80036fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036fc:	f107 0320 	add.w	r3, r7, #32
 8003700:	4618      	mov	r0, r3
 8003702:	f002 fd15 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800370c:	f7ff fcf2 	bl	80030f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003710:	4b91      	ldr	r3, [pc, #580]	@ (8003958 <HAL_UART_MspInit+0x294>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	4a90      	ldr	r2, [pc, #576]	@ (8003958 <HAL_UART_MspInit+0x294>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800371a:	6413      	str	r3, [r2, #64]	@ 0x40
 800371c:	4b8e      	ldr	r3, [pc, #568]	@ (8003958 <HAL_UART_MspInit+0x294>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003728:	4b8b      	ldr	r3, [pc, #556]	@ (8003958 <HAL_UART_MspInit+0x294>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	4a8a      	ldr	r2, [pc, #552]	@ (8003958 <HAL_UART_MspInit+0x294>)
 800372e:	f043 0308 	orr.w	r3, r3, #8
 8003732:	6313      	str	r3, [r2, #48]	@ 0x30
 8003734:	4b88      	ldr	r3, [pc, #544]	@ (8003958 <HAL_UART_MspInit+0x294>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003740:	2360      	movs	r3, #96	@ 0x60
 8003742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003752:	2303      	movs	r3, #3
 8003754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003758:	2307      	movs	r3, #7
 800375a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800375e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003762:	4619      	mov	r1, r3
 8003764:	487d      	ldr	r0, [pc, #500]	@ (800395c <HAL_UART_MspInit+0x298>)
 8003766:	f001 f823 	bl	80047b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800376a:	4b7d      	ldr	r3, [pc, #500]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 800376c:	4a7d      	ldr	r2, [pc, #500]	@ (8003964 <HAL_UART_MspInit+0x2a0>)
 800376e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003770:	4b7b      	ldr	r3, [pc, #492]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 8003772:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003776:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003778:	4b79      	ldr	r3, [pc, #484]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800377e:	4b78      	ldr	r3, [pc, #480]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003784:	4b76      	ldr	r3, [pc, #472]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 8003786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800378a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378c:	4b74      	ldr	r3, [pc, #464]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003792:	4b73      	ldr	r3, [pc, #460]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003798:	4b71      	ldr	r3, [pc, #452]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800379e:	4b70      	ldr	r3, [pc, #448]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a4:	4b6e      	ldr	r3, [pc, #440]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037aa:	486d      	ldr	r0, [pc, #436]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 80037ac:	f000 fbf6 	bl	8003f9c <HAL_DMA_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80037b6:	f7ff fc9d 	bl	80030f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a68      	ldr	r2, [pc, #416]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 80037be:	675a      	str	r2, [r3, #116]	@ 0x74
 80037c0:	4a67      	ldr	r2, [pc, #412]	@ (8003960 <HAL_UART_MspInit+0x29c>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	2026      	movs	r0, #38	@ 0x26
 80037cc:	f000 fbaf 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037d0:	2026      	movs	r0, #38	@ 0x26
 80037d2:	f000 fbc8 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80037d6:	e0b9      	b.n	800394c <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART3)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a62      	ldr	r2, [pc, #392]	@ (8003968 <HAL_UART_MspInit+0x2a4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d13d      	bne.n	800385e <HAL_UART_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037e6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80037e8:	2300      	movs	r3, #0
 80037ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ec:	f107 0320 	add.w	r3, r7, #32
 80037f0:	4618      	mov	r0, r3
 80037f2:	f002 fc9d 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 80037fc:	f7ff fc7a 	bl	80030f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003800:	4b55      	ldr	r3, [pc, #340]	@ (8003958 <HAL_UART_MspInit+0x294>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	4a54      	ldr	r2, [pc, #336]	@ (8003958 <HAL_UART_MspInit+0x294>)
 8003806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800380a:	6413      	str	r3, [r2, #64]	@ 0x40
 800380c:	4b52      	ldr	r3, [pc, #328]	@ (8003958 <HAL_UART_MspInit+0x294>)
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003818:	4b4f      	ldr	r3, [pc, #316]	@ (8003958 <HAL_UART_MspInit+0x294>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	4a4e      	ldr	r2, [pc, #312]	@ (8003958 <HAL_UART_MspInit+0x294>)
 800381e:	f043 0308 	orr.w	r3, r3, #8
 8003822:	6313      	str	r3, [r2, #48]	@ 0x30
 8003824:	4b4c      	ldr	r3, [pc, #304]	@ (8003958 <HAL_UART_MspInit+0x294>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003830:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800383e:	2301      	movs	r3, #1
 8003840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003844:	2303      	movs	r3, #3
 8003846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800384a:	2307      	movs	r3, #7
 800384c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003850:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003854:	4619      	mov	r1, r3
 8003856:	4841      	ldr	r0, [pc, #260]	@ (800395c <HAL_UART_MspInit+0x298>)
 8003858:	f000 ffaa 	bl	80047b0 <HAL_GPIO_Init>
}
 800385c:	e076      	b.n	800394c <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART6)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a42      	ldr	r2, [pc, #264]	@ (800396c <HAL_UART_MspInit+0x2a8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d171      	bne.n	800394c <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003868:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800386c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800386e:	2300      	movs	r3, #0
 8003870:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003872:	f107 0320 	add.w	r3, r7, #32
 8003876:	4618      	mov	r0, r3
 8003878:	f002 fc5a 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8003882:	f7ff fc37 	bl	80030f4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003886:	4b34      	ldr	r3, [pc, #208]	@ (8003958 <HAL_UART_MspInit+0x294>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	4a33      	ldr	r2, [pc, #204]	@ (8003958 <HAL_UART_MspInit+0x294>)
 800388c:	f043 0320 	orr.w	r3, r3, #32
 8003890:	6453      	str	r3, [r2, #68]	@ 0x44
 8003892:	4b31      	ldr	r3, [pc, #196]	@ (8003958 <HAL_UART_MspInit+0x294>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800389e:	4b2e      	ldr	r3, [pc, #184]	@ (8003958 <HAL_UART_MspInit+0x294>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003958 <HAL_UART_MspInit+0x294>)
 80038a4:	f043 0304 	orr.w	r3, r3, #4
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003958 <HAL_UART_MspInit+0x294>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038b6:	23c0      	movs	r3, #192	@ 0xc0
 80038b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80038ce:	2308      	movs	r3, #8
 80038d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80038d8:	4619      	mov	r1, r3
 80038da:	4825      	ldr	r0, [pc, #148]	@ (8003970 <HAL_UART_MspInit+0x2ac>)
 80038dc:	f000 ff68 	bl	80047b0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80038e0:	4b24      	ldr	r3, [pc, #144]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 80038e2:	4a25      	ldr	r2, [pc, #148]	@ (8003978 <HAL_UART_MspInit+0x2b4>)
 80038e4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80038e6:	4b23      	ldr	r3, [pc, #140]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 80038e8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80038ec:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ee:	4b21      	ldr	r3, [pc, #132]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 80038fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003900:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003902:	4b1c      	ldr	r3, [pc, #112]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 8003904:	2200      	movs	r2, #0
 8003906:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003908:	4b1a      	ldr	r3, [pc, #104]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 800390a:	2200      	movs	r2, #0
 800390c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800390e:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 8003910:	2200      	movs	r2, #0
 8003912:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003914:	4b17      	ldr	r3, [pc, #92]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 8003916:	2200      	movs	r2, #0
 8003918:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800391a:	4b16      	ldr	r3, [pc, #88]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 800391c:	2200      	movs	r2, #0
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003920:	4814      	ldr	r0, [pc, #80]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 8003922:	f000 fb3b 	bl	8003f9c <HAL_DMA_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800392c:	f7ff fbe2 	bl	80030f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a10      	ldr	r2, [pc, #64]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 8003934:	675a      	str	r2, [r3, #116]	@ 0x74
 8003936:	4a0f      	ldr	r2, [pc, #60]	@ (8003974 <HAL_UART_MspInit+0x2b0>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800393c:	2200      	movs	r2, #0
 800393e:	2100      	movs	r1, #0
 8003940:	2047      	movs	r0, #71	@ 0x47
 8003942:	f000 faf4 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003946:	2047      	movs	r0, #71	@ 0x47
 8003948:	f000 fb0d 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 800394c:	bf00      	nop
 800394e:	37b8      	adds	r7, #184	@ 0xb8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40004400 	.word	0x40004400
 8003958:	40023800 	.word	0x40023800
 800395c:	40020c00 	.word	0x40020c00
 8003960:	200005d8 	.word	0x200005d8
 8003964:	40026088 	.word	0x40026088
 8003968:	40004800 	.word	0x40004800
 800396c:	40011400 	.word	0x40011400
 8003970:	40020800 	.word	0x40020800
 8003974:	20000638 	.word	0x20000638
 8003978:	40026428 	.word	0x40026428

0800397c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b0ac      	sub	sp, #176	@ 0xb0
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003994:	f107 0318 	add.w	r3, r7, #24
 8003998:	2284      	movs	r2, #132	@ 0x84
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f007 fdbb 	bl	800b518 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039aa:	d159      	bne.n	8003a60 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80039ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039b8:	f107 0318 	add.w	r3, r7, #24
 80039bc:	4618      	mov	r0, r3
 80039be:	f002 fbb7 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80039c8:	f7ff fb94 	bl	80030f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039cc:	4b26      	ldr	r3, [pc, #152]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	4a25      	ldr	r2, [pc, #148]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d8:	4b23      	ldr	r3, [pc, #140]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80039e4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80039e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f8:	2303      	movs	r3, #3
 80039fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039fe:	230a      	movs	r3, #10
 8003a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4818      	ldr	r0, [pc, #96]	@ (8003a6c <HAL_PCD_MspInit+0xf0>)
 8003a0c:	f000 fed0 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4810      	ldr	r0, [pc, #64]	@ (8003a6c <HAL_PCD_MspInit+0xf0>)
 8003a2c:	f000 fec0 	bl	80047b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a30:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 8003a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a34:	4a0c      	ldr	r2, [pc, #48]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 8003a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3a:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4c:	4a06      	ldr	r2, [pc, #24]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 8003a4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a52:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a54:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <HAL_PCD_MspInit+0xec>)
 8003a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003a60:	bf00      	nop
 8003a62:	37b0      	adds	r7, #176	@ 0xb0
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020000 	.word	0x40020000

08003a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <NMI_Handler+0x4>

08003a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <HardFault_Handler+0x4>

08003a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <MemManage_Handler+0x4>

08003a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <BusFault_Handler+0x4>

08003a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <UsageFault_Handler+0x4>

08003a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac6:	f000 f913 	bl	8003cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ad4:	4802      	ldr	r0, [pc, #8]	@ (8003ae0 <DMA1_Stream5_IRQHandler+0x10>)
 8003ad6:	f000 fc01 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200005d8 	.word	0x200005d8

08003ae4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003ae8:	4802      	ldr	r0, [pc, #8]	@ (8003af4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003aea:	f004 fa65 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	2000035c 	.word	0x2000035c

08003af8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003afe:	f004 fa5b 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200003a8 	.word	0x200003a8

08003b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b10:	4802      	ldr	r0, [pc, #8]	@ (8003b1c <TIM2_IRQHandler+0x10>)
 8003b12:	f004 fa51 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200001e0 	.word	0x200001e0

08003b20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b24:	4802      	ldr	r0, [pc, #8]	@ (8003b30 <TIM3_IRQHandler+0x10>)
 8003b26:	f004 fa47 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2000022c 	.word	0x2000022c

08003b34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b38:	4802      	ldr	r0, [pc, #8]	@ (8003b44 <TIM4_IRQHandler+0x10>)
 8003b3a:	f004 fa3d 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000278 	.word	0x20000278

08003b48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b4c:	4802      	ldr	r0, [pc, #8]	@ (8003b58 <USART2_IRQHandler+0x10>)
 8003b4e:	f005 fad3 	bl	80090f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000440 	.word	0x20000440

08003b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003b60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003b64:	f001 f802 	bl	8004b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003b70:	4802      	ldr	r0, [pc, #8]	@ (8003b7c <DMA2_Stream1_IRQHandler+0x10>)
 8003b72:	f000 fbb3 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000638 	.word	0x20000638

08003b80 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003b84:	4802      	ldr	r0, [pc, #8]	@ (8003b90 <USART6_IRQHandler+0x10>)
 8003b86:	f005 fab7 	bl	80090f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000550 	.word	0x20000550

08003b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b9c:	4a14      	ldr	r2, [pc, #80]	@ (8003bf0 <_sbrk+0x5c>)
 8003b9e:	4b15      	ldr	r3, [pc, #84]	@ (8003bf4 <_sbrk+0x60>)
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ba8:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <_sbrk+0x64>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <_sbrk+0x64>)
 8003bb2:	4a12      	ldr	r2, [pc, #72]	@ (8003bfc <_sbrk+0x68>)
 8003bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bb6:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <_sbrk+0x64>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d207      	bcs.n	8003bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bc4:	f007 fcb0 	bl	800b528 <__errno>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	220c      	movs	r2, #12
 8003bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e009      	b.n	8003be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bd4:	4b08      	ldr	r3, [pc, #32]	@ (8003bf8 <_sbrk+0x64>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bda:	4b07      	ldr	r3, [pc, #28]	@ (8003bf8 <_sbrk+0x64>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	4a05      	ldr	r2, [pc, #20]	@ (8003bf8 <_sbrk+0x64>)
 8003be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20050000 	.word	0x20050000
 8003bf4:	00000400 	.word	0x00000400
 8003bf8:	20000d68 	.word	0x20000d68
 8003bfc:	20000ed8 	.word	0x20000ed8

08003c00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c04:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <SystemInit+0x20>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0a:	4a05      	ldr	r2, [pc, #20]	@ (8003c20 <SystemInit+0x20>)
 8003c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <Reset_Handler>:
 8003c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c5c <LoopFillZerobss+0xe>
 8003c28:	f7ff ffea 	bl	8003c00 <SystemInit>
 8003c2c:	480c      	ldr	r0, [pc, #48]	@ (8003c60 <LoopFillZerobss+0x12>)
 8003c2e:	490d      	ldr	r1, [pc, #52]	@ (8003c64 <LoopFillZerobss+0x16>)
 8003c30:	4a0d      	ldr	r2, [pc, #52]	@ (8003c68 <LoopFillZerobss+0x1a>)
 8003c32:	2300      	movs	r3, #0
 8003c34:	e002      	b.n	8003c3c <LoopCopyDataInit>

08003c36 <CopyDataInit>:
 8003c36:	58d4      	ldr	r4, [r2, r3]
 8003c38:	50c4      	str	r4, [r0, r3]
 8003c3a:	3304      	adds	r3, #4

08003c3c <LoopCopyDataInit>:
 8003c3c:	18c4      	adds	r4, r0, r3
 8003c3e:	428c      	cmp	r4, r1
 8003c40:	d3f9      	bcc.n	8003c36 <CopyDataInit>
 8003c42:	4a0a      	ldr	r2, [pc, #40]	@ (8003c6c <LoopFillZerobss+0x1e>)
 8003c44:	4c0a      	ldr	r4, [pc, #40]	@ (8003c70 <LoopFillZerobss+0x22>)
 8003c46:	2300      	movs	r3, #0
 8003c48:	e001      	b.n	8003c4e <LoopFillZerobss>

08003c4a <FillZerobss>:
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	3204      	adds	r2, #4

08003c4e <LoopFillZerobss>:
 8003c4e:	42a2      	cmp	r2, r4
 8003c50:	d3fb      	bcc.n	8003c4a <FillZerobss>
 8003c52:	f007 fc6f 	bl	800b534 <__libc_init_array>
 8003c56:	f7fe fb33 	bl	80022c0 <main>
 8003c5a:	4770      	bx	lr
 8003c5c:	20050000 	.word	0x20050000
 8003c60:	20000000 	.word	0x20000000
 8003c64:	200000c0 	.word	0x200000c0
 8003c68:	0800c550 	.word	0x0800c550
 8003c6c:	200000c0 	.word	0x200000c0
 8003c70:	20000ed8 	.word	0x20000ed8

08003c74 <ADC_IRQHandler>:
 8003c74:	e7fe      	b.n	8003c74 <ADC_IRQHandler>

08003c76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	f000 f94c 	bl	8003f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c80:	2000      	movs	r0, #0
 8003c82:	f000 f805 	bl	8003c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c86:	f7ff fa3b 	bl	8003100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c98:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <HAL_InitTick+0x54>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ce8 <HAL_InitTick+0x58>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f967 	bl	8003f82 <HAL_SYSTICK_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e00e      	b.n	8003cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d80a      	bhi.n	8003cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	f000 f92f 	bl	8003f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cd0:	4a06      	ldr	r2, [pc, #24]	@ (8003cec <HAL_InitTick+0x5c>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	2000004c 	.word	0x2000004c
 8003ce8:	20000054 	.word	0x20000054
 8003cec:	20000050 	.word	0x20000050

08003cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_IncTick+0x20>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_IncTick+0x24>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	4a04      	ldr	r2, [pc, #16]	@ (8003d14 <HAL_IncTick+0x24>)
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000054 	.word	0x20000054
 8003d14:	20000d6c 	.word	0x20000d6c

08003d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	@ (8003d2c <HAL_GetTick+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000d6c 	.word	0x20000d6c

08003d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7ff ffee 	bl	8003d18 <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d005      	beq.n	8003d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d74 <HAL_Delay+0x44>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d56:	bf00      	nop
 8003d58:	f7ff ffde 	bl	8003d18 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d8f7      	bhi.n	8003d58 <HAL_Delay+0x28>
  {
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000054 	.word	0x20000054

08003d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d88:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <__NVIC_SetPriorityGrouping+0x40>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d94:	4013      	ands	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003da0:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003da6:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <__NVIC_SetPriorityGrouping+0x40>)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	60d3      	str	r3, [r2, #12]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00
 8003dbc:	05fa0000 	.word	0x05fa0000

08003dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc4:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	f003 0307 	and.w	r3, r3, #7
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	db0b      	blt.n	8003e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	4907      	ldr	r1, [pc, #28]	@ (8003e14 <__NVIC_EnableIRQ+0x38>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	e000e100 	.word	0xe000e100

08003e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	6039      	str	r1, [r7, #0]
 8003e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	db0a      	blt.n	8003e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	490c      	ldr	r1, [pc, #48]	@ (8003e64 <__NVIC_SetPriority+0x4c>)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	0112      	lsls	r2, r2, #4
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e40:	e00a      	b.n	8003e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4908      	ldr	r1, [pc, #32]	@ (8003e68 <__NVIC_SetPriority+0x50>)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	3b04      	subs	r3, #4
 8003e50:	0112      	lsls	r2, r2, #4
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	440b      	add	r3, r1
 8003e56:	761a      	strb	r2, [r3, #24]
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000e100 	.word	0xe000e100
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	@ 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f1c3 0307 	rsb	r3, r3, #7
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	bf28      	it	cs
 8003e8a:	2304      	movcs	r3, #4
 8003e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3304      	adds	r3, #4
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d902      	bls.n	8003e9c <NVIC_EncodePriority+0x30>
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3b03      	subs	r3, #3
 8003e9a:	e000      	b.n	8003e9e <NVIC_EncodePriority+0x32>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	401a      	ands	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebe:	43d9      	mvns	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec4:	4313      	orrs	r3, r2
         );
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3724      	adds	r7, #36	@ 0x24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ee4:	d301      	bcc.n	8003eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e00f      	b.n	8003f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eea:	4a0a      	ldr	r2, [pc, #40]	@ (8003f14 <SysTick_Config+0x40>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef2:	210f      	movs	r1, #15
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	f7ff ff8e 	bl	8003e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <SysTick_Config+0x40>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f02:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <SysTick_Config+0x40>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	e000e010 	.word	0xe000e010

08003f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff29 	bl	8003d78 <__NVIC_SetPriorityGrouping>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f40:	f7ff ff3e 	bl	8003dc0 <__NVIC_GetPriorityGrouping>
 8003f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff ff8e 	bl	8003e6c <NVIC_EncodePriority>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff5d 	bl	8003e18 <__NVIC_SetPriority>
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff31 	bl	8003ddc <__NVIC_EnableIRQ>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ffa2 	bl	8003ed4 <SysTick_Config>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7ff feb6 	bl	8003d18 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e099      	b.n	80040ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fd8:	e00f      	b.n	8003ffa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fda:	f7ff fe9d 	bl	8003d18 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d908      	bls.n	8003ffa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e078      	b.n	80040ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e8      	bne.n	8003fda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4b38      	ldr	r3, [pc, #224]	@ (80040f4 <HAL_DMA_Init+0x158>)
 8004014:	4013      	ands	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	2b04      	cmp	r3, #4
 8004052:	d107      	bne.n	8004064 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	4313      	orrs	r3, r2
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	2b04      	cmp	r3, #4
 800408c:	d117      	bne.n	80040be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00e      	beq.n	80040be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb09 	bl	80046b8 <DMA_CheckFifoParam>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2240      	movs	r2, #64	@ 0x40
 80040b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80040ba:	2301      	movs	r3, #1
 80040bc:	e016      	b.n	80040ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fac0 	bl	800464c <DMA_CalcBaseAndBitshift>
 80040cc:	4603      	mov	r3, r0
 80040ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d4:	223f      	movs	r2, #63	@ 0x3f
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	f010803f 	.word	0xf010803f

080040f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_DMA_Start_IT+0x26>
 800411a:	2302      	movs	r3, #2
 800411c:	e048      	b.n	80041b0 <HAL_DMA_Start_IT+0xb8>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d137      	bne.n	80041a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fa52 	bl	80045f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004150:	223f      	movs	r2, #63	@ 0x3f
 8004152:	409a      	lsls	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0216 	orr.w	r2, r2, #22
 8004166:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004176:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0208 	orr.w	r2, r2, #8
 800418e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e005      	b.n	80041ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
 80041ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041c6:	f7ff fda7 	bl	8003d18 <HAL_GetTick>
 80041ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d008      	beq.n	80041ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2280      	movs	r2, #128	@ 0x80
 80041dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e052      	b.n	8004290 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0216 	bic.w	r2, r2, #22
 80041f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004208:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <HAL_DMA_Abort+0x62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0208 	bic.w	r2, r2, #8
 8004228:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800423a:	e013      	b.n	8004264 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800423c:	f7ff fd6c 	bl	8003d18 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b05      	cmp	r3, #5
 8004248:	d90c      	bls.n	8004264 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e015      	b.n	8004290 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e4      	bne.n	800423c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004276:	223f      	movs	r2, #63	@ 0x3f
 8004278:	409a      	lsls	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d004      	beq.n	80042b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00c      	b.n	80042d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2205      	movs	r2, #5
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80042e8:	4b8e      	ldr	r3, [pc, #568]	@ (8004524 <HAL_DMA_IRQHandler+0x248>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a8e      	ldr	r2, [pc, #568]	@ (8004528 <HAL_DMA_IRQHandler+0x24c>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0a9b      	lsrs	r3, r3, #10
 80042f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004306:	2208      	movs	r2, #8
 8004308:	409a      	lsls	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01a      	beq.n	8004348 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0204 	bic.w	r2, r2, #4
 800432e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004334:	2208      	movs	r2, #8
 8004336:	409a      	lsls	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434c:	2201      	movs	r2, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	2201      	movs	r2, #1
 800436c:	409a      	lsls	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004382:	2204      	movs	r2, #4
 8004384:	409a      	lsls	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00b      	beq.n	80043b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	2204      	movs	r2, #4
 80043a2:	409a      	lsls	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ac:	f043 0204 	orr.w	r2, r3, #4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	2210      	movs	r2, #16
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d043      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d03c      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d6:	2210      	movs	r2, #16
 80043d8:	409a      	lsls	r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d018      	beq.n	800441e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d024      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	e01f      	b.n	800444c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01b      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e016      	b.n	800444c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d107      	bne.n	800443c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0208 	bic.w	r2, r2, #8
 800443a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	2220      	movs	r2, #32
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 808f 	beq.w	800457c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8087 	beq.w	800457c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	2220      	movs	r2, #32
 8004474:	409a      	lsls	r2, r3
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b05      	cmp	r3, #5
 8004484:	d136      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0216 	bic.w	r2, r2, #22
 8004494:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d103      	bne.n	80044b6 <HAL_DMA_IRQHandler+0x1da>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0208 	bic.w	r2, r2, #8
 80044c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ca:	223f      	movs	r2, #63	@ 0x3f
 80044cc:	409a      	lsls	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d07e      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
        }
        return;
 80044f2:	e079      	b.n	80045e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01d      	beq.n	800453e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004514:	2b00      	cmp	r3, #0
 8004516:	d031      	beq.n	800457c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e02c      	b.n	800457c <HAL_DMA_IRQHandler+0x2a0>
 8004522:	bf00      	nop
 8004524:	2000004c 	.word	0x2000004c
 8004528:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d023      	beq.n	800457c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
 800453c:	e01e      	b.n	800457c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10f      	bne.n	800456c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0210 	bic.w	r2, r2, #16
 800455a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	2b00      	cmp	r3, #0
 8004582:	d032      	beq.n	80045ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d022      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2205      	movs	r2, #5
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	3301      	adds	r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d307      	bcc.n	80045c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f2      	bne.n	80045a8 <HAL_DMA_IRQHandler+0x2cc>
 80045c2:	e000      	b.n	80045c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
 80045e6:	e000      	b.n	80045ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80045e8:	bf00      	nop
    }
  }
}
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800460c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b40      	cmp	r3, #64	@ 0x40
 800461c:	d108      	bne.n	8004630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800462e:	e007      	b.n	8004640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	3b10      	subs	r3, #16
 800465c:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <DMA_CalcBaseAndBitshift+0x60>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004666:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <DMA_CalcBaseAndBitshift+0x64>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d908      	bls.n	800468c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004682:	4013      	ands	r3, r2
 8004684:	1d1a      	adds	r2, r3, #4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	659a      	str	r2, [r3, #88]	@ 0x58
 800468a:	e006      	b.n	800469a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	4b08      	ldr	r3, [pc, #32]	@ (80046b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	aaaaaaab 	.word	0xaaaaaaab
 80046b0:	0800c504 	.word	0x0800c504
 80046b4:	fffffc00 	.word	0xfffffc00

080046b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11f      	bne.n	8004712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d856      	bhi.n	8004786 <DMA_CheckFifoParam+0xce>
 80046d8:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <DMA_CheckFifoParam+0x28>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	08004703 	.word	0x08004703
 80046e8:	080046f1 	.word	0x080046f1
 80046ec:	08004787 	.word	0x08004787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d046      	beq.n	800478a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e043      	b.n	800478a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004706:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800470a:	d140      	bne.n	800478e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004710:	e03d      	b.n	800478e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471a:	d121      	bne.n	8004760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b03      	cmp	r3, #3
 8004720:	d837      	bhi.n	8004792 <DMA_CheckFifoParam+0xda>
 8004722:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <DMA_CheckFifoParam+0x70>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	08004739 	.word	0x08004739
 800472c:	0800473f 	.word	0x0800473f
 8004730:	08004739 	.word	0x08004739
 8004734:	08004751 	.word	0x08004751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e030      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d025      	beq.n	8004796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474e:	e022      	b.n	8004796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004758:	d11f      	bne.n	800479a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800475e:	e01c      	b.n	800479a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d903      	bls.n	800476e <DMA_CheckFifoParam+0xb6>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d003      	beq.n	8004774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800476c:	e018      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
      break;
 8004772:	e015      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e00b      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      break;
 8004786:	bf00      	nop
 8004788:	e00a      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 800478a:	bf00      	nop
 800478c:	e008      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 800478e:	bf00      	nop
 8004790:	e006      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004792:	bf00      	nop
 8004794:	e004      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 800479e:	bf00      	nop
    }
  } 
  
  return status; 
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop

080047b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	@ 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e175      	b.n	8004abc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	f040 8164 	bne.w	8004ab6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d005      	beq.n	8004806 <HAL_GPIO_Init+0x56>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d130      	bne.n	8004868 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	2203      	movs	r2, #3
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800483c:	2201      	movs	r2, #1
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 0201 	and.w	r2, r3, #1
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b03      	cmp	r3, #3
 8004872:	d017      	beq.n	80048a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d123      	bne.n	80048f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	08da      	lsrs	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	220f      	movs	r2, #15
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80be 	beq.w	8004ab6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493a:	4b66      	ldr	r3, [pc, #408]	@ (8004ad4 <HAL_GPIO_Init+0x324>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	4a65      	ldr	r2, [pc, #404]	@ (8004ad4 <HAL_GPIO_Init+0x324>)
 8004940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004944:	6453      	str	r3, [r2, #68]	@ 0x44
 8004946:	4b63      	ldr	r3, [pc, #396]	@ (8004ad4 <HAL_GPIO_Init+0x324>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004952:	4a61      	ldr	r2, [pc, #388]	@ (8004ad8 <HAL_GPIO_Init+0x328>)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	3302      	adds	r3, #2
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a58      	ldr	r2, [pc, #352]	@ (8004adc <HAL_GPIO_Init+0x32c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d037      	beq.n	80049ee <HAL_GPIO_Init+0x23e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a57      	ldr	r2, [pc, #348]	@ (8004ae0 <HAL_GPIO_Init+0x330>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d031      	beq.n	80049ea <HAL_GPIO_Init+0x23a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a56      	ldr	r2, [pc, #344]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02b      	beq.n	80049e6 <HAL_GPIO_Init+0x236>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a55      	ldr	r2, [pc, #340]	@ (8004ae8 <HAL_GPIO_Init+0x338>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d025      	beq.n	80049e2 <HAL_GPIO_Init+0x232>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a54      	ldr	r2, [pc, #336]	@ (8004aec <HAL_GPIO_Init+0x33c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01f      	beq.n	80049de <HAL_GPIO_Init+0x22e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a53      	ldr	r2, [pc, #332]	@ (8004af0 <HAL_GPIO_Init+0x340>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d019      	beq.n	80049da <HAL_GPIO_Init+0x22a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a52      	ldr	r2, [pc, #328]	@ (8004af4 <HAL_GPIO_Init+0x344>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_GPIO_Init+0x226>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a51      	ldr	r2, [pc, #324]	@ (8004af8 <HAL_GPIO_Init+0x348>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00d      	beq.n	80049d2 <HAL_GPIO_Init+0x222>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a50      	ldr	r2, [pc, #320]	@ (8004afc <HAL_GPIO_Init+0x34c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <HAL_GPIO_Init+0x21e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004b00 <HAL_GPIO_Init+0x350>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <HAL_GPIO_Init+0x21a>
 80049c6:	2309      	movs	r3, #9
 80049c8:	e012      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049ca:	230a      	movs	r3, #10
 80049cc:	e010      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049ce:	2308      	movs	r3, #8
 80049d0:	e00e      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049d2:	2307      	movs	r3, #7
 80049d4:	e00c      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049d6:	2306      	movs	r3, #6
 80049d8:	e00a      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049da:	2305      	movs	r3, #5
 80049dc:	e008      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049de:	2304      	movs	r3, #4
 80049e0:	e006      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049e2:	2303      	movs	r3, #3
 80049e4:	e004      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e002      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <HAL_GPIO_Init+0x240>
 80049ee:	2300      	movs	r3, #0
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	f002 0203 	and.w	r2, r2, #3
 80049f6:	0092      	lsls	r2, r2, #2
 80049f8:	4093      	lsls	r3, r2
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a00:	4935      	ldr	r1, [pc, #212]	@ (8004ad8 <HAL_GPIO_Init+0x328>)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	3302      	adds	r3, #2
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b04 <HAL_GPIO_Init+0x354>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a32:	4a34      	ldr	r2, [pc, #208]	@ (8004b04 <HAL_GPIO_Init+0x354>)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a38:	4b32      	ldr	r3, [pc, #200]	@ (8004b04 <HAL_GPIO_Init+0x354>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a5c:	4a29      	ldr	r2, [pc, #164]	@ (8004b04 <HAL_GPIO_Init+0x354>)
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a62:	4b28      	ldr	r3, [pc, #160]	@ (8004b04 <HAL_GPIO_Init+0x354>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a86:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <HAL_GPIO_Init+0x354>)
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <HAL_GPIO_Init+0x354>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ab0:	4a14      	ldr	r2, [pc, #80]	@ (8004b04 <HAL_GPIO_Init+0x354>)
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b0f      	cmp	r3, #15
 8004ac0:	f67f ae86 	bls.w	80047d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	3724      	adds	r7, #36	@ 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	40013800 	.word	0x40013800
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	40020400 	.word	0x40020400
 8004ae4:	40020800 	.word	0x40020800
 8004ae8:	40020c00 	.word	0x40020c00
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40021400 	.word	0x40021400
 8004af4:	40021800 	.word	0x40021800
 8004af8:	40021c00 	.word	0x40021c00
 8004afc:	40022000 	.word	0x40022000
 8004b00:	40022400 	.word	0x40022400
 8004b04:	40013c00 	.word	0x40013c00

08004b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	887b      	ldrh	r3, [r7, #2]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	e001      	b.n	8004b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
 8004b44:	4613      	mov	r3, r2
 8004b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b54:	e003      	b.n	8004b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b56:	887b      	ldrh	r3, [r7, #2]
 8004b58:	041a      	lsls	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	619a      	str	r2, [r3, #24]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b76:	4b08      	ldr	r3, [pc, #32]	@ (8004b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d006      	beq.n	8004b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b82:	4a05      	ldr	r2, [pc, #20]	@ (8004b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fb84 	bl	8002298 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40013c00 	.word	0x40013c00

08004b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e08b      	b.n	8004cc6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fe fac0 	bl	8003148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2224      	movs	r2, #36	@ 0x24
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004bec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d107      	bne.n	8004c16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	e006      	b.n	8004c24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d108      	bne.n	8004c3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c3a:	605a      	str	r2, [r3, #4]
 8004c3c:	e007      	b.n	8004c4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd0 <HAL_I2C_Init+0x134>)
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69d9      	ldr	r1, [r3, #28]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1a      	ldr	r2, [r3, #32]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	02008000 	.word	0x02008000

08004cd4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	817b      	strh	r3, [r7, #10]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	f040 80fd 	bne.w	8004ef0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_I2C_Master_Transmit+0x30>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e0f6      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x21e>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d0c:	f7ff f804 	bl	8003d18 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	2319      	movs	r3, #25
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f914 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0e1      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2221      	movs	r2, #33	@ 0x21
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2210      	movs	r2, #16
 8004d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	893a      	ldrh	r2, [r7, #8]
 8004d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2bff      	cmp	r3, #255	@ 0xff
 8004d5e:	d906      	bls.n	8004d6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	22ff      	movs	r2, #255	@ 0xff
 8004d64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004d66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e007      	b.n	8004d7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004d78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d024      	beq.n	8004dd0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	8979      	ldrh	r1, [r7, #10]
 8004dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8004efc <HAL_I2C_Master_Transmit+0x228>)
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fa83 	bl	80052d4 <I2C_TransferConfig>
 8004dce:	e066      	b.n	8004e9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	8979      	ldrh	r1, [r7, #10]
 8004dd8:	4b48      	ldr	r3, [pc, #288]	@ (8004efc <HAL_I2C_Master_Transmit+0x228>)
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fa78 	bl	80052d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004de4:	e05b      	b.n	8004e9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	6a39      	ldr	r1, [r7, #32]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f907 	bl	8004ffe <I2C_WaitOnTXISFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e07b      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d034      	beq.n	8004e9e <HAL_I2C_Master_Transmit+0x1ca>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d130      	bne.n	8004e9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2200      	movs	r2, #0
 8004e44:	2180      	movs	r1, #128	@ 0x80
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f880 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e04d      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2bff      	cmp	r3, #255	@ 0xff
 8004e5e:	d90e      	bls.n	8004e7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	22ff      	movs	r2, #255	@ 0xff
 8004e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	8979      	ldrh	r1, [r7, #10]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fa2c 	bl	80052d4 <I2C_TransferConfig>
 8004e7c:	e00f      	b.n	8004e9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	8979      	ldrh	r1, [r7, #10]
 8004e90:	2300      	movs	r3, #0
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fa1b 	bl	80052d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d19e      	bne.n	8004de6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	6a39      	ldr	r1, [r7, #32]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f8ed 	bl	800508c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e01a      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b0c      	ldr	r3, [pc, #48]	@ (8004f00 <HAL_I2C_Master_Transmit+0x22c>)
 8004ed0:	400b      	ands	r3, r1
 8004ed2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	e000      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004ef0:	2302      	movs	r3, #2
  }
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	80002000 	.word	0x80002000
 8004f00:	fe00e800 	.word	0xfe00e800

08004f04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d103      	bne.n	8004f22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d007      	beq.n	8004f40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	619a      	str	r2, [r3, #24]
  }
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f5c:	e03b      	b.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f8d6 	bl	8005114 <I2C_IsErrorOccurred>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e041      	b.n	8004ff6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d02d      	beq.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7a:	f7fe fecd 	bl	8003d18 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d122      	bne.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d113      	bne.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e00f      	b.n	8004ff6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699a      	ldr	r2, [r3, #24]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d0b4      	beq.n	8004f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800500a:	e033      	b.n	8005074 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f87f 	bl	8005114 <I2C_IsErrorOccurred>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e031      	b.n	8005084 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d025      	beq.n	8005074 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005028:	f7fe fe76 	bl	8003d18 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	429a      	cmp	r2, r3
 8005036:	d302      	bcc.n	800503e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11a      	bne.n	8005074 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d013      	beq.n	8005074 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e007      	b.n	8005084 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d1c4      	bne.n	800500c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005098:	e02f      	b.n	80050fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f838 	bl	8005114 <I2C_IsErrorOccurred>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e02d      	b.n	800510a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ae:	f7fe fe33 	bl	8003d18 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11a      	bne.n	80050fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d013      	beq.n	80050fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f043 0220 	orr.w	r2, r3, #32
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e007      	b.n	800510a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b20      	cmp	r3, #32
 8005106:	d1c8      	bne.n	800509a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	@ 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d068      	beq.n	8005212 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2210      	movs	r2, #16
 8005146:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005148:	e049      	b.n	80051de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d045      	beq.n	80051de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fe fde1 	bl	8003d18 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <I2C_IsErrorOccurred+0x54>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d13a      	bne.n	80051de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005172:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800517a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800518a:	d121      	bne.n	80051d0 <I2C_IsErrorOccurred+0xbc>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005192:	d01d      	beq.n	80051d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005194:	7cfb      	ldrb	r3, [r7, #19]
 8005196:	2b20      	cmp	r3, #32
 8005198:	d01a      	beq.n	80051d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051aa:	f7fe fdb5 	bl	8003d18 <HAL_GetTick>
 80051ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051b0:	e00e      	b.n	80051d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051b2:	f7fe fdb1 	bl	8003d18 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b19      	cmp	r3, #25
 80051be:	d907      	bls.n	80051d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	f043 0320 	orr.w	r3, r3, #32
 80051c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80051ce:	e006      	b.n	80051de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d1e9      	bne.n	80051b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d003      	beq.n	80051f4 <I2C_IsErrorOccurred+0xe0>
 80051ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0aa      	beq.n	800514a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2220      	movs	r2, #32
 8005202:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	f043 0304 	orr.w	r3, r3, #4
 800520a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00b      	beq.n	800523c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005234:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005256:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00b      	beq.n	8005280 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	f043 0302 	orr.w	r3, r3, #2
 800526e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005278:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01c      	beq.n	80052c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff fe3b 	bl	8004f04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b0d      	ldr	r3, [pc, #52]	@ (80052d0 <I2C_IsErrorOccurred+0x1bc>)
 800529a:	400b      	ands	r3, r1
 800529c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80052c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3728      	adds	r7, #40	@ 0x28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	fe00e800 	.word	0xfe00e800

080052d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	817b      	strh	r3, [r7, #10]
 80052e2:	4613      	mov	r3, r2
 80052e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052e6:	897b      	ldrh	r3, [r7, #10]
 80052e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052ec:	7a7b      	ldrb	r3, [r7, #9]
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005302:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	0d5b      	lsrs	r3, r3, #21
 800530e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005312:	4b08      	ldr	r3, [pc, #32]	@ (8005334 <I2C_TransferConfig+0x60>)
 8005314:	430b      	orrs	r3, r1
 8005316:	43db      	mvns	r3, r3
 8005318:	ea02 0103 	and.w	r1, r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	03ff63ff 	.word	0x03ff63ff

08005338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b20      	cmp	r3, #32
 800534c:	d138      	bne.n	80053c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005358:	2302      	movs	r3, #2
 800535a:	e032      	b.n	80053c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2224      	movs	r2, #36	@ 0x24
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800538a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	e000      	b.n	80053c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053c0:	2302      	movs	r3, #2
  }
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d139      	bne.n	8005458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e033      	b.n	800545a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2224      	movs	r2, #36	@ 0x24
 80053fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b086      	sub	sp, #24
 800546a:	af02      	add	r7, sp, #8
 800546c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e108      	b.n	800568a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe fa72 	bl	800397c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2203      	movs	r2, #3
 800549c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054a6:	d102      	bne.n	80054ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f004 ff9c 	bl	800a3f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7c1a      	ldrb	r2, [r3, #16]
 80054c0:	f88d 2000 	strb.w	r2, [sp]
 80054c4:	3304      	adds	r3, #4
 80054c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c8:	f004 ff38 	bl	800a33c <USB_CoreInit>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e0d5      	b.n	800568a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f004 ff94 	bl	800a412 <USB_SetCurrentMode>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0c6      	b.n	800568a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054fc:	2300      	movs	r3, #0
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e04a      	b.n	8005598 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005502:	7bfa      	ldrb	r2, [r7, #15]
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	3315      	adds	r3, #21
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005516:	7bfa      	ldrb	r2, [r7, #15]
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	3314      	adds	r3, #20
 8005526:	7bfa      	ldrb	r2, [r7, #15]
 8005528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800552a:	7bfa      	ldrb	r2, [r7, #15]
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	b298      	uxth	r0, r3
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	332e      	adds	r3, #46	@ 0x2e
 800553e:	4602      	mov	r2, r0
 8005540:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005542:	7bfa      	ldrb	r2, [r7, #15]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	3318      	adds	r3, #24
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005556:	7bfa      	ldrb	r2, [r7, #15]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	331c      	adds	r3, #28
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800556a:	7bfa      	ldrb	r2, [r7, #15]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	3320      	adds	r3, #32
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800557e:	7bfa      	ldrb	r2, [r7, #15]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	3324      	adds	r3, #36	@ 0x24
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	3301      	adds	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	791b      	ldrb	r3, [r3, #4]
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d3af      	bcc.n	8005502 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]
 80055a6:	e044      	b.n	8005632 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055a8:	7bfa      	ldrb	r2, [r7, #15]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055be:	7bfa      	ldrb	r2, [r7, #15]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80055d0:	7bfa      	ldrb	r2, [r7, #15]
 80055d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055d4:	7bfa      	ldrb	r2, [r7, #15]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	3301      	adds	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	791b      	ldrb	r3, [r3, #4]
 8005636:	7bfa      	ldrb	r2, [r7, #15]
 8005638:	429a      	cmp	r2, r3
 800563a:	d3b5      	bcc.n	80055a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	7c1a      	ldrb	r2, [r3, #16]
 8005644:	f88d 2000 	strb.w	r2, [sp]
 8005648:	3304      	adds	r3, #4
 800564a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800564c:	f004 ff2e 	bl	800a4ac <USB_DevInit>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e013      	b.n	800568a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	7b1b      	ldrb	r3, [r3, #12]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d102      	bne.n	800567e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f80b 	bl	8005694 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f005 f8e9 	bl	800a85a <USB_DevDisconnect>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056c2:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	10000003 	.word	0x10000003

080056dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056e0:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a04      	ldr	r2, [pc, #16]	@ (80056f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ea:	6013      	str	r3, [r2, #0]
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40007000 	.word	0x40007000

080056fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	4b23      	ldr	r3, [pc, #140]	@ (8005794 <HAL_PWREx_EnableOverDrive+0x98>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	4a22      	ldr	r2, [pc, #136]	@ (8005794 <HAL_PWREx_EnableOverDrive+0x98>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	@ 0x40
 8005712:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <HAL_PWREx_EnableOverDrive+0x98>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800571e:	4b1e      	ldr	r3, [pc, #120]	@ (8005798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1d      	ldr	r2, [pc, #116]	@ (8005798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005728:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800572a:	f7fe faf5 	bl	8003d18 <HAL_GetTick>
 800572e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005730:	e009      	b.n	8005746 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005732:	f7fe faf1 	bl	8003d18 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005740:	d901      	bls.n	8005746 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e022      	b.n	800578c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005746:	4b14      	ldr	r3, [pc, #80]	@ (8005798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800574e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005752:	d1ee      	bne.n	8005732 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005754:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0f      	ldr	r2, [pc, #60]	@ (8005798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800575a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005760:	f7fe fada 	bl	8003d18 <HAL_GetTick>
 8005764:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005766:	e009      	b.n	800577c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005768:	f7fe fad6 	bl	8003d18 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005776:	d901      	bls.n	800577c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e007      	b.n	800578c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800577c:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005788:	d1ee      	bne.n	8005768 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40023800 	.word	0x40023800
 8005798:	40007000 	.word	0x40007000

0800579c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e291      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8087 	beq.w	80058ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057c0:	4b96      	ldr	r3, [pc, #600]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d00c      	beq.n	80057e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057cc:	4b93      	ldr	r3, [pc, #588]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 030c 	and.w	r3, r3, #12
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d112      	bne.n	80057fe <HAL_RCC_OscConfig+0x62>
 80057d8:	4b90      	ldr	r3, [pc, #576]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057e4:	d10b      	bne.n	80057fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e6:	4b8d      	ldr	r3, [pc, #564]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d06c      	beq.n	80058cc <HAL_RCC_OscConfig+0x130>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d168      	bne.n	80058cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e26b      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005806:	d106      	bne.n	8005816 <HAL_RCC_OscConfig+0x7a>
 8005808:	4b84      	ldr	r3, [pc, #528]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a83      	ldr	r2, [pc, #524]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800580e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	e02e      	b.n	8005874 <HAL_RCC_OscConfig+0xd8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10c      	bne.n	8005838 <HAL_RCC_OscConfig+0x9c>
 800581e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a7e      	ldr	r2, [pc, #504]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b7c      	ldr	r3, [pc, #496]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a7b      	ldr	r2, [pc, #492]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e01d      	b.n	8005874 <HAL_RCC_OscConfig+0xd8>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005840:	d10c      	bne.n	800585c <HAL_RCC_OscConfig+0xc0>
 8005842:	4b76      	ldr	r3, [pc, #472]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a75      	ldr	r2, [pc, #468]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b73      	ldr	r3, [pc, #460]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a72      	ldr	r2, [pc, #456]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e00b      	b.n	8005874 <HAL_RCC_OscConfig+0xd8>
 800585c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a6e      	ldr	r2, [pc, #440]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	4b6c      	ldr	r3, [pc, #432]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a6b      	ldr	r2, [pc, #428]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800586e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d013      	beq.n	80058a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fe fa4c 	bl	8003d18 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005884:	f7fe fa48 	bl	8003d18 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	@ 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e21f      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005896:	4b61      	ldr	r3, [pc, #388]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0xe8>
 80058a2:	e014      	b.n	80058ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fe fa38 	bl	8003d18 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fe fa34 	bl	8003d18 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	@ 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e20b      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058be:	4b57      	ldr	r3, [pc, #348]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x110>
 80058ca:	e000      	b.n	80058ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d069      	beq.n	80059ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058da:	4b50      	ldr	r3, [pc, #320]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058e6:	4b4d      	ldr	r3, [pc, #308]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d11c      	bne.n	800592c <HAL_RCC_OscConfig+0x190>
 80058f2:	4b4a      	ldr	r3, [pc, #296]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d116      	bne.n	800592c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fe:	4b47      	ldr	r3, [pc, #284]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_RCC_OscConfig+0x17a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d001      	beq.n	8005916 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e1df      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005916:	4b41      	ldr	r3, [pc, #260]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	493d      	ldr	r1, [pc, #244]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005926:	4313      	orrs	r3, r2
 8005928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800592a:	e040      	b.n	80059ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d023      	beq.n	800597c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005934:	4b39      	ldr	r3, [pc, #228]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a38      	ldr	r2, [pc, #224]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fe f9ea 	bl	8003d18 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005948:	f7fe f9e6 	bl	8003d18 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e1bd      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595a:	4b30      	ldr	r3, [pc, #192]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005966:	4b2d      	ldr	r3, [pc, #180]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4929      	ldr	r1, [pc, #164]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
 800597a:	e018      	b.n	80059ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597c:	4b27      	ldr	r3, [pc, #156]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a26      	ldr	r2, [pc, #152]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fe f9c6 	bl	8003d18 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005990:	f7fe f9c2 	bl	8003d18 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e199      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d038      	beq.n	8005a2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d019      	beq.n	80059f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059c2:	4b16      	ldr	r3, [pc, #88]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80059c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059c6:	4a15      	ldr	r2, [pc, #84]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ce:	f7fe f9a3 	bl	8003d18 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d6:	f7fe f99f 	bl	8003d18 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e176      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059e8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80059ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x23a>
 80059f4:	e01a      	b.n	8005a2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f6:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80059f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059fa:	4a08      	ldr	r2, [pc, #32]	@ (8005a1c <HAL_RCC_OscConfig+0x280>)
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a02:	f7fe f989 	bl	8003d18 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a08:	e00a      	b.n	8005a20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0a:	f7fe f985 	bl	8003d18 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d903      	bls.n	8005a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e15c      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
 8005a1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a20:	4b91      	ldr	r3, [pc, #580]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ee      	bne.n	8005a0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80a4 	beq.w	8005b82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a46:	4b88      	ldr	r3, [pc, #544]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	4a87      	ldr	r2, [pc, #540]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a52:	4b85      	ldr	r3, [pc, #532]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5a:	60bb      	str	r3, [r7, #8]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a62:	4b82      	ldr	r3, [pc, #520]	@ (8005c6c <HAL_RCC_OscConfig+0x4d0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d118      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c6c <HAL_RCC_OscConfig+0x4d0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a7e      	ldr	r2, [pc, #504]	@ (8005c6c <HAL_RCC_OscConfig+0x4d0>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7a:	f7fe f94d 	bl	8003d18 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a82:	f7fe f949 	bl	8003d18 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b64      	cmp	r3, #100	@ 0x64
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e120      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a94:	4b75      	ldr	r3, [pc, #468]	@ (8005c6c <HAL_RCC_OscConfig+0x4d0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x31a>
 8005aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aac:	4a6e      	ldr	r2, [pc, #440]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ab4:	e02d      	b.n	8005b12 <HAL_RCC_OscConfig+0x376>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x33c>
 8005abe:	4b6a      	ldr	r3, [pc, #424]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	4a69      	ldr	r2, [pc, #420]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aca:	4b67      	ldr	r3, [pc, #412]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ace:	4a66      	ldr	r2, [pc, #408]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ad0:	f023 0304 	bic.w	r3, r3, #4
 8005ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad6:	e01c      	b.n	8005b12 <HAL_RCC_OscConfig+0x376>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	d10c      	bne.n	8005afa <HAL_RCC_OscConfig+0x35e>
 8005ae0:	4b61      	ldr	r3, [pc, #388]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae4:	4a60      	ldr	r2, [pc, #384]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ae6:	f043 0304 	orr.w	r3, r3, #4
 8005aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aec:	4b5e      	ldr	r3, [pc, #376]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af0:	4a5d      	ldr	r2, [pc, #372]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005af8:	e00b      	b.n	8005b12 <HAL_RCC_OscConfig+0x376>
 8005afa:	4b5b      	ldr	r3, [pc, #364]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afe:	4a5a      	ldr	r2, [pc, #360]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b06:	4b58      	ldr	r3, [pc, #352]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0a:	4a57      	ldr	r2, [pc, #348]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d015      	beq.n	8005b46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1a:	f7fe f8fd 	bl	8003d18 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b20:	e00a      	b.n	8005b38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fe f8f9 	bl	8003d18 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e0ce      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b38:	4b4b      	ldr	r3, [pc, #300]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0ee      	beq.n	8005b22 <HAL_RCC_OscConfig+0x386>
 8005b44:	e014      	b.n	8005b70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b46:	f7fe f8e7 	bl	8003d18 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4c:	e00a      	b.n	8005b64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4e:	f7fe f8e3 	bl	8003d18 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e0b8      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b64:	4b40      	ldr	r3, [pc, #256]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ee      	bne.n	8005b4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d105      	bne.n	8005b82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b76:	4b3c      	ldr	r3, [pc, #240]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b80:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80a4 	beq.w	8005cd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b8c:	4b36      	ldr	r3, [pc, #216]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 030c 	and.w	r3, r3, #12
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d06b      	beq.n	8005c70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d149      	bne.n	8005c34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba0:	4b31      	ldr	r3, [pc, #196]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a30      	ldr	r2, [pc, #192]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fe f8b4 	bl	8003d18 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fe f8b0 	bl	8003d18 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e087      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc6:	4b28      	ldr	r3, [pc, #160]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	019b      	lsls	r3, r3, #6
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	3b01      	subs	r3, #1
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	061b      	lsls	r3, r3, #24
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005bfa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bfe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c00:	4b19      	ldr	r3, [pc, #100]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a18      	ldr	r2, [pc, #96]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fe f884 	bl	8003d18 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c14:	f7fe f880 	bl	8003d18 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e057      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c26:	4b10      	ldr	r3, [pc, #64]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x478>
 8005c32:	e04f      	b.n	8005cd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c34:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0b      	ldr	r2, [pc, #44]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fe f86a 	bl	8003d18 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c48:	f7fe f866 	bl	8003d18 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e03d      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c5a:	4b03      	ldr	r3, [pc, #12]	@ (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f0      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4ac>
 8005c66:	e035      	b.n	8005cd4 <HAL_RCC_OscConfig+0x538>
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <HAL_RCC_OscConfig+0x544>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d028      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d121      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d11a      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ca6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d111      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800

08005ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0d0      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d910      	bls.n	8005d2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 020f 	bic.w	r2, r3, #15
 8005d12:	4965      	ldr	r1, [pc, #404]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b63      	ldr	r3, [pc, #396]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0b8      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d44:	4b59      	ldr	r3, [pc, #356]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a58      	ldr	r2, [pc, #352]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005d4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d5c:	4b53      	ldr	r3, [pc, #332]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	4a52      	ldr	r2, [pc, #328]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005d62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d68:	4b50      	ldr	r3, [pc, #320]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	494d      	ldr	r1, [pc, #308]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d040      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8e:	4b47      	ldr	r3, [pc, #284]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d115      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e07f      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d107      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da6:	4b41      	ldr	r3, [pc, #260]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e073      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db6:	4b3d      	ldr	r3, [pc, #244]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e06b      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dc6:	4b39      	ldr	r3, [pc, #228]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f023 0203 	bic.w	r2, r3, #3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	4936      	ldr	r1, [pc, #216]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd8:	f7fd ff9e 	bl	8003d18 <HAL_GetTick>
 8005ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dde:	e00a      	b.n	8005df6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de0:	f7fd ff9a 	bl	8003d18 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e053      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df6:	4b2d      	ldr	r3, [pc, #180]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 020c 	and.w	r2, r3, #12
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d1eb      	bne.n	8005de0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e08:	4b27      	ldr	r3, [pc, #156]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d210      	bcs.n	8005e38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e16:	4b24      	ldr	r3, [pc, #144]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 020f 	bic.w	r2, r3, #15
 8005e1e:	4922      	ldr	r1, [pc, #136]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e26:	4b20      	ldr	r3, [pc, #128]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e032      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e44:	4b19      	ldr	r3, [pc, #100]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4916      	ldr	r1, [pc, #88]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e62:	4b12      	ldr	r3, [pc, #72]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	490e      	ldr	r1, [pc, #56]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e76:	f000 f821 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	490a      	ldr	r1, [pc, #40]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1cc>)
 8005e88:	5ccb      	ldrb	r3, [r1, r3]
 8005e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8e:	4a09      	ldr	r2, [pc, #36]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1d0>)
 8005e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e92:	4b09      	ldr	r3, [pc, #36]	@ (8005eb8 <HAL_RCC_ClockConfig+0x1d4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fd fefa 	bl	8003c90 <HAL_InitTick>

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40023c00 	.word	0x40023c00
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	0800c4ec 	.word	0x0800c4ec
 8005eb4:	2000004c 	.word	0x2000004c
 8005eb8:	20000050 	.word	0x20000050

08005ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ec0:	b094      	sub	sp, #80	@ 0x50
 8005ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ec8:	2300      	movs	r3, #0
 8005eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ecc:	2300      	movs	r3, #0
 8005ece:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ed4:	4b79      	ldr	r3, [pc, #484]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 030c 	and.w	r3, r3, #12
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d00d      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x40>
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	f200 80e1 	bhi.w	80060a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eee:	e0db      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ef0:	4b73      	ldr	r3, [pc, #460]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ef4:	e0db      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ef6:	4b73      	ldr	r3, [pc, #460]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005efa:	e0d8      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005efc:	4b6f      	ldr	r3, [pc, #444]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f06:	4b6d      	ldr	r3, [pc, #436]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d063      	beq.n	8005fda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f12:	4b6a      	ldr	r3, [pc, #424]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	099b      	lsrs	r3, r3, #6
 8005f18:	2200      	movs	r2, #0
 8005f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f26:	2300      	movs	r3, #0
 8005f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f2e:	4622      	mov	r2, r4
 8005f30:	462b      	mov	r3, r5
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f04f 0100 	mov.w	r1, #0
 8005f3a:	0159      	lsls	r1, r3, #5
 8005f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f40:	0150      	lsls	r0, r2, #5
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4621      	mov	r1, r4
 8005f48:	1a51      	subs	r1, r2, r1
 8005f4a:	6139      	str	r1, [r7, #16]
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f60:	4659      	mov	r1, fp
 8005f62:	018b      	lsls	r3, r1, #6
 8005f64:	4651      	mov	r1, sl
 8005f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f6a:	4651      	mov	r1, sl
 8005f6c:	018a      	lsls	r2, r1, #6
 8005f6e:	4651      	mov	r1, sl
 8005f70:	ebb2 0801 	subs.w	r8, r2, r1
 8005f74:	4659      	mov	r1, fp
 8005f76:	eb63 0901 	sbc.w	r9, r3, r1
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f8e:	4690      	mov	r8, r2
 8005f90:	4699      	mov	r9, r3
 8005f92:	4623      	mov	r3, r4
 8005f94:	eb18 0303 	adds.w	r3, r8, r3
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	eb49 0303 	adc.w	r3, r9, r3
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fae:	4629      	mov	r1, r5
 8005fb0:	024b      	lsls	r3, r1, #9
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fb8:	4621      	mov	r1, r4
 8005fba:	024a      	lsls	r2, r1, #9
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fcc:	f7fa f978 	bl	80002c0 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd8:	e058      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fda:	4b38      	ldr	r3, [pc, #224]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	099b      	lsrs	r3, r3, #6
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fea:	623b      	str	r3, [r7, #32]
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	f04f 0000 	mov.w	r0, #0
 8005ffc:	f04f 0100 	mov.w	r1, #0
 8006000:	0159      	lsls	r1, r3, #5
 8006002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006006:	0150      	lsls	r0, r2, #5
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4641      	mov	r1, r8
 800600e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006012:	4649      	mov	r1, r9
 8006014:	eb63 0b01 	sbc.w	fp, r3, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006024:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006028:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800602c:	ebb2 040a 	subs.w	r4, r2, sl
 8006030:	eb63 050b 	sbc.w	r5, r3, fp
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	00eb      	lsls	r3, r5, #3
 800603e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006042:	00e2      	lsls	r2, r4, #3
 8006044:	4614      	mov	r4, r2
 8006046:	461d      	mov	r5, r3
 8006048:	4643      	mov	r3, r8
 800604a:	18e3      	adds	r3, r4, r3
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	464b      	mov	r3, r9
 8006050:	eb45 0303 	adc.w	r3, r5, r3
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006062:	4629      	mov	r1, r5
 8006064:	028b      	lsls	r3, r1, #10
 8006066:	4621      	mov	r1, r4
 8006068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800606c:	4621      	mov	r1, r4
 800606e:	028a      	lsls	r2, r1, #10
 8006070:	4610      	mov	r0, r2
 8006072:	4619      	mov	r1, r3
 8006074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006076:	2200      	movs	r2, #0
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	61fa      	str	r2, [r7, #28]
 800607c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006080:	f7fa f91e 	bl	80002c0 <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4613      	mov	r3, r2
 800608a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800608c:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	0c1b      	lsrs	r3, r3, #16
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	3301      	adds	r3, #1
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800609c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800609e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060a6:	e002      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060a8:	4b05      	ldr	r3, [pc, #20]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80060aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3750      	adds	r7, #80	@ 0x50
 80060b4:	46bd      	mov	sp, r7
 80060b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	007a1200 	.word	0x007a1200

080060c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060cc:	4b03      	ldr	r3, [pc, #12]	@ (80060dc <HAL_RCC_GetHCLKFreq+0x14>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000004c 	.word	0x2000004c

080060e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060e4:	f7ff fff0 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 80060e8:	4602      	mov	r2, r0
 80060ea:	4b05      	ldr	r3, [pc, #20]	@ (8006100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	0a9b      	lsrs	r3, r3, #10
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	4903      	ldr	r1, [pc, #12]	@ (8006104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f6:	5ccb      	ldrb	r3, [r1, r3]
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40023800 	.word	0x40023800
 8006104:	0800c4fc 	.word	0x0800c4fc

08006108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800610c:	f7ff ffdc 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 8006110:	4602      	mov	r2, r0
 8006112:	4b05      	ldr	r3, [pc, #20]	@ (8006128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	0b5b      	lsrs	r3, r3, #13
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	4903      	ldr	r1, [pc, #12]	@ (800612c <HAL_RCC_GetPCLK2Freq+0x24>)
 800611e:	5ccb      	ldrb	r3, [r1, r3]
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40023800 	.word	0x40023800
 800612c:	0800c4fc 	.word	0x0800c4fc

08006130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d012      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006158:	4b69      	ldr	r3, [pc, #420]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4a68      	ldr	r2, [pc, #416]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006162:	6093      	str	r3, [r2, #8]
 8006164:	4b66      	ldr	r3, [pc, #408]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616c:	4964      	ldr	r1, [pc, #400]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800617a:	2301      	movs	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d017      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800618a:	4b5d      	ldr	r3, [pc, #372]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006190:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006198:	4959      	ldr	r1, [pc, #356]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061a8:	d101      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80061b6:	2301      	movs	r3, #1
 80061b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d017      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	494a      	ldr	r1, [pc, #296]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061e4:	d101      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061f2:	2301      	movs	r3, #1
 80061f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006202:	2301      	movs	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 808b 	beq.w	800632a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006214:	4b3a      	ldr	r3, [pc, #232]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	4a39      	ldr	r2, [pc, #228]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800621e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006220:	4b37      	ldr	r3, [pc, #220]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800622c:	4b35      	ldr	r3, [pc, #212]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a34      	ldr	r2, [pc, #208]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006238:	f7fd fd6e 	bl	8003d18 <HAL_GetTick>
 800623c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006240:	f7fd fd6a 	bl	8003d18 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	@ 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e357      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006252:	4b2c      	ldr	r3, [pc, #176]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800625e:	4b28      	ldr	r3, [pc, #160]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006266:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d035      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	429a      	cmp	r2, r3
 800627a:	d02e      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800627c:	4b20      	ldr	r3, [pc, #128]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006284:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006286:	4b1e      	ldr	r3, [pc, #120]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628a:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006290:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006292:	4b1b      	ldr	r3, [pc, #108]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006296:	4a1a      	ldr	r2, [pc, #104]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800629c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800629e:	4a18      	ldr	r2, [pc, #96]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062a4:	4b16      	ldr	r3, [pc, #88]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d114      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fd fd32 	bl	8003d18 <HAL_GetTick>
 80062b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b6:	e00a      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b8:	f7fd fd2e 	bl	8003d18 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d901      	bls.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e319      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0ee      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e6:	d111      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80062e8:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80062f4:	4b04      	ldr	r3, [pc, #16]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062f6:	400b      	ands	r3, r1
 80062f8:	4901      	ldr	r1, [pc, #4]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
 80062fe:	e00b      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006300:	40023800 	.word	0x40023800
 8006304:	40007000 	.word	0x40007000
 8006308:	0ffffcff 	.word	0x0ffffcff
 800630c:	4baa      	ldr	r3, [pc, #680]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4aa9      	ldr	r2, [pc, #676]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006312:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006316:	6093      	str	r3, [r2, #8]
 8006318:	4ba7      	ldr	r3, [pc, #668]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800631a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006324:	49a4      	ldr	r1, [pc, #656]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006326:	4313      	orrs	r3, r2
 8006328:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006336:	4ba0      	ldr	r3, [pc, #640]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800633c:	4a9e      	ldr	r2, [pc, #632]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800633e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006346:	4b9c      	ldr	r3, [pc, #624]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006348:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006350:	4999      	ldr	r1, [pc, #612]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006364:	4b94      	ldr	r3, [pc, #592]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006372:	4991      	ldr	r1, [pc, #580]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006386:	4b8c      	ldr	r3, [pc, #560]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006394:	4988      	ldr	r1, [pc, #544]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063a8:	4b83      	ldr	r3, [pc, #524]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063b6:	4980      	ldr	r1, [pc, #512]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063ca:	4b7b      	ldr	r3, [pc, #492]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d8:	4977      	ldr	r1, [pc, #476]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063ec:	4b72      	ldr	r3, [pc, #456]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f2:	f023 0203 	bic.w	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	496f      	ldr	r1, [pc, #444]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800640e:	4b6a      	ldr	r3, [pc, #424]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006414:	f023 020c 	bic.w	r2, r3, #12
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641c:	4966      	ldr	r1, [pc, #408]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006430:	4b61      	ldr	r3, [pc, #388]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006436:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643e:	495e      	ldr	r1, [pc, #376]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006452:	4b59      	ldr	r3, [pc, #356]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006458:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006460:	4955      	ldr	r1, [pc, #340]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006474:	4b50      	ldr	r3, [pc, #320]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	494d      	ldr	r1, [pc, #308]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006496:	4b48      	ldr	r3, [pc, #288]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a4:	4944      	ldr	r1, [pc, #272]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80064b8:	4b3f      	ldr	r3, [pc, #252]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c6:	493c      	ldr	r1, [pc, #240]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064da:	4b37      	ldr	r3, [pc, #220]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e8:	4933      	ldr	r1, [pc, #204]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064fc:	4b2e      	ldr	r3, [pc, #184]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006502:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800650a:	492b      	ldr	r1, [pc, #172]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d011      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800651e:	4b26      	ldr	r3, [pc, #152]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006524:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800652c:	4922      	ldr	r1, [pc, #136]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800653c:	d101      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800653e:	2301      	movs	r3, #1
 8006540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800654e:	2301      	movs	r3, #1
 8006550:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800655e:	4b16      	ldr	r3, [pc, #88]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006564:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656c:	4912      	ldr	r1, [pc, #72]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006580:	4b0d      	ldr	r3, [pc, #52]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006586:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006590:	4909      	ldr	r1, [pc, #36]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d006      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80d9 	beq.w	800675e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065ac:	4b02      	ldr	r3, [pc, #8]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a01      	ldr	r2, [pc, #4]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065b6:	e001      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80065b8:	40023800 	.word	0x40023800
 80065bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065be:	f7fd fbab 	bl	8003d18 <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065c4:	e008      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065c6:	f7fd fba7 	bl	8003d18 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b64      	cmp	r3, #100	@ 0x64
 80065d2:	d901      	bls.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e194      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065d8:	4b6c      	ldr	r3, [pc, #432]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f0      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d021      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11d      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065f8:	4b64      	ldr	r3, [pc, #400]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006606:	4b61      	ldr	r3, [pc, #388]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800660c:	0e1b      	lsrs	r3, r3, #24
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	019a      	lsls	r2, r3, #6
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	431a      	orrs	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	061b      	lsls	r3, r3, #24
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	071b      	lsls	r3, r3, #28
 800662c:	4957      	ldr	r1, [pc, #348]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006644:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006648:	d00a      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006652:	2b00      	cmp	r3, #0
 8006654:	d02e      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800665e:	d129      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006660:	4b4a      	ldr	r3, [pc, #296]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006666:	0c1b      	lsrs	r3, r3, #16
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800666e:	4b47      	ldr	r3, [pc, #284]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006674:	0f1b      	lsrs	r3, r3, #28
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	019a      	lsls	r2, r3, #6
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	431a      	orrs	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	071b      	lsls	r3, r3, #28
 8006694:	493d      	ldr	r1, [pc, #244]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800669c:	4b3b      	ldr	r3, [pc, #236]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066a2:	f023 021f 	bic.w	r2, r3, #31
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	3b01      	subs	r3, #1
 80066ac:	4937      	ldr	r1, [pc, #220]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01d      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80066c0:	4b32      	ldr	r3, [pc, #200]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066c6:	0e1b      	lsrs	r3, r3, #24
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066ce:	4b2f      	ldr	r3, [pc, #188]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d4:	0f1b      	lsrs	r3, r3, #28
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	019a      	lsls	r2, r3, #6
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	431a      	orrs	r2, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	431a      	orrs	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	071b      	lsls	r3, r3, #28
 80066f4:	4925      	ldr	r1, [pc, #148]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d011      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	019a      	lsls	r2, r3, #6
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	061b      	lsls	r3, r3, #24
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	071b      	lsls	r3, r3, #28
 8006724:	4919      	ldr	r1, [pc, #100]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800672c:	4b17      	ldr	r3, [pc, #92]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a16      	ldr	r2, [pc, #88]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006738:	f7fd faee 	bl	8003d18 <HAL_GetTick>
 800673c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006740:	f7fd faea 	bl	8003d18 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	@ 0x64
 800674c:	d901      	bls.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0d7      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006752:	4b0e      	ldr	r3, [pc, #56]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0f0      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b01      	cmp	r3, #1
 8006762:	f040 80cd 	bne.w	8006900 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006766:	4b09      	ldr	r3, [pc, #36]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a08      	ldr	r2, [pc, #32]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800676c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006772:	f7fd fad1 	bl	8003d18 <HAL_GetTick>
 8006776:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006778:	e00a      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800677a:	f7fd facd 	bl	8003d18 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b64      	cmp	r3, #100	@ 0x64
 8006786:	d903      	bls.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e0ba      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800678c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006790:	4b5e      	ldr	r3, [pc, #376]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800679c:	d0ed      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02e      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d12a      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067c6:	4b51      	ldr	r3, [pc, #324]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067d4:	4b4d      	ldr	r3, [pc, #308]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067da:	0f1b      	lsrs	r3, r3, #28
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	019a      	lsls	r2, r3, #6
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	061b      	lsls	r3, r3, #24
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	071b      	lsls	r3, r3, #28
 80067fa:	4944      	ldr	r1, [pc, #272]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006802:	4b42      	ldr	r3, [pc, #264]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006808:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	3b01      	subs	r3, #1
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	493d      	ldr	r1, [pc, #244]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d022      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800682c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006830:	d11d      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006832:	4b36      	ldr	r3, [pc, #216]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006838:	0e1b      	lsrs	r3, r3, #24
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006840:	4b32      	ldr	r3, [pc, #200]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006846:	0f1b      	lsrs	r3, r3, #28
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	019a      	lsls	r2, r3, #6
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	431a      	orrs	r2, r3
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	431a      	orrs	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	071b      	lsls	r3, r3, #28
 8006866:	4929      	ldr	r1, [pc, #164]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d028      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800687a:	4b24      	ldr	r3, [pc, #144]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006880:	0e1b      	lsrs	r3, r3, #24
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006888:	4b20      	ldr	r3, [pc, #128]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	019a      	lsls	r2, r3, #6
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	431a      	orrs	r2, r3
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	061b      	lsls	r3, r3, #24
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	071b      	lsls	r3, r3, #28
 80068ae:	4917      	ldr	r1, [pc, #92]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068b6:	4b15      	ldr	r3, [pc, #84]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	4911      	ldr	r1, [pc, #68]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068cc:	4b0f      	ldr	r3, [pc, #60]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0e      	ldr	r2, [pc, #56]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d8:	f7fd fa1e 	bl	8003d18 <HAL_GetTick>
 80068dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068e0:	f7fd fa1a 	bl	8003d18 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b64      	cmp	r3, #100	@ 0x64
 80068ec:	d901      	bls.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e007      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068fe:	d1ef      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40023800 	.word	0x40023800

08006910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e09d      	b.n	8006a5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	d108      	bne.n	800693c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006932:	d009      	beq.n	8006948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	61da      	str	r2, [r3, #28]
 800693a:	e005      	b.n	8006948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fc fc50 	bl	8003208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800697e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006988:	d902      	bls.n	8006990 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	e002      	b.n	8006996 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006994:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800699e:	d007      	beq.n	80069b0 <HAL_SPI_Init+0xa0>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069a8:	d002      	beq.n	80069b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f2:	ea42 0103 	orr.w	r1, r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	f003 0204 	and.w	r2, r3, #4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a2c:	ea42 0103 	orr.w	r1, r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b088      	sub	sp, #32
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	4613      	mov	r3, r2
 8006a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_SPI_Transmit+0x22>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e15f      	b.n	8006d48 <HAL_SPI_Transmit+0x2e2>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a90:	f7fd f942 	bl	8003d18 <HAL_GetTick>
 8006a94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d002      	beq.n	8006aac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006aaa:	e148      	b.n	8006d3e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_SPI_Transmit+0x52>
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006abc:	e13f      	b.n	8006d3e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	88fa      	ldrh	r2, [r7, #6]
 8006ad6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b08:	d10f      	bne.n	8006b2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b34:	2b40      	cmp	r3, #64	@ 0x40
 8006b36:	d007      	beq.n	8006b48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b50:	d94f      	bls.n	8006bf2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_Transmit+0xfa>
 8006b5a:	8afb      	ldrh	r3, [r7, #22]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d142      	bne.n	8006be6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	881a      	ldrh	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b70:	1c9a      	adds	r2, r3, #2
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b84:	e02f      	b.n	8006be6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d112      	bne.n	8006bba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	881a      	ldrh	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba4:	1c9a      	adds	r2, r3, #2
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bb8:	e015      	b.n	8006be6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bba:	f7fd f8ad 	bl	8003d18 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d803      	bhi.n	8006bd2 <HAL_SPI_Transmit+0x16c>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd0:	d102      	bne.n	8006bd8 <HAL_SPI_Transmit+0x172>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006be4:	e0ab      	b.n	8006d3e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1ca      	bne.n	8006b86 <HAL_SPI_Transmit+0x120>
 8006bf0:	e080      	b.n	8006cf4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_SPI_Transmit+0x19a>
 8006bfa:	8afb      	ldrh	r3, [r7, #22]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d174      	bne.n	8006cea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d912      	bls.n	8006c30 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0e:	881a      	ldrh	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1a:	1c9a      	adds	r2, r3, #2
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b02      	subs	r3, #2
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c2e:	e05c      	b.n	8006cea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c56:	e048      	b.n	8006cea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d12b      	bne.n	8006cbe <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d912      	bls.n	8006c96 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c74:	881a      	ldrh	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c80:	1c9a      	adds	r2, r3, #2
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	3b02      	subs	r3, #2
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c94:	e029      	b.n	8006cea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	330c      	adds	r3, #12
 8006ca0:	7812      	ldrb	r2, [r2, #0]
 8006ca2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006cbc:	e015      	b.n	8006cea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cbe:	f7fd f82b 	bl	8003d18 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d803      	bhi.n	8006cd6 <HAL_SPI_Transmit+0x270>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd4:	d102      	bne.n	8006cdc <HAL_SPI_Transmit+0x276>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d106      	bne.n	8006cea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006ce8:	e029      	b.n	8006d3e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1b1      	bne.n	8006c58 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fb69 	bl	80073d0 <SPI_EndRxTxTransaction>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d12:	2300      	movs	r3, #0
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e003      	b.n	8006d3e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	@ 0x28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x26>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e20a      	b.n	800718c <HAL_SPI_TransmitReceive+0x43c>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d7e:	f7fc ffcb 	bl	8003d18 <HAL_GetTick>
 8006d82:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d8a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d92:	887b      	ldrh	r3, [r7, #2]
 8006d94:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d96:	887b      	ldrh	r3, [r7, #2]
 8006d98:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d9a:	7efb      	ldrb	r3, [r7, #27]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d00e      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x6e>
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006da6:	d106      	bne.n	8006db6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <HAL_SPI_TransmitReceive+0x66>
 8006db0:	7efb      	ldrb	r3, [r7, #27]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d003      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006db6:	2302      	movs	r3, #2
 8006db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006dbc:	e1e0      	b.n	8007180 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_SPI_TransmitReceive+0x80>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_SPI_TransmitReceive+0x80>
 8006dca:	887b      	ldrh	r3, [r7, #2]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006dd6:	e1d3      	b.n	8007180 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d003      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2205      	movs	r2, #5
 8006de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	887a      	ldrh	r2, [r7, #2]
 8006dfc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	887a      	ldrh	r2, [r7, #2]
 8006e04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	887a      	ldrh	r2, [r7, #2]
 8006e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	887a      	ldrh	r2, [r7, #2]
 8006e18:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e2e:	d802      	bhi.n	8006e36 <HAL_SPI_TransmitReceive+0xe6>
 8006e30:	8a3b      	ldrh	r3, [r7, #16]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d908      	bls.n	8006e48 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e44:	605a      	str	r2, [r3, #4]
 8006e46:	e007      	b.n	8006e58 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e62:	2b40      	cmp	r3, #64	@ 0x40
 8006e64:	d007      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e7e:	f240 8081 	bls.w	8006f84 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_SPI_TransmitReceive+0x140>
 8006e8a:	8a7b      	ldrh	r3, [r7, #18]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d16d      	bne.n	8006f6c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e94:	881a      	ldrh	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea0:	1c9a      	adds	r2, r3, #2
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eb4:	e05a      	b.n	8006f6c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d11b      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x1ac>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d016      	beq.n	8006efc <HAL_SPI_TransmitReceive+0x1ac>
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d113      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed8:	881a      	ldrh	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee4:	1c9a      	adds	r2, r3, #2
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d11c      	bne.n	8006f44 <HAL_SPI_TransmitReceive+0x1f4>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d016      	beq.n	8006f44 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f20:	b292      	uxth	r2, r2
 8006f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f28:	1c9a      	adds	r2, r3, #2
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f40:	2301      	movs	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f44:	f7fc fee8 	bl	8003d18 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d80b      	bhi.n	8006f6c <HAL_SPI_TransmitReceive+0x21c>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5a:	d007      	beq.n	8006f6c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006f6a:	e109      	b.n	8007180 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d19f      	bne.n	8006eb6 <HAL_SPI_TransmitReceive+0x166>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d199      	bne.n	8006eb6 <HAL_SPI_TransmitReceive+0x166>
 8006f82:	e0e3      	b.n	800714c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x244>
 8006f8c:	8a7b      	ldrh	r3, [r7, #18]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	f040 80cf 	bne.w	8007132 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d912      	bls.n	8006fc4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa2:	881a      	ldrh	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b02      	subs	r3, #2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fc2:	e0b6      	b.n	8007132 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fea:	e0a2      	b.n	8007132 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d134      	bne.n	8007064 <HAL_SPI_TransmitReceive+0x314>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d02f      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x314>
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	2b01      	cmp	r3, #1
 8007008:	d12c      	bne.n	8007064 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d912      	bls.n	800703a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b02      	subs	r3, #2
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007038:	e012      	b.n	8007060 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	7812      	ldrb	r2, [r2, #0]
 8007046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b01      	cmp	r3, #1
 8007070:	d148      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x3b4>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d042      	beq.n	8007104 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d923      	bls.n	80070d2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007094:	b292      	uxth	r2, r2
 8007096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	1c9a      	adds	r2, r3, #2
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b02      	subs	r3, #2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d81f      	bhi.n	8007100 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070ce:	605a      	str	r2, [r3, #4]
 80070d0:	e016      	b.n	8007100 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f103 020c 	add.w	r2, r3, #12
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007100:	2301      	movs	r3, #1
 8007102:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007104:	f7fc fe08 	bl	8003d18 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007110:	429a      	cmp	r2, r3
 8007112:	d803      	bhi.n	800711c <HAL_SPI_TransmitReceive+0x3cc>
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	d102      	bne.n	8007122 <HAL_SPI_TransmitReceive+0x3d2>
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	2b00      	cmp	r3, #0
 8007120:	d107      	bne.n	8007132 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007130:	e026      	b.n	8007180 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	f47f af57 	bne.w	8006fec <HAL_SPI_TransmitReceive+0x29c>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	f47f af50 	bne.w	8006fec <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f93d 	bl	80073d0 <SPI_EndRxTxTransaction>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007176:	e003      	b.n	8007180 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007188:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800718c:	4618      	mov	r0, r3
 800718e:	3728      	adds	r7, #40	@ 0x28
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071a4:	f7fc fdb8 	bl	8003d18 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4413      	add	r3, r2
 80071b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071b4:	f7fc fdb0 	bl	8003d18 <HAL_GetTick>
 80071b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071ba:	4b39      	ldr	r3, [pc, #228]	@ (80072a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	015b      	lsls	r3, r3, #5
 80071c0:	0d1b      	lsrs	r3, r3, #20
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	fb02 f303 	mul.w	r3, r2, r3
 80071c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071ca:	e054      	b.n	8007276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d050      	beq.n	8007276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071d4:	f7fc fda0 	bl	8003d18 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d902      	bls.n	80071ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d13d      	bne.n	8007266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007202:	d111      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800720c:	d004      	beq.n	8007218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007216:	d107      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007230:	d10f      	bne.n	8007252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e017      	b.n	8007296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3b01      	subs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4013      	ands	r3, r2
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	bf0c      	ite	eq
 8007286:	2301      	moveq	r3, #1
 8007288:	2300      	movne	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	429a      	cmp	r2, r3
 8007292:	d19b      	bne.n	80071cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3720      	adds	r7, #32
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000004c 	.word	0x2000004c

080072a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	@ 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072b6:	f7fc fd2f 	bl	8003d18 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	1a9b      	subs	r3, r3, r2
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	4413      	add	r3, r2
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80072c6:	f7fc fd27 	bl	8003d18 <HAL_GetTick>
 80072ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072d4:	4b3d      	ldr	r3, [pc, #244]	@ (80073cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	00da      	lsls	r2, r3, #3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	0d1b      	lsrs	r3, r3, #20
 80072e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072ec:	e060      	b.n	80073b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072f4:	d107      	bne.n	8007306 <SPI_WaitFifoStateUntilTimeout+0x62>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d104      	bne.n	8007306 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007304:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d050      	beq.n	80073b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800730e:	f7fc fd03 	bl	8003d18 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800731a:	429a      	cmp	r2, r3
 800731c:	d902      	bls.n	8007324 <SPI_WaitFifoStateUntilTimeout+0x80>
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	d13d      	bne.n	80073a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007332:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800733c:	d111      	bne.n	8007362 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007346:	d004      	beq.n	8007352 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007350:	d107      	bne.n	8007362 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007360:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736a:	d10f      	bne.n	800738c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800738a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e010      	b.n	80073c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4013      	ands	r3, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d196      	bne.n	80072ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3728      	adds	r7, #40	@ 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	2000004c 	.word	0x2000004c

080073d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff ff5b 	bl	80072a4 <SPI_WaitFifoStateUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073f8:	f043 0220 	orr.w	r2, r3, #32
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e046      	b.n	8007492 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007404:	4b25      	ldr	r3, [pc, #148]	@ (800749c <SPI_EndRxTxTransaction+0xcc>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a25      	ldr	r2, [pc, #148]	@ (80074a0 <SPI_EndRxTxTransaction+0xd0>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	0d5b      	lsrs	r3, r3, #21
 8007410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007422:	d112      	bne.n	800744a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2200      	movs	r2, #0
 800742c:	2180      	movs	r1, #128	@ 0x80
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff feb0 	bl	8007194 <SPI_WaitFlagStateUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e023      	b.n	8007492 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	3b01      	subs	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007460:	2b80      	cmp	r3, #128	@ 0x80
 8007462:	d0f2      	beq.n	800744a <SPI_EndRxTxTransaction+0x7a>
 8007464:	e000      	b.n	8007468 <SPI_EndRxTxTransaction+0x98>
        break;
 8007466:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff ff15 	bl	80072a4 <SPI_WaitFifoStateUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e000      	b.n	8007492 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	2000004c 	.word	0x2000004c
 80074a0:	165e9f81 	.word	0x165e9f81

080074a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e049      	b.n	800754a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fb fefe 	bl	80032cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f001 f876 	bl	80085d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d001      	beq.n	800756c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e04c      	b.n	8007606 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a26      	ldr	r2, [pc, #152]	@ (8007614 <HAL_TIM_Base_Start+0xc0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d022      	beq.n	80075c4 <HAL_TIM_Base_Start+0x70>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007586:	d01d      	beq.n	80075c4 <HAL_TIM_Base_Start+0x70>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a22      	ldr	r2, [pc, #136]	@ (8007618 <HAL_TIM_Base_Start+0xc4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d018      	beq.n	80075c4 <HAL_TIM_Base_Start+0x70>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a21      	ldr	r2, [pc, #132]	@ (800761c <HAL_TIM_Base_Start+0xc8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d013      	beq.n	80075c4 <HAL_TIM_Base_Start+0x70>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007620 <HAL_TIM_Base_Start+0xcc>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00e      	beq.n	80075c4 <HAL_TIM_Base_Start+0x70>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007624 <HAL_TIM_Base_Start+0xd0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d009      	beq.n	80075c4 <HAL_TIM_Base_Start+0x70>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007628 <HAL_TIM_Base_Start+0xd4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d004      	beq.n	80075c4 <HAL_TIM_Base_Start+0x70>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a1b      	ldr	r2, [pc, #108]	@ (800762c <HAL_TIM_Base_Start+0xd8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d115      	bne.n	80075f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689a      	ldr	r2, [r3, #8]
 80075ca:	4b19      	ldr	r3, [pc, #100]	@ (8007630 <HAL_TIM_Base_Start+0xdc>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b06      	cmp	r3, #6
 80075d4:	d015      	beq.n	8007602 <HAL_TIM_Base_Start+0xae>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075dc:	d011      	beq.n	8007602 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0201 	orr.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ee:	e008      	b.n	8007602 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e000      	b.n	8007604 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007602:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40010000 	.word	0x40010000
 8007618:	40000400 	.word	0x40000400
 800761c:	40000800 	.word	0x40000800
 8007620:	40000c00 	.word	0x40000c00
 8007624:	40010400 	.word	0x40010400
 8007628:	40014000 	.word	0x40014000
 800762c:	40001800 	.word	0x40001800
 8007630:	00010007 	.word	0x00010007

08007634 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a1a      	ldr	r2, [r3, #32]
 8007642:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <HAL_TIM_Base_Stop+0x38>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a1a      	ldr	r2, [r3, #32]
 8007652:	f240 4344 	movw	r3, #1092	@ 0x444
 8007656:	4013      	ands	r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d107      	bne.n	800766c <HAL_TIM_Base_Stop+0x38>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e049      	b.n	8007728 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7fb fedf 	bl	800346c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2202      	movs	r2, #2
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3304      	adds	r3, #4
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f000 ff87 	bl	80085d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d109      	bne.n	8007754 <HAL_TIM_PWM_Start+0x24>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	bf14      	ite	ne
 800774c:	2301      	movne	r3, #1
 800774e:	2300      	moveq	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	e03c      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b04      	cmp	r3, #4
 8007758:	d109      	bne.n	800776e <HAL_TIM_PWM_Start+0x3e>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b01      	cmp	r3, #1
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e02f      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b08      	cmp	r3, #8
 8007772:	d109      	bne.n	8007788 <HAL_TIM_PWM_Start+0x58>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	bf14      	ite	ne
 8007780:	2301      	movne	r3, #1
 8007782:	2300      	moveq	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	e022      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b0c      	cmp	r3, #12
 800778c:	d109      	bne.n	80077a2 <HAL_TIM_PWM_Start+0x72>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b01      	cmp	r3, #1
 8007798:	bf14      	ite	ne
 800779a:	2301      	movne	r3, #1
 800779c:	2300      	moveq	r3, #0
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	e015      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b10      	cmp	r3, #16
 80077a6:	d109      	bne.n	80077bc <HAL_TIM_PWM_Start+0x8c>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	bf14      	ite	ne
 80077b4:	2301      	movne	r3, #1
 80077b6:	2300      	moveq	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	e008      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	bf14      	ite	ne
 80077c8:	2301      	movne	r3, #1
 80077ca:	2300      	moveq	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e092      	b.n	80078fc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_PWM_Start+0xb6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077e4:	e023      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_PWM_Start+0xc6>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077f4:	e01b      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_PWM_Start+0xd6>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007804:	e013      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b0c      	cmp	r3, #12
 800780a:	d104      	bne.n	8007816 <HAL_TIM_PWM_Start+0xe6>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007814:	e00b      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b10      	cmp	r3, #16
 800781a:	d104      	bne.n	8007826 <HAL_TIM_PWM_Start+0xf6>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007824:	e003      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2202      	movs	r2, #2
 800782a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2201      	movs	r2, #1
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f001 fa70 	bl	8008d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a30      	ldr	r2, [pc, #192]	@ (8007904 <HAL_TIM_PWM_Start+0x1d4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d004      	beq.n	8007850 <HAL_TIM_PWM_Start+0x120>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2f      	ldr	r2, [pc, #188]	@ (8007908 <HAL_TIM_PWM_Start+0x1d8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d101      	bne.n	8007854 <HAL_TIM_PWM_Start+0x124>
 8007850:	2301      	movs	r3, #1
 8007852:	e000      	b.n	8007856 <HAL_TIM_PWM_Start+0x126>
 8007854:	2300      	movs	r3, #0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007868:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a25      	ldr	r2, [pc, #148]	@ (8007904 <HAL_TIM_PWM_Start+0x1d4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d022      	beq.n	80078ba <HAL_TIM_PWM_Start+0x18a>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787c:	d01d      	beq.n	80078ba <HAL_TIM_PWM_Start+0x18a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a22      	ldr	r2, [pc, #136]	@ (800790c <HAL_TIM_PWM_Start+0x1dc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d018      	beq.n	80078ba <HAL_TIM_PWM_Start+0x18a>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a20      	ldr	r2, [pc, #128]	@ (8007910 <HAL_TIM_PWM_Start+0x1e0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d013      	beq.n	80078ba <HAL_TIM_PWM_Start+0x18a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1f      	ldr	r2, [pc, #124]	@ (8007914 <HAL_TIM_PWM_Start+0x1e4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d00e      	beq.n	80078ba <HAL_TIM_PWM_Start+0x18a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <HAL_TIM_PWM_Start+0x1d8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d009      	beq.n	80078ba <HAL_TIM_PWM_Start+0x18a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007918 <HAL_TIM_PWM_Start+0x1e8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d004      	beq.n	80078ba <HAL_TIM_PWM_Start+0x18a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a19      	ldr	r2, [pc, #100]	@ (800791c <HAL_TIM_PWM_Start+0x1ec>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d115      	bne.n	80078e6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	4b17      	ldr	r3, [pc, #92]	@ (8007920 <HAL_TIM_PWM_Start+0x1f0>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b06      	cmp	r3, #6
 80078ca:	d015      	beq.n	80078f8 <HAL_TIM_PWM_Start+0x1c8>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d2:	d011      	beq.n	80078f8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e4:	e008      	b.n	80078f8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0201 	orr.w	r2, r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	e000      	b.n	80078fa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40010000 	.word	0x40010000
 8007908:	40010400 	.word	0x40010400
 800790c:	40000400 	.word	0x40000400
 8007910:	40000800 	.word	0x40000800
 8007914:	40000c00 	.word	0x40000c00
 8007918:	40014000 	.word	0x40014000
 800791c:	40001800 	.word	0x40001800
 8007920:	00010007 	.word	0x00010007

08007924 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d109      	bne.n	800794c <HAL_TIM_PWM_Start_IT+0x28>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	bf14      	ite	ne
 8007944:	2301      	movne	r3, #1
 8007946:	2300      	moveq	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	e03c      	b.n	80079c6 <HAL_TIM_PWM_Start_IT+0xa2>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b04      	cmp	r3, #4
 8007950:	d109      	bne.n	8007966 <HAL_TIM_PWM_Start_IT+0x42>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	e02f      	b.n	80079c6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b08      	cmp	r3, #8
 800796a:	d109      	bne.n	8007980 <HAL_TIM_PWM_Start_IT+0x5c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	bf14      	ite	ne
 8007978:	2301      	movne	r3, #1
 800797a:	2300      	moveq	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	e022      	b.n	80079c6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b0c      	cmp	r3, #12
 8007984:	d109      	bne.n	800799a <HAL_TIM_PWM_Start_IT+0x76>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	bf14      	ite	ne
 8007992:	2301      	movne	r3, #1
 8007994:	2300      	moveq	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	e015      	b.n	80079c6 <HAL_TIM_PWM_Start_IT+0xa2>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b10      	cmp	r3, #16
 800799e:	d109      	bne.n	80079b4 <HAL_TIM_PWM_Start_IT+0x90>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	bf14      	ite	ne
 80079ac:	2301      	movne	r3, #1
 80079ae:	2300      	moveq	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	e008      	b.n	80079c6 <HAL_TIM_PWM_Start_IT+0xa2>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b01      	cmp	r3, #1
 80079be:	bf14      	ite	ne
 80079c0:	2301      	movne	r3, #1
 80079c2:	2300      	moveq	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e0dd      	b.n	8007b8a <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <HAL_TIM_PWM_Start_IT+0xba>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079dc:	e023      	b.n	8007a26 <HAL_TIM_PWM_Start_IT+0x102>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d104      	bne.n	80079ee <HAL_TIM_PWM_Start_IT+0xca>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079ec:	e01b      	b.n	8007a26 <HAL_TIM_PWM_Start_IT+0x102>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d104      	bne.n	80079fe <HAL_TIM_PWM_Start_IT+0xda>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079fc:	e013      	b.n	8007a26 <HAL_TIM_PWM_Start_IT+0x102>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b0c      	cmp	r3, #12
 8007a02:	d104      	bne.n	8007a0e <HAL_TIM_PWM_Start_IT+0xea>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a0c:	e00b      	b.n	8007a26 <HAL_TIM_PWM_Start_IT+0x102>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d104      	bne.n	8007a1e <HAL_TIM_PWM_Start_IT+0xfa>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a1c:	e003      	b.n	8007a26 <HAL_TIM_PWM_Start_IT+0x102>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2202      	movs	r2, #2
 8007a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b0c      	cmp	r3, #12
 8007a2a:	d841      	bhi.n	8007ab0 <HAL_TIM_PWM_Start_IT+0x18c>
 8007a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a34 <HAL_TIM_PWM_Start_IT+0x110>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a69 	.word	0x08007a69
 8007a38:	08007ab1 	.word	0x08007ab1
 8007a3c:	08007ab1 	.word	0x08007ab1
 8007a40:	08007ab1 	.word	0x08007ab1
 8007a44:	08007a7b 	.word	0x08007a7b
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007ab1 	.word	0x08007ab1
 8007a50:	08007ab1 	.word	0x08007ab1
 8007a54:	08007a8d 	.word	0x08007a8d
 8007a58:	08007ab1 	.word	0x08007ab1
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007a9f 	.word	0x08007a9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0202 	orr.w	r2, r2, #2
 8007a76:	60da      	str	r2, [r3, #12]
      break;
 8007a78:	e01d      	b.n	8007ab6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0204 	orr.w	r2, r2, #4
 8007a88:	60da      	str	r2, [r3, #12]
      break;
 8007a8a:	e014      	b.n	8007ab6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0208 	orr.w	r2, r2, #8
 8007a9a:	60da      	str	r2, [r3, #12]
      break;
 8007a9c:	e00b      	b.n	8007ab6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0210 	orr.w	r2, r2, #16
 8007aac:	60da      	str	r2, [r3, #12]
      break;
 8007aae:	e002      	b.n	8007ab6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d165      	bne.n	8007b88 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 f929 	bl	8008d1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a31      	ldr	r2, [pc, #196]	@ (8007b94 <HAL_TIM_PWM_Start_IT+0x270>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d004      	beq.n	8007ade <HAL_TIM_PWM_Start_IT+0x1ba>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8007b98 <HAL_TIM_PWM_Start_IT+0x274>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d101      	bne.n	8007ae2 <HAL_TIM_PWM_Start_IT+0x1be>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <HAL_TIM_PWM_Start_IT+0x1c0>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d007      	beq.n	8007af8 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007af6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a25      	ldr	r2, [pc, #148]	@ (8007b94 <HAL_TIM_PWM_Start_IT+0x270>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d022      	beq.n	8007b48 <HAL_TIM_PWM_Start_IT+0x224>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b0a:	d01d      	beq.n	8007b48 <HAL_TIM_PWM_Start_IT+0x224>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a22      	ldr	r2, [pc, #136]	@ (8007b9c <HAL_TIM_PWM_Start_IT+0x278>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d018      	beq.n	8007b48 <HAL_TIM_PWM_Start_IT+0x224>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a21      	ldr	r2, [pc, #132]	@ (8007ba0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d013      	beq.n	8007b48 <HAL_TIM_PWM_Start_IT+0x224>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba4 <HAL_TIM_PWM_Start_IT+0x280>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00e      	beq.n	8007b48 <HAL_TIM_PWM_Start_IT+0x224>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b98 <HAL_TIM_PWM_Start_IT+0x274>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d009      	beq.n	8007b48 <HAL_TIM_PWM_Start_IT+0x224>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba8 <HAL_TIM_PWM_Start_IT+0x284>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d004      	beq.n	8007b48 <HAL_TIM_PWM_Start_IT+0x224>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1a      	ldr	r2, [pc, #104]	@ (8007bac <HAL_TIM_PWM_Start_IT+0x288>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d115      	bne.n	8007b74 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	4b18      	ldr	r3, [pc, #96]	@ (8007bb0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b06      	cmp	r3, #6
 8007b58:	d015      	beq.n	8007b86 <HAL_TIM_PWM_Start_IT+0x262>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b60:	d011      	beq.n	8007b86 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0201 	orr.w	r2, r2, #1
 8007b70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b72:	e008      	b.n	8007b86 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0201 	orr.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	e000      	b.n	8007b88 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40000c00 	.word	0x40000c00
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40001800 	.word	0x40001800
 8007bb0:	00010007 	.word	0x00010007

08007bb4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b0c      	cmp	r3, #12
 8007bc6:	d841      	bhi.n	8007c4c <HAL_TIM_PWM_Stop_IT+0x98>
 8007bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c05 	.word	0x08007c05
 8007bd4:	08007c4d 	.word	0x08007c4d
 8007bd8:	08007c4d 	.word	0x08007c4d
 8007bdc:	08007c4d 	.word	0x08007c4d
 8007be0:	08007c17 	.word	0x08007c17
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007c4d 	.word	0x08007c4d
 8007bec:	08007c4d 	.word	0x08007c4d
 8007bf0:	08007c29 	.word	0x08007c29
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c4d 	.word	0x08007c4d
 8007bfc:	08007c4d 	.word	0x08007c4d
 8007c00:	08007c3b 	.word	0x08007c3b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0202 	bic.w	r2, r2, #2
 8007c12:	60da      	str	r2, [r3, #12]
      break;
 8007c14:	e01d      	b.n	8007c52 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0204 	bic.w	r2, r2, #4
 8007c24:	60da      	str	r2, [r3, #12]
      break;
 8007c26:	e014      	b.n	8007c52 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0208 	bic.w	r2, r2, #8
 8007c36:	60da      	str	r2, [r3, #12]
      break;
 8007c38:	e00b      	b.n	8007c52 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0210 	bic.w	r2, r2, #16
 8007c48:	60da      	str	r2, [r3, #12]
      break;
 8007c4a:	e002      	b.n	8007c52 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c50:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d171      	bne.n	8007d3c <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 f85b 	bl	8008d1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a37      	ldr	r2, [pc, #220]	@ (8007d48 <HAL_TIM_PWM_Stop_IT+0x194>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d004      	beq.n	8007c7a <HAL_TIM_PWM_Stop_IT+0xc6>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a35      	ldr	r2, [pc, #212]	@ (8007d4c <HAL_TIM_PWM_Stop_IT+0x198>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_PWM_Stop_IT+0xca>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <HAL_TIM_PWM_Stop_IT+0xcc>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d017      	beq.n	8007cb4 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c8e:	4013      	ands	r3, r2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10f      	bne.n	8007cb4 <HAL_TIM_PWM_Stop_IT+0x100>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6a1a      	ldr	r2, [r3, #32]
 8007c9a:	f240 4344 	movw	r3, #1092	@ 0x444
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d107      	bne.n	8007cb4 <HAL_TIM_PWM_Stop_IT+0x100>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007cb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10f      	bne.n	8007ce4 <HAL_TIM_PWM_Stop_IT+0x130>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6a1a      	ldr	r2, [r3, #32]
 8007cca:	f240 4344 	movw	r3, #1092	@ 0x444
 8007cce:	4013      	ands	r3, r2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d107      	bne.n	8007ce4 <HAL_TIM_PWM_Stop_IT+0x130>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d104      	bne.n	8007cf4 <HAL_TIM_PWM_Stop_IT+0x140>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cf2:	e023      	b.n	8007d3c <HAL_TIM_PWM_Stop_IT+0x188>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d104      	bne.n	8007d04 <HAL_TIM_PWM_Stop_IT+0x150>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d02:	e01b      	b.n	8007d3c <HAL_TIM_PWM_Stop_IT+0x188>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d104      	bne.n	8007d14 <HAL_TIM_PWM_Stop_IT+0x160>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d12:	e013      	b.n	8007d3c <HAL_TIM_PWM_Stop_IT+0x188>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b0c      	cmp	r3, #12
 8007d18:	d104      	bne.n	8007d24 <HAL_TIM_PWM_Stop_IT+0x170>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d22:	e00b      	b.n	8007d3c <HAL_TIM_PWM_Stop_IT+0x188>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b10      	cmp	r3, #16
 8007d28:	d104      	bne.n	8007d34 <HAL_TIM_PWM_Stop_IT+0x180>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d32:	e003      	b.n	8007d3c <HAL_TIM_PWM_Stop_IT+0x188>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	40010000 	.word	0x40010000
 8007d4c:	40010400 	.word	0x40010400

08007d50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e08f      	b.n	8007e84 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7fb fb2b 	bl	80033d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6899      	ldr	r1, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	4b3e      	ldr	r3, [pc, #248]	@ (8007e8c <HAL_TIM_Encoder_Init+0x13c>)
 8007d92:	400b      	ands	r3, r1
 8007d94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f000 fc17 	bl	80085d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4b31      	ldr	r3, [pc, #196]	@ (8007e90 <HAL_TIM_Encoder_Init+0x140>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	4b2b      	ldr	r3, [pc, #172]	@ (8007e94 <HAL_TIM_Encoder_Init+0x144>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4b2a      	ldr	r3, [pc, #168]	@ (8007e98 <HAL_TIM_Encoder_Init+0x148>)
 8007dee:	4013      	ands	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	021b      	lsls	r3, r3, #8
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	011a      	lsls	r2, r3, #4
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	031b      	lsls	r3, r3, #12
 8007e10:	4313      	orrs	r3, r2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007e1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007e26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	4313      	orrs	r3, r2
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	fffebff8 	.word	0xfffebff8
 8007e90:	fffffcfc 	.word	0xfffffcfc
 8007e94:	fffff3f3 	.word	0xfffff3f3
 8007e98:	ffff0f0f 	.word	0xffff0f0f

08007e9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007eac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007eb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ebc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d110      	bne.n	8007eee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d102      	bne.n	8007ed8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ed2:	7b7b      	ldrb	r3, [r7, #13]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d001      	beq.n	8007edc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e069      	b.n	8007fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eec:	e031      	b.n	8007f52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d110      	bne.n	8007f16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d102      	bne.n	8007f00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007efa:	7b3b      	ldrb	r3, [r7, #12]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d001      	beq.n	8007f04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e055      	b.n	8007fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f14:	e01d      	b.n	8007f52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d108      	bne.n	8007f2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d105      	bne.n	8007f2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f22:	7b7b      	ldrb	r3, [r7, #13]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d102      	bne.n	8007f2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f28:	7b3b      	ldrb	r3, [r7, #12]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d001      	beq.n	8007f32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e03e      	b.n	8007fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_TIM_Encoder_Start+0xc4>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d008      	beq.n	8007f70 <HAL_TIM_Encoder_Start+0xd4>
 8007f5e:	e00f      	b.n	8007f80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2201      	movs	r2, #1
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fed7 	bl	8008d1c <TIM_CCxChannelCmd>
      break;
 8007f6e:	e016      	b.n	8007f9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2201      	movs	r2, #1
 8007f76:	2104      	movs	r1, #4
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fecf 	bl	8008d1c <TIM_CCxChannelCmd>
      break;
 8007f7e:	e00e      	b.n	8007f9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2201      	movs	r2, #1
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fec7 	bl	8008d1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2201      	movs	r2, #1
 8007f94:	2104      	movs	r1, #4
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fec0 	bl	8008d1c <TIM_CCxChannelCmd>
      break;
 8007f9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0201 	orr.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d020      	beq.n	800801c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01b      	beq.n	800801c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0202 	mvn.w	r2, #2
 8007fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fad2 	bl	80085ac <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fac4 	bl	8008598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7f8 fc83 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d020      	beq.n	8008068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01b      	beq.n	8008068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0204 	mvn.w	r2, #4
 8008038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 faac 	bl	80085ac <HAL_TIM_IC_CaptureCallback>
 8008054:	e005      	b.n	8008062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa9e 	bl	8008598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7f8 fc5d 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d020      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01b      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0208 	mvn.w	r2, #8
 8008084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2204      	movs	r2, #4
 800808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa86 	bl	80085ac <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa78 	bl	8008598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f8 fc37 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d020      	beq.n	8008100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01b      	beq.n	8008100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0210 	mvn.w	r2, #16
 80080d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2208      	movs	r2, #8
 80080d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa60 	bl	80085ac <HAL_TIM_IC_CaptureCallback>
 80080ec:	e005      	b.n	80080fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa52 	bl	8008598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7f8 fc11 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0201 	mvn.w	r2, #1
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa30 	bl	8008584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00c      	beq.n	8008152 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800814a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fea3 	bl	8008e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800816e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fe9b 	bl	8008eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00c      	beq.n	800819a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa13 	bl	80085c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00c      	beq.n	80081be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f06f 0220 	mvn.w	r2, #32
 80081b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fe63 	bl	8008e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081be:	bf00      	nop
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d101      	bne.n	80081e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e0ff      	b.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b14      	cmp	r3, #20
 80081f2:	f200 80f0 	bhi.w	80083d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80081f6:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	08008251 	.word	0x08008251
 8008200:	080083d7 	.word	0x080083d7
 8008204:	080083d7 	.word	0x080083d7
 8008208:	080083d7 	.word	0x080083d7
 800820c:	08008291 	.word	0x08008291
 8008210:	080083d7 	.word	0x080083d7
 8008214:	080083d7 	.word	0x080083d7
 8008218:	080083d7 	.word	0x080083d7
 800821c:	080082d3 	.word	0x080082d3
 8008220:	080083d7 	.word	0x080083d7
 8008224:	080083d7 	.word	0x080083d7
 8008228:	080083d7 	.word	0x080083d7
 800822c:	08008313 	.word	0x08008313
 8008230:	080083d7 	.word	0x080083d7
 8008234:	080083d7 	.word	0x080083d7
 8008238:	080083d7 	.word	0x080083d7
 800823c:	08008355 	.word	0x08008355
 8008240:	080083d7 	.word	0x080083d7
 8008244:	080083d7 	.word	0x080083d7
 8008248:	080083d7 	.word	0x080083d7
 800824c:	08008395 	.word	0x08008395
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fa68 	bl	800872c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699a      	ldr	r2, [r3, #24]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0208 	orr.w	r2, r2, #8
 800826a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0204 	bic.w	r2, r2, #4
 800827a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6999      	ldr	r1, [r3, #24]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	691a      	ldr	r2, [r3, #16]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	619a      	str	r2, [r3, #24]
      break;
 800828e:	e0a5      	b.n	80083dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 faba 	bl	8008810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6999      	ldr	r1, [r3, #24]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	021a      	lsls	r2, r3, #8
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	619a      	str	r2, [r3, #24]
      break;
 80082d0:	e084      	b.n	80083dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fb11 	bl	8008900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0208 	orr.w	r2, r2, #8
 80082ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0204 	bic.w	r2, r2, #4
 80082fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69d9      	ldr	r1, [r3, #28]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	691a      	ldr	r2, [r3, #16]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	61da      	str	r2, [r3, #28]
      break;
 8008310:	e064      	b.n	80083dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fb67 	bl	80089ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800832c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69da      	ldr	r2, [r3, #28]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800833c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69d9      	ldr	r1, [r3, #28]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	021a      	lsls	r2, r3, #8
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	61da      	str	r2, [r3, #28]
      break;
 8008352:	e043      	b.n	80083dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fb9e 	bl	8008a9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0208 	orr.w	r2, r2, #8
 800836e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0204 	bic.w	r2, r2, #4
 800837e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008392:	e023      	b.n	80083dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fbd0 	bl	8008b40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	021a      	lsls	r2, r3, #8
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083d4:	e002      	b.n	80083dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	75fb      	strb	r3, [r7, #23]
      break;
 80083da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop

080083f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_TIM_ConfigClockSource+0x1c>
 8008408:	2302      	movs	r3, #2
 800840a:	e0b4      	b.n	8008576 <HAL_TIM_ConfigClockSource+0x186>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	4b56      	ldr	r3, [pc, #344]	@ (8008580 <HAL_TIM_ConfigClockSource+0x190>)
 8008428:	4013      	ands	r3, r2
 800842a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008444:	d03e      	beq.n	80084c4 <HAL_TIM_ConfigClockSource+0xd4>
 8008446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800844a:	f200 8087 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800844e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008452:	f000 8086 	beq.w	8008562 <HAL_TIM_ConfigClockSource+0x172>
 8008456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800845a:	d87f      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800845c:	2b70      	cmp	r3, #112	@ 0x70
 800845e:	d01a      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0xa6>
 8008460:	2b70      	cmp	r3, #112	@ 0x70
 8008462:	d87b      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 8008464:	2b60      	cmp	r3, #96	@ 0x60
 8008466:	d050      	beq.n	800850a <HAL_TIM_ConfigClockSource+0x11a>
 8008468:	2b60      	cmp	r3, #96	@ 0x60
 800846a:	d877      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800846c:	2b50      	cmp	r3, #80	@ 0x50
 800846e:	d03c      	beq.n	80084ea <HAL_TIM_ConfigClockSource+0xfa>
 8008470:	2b50      	cmp	r3, #80	@ 0x50
 8008472:	d873      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 8008474:	2b40      	cmp	r3, #64	@ 0x40
 8008476:	d058      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x13a>
 8008478:	2b40      	cmp	r3, #64	@ 0x40
 800847a:	d86f      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800847c:	2b30      	cmp	r3, #48	@ 0x30
 800847e:	d064      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15a>
 8008480:	2b30      	cmp	r3, #48	@ 0x30
 8008482:	d86b      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 8008484:	2b20      	cmp	r3, #32
 8008486:	d060      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15a>
 8008488:	2b20      	cmp	r3, #32
 800848a:	d867      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800848c:	2b00      	cmp	r3, #0
 800848e:	d05c      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15a>
 8008490:	2b10      	cmp	r3, #16
 8008492:	d05a      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15a>
 8008494:	e062      	b.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084a6:	f000 fc19 	bl	8008cdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	609a      	str	r2, [r3, #8]
      break;
 80084c2:	e04f      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084d4:	f000 fc02 	bl	8008cdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084e6:	609a      	str	r2, [r3, #8]
      break;
 80084e8:	e03c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f6:	461a      	mov	r2, r3
 80084f8:	f000 fb76 	bl	8008be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2150      	movs	r1, #80	@ 0x50
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fbcf 	bl	8008ca6 <TIM_ITRx_SetConfig>
      break;
 8008508:	e02c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008516:	461a      	mov	r2, r3
 8008518:	f000 fb95 	bl	8008c46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2160      	movs	r1, #96	@ 0x60
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fbbf 	bl	8008ca6 <TIM_ITRx_SetConfig>
      break;
 8008528:	e01c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008536:	461a      	mov	r2, r3
 8008538:	f000 fb56 	bl	8008be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2140      	movs	r1, #64	@ 0x40
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fbaf 	bl	8008ca6 <TIM_ITRx_SetConfig>
      break;
 8008548:	e00c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f000 fba6 	bl	8008ca6 <TIM_ITRx_SetConfig>
      break;
 800855a:	e003      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	73fb      	strb	r3, [r7, #15]
      break;
 8008560:	e000      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	fffeff88 	.word	0xfffeff88

08008584 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a46      	ldr	r2, [pc, #280]	@ (8008700 <TIM_Base_SetConfig+0x12c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085f2:	d00f      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a43      	ldr	r2, [pc, #268]	@ (8008704 <TIM_Base_SetConfig+0x130>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00b      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a42      	ldr	r2, [pc, #264]	@ (8008708 <TIM_Base_SetConfig+0x134>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d007      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a41      	ldr	r2, [pc, #260]	@ (800870c <TIM_Base_SetConfig+0x138>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a40      	ldr	r2, [pc, #256]	@ (8008710 <TIM_Base_SetConfig+0x13c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d108      	bne.n	8008626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a35      	ldr	r2, [pc, #212]	@ (8008700 <TIM_Base_SetConfig+0x12c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d02b      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008634:	d027      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a32      	ldr	r2, [pc, #200]	@ (8008704 <TIM_Base_SetConfig+0x130>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d023      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a31      	ldr	r2, [pc, #196]	@ (8008708 <TIM_Base_SetConfig+0x134>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01f      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a30      	ldr	r2, [pc, #192]	@ (800870c <TIM_Base_SetConfig+0x138>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d01b      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2f      	ldr	r2, [pc, #188]	@ (8008710 <TIM_Base_SetConfig+0x13c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d017      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a2e      	ldr	r2, [pc, #184]	@ (8008714 <TIM_Base_SetConfig+0x140>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d013      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a2d      	ldr	r2, [pc, #180]	@ (8008718 <TIM_Base_SetConfig+0x144>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00f      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a2c      	ldr	r2, [pc, #176]	@ (800871c <TIM_Base_SetConfig+0x148>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00b      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a2b      	ldr	r2, [pc, #172]	@ (8008720 <TIM_Base_SetConfig+0x14c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d007      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a2a      	ldr	r2, [pc, #168]	@ (8008724 <TIM_Base_SetConfig+0x150>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d003      	beq.n	8008686 <TIM_Base_SetConfig+0xb2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a29      	ldr	r2, [pc, #164]	@ (8008728 <TIM_Base_SetConfig+0x154>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d108      	bne.n	8008698 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800868c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a10      	ldr	r2, [pc, #64]	@ (8008700 <TIM_Base_SetConfig+0x12c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d003      	beq.n	80086cc <TIM_Base_SetConfig+0xf8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a12      	ldr	r2, [pc, #72]	@ (8008710 <TIM_Base_SetConfig+0x13c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d103      	bne.n	80086d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d105      	bne.n	80086f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f023 0201 	bic.w	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	611a      	str	r2, [r3, #16]
  }
}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40010000 	.word	0x40010000
 8008704:	40000400 	.word	0x40000400
 8008708:	40000800 	.word	0x40000800
 800870c:	40000c00 	.word	0x40000c00
 8008710:	40010400 	.word	0x40010400
 8008714:	40014000 	.word	0x40014000
 8008718:	40014400 	.word	0x40014400
 800871c:	40014800 	.word	0x40014800
 8008720:	40001800 	.word	0x40001800
 8008724:	40001c00 	.word	0x40001c00
 8008728:	40002000 	.word	0x40002000

0800872c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	f023 0201 	bic.w	r2, r3, #1
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4b2b      	ldr	r3, [pc, #172]	@ (8008804 <TIM_OC1_SetConfig+0xd8>)
 8008758:	4013      	ands	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 0303 	bic.w	r3, r3, #3
 8008762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f023 0302 	bic.w	r3, r3, #2
 8008774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4313      	orrs	r3, r2
 800877e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a21      	ldr	r2, [pc, #132]	@ (8008808 <TIM_OC1_SetConfig+0xdc>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d003      	beq.n	8008790 <TIM_OC1_SetConfig+0x64>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a20      	ldr	r2, [pc, #128]	@ (800880c <TIM_OC1_SetConfig+0xe0>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d10c      	bne.n	80087aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f023 0308 	bic.w	r3, r3, #8
 8008796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f023 0304 	bic.w	r3, r3, #4
 80087a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a16      	ldr	r2, [pc, #88]	@ (8008808 <TIM_OC1_SetConfig+0xdc>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d003      	beq.n	80087ba <TIM_OC1_SetConfig+0x8e>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a15      	ldr	r2, [pc, #84]	@ (800880c <TIM_OC1_SetConfig+0xe0>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d111      	bne.n	80087de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	621a      	str	r2, [r3, #32]
}
 80087f8:	bf00      	nop
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	fffeff8f 	.word	0xfffeff8f
 8008808:	40010000 	.word	0x40010000
 800880c:	40010400 	.word	0x40010400

08008810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a1b      	ldr	r3, [r3, #32]
 8008824:	f023 0210 	bic.w	r2, r3, #16
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4b2e      	ldr	r3, [pc, #184]	@ (80088f4 <TIM_OC2_SetConfig+0xe4>)
 800883c:	4013      	ands	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f023 0320 	bic.w	r3, r3, #32
 800885a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a23      	ldr	r2, [pc, #140]	@ (80088f8 <TIM_OC2_SetConfig+0xe8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_OC2_SetConfig+0x68>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a22      	ldr	r2, [pc, #136]	@ (80088fc <TIM_OC2_SetConfig+0xec>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d10d      	bne.n	8008894 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800887e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	011b      	lsls	r3, r3, #4
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4313      	orrs	r3, r2
 800888a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008892:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a18      	ldr	r2, [pc, #96]	@ (80088f8 <TIM_OC2_SetConfig+0xe8>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d003      	beq.n	80088a4 <TIM_OC2_SetConfig+0x94>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a17      	ldr	r2, [pc, #92]	@ (80088fc <TIM_OC2_SetConfig+0xec>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d113      	bne.n	80088cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	4313      	orrs	r3, r2
 80088be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	621a      	str	r2, [r3, #32]
}
 80088e6:	bf00      	nop
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	feff8fff 	.word	0xfeff8fff
 80088f8:	40010000 	.word	0x40010000
 80088fc:	40010400 	.word	0x40010400

08008900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4b2d      	ldr	r3, [pc, #180]	@ (80089e0 <TIM_OC3_SetConfig+0xe0>)
 800892c:	4013      	ands	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a22      	ldr	r2, [pc, #136]	@ (80089e4 <TIM_OC3_SetConfig+0xe4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d003      	beq.n	8008966 <TIM_OC3_SetConfig+0x66>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a21      	ldr	r2, [pc, #132]	@ (80089e8 <TIM_OC3_SetConfig+0xe8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d10d      	bne.n	8008982 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800896c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a17      	ldr	r2, [pc, #92]	@ (80089e4 <TIM_OC3_SetConfig+0xe4>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d003      	beq.n	8008992 <TIM_OC3_SetConfig+0x92>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a16      	ldr	r2, [pc, #88]	@ (80089e8 <TIM_OC3_SetConfig+0xe8>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d113      	bne.n	80089ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	621a      	str	r2, [r3, #32]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	fffeff8f 	.word	0xfffeff8f
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400

080089ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4b1e      	ldr	r3, [pc, #120]	@ (8008a90 <TIM_OC4_SetConfig+0xa4>)
 8008a18:	4013      	ands	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	021b      	lsls	r3, r3, #8
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	031b      	lsls	r3, r3, #12
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a13      	ldr	r2, [pc, #76]	@ (8008a94 <TIM_OC4_SetConfig+0xa8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_OC4_SetConfig+0x68>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a12      	ldr	r2, [pc, #72]	@ (8008a98 <TIM_OC4_SetConfig+0xac>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d109      	bne.n	8008a68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	019b      	lsls	r3, r3, #6
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	621a      	str	r2, [r3, #32]
}
 8008a82:	bf00      	nop
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	feff8fff 	.word	0xfeff8fff
 8008a94:	40010000 	.word	0x40010000
 8008a98:	40010400 	.word	0x40010400

08008a9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8008b34 <TIM_OC5_SetConfig+0x98>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008adc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	041b      	lsls	r3, r3, #16
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a12      	ldr	r2, [pc, #72]	@ (8008b38 <TIM_OC5_SetConfig+0x9c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_OC5_SetConfig+0x5e>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a11      	ldr	r2, [pc, #68]	@ (8008b3c <TIM_OC5_SetConfig+0xa0>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d109      	bne.n	8008b0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	021b      	lsls	r3, r3, #8
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	621a      	str	r2, [r3, #32]
}
 8008b28:	bf00      	nop
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	fffeff8f 	.word	0xfffeff8f
 8008b38:	40010000 	.word	0x40010000
 8008b3c:	40010400 	.word	0x40010400

08008b40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8008bdc <TIM_OC6_SetConfig+0x9c>)
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	051b      	lsls	r3, r3, #20
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a13      	ldr	r2, [pc, #76]	@ (8008be0 <TIM_OC6_SetConfig+0xa0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_OC6_SetConfig+0x60>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a12      	ldr	r2, [pc, #72]	@ (8008be4 <TIM_OC6_SetConfig+0xa4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d109      	bne.n	8008bb4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	029b      	lsls	r3, r3, #10
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	621a      	str	r2, [r3, #32]
}
 8008bce:	bf00      	nop
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	feff8fff 	.word	0xfeff8fff
 8008be0:	40010000 	.word	0x40010000
 8008be4:	40010400 	.word	0x40010400

08008be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f023 0201 	bic.w	r2, r3, #1
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f023 030a 	bic.w	r3, r3, #10
 8008c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b087      	sub	sp, #28
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	f023 0210 	bic.w	r2, r3, #16
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	031b      	lsls	r3, r3, #12
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b085      	sub	sp, #20
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	f043 0307 	orr.w	r3, r3, #7
 8008cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	609a      	str	r2, [r3, #8]
}
 8008cd0:	bf00      	nop
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	021a      	lsls	r2, r3, #8
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	609a      	str	r2, [r3, #8]
}
 8008d10:	bf00      	nop
 8008d12:	371c      	adds	r7, #28
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f003 031f 	and.w	r3, r3, #31
 8008d2e:	2201      	movs	r2, #1
 8008d30:	fa02 f303 	lsl.w	r3, r2, r3
 8008d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a1a      	ldr	r2, [r3, #32]
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	43db      	mvns	r3, r3
 8008d3e:	401a      	ands	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6a1a      	ldr	r2, [r3, #32]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f003 031f 	and.w	r3, r3, #31
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	fa01 f303 	lsl.w	r3, r1, r3
 8008d54:	431a      	orrs	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	621a      	str	r2, [r3, #32]
}
 8008d5a:	bf00      	nop
 8008d5c:	371c      	adds	r7, #28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
	...

08008d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d101      	bne.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e06d      	b.n	8008e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a30      	ldr	r2, [pc, #192]	@ (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d004      	beq.n	8008db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a2f      	ldr	r2, [pc, #188]	@ (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d108      	bne.n	8008dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a20      	ldr	r2, [pc, #128]	@ (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d022      	beq.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df2:	d01d      	beq.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d018      	beq.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a1c      	ldr	r2, [pc, #112]	@ (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d013      	beq.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00e      	beq.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a15      	ldr	r2, [pc, #84]	@ (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d009      	beq.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a16      	ldr	r2, [pc, #88]	@ (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d004      	beq.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a15      	ldr	r2, [pc, #84]	@ (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d10c      	bne.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	40010000 	.word	0x40010000
 8008e6c:	40010400 	.word	0x40010400
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800
 8008e78:	40000c00 	.word	0x40000c00
 8008e7c:	40014000 	.word	0x40014000
 8008e80:	40001800 	.word	0x40001800

08008e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e040      	b.n	8008f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7fa fbee 	bl	80036c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2224      	movs	r2, #36	@ 0x24
 8008eec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 0201 	bic.w	r2, r2, #1
 8008efc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fe56 	bl	8009bb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fbef 	bl	80096f0 <UART_SetConfig>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e01b      	b.n	8008f54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f042 0201 	orr.w	r2, r2, #1
 8008f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fed5 	bl	8009cfc <UART_CheckIdleState>
 8008f52:	4603      	mov	r3, r0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	@ 0x28
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	603b      	str	r3, [r7, #0]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f70:	2b20      	cmp	r3, #32
 8008f72:	d177      	bne.n	8009064 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <HAL_UART_Transmit+0x24>
 8008f7a:	88fb      	ldrh	r3, [r7, #6]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e070      	b.n	8009066 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2221      	movs	r2, #33	@ 0x21
 8008f90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f92:	f7fa fec1 	bl	8003d18 <HAL_GetTick>
 8008f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	88fa      	ldrh	r2, [r7, #6]
 8008f9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	88fa      	ldrh	r2, [r7, #6]
 8008fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb0:	d108      	bne.n	8008fc4 <HAL_UART_Transmit+0x68>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d104      	bne.n	8008fc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	61bb      	str	r3, [r7, #24]
 8008fc2:	e003      	b.n	8008fcc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008fcc:	e02f      	b.n	800902e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2180      	movs	r1, #128	@ 0x80
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fee6 	bl	8009daa <UART_WaitOnFlagUntilTimeout>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d004      	beq.n	8008fee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e03b      	b.n	8009066 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10b      	bne.n	800900c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	881b      	ldrh	r3, [r3, #0]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009002:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	3302      	adds	r3, #2
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	e007      	b.n	800901c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	781a      	ldrb	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	3301      	adds	r3, #1
 800901a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009022:	b29b      	uxth	r3, r3
 8009024:	3b01      	subs	r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1c9      	bne.n	8008fce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2200      	movs	r2, #0
 8009042:	2140      	movs	r1, #64	@ 0x40
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 feb0 	bl	8009daa <UART_WaitOnFlagUntilTimeout>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e005      	b.n	8009066 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2220      	movs	r2, #32
 800905e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	e000      	b.n	8009066 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009064:	2302      	movs	r3, #2
  }
}
 8009066:	4618      	mov	r0, r3
 8009068:	3720      	adds	r7, #32
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b08a      	sub	sp, #40	@ 0x28
 8009072:	af00      	add	r7, sp, #0
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	4613      	mov	r3, r2
 800907a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009082:	2b20      	cmp	r3, #32
 8009084:	d132      	bne.n	80090ec <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <HAL_UART_Receive_DMA+0x24>
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e02b      	b.n	80090ee <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d018      	beq.n	80090dc <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	613b      	str	r3, [r7, #16]
   return(result);
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	461a      	mov	r2, r3
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	623b      	str	r3, [r7, #32]
 80090ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	69f9      	ldr	r1, [r7, #28]
 80090ce:	6a3a      	ldr	r2, [r7, #32]
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e6      	bne.n	80090aa <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	461a      	mov	r2, r3
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fece 	bl	8009e84 <UART_Start_Receive_DMA>
 80090e8:	4603      	mov	r3, r0
 80090ea:	e000      	b.n	80090ee <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80090ec:	2302      	movs	r3, #2
  }
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3728      	adds	r7, #40	@ 0x28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b0ba      	sub	sp, #232	@ 0xe8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800911e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009122:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009126:	4013      	ands	r3, r2
 8009128:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800912c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009130:	2b00      	cmp	r3, #0
 8009132:	d115      	bne.n	8009160 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00f      	beq.n	8009160 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009144:	f003 0320 	and.w	r3, r3, #32
 8009148:	2b00      	cmp	r3, #0
 800914a:	d009      	beq.n	8009160 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 8297 	beq.w	8009684 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
      }
      return;
 800915e:	e291      	b.n	8009684 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 8117 	beq.w	8009398 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800916a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009176:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800917a:	4b85      	ldr	r3, [pc, #532]	@ (8009390 <HAL_UART_IRQHandler+0x298>)
 800917c:	4013      	ands	r3, r2
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 810a 	beq.w	8009398 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d011      	beq.n	80091b4 <HAL_UART_IRQHandler+0xbc>
 8009190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00b      	beq.n	80091b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2201      	movs	r2, #1
 80091a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091aa:	f043 0201 	orr.w	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d011      	beq.n	80091e4 <HAL_UART_IRQHandler+0xec>
 80091c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2202      	movs	r2, #2
 80091d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091da:	f043 0204 	orr.w	r2, r3, #4
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d011      	beq.n	8009214 <HAL_UART_IRQHandler+0x11c>
 80091f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2204      	movs	r2, #4
 8009202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800920a:	f043 0202 	orr.w	r2, r3, #2
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b00      	cmp	r3, #0
 800921e:	d017      	beq.n	8009250 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	d105      	bne.n	8009238 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800922c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009230:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00b      	beq.n	8009250 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2208      	movs	r2, #8
 800923e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009246:	f043 0208 	orr.w	r2, r3, #8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009258:	2b00      	cmp	r3, #0
 800925a:	d012      	beq.n	8009282 <HAL_UART_IRQHandler+0x18a>
 800925c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009260:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00c      	beq.n	8009282 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009278:	f043 0220 	orr.w	r2, r3, #32
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 81fd 	beq.w	8009688 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00d      	beq.n	80092b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800929a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d007      	beq.n	80092b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ca:	2b40      	cmp	r3, #64	@ 0x40
 80092cc:	d005      	beq.n	80092da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d04f      	beq.n	800937a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fe98 	bl	800a010 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ea:	2b40      	cmp	r3, #64	@ 0x40
 80092ec:	d141      	bne.n	8009372 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800930c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3308      	adds	r3, #8
 8009316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800931a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800931e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1d9      	bne.n	80092ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800933e:	2b00      	cmp	r3, #0
 8009340:	d013      	beq.n	800936a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009346:	4a13      	ldr	r2, [pc, #76]	@ (8009394 <HAL_UART_IRQHandler+0x29c>)
 8009348:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800934e:	4618      	mov	r0, r3
 8009350:	f7fa ffa2 	bl	8004298 <HAL_DMA_Abort_IT>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d017      	beq.n	800938a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800935e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009368:	e00f      	b.n	800938a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f9aa 	bl	80096c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009370:	e00b      	b.n	800938a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9a6 	bl	80096c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009378:	e007      	b.n	800938a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f9a2 	bl	80096c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009388:	e17e      	b.n	8009688 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938a:	bf00      	nop
    return;
 800938c:	e17c      	b.n	8009688 <HAL_UART_IRQHandler+0x590>
 800938e:	bf00      	nop
 8009390:	04000120 	.word	0x04000120
 8009394:	0800a2bd 	.word	0x0800a2bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800939c:	2b01      	cmp	r3, #1
 800939e:	f040 814c 	bne.w	800963a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a6:	f003 0310 	and.w	r3, r3, #16
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8145 	beq.w	800963a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093b4:	f003 0310 	and.w	r3, r3, #16
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 813e 	beq.w	800963a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2210      	movs	r2, #16
 80093c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d0:	2b40      	cmp	r3, #64	@ 0x40
 80093d2:	f040 80b6 	bne.w	8009542 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 8150 	beq.w	800968c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80093f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093f6:	429a      	cmp	r2, r3
 80093f8:	f080 8148 	bcs.w	800968c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009402:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009410:	f000 8086 	beq.w	8009520 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009428:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800942c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800943e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009442:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800944a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1da      	bne.n	8009414 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3308      	adds	r3, #8
 8009464:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800946e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009470:	f023 0301 	bic.w	r3, r3, #1
 8009474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3308      	adds	r3, #8
 800947e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009482:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009486:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009488:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800948a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e1      	bne.n	800945e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3308      	adds	r3, #8
 80094ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e3      	bne.n	800949a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094f0:	f023 0310 	bic.w	r3, r3, #16
 80094f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	461a      	mov	r2, r3
 80094fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009502:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009504:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009508:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e4      	bne.n	80094e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800951a:	4618      	mov	r0, r3
 800951c:	f7fa fe4c 	bl	80041b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009532:	b29b      	uxth	r3, r3
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	b29b      	uxth	r3, r3
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f8cc 	bl	80096d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009540:	e0a4      	b.n	800968c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800954e:	b29b      	uxth	r3, r3
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800955c:	b29b      	uxth	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 8096 	beq.w	8009690 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 8091 	beq.w	8009690 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800957c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009590:	647b      	str	r3, [r7, #68]	@ 0x44
 8009592:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800959e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e4      	bne.n	800956e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	623b      	str	r3, [r7, #32]
   return(result);
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	f023 0301 	bic.w	r3, r3, #1
 80095ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3308      	adds	r3, #8
 80095c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80095ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e3      	bne.n	80095a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f023 0310 	bic.w	r3, r3, #16
 8009604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009612:	61fb      	str	r3, [r7, #28]
 8009614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	69b9      	ldr	r1, [r7, #24]
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	617b      	str	r3, [r7, #20]
   return(result);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e4      	bne.n	80095f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2202      	movs	r2, #2
 800962a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800962c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f850 	bl	80096d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009638:	e02a      	b.n	8009690 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800963a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800963e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00e      	beq.n	8009664 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800964a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d01c      	beq.n	8009694 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	4798      	blx	r3
    }
    return;
 8009662:	e017      	b.n	8009694 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	d012      	beq.n	8009696 <HAL_UART_IRQHandler+0x59e>
 8009670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00c      	beq.n	8009696 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fe33 	bl	800a2e8 <UART_EndTransmit_IT>
    return;
 8009682:	e008      	b.n	8009696 <HAL_UART_IRQHandler+0x59e>
      return;
 8009684:	bf00      	nop
 8009686:	e006      	b.n	8009696 <HAL_UART_IRQHandler+0x59e>
    return;
 8009688:	bf00      	nop
 800968a:	e004      	b.n	8009696 <HAL_UART_IRQHandler+0x59e>
      return;
 800968c:	bf00      	nop
 800968e:	e002      	b.n	8009696 <HAL_UART_IRQHandler+0x59e>
      return;
 8009690:	bf00      	nop
 8009692:	e000      	b.n	8009696 <HAL_UART_IRQHandler+0x59e>
    return;
 8009694:	bf00      	nop
  }

}
 8009696:	37e8      	adds	r7, #232	@ 0xe8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	431a      	orrs	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	4313      	orrs	r3, r2
 8009712:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	4ba6      	ldr	r3, [pc, #664]	@ (80099b4 <UART_SetConfig+0x2c4>)
 800971c:	4013      	ands	r3, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	6812      	ldr	r2, [r2, #0]
 8009722:	6979      	ldr	r1, [r7, #20]
 8009724:	430b      	orrs	r3, r1
 8009726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	4313      	orrs	r3, r2
 800974c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	430a      	orrs	r2, r1
 8009760:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a94      	ldr	r2, [pc, #592]	@ (80099b8 <UART_SetConfig+0x2c8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d120      	bne.n	80097ae <UART_SetConfig+0xbe>
 800976c:	4b93      	ldr	r3, [pc, #588]	@ (80099bc <UART_SetConfig+0x2cc>)
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	2b03      	cmp	r3, #3
 8009778:	d816      	bhi.n	80097a8 <UART_SetConfig+0xb8>
 800977a:	a201      	add	r2, pc, #4	@ (adr r2, 8009780 <UART_SetConfig+0x90>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	08009791 	.word	0x08009791
 8009784:	0800979d 	.word	0x0800979d
 8009788:	08009797 	.word	0x08009797
 800978c:	080097a3 	.word	0x080097a3
 8009790:	2301      	movs	r3, #1
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	e150      	b.n	8009a38 <UART_SetConfig+0x348>
 8009796:	2302      	movs	r3, #2
 8009798:	77fb      	strb	r3, [r7, #31]
 800979a:	e14d      	b.n	8009a38 <UART_SetConfig+0x348>
 800979c:	2304      	movs	r3, #4
 800979e:	77fb      	strb	r3, [r7, #31]
 80097a0:	e14a      	b.n	8009a38 <UART_SetConfig+0x348>
 80097a2:	2308      	movs	r3, #8
 80097a4:	77fb      	strb	r3, [r7, #31]
 80097a6:	e147      	b.n	8009a38 <UART_SetConfig+0x348>
 80097a8:	2310      	movs	r3, #16
 80097aa:	77fb      	strb	r3, [r7, #31]
 80097ac:	e144      	b.n	8009a38 <UART_SetConfig+0x348>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a83      	ldr	r2, [pc, #524]	@ (80099c0 <UART_SetConfig+0x2d0>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d132      	bne.n	800981e <UART_SetConfig+0x12e>
 80097b8:	4b80      	ldr	r3, [pc, #512]	@ (80099bc <UART_SetConfig+0x2cc>)
 80097ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097be:	f003 030c 	and.w	r3, r3, #12
 80097c2:	2b0c      	cmp	r3, #12
 80097c4:	d828      	bhi.n	8009818 <UART_SetConfig+0x128>
 80097c6:	a201      	add	r2, pc, #4	@ (adr r2, 80097cc <UART_SetConfig+0xdc>)
 80097c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097cc:	08009801 	.word	0x08009801
 80097d0:	08009819 	.word	0x08009819
 80097d4:	08009819 	.word	0x08009819
 80097d8:	08009819 	.word	0x08009819
 80097dc:	0800980d 	.word	0x0800980d
 80097e0:	08009819 	.word	0x08009819
 80097e4:	08009819 	.word	0x08009819
 80097e8:	08009819 	.word	0x08009819
 80097ec:	08009807 	.word	0x08009807
 80097f0:	08009819 	.word	0x08009819
 80097f4:	08009819 	.word	0x08009819
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009813 	.word	0x08009813
 8009800:	2300      	movs	r3, #0
 8009802:	77fb      	strb	r3, [r7, #31]
 8009804:	e118      	b.n	8009a38 <UART_SetConfig+0x348>
 8009806:	2302      	movs	r3, #2
 8009808:	77fb      	strb	r3, [r7, #31]
 800980a:	e115      	b.n	8009a38 <UART_SetConfig+0x348>
 800980c:	2304      	movs	r3, #4
 800980e:	77fb      	strb	r3, [r7, #31]
 8009810:	e112      	b.n	8009a38 <UART_SetConfig+0x348>
 8009812:	2308      	movs	r3, #8
 8009814:	77fb      	strb	r3, [r7, #31]
 8009816:	e10f      	b.n	8009a38 <UART_SetConfig+0x348>
 8009818:	2310      	movs	r3, #16
 800981a:	77fb      	strb	r3, [r7, #31]
 800981c:	e10c      	b.n	8009a38 <UART_SetConfig+0x348>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a68      	ldr	r2, [pc, #416]	@ (80099c4 <UART_SetConfig+0x2d4>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d120      	bne.n	800986a <UART_SetConfig+0x17a>
 8009828:	4b64      	ldr	r3, [pc, #400]	@ (80099bc <UART_SetConfig+0x2cc>)
 800982a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009832:	2b30      	cmp	r3, #48	@ 0x30
 8009834:	d013      	beq.n	800985e <UART_SetConfig+0x16e>
 8009836:	2b30      	cmp	r3, #48	@ 0x30
 8009838:	d814      	bhi.n	8009864 <UART_SetConfig+0x174>
 800983a:	2b20      	cmp	r3, #32
 800983c:	d009      	beq.n	8009852 <UART_SetConfig+0x162>
 800983e:	2b20      	cmp	r3, #32
 8009840:	d810      	bhi.n	8009864 <UART_SetConfig+0x174>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <UART_SetConfig+0x15c>
 8009846:	2b10      	cmp	r3, #16
 8009848:	d006      	beq.n	8009858 <UART_SetConfig+0x168>
 800984a:	e00b      	b.n	8009864 <UART_SetConfig+0x174>
 800984c:	2300      	movs	r3, #0
 800984e:	77fb      	strb	r3, [r7, #31]
 8009850:	e0f2      	b.n	8009a38 <UART_SetConfig+0x348>
 8009852:	2302      	movs	r3, #2
 8009854:	77fb      	strb	r3, [r7, #31]
 8009856:	e0ef      	b.n	8009a38 <UART_SetConfig+0x348>
 8009858:	2304      	movs	r3, #4
 800985a:	77fb      	strb	r3, [r7, #31]
 800985c:	e0ec      	b.n	8009a38 <UART_SetConfig+0x348>
 800985e:	2308      	movs	r3, #8
 8009860:	77fb      	strb	r3, [r7, #31]
 8009862:	e0e9      	b.n	8009a38 <UART_SetConfig+0x348>
 8009864:	2310      	movs	r3, #16
 8009866:	77fb      	strb	r3, [r7, #31]
 8009868:	e0e6      	b.n	8009a38 <UART_SetConfig+0x348>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a56      	ldr	r2, [pc, #344]	@ (80099c8 <UART_SetConfig+0x2d8>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d120      	bne.n	80098b6 <UART_SetConfig+0x1c6>
 8009874:	4b51      	ldr	r3, [pc, #324]	@ (80099bc <UART_SetConfig+0x2cc>)
 8009876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800987a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800987e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009880:	d013      	beq.n	80098aa <UART_SetConfig+0x1ba>
 8009882:	2bc0      	cmp	r3, #192	@ 0xc0
 8009884:	d814      	bhi.n	80098b0 <UART_SetConfig+0x1c0>
 8009886:	2b80      	cmp	r3, #128	@ 0x80
 8009888:	d009      	beq.n	800989e <UART_SetConfig+0x1ae>
 800988a:	2b80      	cmp	r3, #128	@ 0x80
 800988c:	d810      	bhi.n	80098b0 <UART_SetConfig+0x1c0>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <UART_SetConfig+0x1a8>
 8009892:	2b40      	cmp	r3, #64	@ 0x40
 8009894:	d006      	beq.n	80098a4 <UART_SetConfig+0x1b4>
 8009896:	e00b      	b.n	80098b0 <UART_SetConfig+0x1c0>
 8009898:	2300      	movs	r3, #0
 800989a:	77fb      	strb	r3, [r7, #31]
 800989c:	e0cc      	b.n	8009a38 <UART_SetConfig+0x348>
 800989e:	2302      	movs	r3, #2
 80098a0:	77fb      	strb	r3, [r7, #31]
 80098a2:	e0c9      	b.n	8009a38 <UART_SetConfig+0x348>
 80098a4:	2304      	movs	r3, #4
 80098a6:	77fb      	strb	r3, [r7, #31]
 80098a8:	e0c6      	b.n	8009a38 <UART_SetConfig+0x348>
 80098aa:	2308      	movs	r3, #8
 80098ac:	77fb      	strb	r3, [r7, #31]
 80098ae:	e0c3      	b.n	8009a38 <UART_SetConfig+0x348>
 80098b0:	2310      	movs	r3, #16
 80098b2:	77fb      	strb	r3, [r7, #31]
 80098b4:	e0c0      	b.n	8009a38 <UART_SetConfig+0x348>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a44      	ldr	r2, [pc, #272]	@ (80099cc <UART_SetConfig+0x2dc>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d125      	bne.n	800990c <UART_SetConfig+0x21c>
 80098c0:	4b3e      	ldr	r3, [pc, #248]	@ (80099bc <UART_SetConfig+0x2cc>)
 80098c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098ce:	d017      	beq.n	8009900 <UART_SetConfig+0x210>
 80098d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098d4:	d817      	bhi.n	8009906 <UART_SetConfig+0x216>
 80098d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098da:	d00b      	beq.n	80098f4 <UART_SetConfig+0x204>
 80098dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e0:	d811      	bhi.n	8009906 <UART_SetConfig+0x216>
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <UART_SetConfig+0x1fe>
 80098e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ea:	d006      	beq.n	80098fa <UART_SetConfig+0x20a>
 80098ec:	e00b      	b.n	8009906 <UART_SetConfig+0x216>
 80098ee:	2300      	movs	r3, #0
 80098f0:	77fb      	strb	r3, [r7, #31]
 80098f2:	e0a1      	b.n	8009a38 <UART_SetConfig+0x348>
 80098f4:	2302      	movs	r3, #2
 80098f6:	77fb      	strb	r3, [r7, #31]
 80098f8:	e09e      	b.n	8009a38 <UART_SetConfig+0x348>
 80098fa:	2304      	movs	r3, #4
 80098fc:	77fb      	strb	r3, [r7, #31]
 80098fe:	e09b      	b.n	8009a38 <UART_SetConfig+0x348>
 8009900:	2308      	movs	r3, #8
 8009902:	77fb      	strb	r3, [r7, #31]
 8009904:	e098      	b.n	8009a38 <UART_SetConfig+0x348>
 8009906:	2310      	movs	r3, #16
 8009908:	77fb      	strb	r3, [r7, #31]
 800990a:	e095      	b.n	8009a38 <UART_SetConfig+0x348>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a2f      	ldr	r2, [pc, #188]	@ (80099d0 <UART_SetConfig+0x2e0>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d125      	bne.n	8009962 <UART_SetConfig+0x272>
 8009916:	4b29      	ldr	r3, [pc, #164]	@ (80099bc <UART_SetConfig+0x2cc>)
 8009918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009924:	d017      	beq.n	8009956 <UART_SetConfig+0x266>
 8009926:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800992a:	d817      	bhi.n	800995c <UART_SetConfig+0x26c>
 800992c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009930:	d00b      	beq.n	800994a <UART_SetConfig+0x25a>
 8009932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009936:	d811      	bhi.n	800995c <UART_SetConfig+0x26c>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <UART_SetConfig+0x254>
 800993c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009940:	d006      	beq.n	8009950 <UART_SetConfig+0x260>
 8009942:	e00b      	b.n	800995c <UART_SetConfig+0x26c>
 8009944:	2301      	movs	r3, #1
 8009946:	77fb      	strb	r3, [r7, #31]
 8009948:	e076      	b.n	8009a38 <UART_SetConfig+0x348>
 800994a:	2302      	movs	r3, #2
 800994c:	77fb      	strb	r3, [r7, #31]
 800994e:	e073      	b.n	8009a38 <UART_SetConfig+0x348>
 8009950:	2304      	movs	r3, #4
 8009952:	77fb      	strb	r3, [r7, #31]
 8009954:	e070      	b.n	8009a38 <UART_SetConfig+0x348>
 8009956:	2308      	movs	r3, #8
 8009958:	77fb      	strb	r3, [r7, #31]
 800995a:	e06d      	b.n	8009a38 <UART_SetConfig+0x348>
 800995c:	2310      	movs	r3, #16
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e06a      	b.n	8009a38 <UART_SetConfig+0x348>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a1b      	ldr	r2, [pc, #108]	@ (80099d4 <UART_SetConfig+0x2e4>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d138      	bne.n	80099de <UART_SetConfig+0x2ee>
 800996c:	4b13      	ldr	r3, [pc, #76]	@ (80099bc <UART_SetConfig+0x2cc>)
 800996e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009972:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009976:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800997a:	d017      	beq.n	80099ac <UART_SetConfig+0x2bc>
 800997c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009980:	d82a      	bhi.n	80099d8 <UART_SetConfig+0x2e8>
 8009982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009986:	d00b      	beq.n	80099a0 <UART_SetConfig+0x2b0>
 8009988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800998c:	d824      	bhi.n	80099d8 <UART_SetConfig+0x2e8>
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <UART_SetConfig+0x2aa>
 8009992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009996:	d006      	beq.n	80099a6 <UART_SetConfig+0x2b6>
 8009998:	e01e      	b.n	80099d8 <UART_SetConfig+0x2e8>
 800999a:	2300      	movs	r3, #0
 800999c:	77fb      	strb	r3, [r7, #31]
 800999e:	e04b      	b.n	8009a38 <UART_SetConfig+0x348>
 80099a0:	2302      	movs	r3, #2
 80099a2:	77fb      	strb	r3, [r7, #31]
 80099a4:	e048      	b.n	8009a38 <UART_SetConfig+0x348>
 80099a6:	2304      	movs	r3, #4
 80099a8:	77fb      	strb	r3, [r7, #31]
 80099aa:	e045      	b.n	8009a38 <UART_SetConfig+0x348>
 80099ac:	2308      	movs	r3, #8
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	e042      	b.n	8009a38 <UART_SetConfig+0x348>
 80099b2:	bf00      	nop
 80099b4:	efff69f3 	.word	0xefff69f3
 80099b8:	40011000 	.word	0x40011000
 80099bc:	40023800 	.word	0x40023800
 80099c0:	40004400 	.word	0x40004400
 80099c4:	40004800 	.word	0x40004800
 80099c8:	40004c00 	.word	0x40004c00
 80099cc:	40005000 	.word	0x40005000
 80099d0:	40011400 	.word	0x40011400
 80099d4:	40007800 	.word	0x40007800
 80099d8:	2310      	movs	r3, #16
 80099da:	77fb      	strb	r3, [r7, #31]
 80099dc:	e02c      	b.n	8009a38 <UART_SetConfig+0x348>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a72      	ldr	r2, [pc, #456]	@ (8009bac <UART_SetConfig+0x4bc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d125      	bne.n	8009a34 <UART_SetConfig+0x344>
 80099e8:	4b71      	ldr	r3, [pc, #452]	@ (8009bb0 <UART_SetConfig+0x4c0>)
 80099ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80099f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80099f6:	d017      	beq.n	8009a28 <UART_SetConfig+0x338>
 80099f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80099fc:	d817      	bhi.n	8009a2e <UART_SetConfig+0x33e>
 80099fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a02:	d00b      	beq.n	8009a1c <UART_SetConfig+0x32c>
 8009a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a08:	d811      	bhi.n	8009a2e <UART_SetConfig+0x33e>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <UART_SetConfig+0x326>
 8009a0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a12:	d006      	beq.n	8009a22 <UART_SetConfig+0x332>
 8009a14:	e00b      	b.n	8009a2e <UART_SetConfig+0x33e>
 8009a16:	2300      	movs	r3, #0
 8009a18:	77fb      	strb	r3, [r7, #31]
 8009a1a:	e00d      	b.n	8009a38 <UART_SetConfig+0x348>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e00a      	b.n	8009a38 <UART_SetConfig+0x348>
 8009a22:	2304      	movs	r3, #4
 8009a24:	77fb      	strb	r3, [r7, #31]
 8009a26:	e007      	b.n	8009a38 <UART_SetConfig+0x348>
 8009a28:	2308      	movs	r3, #8
 8009a2a:	77fb      	strb	r3, [r7, #31]
 8009a2c:	e004      	b.n	8009a38 <UART_SetConfig+0x348>
 8009a2e:	2310      	movs	r3, #16
 8009a30:	77fb      	strb	r3, [r7, #31]
 8009a32:	e001      	b.n	8009a38 <UART_SetConfig+0x348>
 8009a34:	2310      	movs	r3, #16
 8009a36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a40:	d15b      	bne.n	8009afa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009a42:	7ffb      	ldrb	r3, [r7, #31]
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d828      	bhi.n	8009a9a <UART_SetConfig+0x3aa>
 8009a48:	a201      	add	r2, pc, #4	@ (adr r2, 8009a50 <UART_SetConfig+0x360>)
 8009a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4e:	bf00      	nop
 8009a50:	08009a75 	.word	0x08009a75
 8009a54:	08009a7d 	.word	0x08009a7d
 8009a58:	08009a85 	.word	0x08009a85
 8009a5c:	08009a9b 	.word	0x08009a9b
 8009a60:	08009a8b 	.word	0x08009a8b
 8009a64:	08009a9b 	.word	0x08009a9b
 8009a68:	08009a9b 	.word	0x08009a9b
 8009a6c:	08009a9b 	.word	0x08009a9b
 8009a70:	08009a93 	.word	0x08009a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a74:	f7fc fb34 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8009a78:	61b8      	str	r0, [r7, #24]
        break;
 8009a7a:	e013      	b.n	8009aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a7c:	f7fc fb44 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 8009a80:	61b8      	str	r0, [r7, #24]
        break;
 8009a82:	e00f      	b.n	8009aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a84:	4b4b      	ldr	r3, [pc, #300]	@ (8009bb4 <UART_SetConfig+0x4c4>)
 8009a86:	61bb      	str	r3, [r7, #24]
        break;
 8009a88:	e00c      	b.n	8009aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a8a:	f7fc fa17 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8009a8e:	61b8      	str	r0, [r7, #24]
        break;
 8009a90:	e008      	b.n	8009aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a96:	61bb      	str	r3, [r7, #24]
        break;
 8009a98:	e004      	b.n	8009aa4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8009aa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d074      	beq.n	8009b94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	005a      	lsls	r2, r3, #1
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	085b      	lsrs	r3, r3, #1
 8009ab4:	441a      	add	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	2b0f      	cmp	r3, #15
 8009ac4:	d916      	bls.n	8009af4 <UART_SetConfig+0x404>
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009acc:	d212      	bcs.n	8009af4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f023 030f 	bic.w	r3, r3, #15
 8009ad6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	085b      	lsrs	r3, r3, #1
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	f003 0307 	and.w	r3, r3, #7
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	89fb      	ldrh	r3, [r7, #14]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	89fa      	ldrh	r2, [r7, #14]
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	e04f      	b.n	8009b94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	77bb      	strb	r3, [r7, #30]
 8009af8:	e04c      	b.n	8009b94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009afa:	7ffb      	ldrb	r3, [r7, #31]
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	d828      	bhi.n	8009b52 <UART_SetConfig+0x462>
 8009b00:	a201      	add	r2, pc, #4	@ (adr r2, 8009b08 <UART_SetConfig+0x418>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b35 	.word	0x08009b35
 8009b10:	08009b3d 	.word	0x08009b3d
 8009b14:	08009b53 	.word	0x08009b53
 8009b18:	08009b43 	.word	0x08009b43
 8009b1c:	08009b53 	.word	0x08009b53
 8009b20:	08009b53 	.word	0x08009b53
 8009b24:	08009b53 	.word	0x08009b53
 8009b28:	08009b4b 	.word	0x08009b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b2c:	f7fc fad8 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8009b30:	61b8      	str	r0, [r7, #24]
        break;
 8009b32:	e013      	b.n	8009b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b34:	f7fc fae8 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 8009b38:	61b8      	str	r0, [r7, #24]
        break;
 8009b3a:	e00f      	b.n	8009b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb4 <UART_SetConfig+0x4c4>)
 8009b3e:	61bb      	str	r3, [r7, #24]
        break;
 8009b40:	e00c      	b.n	8009b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b42:	f7fc f9bb 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8009b46:	61b8      	str	r0, [r7, #24]
        break;
 8009b48:	e008      	b.n	8009b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b4e:	61bb      	str	r3, [r7, #24]
        break;
 8009b50:	e004      	b.n	8009b5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	77bb      	strb	r3, [r7, #30]
        break;
 8009b5a:	bf00      	nop
    }

    if (pclk != 0U)
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d018      	beq.n	8009b94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	085a      	lsrs	r2, r3, #1
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	441a      	add	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b0f      	cmp	r3, #15
 8009b7a:	d909      	bls.n	8009b90 <UART_SetConfig+0x4a0>
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b82:	d205      	bcs.n	8009b90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60da      	str	r2, [r3, #12]
 8009b8e:	e001      	b.n	8009b94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009ba0:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3720      	adds	r7, #32
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	40007c00 	.word	0x40007c00
 8009bb0:	40023800 	.word	0x40023800
 8009bb4:	00f42400 	.word	0x00f42400

08009bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc4:	f003 0308 	and.w	r3, r3, #8
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00a      	beq.n	8009be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	430a      	orrs	r2, r1
 8009c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4c:	f003 0310 	and.w	r3, r3, #16
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00a      	beq.n	8009c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6e:	f003 0320 	and.w	r3, r3, #32
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d01a      	beq.n	8009cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cb6:	d10a      	bne.n	8009cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	430a      	orrs	r2, r1
 8009ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	430a      	orrs	r2, r1
 8009cee:	605a      	str	r2, [r3, #4]
  }
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	@ 0x30
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d0c:	f7fa f804 	bl	8003d18 <HAL_GetTick>
 8009d10:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d12e      	bne.n	8009d7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f83b 	bl	8009daa <UART_WaitOnFlagUntilTimeout>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d021      	beq.n	8009d7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	e853 3f00 	ldrex	r3, [r3]
 8009d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d4e:	623b      	str	r3, [r7, #32]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	69b9      	ldr	r1, [r7, #24]
 8009d5e:	69fa      	ldr	r2, [r7, #28]
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	617b      	str	r3, [r7, #20]
   return(result);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e6      	bne.n	8009d3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e011      	b.n	8009da2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3728      	adds	r7, #40	@ 0x28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	603b      	str	r3, [r7, #0]
 8009db6:	4613      	mov	r3, r2
 8009db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dba:	e04f      	b.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d04b      	beq.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dc4:	f7f9 ffa8 	bl	8003d18 <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d302      	bcc.n	8009dda <UART_WaitOnFlagUntilTimeout+0x30>
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e04e      	b.n	8009e7c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d037      	beq.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b80      	cmp	r3, #128	@ 0x80
 8009df0:	d034      	beq.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xb2>
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b40      	cmp	r3, #64	@ 0x40
 8009df6:	d031      	beq.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	f003 0308 	and.w	r3, r3, #8
 8009e02:	2b08      	cmp	r3, #8
 8009e04:	d110      	bne.n	8009e28 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2208      	movs	r2, #8
 8009e0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f000 f8fe 	bl	800a010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2208      	movs	r2, #8
 8009e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e029      	b.n	8009e7c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e36:	d111      	bne.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 f8e4 	bl	800a010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e00f      	b.n	8009e7c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69da      	ldr	r2, [r3, #28]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	4013      	ands	r3, r2
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	bf0c      	ite	eq
 8009e6c:	2301      	moveq	r3, #1
 8009e6e:	2300      	movne	r3, #0
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d0a0      	beq.n	8009dbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b096      	sub	sp, #88	@ 0x58
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	88fa      	ldrh	r2, [r7, #6]
 8009e9c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2222      	movs	r2, #34	@ 0x22
 8009eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d028      	beq.n	8009f0a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8009fb8 <UART_Start_Receive_DMA+0x134>)
 8009ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ec4:	4a3d      	ldr	r2, [pc, #244]	@ (8009fbc <UART_Start_Receive_DMA+0x138>)
 8009ec6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8009fc0 <UART_Start_Receive_DMA+0x13c>)
 8009ece:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3324      	adds	r3, #36	@ 0x24
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ee8:	461a      	mov	r2, r3
 8009eea:	88fb      	ldrh	r3, [r7, #6]
 8009eec:	f7fa f904 	bl	80040f8 <HAL_DMA_Start_IT>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d009      	beq.n	8009f0a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2210      	movs	r2, #16
 8009efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e051      	b.n	8009fae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d018      	beq.n	8009f44 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f26:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f32:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e6      	bne.n	8009f12 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3308      	adds	r3, #8
 8009f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4e:	e853 3f00 	ldrex	r3, [r3]
 8009f52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3308      	adds	r3, #8
 8009f62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f64:	637a      	str	r2, [r7, #52]	@ 0x34
 8009f66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f6c:	e841 2300 	strex	r3, r2, [r1]
 8009f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1e5      	bne.n	8009f44 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	e853 3f00 	ldrex	r3, [r3]
 8009f86:	613b      	str	r3, [r7, #16]
   return(result);
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3308      	adds	r3, #8
 8009f96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f98:	623a      	str	r2, [r7, #32]
 8009f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9c:	69f9      	ldr	r1, [r7, #28]
 8009f9e:	6a3a      	ldr	r2, [r7, #32]
 8009fa0:	e841 2300 	strex	r3, r2, [r1]
 8009fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e5      	bne.n	8009f78 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3758      	adds	r7, #88	@ 0x58
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800a0d9 	.word	0x0800a0d9
 8009fbc:	0800a201 	.word	0x0800a201
 8009fc0:	0800a23f 	.word	0x0800a23f

08009fc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b089      	sub	sp, #36	@ 0x24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009fe0:	61fb      	str	r3, [r7, #28]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	61bb      	str	r3, [r7, #24]
 8009fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6979      	ldr	r1, [r7, #20]
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e6      	bne.n	8009fcc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a004:	bf00      	nop
 800a006:	3724      	adds	r7, #36	@ 0x24
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a010:	b480      	push	{r7}
 800a012:	b095      	sub	sp, #84	@ 0x54
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a02c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a036:	643b      	str	r3, [r7, #64]	@ 0x40
 800a038:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a03c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e6      	bne.n	800a018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3308      	adds	r3, #8
 800a050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	e853 3f00 	ldrex	r3, [r3]
 800a058:	61fb      	str	r3, [r7, #28]
   return(result);
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	f023 0301 	bic.w	r3, r3, #1
 800a060:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3308      	adds	r3, #8
 800a068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a06a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a06c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e5      	bne.n	800a04a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a082:	2b01      	cmp	r3, #1
 800a084:	d118      	bne.n	800a0b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	60bb      	str	r3, [r7, #8]
   return(result);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f023 0310 	bic.w	r3, r3, #16
 800a09a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0a4:	61bb      	str	r3, [r7, #24]
 800a0a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6979      	ldr	r1, [r7, #20]
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e6      	bne.n	800a086 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a0cc:	bf00      	nop
 800a0ce:	3754      	adds	r7, #84	@ 0x54
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b09c      	sub	sp, #112	@ 0x70
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0ee:	d071      	beq.n	800a1d4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a0f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a10c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a10e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a116:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a118:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a11c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e6      	bne.n	800a0f8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a12a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3308      	adds	r3, #8
 800a130:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a13c:	f023 0301 	bic.w	r3, r3, #1
 800a140:	667b      	str	r3, [r7, #100]	@ 0x64
 800a142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3308      	adds	r3, #8
 800a148:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a14a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a14c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e5      	bne.n	800a12a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a15e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	623b      	str	r3, [r7, #32]
   return(result);
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a174:	663b      	str	r3, [r7, #96]	@ 0x60
 800a176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a17e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e5      	bne.n	800a15e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a194:	2220      	movs	r2, #32
 800a196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a19a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a19c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d118      	bne.n	800a1d4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f023 0310 	bic.w	r3, r3, #16
 800a1b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1c0:	61fb      	str	r3, [r7, #28]
 800a1c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c4:	69b9      	ldr	r1, [r7, #24]
 800a1c6:	69fa      	ldr	r2, [r7, #28]
 800a1c8:	e841 2300 	strex	r3, r2, [r1]
 800a1cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e6      	bne.n	800a1a2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d107      	bne.n	800a1f2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1ec:	f7ff fa74 	bl	80096d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1f0:	e002      	b.n	800a1f8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a1f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1f4:	f7f8 f82a 	bl	800224c <HAL_UART_RxCpltCallback>
}
 800a1f8:	bf00      	nop
 800a1fa:	3770      	adds	r7, #112	@ 0x70
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a20c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2201      	movs	r2, #1
 800a212:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d109      	bne.n	800a230 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a222:	085b      	lsrs	r3, r3, #1
 800a224:	b29b      	uxth	r3, r3
 800a226:	4619      	mov	r1, r3
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff fa55 	bl	80096d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a22e:	e002      	b.n	800a236 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f7ff fa3d 	bl	80096b0 <HAL_UART_RxHalfCpltCallback>
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b086      	sub	sp, #24
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a24a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a250:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a258:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a264:	2b80      	cmp	r3, #128	@ 0x80
 800a266:	d109      	bne.n	800a27c <UART_DMAError+0x3e>
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	2b21      	cmp	r3, #33	@ 0x21
 800a26c:	d106      	bne.n	800a27c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2200      	movs	r2, #0
 800a272:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a276:	6978      	ldr	r0, [r7, #20]
 800a278:	f7ff fea4 	bl	8009fc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a286:	2b40      	cmp	r3, #64	@ 0x40
 800a288:	d109      	bne.n	800a29e <UART_DMAError+0x60>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b22      	cmp	r3, #34	@ 0x22
 800a28e:	d106      	bne.n	800a29e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	2200      	movs	r2, #0
 800a294:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a298:	6978      	ldr	r0, [r7, #20]
 800a29a:	f7ff feb9 	bl	800a010 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2a4:	f043 0210 	orr.w	r2, r3, #16
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2ae:	6978      	ldr	r0, [r7, #20]
 800a2b0:	f7ff fa08 	bl	80096c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2b4:	bf00      	nop
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7ff f9f2 	bl	80096c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2e0:	bf00      	nop
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a304:	61fb      	str	r3, [r7, #28]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	61bb      	str	r3, [r7, #24]
 800a310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	6979      	ldr	r1, [r7, #20]
 800a314:	69ba      	ldr	r2, [r7, #24]
 800a316:	e841 2300 	strex	r3, r2, [r1]
 800a31a:	613b      	str	r3, [r7, #16]
   return(result);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1e6      	bne.n	800a2f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2220      	movs	r2, #32
 800a326:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff f9b4 	bl	800969c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a334:	bf00      	nop
 800a336:	3720      	adds	r7, #32
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a33c:	b084      	sub	sp, #16
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	f107 001c 	add.w	r0, r7, #28
 800a34a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a34e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a352:	2b01      	cmp	r3, #1
 800a354:	d121      	bne.n	800a39a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	4b21      	ldr	r3, [pc, #132]	@ (800a3ec <USB_CoreInit+0xb0>)
 800a368:	4013      	ands	r3, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a37a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d105      	bne.n	800a38e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fa92 	bl	800a8b8 <USB_CoreReset>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]
 800a398:	e010      	b.n	800a3bc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fa86 	bl	800a8b8 <USB_CoreReset>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a3bc:	7fbb      	ldrb	r3, [r7, #30]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d10b      	bne.n	800a3da <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f043 0206 	orr.w	r2, r3, #6
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f043 0220 	orr.w	r2, r3, #32
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3e6:	b004      	add	sp, #16
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	ffbdffbf 	.word	0xffbdffbf

0800a3f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f023 0201 	bic.w	r2, r3, #1
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	460b      	mov	r3, r1
 800a41c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d115      	bne.n	800a460 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a440:	200a      	movs	r0, #10
 800a442:	f7f9 fc75 	bl	8003d30 <HAL_Delay>
      ms += 10U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	330a      	adds	r3, #10
 800a44a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa25 	bl	800a89c <USB_GetMode>
 800a452:	4603      	mov	r3, r0
 800a454:	2b01      	cmp	r3, #1
 800a456:	d01e      	beq.n	800a496 <USB_SetCurrentMode+0x84>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a45c:	d9f0      	bls.n	800a440 <USB_SetCurrentMode+0x2e>
 800a45e:	e01a      	b.n	800a496 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d115      	bne.n	800a492 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a472:	200a      	movs	r0, #10
 800a474:	f7f9 fc5c 	bl	8003d30 <HAL_Delay>
      ms += 10U;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	330a      	adds	r3, #10
 800a47c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fa0c 	bl	800a89c <USB_GetMode>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <USB_SetCurrentMode+0x84>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a48e:	d9f0      	bls.n	800a472 <USB_SetCurrentMode+0x60>
 800a490:	e001      	b.n	800a496 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e005      	b.n	800a4a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2bc8      	cmp	r3, #200	@ 0xc8
 800a49a:	d101      	bne.n	800a4a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e000      	b.n	800a4a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b086      	sub	sp, #24
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a4ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	613b      	str	r3, [r7, #16]
 800a4ca:	e009      	b.n	800a4e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	3340      	adds	r3, #64	@ 0x40
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	613b      	str	r3, [r7, #16]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b0e      	cmp	r3, #14
 800a4e4:	d9f2      	bls.n	800a4cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a4e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d11c      	bne.n	800a528 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a506:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	e005      	b.n	800a534 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a52c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a53a:	461a      	mov	r2, r3
 800a53c:	2300      	movs	r3, #0
 800a53e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a540:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a544:	2b01      	cmp	r3, #1
 800a546:	d10d      	bne.n	800a564 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a550:	2100      	movs	r1, #0
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f968 	bl	800a828 <USB_SetDevSpeed>
 800a558:	e008      	b.n	800a56c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a55a:	2101      	movs	r1, #1
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f963 	bl	800a828 <USB_SetDevSpeed>
 800a562:	e003      	b.n	800a56c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a564:	2103      	movs	r1, #3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f95e 	bl	800a828 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a56c:	2110      	movs	r1, #16
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f8fa 	bl	800a768 <USB_FlushTxFifo>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f924 	bl	800a7cc <USB_FlushRxFifo>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a594:	461a      	mov	r2, r3
 800a596:	2300      	movs	r3, #0
 800a598:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	613b      	str	r3, [r7, #16]
 800a5b6:	e043      	b.n	800a640 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5ce:	d118      	bne.n	800a602 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10a      	bne.n	800a5ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	e013      	b.n	800a614 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	e008      	b.n	800a614 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a60e:	461a      	mov	r2, r3
 800a610:	2300      	movs	r3, #0
 800a612:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a620:	461a      	mov	r2, r3
 800a622:	2300      	movs	r3, #0
 800a624:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	015a      	lsls	r2, r3, #5
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4413      	add	r3, r2
 800a62e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a632:	461a      	mov	r2, r3
 800a634:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a638:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	3301      	adds	r3, #1
 800a63e:	613b      	str	r3, [r7, #16]
 800a640:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a644:	461a      	mov	r2, r3
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	4293      	cmp	r3, r2
 800a64a:	d3b5      	bcc.n	800a5b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a64c:	2300      	movs	r3, #0
 800a64e:	613b      	str	r3, [r7, #16]
 800a650:	e043      	b.n	800a6da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a668:	d118      	bne.n	800a69c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10a      	bne.n	800a686 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67c:	461a      	mov	r2, r3
 800a67e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	e013      	b.n	800a6ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a692:	461a      	mov	r2, r3
 800a694:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	e008      	b.n	800a6ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	2300      	movs	r3, #0
 800a6be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	015a      	lsls	r2, r3, #5
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a6d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a6de:	461a      	mov	r2, r3
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d3b5      	bcc.n	800a652 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a706:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a708:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d105      	bne.n	800a71c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	f043 0210 	orr.w	r2, r3, #16
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	699a      	ldr	r2, [r3, #24]
 800a720:	4b0f      	ldr	r3, [pc, #60]	@ (800a760 <USB_DevInit+0x2b4>)
 800a722:	4313      	orrs	r3, r2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a728:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	f043 0208 	orr.w	r2, r3, #8
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a73c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a740:	2b01      	cmp	r3, #1
 800a742:	d105      	bne.n	800a750 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	699a      	ldr	r2, [r3, #24]
 800a748:	4b06      	ldr	r3, [pc, #24]	@ (800a764 <USB_DevInit+0x2b8>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a750:	7dfb      	ldrb	r3, [r7, #23]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a75c:	b004      	add	sp, #16
 800a75e:	4770      	bx	lr
 800a760:	803c3800 	.word	0x803c3800
 800a764:	40000004 	.word	0x40000004

0800a768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a772:	2300      	movs	r3, #0
 800a774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3301      	adds	r3, #1
 800a77a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a782:	d901      	bls.n	800a788 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e01b      	b.n	800a7c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	daf2      	bge.n	800a776 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	019b      	lsls	r3, r3, #6
 800a798:	f043 0220 	orr.w	r2, r3, #32
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7ac:	d901      	bls.n	800a7b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e006      	b.n	800a7c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	f003 0320 	and.w	r3, r3, #32
 800a7ba:	2b20      	cmp	r3, #32
 800a7bc:	d0f0      	beq.n	800a7a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7e4:	d901      	bls.n	800a7ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e018      	b.n	800a81c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	daf2      	bge.n	800a7d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2210      	movs	r2, #16
 800a7fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3301      	adds	r3, #1
 800a800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a808:	d901      	bls.n	800a80e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e006      	b.n	800a81c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f003 0310 	and.w	r3, r3, #16
 800a816:	2b10      	cmp	r3, #16
 800a818:	d0f0      	beq.n	800a7fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a848:	4313      	orrs	r3, r2
 800a84a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b085      	sub	sp, #20
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a874:	f023 0303 	bic.w	r3, r3, #3
 800a878:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a888:	f043 0302 	orr.w	r3, r3, #2
 800a88c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8d0:	d901      	bls.n	800a8d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e01b      	b.n	800a90e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	daf2      	bge.n	800a8c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f043 0201 	orr.w	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8fa:	d901      	bls.n	800a900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e006      	b.n	800a90e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d0f0      	beq.n	800a8ee <USB_CoreReset+0x36>

  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
	...

0800a91c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a920:	4904      	ldr	r1, [pc, #16]	@ (800a934 <MX_FATFS_Init+0x18>)
 800a922:	4805      	ldr	r0, [pc, #20]	@ (800a938 <MX_FATFS_Init+0x1c>)
 800a924:	f000 fd94 	bl	800b450 <FATFS_LinkDriver>
 800a928:	4603      	mov	r3, r0
 800a92a:	461a      	mov	r2, r3
 800a92c:	4b03      	ldr	r3, [pc, #12]	@ (800a93c <MX_FATFS_Init+0x20>)
 800a92e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a930:	bf00      	nop
 800a932:	bd80      	pop	{r7, pc}
 800a934:	20000d74 	.word	0x20000d74
 800a938:	20000058 	.word	0x20000058
 800a93c:	20000d70 	.word	0x20000d70

0800a940 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 f9d7 	bl	800ad00 <USER_SPI_initialize>
 800a952:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fabd 	bl	800aee8 <USER_SPI_status>
 800a96e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	607a      	str	r2, [r7, #4]
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800a988:	7bf8      	ldrb	r0, [r7, #15]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	68b9      	ldr	r1, [r7, #8]
 800a990:	f000 fac0 	bl	800af14 <USER_SPI_read>
 800a994:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a9ae:	7bf8      	ldrb	r0, [r7, #15]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	f000 fb13 	bl	800afe0 <USER_SPI_write>
 800a9ba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	603a      	str	r2, [r7, #0]
 800a9ce:	71fb      	strb	r3, [r7, #7]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a9d4:	79b9      	ldrb	r1, [r7, #6]
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fb7c 	bl	800b0d8 <USER_SPI_ioctl>
 800a9e0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a9f4:	f7f9 f990 	bl	8003d18 <HAL_GetTick>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	4a04      	ldr	r2, [pc, #16]	@ (800aa0c <SPI_Timer_On+0x20>)
 800a9fc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a9fe:	4a04      	ldr	r2, [pc, #16]	@ (800aa10 <SPI_Timer_On+0x24>)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6013      	str	r3, [r2, #0]
}
 800aa04:	bf00      	nop
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	20000d7c 	.word	0x20000d7c
 800aa10:	20000d80 	.word	0x20000d80

0800aa14 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800aa14:	b580      	push	{r7, lr}
 800aa16:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800aa18:	f7f9 f97e 	bl	8003d18 <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <SPI_Timer_Status+0x24>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	1ad2      	subs	r2, r2, r3
 800aa24:	4b05      	ldr	r3, [pc, #20]	@ (800aa3c <SPI_Timer_Status+0x28>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	bf34      	ite	cc
 800aa2c:	2301      	movcc	r3, #1
 800aa2e:	2300      	movcs	r3, #0
 800aa30:	b2db      	uxtb	r3, r3
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20000d7c 	.word	0x20000d7c
 800aa3c:	20000d80 	.word	0x20000d80

0800aa40 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af02      	add	r7, sp, #8
 800aa46:	4603      	mov	r3, r0
 800aa48:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800aa4a:	f107 020f 	add.w	r2, r7, #15
 800aa4e:	1df9      	adds	r1, r7, #7
 800aa50:	2332      	movs	r3, #50	@ 0x32
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	2301      	movs	r3, #1
 800aa56:	4804      	ldr	r0, [pc, #16]	@ (800aa68 <xchg_spi+0x28>)
 800aa58:	f7fc f97a 	bl	8006d50 <HAL_SPI_TransmitReceive>
    return rxDat;
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	2000017c 	.word	0x2000017c

0800aa6c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800aa6c:	b590      	push	{r4, r7, lr}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800aa76:	2300      	movs	r3, #0
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	e00a      	b.n	800aa92 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	18d4      	adds	r4, r2, r3
 800aa82:	20ff      	movs	r0, #255	@ 0xff
 800aa84:	f7ff ffdc 	bl	800aa40 <xchg_spi>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d3f0      	bcc.n	800aa7c <rcvr_spi_multi+0x10>
	}
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd90      	pop	{r4, r7, pc}

0800aaa4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	f04f 33ff 	mov.w	r3, #4294967295
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	4803      	ldr	r0, [pc, #12]	@ (800aac8 <xmit_spi_multi+0x24>)
 800aaba:	f7fb ffd4 	bl	8006a66 <HAL_SPI_Transmit>
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	2000017c 	.word	0x2000017c

0800aacc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800aad4:	f7f9 f920 	bl	8003d18 <HAL_GetTick>
 800aad8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800aade:	20ff      	movs	r0, #255	@ 0xff
 800aae0:	f7ff ffae 	bl	800aa40 <xchg_spi>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	2bff      	cmp	r3, #255	@ 0xff
 800aaec:	d007      	beq.n	800aafe <wait_ready+0x32>
 800aaee:	f7f9 f913 	bl	8003d18 <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d8ef      	bhi.n	800aade <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	2bff      	cmp	r3, #255	@ 0xff
 800ab02:	bf0c      	ite	eq
 800ab04:	2301      	moveq	r3, #1
 800ab06:	2300      	movne	r3, #0
 800ab08:	b2db      	uxtb	r3, r3
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ab1e:	4804      	ldr	r0, [pc, #16]	@ (800ab30 <despiselect+0x1c>)
 800ab20:	f7fa f80a 	bl	8004b38 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800ab24:	20ff      	movs	r0, #255	@ 0xff
 800ab26:	f7ff ff8b 	bl	800aa40 <xchg_spi>

}
 800ab2a:	bf00      	nop
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	40020c00 	.word	0x40020c00

0800ab34 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ab3e:	480a      	ldr	r0, [pc, #40]	@ (800ab68 <spiselect+0x34>)
 800ab40:	f7f9 fffa 	bl	8004b38 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800ab44:	20ff      	movs	r0, #255	@ 0xff
 800ab46:	f7ff ff7b 	bl	800aa40 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800ab4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ab4e:	f7ff ffbd 	bl	800aacc <wait_ready>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <spiselect+0x28>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e002      	b.n	800ab62 <spiselect+0x2e>

	despiselect();
 800ab5c:	f7ff ffda 	bl	800ab14 <despiselect>
	return 0;	/* Timeout */
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	40020c00 	.word	0x40020c00

0800ab6c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800ab76:	20c8      	movs	r0, #200	@ 0xc8
 800ab78:	f7ff ff38 	bl	800a9ec <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800ab7c:	20ff      	movs	r0, #255	@ 0xff
 800ab7e:	f7ff ff5f 	bl	800aa40 <xchg_spi>
 800ab82:	4603      	mov	r3, r0
 800ab84:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	2bff      	cmp	r3, #255	@ 0xff
 800ab8a:	d104      	bne.n	800ab96 <rcvr_datablock+0x2a>
 800ab8c:	f7ff ff42 	bl	800aa14 <SPI_Timer_Status>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1f2      	bne.n	800ab7c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	2bfe      	cmp	r3, #254	@ 0xfe
 800ab9a:	d001      	beq.n	800aba0 <rcvr_datablock+0x34>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	e00a      	b.n	800abb6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff ff62 	bl	800aa6c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800aba8:	20ff      	movs	r0, #255	@ 0xff
 800abaa:	f7ff ff49 	bl	800aa40 <xchg_spi>
 800abae:	20ff      	movs	r0, #255	@ 0xff
 800abb0:	f7ff ff46 	bl	800aa40 <xchg_spi>

	return 1;						/* Function succeeded */
 800abb4:	2301      	movs	r3, #1
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800abca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800abce:	f7ff ff7d 	bl	800aacc <wait_ready>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <xmit_datablock+0x1e>
 800abd8:	2300      	movs	r3, #0
 800abda:	e01e      	b.n	800ac1a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff ff2e 	bl	800aa40 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	2bfd      	cmp	r3, #253	@ 0xfd
 800abe8:	d016      	beq.n	800ac18 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800abea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff ff58 	bl	800aaa4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800abf4:	20ff      	movs	r0, #255	@ 0xff
 800abf6:	f7ff ff23 	bl	800aa40 <xchg_spi>
 800abfa:	20ff      	movs	r0, #255	@ 0xff
 800abfc:	f7ff ff20 	bl	800aa40 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800ac00:	20ff      	movs	r0, #255	@ 0xff
 800ac02:	f7ff ff1d 	bl	800aa40 <xchg_spi>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	f003 031f 	and.w	r3, r3, #31
 800ac10:	2b05      	cmp	r3, #5
 800ac12:	d001      	beq.n	800ac18 <xmit_datablock+0x5a>
 800ac14:	2300      	movs	r3, #0
 800ac16:	e000      	b.n	800ac1a <xmit_datablock+0x5c>
	}
	return 1;
 800ac18:	2301      	movs	r3, #1
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	4603      	mov	r3, r0
 800ac2a:	6039      	str	r1, [r7, #0]
 800ac2c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800ac2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	da0e      	bge.n	800ac54 <send_cmd+0x32>
		cmd &= 0x7F;
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac3c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800ac3e:	2100      	movs	r1, #0
 800ac40:	2037      	movs	r0, #55	@ 0x37
 800ac42:	f7ff ffee 	bl	800ac22 <send_cmd>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d901      	bls.n	800ac54 <send_cmd+0x32>
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	e051      	b.n	800acf8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	2b0c      	cmp	r3, #12
 800ac58:	d008      	beq.n	800ac6c <send_cmd+0x4a>
		despiselect();
 800ac5a:	f7ff ff5b 	bl	800ab14 <despiselect>
		if (!spiselect()) return 0xFF;
 800ac5e:	f7ff ff69 	bl	800ab34 <spiselect>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <send_cmd+0x4a>
 800ac68:	23ff      	movs	r3, #255	@ 0xff
 800ac6a:	e045      	b.n	800acf8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800ac6c:	79fb      	ldrb	r3, [r7, #7]
 800ac6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff fee3 	bl	800aa40 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	0e1b      	lsrs	r3, r3, #24
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff fedd 	bl	800aa40 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	0c1b      	lsrs	r3, r3, #16
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7ff fed7 	bl	800aa40 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	0a1b      	lsrs	r3, r3, #8
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7ff fed1 	bl	800aa40 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff fecc 	bl	800aa40 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800aca8:	2301      	movs	r3, #1
 800acaa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <send_cmd+0x94>
 800acb2:	2395      	movs	r3, #149	@ 0x95
 800acb4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d101      	bne.n	800acc0 <send_cmd+0x9e>
 800acbc:	2387      	movs	r3, #135	@ 0x87
 800acbe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff febc 	bl	800aa40 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	2b0c      	cmp	r3, #12
 800accc:	d102      	bne.n	800acd4 <send_cmd+0xb2>
 800acce:	20ff      	movs	r0, #255	@ 0xff
 800acd0:	f7ff feb6 	bl	800aa40 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800acd4:	230a      	movs	r3, #10
 800acd6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800acd8:	20ff      	movs	r0, #255	@ 0xff
 800acda:	f7ff feb1 	bl	800aa40 <xchg_spi>
 800acde:	4603      	mov	r3, r0
 800ace0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800ace2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	da05      	bge.n	800acf6 <send_cmd+0xd4>
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	3b01      	subs	r3, #1
 800acee:	73fb      	strb	r3, [r7, #15]
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f0      	bne.n	800acd8 <send_cmd+0xb6>

	return res;							/* Return received response */
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <USER_SPI_initialize+0x14>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e0dc      	b.n	800aece <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800ad14:	4b70      	ldr	r3, [pc, #448]	@ (800aed8 <USER_SPI_initialize+0x1d8>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <USER_SPI_initialize+0x2a>
 800ad22:	4b6d      	ldr	r3, [pc, #436]	@ (800aed8 <USER_SPI_initialize+0x1d8>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	e0d1      	b.n	800aece <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800ad2a:	4b6b      	ldr	r3, [pc, #428]	@ (800aed8 <USER_SPI_initialize+0x1d8>)
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b6a      	ldr	r3, [pc, #424]	@ (800aedc <USER_SPI_initialize+0x1dc>)
 800ad34:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800ad36:	4b6a      	ldr	r3, [pc, #424]	@ (800aee0 <USER_SPI_initialize+0x1e0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800ad40:	4b67      	ldr	r3, [pc, #412]	@ (800aee0 <USER_SPI_initialize+0x1e0>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800ad48:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800ad4a:	230a      	movs	r3, #10
 800ad4c:	73fb      	strb	r3, [r7, #15]
 800ad4e:	e005      	b.n	800ad5c <USER_SPI_initialize+0x5c>
 800ad50:	20ff      	movs	r0, #255	@ 0xff
 800ad52:	f7ff fe75 	bl	800aa40 <xchg_spi>
 800ad56:	7bfb      	ldrb	r3, [r7, #15]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	73fb      	strb	r3, [r7, #15]
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f6      	bne.n	800ad50 <USER_SPI_initialize+0x50>

	ty = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800ad66:	2100      	movs	r1, #0
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f7ff ff5a 	bl	800ac22 <send_cmd>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	f040 808b 	bne.w	800ae8c <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800ad76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ad7a:	f7ff fe37 	bl	800a9ec <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800ad7e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800ad82:	2008      	movs	r0, #8
 800ad84:	f7ff ff4d 	bl	800ac22 <send_cmd>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d151      	bne.n	800ae32 <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]
 800ad92:	e00d      	b.n	800adb0 <USER_SPI_initialize+0xb0>
 800ad94:	7bfc      	ldrb	r4, [r7, #15]
 800ad96:	20ff      	movs	r0, #255	@ 0xff
 800ad98:	f7ff fe52 	bl	800aa40 <xchg_spi>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f104 0310 	add.w	r3, r4, #16
 800ada4:	443b      	add	r3, r7
 800ada6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
 800adac:	3301      	adds	r3, #1
 800adae:	73fb      	strb	r3, [r7, #15]
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d9ee      	bls.n	800ad94 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800adb6:	7abb      	ldrb	r3, [r7, #10]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d167      	bne.n	800ae8c <USER_SPI_initialize+0x18c>
 800adbc:	7afb      	ldrb	r3, [r7, #11]
 800adbe:	2baa      	cmp	r3, #170	@ 0xaa
 800adc0:	d164      	bne.n	800ae8c <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800adc2:	bf00      	nop
 800adc4:	f7ff fe26 	bl	800aa14 <SPI_Timer_Status>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d007      	beq.n	800adde <USER_SPI_initialize+0xde>
 800adce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800add2:	20a9      	movs	r0, #169	@ 0xa9
 800add4:	f7ff ff25 	bl	800ac22 <send_cmd>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1f2      	bne.n	800adc4 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800adde:	f7ff fe19 	bl	800aa14 <SPI_Timer_Status>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d051      	beq.n	800ae8c <USER_SPI_initialize+0x18c>
 800ade8:	2100      	movs	r1, #0
 800adea:	203a      	movs	r0, #58	@ 0x3a
 800adec:	f7ff ff19 	bl	800ac22 <send_cmd>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d14a      	bne.n	800ae8c <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
 800adfa:	e00d      	b.n	800ae18 <USER_SPI_initialize+0x118>
 800adfc:	7bfc      	ldrb	r4, [r7, #15]
 800adfe:	20ff      	movs	r0, #255	@ 0xff
 800ae00:	f7ff fe1e 	bl	800aa40 <xchg_spi>
 800ae04:	4603      	mov	r3, r0
 800ae06:	461a      	mov	r2, r3
 800ae08:	f104 0310 	add.w	r3, r4, #16
 800ae0c:	443b      	add	r3, r7
 800ae0e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
 800ae14:	3301      	adds	r3, #1
 800ae16:	73fb      	strb	r3, [r7, #15]
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d9ee      	bls.n	800adfc <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800ae1e:	7a3b      	ldrb	r3, [r7, #8]
 800ae20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <USER_SPI_initialize+0x12c>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	e000      	b.n	800ae2e <USER_SPI_initialize+0x12e>
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	737b      	strb	r3, [r7, #13]
 800ae30:	e02c      	b.n	800ae8c <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800ae32:	2100      	movs	r1, #0
 800ae34:	20a9      	movs	r0, #169	@ 0xa9
 800ae36:	f7ff fef4 	bl	800ac22 <send_cmd>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d804      	bhi.n	800ae4a <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800ae40:	2302      	movs	r3, #2
 800ae42:	737b      	strb	r3, [r7, #13]
 800ae44:	23a9      	movs	r3, #169	@ 0xa9
 800ae46:	73bb      	strb	r3, [r7, #14]
 800ae48:	e003      	b.n	800ae52 <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	737b      	strb	r3, [r7, #13]
 800ae4e:	2301      	movs	r3, #1
 800ae50:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800ae52:	bf00      	nop
 800ae54:	f7ff fdde 	bl	800aa14 <SPI_Timer_Status>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d007      	beq.n	800ae6e <USER_SPI_initialize+0x16e>
 800ae5e:	7bbb      	ldrb	r3, [r7, #14]
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7ff fedd 	bl	800ac22 <send_cmd>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1f2      	bne.n	800ae54 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800ae6e:	f7ff fdd1 	bl	800aa14 <SPI_Timer_Status>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d007      	beq.n	800ae88 <USER_SPI_initialize+0x188>
 800ae78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ae7c:	2010      	movs	r0, #16
 800ae7e:	f7ff fed0 	bl	800ac22 <send_cmd>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <USER_SPI_initialize+0x18c>
				ty = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800ae8c:	4a15      	ldr	r2, [pc, #84]	@ (800aee4 <USER_SPI_initialize+0x1e4>)
 800ae8e:	7b7b      	ldrb	r3, [r7, #13]
 800ae90:	7013      	strb	r3, [r2, #0]
	despiselect();
 800ae92:	f7ff fe3f 	bl	800ab14 <despiselect>

	if (ty) {			/* OK */
 800ae96:	7b7b      	ldrb	r3, [r7, #13]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d012      	beq.n	800aec2 <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800ae9c:	4b10      	ldr	r3, [pc, #64]	@ (800aee0 <USER_SPI_initialize+0x1e0>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800aea6:	4b0e      	ldr	r3, [pc, #56]	@ (800aee0 <USER_SPI_initialize+0x1e0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f042 0210 	orr.w	r2, r2, #16
 800aeae:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800aeb0:	4b09      	ldr	r3, [pc, #36]	@ (800aed8 <USER_SPI_initialize+0x1d8>)
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	f023 0301 	bic.w	r3, r3, #1
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	4b06      	ldr	r3, [pc, #24]	@ (800aed8 <USER_SPI_initialize+0x1d8>)
 800aebe:	701a      	strb	r2, [r3, #0]
 800aec0:	e002      	b.n	800aec8 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800aec2:	4b05      	ldr	r3, [pc, #20]	@ (800aed8 <USER_SPI_initialize+0x1d8>)
 800aec4:	2201      	movs	r2, #1
 800aec6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800aec8:	4b03      	ldr	r3, [pc, #12]	@ (800aed8 <USER_SPI_initialize+0x1d8>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	b2db      	uxtb	r3, r3
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd90      	pop	{r4, r7, pc}
 800aed6:	bf00      	nop
 800aed8:	2000006c 	.word	0x2000006c
 800aedc:	20000b84 	.word	0x20000b84
 800aee0:	2000017c 	.word	0x2000017c
 800aee4:	20000d78 	.word	0x20000d78

0800aee8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	4603      	mov	r3, r0
 800aef0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800aef2:	79fb      	ldrb	r3, [r7, #7]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <USER_SPI_status+0x14>
 800aef8:	2301      	movs	r3, #1
 800aefa:	e002      	b.n	800af02 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800aefc:	4b04      	ldr	r3, [pc, #16]	@ (800af10 <USER_SPI_status+0x28>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	b2db      	uxtb	r3, r3
}
 800af02:	4618      	mov	r0, r3
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	2000006c 	.word	0x2000006c

0800af14 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60b9      	str	r1, [r7, #8]
 800af1c:	607a      	str	r2, [r7, #4]
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	4603      	mov	r3, r0
 800af22:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d102      	bne.n	800af30 <USER_SPI_read+0x1c>
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <USER_SPI_read+0x20>
 800af30:	2304      	movs	r3, #4
 800af32:	e04d      	b.n	800afd0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800af34:	4b28      	ldr	r3, [pc, #160]	@ (800afd8 <USER_SPI_read+0xc4>)
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <USER_SPI_read+0x32>
 800af42:	2303      	movs	r3, #3
 800af44:	e044      	b.n	800afd0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800af46:	4b25      	ldr	r3, [pc, #148]	@ (800afdc <USER_SPI_read+0xc8>)
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	f003 0308 	and.w	r3, r3, #8
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d102      	bne.n	800af58 <USER_SPI_read+0x44>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	025b      	lsls	r3, r3, #9
 800af56:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d111      	bne.n	800af82 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	2011      	movs	r0, #17
 800af62:	f7ff fe5e 	bl	800ac22 <send_cmd>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d129      	bne.n	800afc0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800af6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af70:	68b8      	ldr	r0, [r7, #8]
 800af72:	f7ff fdfb 	bl	800ab6c <rcvr_datablock>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d021      	beq.n	800afc0 <USER_SPI_read+0xac>
			count = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	603b      	str	r3, [r7, #0]
 800af80:	e01e      	b.n	800afc0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800af82:	6879      	ldr	r1, [r7, #4]
 800af84:	2012      	movs	r0, #18
 800af86:	f7ff fe4c 	bl	800ac22 <send_cmd>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d117      	bne.n	800afc0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800af90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af94:	68b8      	ldr	r0, [r7, #8]
 800af96:	f7ff fde9 	bl	800ab6c <rcvr_datablock>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00a      	beq.n	800afb6 <USER_SPI_read+0xa2>
				buff += 512;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800afa6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	3b01      	subs	r3, #1
 800afac:	603b      	str	r3, [r7, #0]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1ed      	bne.n	800af90 <USER_SPI_read+0x7c>
 800afb4:	e000      	b.n	800afb8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800afb6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800afb8:	2100      	movs	r1, #0
 800afba:	200c      	movs	r0, #12
 800afbc:	f7ff fe31 	bl	800ac22 <send_cmd>
		}
	}
	despiselect();
 800afc0:	f7ff fda8 	bl	800ab14 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bf14      	ite	ne
 800afca:	2301      	movne	r3, #1
 800afcc:	2300      	moveq	r3, #0
 800afce:	b2db      	uxtb	r3, r3
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	2000006c 	.word	0x2000006c
 800afdc:	20000d78 	.word	0x20000d78

0800afe0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	607a      	str	r2, [r7, #4]
 800afea:	603b      	str	r3, [r7, #0]
 800afec:	4603      	mov	r3, r0
 800afee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <USER_SPI_write+0x1c>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <USER_SPI_write+0x20>
 800affc:	2304      	movs	r3, #4
 800affe:	e063      	b.n	800b0c8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b000:	4b33      	ldr	r3, [pc, #204]	@ (800b0d0 <USER_SPI_write+0xf0>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f003 0301 	and.w	r3, r3, #1
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <USER_SPI_write+0x32>
 800b00e:	2303      	movs	r3, #3
 800b010:	e05a      	b.n	800b0c8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b012:	4b2f      	ldr	r3, [pc, #188]	@ (800b0d0 <USER_SPI_write+0xf0>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	b2db      	uxtb	r3, r3
 800b018:	f003 0304 	and.w	r3, r3, #4
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <USER_SPI_write+0x44>
 800b020:	2302      	movs	r3, #2
 800b022:	e051      	b.n	800b0c8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b024:	4b2b      	ldr	r3, [pc, #172]	@ (800b0d4 <USER_SPI_write+0xf4>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f003 0308 	and.w	r3, r3, #8
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <USER_SPI_write+0x56>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	025b      	lsls	r3, r3, #9
 800b034:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d110      	bne.n	800b05e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	2018      	movs	r0, #24
 800b040:	f7ff fdef 	bl	800ac22 <send_cmd>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d136      	bne.n	800b0b8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b04a:	21fe      	movs	r1, #254	@ 0xfe
 800b04c:	68b8      	ldr	r0, [r7, #8]
 800b04e:	f7ff fdb6 	bl	800abbe <xmit_datablock>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d02f      	beq.n	800b0b8 <USER_SPI_write+0xd8>
			count = 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	e02c      	b.n	800b0b8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b05e:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d4 <USER_SPI_write+0xf4>)
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	f003 0306 	and.w	r3, r3, #6
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <USER_SPI_write+0x92>
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	2097      	movs	r0, #151	@ 0x97
 800b06e:	f7ff fdd8 	bl	800ac22 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	2019      	movs	r0, #25
 800b076:	f7ff fdd4 	bl	800ac22 <send_cmd>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d11b      	bne.n	800b0b8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b080:	21fc      	movs	r1, #252	@ 0xfc
 800b082:	68b8      	ldr	r0, [r7, #8]
 800b084:	f7ff fd9b 	bl	800abbe <xmit_datablock>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <USER_SPI_write+0xc4>
				buff += 512;
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b094:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	3b01      	subs	r3, #1
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1ee      	bne.n	800b080 <USER_SPI_write+0xa0>
 800b0a2:	e000      	b.n	800b0a6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b0a4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b0a6:	21fd      	movs	r1, #253	@ 0xfd
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	f7ff fd88 	bl	800abbe <xmit_datablock>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d101      	bne.n	800b0b8 <USER_SPI_write+0xd8>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b0b8:	f7ff fd2c 	bl	800ab14 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bf14      	ite	ne
 800b0c2:	2301      	movne	r3, #1
 800b0c4:	2300      	moveq	r3, #0
 800b0c6:	b2db      	uxtb	r3, r3
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	2000006c 	.word	0x2000006c
 800b0d4:	20000d78 	.word	0x20000d78

0800b0d8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08c      	sub	sp, #48	@ 0x30
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	603a      	str	r2, [r7, #0]
 800b0e2:	71fb      	strb	r3, [r7, #7]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b0e8:	79fb      	ldrb	r3, [r7, #7]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <USER_SPI_ioctl+0x1a>
 800b0ee:	2304      	movs	r3, #4
 800b0f0:	e15a      	b.n	800b3a8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b0f2:	4baf      	ldr	r3, [pc, #700]	@ (800b3b0 <USER_SPI_ioctl+0x2d8>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <USER_SPI_ioctl+0x2c>
 800b100:	2303      	movs	r3, #3
 800b102:	e151      	b.n	800b3a8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800b10a:	79bb      	ldrb	r3, [r7, #6]
 800b10c:	2b04      	cmp	r3, #4
 800b10e:	f200 8136 	bhi.w	800b37e <USER_SPI_ioctl+0x2a6>
 800b112:	a201      	add	r2, pc, #4	@ (adr r2, 800b118 <USER_SPI_ioctl+0x40>)
 800b114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b118:	0800b12d 	.word	0x0800b12d
 800b11c:	0800b141 	.word	0x0800b141
 800b120:	0800b37f 	.word	0x0800b37f
 800b124:	0800b1ed 	.word	0x0800b1ed
 800b128:	0800b2e3 	.word	0x0800b2e3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b12c:	f7ff fd02 	bl	800ab34 <spiselect>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 8127 	beq.w	800b386 <USER_SPI_ioctl+0x2ae>
 800b138:	2300      	movs	r3, #0
 800b13a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b13e:	e122      	b.n	800b386 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b140:	2100      	movs	r1, #0
 800b142:	2009      	movs	r0, #9
 800b144:	f7ff fd6d 	bl	800ac22 <send_cmd>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f040 811d 	bne.w	800b38a <USER_SPI_ioctl+0x2b2>
 800b150:	f107 030c 	add.w	r3, r7, #12
 800b154:	2110      	movs	r1, #16
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fd08 	bl	800ab6c <rcvr_datablock>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 8113 	beq.w	800b38a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b164:	7b3b      	ldrb	r3, [r7, #12]
 800b166:	099b      	lsrs	r3, r3, #6
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d111      	bne.n	800b192 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b16e:	7d7b      	ldrb	r3, [r7, #21]
 800b170:	461a      	mov	r2, r3
 800b172:	7d3b      	ldrb	r3, [r7, #20]
 800b174:	021b      	lsls	r3, r3, #8
 800b176:	4413      	add	r3, r2
 800b178:	461a      	mov	r2, r3
 800b17a:	7cfb      	ldrb	r3, [r7, #19]
 800b17c:	041b      	lsls	r3, r3, #16
 800b17e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b182:	4413      	add	r3, r2
 800b184:	3301      	adds	r3, #1
 800b186:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	029a      	lsls	r2, r3, #10
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	e028      	b.n	800b1e4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b192:	7c7b      	ldrb	r3, [r7, #17]
 800b194:	f003 030f 	and.w	r3, r3, #15
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	7dbb      	ldrb	r3, [r7, #22]
 800b19c:	09db      	lsrs	r3, r3, #7
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	4413      	add	r3, r2
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	7d7b      	ldrb	r3, [r7, #21]
 800b1a6:	005b      	lsls	r3, r3, #1
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	f003 0306 	and.w	r3, r3, #6
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	4413      	add	r3, r2
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	3302      	adds	r3, #2
 800b1b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b1ba:	7d3b      	ldrb	r3, [r7, #20]
 800b1bc:	099b      	lsrs	r3, r3, #6
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	7cfb      	ldrb	r3, [r7, #19]
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	441a      	add	r2, r3
 800b1c8:	7cbb      	ldrb	r3, [r7, #18]
 800b1ca:	029b      	lsls	r3, r3, #10
 800b1cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1d0:	4413      	add	r3, r2
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b1d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b1da:	3b09      	subs	r3, #9
 800b1dc:	69fa      	ldr	r2, [r7, #28]
 800b1de:	409a      	lsls	r2, r3
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b1ea:	e0ce      	b.n	800b38a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b1ec:	4b71      	ldr	r3, [pc, #452]	@ (800b3b4 <USER_SPI_ioctl+0x2dc>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d031      	beq.n	800b25c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	208d      	movs	r0, #141	@ 0x8d
 800b1fc:	f7ff fd11 	bl	800ac22 <send_cmd>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	f040 80c3 	bne.w	800b38e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b208:	20ff      	movs	r0, #255	@ 0xff
 800b20a:	f7ff fc19 	bl	800aa40 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b20e:	f107 030c 	add.w	r3, r7, #12
 800b212:	2110      	movs	r1, #16
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fca9 	bl	800ab6c <rcvr_datablock>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 80b6 	beq.w	800b38e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b222:	2330      	movs	r3, #48	@ 0x30
 800b224:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b228:	e007      	b.n	800b23a <USER_SPI_ioctl+0x162>
 800b22a:	20ff      	movs	r0, #255	@ 0xff
 800b22c:	f7ff fc08 	bl	800aa40 <xchg_spi>
 800b230:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b234:	3b01      	subs	r3, #1
 800b236:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b23a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f3      	bne.n	800b22a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b242:	7dbb      	ldrb	r3, [r7, #22]
 800b244:	091b      	lsrs	r3, r3, #4
 800b246:	b2db      	uxtb	r3, r3
 800b248:	461a      	mov	r2, r3
 800b24a:	2310      	movs	r3, #16
 800b24c:	fa03 f202 	lsl.w	r2, r3, r2
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b25a:	e098      	b.n	800b38e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b25c:	2100      	movs	r1, #0
 800b25e:	2009      	movs	r0, #9
 800b260:	f7ff fcdf 	bl	800ac22 <send_cmd>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	f040 8091 	bne.w	800b38e <USER_SPI_ioctl+0x2b6>
 800b26c:	f107 030c 	add.w	r3, r7, #12
 800b270:	2110      	movs	r1, #16
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fc7a 	bl	800ab6c <rcvr_datablock>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f000 8087 	beq.w	800b38e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b280:	4b4c      	ldr	r3, [pc, #304]	@ (800b3b4 <USER_SPI_ioctl+0x2dc>)
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d012      	beq.n	800b2b2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b28c:	7dbb      	ldrb	r3, [r7, #22]
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b294:	7dfa      	ldrb	r2, [r7, #23]
 800b296:	09d2      	lsrs	r2, r2, #7
 800b298:	b2d2      	uxtb	r2, r2
 800b29a:	4413      	add	r3, r2
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	7e7b      	ldrb	r3, [r7, #25]
 800b2a0:	099b      	lsrs	r3, r3, #6
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	601a      	str	r2, [r3, #0]
 800b2b0:	e013      	b.n	800b2da <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b2b2:	7dbb      	ldrb	r3, [r7, #22]
 800b2b4:	109b      	asrs	r3, r3, #2
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	f003 031f 	and.w	r3, r3, #31
 800b2bc:	3301      	adds	r3, #1
 800b2be:	7dfa      	ldrb	r2, [r7, #23]
 800b2c0:	00d2      	lsls	r2, r2, #3
 800b2c2:	f002 0218 	and.w	r2, r2, #24
 800b2c6:	7df9      	ldrb	r1, [r7, #23]
 800b2c8:	0949      	lsrs	r1, r1, #5
 800b2ca:	b2c9      	uxtb	r1, r1
 800b2cc:	440a      	add	r2, r1
 800b2ce:	3201      	adds	r2, #1
 800b2d0:	fb02 f303 	mul.w	r3, r2, r3
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b2e0:	e055      	b.n	800b38e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b2e2:	4b34      	ldr	r3, [pc, #208]	@ (800b3b4 <USER_SPI_ioctl+0x2dc>)
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	f003 0306 	and.w	r3, r3, #6
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d051      	beq.n	800b392 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b2ee:	f107 020c 	add.w	r2, r7, #12
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	210b      	movs	r1, #11
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7ff feee 	bl	800b0d8 <USER_SPI_ioctl>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d149      	bne.n	800b396 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b302:	7b3b      	ldrb	r3, [r7, #12]
 800b304:	099b      	lsrs	r3, r3, #6
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d104      	bne.n	800b316 <USER_SPI_ioctl+0x23e>
 800b30c:	7dbb      	ldrb	r3, [r7, #22]
 800b30e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	d041      	beq.n	800b39a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	623b      	str	r3, [r7, #32]
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b320:	6a3b      	ldr	r3, [r7, #32]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800b326:	4b23      	ldr	r3, [pc, #140]	@ (800b3b4 <USER_SPI_ioctl+0x2dc>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	f003 0308 	and.w	r3, r3, #8
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d105      	bne.n	800b33e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b334:	025b      	lsls	r3, r3, #9
 800b336:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33a:	025b      	lsls	r3, r3, #9
 800b33c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b33e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b340:	2020      	movs	r0, #32
 800b342:	f7ff fc6e 	bl	800ac22 <send_cmd>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d128      	bne.n	800b39e <USER_SPI_ioctl+0x2c6>
 800b34c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b34e:	2021      	movs	r0, #33	@ 0x21
 800b350:	f7ff fc67 	bl	800ac22 <send_cmd>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d121      	bne.n	800b39e <USER_SPI_ioctl+0x2c6>
 800b35a:	2100      	movs	r1, #0
 800b35c:	2026      	movs	r0, #38	@ 0x26
 800b35e:	f7ff fc60 	bl	800ac22 <send_cmd>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d11a      	bne.n	800b39e <USER_SPI_ioctl+0x2c6>
 800b368:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b36c:	f7ff fbae 	bl	800aacc <wait_ready>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d013      	beq.n	800b39e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b376:	2300      	movs	r3, #0
 800b378:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b37c:	e00f      	b.n	800b39e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b37e:	2304      	movs	r3, #4
 800b380:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b384:	e00c      	b.n	800b3a0 <USER_SPI_ioctl+0x2c8>
		break;
 800b386:	bf00      	nop
 800b388:	e00a      	b.n	800b3a0 <USER_SPI_ioctl+0x2c8>
		break;
 800b38a:	bf00      	nop
 800b38c:	e008      	b.n	800b3a0 <USER_SPI_ioctl+0x2c8>
		break;
 800b38e:	bf00      	nop
 800b390:	e006      	b.n	800b3a0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b392:	bf00      	nop
 800b394:	e004      	b.n	800b3a0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b396:	bf00      	nop
 800b398:	e002      	b.n	800b3a0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b39a:	bf00      	nop
 800b39c:	e000      	b.n	800b3a0 <USER_SPI_ioctl+0x2c8>
		break;
 800b39e:	bf00      	nop
	}

	despiselect();
 800b3a0:	f7ff fbb8 	bl	800ab14 <despiselect>

	return res;
 800b3a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3730      	adds	r7, #48	@ 0x30
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	2000006c 	.word	0x2000006c
 800b3b4:	20000d78 	.word	0x20000d78

0800b3b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3ce:	4b1f      	ldr	r3, [pc, #124]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3d0:	7a5b      	ldrb	r3, [r3, #9]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d131      	bne.n	800b43c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b3d8:	4b1c      	ldr	r3, [pc, #112]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3da:	7a5b      	ldrb	r3, [r3, #9]
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	461a      	mov	r2, r3
 800b3e0:	4b1a      	ldr	r3, [pc, #104]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b3e6:	4b19      	ldr	r3, [pc, #100]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3e8:	7a5b      	ldrb	r3, [r3, #9]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	4a17      	ldr	r2, [pc, #92]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b3f6:	4b15      	ldr	r3, [pc, #84]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3f8:	7a5b      	ldrb	r3, [r3, #9]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4b13      	ldr	r3, [pc, #76]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b400:	4413      	add	r3, r2
 800b402:	79fa      	ldrb	r2, [r7, #7]
 800b404:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b406:	4b11      	ldr	r3, [pc, #68]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b408:	7a5b      	ldrb	r3, [r3, #9]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	b2d1      	uxtb	r1, r2
 800b410:	4a0e      	ldr	r2, [pc, #56]	@ (800b44c <FATFS_LinkDriverEx+0x94>)
 800b412:	7251      	strb	r1, [r2, #9]
 800b414:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b416:	7dbb      	ldrb	r3, [r7, #22]
 800b418:	3330      	adds	r3, #48	@ 0x30
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	3301      	adds	r3, #1
 800b424:	223a      	movs	r2, #58	@ 0x3a
 800b426:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	3302      	adds	r3, #2
 800b42c:	222f      	movs	r2, #47	@ 0x2f
 800b42e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	3303      	adds	r3, #3
 800b434:	2200      	movs	r2, #0
 800b436:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	371c      	adds	r7, #28
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	20000d84 	.word	0x20000d84

0800b450 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b45a:	2200      	movs	r2, #0
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff ffaa 	bl	800b3b8 <FATFS_LinkDriverEx>
 800b464:	4603      	mov	r3, r0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <sniprintf>:
 800b470:	b40c      	push	{r2, r3}
 800b472:	b530      	push	{r4, r5, lr}
 800b474:	4b17      	ldr	r3, [pc, #92]	@ (800b4d4 <sniprintf+0x64>)
 800b476:	1e0c      	subs	r4, r1, #0
 800b478:	681d      	ldr	r5, [r3, #0]
 800b47a:	b09d      	sub	sp, #116	@ 0x74
 800b47c:	da08      	bge.n	800b490 <sniprintf+0x20>
 800b47e:	238b      	movs	r3, #139	@ 0x8b
 800b480:	602b      	str	r3, [r5, #0]
 800b482:	f04f 30ff 	mov.w	r0, #4294967295
 800b486:	b01d      	add	sp, #116	@ 0x74
 800b488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b48c:	b002      	add	sp, #8
 800b48e:	4770      	bx	lr
 800b490:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b494:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b498:	bf14      	ite	ne
 800b49a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b49e:	4623      	moveq	r3, r4
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	9307      	str	r3, [sp, #28]
 800b4a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4a8:	9002      	str	r0, [sp, #8]
 800b4aa:	9006      	str	r0, [sp, #24]
 800b4ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b4b2:	ab21      	add	r3, sp, #132	@ 0x84
 800b4b4:	a902      	add	r1, sp, #8
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	f000 f9c3 	bl	800b844 <_svfiprintf_r>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	bfbc      	itt	lt
 800b4c2:	238b      	movlt	r3, #139	@ 0x8b
 800b4c4:	602b      	strlt	r3, [r5, #0]
 800b4c6:	2c00      	cmp	r4, #0
 800b4c8:	d0dd      	beq.n	800b486 <sniprintf+0x16>
 800b4ca:	9b02      	ldr	r3, [sp, #8]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	701a      	strb	r2, [r3, #0]
 800b4d0:	e7d9      	b.n	800b486 <sniprintf+0x16>
 800b4d2:	bf00      	nop
 800b4d4:	20000070 	.word	0x20000070

0800b4d8 <siprintf>:
 800b4d8:	b40e      	push	{r1, r2, r3}
 800b4da:	b500      	push	{lr}
 800b4dc:	b09c      	sub	sp, #112	@ 0x70
 800b4de:	ab1d      	add	r3, sp, #116	@ 0x74
 800b4e0:	9002      	str	r0, [sp, #8]
 800b4e2:	9006      	str	r0, [sp, #24]
 800b4e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4e8:	4809      	ldr	r0, [pc, #36]	@ (800b510 <siprintf+0x38>)
 800b4ea:	9107      	str	r1, [sp, #28]
 800b4ec:	9104      	str	r1, [sp, #16]
 800b4ee:	4909      	ldr	r1, [pc, #36]	@ (800b514 <siprintf+0x3c>)
 800b4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f4:	9105      	str	r1, [sp, #20]
 800b4f6:	6800      	ldr	r0, [r0, #0]
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	a902      	add	r1, sp, #8
 800b4fc:	f000 f9a2 	bl	800b844 <_svfiprintf_r>
 800b500:	9b02      	ldr	r3, [sp, #8]
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	b01c      	add	sp, #112	@ 0x70
 800b508:	f85d eb04 	ldr.w	lr, [sp], #4
 800b50c:	b003      	add	sp, #12
 800b50e:	4770      	bx	lr
 800b510:	20000070 	.word	0x20000070
 800b514:	ffff0208 	.word	0xffff0208

0800b518 <memset>:
 800b518:	4402      	add	r2, r0
 800b51a:	4603      	mov	r3, r0
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d100      	bne.n	800b522 <memset+0xa>
 800b520:	4770      	bx	lr
 800b522:	f803 1b01 	strb.w	r1, [r3], #1
 800b526:	e7f9      	b.n	800b51c <memset+0x4>

0800b528 <__errno>:
 800b528:	4b01      	ldr	r3, [pc, #4]	@ (800b530 <__errno+0x8>)
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	20000070 	.word	0x20000070

0800b534 <__libc_init_array>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4d0d      	ldr	r5, [pc, #52]	@ (800b56c <__libc_init_array+0x38>)
 800b538:	4c0d      	ldr	r4, [pc, #52]	@ (800b570 <__libc_init_array+0x3c>)
 800b53a:	1b64      	subs	r4, r4, r5
 800b53c:	10a4      	asrs	r4, r4, #2
 800b53e:	2600      	movs	r6, #0
 800b540:	42a6      	cmp	r6, r4
 800b542:	d109      	bne.n	800b558 <__libc_init_array+0x24>
 800b544:	4d0b      	ldr	r5, [pc, #44]	@ (800b574 <__libc_init_array+0x40>)
 800b546:	4c0c      	ldr	r4, [pc, #48]	@ (800b578 <__libc_init_array+0x44>)
 800b548:	f000 fcbc 	bl	800bec4 <_init>
 800b54c:	1b64      	subs	r4, r4, r5
 800b54e:	10a4      	asrs	r4, r4, #2
 800b550:	2600      	movs	r6, #0
 800b552:	42a6      	cmp	r6, r4
 800b554:	d105      	bne.n	800b562 <__libc_init_array+0x2e>
 800b556:	bd70      	pop	{r4, r5, r6, pc}
 800b558:	f855 3b04 	ldr.w	r3, [r5], #4
 800b55c:	4798      	blx	r3
 800b55e:	3601      	adds	r6, #1
 800b560:	e7ee      	b.n	800b540 <__libc_init_array+0xc>
 800b562:	f855 3b04 	ldr.w	r3, [r5], #4
 800b566:	4798      	blx	r3
 800b568:	3601      	adds	r6, #1
 800b56a:	e7f2      	b.n	800b552 <__libc_init_array+0x1e>
 800b56c:	0800c548 	.word	0x0800c548
 800b570:	0800c548 	.word	0x0800c548
 800b574:	0800c548 	.word	0x0800c548
 800b578:	0800c54c 	.word	0x0800c54c

0800b57c <__retarget_lock_acquire_recursive>:
 800b57c:	4770      	bx	lr

0800b57e <__retarget_lock_release_recursive>:
 800b57e:	4770      	bx	lr

0800b580 <memcpy>:
 800b580:	440a      	add	r2, r1
 800b582:	4291      	cmp	r1, r2
 800b584:	f100 33ff 	add.w	r3, r0, #4294967295
 800b588:	d100      	bne.n	800b58c <memcpy+0xc>
 800b58a:	4770      	bx	lr
 800b58c:	b510      	push	{r4, lr}
 800b58e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b592:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b596:	4291      	cmp	r1, r2
 800b598:	d1f9      	bne.n	800b58e <memcpy+0xe>
 800b59a:	bd10      	pop	{r4, pc}

0800b59c <_free_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4605      	mov	r5, r0
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	d041      	beq.n	800b628 <_free_r+0x8c>
 800b5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a8:	1f0c      	subs	r4, r1, #4
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	bfb8      	it	lt
 800b5ae:	18e4      	addlt	r4, r4, r3
 800b5b0:	f000 f8e0 	bl	800b774 <__malloc_lock>
 800b5b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b62c <_free_r+0x90>)
 800b5b6:	6813      	ldr	r3, [r2, #0]
 800b5b8:	b933      	cbnz	r3, 800b5c8 <_free_r+0x2c>
 800b5ba:	6063      	str	r3, [r4, #4]
 800b5bc:	6014      	str	r4, [r2, #0]
 800b5be:	4628      	mov	r0, r5
 800b5c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5c4:	f000 b8dc 	b.w	800b780 <__malloc_unlock>
 800b5c8:	42a3      	cmp	r3, r4
 800b5ca:	d908      	bls.n	800b5de <_free_r+0x42>
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	1821      	adds	r1, r4, r0
 800b5d0:	428b      	cmp	r3, r1
 800b5d2:	bf01      	itttt	eq
 800b5d4:	6819      	ldreq	r1, [r3, #0]
 800b5d6:	685b      	ldreq	r3, [r3, #4]
 800b5d8:	1809      	addeq	r1, r1, r0
 800b5da:	6021      	streq	r1, [r4, #0]
 800b5dc:	e7ed      	b.n	800b5ba <_free_r+0x1e>
 800b5de:	461a      	mov	r2, r3
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	b10b      	cbz	r3, 800b5e8 <_free_r+0x4c>
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	d9fa      	bls.n	800b5de <_free_r+0x42>
 800b5e8:	6811      	ldr	r1, [r2, #0]
 800b5ea:	1850      	adds	r0, r2, r1
 800b5ec:	42a0      	cmp	r0, r4
 800b5ee:	d10b      	bne.n	800b608 <_free_r+0x6c>
 800b5f0:	6820      	ldr	r0, [r4, #0]
 800b5f2:	4401      	add	r1, r0
 800b5f4:	1850      	adds	r0, r2, r1
 800b5f6:	4283      	cmp	r3, r0
 800b5f8:	6011      	str	r1, [r2, #0]
 800b5fa:	d1e0      	bne.n	800b5be <_free_r+0x22>
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	6053      	str	r3, [r2, #4]
 800b602:	4408      	add	r0, r1
 800b604:	6010      	str	r0, [r2, #0]
 800b606:	e7da      	b.n	800b5be <_free_r+0x22>
 800b608:	d902      	bls.n	800b610 <_free_r+0x74>
 800b60a:	230c      	movs	r3, #12
 800b60c:	602b      	str	r3, [r5, #0]
 800b60e:	e7d6      	b.n	800b5be <_free_r+0x22>
 800b610:	6820      	ldr	r0, [r4, #0]
 800b612:	1821      	adds	r1, r4, r0
 800b614:	428b      	cmp	r3, r1
 800b616:	bf04      	itt	eq
 800b618:	6819      	ldreq	r1, [r3, #0]
 800b61a:	685b      	ldreq	r3, [r3, #4]
 800b61c:	6063      	str	r3, [r4, #4]
 800b61e:	bf04      	itt	eq
 800b620:	1809      	addeq	r1, r1, r0
 800b622:	6021      	streq	r1, [r4, #0]
 800b624:	6054      	str	r4, [r2, #4]
 800b626:	e7ca      	b.n	800b5be <_free_r+0x22>
 800b628:	bd38      	pop	{r3, r4, r5, pc}
 800b62a:	bf00      	nop
 800b62c:	20000ed4 	.word	0x20000ed4

0800b630 <sbrk_aligned>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4e0f      	ldr	r6, [pc, #60]	@ (800b670 <sbrk_aligned+0x40>)
 800b634:	460c      	mov	r4, r1
 800b636:	6831      	ldr	r1, [r6, #0]
 800b638:	4605      	mov	r5, r0
 800b63a:	b911      	cbnz	r1, 800b642 <sbrk_aligned+0x12>
 800b63c:	f000 fba6 	bl	800bd8c <_sbrk_r>
 800b640:	6030      	str	r0, [r6, #0]
 800b642:	4621      	mov	r1, r4
 800b644:	4628      	mov	r0, r5
 800b646:	f000 fba1 	bl	800bd8c <_sbrk_r>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	d103      	bne.n	800b656 <sbrk_aligned+0x26>
 800b64e:	f04f 34ff 	mov.w	r4, #4294967295
 800b652:	4620      	mov	r0, r4
 800b654:	bd70      	pop	{r4, r5, r6, pc}
 800b656:	1cc4      	adds	r4, r0, #3
 800b658:	f024 0403 	bic.w	r4, r4, #3
 800b65c:	42a0      	cmp	r0, r4
 800b65e:	d0f8      	beq.n	800b652 <sbrk_aligned+0x22>
 800b660:	1a21      	subs	r1, r4, r0
 800b662:	4628      	mov	r0, r5
 800b664:	f000 fb92 	bl	800bd8c <_sbrk_r>
 800b668:	3001      	adds	r0, #1
 800b66a:	d1f2      	bne.n	800b652 <sbrk_aligned+0x22>
 800b66c:	e7ef      	b.n	800b64e <sbrk_aligned+0x1e>
 800b66e:	bf00      	nop
 800b670:	20000ed0 	.word	0x20000ed0

0800b674 <_malloc_r>:
 800b674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b678:	1ccd      	adds	r5, r1, #3
 800b67a:	f025 0503 	bic.w	r5, r5, #3
 800b67e:	3508      	adds	r5, #8
 800b680:	2d0c      	cmp	r5, #12
 800b682:	bf38      	it	cc
 800b684:	250c      	movcc	r5, #12
 800b686:	2d00      	cmp	r5, #0
 800b688:	4606      	mov	r6, r0
 800b68a:	db01      	blt.n	800b690 <_malloc_r+0x1c>
 800b68c:	42a9      	cmp	r1, r5
 800b68e:	d904      	bls.n	800b69a <_malloc_r+0x26>
 800b690:	230c      	movs	r3, #12
 800b692:	6033      	str	r3, [r6, #0]
 800b694:	2000      	movs	r0, #0
 800b696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b770 <_malloc_r+0xfc>
 800b69e:	f000 f869 	bl	800b774 <__malloc_lock>
 800b6a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a6:	461c      	mov	r4, r3
 800b6a8:	bb44      	cbnz	r4, 800b6fc <_malloc_r+0x88>
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7ff ffbf 	bl	800b630 <sbrk_aligned>
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	d158      	bne.n	800b76a <_malloc_r+0xf6>
 800b6b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b6bc:	4627      	mov	r7, r4
 800b6be:	2f00      	cmp	r7, #0
 800b6c0:	d143      	bne.n	800b74a <_malloc_r+0xd6>
 800b6c2:	2c00      	cmp	r4, #0
 800b6c4:	d04b      	beq.n	800b75e <_malloc_r+0xea>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	eb04 0903 	add.w	r9, r4, r3
 800b6d0:	f000 fb5c 	bl	800bd8c <_sbrk_r>
 800b6d4:	4581      	cmp	r9, r0
 800b6d6:	d142      	bne.n	800b75e <_malloc_r+0xea>
 800b6d8:	6821      	ldr	r1, [r4, #0]
 800b6da:	1a6d      	subs	r5, r5, r1
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f7ff ffa6 	bl	800b630 <sbrk_aligned>
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d03a      	beq.n	800b75e <_malloc_r+0xea>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	442b      	add	r3, r5
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	bb62      	cbnz	r2, 800b750 <_malloc_r+0xdc>
 800b6f6:	f8c8 7000 	str.w	r7, [r8]
 800b6fa:	e00f      	b.n	800b71c <_malloc_r+0xa8>
 800b6fc:	6822      	ldr	r2, [r4, #0]
 800b6fe:	1b52      	subs	r2, r2, r5
 800b700:	d420      	bmi.n	800b744 <_malloc_r+0xd0>
 800b702:	2a0b      	cmp	r2, #11
 800b704:	d917      	bls.n	800b736 <_malloc_r+0xc2>
 800b706:	1961      	adds	r1, r4, r5
 800b708:	42a3      	cmp	r3, r4
 800b70a:	6025      	str	r5, [r4, #0]
 800b70c:	bf18      	it	ne
 800b70e:	6059      	strne	r1, [r3, #4]
 800b710:	6863      	ldr	r3, [r4, #4]
 800b712:	bf08      	it	eq
 800b714:	f8c8 1000 	streq.w	r1, [r8]
 800b718:	5162      	str	r2, [r4, r5]
 800b71a:	604b      	str	r3, [r1, #4]
 800b71c:	4630      	mov	r0, r6
 800b71e:	f000 f82f 	bl	800b780 <__malloc_unlock>
 800b722:	f104 000b 	add.w	r0, r4, #11
 800b726:	1d23      	adds	r3, r4, #4
 800b728:	f020 0007 	bic.w	r0, r0, #7
 800b72c:	1ac2      	subs	r2, r0, r3
 800b72e:	bf1c      	itt	ne
 800b730:	1a1b      	subne	r3, r3, r0
 800b732:	50a3      	strne	r3, [r4, r2]
 800b734:	e7af      	b.n	800b696 <_malloc_r+0x22>
 800b736:	6862      	ldr	r2, [r4, #4]
 800b738:	42a3      	cmp	r3, r4
 800b73a:	bf0c      	ite	eq
 800b73c:	f8c8 2000 	streq.w	r2, [r8]
 800b740:	605a      	strne	r2, [r3, #4]
 800b742:	e7eb      	b.n	800b71c <_malloc_r+0xa8>
 800b744:	4623      	mov	r3, r4
 800b746:	6864      	ldr	r4, [r4, #4]
 800b748:	e7ae      	b.n	800b6a8 <_malloc_r+0x34>
 800b74a:	463c      	mov	r4, r7
 800b74c:	687f      	ldr	r7, [r7, #4]
 800b74e:	e7b6      	b.n	800b6be <_malloc_r+0x4a>
 800b750:	461a      	mov	r2, r3
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	42a3      	cmp	r3, r4
 800b756:	d1fb      	bne.n	800b750 <_malloc_r+0xdc>
 800b758:	2300      	movs	r3, #0
 800b75a:	6053      	str	r3, [r2, #4]
 800b75c:	e7de      	b.n	800b71c <_malloc_r+0xa8>
 800b75e:	230c      	movs	r3, #12
 800b760:	6033      	str	r3, [r6, #0]
 800b762:	4630      	mov	r0, r6
 800b764:	f000 f80c 	bl	800b780 <__malloc_unlock>
 800b768:	e794      	b.n	800b694 <_malloc_r+0x20>
 800b76a:	6005      	str	r5, [r0, #0]
 800b76c:	e7d6      	b.n	800b71c <_malloc_r+0xa8>
 800b76e:	bf00      	nop
 800b770:	20000ed4 	.word	0x20000ed4

0800b774 <__malloc_lock>:
 800b774:	4801      	ldr	r0, [pc, #4]	@ (800b77c <__malloc_lock+0x8>)
 800b776:	f7ff bf01 	b.w	800b57c <__retarget_lock_acquire_recursive>
 800b77a:	bf00      	nop
 800b77c:	20000ecc 	.word	0x20000ecc

0800b780 <__malloc_unlock>:
 800b780:	4801      	ldr	r0, [pc, #4]	@ (800b788 <__malloc_unlock+0x8>)
 800b782:	f7ff befc 	b.w	800b57e <__retarget_lock_release_recursive>
 800b786:	bf00      	nop
 800b788:	20000ecc 	.word	0x20000ecc

0800b78c <__ssputs_r>:
 800b78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b790:	688e      	ldr	r6, [r1, #8]
 800b792:	461f      	mov	r7, r3
 800b794:	42be      	cmp	r6, r7
 800b796:	680b      	ldr	r3, [r1, #0]
 800b798:	4682      	mov	sl, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	4690      	mov	r8, r2
 800b79e:	d82d      	bhi.n	800b7fc <__ssputs_r+0x70>
 800b7a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b7a8:	d026      	beq.n	800b7f8 <__ssputs_r+0x6c>
 800b7aa:	6965      	ldr	r5, [r4, #20]
 800b7ac:	6909      	ldr	r1, [r1, #16]
 800b7ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7b2:	eba3 0901 	sub.w	r9, r3, r1
 800b7b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7ba:	1c7b      	adds	r3, r7, #1
 800b7bc:	444b      	add	r3, r9
 800b7be:	106d      	asrs	r5, r5, #1
 800b7c0:	429d      	cmp	r5, r3
 800b7c2:	bf38      	it	cc
 800b7c4:	461d      	movcc	r5, r3
 800b7c6:	0553      	lsls	r3, r2, #21
 800b7c8:	d527      	bpl.n	800b81a <__ssputs_r+0x8e>
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	f7ff ff52 	bl	800b674 <_malloc_r>
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	b360      	cbz	r0, 800b82e <__ssputs_r+0xa2>
 800b7d4:	6921      	ldr	r1, [r4, #16]
 800b7d6:	464a      	mov	r2, r9
 800b7d8:	f7ff fed2 	bl	800b580 <memcpy>
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7e6:	81a3      	strh	r3, [r4, #12]
 800b7e8:	6126      	str	r6, [r4, #16]
 800b7ea:	6165      	str	r5, [r4, #20]
 800b7ec:	444e      	add	r6, r9
 800b7ee:	eba5 0509 	sub.w	r5, r5, r9
 800b7f2:	6026      	str	r6, [r4, #0]
 800b7f4:	60a5      	str	r5, [r4, #8]
 800b7f6:	463e      	mov	r6, r7
 800b7f8:	42be      	cmp	r6, r7
 800b7fa:	d900      	bls.n	800b7fe <__ssputs_r+0x72>
 800b7fc:	463e      	mov	r6, r7
 800b7fe:	6820      	ldr	r0, [r4, #0]
 800b800:	4632      	mov	r2, r6
 800b802:	4641      	mov	r1, r8
 800b804:	f000 faa8 	bl	800bd58 <memmove>
 800b808:	68a3      	ldr	r3, [r4, #8]
 800b80a:	1b9b      	subs	r3, r3, r6
 800b80c:	60a3      	str	r3, [r4, #8]
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	4433      	add	r3, r6
 800b812:	6023      	str	r3, [r4, #0]
 800b814:	2000      	movs	r0, #0
 800b816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81a:	462a      	mov	r2, r5
 800b81c:	f000 fac6 	bl	800bdac <_realloc_r>
 800b820:	4606      	mov	r6, r0
 800b822:	2800      	cmp	r0, #0
 800b824:	d1e0      	bne.n	800b7e8 <__ssputs_r+0x5c>
 800b826:	6921      	ldr	r1, [r4, #16]
 800b828:	4650      	mov	r0, sl
 800b82a:	f7ff feb7 	bl	800b59c <_free_r>
 800b82e:	230c      	movs	r3, #12
 800b830:	f8ca 3000 	str.w	r3, [sl]
 800b834:	89a3      	ldrh	r3, [r4, #12]
 800b836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	e7e9      	b.n	800b816 <__ssputs_r+0x8a>
	...

0800b844 <_svfiprintf_r>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	4698      	mov	r8, r3
 800b84a:	898b      	ldrh	r3, [r1, #12]
 800b84c:	061b      	lsls	r3, r3, #24
 800b84e:	b09d      	sub	sp, #116	@ 0x74
 800b850:	4607      	mov	r7, r0
 800b852:	460d      	mov	r5, r1
 800b854:	4614      	mov	r4, r2
 800b856:	d510      	bpl.n	800b87a <_svfiprintf_r+0x36>
 800b858:	690b      	ldr	r3, [r1, #16]
 800b85a:	b973      	cbnz	r3, 800b87a <_svfiprintf_r+0x36>
 800b85c:	2140      	movs	r1, #64	@ 0x40
 800b85e:	f7ff ff09 	bl	800b674 <_malloc_r>
 800b862:	6028      	str	r0, [r5, #0]
 800b864:	6128      	str	r0, [r5, #16]
 800b866:	b930      	cbnz	r0, 800b876 <_svfiprintf_r+0x32>
 800b868:	230c      	movs	r3, #12
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	b01d      	add	sp, #116	@ 0x74
 800b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b876:	2340      	movs	r3, #64	@ 0x40
 800b878:	616b      	str	r3, [r5, #20]
 800b87a:	2300      	movs	r3, #0
 800b87c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b87e:	2320      	movs	r3, #32
 800b880:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b884:	f8cd 800c 	str.w	r8, [sp, #12]
 800b888:	2330      	movs	r3, #48	@ 0x30
 800b88a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba28 <_svfiprintf_r+0x1e4>
 800b88e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b892:	f04f 0901 	mov.w	r9, #1
 800b896:	4623      	mov	r3, r4
 800b898:	469a      	mov	sl, r3
 800b89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89e:	b10a      	cbz	r2, 800b8a4 <_svfiprintf_r+0x60>
 800b8a0:	2a25      	cmp	r2, #37	@ 0x25
 800b8a2:	d1f9      	bne.n	800b898 <_svfiprintf_r+0x54>
 800b8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a8:	d00b      	beq.n	800b8c2 <_svfiprintf_r+0x7e>
 800b8aa:	465b      	mov	r3, fp
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	f7ff ff6b 	bl	800b78c <__ssputs_r>
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	f000 80a7 	beq.w	800ba0a <_svfiprintf_r+0x1c6>
 800b8bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8be:	445a      	add	r2, fp
 800b8c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 809f 	beq.w	800ba0a <_svfiprintf_r+0x1c6>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d6:	f10a 0a01 	add.w	sl, sl, #1
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	9307      	str	r3, [sp, #28]
 800b8de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8e4:	4654      	mov	r4, sl
 800b8e6:	2205      	movs	r2, #5
 800b8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ec:	484e      	ldr	r0, [pc, #312]	@ (800ba28 <_svfiprintf_r+0x1e4>)
 800b8ee:	f7f4 fc97 	bl	8000220 <memchr>
 800b8f2:	9a04      	ldr	r2, [sp, #16]
 800b8f4:	b9d8      	cbnz	r0, 800b92e <_svfiprintf_r+0xea>
 800b8f6:	06d0      	lsls	r0, r2, #27
 800b8f8:	bf44      	itt	mi
 800b8fa:	2320      	movmi	r3, #32
 800b8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b900:	0711      	lsls	r1, r2, #28
 800b902:	bf44      	itt	mi
 800b904:	232b      	movmi	r3, #43	@ 0x2b
 800b906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b90a:	f89a 3000 	ldrb.w	r3, [sl]
 800b90e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b910:	d015      	beq.n	800b93e <_svfiprintf_r+0xfa>
 800b912:	9a07      	ldr	r2, [sp, #28]
 800b914:	4654      	mov	r4, sl
 800b916:	2000      	movs	r0, #0
 800b918:	f04f 0c0a 	mov.w	ip, #10
 800b91c:	4621      	mov	r1, r4
 800b91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b922:	3b30      	subs	r3, #48	@ 0x30
 800b924:	2b09      	cmp	r3, #9
 800b926:	d94b      	bls.n	800b9c0 <_svfiprintf_r+0x17c>
 800b928:	b1b0      	cbz	r0, 800b958 <_svfiprintf_r+0x114>
 800b92a:	9207      	str	r2, [sp, #28]
 800b92c:	e014      	b.n	800b958 <_svfiprintf_r+0x114>
 800b92e:	eba0 0308 	sub.w	r3, r0, r8
 800b932:	fa09 f303 	lsl.w	r3, r9, r3
 800b936:	4313      	orrs	r3, r2
 800b938:	9304      	str	r3, [sp, #16]
 800b93a:	46a2      	mov	sl, r4
 800b93c:	e7d2      	b.n	800b8e4 <_svfiprintf_r+0xa0>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	1d19      	adds	r1, r3, #4
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	9103      	str	r1, [sp, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	bfbb      	ittet	lt
 800b94a:	425b      	neglt	r3, r3
 800b94c:	f042 0202 	orrlt.w	r2, r2, #2
 800b950:	9307      	strge	r3, [sp, #28]
 800b952:	9307      	strlt	r3, [sp, #28]
 800b954:	bfb8      	it	lt
 800b956:	9204      	strlt	r2, [sp, #16]
 800b958:	7823      	ldrb	r3, [r4, #0]
 800b95a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b95c:	d10a      	bne.n	800b974 <_svfiprintf_r+0x130>
 800b95e:	7863      	ldrb	r3, [r4, #1]
 800b960:	2b2a      	cmp	r3, #42	@ 0x2a
 800b962:	d132      	bne.n	800b9ca <_svfiprintf_r+0x186>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	1d1a      	adds	r2, r3, #4
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	9203      	str	r2, [sp, #12]
 800b96c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b970:	3402      	adds	r4, #2
 800b972:	9305      	str	r3, [sp, #20]
 800b974:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba38 <_svfiprintf_r+0x1f4>
 800b978:	7821      	ldrb	r1, [r4, #0]
 800b97a:	2203      	movs	r2, #3
 800b97c:	4650      	mov	r0, sl
 800b97e:	f7f4 fc4f 	bl	8000220 <memchr>
 800b982:	b138      	cbz	r0, 800b994 <_svfiprintf_r+0x150>
 800b984:	9b04      	ldr	r3, [sp, #16]
 800b986:	eba0 000a 	sub.w	r0, r0, sl
 800b98a:	2240      	movs	r2, #64	@ 0x40
 800b98c:	4082      	lsls	r2, r0
 800b98e:	4313      	orrs	r3, r2
 800b990:	3401      	adds	r4, #1
 800b992:	9304      	str	r3, [sp, #16]
 800b994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b998:	4824      	ldr	r0, [pc, #144]	@ (800ba2c <_svfiprintf_r+0x1e8>)
 800b99a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b99e:	2206      	movs	r2, #6
 800b9a0:	f7f4 fc3e 	bl	8000220 <memchr>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d036      	beq.n	800ba16 <_svfiprintf_r+0x1d2>
 800b9a8:	4b21      	ldr	r3, [pc, #132]	@ (800ba30 <_svfiprintf_r+0x1ec>)
 800b9aa:	bb1b      	cbnz	r3, 800b9f4 <_svfiprintf_r+0x1b0>
 800b9ac:	9b03      	ldr	r3, [sp, #12]
 800b9ae:	3307      	adds	r3, #7
 800b9b0:	f023 0307 	bic.w	r3, r3, #7
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	9303      	str	r3, [sp, #12]
 800b9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ba:	4433      	add	r3, r6
 800b9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9be:	e76a      	b.n	800b896 <_svfiprintf_r+0x52>
 800b9c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	2001      	movs	r0, #1
 800b9c8:	e7a8      	b.n	800b91c <_svfiprintf_r+0xd8>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	3401      	adds	r4, #1
 800b9ce:	9305      	str	r3, [sp, #20]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	f04f 0c0a 	mov.w	ip, #10
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9dc:	3a30      	subs	r2, #48	@ 0x30
 800b9de:	2a09      	cmp	r2, #9
 800b9e0:	d903      	bls.n	800b9ea <_svfiprintf_r+0x1a6>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d0c6      	beq.n	800b974 <_svfiprintf_r+0x130>
 800b9e6:	9105      	str	r1, [sp, #20]
 800b9e8:	e7c4      	b.n	800b974 <_svfiprintf_r+0x130>
 800b9ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e7f0      	b.n	800b9d6 <_svfiprintf_r+0x192>
 800b9f4:	ab03      	add	r3, sp, #12
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	4b0e      	ldr	r3, [pc, #56]	@ (800ba34 <_svfiprintf_r+0x1f0>)
 800b9fc:	a904      	add	r1, sp, #16
 800b9fe:	4638      	mov	r0, r7
 800ba00:	f3af 8000 	nop.w
 800ba04:	1c42      	adds	r2, r0, #1
 800ba06:	4606      	mov	r6, r0
 800ba08:	d1d6      	bne.n	800b9b8 <_svfiprintf_r+0x174>
 800ba0a:	89ab      	ldrh	r3, [r5, #12]
 800ba0c:	065b      	lsls	r3, r3, #25
 800ba0e:	f53f af2d 	bmi.w	800b86c <_svfiprintf_r+0x28>
 800ba12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba14:	e72c      	b.n	800b870 <_svfiprintf_r+0x2c>
 800ba16:	ab03      	add	r3, sp, #12
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	462a      	mov	r2, r5
 800ba1c:	4b05      	ldr	r3, [pc, #20]	@ (800ba34 <_svfiprintf_r+0x1f0>)
 800ba1e:	a904      	add	r1, sp, #16
 800ba20:	4638      	mov	r0, r7
 800ba22:	f000 f879 	bl	800bb18 <_printf_i>
 800ba26:	e7ed      	b.n	800ba04 <_svfiprintf_r+0x1c0>
 800ba28:	0800c50c 	.word	0x0800c50c
 800ba2c:	0800c516 	.word	0x0800c516
 800ba30:	00000000 	.word	0x00000000
 800ba34:	0800b78d 	.word	0x0800b78d
 800ba38:	0800c512 	.word	0x0800c512

0800ba3c <_printf_common>:
 800ba3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba40:	4616      	mov	r6, r2
 800ba42:	4698      	mov	r8, r3
 800ba44:	688a      	ldr	r2, [r1, #8]
 800ba46:	690b      	ldr	r3, [r1, #16]
 800ba48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	bfb8      	it	lt
 800ba50:	4613      	movlt	r3, r2
 800ba52:	6033      	str	r3, [r6, #0]
 800ba54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba58:	4607      	mov	r7, r0
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	b10a      	cbz	r2, 800ba62 <_printf_common+0x26>
 800ba5e:	3301      	adds	r3, #1
 800ba60:	6033      	str	r3, [r6, #0]
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	0699      	lsls	r1, r3, #26
 800ba66:	bf42      	ittt	mi
 800ba68:	6833      	ldrmi	r3, [r6, #0]
 800ba6a:	3302      	addmi	r3, #2
 800ba6c:	6033      	strmi	r3, [r6, #0]
 800ba6e:	6825      	ldr	r5, [r4, #0]
 800ba70:	f015 0506 	ands.w	r5, r5, #6
 800ba74:	d106      	bne.n	800ba84 <_printf_common+0x48>
 800ba76:	f104 0a19 	add.w	sl, r4, #25
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	6832      	ldr	r2, [r6, #0]
 800ba7e:	1a9b      	subs	r3, r3, r2
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	dc26      	bgt.n	800bad2 <_printf_common+0x96>
 800ba84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba88:	6822      	ldr	r2, [r4, #0]
 800ba8a:	3b00      	subs	r3, #0
 800ba8c:	bf18      	it	ne
 800ba8e:	2301      	movne	r3, #1
 800ba90:	0692      	lsls	r2, r2, #26
 800ba92:	d42b      	bmi.n	800baec <_printf_common+0xb0>
 800ba94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba98:	4641      	mov	r1, r8
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	47c8      	blx	r9
 800ba9e:	3001      	adds	r0, #1
 800baa0:	d01e      	beq.n	800bae0 <_printf_common+0xa4>
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	6922      	ldr	r2, [r4, #16]
 800baa6:	f003 0306 	and.w	r3, r3, #6
 800baaa:	2b04      	cmp	r3, #4
 800baac:	bf02      	ittt	eq
 800baae:	68e5      	ldreq	r5, [r4, #12]
 800bab0:	6833      	ldreq	r3, [r6, #0]
 800bab2:	1aed      	subeq	r5, r5, r3
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	bf0c      	ite	eq
 800bab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800babc:	2500      	movne	r5, #0
 800babe:	4293      	cmp	r3, r2
 800bac0:	bfc4      	itt	gt
 800bac2:	1a9b      	subgt	r3, r3, r2
 800bac4:	18ed      	addgt	r5, r5, r3
 800bac6:	2600      	movs	r6, #0
 800bac8:	341a      	adds	r4, #26
 800baca:	42b5      	cmp	r5, r6
 800bacc:	d11a      	bne.n	800bb04 <_printf_common+0xc8>
 800bace:	2000      	movs	r0, #0
 800bad0:	e008      	b.n	800bae4 <_printf_common+0xa8>
 800bad2:	2301      	movs	r3, #1
 800bad4:	4652      	mov	r2, sl
 800bad6:	4641      	mov	r1, r8
 800bad8:	4638      	mov	r0, r7
 800bada:	47c8      	blx	r9
 800badc:	3001      	adds	r0, #1
 800bade:	d103      	bne.n	800bae8 <_printf_common+0xac>
 800bae0:	f04f 30ff 	mov.w	r0, #4294967295
 800bae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae8:	3501      	adds	r5, #1
 800baea:	e7c6      	b.n	800ba7a <_printf_common+0x3e>
 800baec:	18e1      	adds	r1, r4, r3
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	2030      	movs	r0, #48	@ 0x30
 800baf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800baf6:	4422      	add	r2, r4
 800baf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bafc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb00:	3302      	adds	r3, #2
 800bb02:	e7c7      	b.n	800ba94 <_printf_common+0x58>
 800bb04:	2301      	movs	r3, #1
 800bb06:	4622      	mov	r2, r4
 800bb08:	4641      	mov	r1, r8
 800bb0a:	4638      	mov	r0, r7
 800bb0c:	47c8      	blx	r9
 800bb0e:	3001      	adds	r0, #1
 800bb10:	d0e6      	beq.n	800bae0 <_printf_common+0xa4>
 800bb12:	3601      	adds	r6, #1
 800bb14:	e7d9      	b.n	800baca <_printf_common+0x8e>
	...

0800bb18 <_printf_i>:
 800bb18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb1c:	7e0f      	ldrb	r7, [r1, #24]
 800bb1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb20:	2f78      	cmp	r7, #120	@ 0x78
 800bb22:	4691      	mov	r9, r2
 800bb24:	4680      	mov	r8, r0
 800bb26:	460c      	mov	r4, r1
 800bb28:	469a      	mov	sl, r3
 800bb2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb2e:	d807      	bhi.n	800bb40 <_printf_i+0x28>
 800bb30:	2f62      	cmp	r7, #98	@ 0x62
 800bb32:	d80a      	bhi.n	800bb4a <_printf_i+0x32>
 800bb34:	2f00      	cmp	r7, #0
 800bb36:	f000 80d2 	beq.w	800bcde <_printf_i+0x1c6>
 800bb3a:	2f58      	cmp	r7, #88	@ 0x58
 800bb3c:	f000 80b9 	beq.w	800bcb2 <_printf_i+0x19a>
 800bb40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb48:	e03a      	b.n	800bbc0 <_printf_i+0xa8>
 800bb4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb4e:	2b15      	cmp	r3, #21
 800bb50:	d8f6      	bhi.n	800bb40 <_printf_i+0x28>
 800bb52:	a101      	add	r1, pc, #4	@ (adr r1, 800bb58 <_printf_i+0x40>)
 800bb54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb58:	0800bbb1 	.word	0x0800bbb1
 800bb5c:	0800bbc5 	.word	0x0800bbc5
 800bb60:	0800bb41 	.word	0x0800bb41
 800bb64:	0800bb41 	.word	0x0800bb41
 800bb68:	0800bb41 	.word	0x0800bb41
 800bb6c:	0800bb41 	.word	0x0800bb41
 800bb70:	0800bbc5 	.word	0x0800bbc5
 800bb74:	0800bb41 	.word	0x0800bb41
 800bb78:	0800bb41 	.word	0x0800bb41
 800bb7c:	0800bb41 	.word	0x0800bb41
 800bb80:	0800bb41 	.word	0x0800bb41
 800bb84:	0800bcc5 	.word	0x0800bcc5
 800bb88:	0800bbef 	.word	0x0800bbef
 800bb8c:	0800bc7f 	.word	0x0800bc7f
 800bb90:	0800bb41 	.word	0x0800bb41
 800bb94:	0800bb41 	.word	0x0800bb41
 800bb98:	0800bce7 	.word	0x0800bce7
 800bb9c:	0800bb41 	.word	0x0800bb41
 800bba0:	0800bbef 	.word	0x0800bbef
 800bba4:	0800bb41 	.word	0x0800bb41
 800bba8:	0800bb41 	.word	0x0800bb41
 800bbac:	0800bc87 	.word	0x0800bc87
 800bbb0:	6833      	ldr	r3, [r6, #0]
 800bbb2:	1d1a      	adds	r2, r3, #4
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6032      	str	r2, [r6, #0]
 800bbb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e09d      	b.n	800bd00 <_printf_i+0x1e8>
 800bbc4:	6833      	ldr	r3, [r6, #0]
 800bbc6:	6820      	ldr	r0, [r4, #0]
 800bbc8:	1d19      	adds	r1, r3, #4
 800bbca:	6031      	str	r1, [r6, #0]
 800bbcc:	0606      	lsls	r6, r0, #24
 800bbce:	d501      	bpl.n	800bbd4 <_printf_i+0xbc>
 800bbd0:	681d      	ldr	r5, [r3, #0]
 800bbd2:	e003      	b.n	800bbdc <_printf_i+0xc4>
 800bbd4:	0645      	lsls	r5, r0, #25
 800bbd6:	d5fb      	bpl.n	800bbd0 <_printf_i+0xb8>
 800bbd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	da03      	bge.n	800bbe8 <_printf_i+0xd0>
 800bbe0:	232d      	movs	r3, #45	@ 0x2d
 800bbe2:	426d      	negs	r5, r5
 800bbe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbe8:	4859      	ldr	r0, [pc, #356]	@ (800bd50 <_printf_i+0x238>)
 800bbea:	230a      	movs	r3, #10
 800bbec:	e011      	b.n	800bc12 <_printf_i+0xfa>
 800bbee:	6821      	ldr	r1, [r4, #0]
 800bbf0:	6833      	ldr	r3, [r6, #0]
 800bbf2:	0608      	lsls	r0, r1, #24
 800bbf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbf8:	d402      	bmi.n	800bc00 <_printf_i+0xe8>
 800bbfa:	0649      	lsls	r1, r1, #25
 800bbfc:	bf48      	it	mi
 800bbfe:	b2ad      	uxthmi	r5, r5
 800bc00:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc02:	4853      	ldr	r0, [pc, #332]	@ (800bd50 <_printf_i+0x238>)
 800bc04:	6033      	str	r3, [r6, #0]
 800bc06:	bf14      	ite	ne
 800bc08:	230a      	movne	r3, #10
 800bc0a:	2308      	moveq	r3, #8
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc12:	6866      	ldr	r6, [r4, #4]
 800bc14:	60a6      	str	r6, [r4, #8]
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	bfa2      	ittt	ge
 800bc1a:	6821      	ldrge	r1, [r4, #0]
 800bc1c:	f021 0104 	bicge.w	r1, r1, #4
 800bc20:	6021      	strge	r1, [r4, #0]
 800bc22:	b90d      	cbnz	r5, 800bc28 <_printf_i+0x110>
 800bc24:	2e00      	cmp	r6, #0
 800bc26:	d04b      	beq.n	800bcc0 <_printf_i+0x1a8>
 800bc28:	4616      	mov	r6, r2
 800bc2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc2e:	fb03 5711 	mls	r7, r3, r1, r5
 800bc32:	5dc7      	ldrb	r7, [r0, r7]
 800bc34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc38:	462f      	mov	r7, r5
 800bc3a:	42bb      	cmp	r3, r7
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	d9f4      	bls.n	800bc2a <_printf_i+0x112>
 800bc40:	2b08      	cmp	r3, #8
 800bc42:	d10b      	bne.n	800bc5c <_printf_i+0x144>
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	07df      	lsls	r7, r3, #31
 800bc48:	d508      	bpl.n	800bc5c <_printf_i+0x144>
 800bc4a:	6923      	ldr	r3, [r4, #16]
 800bc4c:	6861      	ldr	r1, [r4, #4]
 800bc4e:	4299      	cmp	r1, r3
 800bc50:	bfde      	ittt	le
 800bc52:	2330      	movle	r3, #48	@ 0x30
 800bc54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc5c:	1b92      	subs	r2, r2, r6
 800bc5e:	6122      	str	r2, [r4, #16]
 800bc60:	f8cd a000 	str.w	sl, [sp]
 800bc64:	464b      	mov	r3, r9
 800bc66:	aa03      	add	r2, sp, #12
 800bc68:	4621      	mov	r1, r4
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	f7ff fee6 	bl	800ba3c <_printf_common>
 800bc70:	3001      	adds	r0, #1
 800bc72:	d14a      	bne.n	800bd0a <_printf_i+0x1f2>
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	b004      	add	sp, #16
 800bc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	f043 0320 	orr.w	r3, r3, #32
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	4833      	ldr	r0, [pc, #204]	@ (800bd54 <_printf_i+0x23c>)
 800bc88:	2778      	movs	r7, #120	@ 0x78
 800bc8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	6831      	ldr	r1, [r6, #0]
 800bc92:	061f      	lsls	r7, r3, #24
 800bc94:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc98:	d402      	bmi.n	800bca0 <_printf_i+0x188>
 800bc9a:	065f      	lsls	r7, r3, #25
 800bc9c:	bf48      	it	mi
 800bc9e:	b2ad      	uxthmi	r5, r5
 800bca0:	6031      	str	r1, [r6, #0]
 800bca2:	07d9      	lsls	r1, r3, #31
 800bca4:	bf44      	itt	mi
 800bca6:	f043 0320 	orrmi.w	r3, r3, #32
 800bcaa:	6023      	strmi	r3, [r4, #0]
 800bcac:	b11d      	cbz	r5, 800bcb6 <_printf_i+0x19e>
 800bcae:	2310      	movs	r3, #16
 800bcb0:	e7ac      	b.n	800bc0c <_printf_i+0xf4>
 800bcb2:	4827      	ldr	r0, [pc, #156]	@ (800bd50 <_printf_i+0x238>)
 800bcb4:	e7e9      	b.n	800bc8a <_printf_i+0x172>
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	f023 0320 	bic.w	r3, r3, #32
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	e7f6      	b.n	800bcae <_printf_i+0x196>
 800bcc0:	4616      	mov	r6, r2
 800bcc2:	e7bd      	b.n	800bc40 <_printf_i+0x128>
 800bcc4:	6833      	ldr	r3, [r6, #0]
 800bcc6:	6825      	ldr	r5, [r4, #0]
 800bcc8:	6961      	ldr	r1, [r4, #20]
 800bcca:	1d18      	adds	r0, r3, #4
 800bccc:	6030      	str	r0, [r6, #0]
 800bcce:	062e      	lsls	r6, r5, #24
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	d501      	bpl.n	800bcd8 <_printf_i+0x1c0>
 800bcd4:	6019      	str	r1, [r3, #0]
 800bcd6:	e002      	b.n	800bcde <_printf_i+0x1c6>
 800bcd8:	0668      	lsls	r0, r5, #25
 800bcda:	d5fb      	bpl.n	800bcd4 <_printf_i+0x1bc>
 800bcdc:	8019      	strh	r1, [r3, #0]
 800bcde:	2300      	movs	r3, #0
 800bce0:	6123      	str	r3, [r4, #16]
 800bce2:	4616      	mov	r6, r2
 800bce4:	e7bc      	b.n	800bc60 <_printf_i+0x148>
 800bce6:	6833      	ldr	r3, [r6, #0]
 800bce8:	1d1a      	adds	r2, r3, #4
 800bcea:	6032      	str	r2, [r6, #0]
 800bcec:	681e      	ldr	r6, [r3, #0]
 800bcee:	6862      	ldr	r2, [r4, #4]
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f7f4 fa94 	bl	8000220 <memchr>
 800bcf8:	b108      	cbz	r0, 800bcfe <_printf_i+0x1e6>
 800bcfa:	1b80      	subs	r0, r0, r6
 800bcfc:	6060      	str	r0, [r4, #4]
 800bcfe:	6863      	ldr	r3, [r4, #4]
 800bd00:	6123      	str	r3, [r4, #16]
 800bd02:	2300      	movs	r3, #0
 800bd04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd08:	e7aa      	b.n	800bc60 <_printf_i+0x148>
 800bd0a:	6923      	ldr	r3, [r4, #16]
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	4649      	mov	r1, r9
 800bd10:	4640      	mov	r0, r8
 800bd12:	47d0      	blx	sl
 800bd14:	3001      	adds	r0, #1
 800bd16:	d0ad      	beq.n	800bc74 <_printf_i+0x15c>
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	079b      	lsls	r3, r3, #30
 800bd1c:	d413      	bmi.n	800bd46 <_printf_i+0x22e>
 800bd1e:	68e0      	ldr	r0, [r4, #12]
 800bd20:	9b03      	ldr	r3, [sp, #12]
 800bd22:	4298      	cmp	r0, r3
 800bd24:	bfb8      	it	lt
 800bd26:	4618      	movlt	r0, r3
 800bd28:	e7a6      	b.n	800bc78 <_printf_i+0x160>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	4632      	mov	r2, r6
 800bd2e:	4649      	mov	r1, r9
 800bd30:	4640      	mov	r0, r8
 800bd32:	47d0      	blx	sl
 800bd34:	3001      	adds	r0, #1
 800bd36:	d09d      	beq.n	800bc74 <_printf_i+0x15c>
 800bd38:	3501      	adds	r5, #1
 800bd3a:	68e3      	ldr	r3, [r4, #12]
 800bd3c:	9903      	ldr	r1, [sp, #12]
 800bd3e:	1a5b      	subs	r3, r3, r1
 800bd40:	42ab      	cmp	r3, r5
 800bd42:	dcf2      	bgt.n	800bd2a <_printf_i+0x212>
 800bd44:	e7eb      	b.n	800bd1e <_printf_i+0x206>
 800bd46:	2500      	movs	r5, #0
 800bd48:	f104 0619 	add.w	r6, r4, #25
 800bd4c:	e7f5      	b.n	800bd3a <_printf_i+0x222>
 800bd4e:	bf00      	nop
 800bd50:	0800c51d 	.word	0x0800c51d
 800bd54:	0800c52e 	.word	0x0800c52e

0800bd58 <memmove>:
 800bd58:	4288      	cmp	r0, r1
 800bd5a:	b510      	push	{r4, lr}
 800bd5c:	eb01 0402 	add.w	r4, r1, r2
 800bd60:	d902      	bls.n	800bd68 <memmove+0x10>
 800bd62:	4284      	cmp	r4, r0
 800bd64:	4623      	mov	r3, r4
 800bd66:	d807      	bhi.n	800bd78 <memmove+0x20>
 800bd68:	1e43      	subs	r3, r0, #1
 800bd6a:	42a1      	cmp	r1, r4
 800bd6c:	d008      	beq.n	800bd80 <memmove+0x28>
 800bd6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd76:	e7f8      	b.n	800bd6a <memmove+0x12>
 800bd78:	4402      	add	r2, r0
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	428a      	cmp	r2, r1
 800bd7e:	d100      	bne.n	800bd82 <memmove+0x2a>
 800bd80:	bd10      	pop	{r4, pc}
 800bd82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd8a:	e7f7      	b.n	800bd7c <memmove+0x24>

0800bd8c <_sbrk_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d06      	ldr	r5, [pc, #24]	@ (800bda8 <_sbrk_r+0x1c>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	602b      	str	r3, [r5, #0]
 800bd98:	f7f7 fefc 	bl	8003b94 <_sbrk>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d102      	bne.n	800bda6 <_sbrk_r+0x1a>
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	b103      	cbz	r3, 800bda6 <_sbrk_r+0x1a>
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	20000ec8 	.word	0x20000ec8

0800bdac <_realloc_r>:
 800bdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb0:	4680      	mov	r8, r0
 800bdb2:	4615      	mov	r5, r2
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	b921      	cbnz	r1, 800bdc2 <_realloc_r+0x16>
 800bdb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	f7ff bc59 	b.w	800b674 <_malloc_r>
 800bdc2:	b92a      	cbnz	r2, 800bdd0 <_realloc_r+0x24>
 800bdc4:	f7ff fbea 	bl	800b59c <_free_r>
 800bdc8:	2400      	movs	r4, #0
 800bdca:	4620      	mov	r0, r4
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd0:	f000 f81a 	bl	800be08 <_malloc_usable_size_r>
 800bdd4:	4285      	cmp	r5, r0
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	d802      	bhi.n	800bde0 <_realloc_r+0x34>
 800bdda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bdde:	d8f4      	bhi.n	800bdca <_realloc_r+0x1e>
 800bde0:	4629      	mov	r1, r5
 800bde2:	4640      	mov	r0, r8
 800bde4:	f7ff fc46 	bl	800b674 <_malloc_r>
 800bde8:	4607      	mov	r7, r0
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d0ec      	beq.n	800bdc8 <_realloc_r+0x1c>
 800bdee:	42b5      	cmp	r5, r6
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	bf28      	it	cs
 800bdf6:	4632      	movcs	r2, r6
 800bdf8:	f7ff fbc2 	bl	800b580 <memcpy>
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	4640      	mov	r0, r8
 800be00:	f7ff fbcc 	bl	800b59c <_free_r>
 800be04:	463c      	mov	r4, r7
 800be06:	e7e0      	b.n	800bdca <_realloc_r+0x1e>

0800be08 <_malloc_usable_size_r>:
 800be08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be0c:	1f18      	subs	r0, r3, #4
 800be0e:	2b00      	cmp	r3, #0
 800be10:	bfbc      	itt	lt
 800be12:	580b      	ldrlt	r3, [r1, r0]
 800be14:	18c0      	addlt	r0, r0, r3
 800be16:	4770      	bx	lr

0800be18 <fmaxf>:
 800be18:	b508      	push	{r3, lr}
 800be1a:	ed2d 8b02 	vpush	{d8}
 800be1e:	eeb0 8a40 	vmov.f32	s16, s0
 800be22:	eef0 8a60 	vmov.f32	s17, s1
 800be26:	f000 f831 	bl	800be8c <__fpclassifyf>
 800be2a:	b930      	cbnz	r0, 800be3a <fmaxf+0x22>
 800be2c:	eeb0 8a68 	vmov.f32	s16, s17
 800be30:	eeb0 0a48 	vmov.f32	s0, s16
 800be34:	ecbd 8b02 	vpop	{d8}
 800be38:	bd08      	pop	{r3, pc}
 800be3a:	eeb0 0a68 	vmov.f32	s0, s17
 800be3e:	f000 f825 	bl	800be8c <__fpclassifyf>
 800be42:	2800      	cmp	r0, #0
 800be44:	d0f4      	beq.n	800be30 <fmaxf+0x18>
 800be46:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800be4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4e:	dded      	ble.n	800be2c <fmaxf+0x14>
 800be50:	e7ee      	b.n	800be30 <fmaxf+0x18>

0800be52 <fminf>:
 800be52:	b508      	push	{r3, lr}
 800be54:	ed2d 8b02 	vpush	{d8}
 800be58:	eeb0 8a40 	vmov.f32	s16, s0
 800be5c:	eef0 8a60 	vmov.f32	s17, s1
 800be60:	f000 f814 	bl	800be8c <__fpclassifyf>
 800be64:	b930      	cbnz	r0, 800be74 <fminf+0x22>
 800be66:	eeb0 8a68 	vmov.f32	s16, s17
 800be6a:	eeb0 0a48 	vmov.f32	s0, s16
 800be6e:	ecbd 8b02 	vpop	{d8}
 800be72:	bd08      	pop	{r3, pc}
 800be74:	eeb0 0a68 	vmov.f32	s0, s17
 800be78:	f000 f808 	bl	800be8c <__fpclassifyf>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d0f4      	beq.n	800be6a <fminf+0x18>
 800be80:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800be84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be88:	d5ed      	bpl.n	800be66 <fminf+0x14>
 800be8a:	e7ee      	b.n	800be6a <fminf+0x18>

0800be8c <__fpclassifyf>:
 800be8c:	ee10 3a10 	vmov	r3, s0
 800be90:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800be94:	d00d      	beq.n	800beb2 <__fpclassifyf+0x26>
 800be96:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800be9a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800be9e:	d30a      	bcc.n	800beb6 <__fpclassifyf+0x2a>
 800bea0:	4b07      	ldr	r3, [pc, #28]	@ (800bec0 <__fpclassifyf+0x34>)
 800bea2:	1e42      	subs	r2, r0, #1
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d908      	bls.n	800beba <__fpclassifyf+0x2e>
 800bea8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800beac:	4258      	negs	r0, r3
 800beae:	4158      	adcs	r0, r3
 800beb0:	4770      	bx	lr
 800beb2:	2002      	movs	r0, #2
 800beb4:	4770      	bx	lr
 800beb6:	2004      	movs	r0, #4
 800beb8:	4770      	bx	lr
 800beba:	2003      	movs	r0, #3
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	007ffffe 	.word	0x007ffffe

0800bec4 <_init>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	bf00      	nop
 800bec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beca:	bc08      	pop	{r3}
 800becc:	469e      	mov	lr, r3
 800bece:	4770      	bx	lr

0800bed0 <_fini>:
 800bed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed2:	bf00      	nop
 800bed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bed6:	bc08      	pop	{r3}
 800bed8:	469e      	mov	lr, r3
 800beda:	4770      	bx	lr
