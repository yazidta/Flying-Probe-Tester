
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800c38c  0800c38c  0000d38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca44  0800ca44  0000e0c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca44  0800ca44  0000da44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca4c  0800ca4c  0000e0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca4c  0800ca4c  0000da4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca50  0800ca50  0000da50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800ca54  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f88  200000c0  0800cb14  0000e0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001048  0800cb14  0000f048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002321b  00000000  00000000  0000e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af4  00000000  00000000  0003130b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00035e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001565  00000000  00000000  000379a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b232  00000000  00000000  00038f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002699e  00000000  00000000  0006413f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f989b  00000000  00000000  0008aadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184378  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007960  00000000  00000000  001843bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c374 	.word	0x0800c374

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800c374 	.word	0x0800c374

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f007 f971 	bl	80078ac <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f007 f9d7 	bl	800798c <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f004 fcd7 	bl	800502c <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000dc 	.word	0x200000dc

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <LCD_I2C_Cursor+0x30>)
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	78bb      	ldrb	r3, [r7, #2]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	3b80      	subs	r3, #128	@ 0x80
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff68 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800c9ec 	.word	0x0800c9ec

080007d4 <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d90a      	bls.n	8000800 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	3b02      	subs	r3, #2
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	78bb      	ldrb	r3, [r7, #2]
 80007f2:	3314      	adds	r3, #20
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffd1 	bl	80007a0 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 80007fe:	e005      	b.n	800080c <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8000800:	78ba      	ldrb	r2, [r7, #2]
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffca 	bl	80007a0 <LCD_I2C_Cursor>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ff3a 	bl	8000698 <__lcd_i2c_write_command>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3340      	adds	r3, #64	@ 0x40
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff ff26 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
 8000850:	e00a      	b.n	8000868 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff ff2b 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	3301      	adds	r3, #1
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d9f1      	bls.n	8000852 <LCD_I2C_DefineChar+0x26>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 8000886:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8000888:	69b8      	ldr	r0, [r7, #24]
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000892:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	461a      	mov	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffbf 	bl	800082c <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]
 80008b2:	e025      	b.n	8000900 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	3303      	adds	r3, #3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff88 	bl	80007d4 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff5b 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe6b 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	3303      	adds	r3, #3
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff75 	bl	80007d4 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fedf 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 80008fa:	7ffb      	ldrb	r3, [r7, #31]
 80008fc:	3301      	adds	r3, #1
 80008fe:	77fb      	strb	r3, [r7, #31]
 8000900:	7ffa      	ldrb	r2, [r7, #31]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3d5      	bcc.n	80008b4 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800c398 	.word	0x0800c398
 8000918:	0800c3a4 	.word	0x0800c3a4

0800091c <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t CurrentPosition;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e07d      	b.n	8000a26 <HAL_TIM_PWM_PulseFinishedCallback+0x10a>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4942      	ldr	r1, [pc, #264]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2064      	movs	r0, #100	@ 0x64
 8000934:	fb00 f303 	mul.w	r3, r0, r3
 8000938:	440b      	add	r3, r1
 800093a:	330c      	adds	r3, #12
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	429a      	cmp	r2, r3
 8000942:	d16d      	bne.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  motors[i].stepsTaken++;
 8000944:	4a3c      	ldr	r2, [pc, #240]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2164      	movs	r1, #100	@ 0x64
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	4413      	add	r3, r2
 8000950:	3344      	adds	r3, #68	@ 0x44
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	4938      	ldr	r1, [pc, #224]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2064      	movs	r0, #100	@ 0x64
 800095c:	fb00 f303 	mul.w	r3, r0, r3
 8000960:	440b      	add	r3, r1
 8000962:	3344      	adds	r3, #68	@ 0x44
 8000964:	601a      	str	r2, [r3, #0]
		  stepsTaken[i] = motors[i].stepsTaken;
 8000966:	4a34      	ldr	r2, [pc, #208]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2164      	movs	r1, #100	@ 0x64
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	4413      	add	r3, r2
 8000972:	3344      	adds	r3, #68	@ 0x44
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4931      	ldr	r1, [pc, #196]	@ (8000a3c <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 800097e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2164      	movs	r1, #100	@ 0x64
 8000984:	fb01 f303 	mul.w	r3, r1, r3
 8000988:	4413      	add	r3, r2
 800098a:	331c      	adds	r3, #28
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	492a      	ldr	r1, [pc, #168]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2064      	movs	r0, #100	@ 0x64
 8000994:	fb00 f303 	mul.w	r3, r0, r3
 8000998:	440b      	add	r3, r1
 800099a:	3320      	adds	r3, #32
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	4610      	mov	r0, r2
 80009a2:	f004 fa5d 	bl	8004e60 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d111      	bne.n	80009d0 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		  motors[i].StepsFront++;
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2164      	movs	r1, #100	@ 0x64
 80009b2:	fb01 f303 	mul.w	r3, r1, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	3358      	adds	r3, #88	@ 0x58
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	491e      	ldr	r1, [pc, #120]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2064      	movs	r0, #100	@ 0x64
 80009c4:	fb00 f303 	mul.w	r3, r0, r3
 80009c8:	440b      	add	r3, r1
 80009ca:	3358      	adds	r3, #88	@ 0x58
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e027      	b.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2164      	movs	r1, #100	@ 0x64
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	4413      	add	r3, r2
 80009dc:	331c      	adds	r3, #28
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4915      	ldr	r1, [pc, #84]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2064      	movs	r0, #100	@ 0x64
 80009e6:	fb00 f303 	mul.w	r3, r0, r3
 80009ea:	440b      	add	r3, r1
 80009ec:	3320      	adds	r3, #32
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4610      	mov	r0, r2
 80009f4:	f004 fa34 	bl	8004e60 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x104>

			  		  motors[i].StepsBack++;
 80009fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2164      	movs	r1, #100	@ 0x64
 8000a04:	fb01 f303 	mul.w	r3, r1, r3
 8000a08:	4413      	add	r3, r2
 8000a0a:	335c      	adds	r3, #92	@ 0x5c
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	4909      	ldr	r1, [pc, #36]	@ (8000a38 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2064      	movs	r0, #100	@ 0x64
 8000a16:	fb00 f303 	mul.w	r3, r0, r3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	335c      	adds	r3, #92	@ 0x5c
 8000a1e:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	f77f af7e 	ble.w	800092a <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		 }
      }

    }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000cf8 	.word	0x20000cf8
 8000a3c:	200000f8 	.word	0x200000f8

08000a40 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69d8      	ldr	r0, [r3, #28]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	8c1b      	ldrh	r3, [r3, #32]
 8000a54:	78fa      	ldrb	r2, [r7, #3]
 8000a56:	4619      	mov	r1, r3
 8000a58:	f004 fa1a 	bl	8004e90 <HAL_GPIO_WritePin>
    direction = state;
 8000a5c:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <TMC2209_SetDirection+0x2c>)
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000f5 	.word	0x200000f5

08000a70 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a84:	78fa      	ldrb	r2, [r7, #3]
 8000a86:	4619      	mov	r1, r3
 8000a88:	f004 fa02 	bl	8004e90 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 8000aa6:	f005 fcbb 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abc:	3b01      	subs	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d106      	bne.n	8000ae8 <TMC2209_SetSpeed+0x54>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	0852      	lsrs	r2, r2, #1
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ae6:	e031      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d106      	bne.n	8000afe <TMC2209_SetSpeed+0x6a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	085b      	lsrs	r3, r3, #1
 8000afa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000afc:	e026      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	d106      	bne.n	8000b14 <TMC2209_SetSpeed+0x80>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	085b      	lsrs	r3, r3, #1
 8000b10:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b12:	e01b      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b0c      	cmp	r3, #12
 8000b1a:	d106      	bne.n	8000b2a <TMC2209_SetSpeed+0x96>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	085b      	lsrs	r3, r3, #1
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b28:	e010      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d106      	bne.n	8000b40 <TMC2209_SetSpeed+0xac>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b3e:	e005      	b.n	8000b4c <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff80 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f007 f9ca 	bl	8007f0c <HAL_TIM_PWM_Stop_IT>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000b94:	2100      	movs	r1, #0
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff6a 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f007 f86c 	bl	8007c7c <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <TMC2209_Start_C>:
void TMC2209_Start_C(Motor *motor) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	60bb      	str	r3, [r7, #8]
   //motor->stepsTaken = 0;
	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff50 	bl	8000a70 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000bd0:	68b9      	ldr	r1, [r7, #8]
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f007 f852 	bl	8007c7c <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <debug_print>:
    }
}



void debug_print(const char* msg) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fb0d 	bl	8000210 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <debug_print+0x28>)
 8000c02:	f008 fb57 	bl	80092b4 <HAL_UART_Transmit>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200005d8 	.word	0x200005d8

08000c14 <debug_print_hex>:

 void debug_print_hex(uint8_t* data, uint8_t length) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b09e      	sub	sp, #120	@ 0x78
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
    char buffer[100];
    char* ptr = buffer;
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	677b      	str	r3, [r7, #116]	@ 0x74

    ptr += sprintf(ptr, "[");
 8000c26:	491c      	ldr	r1, [pc, #112]	@ (8000c98 <debug_print_hex+0x84>)
 8000c28:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000c2a:	f00a fead 	bl	800b988 <siprintf>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c34:	4413      	add	r3, r2
 8000c36:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000c3e:	e013      	b.n	8000c68 <debug_print_hex+0x54>
        ptr += sprintf(ptr, "%02X ", data[i]);
 8000c40:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4913      	ldr	r1, [pc, #76]	@ (8000c9c <debug_print_hex+0x88>)
 8000c4e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000c50:	f00a fe9a 	bl	800b988 <siprintf>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c5a:	4413      	add	r3, r2
 8000c5c:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 8000c5e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000c62:	3301      	adds	r3, #1
 8000c64:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000c68:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3e6      	bcc.n	8000c40 <debug_print_hex+0x2c>
    }
    ptr += sprintf(ptr, "]\r\n");
 8000c72:	490b      	ldr	r1, [pc, #44]	@ (8000ca0 <debug_print_hex+0x8c>)
 8000c74:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000c76:	f00a fe87 	bl	800b988 <siprintf>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c80:	4413      	add	r3, r2
 8000c82:	677b      	str	r3, [r7, #116]	@ 0x74

    debug_print(buffer);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffad 	bl	8000be8 <debug_print>
}
 8000c8e:	bf00      	nop
 8000c90:	3778      	adds	r7, #120	@ 0x78
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	0800c4a8 	.word	0x0800c4a8
 8000c9c:	0800c4ac 	.word	0x0800c4ac
 8000ca0:	0800c4b4 	.word	0x0800c4b4

08000ca4 <calculate_CRC>:

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73bb      	strb	r3, [r7, #14]
 8000cb8:	e027      	b.n	8000d0a <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	733b      	strb	r3, [r7, #12]
 8000cc8:	e019      	b.n	8000cfe <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	09db      	lsrs	r3, r3, #7
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	7b7b      	ldrb	r3, [r7, #13]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d007      	beq.n	8000cec <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	f083 0307 	eor.w	r3, r3, #7
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e002      	b.n	8000cf2 <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8000cf2:	7b7b      	ldrb	r3, [r7, #13]
 8000cf4:	085b      	lsrs	r3, r3, #1
 8000cf6:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	733b      	strb	r3, [r7, #12]
 8000cfe:	7b3b      	ldrb	r3, [r7, #12]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9e2      	bls.n	8000cca <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	3301      	adds	r3, #1
 8000d08:	73bb      	strb	r3, [r7, #14]
 8000d0a:	7bba      	ldrb	r2, [r7, #14]
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3d3      	bcc.n	8000cba <calculate_CRC+0x16>
        }
    }
    return crc;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <TMC2209_WaitForReply>:
}




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8000d28:	f003 fa30 	bl	800418c <HAL_GetTick>
 8000d2c:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 8000d2e:	e00c      	b.n	8000d4a <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 8000d30:	f003 fa2c 	bl	800418c <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d204      	bcs.n	8000d4a <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <TMC2209_WaitForReply+0x44>)
 8000d42:	f7ff ff51 	bl	8000be8 <debug_print>
             return 0; // Timeout
 8000d46:	2300      	movs	r3, #0
 8000d48:	e008      	b.n	8000d5c <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <TMC2209_WaitForReply+0x48>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0ed      	beq.n	8000d30 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <TMC2209_WaitForReply+0x48>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 8000d5a:	2301      	movs	r3, #1
 }
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	0800c4d4 	.word	0x0800c4d4
 8000d68:	20000124 	.word	0x20000124

08000d6c <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
	uint8_t flag = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	6858      	ldr	r0, [r3, #4]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	68f9      	ldr	r1, [r7, #12]
 8000d8c:	f008 fa92 	bl	80092b4 <HAL_UART_Transmit>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <TMC2209_sendCommand+0x34>
         debug_print("Failed to send command.\r\n");
 8000d96:	4819      	ldr	r0, [pc, #100]	@ (8000dfc <TMC2209_sendCommand+0x90>)
 8000d98:	f7ff ff26 	bl	8000be8 <debug_print>
         return 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e028      	b.n	8000df2 <TMC2209_sendCommand+0x86>
     }


     if(readLength){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d024      	beq.n	8000df0 <TMC2209_sendCommand+0x84>

     // Wait for reply
     HAL_UART_Receive_IT(tmc2209->driver.huart, rxData, readLength);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	b292      	uxth	r2, r2
 8000dae:	4914      	ldr	r1, [pc, #80]	@ (8000e00 <TMC2209_sendCommand+0x94>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f008 fb08 	bl	80093c6 <HAL_UART_Receive_IT>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 8000db6:	20c8      	movs	r0, #200	@ 0xc8
 8000db8:	f7ff ffb2 	bl	8000d20 <TMC2209_WaitForReply>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d104      	bne.n	8000dcc <TMC2209_sendCommand+0x60>
         debug_print("No reply received.\r\n");
 8000dc2:	4810      	ldr	r0, [pc, #64]	@ (8000e04 <TMC2209_sendCommand+0x98>)
 8000dc4:	f7ff ff10 	bl	8000be8 <debug_print>
         return 0; // command failed
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e012      	b.n	8000df2 <TMC2209_sendCommand+0x86>
     }
     /// DEBUG ///
     // Send transmitted data -- Note: this can't be called before receiving or else it will interfere with huart2

     debug_print("Data Transmitted: ");
 8000dcc:	480e      	ldr	r0, [pc, #56]	@ (8000e08 <TMC2209_sendCommand+0x9c>)
 8000dce:	f7ff ff0b 	bl	8000be8 <debug_print>
     debug_print_hex(command, writeLength);
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f7ff ff1b 	bl	8000c14 <debug_print_hex>
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
 8000dde:	480b      	ldr	r0, [pc, #44]	@ (8000e0c <TMC2209_sendCommand+0xa0>)
 8000de0:	f7ff ff02 	bl	8000be8 <debug_print>
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
 8000de4:	2108      	movs	r1, #8
 8000de6:	480a      	ldr	r0, [pc, #40]	@ (8000e10 <TMC2209_sendCommand+0xa4>)
 8000de8:	f7ff ff14 	bl	8000c14 <debug_print_hex>

     return rxBuffer; // Success
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <TMC2209_sendCommand+0xa4>)
 8000dee:	e000      	b.n	8000df2 <TMC2209_sendCommand+0x86>
     }

     return flag;
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	0800c4f4 	.word	0x0800c4f4
 8000e00:	20000110 	.word	0x20000110
 8000e04:	0800c510 	.word	0x0800c510
 8000e08:	0800c528 	.word	0x0800c528
 8000e0c:	0800c53c 	.word	0x0800c53c
 8000e10:	2000011c 	.word	0x2000011c

08000e14 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8000e22:	2305      	movs	r3, #5
 8000e24:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	7a1b      	ldrb	r3, [r3, #8]
 8000e2a:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	0e1b      	lsrs	r3, r3, #24
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	141b      	asrs	r3, r3, #16
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	121b      	asrs	r3, r3, #8
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	2107      	movs	r1, #7
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff22 	bl	8000ca4 <calculate_CRC>
 8000e60:	4603      	mov	r3, r0
 8000e62:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8000e64:	f107 0010 	add.w	r0, r7, #16
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	f7ff ff7d 	bl	8000d6c <TMC2209_sendCommand>

 }
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 	uint8_t read_request_command[8] = { 0 };
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]

// 	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
// 		return tmc2209->config->shadowRegister[address];

 	read_request_command[0] = SYNC;
 8000e90:	2305      	movs	r3, #5
 8000e92:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fefd 	bl	8000ca4 <calculate_CRC>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 8000eae:	f107 000c 	add.w	r0, r7, #12
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	f7ff ff58 	bl	8000d6c <TMC2209_sendCommand>
 8000ebc:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b05      	cmp	r3, #5
 8000ec4:	d00c      	beq.n	8000ee0 <TMC2209_readInit+0x64>
 		// If first byte equals 0 then it means no reply so return
 		if (verifyBuffer[0] == 0)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <TMC2209_readInit+0x58>
 			return -1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e03e      	b.n	8000f52 <TMC2209_readInit+0xd6>
 		debug_print("Invalid data received!(SYNC Byte)\r\n");
 8000ed4:	4821      	ldr	r0, [pc, #132]	@ (8000f5c <TMC2209_readInit+0xe0>)
 8000ed6:	f7ff fe87 	bl	8000be8 <debug_print>
 		return -1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e038      	b.n	8000f52 <TMC2209_readInit+0xd6>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2bff      	cmp	r3, #255	@ 0xff
 8000ee8:	d005      	beq.n	8000ef6 <TMC2209_readInit+0x7a>
 		debug_print("Invalid data received!(MCU Address)\r\n");
 8000eea:	481d      	ldr	r0, [pc, #116]	@ (8000f60 <TMC2209_readInit+0xe4>)
 8000eec:	f7ff fe7c 	bl	8000be8 <debug_print>
 		return -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	e02d      	b.n	8000f52 <TMC2209_readInit+0xd6>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3302      	adds	r3, #2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	78fa      	ldrb	r2, [r7, #3]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d005      	beq.n	8000f0e <TMC2209_readInit+0x92>
 		debug_print("Invalid data received!(Register Address)\r\n");
 8000f02:	4818      	ldr	r0, [pc, #96]	@ (8000f64 <TMC2209_readInit+0xe8>)
 8000f04:	f7ff fe70 	bl	8000be8 <debug_print>
 		return -1;
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	e021      	b.n	8000f52 <TMC2209_readInit+0xd6>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3307      	adds	r3, #7
 8000f12:	781c      	ldrb	r4, [r3, #0]
 8000f14:	2107      	movs	r1, #7
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff fec4 	bl	8000ca4 <calculate_CRC>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	429c      	cmp	r4, r3
 8000f20:	d005      	beq.n	8000f2e <TMC2209_readInit+0xb2>
 		debug_print("Invalid data received!(CRC)\r\n");
 8000f22:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <TMC2209_readInit+0xec>)
 8000f24:	f7ff fe60 	bl	8000be8 <debug_print>
 		return -1;
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	e011      	b.n	8000f52 <TMC2209_readInit+0xd6>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3303      	adds	r3, #3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	061a      	lsls	r2, r3, #24
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3305      	adds	r3, #5
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	3206      	adds	r2, #6
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	4313      	orrs	r3, r2
 }
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0800c550 	.word	0x0800c550
 8000f60:	0800c574 	.word	0x0800c574
 8000f64:	0800c59c 	.word	0x0800c59c
 8000f68:	0800c5c8 	.word	0x0800c5c8

08000f6c <TMC2209_SetSpreadCycle>:


uint8_t TMC2209_SetSpreadCycle(Motor *motor, uint8_t enable) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f003 f913 	bl	80041a4 <HAL_Delay>
	uint32_t gconf;
	uint32_t check_gconf;

	uint8_t driverID = motor->driver.id;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	char debug_msg[150];
	snprintf(debug_msg, sizeof(debug_msg), "----- Setting SpreadCycle Mode for Driver: %u -----\r\n", driverID);
 8000f86:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8000f8a:	f107 000c 	add.w	r0, r7, #12
 8000f8e:	4a30      	ldr	r2, [pc, #192]	@ (8001050 <TMC2209_SetSpreadCycle+0xe4>)
 8000f90:	2196      	movs	r1, #150	@ 0x96
 8000f92:	f00a fcc5 	bl	800b920 <sniprintf>
	debug_print(debug_msg);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe24 	bl	8000be8 <debug_print>
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2296      	movs	r2, #150	@ 0x96
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f00a fd0d 	bl	800b9c8 <memset>

	gconf = TMC2209_readInit(motor, TMC2209_REG_GCONF);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff63 	bl	8000e7c <TMC2209_readInit>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    if(gconf == TMC_ERROR){
 8000fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d106      	bne.n	8000fd4 <TMC2209_SetSpreadCycle+0x68>
    	debug_print("Failed to set SpreadCycle Mode!(Invalid Reply 1)\r\n");
 8000fc6:	4823      	ldr	r0, [pc, #140]	@ (8001054 <TMC2209_SetSpreadCycle+0xe8>)
 8000fc8:	f7ff fe0e 	bl	8000be8 <debug_print>
    	return gconf;
 8000fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	e038      	b.n	8001046 <TMC2209_SetSpreadCycle+0xda>
    }

    check_gconf = gconf;
 8000fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if(enable) {
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <TMC2209_SetSpreadCycle+0x84>
    	gconf |= (1 << TMC2209_EN_SPREADCYCLE_POS);
 8000fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000fee:	e005      	b.n	8000ffc <TMC2209_SetSpreadCycle+0x90>
    } else {
    	gconf &= ~(1 << TMC2209_EN_SPREADCYCLE_POS);
 8000ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ff4:	f023 0304 	bic.w	r3, r3, #4
 8000ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    if(gconf == check_gconf){ //Setpread is already EN/DIS ABLED so skip and return
 8000ffc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001000:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001004:	429a      	cmp	r2, r3
 8001006:	d104      	bne.n	8001012 <TMC2209_SetSpreadCycle+0xa6>
    	debug_print("Failed to set SpreadCycle Mode! (Spread is already on that Mode!)\r\n");
 8001008:	4813      	ldr	r0, [pc, #76]	@ (8001058 <TMC2209_SetSpreadCycle+0xec>)
 800100a:	f7ff fded 	bl	8000be8 <debug_print>
    	return enable;
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	e019      	b.n	8001046 <TMC2209_SetSpreadCycle+0xda>
    }

    TMC2209_writeInit(motor, TMC2209_REG_GCONF, gconf);
 8001012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001016:	461a      	mov	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fefa 	bl	8000e14 <TMC2209_writeInit>

    check_gconf = TMC2209_readInit(motor, TMC2209_REG_GCONF);
 8001020:	2100      	movs	r1, #0
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff2a 	bl	8000e7c <TMC2209_readInit>
 8001028:	4603      	mov	r3, r0
 800102a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if(check_gconf != gconf){
 800102e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001036:	429a      	cmp	r2, r3
 8001038:	d002      	beq.n	8001040 <TMC2209_SetSpreadCycle+0xd4>
    	debug_print("Failed to set SpreadCycle Mode!(invalid Reply 2)\r\n");
 800103a:	4808      	ldr	r0, [pc, #32]	@ (800105c <TMC2209_SetSpreadCycle+0xf0>)
 800103c:	f7ff fdd4 	bl	8000be8 <debug_print>
    }
    return check_gconf;
 8001040:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001044:	b2db      	uxtb	r3, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	37b0      	adds	r7, #176	@ 0xb0
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800c5e8 	.word	0x0800c5e8
 8001054:	0800c620 	.word	0x0800c620
 8001058:	0800c654 	.word	0x0800c654
 800105c:	0800c698 	.word	0x0800c698

08001060 <setMicrosteppingResolution>:

 }


// Function to set the microstepping resolution through UART
void setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b0ac      	sub	sp, #176	@ 0xb0
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f003 f899 	bl	80041a4 <HAL_Delay>
    uint8_t driverID = tmc2209->driver.id;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
    char debug_msg[150];

    snprintf(debug_msg, sizeof(debug_msg), "----- Setting Microstepping For Driver ID: %u -----\r\n", driverID);
 800107a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800107e:	f107 0008 	add.w	r0, r7, #8
 8001082:	4a6d      	ldr	r2, [pc, #436]	@ (8001238 <setMicrosteppingResolution+0x1d8>)
 8001084:	2196      	movs	r1, #150	@ 0x96
 8001086:	f00a fc4b 	bl	800b920 <sniprintf>
    debug_print(debug_msg);
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fdaa 	bl	8000be8 <debug_print>
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	2296      	movs	r2, #150	@ 0x96
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f00a fc93 	bl	800b9c8 <memset>
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 80010a2:	2380      	movs	r3, #128	@ 0x80
 80010a4:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 80010a8:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80010ac:	461a      	mov	r2, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff feaf 	bl	8000e14 <TMC2209_writeInit>

    HAL_Delay(2);
 80010b6:	2002      	movs	r0, #2
 80010b8:	f003 f874 	bl	80041a4 <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 80010bc:	216c      	movs	r1, #108	@ 0x6c
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fedc 	bl	8000e7c <TMC2209_readInit>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 80010ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010ce:	0e1b      	lsrs	r3, r3, #24
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e0:	d053      	beq.n	800118a <setMicrosteppingResolution+0x12a>
 80010e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e6:	dc74      	bgt.n	80011d2 <setMicrosteppingResolution+0x172>
 80010e8:	2b80      	cmp	r3, #128	@ 0x80
 80010ea:	d052      	beq.n	8001192 <setMicrosteppingResolution+0x132>
 80010ec:	2b80      	cmp	r3, #128	@ 0x80
 80010ee:	dc70      	bgt.n	80011d2 <setMicrosteppingResolution+0x172>
 80010f0:	2b20      	cmp	r3, #32
 80010f2:	dc47      	bgt.n	8001184 <setMicrosteppingResolution+0x124>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	dd6c      	ble.n	80011d2 <setMicrosteppingResolution+0x172>
 80010f8:	3b01      	subs	r3, #1
 80010fa:	2b1f      	cmp	r3, #31
 80010fc:	d869      	bhi.n	80011d2 <setMicrosteppingResolution+0x172>
 80010fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001104 <setMicrosteppingResolution+0xa4>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	080011cb 	.word	0x080011cb
 8001108:	080011c3 	.word	0x080011c3
 800110c:	080011d3 	.word	0x080011d3
 8001110:	080011bb 	.word	0x080011bb
 8001114:	080011d3 	.word	0x080011d3
 8001118:	080011d3 	.word	0x080011d3
 800111c:	080011d3 	.word	0x080011d3
 8001120:	080011b3 	.word	0x080011b3
 8001124:	080011d3 	.word	0x080011d3
 8001128:	080011d3 	.word	0x080011d3
 800112c:	080011d3 	.word	0x080011d3
 8001130:	080011d3 	.word	0x080011d3
 8001134:	080011d3 	.word	0x080011d3
 8001138:	080011d3 	.word	0x080011d3
 800113c:	080011d3 	.word	0x080011d3
 8001140:	080011ab 	.word	0x080011ab
 8001144:	080011d3 	.word	0x080011d3
 8001148:	080011d3 	.word	0x080011d3
 800114c:	080011d3 	.word	0x080011d3
 8001150:	080011d3 	.word	0x080011d3
 8001154:	080011d3 	.word	0x080011d3
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011d3 	.word	0x080011d3
 8001160:	080011d3 	.word	0x080011d3
 8001164:	080011d3 	.word	0x080011d3
 8001168:	080011d3 	.word	0x080011d3
 800116c:	080011d3 	.word	0x080011d3
 8001170:	080011d3 	.word	0x080011d3
 8001174:	080011d3 	.word	0x080011d3
 8001178:	080011d3 	.word	0x080011d3
 800117c:	080011d3 	.word	0x080011d3
 8001180:	080011a3 	.word	0x080011a3
 8001184:	2b40      	cmp	r3, #64	@ 0x40
 8001186:	d008      	beq.n	800119a <setMicrosteppingResolution+0x13a>
 8001188:	e023      	b.n	80011d2 <setMicrosteppingResolution+0x172>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 800118a:	2300      	movs	r3, #0
 800118c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001190:	e024      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 8001192:	2301      	movs	r3, #1
 8001194:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 8001198:	e020      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 800119a:	2302      	movs	r3, #2
 800119c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011a0:	e01c      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 80011a2:	2303      	movs	r3, #3
 80011a4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011a8:	e018      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 80011aa:	2304      	movs	r3, #4
 80011ac:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011b0:	e014      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 80011b2:	2305      	movs	r3, #5
 80011b4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011b8:	e010      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 80011ba:	2306      	movs	r3, #6
 80011bc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011c0:	e00c      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 80011c2:	2307      	movs	r3, #7
 80011c4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011c8:	e008      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 80011ca:	2308      	movs	r3, #8
 80011cc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011d0:	e004      	b.n	80011dc <setMicrosteppingResolution+0x17c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 80011d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80011d6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            break;
 80011da:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 80011dc:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 80011e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d103      	bne.n	80011f0 <setMicrosteppingResolution+0x190>
        debug_print("Resolution unchanged, no update needed.\n");
 80011e8:	4814      	ldr	r0, [pc, #80]	@ (800123c <setMicrosteppingResolution+0x1dc>)
 80011ea:	f7ff fcfd 	bl	8000be8 <debug_print>
 80011ee:	e01f      	b.n	8001230 <setMicrosteppingResolution+0x1d0>
        return;
    }
    HAL_Delay(2);
 80011f0:	2002      	movs	r0, #2
 80011f2:	f002 ffd7 	bl	80041a4 <HAL_Delay>
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 80011f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011fa:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80011fe:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001202:	061b      	lsls	r3, r3, #24
 8001204:	4313      	orrs	r3, r2
 8001206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 800120a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800120e:	461a      	mov	r2, r3
 8001210:	216c      	movs	r1, #108	@ 0x6c
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fdfe 	bl	8000e14 <TMC2209_writeInit>

    // Debug
    sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <setMicrosteppingResolution+0x1e0>)
 8001220:	4618      	mov	r0, r3
 8001222:	f00a fbb1 	bl	800b988 <siprintf>
    debug_print(debug_msg);
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fcdc 	bl	8000be8 <debug_print>

}
 8001230:	37b0      	adds	r7, #176	@ 0xb0
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	0800c7ac 	.word	0x0800c7ac
 800123c:	0800c7e4 	.word	0x0800c7e4
 8001240:	0800c810 	.word	0x0800c810

08001244 <checkMicrosteppingResolution>:


uint16_t checkMicrosteppingResolution(Motor *tmc2209) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b09e      	sub	sp, #120	@ 0x78
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_Delay(2);
 800124c:	2002      	movs	r0, #2
 800124e:	f002 ffa9 	bl	80041a4 <HAL_Delay>
    // Read the CHOPCONF register
    uint32_t chopconf = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8001252:	216c      	movs	r1, #108	@ 0x6c
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fe11 	bl	8000e7c <TMC2209_readInit>
 800125a:	4603      	mov	r3, r0
 800125c:	673b      	str	r3, [r7, #112]	@ 0x70
    // Extract the MRES bits (bits 24–27 in CHOPCONF)
    uint8_t mres = (chopconf >> 24) & 0x0F;
 800125e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001260:	0e1b      	lsrs	r3, r3, #24
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    // Calculate the current microstepping resolution
    uint16_t resolution;
    switch (mres) {
 800126c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001270:	2b08      	cmp	r3, #8
 8001272:	d83a      	bhi.n	80012ea <checkMicrosteppingResolution+0xa6>
 8001274:	a201      	add	r2, pc, #4	@ (adr r2, 800127c <checkMicrosteppingResolution+0x38>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	080012a1 	.word	0x080012a1
 8001280:	080012ab 	.word	0x080012ab
 8001284:	080012b3 	.word	0x080012b3
 8001288:	080012bb 	.word	0x080012bb
 800128c:	080012c3 	.word	0x080012c3
 8001290:	080012cb 	.word	0x080012cb
 8001294:	080012d3 	.word	0x080012d3
 8001298:	080012db 	.word	0x080012db
 800129c:	080012e3 	.word	0x080012e3
        case 0x00: resolution = 256; break;
 80012a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012a8:	e022      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        case 0x01: resolution = 128; break;
 80012aa:	2380      	movs	r3, #128	@ 0x80
 80012ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012b0:	e01e      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        case 0x02: resolution = 64; break;
 80012b2:	2340      	movs	r3, #64	@ 0x40
 80012b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012b8:	e01a      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        case 0x03: resolution = 32; break;
 80012ba:	2320      	movs	r3, #32
 80012bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012c0:	e016      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        case 0x04: resolution = 16; break;
 80012c2:	2310      	movs	r3, #16
 80012c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012c8:	e012      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        case 0x05: resolution = 8; break;
 80012ca:	2308      	movs	r3, #8
 80012cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012d0:	e00e      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        case 0x06: resolution = 4; break;
 80012d2:	2304      	movs	r3, #4
 80012d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012d8:	e00a      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        case 0x07: resolution = 2; break;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012e0:	e006      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        case 0x08: resolution = 1; break;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 80012e8:	e002      	b.n	80012f0 <checkMicrosteppingResolution+0xac>
        default: resolution = 0; // Unknown value
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    }

    // Debug
    char debug_msg[100];
    uint8_t driverID = tmc2209->driver.id;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    sprintf(debug_msg, "Current microstepping resolution for Driver ID: %u, Resolution: %u\n", driverID, resolution);
 80012f8:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80012fc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001300:	f107 0008 	add.w	r0, r7, #8
 8001304:	4906      	ldr	r1, [pc, #24]	@ (8001320 <checkMicrosteppingResolution+0xdc>)
 8001306:	f00a fb3f 	bl	800b988 <siprintf>
    debug_print(debug_msg);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fc6a 	bl	8000be8 <debug_print>
    return resolution;
 8001314:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
}
 8001318:	4618      	mov	r0, r3
 800131a:	3778      	adds	r7, #120	@ 0x78
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	0800c83c 	.word	0x0800c83c

08001324 <MotorsHoming>:
    }
}



void MotorsHoming(Motor *motor){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<4; i++){
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e14a      	b.n	80015c8 <MotorsHoming+0x2a4>
		if(i == 0){
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d13c      	bne.n	80013b2 <MotorsHoming+0x8e>
			TMC2209_SetDirection(&motor[0],0);
 8001338:	2100      	movs	r1, #0
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fb80 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[0],16000);
 8001340:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fba5 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0){
 800134a:	2110      	movs	r1, #16
 800134c:	48a3      	ldr	r0, [pc, #652]	@ (80015dc <MotorsHoming+0x2b8>)
 800134e:	f000 ff23 	bl	8002198 <IsSensorTriggered>
 8001352:	4603      	mov	r3, r0
 8001354:	f083 0301 	eor.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d026      	beq.n	80013ac <MotorsHoming+0x88>
					TMC2209_Start(&motor[0]);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fc0e 	bl	8000b80 <TMC2209_Start>
					while(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0);
 8001364:	bf00      	nop
 8001366:	2110      	movs	r1, #16
 8001368:	489c      	ldr	r0, [pc, #624]	@ (80015dc <MotorsHoming+0x2b8>)
 800136a:	f000 ff15 	bl	8002198 <IsSensorTriggered>
 800136e:	4603      	mov	r3, r0
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f5      	bne.n	8001366 <MotorsHoming+0x42>
					if((IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 1)){
 800137a:	2110      	movs	r1, #16
 800137c:	4897      	ldr	r0, [pc, #604]	@ (80015dc <MotorsHoming+0x2b8>)
 800137e:	f000 ff0b 	bl	8002198 <IsSensorTriggered>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d011      	beq.n	80013ac <MotorsHoming+0x88>
						TMC2209_Stop(&motor[0]);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fbe3 	bl	8000b54 <TMC2209_Stop>
						motor[0].currentPositionMM = 0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	64da      	str	r2, [r3, #76]	@ 0x4c
						motor[0].stepsTaken = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	645a      	str	r2, [r3, #68]	@ 0x44
						motor[i].StepsBack = 0;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2264      	movs	r2, #100	@ 0x64
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	65da      	str	r2, [r3, #92]	@ 0x5c

					}

				}
			TMC2209_Stop(&motor[0]);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fbd1 	bl	8000b54 <TMC2209_Stop>

		}
		if(i == 1){
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d150      	bne.n	800145a <MotorsHoming+0x136>
			TMC2209_SetDirection(&motor[1],1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3364      	adds	r3, #100	@ 0x64
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fb3e 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[1],10000);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3364      	adds	r3, #100	@ 0x64
 80013c8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fb61 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0){
 80013d2:	2104      	movs	r1, #4
 80013d4:	4881      	ldr	r0, [pc, #516]	@ (80015dc <MotorsHoming+0x2b8>)
 80013d6:	f000 fedf 	bl	8002198 <IsSensorTriggered>
 80013da:	4603      	mov	r3, r0
 80013dc:	f083 0301 	eor.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d034      	beq.n	8001450 <MotorsHoming+0x12c>
				TMC2209_Start(&motor[1]);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3364      	adds	r3, #100	@ 0x64
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fbc8 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0);
 80013f0:	bf00      	nop
 80013f2:	2104      	movs	r1, #4
 80013f4:	4879      	ldr	r0, [pc, #484]	@ (80015dc <MotorsHoming+0x2b8>)
 80013f6:	f000 fecf 	bl	8002198 <IsSensorTriggered>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f5      	bne.n	80013f2 <MotorsHoming+0xce>
				if((IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 1)){
 8001406:	2104      	movs	r1, #4
 8001408:	4874      	ldr	r0, [pc, #464]	@ (80015dc <MotorsHoming+0x2b8>)
 800140a:	f000 fec5 	bl	8002198 <IsSensorTriggered>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01d      	beq.n	8001450 <MotorsHoming+0x12c>
					TMC2209_Stop(&motor[1]);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3364      	adds	r3, #100	@ 0x64
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fb9b 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2264      	movs	r2, #100	@ 0x64
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2264      	movs	r2, #100	@ 0x64
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	@ 0x44
	                motor[i].StepsFront = 0;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2264      	movs	r2, #100	@ 0x64
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	2200      	movs	r2, #0
 800144e:	659a      	str	r2, [r3, #88]	@ 0x58
				}
			}
			TMC2209_Stop(&motor[1]);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3364      	adds	r3, #100	@ 0x64
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb7d 	bl	8000b54 <TMC2209_Stop>
		}
		if(i == 2){
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d158      	bne.n	8001512 <MotorsHoming+0x1ee>
			TMC2209_SetDirection(&motor[2],1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	33c8      	adds	r3, #200	@ 0xc8
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff faea 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[2],16000);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	33c8      	adds	r3, #200	@ 0xc8
 8001470:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb0d 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0){
 800147a:	2110      	movs	r1, #16
 800147c:	4858      	ldr	r0, [pc, #352]	@ (80015e0 <MotorsHoming+0x2bc>)
 800147e:	f000 fe8b 	bl	8002198 <IsSensorTriggered>
 8001482:	4603      	mov	r3, r0
 8001484:	f083 0301 	eor.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03c      	beq.n	8001508 <MotorsHoming+0x1e4>
				TMC2209_Start(&motor[2]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	33c8      	adds	r3, #200	@ 0xc8
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fb74 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0);
 8001498:	bf00      	nop
 800149a:	2110      	movs	r1, #16
 800149c:	4850      	ldr	r0, [pc, #320]	@ (80015e0 <MotorsHoming+0x2bc>)
 800149e:	f000 fe7b 	bl	8002198 <IsSensorTriggered>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f5      	bne.n	800149a <MotorsHoming+0x176>
				if((IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 1)){
 80014ae:	2110      	movs	r1, #16
 80014b0:	484b      	ldr	r0, [pc, #300]	@ (80015e0 <MotorsHoming+0x2bc>)
 80014b2:	f000 fe71 	bl	8002198 <IsSensorTriggered>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d025      	beq.n	8001508 <MotorsHoming+0x1e4>
					TMC2209_Stop(&motor[2]);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	33c8      	adds	r3, #200	@ 0xc8
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fb47 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2264      	movs	r2, #100	@ 0x64
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2264      	movs	r2, #100	@ 0x64
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	@ 0x44
				    motor[i].StepsFront = 0;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2264      	movs	r2, #100	@ 0x64
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	2200      	movs	r2, #0
 80014f6:	659a      	str	r2, [r3, #88]	@ 0x58
				    motor[i].StepsBack = 0;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2264      	movs	r2, #100	@ 0x64
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	2200      	movs	r2, #0
 8001506:	65da      	str	r2, [r3, #92]	@ 0x5c

				}
			}
			TMC2209_Stop(&motor[2]);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	33c8      	adds	r3, #200	@ 0xc8
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fb21 	bl	8000b54 <TMC2209_Stop>
	}
		if(i == 3){
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d154      	bne.n	80015c2 <MotorsHoming+0x29e>
			TMC2209_SetDirection(&motor[3],0);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fa8d 	bl	8000a40 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[3],10000);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800152c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff faaf 	bl	8000a94 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0){
 8001536:	2108      	movs	r1, #8
 8001538:	482a      	ldr	r0, [pc, #168]	@ (80015e4 <MotorsHoming+0x2c0>)
 800153a:	f000 fe2d 	bl	8002198 <IsSensorTriggered>
 800153e:	4603      	mov	r3, r0
 8001540:	f083 0301 	eor.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d035      	beq.n	80015b6 <MotorsHoming+0x292>
				TMC2209_Start(&motor[3]);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fb15 	bl	8000b80 <TMC2209_Start>
				while(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0);
 8001556:	bf00      	nop
 8001558:	2108      	movs	r1, #8
 800155a:	4822      	ldr	r0, [pc, #136]	@ (80015e4 <MotorsHoming+0x2c0>)
 800155c:	f000 fe1c 	bl	8002198 <IsSensorTriggered>
 8001560:	4603      	mov	r3, r0
 8001562:	f083 0301 	eor.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f5      	bne.n	8001558 <MotorsHoming+0x234>
				if((IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 1)){
 800156c:	2108      	movs	r1, #8
 800156e:	481d      	ldr	r0, [pc, #116]	@ (80015e4 <MotorsHoming+0x2c0>)
 8001570:	f000 fe12 	bl	8002198 <IsSensorTriggered>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01d      	beq.n	80015b6 <MotorsHoming+0x292>
					TMC2209_Stop(&motor[3]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fae7 	bl	8000b54 <TMC2209_Stop>
					motor[i].currentPositionMM = 450;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2264      	movs	r2, #100	@ 0x64
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a15      	ldr	r2, [pc, #84]	@ (80015e8 <MotorsHoming+0x2c4>)
 8001594:	64da      	str	r2, [r3, #76]	@ 0x4c
					motor[i].stepsTaken = 0;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2264      	movs	r2, #100	@ 0x64
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	@ 0x44
				    motor[i].StepsBack = 0;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2264      	movs	r2, #100	@ 0x64
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	65da      	str	r2, [r3, #92]	@ 0x5c
				}
			}
			TMC2209_Stop(&motor[3]);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fac9 	bl	8000b54 <TMC2209_Stop>
	for(int i = 0; i<4; i++){
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3301      	adds	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	f77f aeb1 	ble.w	8001332 <MotorsHoming+0xe>




}
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	43e10000 	.word	0x43e10000

080015ec <MotorControl_ButtonHandler>:
void MotorControl_ButtonHandler(Motor *motors) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	static uint8_t CtrPressedFlag = 0; // Flag to detect button press edge
	    // StepsFront[0] = 0;
	    uint32_t pressStartTime = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
	    uint32_t debounceTime = 50;
 80015f8:	2332      	movs	r3, #50	@ 0x32
 80015fa:	613b      	str	r3, [r7, #16]
	    uint32_t currentTime = HAL_GetTick();
 80015fc:	f002 fdc6 	bl	800418c <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]
	    static uint32_t lastPressTime = 0; // Last valid press timestamp

	    if (HAL_GPIO_ReadPin(BtnCtr_GPIO_Port, BtnCtr_Pin) == GPIO_PIN_SET) {
 8001602:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001606:	48b7      	ldr	r0, [pc, #732]	@ (80018e4 <MotorControl_ButtonHandler+0x2f8>)
 8001608:	f003 fc2a 	bl	8004e60 <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d10a      	bne.n	8001628 <MotorControl_ButtonHandler+0x3c>
	        if (CtrPressedFlag == 0) { // Only increment on first press
 8001612:	4bb5      	ldr	r3, [pc, #724]	@ (80018e8 <MotorControl_ButtonHandler+0x2fc>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 817a 	bne.w	8001910 <MotorControl_ButtonHandler+0x324>
	            pressStartTime = currentTime;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	617b      	str	r3, [r7, #20]
	            CtrPressedFlag = 1; // Set flag to avoid multiple increments
 8001620:	4bb1      	ldr	r3, [pc, #708]	@ (80018e8 <MotorControl_ButtonHandler+0x2fc>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e173      	b.n	8001910 <MotorControl_ButtonHandler+0x324>
	        }
	    } else {
	        if (CtrPressedFlag == 1 && (currentTime - pressStartTime) >= debounceTime) {
 8001628:	4baf      	ldr	r3, [pc, #700]	@ (80018e8 <MotorControl_ButtonHandler+0x2fc>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10e      	bne.n	800164e <MotorControl_ButtonHandler+0x62>
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d808      	bhi.n	800164e <MotorControl_ButtonHandler+0x62>
	            Pressed += 1;
 800163c:	4bab      	ldr	r3, [pc, #684]	@ (80018ec <MotorControl_ButtonHandler+0x300>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4ba9      	ldr	r3, [pc, #676]	@ (80018ec <MotorControl_ButtonHandler+0x300>)
 8001646:	701a      	strb	r2, [r3, #0]
	            lastPressTime = currentTime; // Update the last valid press time
 8001648:	4aa9      	ldr	r2, [pc, #676]	@ (80018f0 <MotorControl_ButtonHandler+0x304>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6013      	str	r3, [r2, #0]
	              }
	        CtrPressedFlag = 0; // Reset flag when button is released
 800164e:	4ba6      	ldr	r3, [pc, #664]	@ (80018e8 <MotorControl_ButtonHandler+0x2fc>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
        switch (Pressed) {
 8001654:	4ba5      	ldr	r3, [pc, #660]	@ (80018ec <MotorControl_ButtonHandler+0x300>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d003      	beq.n	8001664 <MotorControl_ButtonHandler+0x78>
 800165c:	2b02      	cmp	r3, #2
 800165e:	f000 80a5 	beq.w	80017ac <MotorControl_ButtonHandler+0x1c0>
 8001662:	e151      	b.n	8001908 <MotorControl_ButtonHandler+0x31c>
            case 1:
                // Save calibration for first press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160;
 8001664:	4ba3      	ldr	r3, [pc, #652]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	23c8      	movs	r3, #200	@ 0xc8
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4413      	add	r3, r2
 8001674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001676:	4a9f      	ldr	r2, [pc, #636]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	4611      	mov	r1, r2
 800167c:	22c8      	movs	r2, #200	@ 0xc8
 800167e:	fb01 f202 	mul.w	r2, r1, r2
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	440a      	add	r2, r1
 8001686:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	bfb8      	it	lt
 800168e:	425b      	neglt	r3, r3
 8001690:	4a99      	ldr	r2, [pc, #612]	@ (80018f8 <MotorControl_ButtonHandler+0x30c>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1192      	asrs	r2, r2, #6
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2].currentPositionMM =
 800169c:	4b95      	ldr	r3, [pc, #596]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	23c8      	movs	r3, #200	@ 0xc8
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	ee07 1a90 	vmov	s15, r1
 80016b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b4:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400;
 80016b8:	4b8e      	ldr	r3, [pc, #568]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	23c8      	movs	r3, #200	@ 0xc8
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	3364      	adds	r3, #100	@ 0x64
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016cc:	4619      	mov	r1, r3
 80016ce:	4b89      	ldr	r3, [pc, #548]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	23c8      	movs	r3, #200	@ 0xc8
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	3364      	adds	r3, #100	@ 0x64
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	1acb      	subs	r3, r1, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bfb8      	it	lt
 80016e8:	425b      	neglt	r3, r3
 80016ea:	4a84      	ldr	r2, [pc, #528]	@ (80018fc <MotorControl_ButtonHandler+0x310>)
 80016ec:	fb82 1203 	smull	r1, r2, r2, r3
 80016f0:	11d2      	asrs	r2, r2, #7
 80016f2:	17db      	asrs	r3, r3, #31
 80016f4:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2 + 1].currentPositionMM =
 80016f6:	4b7f      	ldr	r3, [pc, #508]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	23c8      	movs	r3, #200	@ 0xc8
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	3364      	adds	r3, #100	@ 0x64
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	ee07 1a90 	vmov	s15, r1
 800170c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001710:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

                motors[motorGroup * 2].calib[0] = motors[motorGroup * 2].currentPositionMM;
 8001714:	4b77      	ldr	r3, [pc, #476]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	23c8      	movs	r3, #200	@ 0xc8
 800171c:	fb02 f303 	mul.w	r3, r2, r3
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001728:	4b72      	ldr	r3, [pc, #456]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	23c8      	movs	r3, #200	@ 0xc8
 8001730:	fb02 f303 	mul.w	r3, r2, r3
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800173c:	ee17 2a90 	vmov	r2, s15
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                motors[motorGroup * 2 + 1].calib[0] = motors[motorGroup * 2 + 1].currentPositionMM;
 8001746:	4b6b      	ldr	r3, [pc, #428]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	23c8      	movs	r3, #200	@ 0xc8
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	3364      	adds	r3, #100	@ 0x64
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800175c:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	23c8      	movs	r3, #200	@ 0xc8
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	3364      	adds	r3, #100	@ 0x64
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001772:	ee17 2a90 	vmov	r2, s15
 8001776:	b292      	uxth	r2, r2
 8001778:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

                motors[motorGroup * 2].currentPositionMM = 0;
 800177c:	4b5d      	ldr	r3, [pc, #372]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	23c8      	movs	r3, #200	@ 0xc8
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	64da      	str	r2, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM = 0;
 8001792:	4b58      	ldr	r3, [pc, #352]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	23c8      	movs	r3, #200	@ 0xc8
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	3364      	adds	r3, #100	@ 0x64
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	64da      	str	r2, [r3, #76]	@ 0x4c
                break;
 80017aa:	e0b1      	b.n	8001910 <MotorControl_ButtonHandler+0x324>

            case 2:
                // Save calibration for second press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 80017ac:	4b51      	ldr	r3, [pc, #324]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	23c8      	movs	r3, #200	@ 0xc8
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	4a4d      	ldr	r2, [pc, #308]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	4611      	mov	r1, r2
 80017c4:	22c8      	movs	r2, #200	@ 0xc8
 80017c6:	fb01 f202 	mul.w	r2, r1, r2
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	440a      	add	r2, r1
 80017ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bfb8      	it	lt
 80017d6:	425b      	neglt	r3, r3
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2].currentPositionMM =
 80017e0:	4b44      	ldr	r3, [pc, #272]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	23c8      	movs	r3, #200	@ 0xc8
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 80017f0:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001900 <MotorControl_ButtonHandler+0x314>
 80017f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2].currentPositionMM =
 80017f8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 80017fc:	4b3d      	ldr	r3, [pc, #244]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	23c8      	movs	r3, #200	@ 0xc8
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	3364      	adds	r3, #100	@ 0x64
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001810:	4619      	mov	r1, r3
 8001812:	4b38      	ldr	r3, [pc, #224]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	23c8      	movs	r3, #200	@ 0xc8
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	3364      	adds	r3, #100	@ 0x64
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001826:	1acb      	subs	r3, r1, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	bfb8      	it	lt
 800182c:	425b      	neglt	r3, r3
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2 + 1].currentPositionMM =
 8001836:	4b2f      	ldr	r3, [pc, #188]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	23c8      	movs	r3, #200	@ 0xc8
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	3364      	adds	r3, #100	@ 0x64
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 8001848:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001904 <MotorControl_ButtonHandler+0x318>
 800184c:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2 + 1].currentPositionMM =
 8001850:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

                motors[motorGroup * 2].calib[1] = motors[motorGroup * 2].currentPositionMM;
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	23c8      	movs	r3, #200	@ 0xc8
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	23c8      	movs	r3, #200	@ 0xc8
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187c:	ee17 2a90 	vmov	r2, s15
 8001880:	b292      	uxth	r2, r2
 8001882:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                motors[motorGroup * 2 + 1].calib[1] = motors[motorGroup * 2 + 1].currentPositionMM;
 8001886:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	23c8      	movs	r3, #200	@ 0xc8
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	3364      	adds	r3, #100	@ 0x64
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800189c:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	23c8      	movs	r3, #200	@ 0xc8
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	3364      	adds	r3, #100	@ 0x64
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b2:	ee17 2a90 	vmov	r2, s15
 80018b6:	b292      	uxth	r2, r2
 80018b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                motorGroup += 1;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80018c6:	701a      	strb	r2, [r3, #0]
                if (motorGroup >= 2) {
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d902      	bls.n	80018d6 <MotorControl_ButtonHandler+0x2ea>
                       motorGroup = 0;  // Reset or handle as per your system's requirement
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <MotorControl_ButtonHandler+0x308>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
                  }
                // Perform homing for all motors
                  MotorsHoming(motors);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fd24 	bl	8001324 <MotorsHoming>
//                for(int i = 0; i < 4; i++) {
//                TMC2209_MoveTo(axis,motorIndex,targetPositionMM);
//              }

           // Reset Pressed counter to prevent further calibration steps
                Pressed = 0;
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <MotorControl_ButtonHandler+0x300>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
                    break;
 80018e2:	e015      	b.n	8001910 <MotorControl_ButtonHandler+0x324>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	20000108 	.word	0x20000108
 80018ec:	200000f4 	.word	0x200000f4
 80018f0:	2000010c 	.word	0x2000010c
 80018f4:	200000f6 	.word	0x200000f6
 80018f8:	66666667 	.word	0x66666667
 80018fc:	51eb851f 	.word	0x51eb851f
 8001900:	43200000 	.word	0x43200000
 8001904:	43c80000 	.word	0x43c80000

                 default:
                                // Handle unexpected Pressed value
                   Pressed = 0;
 8001908:	4b7c      	ldr	r3, [pc, #496]	@ (8001afc <MotorControl_ButtonHandler+0x510>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
                   break;
 800190e:	bf00      	nop

    }



	if(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 8001910:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001914:	487a      	ldr	r0, [pc, #488]	@ (8001b00 <MotorControl_ButtonHandler+0x514>)
 8001916:	f003 faa3 	bl	8004e60 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d11f      	bne.n	8001960 <MotorControl_ButtonHandler+0x374>
		    // Send one step for each millisecond the button is pressed
	    //setMicrosteppingResolution(&motors[motorGroup *2], 16);
		//TMC2209_SetSpeed(&motors[motorGroup *2+1],16000);
			//StepsFront[0] = 0;
            //LastSteps[0] += StepsFront[0];
			TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_SET);
 8001920:	4b78      	ldr	r3, [pc, #480]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	23c8      	movs	r3, #200	@ 0xc8
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f884 	bl	8000a40 <TMC2209_SetDirection>
		    TMC2209_Start_C(&motors[motorGroup * 2]);
 8001938:	4b72      	ldr	r3, [pc, #456]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	23c8      	movs	r3, #200	@ 0xc8
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f933 	bl	8000bb4 <TMC2209_Start_C>
		    while(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 800194e:	bf00      	nop
 8001950:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001954:	486a      	ldr	r0, [pc, #424]	@ (8001b00 <MotorControl_ButtonHandler+0x514>)
 8001956:	f003 fa83 	bl	8004e60 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f7      	beq.n	8001950 <MotorControl_ButtonHandler+0x364>
//        	TMC2209_Stop(&motors[motorGroup * 2]);
//        	StepsFront[0] = 0;

    	//}
}
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_SET ) {
 8001960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001964:	4866      	ldr	r0, [pc, #408]	@ (8001b00 <MotorControl_ButtonHandler+0x514>)
 8001966:	f003 fa7b 	bl	8004e60 <HAL_GPIO_ReadPin>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10a      	bne.n	8001986 <MotorControl_ButtonHandler+0x39a>
    	TMC2209_Stop(&motors[motorGroup * 2]);
 8001970:	4b64      	ldr	r3, [pc, #400]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	23c8      	movs	r3, #200	@ 0xc8
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f8e7 	bl	8000b54 <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 8001986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800198a:	485d      	ldr	r0, [pc, #372]	@ (8001b00 <MotorControl_ButtonHandler+0x514>)
 800198c:	f003 fa68 	bl	8004e60 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11f      	bne.n	80019d6 <MotorControl_ButtonHandler+0x3ea>
		//motors[motorGroup*2].stepsTaken = 0;
		//StepsBack[0] = 0;
		//StepsBack[0] += motors[motorGroup*2].stepsTaken;
		TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_RESET);
 8001996:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	23c8      	movs	r3, #200	@ 0xc8
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f849 	bl	8000a40 <TMC2209_SetDirection>
		TMC2209_Start_C(&motors[motorGroup * 2]);
 80019ae:	4b55      	ldr	r3, [pc, #340]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	23c8      	movs	r3, #200	@ 0xc8
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f8f8 	bl	8000bb4 <TMC2209_Start_C>
		while(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 80019c4:	bf00      	nop
 80019c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ca:	484d      	ldr	r0, [pc, #308]	@ (8001b00 <MotorControl_ButtonHandler+0x514>)
 80019cc:	f003 fa48 	bl	8004e60 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f7      	beq.n	80019c6 <MotorControl_ButtonHandler+0x3da>
//
//    	}


}
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_SET || StepsBack[0] > 28000) {
 80019d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019da:	4849      	ldr	r0, [pc, #292]	@ (8001b00 <MotorControl_ButtonHandler+0x514>)
 80019dc:	f003 fa40 	bl	8004e60 <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d005      	beq.n	80019f2 <MotorControl_ButtonHandler+0x406>
 80019e6:	4b48      	ldr	r3, [pc, #288]	@ (8001b08 <MotorControl_ButtonHandler+0x51c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f646 5260 	movw	r2, #28000	@ 0x6d60
 80019ee:	4293      	cmp	r3, r2
 80019f0:	dd0a      	ble.n	8001a08 <MotorControl_ButtonHandler+0x41c>
        // Button 1 pressed (Step Motor in one direction)
    	TMC2209_Stop(&motors[motorGroup * 2]);
 80019f2:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	23c8      	movs	r3, #200	@ 0xc8
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f8a6 	bl	8000b54 <TMC2209_Stop>

        //TMC2209_CountSteps_C(&motors[motorGroup * 2],StepsBack[0]);
    }


	if(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET){
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4840      	ldr	r0, [pc, #256]	@ (8001b0c <MotorControl_ButtonHandler+0x520>)
 8001a0c:	f003 fa28 	bl	8004e60 <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d120      	bne.n	8001a58 <MotorControl_ButtonHandler+0x46c>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_SET);
 8001a16:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	23c8      	movs	r3, #200	@ 0xc8
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	3364      	adds	r3, #100	@ 0x64
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f808 	bl	8000a40 <TMC2209_SetDirection>
        TMC2209_Start_C(&motors[motorGroup * 2+1]);
 8001a30:	4b34      	ldr	r3, [pc, #208]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	23c8      	movs	r3, #200	@ 0xc8
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	3364      	adds	r3, #100	@ 0x64
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f8b6 	bl	8000bb4 <TMC2209_Start_C>
        while(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET);
 8001a48:	bf00      	nop
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	482f      	ldr	r0, [pc, #188]	@ (8001b0c <MotorControl_ButtonHandler+0x520>)
 8001a4e:	f003 fa07 	bl	8004e60 <HAL_GPIO_ReadPin>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f8      	beq.n	8001a4a <MotorControl_ButtonHandler+0x45e>
}
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_SET) {
 8001a58:	2102      	movs	r1, #2
 8001a5a:	482c      	ldr	r0, [pc, #176]	@ (8001b0c <MotorControl_ButtonHandler+0x520>)
 8001a5c:	f003 fa00 	bl	8004e60 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d10b      	bne.n	8001a7e <MotorControl_ButtonHandler+0x492>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2 + 1]);
 8001a66:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	23c8      	movs	r3, #200	@ 0xc8
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	3364      	adds	r3, #100	@ 0x64
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f86b 	bl	8000b54 <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET){
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4822      	ldr	r0, [pc, #136]	@ (8001b0c <MotorControl_ButtonHandler+0x520>)
 8001a82:	f003 f9ed 	bl	8004e60 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d120      	bne.n	8001ace <MotorControl_ButtonHandler+0x4e2>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_RESET);
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	23c8      	movs	r3, #200	@ 0xc8
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	3364      	adds	r3, #100	@ 0x64
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe ffcd 	bl	8000a40 <TMC2209_SetDirection>
        TMC2209_Start_C(&motors[motorGroup * 2+1]);
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	23c8      	movs	r3, #200	@ 0xc8
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	3364      	adds	r3, #100	@ 0x64
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f87b 	bl	8000bb4 <TMC2209_Start_C>
        while(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET);
 8001abe:	bf00      	nop
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4812      	ldr	r0, [pc, #72]	@ (8001b0c <MotorControl_ButtonHandler+0x520>)
 8001ac4:	f003 f9cc 	bl	8004e60 <HAL_GPIO_ReadPin>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f8      	beq.n	8001ac0 <MotorControl_ButtonHandler+0x4d4>
}
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_SET) {
 8001ace:	2101      	movs	r1, #1
 8001ad0:	480e      	ldr	r0, [pc, #56]	@ (8001b0c <MotorControl_ButtonHandler+0x520>)
 8001ad2:	f003 f9c5 	bl	8004e60 <HAL_GPIO_ReadPin>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10b      	bne.n	8001af4 <MotorControl_ButtonHandler+0x508>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2+1]);
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <MotorControl_ButtonHandler+0x518>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	23c8      	movs	r3, #200	@ 0xc8
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	3364      	adds	r3, #100	@ 0x64
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f830 	bl	8000b54 <TMC2209_Stop>
    }
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200000f4 	.word	0x200000f4
 8001b00:	40021400 	.word	0x40021400
 8001b04:	200000f6 	.word	0x200000f6
 8001b08:	200000e4 	.word	0x200000e4
 8001b0c:	40021800 	.word	0x40021800

08001b10 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	e265      	b.n	8001fe8 <initializeMotors+0x4d8>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x00; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 8001b1c:	4ab8      	ldr	r2, [pc, #736]	@ (8001e00 <initializeMotors+0x2f0>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2164      	movs	r1, #100	@ 0x64
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	3308      	adds	r3, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	b2d8      	uxtb	r0, r3
 8001b32:	4ab3      	ldr	r2, [pc, #716]	@ (8001e00 <initializeMotors+0x2f0>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2164      	movs	r1, #100	@ 0x64
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4602      	mov	r2, r0
 8001b40:	701a      	strb	r2, [r3, #0]

        motors[i].stepsTaken = 0;
 8001b42:	4aaf      	ldr	r2, [pc, #700]	@ (8001e00 <initializeMotors+0x2f0>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2164      	movs	r1, #100	@ 0x64
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3344      	adds	r3, #68	@ 0x44
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 8001b54:	4aaa      	ldr	r2, [pc, #680]	@ (8001e00 <initializeMotors+0x2f0>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2164      	movs	r1, #100	@ 0x64
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3348      	adds	r3, #72	@ 0x48
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8001b66:	4aa6      	ldr	r2, [pc, #664]	@ (8001e00 <initializeMotors+0x2f0>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2164      	movs	r1, #100	@ 0x64
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	334c      	adds	r3, #76	@ 0x4c
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 8001b7a:	4aa1      	ldr	r2, [pc, #644]	@ (8001e00 <initializeMotors+0x2f0>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2164      	movs	r1, #100	@ 0x64
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3350      	adds	r3, #80	@ 0x50
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 8001b8e:	4a9c      	ldr	r2, [pc, #624]	@ (8001e00 <initializeMotors+0x2f0>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2164      	movs	r1, #100	@ 0x64
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3354      	adds	r3, #84	@ 0x54
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 808a 	bne.w	8001cbc <initializeMotors+0x1ac>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8001ba8:	4a95      	ldr	r2, [pc, #596]	@ (8001e00 <initializeMotors+0x2f0>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2164      	movs	r1, #100	@ 0x64
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	4a93      	ldr	r2, [pc, #588]	@ (8001e04 <initializeMotors+0x2f4>)
 8001bb8:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8001bba:	4a91      	ldr	r2, [pc, #580]	@ (8001e00 <initializeMotors+0x2f0>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2164      	movs	r1, #100	@ 0x64
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3310      	adds	r3, #16
 8001bc8:	2208      	movs	r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 16;
 8001bcc:	4a8c      	ldr	r2, [pc, #560]	@ (8001e00 <initializeMotors+0x2f0>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2164      	movs	r1, #100	@ 0x64
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	2210      	movs	r2, #16
 8001bdc:	801a      	strh	r2, [r3, #0]
        motors[i].driver.huart = &huart4;
 8001bde:	4a88      	ldr	r2, [pc, #544]	@ (8001e00 <initializeMotors+0x2f0>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2164      	movs	r1, #100	@ 0x64
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	3304      	adds	r3, #4
 8001bec:	4a86      	ldr	r2, [pc, #536]	@ (8001e08 <initializeMotors+0x2f8>)
 8001bee:	601a      	str	r2, [r3, #0]
        motors[i].stepsPerRevolution = 400;
 8001bf0:	4a83      	ldr	r2, [pc, #524]	@ (8001e00 <initializeMotors+0x2f0>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2164      	movs	r1, #100	@ 0x64
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	333c      	adds	r3, #60	@ 0x3c
 8001bfe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001c02:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = GPIOB;
 8001c04:	4a7e      	ldr	r2, [pc, #504]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2164      	movs	r1, #100	@ 0x64
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3314      	adds	r3, #20
 8001c12:	4a7e      	ldr	r2, [pc, #504]	@ (8001e0c <initializeMotors+0x2fc>)
 8001c14:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = GPIO_PIN_10;
 8001c16:	4a7a      	ldr	r2, [pc, #488]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2164      	movs	r1, #100	@ 0x64
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3318      	adds	r3, #24
 8001c24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c28:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = GPIOF;
 8001c2a:	4a75      	ldr	r2, [pc, #468]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2164      	movs	r1, #100	@ 0x64
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	331c      	adds	r3, #28
 8001c38:	4a75      	ldr	r2, [pc, #468]	@ (8001e10 <initializeMotors+0x300>)
 8001c3a:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = GPIO_PIN_7;
 8001c3c:	4a70      	ldr	r2, [pc, #448]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2164      	movs	r1, #100	@ 0x64
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3320      	adds	r3, #32
 8001c4a:	2280      	movs	r2, #128	@ 0x80
 8001c4c:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = GPIOB;
 8001c4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2164      	movs	r1, #100	@ 0x64
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3324      	adds	r3, #36	@ 0x24
 8001c5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001e0c <initializeMotors+0x2fc>)
 8001c5e:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = GPIO_PIN_11;
 8001c60:	4a67      	ldr	r2, [pc, #412]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2164      	movs	r1, #100	@ 0x64
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3328      	adds	r3, #40	@ 0x28
 8001c6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c72:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = GPIOD;
 8001c74:	4a62      	ldr	r2, [pc, #392]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2164      	movs	r1, #100	@ 0x64
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	332c      	adds	r3, #44	@ 0x2c
 8001c82:	4a64      	ldr	r2, [pc, #400]	@ (8001e14 <initializeMotors+0x304>)
 8001c84:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = GPIO_PIN_1;
 8001c86:	4a5e      	ldr	r2, [pc, #376]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2164      	movs	r1, #100	@ 0x64
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3330      	adds	r3, #48	@ 0x30
 8001c94:	2202      	movs	r2, #2
 8001c96:	801a      	strh	r2, [r3, #0]
        motors[i].driver.index_port = GPIOA;
 8001c98:	4a59      	ldr	r2, [pc, #356]	@ (8001e00 <initializeMotors+0x2f0>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2164      	movs	r1, #100	@ 0x64
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3334      	adds	r3, #52	@ 0x34
 8001ca6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e18 <initializeMotors+0x308>)
 8001ca8:	601a      	str	r2, [r3, #0]
        motors[i].driver.index_pin = GPIO_PIN_5;
 8001caa:	4a55      	ldr	r2, [pc, #340]	@ (8001e00 <initializeMotors+0x2f0>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2164      	movs	r1, #100	@ 0x64
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3338      	adds	r3, #56	@ 0x38
 8001cb8:	2220      	movs	r2, #32
 8001cba:	801a      	strh	r2, [r3, #0]
        }


        if(i == 1){
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	f040 8087 	bne.w	8001dd2 <initializeMotors+0x2c2>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 8001cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001e00 <initializeMotors+0x2f0>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2164      	movs	r1, #100	@ 0x64
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <initializeMotors+0x30c>)
 8001cd4:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001cd6:	4a4a      	ldr	r2, [pc, #296]	@ (8001e00 <initializeMotors+0x2f0>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2164      	movs	r1, #100	@ 0x64
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3310      	adds	r3, #16
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 8001ce8:	4a45      	ldr	r2, [pc, #276]	@ (8001e00 <initializeMotors+0x2f0>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2164      	movs	r1, #100	@ 0x64
 8001cee:	fb01 f303 	mul.w	r3, r1, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart2;
 8001cfa:	4a41      	ldr	r2, [pc, #260]	@ (8001e00 <initializeMotors+0x2f0>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2164      	movs	r1, #100	@ 0x64
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	3304      	adds	r3, #4
 8001d08:	4a45      	ldr	r2, [pc, #276]	@ (8001e20 <initializeMotors+0x310>)
 8001d0a:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8001d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2164      	movs	r1, #100	@ 0x64
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	333c      	adds	r3, #60	@ 0x3c
 8001d1a:	22c8      	movs	r2, #200	@ 0xc8
 8001d1c:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOA;
 8001d1e:	4a38      	ldr	r2, [pc, #224]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2164      	movs	r1, #100	@ 0x64
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e18 <initializeMotors+0x308>)
 8001d2e:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_6;
 8001d30:	4a33      	ldr	r2, [pc, #204]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2164      	movs	r1, #100	@ 0x64
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	2240      	movs	r2, #64	@ 0x40
 8001d40:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOA;
 8001d42:	4a2f      	ldr	r2, [pc, #188]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2164      	movs	r1, #100	@ 0x64
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	331c      	adds	r3, #28
 8001d50:	4a31      	ldr	r2, [pc, #196]	@ (8001e18 <initializeMotors+0x308>)
 8001d52:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_7;
 8001d54:	4a2a      	ldr	r2, [pc, #168]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2164      	movs	r1, #100	@ 0x64
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3320      	adds	r3, #32
 8001d62:	2280      	movs	r2, #128	@ 0x80
 8001d64:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOA;
 8001d66:	4a26      	ldr	r2, [pc, #152]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2164      	movs	r1, #100	@ 0x64
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	3324      	adds	r3, #36	@ 0x24
 8001d74:	4a28      	ldr	r2, [pc, #160]	@ (8001e18 <initializeMotors+0x308>)
 8001d76:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_5;
 8001d78:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2164      	movs	r1, #100	@ 0x64
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	3328      	adds	r3, #40	@ 0x28
 8001d86:	2220      	movs	r2, #32
 8001d88:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2164      	movs	r1, #100	@ 0x64
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	332c      	adds	r3, #44	@ 0x2c
 8001d98:	4a1e      	ldr	r2, [pc, #120]	@ (8001e14 <initializeMotors+0x304>)
 8001d9a:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 8001d9c:	4a18      	ldr	r2, [pc, #96]	@ (8001e00 <initializeMotors+0x2f0>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2164      	movs	r1, #100	@ 0x64
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3330      	adds	r3, #48	@ 0x30
 8001daa:	2202      	movs	r2, #2
 8001dac:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 8001dae:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <initializeMotors+0x2f0>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2164      	movs	r1, #100	@ 0x64
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3334      	adds	r3, #52	@ 0x34
 8001dbc:	4a16      	ldr	r2, [pc, #88]	@ (8001e18 <initializeMotors+0x308>)
 8001dbe:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001e00 <initializeMotors+0x2f0>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2164      	movs	r1, #100	@ 0x64
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3338      	adds	r3, #56	@ 0x38
 8001dce:	2220      	movs	r2, #32
 8001dd0:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	f040 808b 	bne.w	8001ef0 <initializeMotors+0x3e0>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim9;				 // TIMER HANDLER
 8001dda:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <initializeMotors+0x2f0>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2164      	movs	r1, #100	@ 0x64
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	330c      	adds	r3, #12
 8001de8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e24 <initializeMotors+0x314>)
 8001dea:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <initializeMotors+0x2f0>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2164      	movs	r1, #100	@ 0x64
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3310      	adds	r3, #16
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e013      	b.n	8001e28 <initializeMotors+0x318>
 8001e00:	20000cf8 	.word	0x20000cf8
 8001e04:	200001e0 	.word	0x200001e0
 8001e08:	20000440 	.word	0x20000440
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40021400 	.word	0x40021400
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	2000022c 	.word	0x2000022c
 8001e20:	20000550 	.word	0x20000550
 8001e24:	2000035c 	.word	0x2000035c
            motors[i].driver.mstep = 16;
 8001e28:	4a75      	ldr	r2, [pc, #468]	@ (8002000 <initializeMotors+0x4f0>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2164      	movs	r1, #100	@ 0x64
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3302      	adds	r3, #2
 8001e36:	2210      	movs	r2, #16
 8001e38:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 8001e3a:	4a71      	ldr	r2, [pc, #452]	@ (8002000 <initializeMotors+0x4f0>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2164      	movs	r1, #100	@ 0x64
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	3304      	adds	r3, #4
 8001e48:	4a6e      	ldr	r2, [pc, #440]	@ (8002004 <initializeMotors+0x4f4>)
 8001e4a:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 8001e4c:	4a6c      	ldr	r2, [pc, #432]	@ (8002000 <initializeMotors+0x4f0>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2164      	movs	r1, #100	@ 0x64
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	333c      	adds	r3, #60	@ 0x3c
 8001e5a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001e5e:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = GPIOE;
 8001e60:	4a67      	ldr	r2, [pc, #412]	@ (8002000 <initializeMotors+0x4f0>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2164      	movs	r1, #100	@ 0x64
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	4a66      	ldr	r2, [pc, #408]	@ (8002008 <initializeMotors+0x4f8>)
 8001e70:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_5;
 8001e72:	4a63      	ldr	r2, [pc, #396]	@ (8002000 <initializeMotors+0x4f0>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2164      	movs	r1, #100	@ 0x64
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3318      	adds	r3, #24
 8001e80:	2220      	movs	r2, #32
 8001e82:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOE;
 8001e84:	4a5e      	ldr	r2, [pc, #376]	@ (8002000 <initializeMotors+0x4f0>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2164      	movs	r1, #100	@ 0x64
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	331c      	adds	r3, #28
 8001e92:	4a5d      	ldr	r2, [pc, #372]	@ (8002008 <initializeMotors+0x4f8>)
 8001e94:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_6;
 8001e96:	4a5a      	ldr	r2, [pc, #360]	@ (8002000 <initializeMotors+0x4f0>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2164      	movs	r1, #100	@ 0x64
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3320      	adds	r3, #32
 8001ea4:	2240      	movs	r2, #64	@ 0x40
 8001ea6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOE;
 8001ea8:	4a55      	ldr	r2, [pc, #340]	@ (8002000 <initializeMotors+0x4f0>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2164      	movs	r1, #100	@ 0x64
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3324      	adds	r3, #36	@ 0x24
 8001eb6:	4a54      	ldr	r2, [pc, #336]	@ (8002008 <initializeMotors+0x4f8>)
 8001eb8:	601a      	str	r2, [r3, #0]
        	motors[i].driver.enn_pin = GPIO_PIN_3;
 8001eba:	4a51      	ldr	r2, [pc, #324]	@ (8002000 <initializeMotors+0x4f0>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2164      	movs	r1, #100	@ 0x64
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3328      	adds	r3, #40	@ 0x28
 8001ec8:	2208      	movs	r2, #8
 8001eca:	801a      	strh	r2, [r3, #0]
        	motors[i].driver.diag_port = GPIOD;
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8002000 <initializeMotors+0x4f0>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2164      	movs	r1, #100	@ 0x64
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	332c      	adds	r3, #44	@ 0x2c
 8001eda:	4a4c      	ldr	r2, [pc, #304]	@ (800200c <initializeMotors+0x4fc>)
 8001edc:	601a      	str	r2, [r3, #0]
        	motors[i].driver.diag_pin = GPIO_PIN_1;
 8001ede:	4a48      	ldr	r2, [pc, #288]	@ (8002000 <initializeMotors+0x4f0>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2164      	movs	r1, #100	@ 0x64
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3330      	adds	r3, #48	@ 0x30
 8001eec:	2202      	movs	r2, #2
 8001eee:	801a      	strh	r2, [r3, #0]
        	           // motors[i].driver.index_pin = GPIO_PIN_5;


        }

        if(i == 3){
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d175      	bne.n	8001fe2 <initializeMotors+0x4d2>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim10;				 // TIMER HANDLER
 8001ef6:	4a42      	ldr	r2, [pc, #264]	@ (8002000 <initializeMotors+0x4f0>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2164      	movs	r1, #100	@ 0x64
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	330c      	adds	r3, #12
 8001f04:	4a42      	ldr	r2, [pc, #264]	@ (8002010 <initializeMotors+0x500>)
 8001f06:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001f08:	4a3d      	ldr	r2, [pc, #244]	@ (8002000 <initializeMotors+0x4f0>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2164      	movs	r1, #100	@ 0x64
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3310      	adds	r3, #16
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 8001f1a:	4a39      	ldr	r2, [pc, #228]	@ (8002000 <initializeMotors+0x4f0>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2164      	movs	r1, #100	@ 0x64
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	3302      	adds	r3, #2
 8001f28:	2210      	movs	r2, #16
 8001f2a:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 8001f2c:	4a34      	ldr	r2, [pc, #208]	@ (8002000 <initializeMotors+0x4f0>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2164      	movs	r1, #100	@ 0x64
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	4a36      	ldr	r2, [pc, #216]	@ (8002014 <initializeMotors+0x504>)
 8001f3c:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8001f3e:	4a30      	ldr	r2, [pc, #192]	@ (8002000 <initializeMotors+0x4f0>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2164      	movs	r1, #100	@ 0x64
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333c      	adds	r3, #60	@ 0x3c
 8001f4c:	22c8      	movs	r2, #200	@ 0xc8
 8001f4e:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 8001f50:	4a2b      	ldr	r2, [pc, #172]	@ (8002000 <initializeMotors+0x4f0>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2164      	movs	r1, #100	@ 0x64
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3314      	adds	r3, #20
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8002018 <initializeMotors+0x508>)
 8001f60:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_8;
 8001f62:	4a27      	ldr	r2, [pc, #156]	@ (8002000 <initializeMotors+0x4f0>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2164      	movs	r1, #100	@ 0x64
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3318      	adds	r3, #24
 8001f70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f74:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOD;
 8001f76:	4a22      	ldr	r2, [pc, #136]	@ (8002000 <initializeMotors+0x4f0>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2164      	movs	r1, #100	@ 0x64
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	331c      	adds	r3, #28
 8001f84:	4a21      	ldr	r2, [pc, #132]	@ (800200c <initializeMotors+0x4fc>)
 8001f86:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_0;
 8001f88:	4a1d      	ldr	r2, [pc, #116]	@ (8002000 <initializeMotors+0x4f0>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2164      	movs	r1, #100	@ 0x64
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3320      	adds	r3, #32
 8001f96:	2201      	movs	r2, #1
 8001f98:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOF;
 8001f9a:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <initializeMotors+0x4f0>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2164      	movs	r1, #100	@ 0x64
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3324      	adds	r3, #36	@ 0x24
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800201c <initializeMotors+0x50c>)
 8001faa:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_0;
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <initializeMotors+0x4f0>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2164      	movs	r1, #100	@ 0x64
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3328      	adds	r3, #40	@ 0x28
 8001fba:	2201      	movs	r2, #1
 8001fbc:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <initializeMotors+0x4f0>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2164      	movs	r1, #100	@ 0x64
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	332c      	adds	r3, #44	@ 0x2c
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800200c <initializeMotors+0x4fc>)
 8001fce:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <initializeMotors+0x4f0>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2164      	movs	r1, #100	@ 0x64
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3330      	adds	r3, #48	@ 0x30
 8001fde:	2202      	movs	r2, #2
 8001fe0:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	f77f ad96 	ble.w	8001b1c <initializeMotors+0xc>


    }


}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000cf8 	.word	0x20000cf8
 8002004:	200004c8 	.word	0x200004c8
 8002008:	40021000 	.word	0x40021000
 800200c:	40020c00 	.word	0x40020c00
 8002010:	200003a8 	.word	0x200003a8
 8002014:	20000660 	.word	0x20000660
 8002018:	40020400 	.word	0x40020400
 800201c:	40021400 	.word	0x40021400

08002020 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	64da      	str	r2, [r3, #76]	@ 0x4c
    axis->motors[1]->currentPositionMM = 0;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	64da      	str	r2, [r3, #76]	@ 0x4c
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	8852      	ldrh	r2, [r2, #2]
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	641a      	str	r2, [r3, #64]	@ 0x40
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40
    axis->stepPerUnit = totalStepsPerRevolution / circumference;;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f103 0014 	add.w	r0, r3, #20
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <initializeAxis+0x98>)
 800208e:	210a      	movs	r1, #10
 8002090:	f009 fc46 	bl	800b920 <sniprintf>
    if (motor2 != NULL) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <initializeAxis+0x90>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f103 001e 	add.w	r0, r3, #30
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	4a03      	ldr	r2, [pc, #12]	@ (80020b8 <initializeAxis+0x98>)
 80020aa:	210a      	movs	r1, #10
 80020ac:	f009 fc38 	bl	800b920 <sniprintf>
    }
}
 80020b0:	bf00      	nop
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	0800c9dc 	.word	0x0800c9dc

080020bc <initializeSystem>:

void initializeSystem(){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af02      	add	r7, sp, #8
    // X-axis
    initializeAxis(&axes[0], &motors[0],&motors[2], 40, "Y");
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <initializeSystem+0x2c>)
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2328      	movs	r3, #40	@ 0x28
 80020c8:	4a08      	ldr	r2, [pc, #32]	@ (80020ec <initializeSystem+0x30>)
 80020ca:	4909      	ldr	r1, [pc, #36]	@ (80020f0 <initializeSystem+0x34>)
 80020cc:	4809      	ldr	r0, [pc, #36]	@ (80020f4 <initializeSystem+0x38>)
 80020ce:	f7ff ffa7 	bl	8002020 <initializeAxis>
    initializeAxis(&axes[1], &motors[1],&motors[3], 8, "X");
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <initializeSystem+0x3c>)
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2308      	movs	r3, #8
 80020d8:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <initializeSystem+0x40>)
 80020da:	4909      	ldr	r1, [pc, #36]	@ (8002100 <initializeSystem+0x44>)
 80020dc:	4809      	ldr	r0, [pc, #36]	@ (8002104 <initializeSystem+0x48>)
 80020de:	f7ff ff9f 	bl	8002020 <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[1], &motors[1], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	0800c9e4 	.word	0x0800c9e4
 80020ec:	20000dc0 	.word	0x20000dc0
 80020f0:	20000cf8 	.word	0x20000cf8
 80020f4:	20000e88 	.word	0x20000e88
 80020f8:	0800c9e8 	.word	0x0800c9e8
 80020fc:	20000e24 	.word	0x20000e24
 8002100:	20000d5c 	.word	0x20000d5c
 8002104:	20000eb0 	.word	0x20000eb0

08002108 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	213c      	movs	r1, #60	@ 0x3c
 8002116:	4618      	mov	r0, r3
 8002118:	f006 f86c 	bl	80081f4 <HAL_TIM_Encoder_Start>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <CheckConnection>:



#include "extras.h"

bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo1){
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, 50);
 800212e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002184 <CheckConnection+0x60>
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8ea 	bl	800230c <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 52);
 8002138:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002188 <CheckConnection+0x64>
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	f000 f8e5 	bl	800230c <SERVO_WritePosition>
	HAL_Delay(2000);
 8002142:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002146:	f002 f82d 	bl	80041a4 <HAL_Delay>
	bool x =0;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin) == GPIO_PIN_SET){
 800214e:	2108      	movs	r1, #8
 8002150:	480e      	ldr	r0, [pc, #56]	@ (800218c <CheckConnection+0x68>)
 8002152:	f002 fe85 	bl	8004e60 <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	2b01      	cmp	r3, #1
 800215a:	d102      	bne.n	8002162 <CheckConnection+0x3e>
	     x = true;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e001      	b.n	8002166 <CheckConnection+0x42>
	}
	else{
		 x=false;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
	}
	SERVO_WritePosition(hservo, 90);
 8002166:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002190 <CheckConnection+0x6c>
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8ce 	bl	800230c <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 92);
 8002170:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002194 <CheckConnection+0x70>
 8002174:	6838      	ldr	r0, [r7, #0]
 8002176:	f000 f8c9 	bl	800230c <SERVO_WritePosition>
	return x;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	42480000 	.word	0x42480000
 8002188:	42500000 	.word	0x42500000
 800218c:	40020000 	.word	0x40020000
 8002190:	42b40000 	.word	0x42b40000
 8002194:	42b80000 	.word	0x42b80000

08002198 <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f002 fe59 	bl	8004e60 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <IsSensorTriggered+0x24>
    	return false;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 80021bc:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80021d4:	eeb0 0a67 	vmov.f32	s0, s15
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f80d 	bl	80021f8 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f005 fc4d 	bl	8007a88 <HAL_TIM_PWM_Start>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8002204:	edd7 7a00 	vldr	s15, [r7]
 8002208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	d503      	bpl.n	800221a <PWM_WriteDuty+0x22>
    duty = 0.0;
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	e00a      	b.n	8002230 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800221a:	edd7 7a00 	vldr	s15, [r7]
 800221e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80022dc <PWM_WriteDuty+0xe4>
 8002222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222a:	dd01      	ble.n	8002230 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 800222c:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <PWM_WriteDuty+0xe8>)
 800222e:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	3301      	adds	r3, #1
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002248:	edd7 7a00 	vldr	s15, [r7]
 800224c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002250:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80022dc <PWM_WriteDuty+0xe4>
 8002254:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225c:	ee17 3a90 	vmov	r3, s15
 8002260:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <PWM_WriteDuty+0x7e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002274:	e02c      	b.n	80022d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d105      	bne.n	800228a <PWM_WriteDuty+0x92>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002288:	e022      	b.n	80022d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b08      	cmp	r3, #8
 8002290:	d105      	bne.n	800229e <PWM_WriteDuty+0xa6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800229c:	e018      	b.n	80022d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d105      	bne.n	80022b2 <PWM_WriteDuty+0xba>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022b0:	e00e      	b.n	80022d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d105      	bne.n	80022c6 <PWM_WriteDuty+0xce>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80022c4:	e004      	b.n	80022d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	42c80000 	.word	0x42c80000
 80022e0:	42c80000 	.word	0x42c80000

080022e4 <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 70.0f);
 80022ec:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002308 <SERVO_Init+0x24>
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f80b 	bl	800230c <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff64 	bl	80021c6 <PWM_Init>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	428c0000 	.word	0x428c0000

0800230c <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8002318:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002374 <SERVO_WritePosition+0x68>
 800231c:	ed97 0a00 	vldr	s0, [r7]
 8002320:	f009 ffef 	bl	800c302 <fminf>
 8002324:	eef0 7a40 	vmov.f32	s15, s0
 8002328:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002378 <SERVO_WritePosition+0x6c>
 800232c:	eeb0 0a67 	vmov.f32	s0, s15
 8002330:	f009 ffca 	bl	800c2c8 <fmaxf>
 8002334:	eef0 7a40 	vmov.f32	s15, s0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	ed93 7a03 	vldr	s14, [r3, #12]
 8002344:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002374 <SERVO_WritePosition+0x68>
 8002348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002354:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8002358:	ee77 7a87 	vadd.f32	s15, s15, s14
 800235c:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	ed97 0a03 	vldr	s0, [r7, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff46 	bl	80021f8 <PWM_WriteDuty>
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	43340000 	.word	0x43340000
 8002378:	00000000 	.word	0x00000000

0800237c <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <HAL_UART_RxCpltCallback+0x54>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00e      	beq.n	80023ac <HAL_UART_RxCpltCallback+0x30>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_UART_RxCpltCallback+0x58>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_UART_RxCpltCallback+0x30>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0e      	ldr	r2, [pc, #56]	@ (80023d8 <HAL_UART_RxCpltCallback+0x5c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d004      	beq.n	80023ac <HAL_UART_RxCpltCallback+0x30>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_UART_RxCpltCallback+0x60>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d10d      	bne.n	80023c8 <HAL_UART_RxCpltCallback+0x4c>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData , TMC_REPLY_SIZE);
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <HAL_UART_RxCpltCallback+0x64>)
 80023ae:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <HAL_UART_RxCpltCallback+0x68>)
 80023b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023b4:	e883 0003 	stmia.w	r3, {r0, r1}
        rxBufferReady = 1;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_UART_RxCpltCallback+0x6c>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(huart, rxData, TMC_REPLY_SIZE );
 80023be:	2208      	movs	r2, #8
 80023c0:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <HAL_UART_RxCpltCallback+0x68>)
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f006 ffff 	bl	80093c6 <HAL_UART_Receive_IT>

    }

}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40011400 	.word	0x40011400
 80023d8:	40004c00 	.word	0x40004c00
 80023dc:	40005000 	.word	0x40005000
 80023e0:	2000011c 	.word	0x2000011c
 80023e4:	20000110 	.word	0x20000110
 80023e8:	20000124 	.word	0x20000124

080023ec <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fc:	d102      	bne.n	8002404 <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Disable further interrupts for the button

        // Reset the motor steps and trigger motion
    	Flag = 1;
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x24>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]


        // Re-enable the interrupt after the motion is complete (done in a later step)

}
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20000cec 	.word	0x20000cec

08002414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002418:	f001 fe67 	bl	80040ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800241c:	f000 f900 	bl	8002620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002420:	f000 fdfa 	bl	8003018 <MX_GPIO_Init>
  MX_DMA_Init();
 8002424:	f000 fdbe 	bl	8002fa4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002428:	f000 fd2e 	bl	8002e88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800242c:	f000 fd8c 	bl	8002f48 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8002430:	f000 fb82 	bl	8002b38 <MX_TIM7_Init>
  MX_TIM4_Init();
 8002434:	f000 fad0 	bl	80029d8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002438:	f000 f9de 	bl	80027f8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800243c:	f000 fcf4 	bl	8002e28 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002440:	f008 fcc4 	bl	800adcc <MX_FATFS_Init>
  MX_SPI2_Init();
 8002444:	f000 f99a 	bl	800277c <MX_SPI2_Init>
  MX_TIM3_Init();
 8002448:	f000 fa4e 	bl	80028e8 <MX_TIM3_Init>
  MX_TIM14_Init();
 800244c:	f000 fc3e 	bl	8002ccc <MX_TIM14_Init>
  MX_TIM5_Init();
 8002450:	f000 fb18 	bl	8002a84 <MX_TIM5_Init>
  MX_TIM9_Init();
 8002454:	f000 fba6 	bl	8002ba4 <MX_TIM9_Init>
  MX_TIM10_Init();
 8002458:	f000 fbea 	bl	8002c30 <MX_TIM10_Init>
  MX_I2C1_Init();
 800245c:	f000 f94e 	bl	80026fc <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8002460:	f000 fd42 	bl	8002ee8 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8002464:	f000 fc80 	bl	8002d68 <MX_UART4_Init>
  MX_UART5_Init();
 8002468:	f000 fcae 	bl	8002dc8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(&hservo1);
 800246c:	4859      	ldr	r0, [pc, #356]	@ (80025d4 <main+0x1c0>)
 800246e:	f7ff ff39 	bl	80022e4 <SERVO_Init>
  SERVO_Init(&hservo2);
 8002472:	4859      	ldr	r0, [pc, #356]	@ (80025d8 <main+0x1c4>)
 8002474:	f7ff ff36 	bl	80022e4 <SERVO_Init>

  initializeMotors();
 8002478:	f7ff fb4a 	bl	8001b10 <initializeMotors>
  initializeSystem();
 800247c:	f7ff fe1e 	bl	80020bc <initializeSystem>
   ENC_Init(&henc1);
 8002480:	4856      	ldr	r0, [pc, #344]	@ (80025dc <main+0x1c8>)
 8002482:	f7ff fe41 	bl	8002108 <ENC_Init>
  //TMC2209_setMotorsConfiguration(motors,8,1);

   //TMC2209_enable_PDNuart(&motors[2]);
   //TMC2209_read_ifcnt(&motors[2]);
  // configureGCONF(&motors[2]);
  setMicrosteppingResolution(&motors[1], 16);
 8002486:	2110      	movs	r1, #16
 8002488:	4855      	ldr	r0, [pc, #340]	@ (80025e0 <main+0x1cc>)
 800248a:	f7fe fde9 	bl	8001060 <setMicrosteppingResolution>
   HAL_Delay(2000);
 800248e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002492:	f001 fe87 	bl	80041a4 <HAL_Delay>
   checkMicrosteppingResolution(&motors[1]);
 8002496:	4852      	ldr	r0, [pc, #328]	@ (80025e0 <main+0x1cc>)
 8002498:	f7fe fed4 	bl	8001244 <checkMicrosteppingResolution>
   HAL_Delay(2000);
 800249c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80024a0:	f001 fe80 	bl	80041a4 <HAL_Delay>
   TMC2209_SetSpreadCycle(&motors[1], 1);
 80024a4:	2101      	movs	r1, #1
 80024a6:	484e      	ldr	r0, [pc, #312]	@ (80025e0 <main+0x1cc>)
 80024a8:	f7fe fd60 	bl	8000f6c <TMC2209_SetSpreadCycle>
   HAL_Delay(4000);
 80024ac:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80024b0:	f001 fe78 	bl	80041a4 <HAL_Delay>
   TMC2209_SetSpeed(&motors[0], 26000);
 80024b4:	f246 5190 	movw	r1, #26000	@ 0x6590
 80024b8:	484a      	ldr	r0, [pc, #296]	@ (80025e4 <main+0x1d0>)
 80024ba:	f7fe faeb 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[1], 16000);
 80024be:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 80024c2:	4847      	ldr	r0, [pc, #284]	@ (80025e0 <main+0x1cc>)
 80024c4:	f7fe fae6 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[2], 26000);
 80024c8:	f246 5190 	movw	r1, #26000	@ 0x6590
 80024cc:	4846      	ldr	r0, [pc, #280]	@ (80025e8 <main+0x1d4>)
 80024ce:	f7fe fae1 	bl	8000a94 <TMC2209_SetSpeed>
   TMC2209_SetSpeed(&motors[3], 12000);
 80024d2:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 80024d6:	4845      	ldr	r0, [pc, #276]	@ (80025ec <main+0x1d8>)
 80024d8:	f7fe fadc 	bl	8000a94 <TMC2209_SetSpeed>
  // TMC2209_Step(&motors[2], 16000);

   LCD_I2C_Init(&hlcd3);
 80024dc:	4844      	ldr	r0, [pc, #272]	@ (80025f0 <main+0x1dc>)
 80024de:	f7fe f8fb 	bl	80006d8 <LCD_I2C_Init>
   LCD_I2C_Clear(&hlcd3);
 80024e2:	4843      	ldr	r0, [pc, #268]	@ (80025f0 <main+0x1dc>)
 80024e4:	f7fe f996 	bl	8000814 <LCD_I2C_Clear>
   LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
 80024e8:	2102      	movs	r1, #2
 80024ea:	4841      	ldr	r0, [pc, #260]	@ (80025f0 <main+0x1dc>)
 80024ec:	f7fe f9c4 	bl	8000878 <LCD_I2C_DisplaySequentialGlossyText>

   spiPre = SD_SPI_HANDLE.Instance->CR1;
 80024f0:	4b40      	ldr	r3, [pc, #256]	@ (80025f4 <main+0x1e0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a40      	ldr	r2, [pc, #256]	@ (80025f8 <main+0x1e4>)
 80024f8:	6013      	str	r3, [r2, #0]

   //sd_card_read_gcode();
   spiPre = SD_SPI_HANDLE.Instance->CR1;
 80024fa:	4b3e      	ldr	r3, [pc, #248]	@ (80025f4 <main+0x1e0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3d      	ldr	r2, [pc, #244]	@ (80025f8 <main+0x1e4>)
 8002502:	6013      	str	r3, [r2, #0]
   //TMC2209_MoveTo(&axes[0], 0, 100); // Axis X, Motor X1*/
   //TMC2209_MoveTo(&axes[1], 0, -100); // Axis X, Motor X1
 // Axis X, Motor X1
   //TMC2209_Step(&motors[1], 3200);
//   TMC2209_SetDirection(&motors[0], dir);
     TMC2209_SetSpeed(&motors[0], 25000);
 8002504:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8002508:	4836      	ldr	r0, [pc, #216]	@ (80025e4 <main+0x1d0>)
 800250a:	f7fe fac3 	bl	8000a94 <TMC2209_SetSpeed>
//   TMC2209_SetDirection(&motors[1], dir);
     TMC2209_SetSpeed(&motors[1], 12000);
 800250e:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8002512:	4833      	ldr	r0, [pc, #204]	@ (80025e0 <main+0x1cc>)
 8002514:	f7fe fabe 	bl	8000a94 <TMC2209_SetSpeed>
//   TMC2209_SetDirection(&motors[2], dir);
   TMC2209_SetSpeed(&motors[2], 25000);
 8002518:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800251c:	4832      	ldr	r0, [pc, #200]	@ (80025e8 <main+0x1d4>)
 800251e:	f7fe fab9 	bl	8000a94 <TMC2209_SetSpeed>
   //TMC2209_Step(&motors[3], 6400);
   //TMC2209_EnableDriver(&motors[0], 1);
   //TMC2209_EnableDriver(&motors[1], 1);
   //TMC2209_EnableDriver(&motors[2], 1);
   //TMC2209_EnableDriver(&motors[3], 1);
   CheckConnection(&hservo2,&hservo1);
 8002522:	492c      	ldr	r1, [pc, #176]	@ (80025d4 <main+0x1c0>)
 8002524:	482c      	ldr	r0, [pc, #176]	@ (80025d8 <main+0x1c4>)
 8002526:	f7ff fdfd 	bl	8002124 <CheckConnection>
//   HAL_Delay(300);
//   SERVO_WritePosition(&hservo2, 40);
//   HAL_Delay(300);
   while (1){

      if (Flag) // Adjust based on button state
 800252a:	4b34      	ldr	r3, [pc, #208]	@ (80025fc <main+0x1e8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <main+0x12c>
    	         //TMC2209_Step(&motors[1], 16000);
    	         //TMC2209_Start(&motors[0]);
    	         //TMC2209_Start(&motors[1]);


    	         MotorsHoming(&motors);
 8002534:	482b      	ldr	r0, [pc, #172]	@ (80025e4 <main+0x1d0>)
 8002536:	f7fe fef5 	bl	8001324 <MotorsHoming>
//    	         stepsTaken[0] = 0;
//    	         HAL_Delay(200);
    	         //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
    	  	  	 Flag = 0;
 800253a:	4b30      	ldr	r3, [pc, #192]	@ (80025fc <main+0x1e8>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]

      }
      //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
//
     es = IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin);
 8002540:	2108      	movs	r1, #8
 8002542:	482f      	ldr	r0, [pc, #188]	@ (8002600 <main+0x1ec>)
 8002544:	f7ff fe28 	bl	8002198 <IsSensorTriggered>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	4b2d      	ldr	r3, [pc, #180]	@ (8002604 <main+0x1f0>)
 800254e:	701a      	strb	r2, [r3, #0]
      x = IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin);
 8002550:	2110      	movs	r1, #16
 8002552:	482d      	ldr	r0, [pc, #180]	@ (8002608 <main+0x1f4>)
 8002554:	f7ff fe20 	bl	8002198 <IsSensorTriggered>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <main+0x1f8>)
 800255e:	701a      	strb	r2, [r3, #0]
      sensorX1=IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin);
 8002560:	2104      	movs	r1, #4
 8002562:	482b      	ldr	r0, [pc, #172]	@ (8002610 <main+0x1fc>)
 8002564:	f7ff fe18 	bl	8002198 <IsSensorTriggered>
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	4b29      	ldr	r3, [pc, #164]	@ (8002614 <main+0x200>)
 800256e:	701a      	strb	r2, [r3, #0]
      xx =IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin);
 8002570:	2110      	movs	r1, #16
 8002572:	4827      	ldr	r0, [pc, #156]	@ (8002610 <main+0x1fc>)
 8002574:	f7ff fe10 	bl	8002198 <IsSensorTriggered>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <main+0x204>)
 800257e:	701a      	strb	r2, [r3, #0]
      //xx= CheckConnection(&hservo2,&hservo1);


      sensorX1 = HAL_GPIO_ReadPin(BtnLeft_GPIO_Port,BtnLeft_Pin);
 8002580:	2101      	movs	r1, #1
 8002582:	4826      	ldr	r0, [pc, #152]	@ (800261c <main+0x208>)
 8002584:	f002 fc6c 	bl	8004e60 <HAL_GPIO_ReadPin>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <main+0x200>)
 800258e:	701a      	strb	r2, [r3, #0]

      if(es && x &&sensorX1 && xx){
 8002590:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <main+0x1f0>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <main+0x1a8>
 800259a:	4b1c      	ldr	r3, [pc, #112]	@ (800260c <main+0x1f8>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <main+0x1a8>
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <main+0x200>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <main+0x1a8>
 80025ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <main+0x204>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <main+0x1a8>
      xx =+1;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <main+0x204>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e002      	b.n	80025c2 <main+0x1ae>
      }
      else{
    	  xx = 0;
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <main+0x204>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
      }
      while(xx >= 1){
 80025c2:	e002      	b.n	80025ca <main+0x1b6>
      MotorControl_ButtonHandler(&motors);
 80025c4:	4807      	ldr	r0, [pc, #28]	@ (80025e4 <main+0x1d0>)
 80025c6:	f7ff f811 	bl	80015ec <MotorControl_ButtonHandler>
      while(xx >= 1){
 80025ca:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <main+0x204>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f8      	bne.n	80025c4 <main+0x1b0>
      if (Flag) // Adjust based on button state
 80025d2:	e7aa      	b.n	800252a <main+0x116>
 80025d4:	2000002c 	.word	0x2000002c
 80025d8:	2000003c 	.word	0x2000003c
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000d5c 	.word	0x20000d5c
 80025e4:	20000cf8 	.word	0x20000cf8
 80025e8:	20000dc0 	.word	0x20000dc0
 80025ec:	20000e24 	.word	0x20000e24
 80025f0:	20000018 	.word	0x20000018
 80025f4:	2000017c 	.word	0x2000017c
 80025f8:	20000cf0 	.word	0x20000cf0
 80025fc:	20000cec 	.word	0x20000cec
 8002600:	40020400 	.word	0x40020400
 8002604:	20000ce8 	.word	0x20000ce8
 8002608:	40020000 	.word	0x40020000
 800260c:	20000ce9 	.word	0x20000ce9
 8002610:	40021000 	.word	0x40021000
 8002614:	20000ceb 	.word	0x20000ceb
 8002618:	20000cea 	.word	0x20000cea
 800261c:	40021800 	.word	0x40021800

08002620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b094      	sub	sp, #80	@ 0x50
 8002624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	f107 0320 	add.w	r3, r7, #32
 800262a:	2230      	movs	r2, #48	@ 0x30
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f009 f9ca 	bl	800b9c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002644:	f003 f9f6 	bl	8005a34 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <SystemClock_Config+0xd4>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	4a29      	ldr	r2, [pc, #164]	@ (80026f4 <SystemClock_Config+0xd4>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	@ 0x40
 8002654:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <SystemClock_Config+0xd4>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <SystemClock_Config+0xd8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a24      	ldr	r2, [pc, #144]	@ (80026f8 <SystemClock_Config+0xd8>)
 8002666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <SystemClock_Config+0xd8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002678:	2301      	movs	r3, #1
 800267a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800267c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002682:	2302      	movs	r3, #2
 8002684:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002686:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800268c:	2304      	movs	r3, #4
 800268e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002690:	23d8      	movs	r3, #216	@ 0xd8
 8002692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002694:	2302      	movs	r3, #2
 8002696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002698:	2309      	movs	r3, #9
 800269a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800269c:	f107 0320 	add.w	r3, r7, #32
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 fa27 	bl	8005af4 <HAL_RCC_OscConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80026ac:	f000 fe44 	bl	8003338 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026b0:	f003 f9d0 	bl	8005a54 <HAL_PWREx_EnableOverDrive>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026ba:	f000 fe3d 	bl	8003338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026be:	230f      	movs	r3, #15
 80026c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c2:	2302      	movs	r3, #2
 80026c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80026d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	2107      	movs	r1, #7
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fcad 	bl	800603c <HAL_RCC_ClockConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80026e8:	f000 fe26 	bl	8003338 <Error_Handler>
  }
}
 80026ec:	bf00      	nop
 80026ee:	3750      	adds	r7, #80	@ 0x50
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40007000 	.word	0x40007000

080026fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <MX_I2C1_Init+0x74>)
 8002702:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <MX_I2C1_Init+0x78>)
 8002704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002706:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <MX_I2C1_Init+0x74>)
 8002708:	4a1b      	ldr	r2, [pc, #108]	@ (8002778 <MX_I2C1_Init+0x7c>)
 800270a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800270c:	4b18      	ldr	r3, [pc, #96]	@ (8002770 <MX_I2C1_Init+0x74>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002712:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <MX_I2C1_Init+0x74>)
 8002714:	2201      	movs	r2, #1
 8002716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002718:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <MX_I2C1_Init+0x74>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800271e:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <MX_I2C1_Init+0x74>)
 8002720:	2200      	movs	r2, #0
 8002722:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <MX_I2C1_Init+0x74>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800272a:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <MX_I2C1_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <MX_I2C1_Init+0x74>)
 8002732:	2200      	movs	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002736:	480e      	ldr	r0, [pc, #56]	@ (8002770 <MX_I2C1_Init+0x74>)
 8002738:	f002 fbdc 	bl	8004ef4 <HAL_I2C_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002742:	f000 fdf9 	bl	8003338 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002746:	2100      	movs	r1, #0
 8002748:	4809      	ldr	r0, [pc, #36]	@ (8002770 <MX_I2C1_Init+0x74>)
 800274a:	f002 ffa1 	bl	8005690 <HAL_I2CEx_ConfigAnalogFilter>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002754:	f000 fdf0 	bl	8003338 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002758:	2100      	movs	r1, #0
 800275a:	4805      	ldr	r0, [pc, #20]	@ (8002770 <MX_I2C1_Init+0x74>)
 800275c:	f002 ffe3 	bl	8005726 <HAL_I2CEx_ConfigDigitalFilter>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002766:	f000 fde7 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000128 	.word	0x20000128
 8002774:	40005400 	.word	0x40005400
 8002778:	20404768 	.word	0x20404768

0800277c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <MX_SPI2_Init+0x74>)
 8002782:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <MX_SPI2_Init+0x78>)
 8002784:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002786:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <MX_SPI2_Init+0x74>)
 8002788:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800278c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <MX_SPI2_Init+0x74>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002794:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <MX_SPI2_Init+0x74>)
 8002796:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800279a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <MX_SPI2_Init+0x74>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027b2:	2238      	movs	r2, #56	@ 0x38
 80027b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027ca:	2207      	movs	r2, #7
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027d6:	2208      	movs	r2, #8
 80027d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027dc:	f004 fa44 	bl	8006c68 <HAL_SPI_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80027e6:	f000 fda7 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000017c 	.word	0x2000017c
 80027f4:	40003800 	.word	0x40003800

080027f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	@ 0x38
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002818:	463b      	mov	r3, r7
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	615a      	str	r2, [r3, #20]
 8002828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800282a:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <MX_TIM2_Init+0xec>)
 800282c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002830:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 8002832:	4b2c      	ldr	r3, [pc, #176]	@ (80028e4 <MX_TIM2_Init+0xec>)
 8002834:	22d7      	movs	r2, #215	@ 0xd7
 8002836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002838:	4b2a      	ldr	r3, [pc, #168]	@ (80028e4 <MX_TIM2_Init+0xec>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800283e:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <MX_TIM2_Init+0xec>)
 8002840:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002846:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <MX_TIM2_Init+0xec>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284c:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <MX_TIM2_Init+0xec>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002852:	4824      	ldr	r0, [pc, #144]	@ (80028e4 <MX_TIM2_Init+0xec>)
 8002854:	f004 ffd2 	bl	80077fc <HAL_TIM_Base_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800285e:	f000 fd6b 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002868:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800286c:	4619      	mov	r1, r3
 800286e:	481d      	ldr	r0, [pc, #116]	@ (80028e4 <MX_TIM2_Init+0xec>)
 8002870:	f005 ff6a 	bl	8008748 <HAL_TIM_ConfigClockSource>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800287a:	f000 fd5d 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800287e:	4819      	ldr	r0, [pc, #100]	@ (80028e4 <MX_TIM2_Init+0xec>)
 8002880:	f005 f8ab 	bl	80079da <HAL_TIM_PWM_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800288a:	f000 fd55 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4811      	ldr	r0, [pc, #68]	@ (80028e4 <MX_TIM2_Init+0xec>)
 800289e:	f006 fc0f 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80028a8:	f000 fd46 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ac:	2360      	movs	r3, #96	@ 0x60
 80028ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80028b0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028be:	463b      	mov	r3, r7
 80028c0:	2208      	movs	r2, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	4807      	ldr	r0, [pc, #28]	@ (80028e4 <MX_TIM2_Init+0xec>)
 80028c6:	f005 fe2b 	bl	8008520 <HAL_TIM_PWM_ConfigChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80028d0:	f000 fd32 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028d4:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <MX_TIM2_Init+0xec>)
 80028d6:	f000 ff25 	bl	8003724 <HAL_TIM_MspPostInit>

}
 80028da:	bf00      	nop
 80028dc:	3738      	adds	r7, #56	@ 0x38
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200001e0 	.word	0x200001e0

080028e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08e      	sub	sp, #56	@ 0x38
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002908:	463b      	mov	r3, r7
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	611a      	str	r2, [r3, #16]
 8002916:	615a      	str	r2, [r3, #20]
 8002918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800291a:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 800291c:	4a2d      	ldr	r2, [pc, #180]	@ (80029d4 <MX_TIM3_Init+0xec>)
 800291e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8002920:	4b2b      	ldr	r3, [pc, #172]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 8002922:	22d7      	movs	r2, #215	@ 0xd7
 8002924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002926:	4b2a      	ldr	r3, [pc, #168]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800292c:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 800292e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002934:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293a:	4b25      	ldr	r3, [pc, #148]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002940:	4823      	ldr	r0, [pc, #140]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 8002942:	f004 ff5b 	bl	80077fc <HAL_TIM_Base_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800294c:	f000 fcf4 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002956:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800295a:	4619      	mov	r1, r3
 800295c:	481c      	ldr	r0, [pc, #112]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 800295e:	f005 fef3 	bl	8008748 <HAL_TIM_ConfigClockSource>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002968:	f000 fce6 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800296c:	4818      	ldr	r0, [pc, #96]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 800296e:	f005 f834 	bl	80079da <HAL_TIM_PWM_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002978:	f000 fcde 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	4619      	mov	r1, r3
 800298a:	4811      	ldr	r0, [pc, #68]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 800298c:	f006 fb98 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002996:	f000 fccf 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800299a:	2360      	movs	r3, #96	@ 0x60
 800299c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800299e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029ac:	463b      	mov	r3, r7
 80029ae:	2200      	movs	r2, #0
 80029b0:	4619      	mov	r1, r3
 80029b2:	4807      	ldr	r0, [pc, #28]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 80029b4:	f005 fdb4 	bl	8008520 <HAL_TIM_PWM_ConfigChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80029be:	f000 fcbb 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029c2:	4803      	ldr	r0, [pc, #12]	@ (80029d0 <MX_TIM3_Init+0xe8>)
 80029c4:	f000 feae 	bl	8003724 <HAL_TIM_MspPostInit>

}
 80029c8:	bf00      	nop
 80029ca:	3738      	adds	r7, #56	@ 0x38
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	2000022c 	.word	0x2000022c
 80029d4:	40000400 	.word	0x40000400

080029d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	@ 0x30
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	2224      	movs	r2, #36	@ 0x24
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f008 ffee 	bl	800b9c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	463b      	mov	r3, r7
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029f6:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <MX_TIM4_Init+0xa4>)
 80029f8:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <MX_TIM4_Init+0xa8>)
 80029fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029fc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a7c <MX_TIM4_Init+0xa4>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a02:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <MX_TIM4_Init+0xa4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002a08:	4b1c      	ldr	r3, [pc, #112]	@ (8002a7c <MX_TIM4_Init+0xa4>)
 8002a0a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002a0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <MX_TIM4_Init+0xa4>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a16:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <MX_TIM4_Init+0xa4>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a24:	2301      	movs	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002a2c:	230f      	movs	r3, #15
 8002a2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a34:	2301      	movs	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	@ (8002a7c <MX_TIM4_Init+0xa4>)
 8002a48:	f005 fb2e 	bl	80080a8 <HAL_TIM_Encoder_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002a52:	f000 fc71 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a5e:	463b      	mov	r3, r7
 8002a60:	4619      	mov	r1, r3
 8002a62:	4806      	ldr	r0, [pc, #24]	@ (8002a7c <MX_TIM4_Init+0xa4>)
 8002a64:	f006 fb2c 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002a6e:	f000 fc63 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	3730      	adds	r7, #48	@ 0x30
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000278 	.word	0x20000278
 8002a80:	40000800 	.word	0x40000800

08002a84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	@ 0x28
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a96:	463b      	mov	r3, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
 8002aa4:	615a      	str	r2, [r3, #20]
 8002aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002aa8:	4b21      	ldr	r3, [pc, #132]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002aaa:	4a22      	ldr	r2, [pc, #136]	@ (8002b34 <MX_TIM5_Init+0xb0>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002ab0:	226b      	movs	r2, #107	@ 0x6b
 8002ab2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002abc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002ac0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002ace:	4818      	ldr	r0, [pc, #96]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002ad0:	f004 ff83 	bl	80079da <HAL_TIM_PWM_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002ada:	f000 fc2d 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	4810      	ldr	r0, [pc, #64]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002aee:	f006 fae7 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002af8:	f000 fc1e 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002afc:	2360      	movs	r3, #96	@ 0x60
 8002afe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8002b00:	230a      	movs	r3, #10
 8002b02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b0c:	463b      	mov	r3, r7
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4619      	mov	r1, r3
 8002b12:	4807      	ldr	r0, [pc, #28]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002b14:	f005 fd04 	bl	8008520 <HAL_TIM_PWM_ConfigChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002b1e:	f000 fc0b 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b22:	4803      	ldr	r0, [pc, #12]	@ (8002b30 <MX_TIM5_Init+0xac>)
 8002b24:	f000 fdfe 	bl	8003724 <HAL_TIM_MspPostInit>

}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	@ 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200002c4 	.word	0x200002c4
 8002b34:	40000c00 	.word	0x40000c00

08002b38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b48:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <MX_TIM7_Init+0x64>)
 8002b4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ba0 <MX_TIM7_Init+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8002b4e:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <MX_TIM7_Init+0x64>)
 8002b50:	22d7      	movs	r2, #215	@ 0xd7
 8002b52:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <MX_TIM7_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <MX_TIM7_Init+0x64>)
 8002b5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b60:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <MX_TIM7_Init+0x64>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b68:	480c      	ldr	r0, [pc, #48]	@ (8002b9c <MX_TIM7_Init+0x64>)
 8002b6a:	f004 fe47 	bl	80077fc <HAL_TIM_Base_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002b74:	f000 fbe0 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	@ (8002b9c <MX_TIM7_Init+0x64>)
 8002b86:	f006 fa9b 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002b90:	f000 fbd2 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000310 	.word	0x20000310
 8002ba0:	40001400 	.word	0x40001400

08002ba4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
 8002bb8:	615a      	str	r2, [r3, #20]
 8002bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <MX_TIM9_Init+0x88>)
 8002bc0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 215;
 8002bc2:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002bc4:	22d7      	movs	r2, #215	@ 0xd7
 8002bc6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc8:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8002bce:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002bd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bd4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002be2:	4811      	ldr	r0, [pc, #68]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002be4:	f004 fef9 	bl	80079da <HAL_TIM_PWM_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002bee:	f000 fba3 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf2:	2360      	movs	r3, #96	@ 0x60
 8002bf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002bf6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2200      	movs	r2, #0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4807      	ldr	r0, [pc, #28]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002c0c:	f005 fc88 	bl	8008520 <HAL_TIM_PWM_ConfigChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8002c16:	f000 fb8f 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002c1a:	4803      	ldr	r0, [pc, #12]	@ (8002c28 <MX_TIM9_Init+0x84>)
 8002c1c:	f000 fd82 	bl	8003724 <HAL_TIM_MspPostInit>

}
 8002c20:	bf00      	nop
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	2000035c 	.word	0x2000035c
 8002c2c:	40014000 	.word	0x40014000

08002c30 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
 8002c44:	615a      	str	r2, [r3, #20]
 8002c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc8 <MX_TIM10_Init+0x98>)
 8002c4c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 215;
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002c50:	22d7      	movs	r2, #215	@ 0xd7
 8002c52:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002c5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c60:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c62:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c68:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002c6e:	4815      	ldr	r0, [pc, #84]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002c70:	f004 fdc4 	bl	80077fc <HAL_TIM_Base_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002c7a:	f000 fb5d 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002c7e:	4811      	ldr	r0, [pc, #68]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002c80:	f004 feab 	bl	80079da <HAL_TIM_PWM_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002c8a:	f000 fb55 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c8e:	2360      	movs	r3, #96	@ 0x60
 8002c90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002c92:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4807      	ldr	r0, [pc, #28]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002ca8:	f005 fc3a 	bl	8008520 <HAL_TIM_PWM_ConfigChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8002cb2:	f000 fb41 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002cb6:	4803      	ldr	r0, [pc, #12]	@ (8002cc4 <MX_TIM10_Init+0x94>)
 8002cb8:	f000 fd34 	bl	8003724 <HAL_TIM_MspPostInit>

}
 8002cbc:	bf00      	nop
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200003a8 	.word	0x200003a8
 8002cc8:	40014400 	.word	0x40014400

08002ccc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	615a      	str	r2, [r3, #20]
 8002ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <MX_TIM14_Init+0x98>)
 8002ce8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 8002cea:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002cec:	226b      	movs	r2, #107	@ 0x6b
 8002cee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002cf8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002cfc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfe:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d04:	4b16      	ldr	r3, [pc, #88]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002d0a:	4815      	ldr	r0, [pc, #84]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002d0c:	f004 fd76 	bl	80077fc <HAL_TIM_Base_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002d16:	f000 fb0f 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002d1a:	4811      	ldr	r0, [pc, #68]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002d1c:	f004 fe5d 	bl	80079da <HAL_TIM_PWM_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002d26:	f000 fb07 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d2a:	2360      	movs	r3, #96	@ 0x60
 8002d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002d2e:	230a      	movs	r3, #10
 8002d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4807      	ldr	r0, [pc, #28]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002d42:	f005 fbed 	bl	8008520 <HAL_TIM_PWM_ConfigChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002d4c:	f000 faf4 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002d50:	4803      	ldr	r0, [pc, #12]	@ (8002d60 <MX_TIM14_Init+0x94>)
 8002d52:	f000 fce7 	bl	8003724 <HAL_TIM_MspPostInit>

}
 8002d56:	bf00      	nop
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200003f4 	.word	0x200003f4
 8002d64:	40002000 	.word	0x40002000

08002d68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d6c:	4b14      	ldr	r3, [pc, #80]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002d6e:	4a15      	ldr	r2, [pc, #84]	@ (8002dc4 <MX_UART4_Init+0x5c>)
 8002d70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002d72:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7a:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d80:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d86:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002d8e:	220c      	movs	r2, #12
 8002d90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d98:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002daa:	4805      	ldr	r0, [pc, #20]	@ (8002dc0 <MX_UART4_Init+0x58>)
 8002dac:	f006 fa34 	bl	8009218 <HAL_UART_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002db6:	f000 fabf 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000440 	.word	0x20000440
 8002dc4:	40004c00 	.word	0x40004c00

08002dc8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002dcc:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002dce:	4a15      	ldr	r2, [pc, #84]	@ (8002e24 <MX_UART5_Init+0x5c>)
 8002dd0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002dd2:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002dd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dd8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002dda:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002de0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002dee:	220c      	movs	r2, #12
 8002df0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e04:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e0a:	4805      	ldr	r0, [pc, #20]	@ (8002e20 <MX_UART5_Init+0x58>)
 8002e0c:	f006 fa04 	bl	8009218 <HAL_UART_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002e16:	f000 fa8f 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200004c8 	.word	0x200004c8
 8002e24:	40005000 	.word	0x40005000

08002e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e2e:	4a15      	ldr	r2, [pc, #84]	@ (8002e84 <MX_USART2_UART_Init+0x5c>)
 8002e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e4e:	220c      	movs	r2, #12
 8002e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <MX_USART2_UART_Init+0x58>)
 8002e6c:	f006 f9d4 	bl	8009218 <HAL_UART_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e76:	f000 fa5f 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000550 	.word	0x20000550
 8002e84:	40004400 	.word	0x40004400

08002e88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002e8e:	4a15      	ldr	r2, [pc, #84]	@ (8002ee4 <MX_USART3_UART_Init+0x5c>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8002e92:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002e94:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8002e98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eca:	4805      	ldr	r0, [pc, #20]	@ (8002ee0 <MX_USART3_UART_Init+0x58>)
 8002ecc:	f006 f9a4 	bl	8009218 <HAL_UART_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ed6:	f000 fa2f 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200005d8 	.word	0x200005d8
 8002ee4:	40004800 	.word	0x40004800

08002ee8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002eec:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002eee:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <MX_USART6_UART_Init+0x5c>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ef8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	@ (8002f40 <MX_USART6_UART_Init+0x58>)
 8002f2c:	f006 f974 	bl	8009218 <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002f36:	f000 f9ff 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000660 	.word	0x20000660
 8002f44:	40011400 	.word	0x40011400

08002f48 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002f4c:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002f52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002f54:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f56:	2206      	movs	r2, #6
 8002f58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f68:	2202      	movs	r2, #2
 8002f6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002f8a:	4805      	ldr	r0, [pc, #20]	@ (8002fa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f8c:	f002 fc17 	bl	80057be <HAL_PCD_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002f96:	f000 f9cf 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000808 	.word	0x20000808

08002fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002faa:	4b1a      	ldr	r3, [pc, #104]	@ (8003014 <MX_DMA_Init+0x70>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <MX_DMA_Init+0x70>)
 8002fb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb6:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <MX_DMA_Init+0x70>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fc2:	4b14      	ldr	r3, [pc, #80]	@ (8003014 <MX_DMA_Init+0x70>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	4a13      	ldr	r2, [pc, #76]	@ (8003014 <MX_DMA_Init+0x70>)
 8002fc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fce:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <MX_DMA_Init+0x70>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	200b      	movs	r0, #11
 8002fe0:	f001 f9df 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002fe4:	200b      	movs	r0, #11
 8002fe6:	f001 f9f8 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	200d      	movs	r0, #13
 8002ff0:	f001 f9d7 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002ff4:	200d      	movs	r0, #13
 8002ff6:	f001 f9f0 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2039      	movs	r0, #57	@ 0x39
 8003000:	f001 f9cf 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003004:	2039      	movs	r0, #57	@ 0x39
 8003006:	f001 f9e8 	bl	80043da <HAL_NVIC_EnableIRQ>

}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800

08003018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	@ 0x38
 800301c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800302e:	4bb5      	ldr	r3, [pc, #724]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	4ab4      	ldr	r2, [pc, #720]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003034:	f043 0310 	orr.w	r3, r3, #16
 8003038:	6313      	str	r3, [r2, #48]	@ 0x30
 800303a:	4bb2      	ldr	r3, [pc, #712]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003046:	4baf      	ldr	r3, [pc, #700]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4aae      	ldr	r2, [pc, #696]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4bac      	ldr	r3, [pc, #688]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800305e:	4ba9      	ldr	r3, [pc, #676]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	4aa8      	ldr	r2, [pc, #672]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	6313      	str	r3, [r2, #48]	@ 0x30
 800306a:	4ba6      	ldr	r3, [pc, #664]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003076:	4ba3      	ldr	r3, [pc, #652]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4aa2      	ldr	r2, [pc, #648]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 800307c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4ba0      	ldr	r3, [pc, #640]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b9d      	ldr	r3, [pc, #628]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	4a9c      	ldr	r2, [pc, #624]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6313      	str	r3, [r2, #48]	@ 0x30
 800309a:	4b9a      	ldr	r3, [pc, #616]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a6:	4b97      	ldr	r3, [pc, #604]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	4a96      	ldr	r2, [pc, #600]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b2:	4b94      	ldr	r3, [pc, #592]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030be:	4b91      	ldr	r3, [pc, #580]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	4a90      	ldr	r2, [pc, #576]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4a8a      	ldr	r2, [pc, #552]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e2:	4b88      	ldr	r3, [pc, #544]	@ (8003304 <MX_GPIO_Init+0x2ec>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enn3_Pin|dir3_Pin, GPIO_PIN_RESET);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2148      	movs	r1, #72	@ 0x48
 80030f2:	4885      	ldr	r0, [pc, #532]	@ (8003308 <MX_GPIO_Init+0x2f0>)
 80030f4:	f001 fecc 	bl	8004e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, enn4_Pin|dir1_Pin, GPIO_PIN_RESET);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2181      	movs	r1, #129	@ 0x81
 80030fc:	4883      	ldr	r0, [pc, #524]	@ (800330c <MX_GPIO_Init+0x2f4>)
 80030fe:	f001 fec7 	bl	8004e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enn2_Pin|dir2_Pin, GPIO_PIN_RESET);
 8003102:	2200      	movs	r2, #0
 8003104:	21a0      	movs	r1, #160	@ 0xa0
 8003106:	4882      	ldr	r0, [pc, #520]	@ (8003310 <MX_GPIO_Init+0x2f8>)
 8003108:	f001 fec2 	bl	8004e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(enn1_GPIO_Port, enn1_Pin, GPIO_PIN_RESET);
 800310c:	2200      	movs	r2, #0
 800310e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003112:	4880      	ldr	r0, [pc, #512]	@ (8003314 <MX_GPIO_Init+0x2fc>)
 8003114:	f001 febc 	bl	8004e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_cs_GPIO_Port, SPI_cs_Pin, GPIO_PIN_SET);
 8003118:	2201      	movs	r2, #1
 800311a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800311e:	487e      	ldr	r0, [pc, #504]	@ (8003318 <MX_GPIO_Init+0x300>)
 8003120:	f001 feb6 	bl	8004e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003124:	2200      	movs	r2, #0
 8003126:	2140      	movs	r1, #64	@ 0x40
 8003128:	487c      	ldr	r0, [pc, #496]	@ (800331c <MX_GPIO_Init+0x304>)
 800312a:	f001 feb1 	bl	8004e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir4_GPIO_Port, dir4_Pin, GPIO_PIN_RESET);
 800312e:	2200      	movs	r2, #0
 8003130:	2101      	movs	r1, #1
 8003132:	4879      	ldr	r0, [pc, #484]	@ (8003318 <MX_GPIO_Init+0x300>)
 8003134:	f001 feac 	bl	8004e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EndStop1_Pin EndStop2_Pin BtnCtr_Pin */
  GPIO_InitStruct.Pin = EndStop1_Pin|EndStop2_Pin|BtnCtr_Pin;
 8003138:	f640 0314 	movw	r3, #2068	@ 0x814
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313e:	2300      	movs	r3, #0
 8003140:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003142:	2301      	movs	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800314a:	4619      	mov	r1, r3
 800314c:	486e      	ldr	r0, [pc, #440]	@ (8003308 <MX_GPIO_Init+0x2f0>)
 800314e:	f001 fcdb 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : enn3_Pin dir3_Pin */
  GPIO_InitStruct.Pin = enn3_Pin|dir3_Pin;
 8003152:	2348      	movs	r3, #72	@ 0x48
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003156:	2301      	movs	r3, #1
 8003158:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003166:	4619      	mov	r1, r3
 8003168:	4867      	ldr	r0, [pc, #412]	@ (8003308 <MX_GPIO_Init+0x2f0>)
 800316a:	f001 fccd 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800316e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003174:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003178:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003182:	4619      	mov	r1, r3
 8003184:	4866      	ldr	r0, [pc, #408]	@ (8003320 <MX_GPIO_Init+0x308>)
 8003186:	f001 fcbf 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : enn4_Pin dir1_Pin */
  GPIO_InitStruct.Pin = enn4_Pin|dir1_Pin;
 800318a:	2381      	movs	r3, #129	@ 0x81
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318e:	2301      	movs	r3, #1
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800319a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319e:	4619      	mov	r1, r3
 80031a0:	485a      	ldr	r0, [pc, #360]	@ (800330c <MX_GPIO_Init+0x2f4>)
 80031a2:	f001 fcb1 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 80031a6:	2308      	movs	r3, #8
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031ae:	2302      	movs	r3, #2
 80031b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 80031b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031b6:	4619      	mov	r1, r3
 80031b8:	4855      	ldr	r0, [pc, #340]	@ (8003310 <MX_GPIO_Init+0x2f8>)
 80031ba:	f001 fca5 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop3_Pin;
 80031be:	2310      	movs	r3, #16
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c2:	2300      	movs	r3, #0
 80031c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c6:	2301      	movs	r3, #1
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EndStop3_GPIO_Port, &GPIO_InitStruct);
 80031ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ce:	4619      	mov	r1, r3
 80031d0:	484f      	ldr	r0, [pc, #316]	@ (8003310 <MX_GPIO_Init+0x2f8>)
 80031d2:	f001 fc99 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : enn2_Pin dir2_Pin */
  GPIO_InitStruct.Pin = enn2_Pin|dir2_Pin;
 80031d6:	23a0      	movs	r3, #160	@ 0xa0
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031da:	2301      	movs	r3, #1
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ea:	4619      	mov	r1, r3
 80031ec:	4848      	ldr	r0, [pc, #288]	@ (8003310 <MX_GPIO_Init+0x2f8>)
 80031ee:	f001 fc8b 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : EncoderBtn_Pin PB2 */
  GPIO_InitStruct.Pin = EncoderBtn_Pin|GPIO_PIN_2;
 80031f2:	2306      	movs	r3, #6
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003202:	4619      	mov	r1, r3
 8003204:	4843      	ldr	r0, [pc, #268]	@ (8003314 <MX_GPIO_Init+0x2fc>)
 8003206:	f001 fc7f 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnUp_Pin BtnDown_Pin */
  GPIO_InitStruct.Pin = BtnUp_Pin|BtnDown_Pin;
 800320a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003210:	2300      	movs	r3, #0
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003214:	2301      	movs	r3, #1
 8003216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800321c:	4619      	mov	r1, r3
 800321e:	483b      	ldr	r0, [pc, #236]	@ (800330c <MX_GPIO_Init+0x2f4>)
 8003220:	f001 fc72 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnLeft_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin|BtnRight_Pin;
 8003224:	2303      	movs	r3, #3
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003228:	2300      	movs	r3, #0
 800322a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800322c:	2301      	movs	r3, #1
 800322e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003234:	4619      	mov	r1, r3
 8003236:	4839      	ldr	r0, [pc, #228]	@ (800331c <MX_GPIO_Init+0x304>)
 8003238:	f001 fc66 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : enn1_Pin */
  GPIO_InitStruct.Pin = enn1_Pin;
 800323c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003242:	2301      	movs	r3, #1
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(enn1_GPIO_Port, &GPIO_InitStruct);
 800324e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003252:	4619      	mov	r1, r3
 8003254:	482f      	ldr	r0, [pc, #188]	@ (8003314 <MX_GPIO_Init+0x2fc>)
 8003256:	f001 fc57 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_cs_Pin */
  GPIO_InitStruct.Pin = SPI_cs_Pin;
 800325a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003260:	2301      	movs	r3, #1
 8003262:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003264:	2301      	movs	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	2300      	movs	r3, #0
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI_cs_GPIO_Port, &GPIO_InitStruct);
 800326c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003270:	4619      	mov	r1, r3
 8003272:	4829      	ldr	r0, [pc, #164]	@ (8003318 <MX_GPIO_Init+0x300>)
 8003274:	f001 fc48 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : diag_Pin diag1_Pin */
  GPIO_InitStruct.Pin = diag_Pin|diag1_Pin;
 8003278:	f248 0302 	movw	r3, #32770	@ 0x8002
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327e:	2300      	movs	r3, #0
 8003280:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	4822      	ldr	r0, [pc, #136]	@ (8003318 <MX_GPIO_Init+0x300>)
 800328e:	f001 fc3b 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003292:	2340      	movs	r3, #64	@ 0x40
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003296:	2301      	movs	r3, #1
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2300      	movs	r3, #0
 80032a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a6:	4619      	mov	r1, r3
 80032a8:	481c      	ldr	r0, [pc, #112]	@ (800331c <MX_GPIO_Init+0x304>)
 80032aa:	f001 fc2d 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80032ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032be:	4619      	mov	r1, r3
 80032c0:	4816      	ldr	r0, [pc, #88]	@ (800331c <MX_GPIO_Init+0x304>)
 80032c2:	f001 fc21 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : dir4_Pin */
  GPIO_InitStruct.Pin = dir4_Pin;
 80032c6:	2301      	movs	r3, #1
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ca:	2301      	movs	r3, #1
 80032cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(dir4_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032da:	4619      	mov	r1, r3
 80032dc:	480e      	ldr	r0, [pc, #56]	@ (8003318 <MX_GPIO_Init+0x300>)
 80032de:	f001 fc13 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : EndStop4_Pin */
  GPIO_InitStruct.Pin = EndStop4_Pin;
 80032e2:	2308      	movs	r3, #8
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ea:	2301      	movs	r3, #1
 80032ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EndStop4_GPIO_Port, &GPIO_InitStruct);
 80032ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f2:	4619      	mov	r1, r3
 80032f4:	4807      	ldr	r0, [pc, #28]	@ (8003314 <MX_GPIO_Init+0x2fc>)
 80032f6:	f001 fc07 	bl	8004b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2100      	movs	r1, #0
 80032fe:	2028      	movs	r0, #40	@ 0x28
 8003300:	e010      	b.n	8003324 <MX_GPIO_Init+0x30c>
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	40021000 	.word	0x40021000
 800330c:	40021400 	.word	0x40021400
 8003310:	40020000 	.word	0x40020000
 8003314:	40020400 	.word	0x40020400
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021800 	.word	0x40021800
 8003320:	40020800 	.word	0x40020800
 8003324:	f001 f83d 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003328:	2028      	movs	r0, #40	@ 0x28
 800332a:	f001 f856 	bl	80043da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800332e:	bf00      	nop
 8003330:	3738      	adds	r7, #56	@ 0x38
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop

08003338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
}
 800333e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <Error_Handler+0x8>

08003344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_MspInit+0x44>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	4a0e      	ldr	r2, [pc, #56]	@ (8003388 <HAL_MspInit+0x44>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	@ 0x40
 8003356:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <HAL_MspInit+0x44>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_MspInit+0x44>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	4a08      	ldr	r2, [pc, #32]	@ (8003388 <HAL_MspInit+0x44>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336c:	6453      	str	r3, [r2, #68]	@ 0x44
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_MspInit+0x44>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b0aa      	sub	sp, #168	@ 0xa8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	2284      	movs	r2, #132	@ 0x84
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f008 fb0b 	bl	800b9c8 <memset>
  if(hi2c->Instance==I2C1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <HAL_I2C_MspInit+0xb4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d13c      	bne.n	8003436 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033c6:	f107 0310 	add.w	r3, r7, #16
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 f85c 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80033d6:	f7ff ffaf 	bl	8003338 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <HAL_I2C_MspInit+0xb8>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	4a19      	ldr	r2, [pc, #100]	@ (8003444 <HAL_I2C_MspInit+0xb8>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e6:	4b17      	ldr	r3, [pc, #92]	@ (8003444 <HAL_I2C_MspInit+0xb8>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80033f2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80033f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033fa:	2312      	movs	r3, #18
 80033fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800340c:	2304      	movs	r3, #4
 800340e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003412:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003416:	4619      	mov	r1, r3
 8003418:	480b      	ldr	r0, [pc, #44]	@ (8003448 <HAL_I2C_MspInit+0xbc>)
 800341a:	f001 fb75 	bl	8004b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <HAL_I2C_MspInit+0xb8>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	4a08      	ldr	r2, [pc, #32]	@ (8003444 <HAL_I2C_MspInit+0xb8>)
 8003424:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003428:	6413      	str	r3, [r2, #64]	@ 0x40
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_I2C_MspInit+0xb8>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003436:	bf00      	nop
 8003438:	37a8      	adds	r7, #168	@ 0xa8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40005400 	.word	0x40005400
 8003444:	40023800 	.word	0x40023800
 8003448:	40020400 	.word	0x40020400

0800344c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	@ 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a25      	ldr	r2, [pc, #148]	@ (8003500 <HAL_SPI_MspInit+0xb4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d143      	bne.n	80034f6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800346e:	4b25      	ldr	r3, [pc, #148]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	4a24      	ldr	r2, [pc, #144]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 8003474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003478:	6413      	str	r3, [r2, #64]	@ 0x40
 800347a:	4b22      	ldr	r3, [pc, #136]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003486:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	4a1e      	ldr	r2, [pc, #120]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	6313      	str	r3, [r2, #48]	@ 0x30
 8003492:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800349e:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034aa:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <HAL_SPI_MspInit+0xb8>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034b6:	230c      	movs	r3, #12
 80034b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034c6:	2305      	movs	r3, #5
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ca:	f107 0314 	add.w	r3, r7, #20
 80034ce:	4619      	mov	r1, r3
 80034d0:	480d      	ldr	r0, [pc, #52]	@ (8003508 <HAL_SPI_MspInit+0xbc>)
 80034d2:	f001 fb19 	bl	8004b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034d6:	2308      	movs	r3, #8
 80034d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	2303      	movs	r3, #3
 80034e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034e6:	2305      	movs	r3, #5
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	4619      	mov	r1, r3
 80034f0:	4806      	ldr	r0, [pc, #24]	@ (800350c <HAL_SPI_MspInit+0xc0>)
 80034f2:	f001 fb09 	bl	8004b08 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80034f6:	bf00      	nop
 80034f8:	3728      	adds	r7, #40	@ 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40003800 	.word	0x40003800
 8003504:	40023800 	.word	0x40023800
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00

08003510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003520:	d114      	bne.n	800354c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003522:	4b38      	ldr	r3, [pc, #224]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a37      	ldr	r2, [pc, #220]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b35      	ldr	r3, [pc, #212]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800353a:	2200      	movs	r2, #0
 800353c:	2100      	movs	r1, #0
 800353e:	201c      	movs	r0, #28
 8003540:	f000 ff2f 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003544:	201c      	movs	r0, #28
 8003546:	f000 ff48 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800354a:	e056      	b.n	80035fa <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2d      	ldr	r2, [pc, #180]	@ (8003608 <HAL_TIM_Base_MspInit+0xf8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d114      	bne.n	8003580 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003556:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	4a2a      	ldr	r2, [pc, #168]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	6413      	str	r3, [r2, #64]	@ 0x40
 8003562:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	201d      	movs	r0, #29
 8003574:	f000 ff15 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003578:	201d      	movs	r0, #29
 800357a:	f000 ff2e 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 800357e:	e03c      	b.n	80035fa <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM7)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a21      	ldr	r2, [pc, #132]	@ (800360c <HAL_TIM_Base_MspInit+0xfc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10c      	bne.n	80035a4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800358a:	4b1e      	ldr	r3, [pc, #120]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 8003590:	f043 0320 	orr.w	r3, r3, #32
 8003594:	6413      	str	r3, [r2, #64]	@ 0x40
 8003596:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]
}
 80035a2:	e02a      	b.n	80035fa <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM10)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <HAL_TIM_Base_MspInit+0x100>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d114      	bne.n	80035d8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80035ae:	4b15      	ldr	r3, [pc, #84]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	4a14      	ldr	r2, [pc, #80]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 80035b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ba:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	2019      	movs	r0, #25
 80035cc:	f000 fee9 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80035d0:	2019      	movs	r0, #25
 80035d2:	f000 ff02 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 80035d6:	e010      	b.n	80035fa <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM14)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <HAL_TIM_Base_MspInit+0x104>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10b      	bne.n	80035fa <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80035e2:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ee:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_TIM_Base_MspInit+0xf4>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
}
 80035fa:	bf00      	nop
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	40000400 	.word	0x40000400
 800360c:	40001400 	.word	0x40001400
 8003610:	40014400 	.word	0x40014400
 8003614:	40002000 	.word	0x40002000

08003618 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	@ 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d130      	bne.n	800369c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800363a:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <HAL_TIM_Encoder_MspInit+0x90>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <HAL_TIM_Encoder_MspInit+0x90>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6413      	str	r3, [r2, #64]	@ 0x40
 8003646:	4b18      	ldr	r3, [pc, #96]	@ (80036a8 <HAL_TIM_Encoder_MspInit+0x90>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003652:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <HAL_TIM_Encoder_MspInit+0x90>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	4a14      	ldr	r2, [pc, #80]	@ (80036a8 <HAL_TIM_Encoder_MspInit+0x90>)
 8003658:	f043 0308 	orr.w	r3, r3, #8
 800365c:	6313      	str	r3, [r2, #48]	@ 0x30
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <HAL_TIM_Encoder_MspInit+0x90>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 800366a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800366e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800367c:	2302      	movs	r3, #2
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	4619      	mov	r1, r3
 8003686:	4809      	ldr	r0, [pc, #36]	@ (80036ac <HAL_TIM_Encoder_MspInit+0x94>)
 8003688:	f001 fa3e 	bl	8004b08 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	201e      	movs	r0, #30
 8003692:	f000 fe86 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003696:	201e      	movs	r0, #30
 8003698:	f000 fe9f 	bl	80043da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800369c:	bf00      	nop
 800369e:	3728      	adds	r7, #40	@ 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020c00 	.word	0x40020c00

080036b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a16      	ldr	r2, [pc, #88]	@ (8003718 <HAL_TIM_PWM_MspInit+0x68>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10c      	bne.n	80036dc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036c2:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_TIM_PWM_MspInit+0x6c>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	4a15      	ldr	r2, [pc, #84]	@ (800371c <HAL_TIM_PWM_MspInit+0x6c>)
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ce:	4b13      	ldr	r3, [pc, #76]	@ (800371c <HAL_TIM_PWM_MspInit+0x6c>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80036da:	e018      	b.n	800370e <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM9)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003720 <HAL_TIM_PWM_MspInit+0x70>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d113      	bne.n	800370e <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80036e6:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <HAL_TIM_PWM_MspInit+0x6c>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <HAL_TIM_PWM_MspInit+0x6c>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f2:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <HAL_TIM_PWM_MspInit+0x6c>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	2018      	movs	r0, #24
 8003704:	f000 fe4d 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003708:	2018      	movs	r0, #24
 800370a:	f000 fe66 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40023800 	.word	0x40023800
 8003720:	40014000 	.word	0x40014000

08003724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	@ 0x38
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003744:	d11d      	bne.n	8003782 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003746:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a65      	ldr	r2, [pc, #404]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 800374c:	f043 0302 	orr.w	r3, r3, #2
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b63      	ldr	r3, [pc, #396]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = step1_Pin;
 800375e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003770:	2301      	movs	r3, #1
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 8003774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003778:	4619      	mov	r1, r3
 800377a:	485a      	ldr	r0, [pc, #360]	@ (80038e4 <HAL_TIM_MspPostInit+0x1c0>)
 800377c:	f001 f9c4 	bl	8004b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003780:	e0aa      	b.n	80038d8 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM3)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a58      	ldr	r2, [pc, #352]	@ (80038e8 <HAL_TIM_MspPostInit+0x1c4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d11c      	bne.n	80037c6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378c:	4b54      	ldr	r3, [pc, #336]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003790:	4a53      	ldr	r2, [pc, #332]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6313      	str	r3, [r2, #48]	@ 0x30
 8003798:	4b51      	ldr	r3, [pc, #324]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = step2_Pin;
 80037a4:	2340      	movs	r3, #64	@ 0x40
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a8:	2302      	movs	r3, #2
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b0:	2300      	movs	r3, #0
 80037b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037b4:	2302      	movs	r3, #2
 80037b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 80037b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037bc:	4619      	mov	r1, r3
 80037be:	484b      	ldr	r0, [pc, #300]	@ (80038ec <HAL_TIM_MspPostInit+0x1c8>)
 80037c0:	f001 f9a2 	bl	8004b08 <HAL_GPIO_Init>
}
 80037c4:	e088      	b.n	80038d8 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM5)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a49      	ldr	r2, [pc, #292]	@ (80038f0 <HAL_TIM_MspPostInit+0x1cc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d11c      	bne.n	800380a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d0:	4b43      	ldr	r3, [pc, #268]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	4a42      	ldr	r2, [pc, #264]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6313      	str	r3, [r2, #48]	@ 0x30
 80037dc:	4b40      	ldr	r3, [pc, #256]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = servoPWM_Pin;
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	2302      	movs	r3, #2
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f4:	2300      	movs	r3, #0
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80037f8:	2302      	movs	r3, #2
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(servoPWM_GPIO_Port, &GPIO_InitStruct);
 80037fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003800:	4619      	mov	r1, r3
 8003802:	483a      	ldr	r0, [pc, #232]	@ (80038ec <HAL_TIM_MspPostInit+0x1c8>)
 8003804:	f001 f980 	bl	8004b08 <HAL_GPIO_Init>
}
 8003808:	e066      	b.n	80038d8 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM9)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a39      	ldr	r2, [pc, #228]	@ (80038f4 <HAL_TIM_MspPostInit+0x1d0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d11c      	bne.n	800384e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003814:	4b32      	ldr	r3, [pc, #200]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	4a31      	ldr	r2, [pc, #196]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 800381a:	f043 0310 	orr.w	r3, r3, #16
 800381e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003820:	4b2f      	ldr	r3, [pc, #188]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = step3_Pin;
 800382c:	2320      	movs	r3, #32
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800383c:	2303      	movs	r3, #3
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step3_GPIO_Port, &GPIO_InitStruct);
 8003840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003844:	4619      	mov	r1, r3
 8003846:	482c      	ldr	r0, [pc, #176]	@ (80038f8 <HAL_TIM_MspPostInit+0x1d4>)
 8003848:	f001 f95e 	bl	8004b08 <HAL_GPIO_Init>
}
 800384c:	e044      	b.n	80038d8 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM10)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2a      	ldr	r2, [pc, #168]	@ (80038fc <HAL_TIM_MspPostInit+0x1d8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d11d      	bne.n	8003894 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003858:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	4a20      	ldr	r2, [pc, #128]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	6313      	str	r3, [r2, #48]	@ 0x30
 8003864:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = step4_Pin;
 8003870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387e:	2300      	movs	r3, #0
 8003880:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003882:	2303      	movs	r3, #3
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(step4_GPIO_Port, &GPIO_InitStruct);
 8003886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800388a:	4619      	mov	r1, r3
 800388c:	4815      	ldr	r0, [pc, #84]	@ (80038e4 <HAL_TIM_MspPostInit+0x1c0>)
 800388e:	f001 f93b 	bl	8004b08 <HAL_GPIO_Init>
}
 8003892:	e021      	b.n	80038d8 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM14)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a19      	ldr	r2, [pc, #100]	@ (8003900 <HAL_TIM_MspPostInit+0x1dc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d11c      	bne.n	80038d8 <HAL_TIM_MspPostInit+0x1b4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <HAL_TIM_MspPostInit+0x1bc>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 80038b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c4:	2300      	movs	r3, #0
 80038c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80038c8:	2309      	movs	r3, #9
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 80038cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d0:	4619      	mov	r1, r3
 80038d2:	480c      	ldr	r0, [pc, #48]	@ (8003904 <HAL_TIM_MspPostInit+0x1e0>)
 80038d4:	f001 f918 	bl	8004b08 <HAL_GPIO_Init>
}
 80038d8:	bf00      	nop
 80038da:	3738      	adds	r7, #56	@ 0x38
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020400 	.word	0x40020400
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40020000 	.word	0x40020000
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40002000 	.word	0x40002000
 8003904:	40021400 	.word	0x40021400

08003908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b0b4      	sub	sp, #208	@ 0xd0
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003920:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003924:	2284      	movs	r2, #132	@ 0x84
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f008 f84d 	bl	800b9c8 <memset>
  if(huart->Instance==UART4)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4aaf      	ldr	r2, [pc, #700]	@ (8003bf0 <HAL_UART_MspInit+0x2e8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d174      	bne.n	8003a22 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800393c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003944:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003948:	4618      	mov	r0, r3
 800394a:	f002 fd9d 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003954:	f7ff fcf0 	bl	8003338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003958:	4ba6      	ldr	r3, [pc, #664]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	4aa5      	ldr	r2, [pc, #660]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 800395e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003962:	6413      	str	r3, [r2, #64]	@ 0x40
 8003964:	4ba3      	ldr	r3, [pc, #652]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800396c:	637b      	str	r3, [r7, #52]	@ 0x34
 800396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003970:	4ba0      	ldr	r3, [pc, #640]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	4a9f      	ldr	r2, [pc, #636]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	6313      	str	r3, [r2, #48]	@ 0x30
 800397c:	4b9d      	ldr	r3, [pc, #628]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	633b      	str	r3, [r7, #48]	@ 0x30
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003988:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800398c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039a2:	2308      	movs	r3, #8
 80039a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80039ac:	4619      	mov	r1, r3
 80039ae:	4892      	ldr	r0, [pc, #584]	@ (8003bf8 <HAL_UART_MspInit+0x2f0>)
 80039b0:	f001 f8aa 	bl	8004b08 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80039b4:	4b91      	ldr	r3, [pc, #580]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039b6:	4a92      	ldr	r2, [pc, #584]	@ (8003c00 <HAL_UART_MspInit+0x2f8>)
 80039b8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80039ba:	4b90      	ldr	r3, [pc, #576]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80039c0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039c2:	4b8e      	ldr	r3, [pc, #568]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039c8:	4b8c      	ldr	r3, [pc, #560]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039ce:	4b8b      	ldr	r3, [pc, #556]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039d4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039d6:	4b89      	ldr	r3, [pc, #548]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039dc:	4b87      	ldr	r3, [pc, #540]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039de:	2200      	movs	r2, #0
 80039e0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80039e2:	4b86      	ldr	r3, [pc, #536]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039e8:	4b84      	ldr	r3, [pc, #528]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039ee:	4b83      	ldr	r3, [pc, #524]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80039f4:	4881      	ldr	r0, [pc, #516]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 80039f6:	f000 fd0b 	bl	8004410 <HAL_DMA_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8003a00:	f7ff fc9a 	bl	8003338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a7d      	ldr	r2, [pc, #500]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 8003a08:	675a      	str	r2, [r3, #116]	@ 0x74
 8003a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003bfc <HAL_UART_MspInit+0x2f4>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003a10:	2200      	movs	r2, #0
 8003a12:	2100      	movs	r1, #0
 8003a14:	2034      	movs	r0, #52	@ 0x34
 8003a16:	f000 fcc4 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003a1a:	2034      	movs	r0, #52	@ 0x34
 8003a1c:	f000 fcdd 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a20:	e1b6      	b.n	8003d90 <HAL_UART_MspInit+0x488>
  else if(huart->Instance==UART5)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a77      	ldr	r2, [pc, #476]	@ (8003c04 <HAL_UART_MspInit+0x2fc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	f040 8096 	bne.w	8003b5a <HAL_UART_MspInit+0x252>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a32:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f002 fd22 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_UART_MspInit+0x146>
      Error_Handler();
 8003a4a:	f7ff fc75 	bl	8003338 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003a4e:	4b69      	ldr	r3, [pc, #420]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	4a68      	ldr	r2, [pc, #416]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5a:	4b66      	ldr	r3, [pc, #408]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a66:	4b63      	ldr	r3, [pc, #396]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	4a62      	ldr	r2, [pc, #392]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a72:	4b60      	ldr	r3, [pc, #384]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003aba:	4619      	mov	r1, r3
 8003abc:	484e      	ldr	r0, [pc, #312]	@ (8003bf8 <HAL_UART_MspInit+0x2f0>)
 8003abe:	f001 f823 	bl	8004b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003ada:	2308      	movs	r3, #8
 8003adc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ae0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4848      	ldr	r0, [pc, #288]	@ (8003c08 <HAL_UART_MspInit+0x300>)
 8003ae8:	f001 f80e 	bl	8004b08 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003aec:	4b47      	ldr	r3, [pc, #284]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003aee:	4a48      	ldr	r2, [pc, #288]	@ (8003c10 <HAL_UART_MspInit+0x308>)
 8003af0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003af2:	4b46      	ldr	r3, [pc, #280]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003af4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003af8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003afa:	4b44      	ldr	r3, [pc, #272]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b00:	4b42      	ldr	r3, [pc, #264]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b06:	4b41      	ldr	r3, [pc, #260]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b0c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b14:	4b3d      	ldr	r3, [pc, #244]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b20:	4b3a      	ldr	r3, [pc, #232]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b26:	4b39      	ldr	r3, [pc, #228]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003b2c:	4837      	ldr	r0, [pc, #220]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b2e:	f000 fc6f 	bl	8004410 <HAL_DMA_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_UART_MspInit+0x234>
      Error_Handler();
 8003b38:	f7ff fbfe 	bl	8003338 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a33      	ldr	r2, [pc, #204]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b40:	675a      	str	r2, [r3, #116]	@ 0x74
 8003b42:	4a32      	ldr	r2, [pc, #200]	@ (8003c0c <HAL_UART_MspInit+0x304>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	2035      	movs	r0, #53	@ 0x35
 8003b4e:	f000 fc28 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003b52:	2035      	movs	r0, #53	@ 0x35
 8003b54:	f000 fc41 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 8003b58:	e11a      	b.n	8003d90 <HAL_UART_MspInit+0x488>
  else if(huart->Instance==USART2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <HAL_UART_MspInit+0x30c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d159      	bne.n	8003c18 <HAL_UART_MspInit+0x310>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b64:	2380      	movs	r3, #128	@ 0x80
 8003b66:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b72:	4618      	mov	r0, r3
 8003b74:	f002 fc88 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8003b7e:	f7ff fbdb 	bl	8003338 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b82:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8e:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b9a:	4b16      	ldr	r3, [pc, #88]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	4a15      	ldr	r2, [pc, #84]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba6:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <HAL_UART_MspInit+0x2ec>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003bb2:	2360      	movs	r3, #96	@ 0x60
 8003bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bca:	2307      	movs	r3, #7
 8003bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bd0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	480c      	ldr	r0, [pc, #48]	@ (8003c08 <HAL_UART_MspInit+0x300>)
 8003bd8:	f000 ff96 	bl	8004b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2100      	movs	r1, #0
 8003be0:	2026      	movs	r0, #38	@ 0x26
 8003be2:	f000 fbde 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003be6:	2026      	movs	r0, #38	@ 0x26
 8003be8:	f000 fbf7 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 8003bec:	e0d0      	b.n	8003d90 <HAL_UART_MspInit+0x488>
 8003bee:	bf00      	nop
 8003bf0:	40004c00 	.word	0x40004c00
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	200006e8 	.word	0x200006e8
 8003c00:	40026040 	.word	0x40026040
 8003c04:	40005000 	.word	0x40005000
 8003c08:	40020c00 	.word	0x40020c00
 8003c0c:	20000748 	.word	0x20000748
 8003c10:	40026010 	.word	0x40026010
 8003c14:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003d98 <HAL_UART_MspInit+0x490>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d13e      	bne.n	8003ca0 <HAL_UART_MspInit+0x398>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c26:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c32:	4618      	mov	r0, r3
 8003c34:	f002 fc28 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 8003c3e:	f7ff fb7b 	bl	8003338 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c42:	4b56      	ldr	r3, [pc, #344]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4a55      	ldr	r2, [pc, #340]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4e:	4b53      	ldr	r3, [pc, #332]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c5a:	4b50      	ldr	r3, [pc, #320]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c66:	4b4d      	ldr	r3, [pc, #308]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c8c:	2307      	movs	r3, #7
 8003c8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c92:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003c96:	4619      	mov	r1, r3
 8003c98:	4841      	ldr	r0, [pc, #260]	@ (8003da0 <HAL_UART_MspInit+0x498>)
 8003c9a:	f000 ff35 	bl	8004b08 <HAL_GPIO_Init>
}
 8003c9e:	e077      	b.n	8003d90 <HAL_UART_MspInit+0x488>
  else if(huart->Instance==USART6)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8003da4 <HAL_UART_MspInit+0x49c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d172      	bne.n	8003d90 <HAL_UART_MspInit+0x488>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003caa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003cae:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f002 fbe4 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_UART_MspInit+0x3c2>
      Error_Handler();
 8003cc6:	f7ff fb37 	bl	8003338 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003cca:	4b34      	ldr	r3, [pc, #208]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	4a33      	ldr	r2, [pc, #204]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003cd0:	f043 0320 	orr.w	r3, r3, #32
 8003cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cd6:	4b31      	ldr	r3, [pc, #196]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b2b      	ldr	r3, [pc, #172]	@ (8003d9c <HAL_UART_MspInit+0x494>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cfa:	23c0      	movs	r3, #192	@ 0xc0
 8003cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d12:	2308      	movs	r3, #8
 8003d14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d18:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4822      	ldr	r0, [pc, #136]	@ (8003da8 <HAL_UART_MspInit+0x4a0>)
 8003d20:	f000 fef2 	bl	8004b08 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003d24:	4b21      	ldr	r3, [pc, #132]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d26:	4a22      	ldr	r2, [pc, #136]	@ (8003db0 <HAL_UART_MspInit+0x4a8>)
 8003d28:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003d2a:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d2c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003d30:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d32:	4b1e      	ldr	r3, [pc, #120]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d38:	4b1c      	ldr	r3, [pc, #112]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d44:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d46:	4b19      	ldr	r3, [pc, #100]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d4c:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003d52:	4b16      	ldr	r3, [pc, #88]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d58:	4b14      	ldr	r3, [pc, #80]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d5e:	4b13      	ldr	r3, [pc, #76]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003d64:	4811      	ldr	r0, [pc, #68]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d66:	f000 fb53 	bl	8004410 <HAL_DMA_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_UART_MspInit+0x46c>
      Error_Handler();
 8003d70:	f7ff fae2 	bl	8003338 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d78:	675a      	str	r2, [r3, #116]	@ 0x74
 8003d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003dac <HAL_UART_MspInit+0x4a4>)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003d80:	2200      	movs	r2, #0
 8003d82:	2100      	movs	r1, #0
 8003d84:	2047      	movs	r0, #71	@ 0x47
 8003d86:	f000 fb0c 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003d8a:	2047      	movs	r0, #71	@ 0x47
 8003d8c:	f000 fb25 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 8003d90:	bf00      	nop
 8003d92:	37d0      	adds	r7, #208	@ 0xd0
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40004800 	.word	0x40004800
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020c00 	.word	0x40020c00
 8003da4:	40011400 	.word	0x40011400
 8003da8:	40020800 	.word	0x40020800
 8003dac:	200007a8 	.word	0x200007a8
 8003db0:	40026428 	.word	0x40026428

08003db4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b0ac      	sub	sp, #176	@ 0xb0
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	60da      	str	r2, [r3, #12]
 8003dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dcc:	f107 0318 	add.w	r3, r7, #24
 8003dd0:	2284      	movs	r2, #132	@ 0x84
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f007 fdf7 	bl	800b9c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de2:	d159      	bne.n	8003e98 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003de4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003de8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003df0:	f107 0318 	add.w	r3, r7, #24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 fb47 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003e00:	f7ff fa9a 	bl	8003338 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e04:	4b26      	ldr	r3, [pc, #152]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	4a25      	ldr	r2, [pc, #148]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003e1c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e24:	2302      	movs	r3, #2
 8003e26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e30:	2303      	movs	r3, #3
 8003e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e36:	230a      	movs	r3, #10
 8003e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e40:	4619      	mov	r1, r3
 8003e42:	4818      	ldr	r0, [pc, #96]	@ (8003ea4 <HAL_PCD_MspInit+0xf0>)
 8003e44:	f000 fe60 	bl	8004b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003e48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003e5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e60:	4619      	mov	r1, r3
 8003e62:	4810      	ldr	r0, [pc, #64]	@ (8003ea4 <HAL_PCD_MspInit+0xf0>)
 8003e64:	f000 fe50 	bl	8004b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e68:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e72:	6353      	str	r3, [r2, #52]	@ 0x34
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	4a06      	ldr	r2, [pc, #24]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ea0 <HAL_PCD_MspInit+0xec>)
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003e98:	bf00      	nop
 8003e9a:	37b0      	adds	r7, #176	@ 0xb0
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020000 	.word	0x40020000

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <NMI_Handler+0x4>

08003eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <HardFault_Handler+0x4>

08003eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <MemManage_Handler+0x4>

08003ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec4:	bf00      	nop
 8003ec6:	e7fd      	b.n	8003ec4 <BusFault_Handler+0x4>

08003ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <UsageFault_Handler+0x4>

08003ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003efe:	f000 f931 	bl	8004164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003f0c:	4802      	ldr	r0, [pc, #8]	@ (8003f18 <DMA1_Stream0_IRQHandler+0x10>)
 8003f0e:	f000 fbbf 	bl	8004690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000748 	.word	0x20000748

08003f1c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003f20:	4802      	ldr	r0, [pc, #8]	@ (8003f2c <DMA1_Stream2_IRQHandler+0x10>)
 8003f22:	f000 fbb5 	bl	8004690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200006e8 	.word	0x200006e8

08003f30 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003f34:	4802      	ldr	r0, [pc, #8]	@ (8003f40 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003f36:	f004 f9eb 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000035c 	.word	0x2000035c

08003f44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003f4a:	f004 f9e1 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200003a8 	.word	0x200003a8

08003f58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f5c:	4802      	ldr	r0, [pc, #8]	@ (8003f68 <TIM2_IRQHandler+0x10>)
 8003f5e:	f004 f9d7 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200001e0 	.word	0x200001e0

08003f6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f70:	4802      	ldr	r0, [pc, #8]	@ (8003f7c <TIM3_IRQHandler+0x10>)
 8003f72:	f004 f9cd 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000022c 	.word	0x2000022c

08003f80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f84:	4802      	ldr	r0, [pc, #8]	@ (8003f90 <TIM4_IRQHandler+0x10>)
 8003f86:	f004 f9c3 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000278 	.word	0x20000278

08003f94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f98:	4802      	ldr	r0, [pc, #8]	@ (8003fa4 <USART2_IRQHandler+0x10>)
 8003f9a:	f005 fa59 	bl	8009450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000550 	.word	0x20000550

08003fa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003fac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003fb0:	f000 ff88 	bl	8004ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003fbc:	4802      	ldr	r0, [pc, #8]	@ (8003fc8 <UART4_IRQHandler+0x10>)
 8003fbe:	f005 fa47 	bl	8009450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000440 	.word	0x20000440

08003fcc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003fd0:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <UART5_IRQHandler+0x10>)
 8003fd2:	f005 fa3d 	bl	8009450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200004c8 	.word	0x200004c8

08003fe0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003fe4:	4802      	ldr	r0, [pc, #8]	@ (8003ff0 <DMA2_Stream1_IRQHandler+0x10>)
 8003fe6:	f000 fb53 	bl	8004690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	200007a8 	.word	0x200007a8

08003ff4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ff8:	4802      	ldr	r0, [pc, #8]	@ (8004004 <USART6_IRQHandler+0x10>)
 8003ffa:	f005 fa29 	bl	8009450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000660 	.word	0x20000660

08004008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004010:	4a14      	ldr	r2, [pc, #80]	@ (8004064 <_sbrk+0x5c>)
 8004012:	4b15      	ldr	r3, [pc, #84]	@ (8004068 <_sbrk+0x60>)
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800401c:	4b13      	ldr	r3, [pc, #76]	@ (800406c <_sbrk+0x64>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d102      	bne.n	800402a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004024:	4b11      	ldr	r3, [pc, #68]	@ (800406c <_sbrk+0x64>)
 8004026:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <_sbrk+0x68>)
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <_sbrk+0x64>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d207      	bcs.n	8004048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004038:	f007 fcce 	bl	800b9d8 <__errno>
 800403c:	4603      	mov	r3, r0
 800403e:	220c      	movs	r2, #12
 8004040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	e009      	b.n	800405c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004048:	4b08      	ldr	r3, [pc, #32]	@ (800406c <_sbrk+0x64>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <_sbrk+0x64>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	4a05      	ldr	r2, [pc, #20]	@ (800406c <_sbrk+0x64>)
 8004058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800405a:	68fb      	ldr	r3, [r7, #12]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20050000 	.word	0x20050000
 8004068:	00000400 	.word	0x00000400
 800406c:	20000ed8 	.word	0x20000ed8
 8004070:	20001048 	.word	0x20001048

08004074 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004078:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <SystemInit+0x20>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	4a05      	ldr	r2, [pc, #20]	@ (8004094 <SystemInit+0x20>)
 8004080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8004098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800409c:	f7ff ffea 	bl	8004074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040a0:	480c      	ldr	r0, [pc, #48]	@ (80040d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040a2:	490d      	ldr	r1, [pc, #52]	@ (80040d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040a4:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0a      	ldr	r2, [pc, #40]	@ (80040e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040b8:	4c0a      	ldr	r4, [pc, #40]	@ (80040e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80040c6:	f007 fc8d 	bl	800b9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ca:	f7fe f9a3 	bl	8002414 <main>
  bx  lr    
 80040ce:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80040d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80040d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d8:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80040dc:	0800ca54 	.word	0x0800ca54
  ldr r2, =_sbss
 80040e0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80040e4:	20001048 	.word	0x20001048

080040e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC_IRQHandler>

080040ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ee:	2003      	movs	r0, #3
 80040f0:	f000 f94c 	bl	800438c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f000 f805 	bl	8004104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040fa:	f7ff f923 	bl	8003344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800410c:	4b12      	ldr	r3, [pc, #72]	@ (8004158 <HAL_InitTick+0x54>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b12      	ldr	r3, [pc, #72]	@ (800415c <HAL_InitTick+0x58>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800411a:	fbb3 f3f1 	udiv	r3, r3, r1
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f967 	bl	80043f6 <HAL_SYSTICK_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e00e      	b.n	8004150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d80a      	bhi.n	800414e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004138:	2200      	movs	r2, #0
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	f000 f92f 	bl	80043a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004144:	4a06      	ldr	r2, [pc, #24]	@ (8004160 <HAL_InitTick+0x5c>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2000004c 	.word	0x2000004c
 800415c:	20000054 	.word	0x20000054
 8004160:	20000050 	.word	0x20000050

08004164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004168:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_IncTick+0x20>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_IncTick+0x24>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_IncTick+0x24>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000054 	.word	0x20000054
 8004188:	20000edc 	.word	0x20000edc

0800418c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return uwTick;
 8004190:	4b03      	ldr	r3, [pc, #12]	@ (80041a0 <HAL_GetTick+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000edc 	.word	0x20000edc

080041a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d005      	beq.n	80041ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041be:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <HAL_Delay+0x44>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ca:	bf00      	nop
 80041cc:	f7ff ffde 	bl	800418c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d8f7      	bhi.n	80041cc <HAL_Delay+0x28>
  {
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000054 	.word	0x20000054

080041ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <__NVIC_SetPriorityGrouping+0x40>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004208:	4013      	ands	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 8004216:	4313      	orrs	r3, r2
 8004218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421a:	4a04      	ldr	r2, [pc, #16]	@ (800422c <__NVIC_SetPriorityGrouping+0x40>)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	60d3      	str	r3, [r2, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000ed00 	.word	0xe000ed00
 8004230:	05fa0000 	.word	0x05fa0000

08004234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004238:	4b04      	ldr	r3, [pc, #16]	@ (800424c <__NVIC_GetPriorityGrouping+0x18>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0307 	and.w	r3, r3, #7
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db0b      	blt.n	800427a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4907      	ldr	r1, [pc, #28]	@ (8004288 <__NVIC_EnableIRQ+0x38>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db0a      	blt.n	80042b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	490c      	ldr	r1, [pc, #48]	@ (80042d8 <__NVIC_SetPriority+0x4c>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042b4:	e00a      	b.n	80042cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4908      	ldr	r1, [pc, #32]	@ (80042dc <__NVIC_SetPriority+0x50>)
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3b04      	subs	r3, #4
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	440b      	add	r3, r1
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000e100 	.word	0xe000e100
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	@ 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	bf28      	it	cs
 80042fe:	2304      	movcs	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3304      	adds	r3, #4
 8004306:	2b06      	cmp	r3, #6
 8004308:	d902      	bls.n	8004310 <NVIC_EncodePriority+0x30>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3b03      	subs	r3, #3
 800430e:	e000      	b.n	8004312 <NVIC_EncodePriority+0x32>
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	f04f 31ff 	mov.w	r1, #4294967295
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43d9      	mvns	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	4313      	orrs	r3, r2
         );
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	@ 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004358:	d301      	bcc.n	800435e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800435a:	2301      	movs	r3, #1
 800435c:	e00f      	b.n	800437e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800435e:	4a0a      	ldr	r2, [pc, #40]	@ (8004388 <SysTick_Config+0x40>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004366:	210f      	movs	r1, #15
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	f7ff ff8e 	bl	800428c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <SysTick_Config+0x40>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004376:	4b04      	ldr	r3, [pc, #16]	@ (8004388 <SysTick_Config+0x40>)
 8004378:	2207      	movs	r2, #7
 800437a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000e010 	.word	0xe000e010

0800438c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff29 	bl	80041ec <__NVIC_SetPriorityGrouping>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043b4:	f7ff ff3e 	bl	8004234 <__NVIC_GetPriorityGrouping>
 80043b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	f7ff ff8e 	bl	80042e0 <NVIC_EncodePriority>
 80043c4:	4602      	mov	r2, r0
 80043c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff5d 	bl	800428c <__NVIC_SetPriority>
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	4603      	mov	r3, r0
 80043e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff31 	bl	8004250 <__NVIC_EnableIRQ>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ffa2 	bl	8004348 <SysTick_Config>
 8004404:	4603      	mov	r3, r0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7ff feb6 	bl	800418c <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e099      	b.n	8004560 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444c:	e00f      	b.n	800446e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800444e:	f7ff fe9d 	bl	800418c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b05      	cmp	r3, #5
 800445a:	d908      	bls.n	800446e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e078      	b.n	8004560 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e8      	bne.n	800444e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4b38      	ldr	r3, [pc, #224]	@ (8004568 <HAL_DMA_Init+0x158>)
 8004488:	4013      	ands	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800449a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d107      	bne.n	80044d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d0:	4313      	orrs	r3, r2
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0307 	bic.w	r3, r3, #7
 80044ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d117      	bne.n	8004532 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa7b 	bl	8004a10 <DMA_CheckFifoParam>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2240      	movs	r2, #64	@ 0x40
 8004524:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800452e:	2301      	movs	r3, #1
 8004530:	e016      	b.n	8004560 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa32 	bl	80049a4 <DMA_CalcBaseAndBitshift>
 8004540:	4603      	mov	r3, r0
 8004542:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004548:	223f      	movs	r2, #63	@ 0x3f
 800454a:	409a      	lsls	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	f010803f 	.word	0xf010803f

0800456c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004578:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800457a:	f7ff fe07 	bl	800418c <HAL_GetTick>
 800457e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d008      	beq.n	800459e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2280      	movs	r2, #128	@ 0x80
 8004590:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e052      	b.n	8004644 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0216 	bic.w	r2, r2, #22
 80045ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <HAL_DMA_Abort+0x62>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0208 	bic.w	r2, r2, #8
 80045dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ee:	e013      	b.n	8004618 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045f0:	f7ff fdcc 	bl	800418c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d90c      	bls.n	8004618 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2203      	movs	r2, #3
 8004608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e015      	b.n	8004644 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e4      	bne.n	80045f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	223f      	movs	r2, #63	@ 0x3f
 800462c:	409a      	lsls	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d004      	beq.n	800466a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2280      	movs	r2, #128	@ 0x80
 8004664:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e00c      	b.n	8004684 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2205      	movs	r2, #5
 800466e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800469c:	4b8e      	ldr	r3, [pc, #568]	@ (80048d8 <HAL_DMA_IRQHandler+0x248>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a8e      	ldr	r2, [pc, #568]	@ (80048dc <HAL_DMA_IRQHandler+0x24c>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	2208      	movs	r2, #8
 80046bc:	409a      	lsls	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01a      	beq.n	80046fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e8:	2208      	movs	r2, #8
 80046ea:	409a      	lsls	r2, r3
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004700:	2201      	movs	r2, #1
 8004702:	409a      	lsls	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471e:	2201      	movs	r2, #1
 8004720:	409a      	lsls	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472a:	f043 0202 	orr.w	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	2204      	movs	r2, #4
 8004738:	409a      	lsls	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d012      	beq.n	8004768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004754:	2204      	movs	r2, #4
 8004756:	409a      	lsls	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476c:	2210      	movs	r2, #16
 800476e:	409a      	lsls	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d043      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d03c      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478a:	2210      	movs	r2, #16
 800478c:	409a      	lsls	r2, r3
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d018      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d108      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d024      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
 80047be:	e01f      	b.n	8004800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01b      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
 80047d0:	e016      	b.n	8004800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0208 	bic.w	r2, r2, #8
 80047ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004804:	2220      	movs	r2, #32
 8004806:	409a      	lsls	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 808f 	beq.w	8004930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8087 	beq.w	8004930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004826:	2220      	movs	r2, #32
 8004828:	409a      	lsls	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b05      	cmp	r3, #5
 8004838:	d136      	bne.n	80048a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0216 	bic.w	r2, r2, #22
 8004848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_DMA_IRQHandler+0x1da>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0208 	bic.w	r2, r2, #8
 8004878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487e:	223f      	movs	r2, #63	@ 0x3f
 8004880:	409a      	lsls	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489a:	2b00      	cmp	r3, #0
 800489c:	d07e      	beq.n	800499c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
        }
        return;
 80048a6:	e079      	b.n	800499c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01d      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d031      	beq.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4798      	blx	r3
 80048d4:	e02c      	b.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
 80048d6:	bf00      	nop
 80048d8:	2000004c 	.word	0x2000004c
 80048dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d023      	beq.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
 80048f0:	e01e      	b.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10f      	bne.n	8004920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0210 	bic.w	r2, r2, #16
 800490e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004934:	2b00      	cmp	r3, #0
 8004936:	d032      	beq.n	800499e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d022      	beq.n	800498a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2205      	movs	r2, #5
 8004948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3301      	adds	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	d307      	bcc.n	8004978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f2      	bne.n	800495c <HAL_DMA_IRQHandler+0x2cc>
 8004976:	e000      	b.n	800497a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
 800499a:	e000      	b.n	800499e <HAL_DMA_IRQHandler+0x30e>
        return;
 800499c:	bf00      	nop
    }
  }
}
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	3b10      	subs	r3, #16
 80049b4:	4a13      	ldr	r2, [pc, #76]	@ (8004a04 <DMA_CalcBaseAndBitshift+0x60>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049be:	4a12      	ldr	r2, [pc, #72]	@ (8004a08 <DMA_CalcBaseAndBitshift+0x64>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d908      	bls.n	80049e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a0c <DMA_CalcBaseAndBitshift+0x68>)
 80049da:	4013      	ands	r3, r2
 80049dc:	1d1a      	adds	r2, r3, #4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80049e2:	e006      	b.n	80049f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <DMA_CalcBaseAndBitshift+0x68>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	aaaaaaab 	.word	0xaaaaaaab
 8004a08:	0800ca08 	.word	0x0800ca08
 8004a0c:	fffffc00 	.word	0xfffffc00

08004a10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11f      	bne.n	8004a6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d856      	bhi.n	8004ade <DMA_CheckFifoParam+0xce>
 8004a30:	a201      	add	r2, pc, #4	@ (adr r2, 8004a38 <DMA_CheckFifoParam+0x28>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a5b 	.word	0x08004a5b
 8004a40:	08004a49 	.word	0x08004a49
 8004a44:	08004adf 	.word	0x08004adf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d046      	beq.n	8004ae2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a58:	e043      	b.n	8004ae2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a62:	d140      	bne.n	8004ae6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e03d      	b.n	8004ae6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a72:	d121      	bne.n	8004ab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d837      	bhi.n	8004aea <DMA_CheckFifoParam+0xda>
 8004a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <DMA_CheckFifoParam+0x70>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004a97 	.word	0x08004a97
 8004a88:	08004a91 	.word	0x08004a91
 8004a8c:	08004aa9 	.word	0x08004aa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e030      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d025      	beq.n	8004aee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa6:	e022      	b.n	8004aee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ab0:	d11f      	bne.n	8004af2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ab6:	e01c      	b.n	8004af2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d903      	bls.n	8004ac6 <DMA_CheckFifoParam+0xb6>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d003      	beq.n	8004acc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ac4:	e018      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8004aca:	e015      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00e      	beq.n	8004af6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
      break;
 8004adc:	e00b      	b.n	8004af6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e00a      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e008      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e006      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aea:	bf00      	nop
 8004aec:	e004      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004af6:	bf00      	nop
    }
  } 
  
  return status; 
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	@ 0x24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	e175      	b.n	8004e14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b28:	2201      	movs	r2, #1
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	f040 8164 	bne.w	8004e0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d005      	beq.n	8004b5e <HAL_GPIO_Init+0x56>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d130      	bne.n	8004bc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2203      	movs	r2, #3
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b94:	2201      	movs	r2, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 0201 	and.w	r2, r3, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d017      	beq.n	8004bfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d123      	bne.n	8004c50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	08da      	lsrs	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3208      	adds	r2, #8
 8004c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	220f      	movs	r2, #15
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	08da      	lsrs	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3208      	adds	r2, #8
 8004c4a:	69b9      	ldr	r1, [r7, #24]
 8004c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0203 	and.w	r2, r3, #3
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80be 	beq.w	8004e0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c92:	4b66      	ldr	r3, [pc, #408]	@ (8004e2c <HAL_GPIO_Init+0x324>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	4a65      	ldr	r2, [pc, #404]	@ (8004e2c <HAL_GPIO_Init+0x324>)
 8004c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c9e:	4b63      	ldr	r3, [pc, #396]	@ (8004e2c <HAL_GPIO_Init+0x324>)
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004caa:	4a61      	ldr	r2, [pc, #388]	@ (8004e30 <HAL_GPIO_Init+0x328>)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a58      	ldr	r2, [pc, #352]	@ (8004e34 <HAL_GPIO_Init+0x32c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d037      	beq.n	8004d46 <HAL_GPIO_Init+0x23e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a57      	ldr	r2, [pc, #348]	@ (8004e38 <HAL_GPIO_Init+0x330>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d031      	beq.n	8004d42 <HAL_GPIO_Init+0x23a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a56      	ldr	r2, [pc, #344]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d02b      	beq.n	8004d3e <HAL_GPIO_Init+0x236>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a55      	ldr	r2, [pc, #340]	@ (8004e40 <HAL_GPIO_Init+0x338>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d025      	beq.n	8004d3a <HAL_GPIO_Init+0x232>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a54      	ldr	r2, [pc, #336]	@ (8004e44 <HAL_GPIO_Init+0x33c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01f      	beq.n	8004d36 <HAL_GPIO_Init+0x22e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a53      	ldr	r2, [pc, #332]	@ (8004e48 <HAL_GPIO_Init+0x340>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d019      	beq.n	8004d32 <HAL_GPIO_Init+0x22a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a52      	ldr	r2, [pc, #328]	@ (8004e4c <HAL_GPIO_Init+0x344>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_GPIO_Init+0x226>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a51      	ldr	r2, [pc, #324]	@ (8004e50 <HAL_GPIO_Init+0x348>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00d      	beq.n	8004d2a <HAL_GPIO_Init+0x222>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a50      	ldr	r2, [pc, #320]	@ (8004e54 <HAL_GPIO_Init+0x34c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <HAL_GPIO_Init+0x21e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a4f      	ldr	r2, [pc, #316]	@ (8004e58 <HAL_GPIO_Init+0x350>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_GPIO_Init+0x21a>
 8004d1e:	2309      	movs	r3, #9
 8004d20:	e012      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d22:	230a      	movs	r3, #10
 8004d24:	e010      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d26:	2308      	movs	r3, #8
 8004d28:	e00e      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d2a:	2307      	movs	r3, #7
 8004d2c:	e00c      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d2e:	2306      	movs	r3, #6
 8004d30:	e00a      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d32:	2305      	movs	r3, #5
 8004d34:	e008      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d36:	2304      	movs	r3, #4
 8004d38:	e006      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e004      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e002      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d46:	2300      	movs	r3, #0
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	f002 0203 	and.w	r2, r2, #3
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	4093      	lsls	r3, r2
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d58:	4935      	ldr	r1, [pc, #212]	@ (8004e30 <HAL_GPIO_Init+0x328>)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	089b      	lsrs	r3, r3, #2
 8004d5e:	3302      	adds	r3, #2
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d66:	4b3d      	ldr	r3, [pc, #244]	@ (8004e5c <HAL_GPIO_Init+0x354>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d8a:	4a34      	ldr	r2, [pc, #208]	@ (8004e5c <HAL_GPIO_Init+0x354>)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d90:	4b32      	ldr	r3, [pc, #200]	@ (8004e5c <HAL_GPIO_Init+0x354>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004db4:	4a29      	ldr	r2, [pc, #164]	@ (8004e5c <HAL_GPIO_Init+0x354>)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dba:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <HAL_GPIO_Init+0x354>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dde:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <HAL_GPIO_Init+0x354>)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e5c <HAL_GPIO_Init+0x354>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e08:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <HAL_GPIO_Init+0x354>)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3301      	adds	r3, #1
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	f67f ae86 	bls.w	8004b28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	3724      	adds	r7, #36	@ 0x24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40013800 	.word	0x40013800
 8004e34:	40020000 	.word	0x40020000
 8004e38:	40020400 	.word	0x40020400
 8004e3c:	40020800 	.word	0x40020800
 8004e40:	40020c00 	.word	0x40020c00
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40021400 	.word	0x40021400
 8004e4c:	40021800 	.word	0x40021800
 8004e50:	40021c00 	.word	0x40021c00
 8004e54:	40022000 	.word	0x40022000
 8004e58:	40022400 	.word	0x40022400
 8004e5c:	40013c00 	.word	0x40013c00

08004e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
 8004e7c:	e001      	b.n	8004e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	807b      	strh	r3, [r7, #2]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ea0:	787b      	ldrb	r3, [r7, #1]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004eac:	e003      	b.n	8004eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004eae:	887b      	ldrh	r3, [r7, #2]
 8004eb0:	041a      	lsls	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	619a      	str	r2, [r3, #24]
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ece:	4b08      	ldr	r3, [pc, #32]	@ (8004ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d006      	beq.n	8004ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004eda:	4a05      	ldr	r2, [pc, #20]	@ (8004ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd fa82 	bl	80023ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40013c00 	.word	0x40013c00

08004ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e08b      	b.n	800501e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fe fa36 	bl	800338c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2224      	movs	r2, #36	@ 0x24
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d107      	bne.n	8004f6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	e006      	b.n	8004f7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d108      	bne.n	8004f96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f92:	605a      	str	r2, [r3, #4]
 8004f94:	e007      	b.n	8004fa6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005028 <HAL_I2C_Init+0x134>)
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69d9      	ldr	r1, [r3, #28]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1a      	ldr	r2, [r3, #32]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	02008000 	.word	0x02008000

0800502c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	461a      	mov	r2, r3
 8005038:	460b      	mov	r3, r1
 800503a:	817b      	strh	r3, [r7, #10]
 800503c:	4613      	mov	r3, r2
 800503e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b20      	cmp	r3, #32
 800504a:	f040 80fd 	bne.w	8005248 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_I2C_Master_Transmit+0x30>
 8005058:	2302      	movs	r3, #2
 800505a:	e0f6      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005064:	f7ff f892 	bl	800418c <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	2319      	movs	r3, #25
 8005070:	2201      	movs	r2, #1
 8005072:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f914 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0e1      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2221      	movs	r2, #33	@ 0x21
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2210      	movs	r2, #16
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	893a      	ldrh	r2, [r7, #8]
 80050a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2bff      	cmp	r3, #255	@ 0xff
 80050b6:	d906      	bls.n	80050c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	22ff      	movs	r2, #255	@ 0xff
 80050bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80050be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e007      	b.n	80050d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80050d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d024      	beq.n	8005128 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3301      	adds	r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	8979      	ldrh	r1, [r7, #10]
 800511a:	4b4e      	ldr	r3, [pc, #312]	@ (8005254 <HAL_I2C_Master_Transmit+0x228>)
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fa83 	bl	800562c <I2C_TransferConfig>
 8005126:	e066      	b.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512c:	b2da      	uxtb	r2, r3
 800512e:	8979      	ldrh	r1, [r7, #10]
 8005130:	4b48      	ldr	r3, [pc, #288]	@ (8005254 <HAL_I2C_Master_Transmit+0x228>)
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fa78 	bl	800562c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800513c:	e05b      	b.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f907 	bl	8005356 <I2C_WaitOnTXISFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e07b      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d034      	beq.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d130      	bne.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	@ 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f880 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e04d      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2bff      	cmp	r3, #255	@ 0xff
 80051b6:	d90e      	bls.n	80051d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	22ff      	movs	r2, #255	@ 0xff
 80051bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	8979      	ldrh	r1, [r7, #10]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fa2c 	bl	800562c <I2C_TransferConfig>
 80051d4:	e00f      	b.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	8979      	ldrh	r1, [r7, #10]
 80051e8:	2300      	movs	r3, #0
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fa1b 	bl	800562c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d19e      	bne.n	800513e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	6a39      	ldr	r1, [r7, #32]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f8ed 	bl	80053e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e01a      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2220      	movs	r2, #32
 800521a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <HAL_I2C_Master_Transmit+0x22c>)
 8005228:	400b      	ands	r3, r1
 800522a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	80002000 	.word	0x80002000
 8005258:	fe00e800 	.word	0xfe00e800

0800525c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b02      	cmp	r3, #2
 8005270:	d103      	bne.n	800527a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d007      	beq.n	8005298 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	619a      	str	r2, [r3, #24]
  }
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b4:	e03b      	b.n	800532e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f8d6 	bl	800546c <I2C_IsErrorOccurred>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e041      	b.n	800534e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d02d      	beq.n	800532e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fe ff5b 	bl	800418c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d122      	bne.n	800532e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	429a      	cmp	r2, r3
 8005304:	d113      	bne.n	800532e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e00f      	b.n	800534e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d0b4      	beq.n	80052b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005362:	e033      	b.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f87f 	bl	800546c <I2C_IsErrorOccurred>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e031      	b.n	80053dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d025      	beq.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fe ff04 	bl	800418c <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11a      	bne.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d013      	beq.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a8:	f043 0220 	orr.w	r2, r3, #32
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e007      	b.n	80053dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d1c4      	bne.n	8005364 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f0:	e02f      	b.n	8005452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f838 	bl	800546c <I2C_IsErrorOccurred>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e02d      	b.n	8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005406:	f7fe fec1 	bl	800418c <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	d302      	bcc.n	800541c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d11a      	bne.n	8005452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d013      	beq.n	8005452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e007      	b.n	8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b20      	cmp	r3, #32
 800545e:	d1c8      	bne.n	80053f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	@ 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	d068      	beq.n	800556a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2210      	movs	r2, #16
 800549e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054a0:	e049      	b.n	8005536 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d045      	beq.n	8005536 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fe fe6f 	bl	800418c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <I2C_IsErrorOccurred+0x54>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d13a      	bne.n	8005536 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e2:	d121      	bne.n	8005528 <I2C_IsErrorOccurred+0xbc>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ea:	d01d      	beq.n	8005528 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d01a      	beq.n	8005528 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005500:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005502:	f7fe fe43 	bl	800418c <HAL_GetTick>
 8005506:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005508:	e00e      	b.n	8005528 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800550a:	f7fe fe3f 	bl	800418c <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b19      	cmp	r3, #25
 8005516:	d907      	bls.n	8005528 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f043 0320 	orr.w	r3, r3, #32
 800551e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005526:	e006      	b.n	8005536 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b20      	cmp	r3, #32
 8005534:	d1e9      	bne.n	800550a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b20      	cmp	r3, #32
 8005542:	d003      	beq.n	800554c <I2C_IsErrorOccurred+0xe0>
 8005544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0aa      	beq.n	80054a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800554c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2220      	movs	r2, #32
 800555a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	f043 0304 	orr.w	r3, r3, #4
 8005562:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800558c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f043 0308 	orr.w	r3, r3, #8
 80055a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	f043 0302 	orr.w	r3, r3, #2
 80055c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80055d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01c      	beq.n	800561a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff fe3b 	bl	800525c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <I2C_IsErrorOccurred+0x1bc>)
 80055f2:	400b      	ands	r3, r1
 80055f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800561a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	@ 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	fe00e800 	.word	0xfe00e800

0800562c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	817b      	strh	r3, [r7, #10]
 800563a:	4613      	mov	r3, r2
 800563c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800563e:	897b      	ldrh	r3, [r7, #10]
 8005640:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005644:	7a7b      	ldrb	r3, [r7, #9]
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800564c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	4313      	orrs	r3, r2
 8005656:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800565a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	0d5b      	lsrs	r3, r3, #21
 8005666:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800566a:	4b08      	ldr	r3, [pc, #32]	@ (800568c <I2C_TransferConfig+0x60>)
 800566c:	430b      	orrs	r3, r1
 800566e:	43db      	mvns	r3, r3
 8005670:	ea02 0103 	and.w	r1, r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	03ff63ff 	.word	0x03ff63ff

08005690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d138      	bne.n	8005718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e032      	b.n	800571a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2224      	movs	r2, #36	@ 0x24
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0201 	bic.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6819      	ldr	r1, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	e000      	b.n	800571a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005718:	2302      	movs	r3, #2
  }
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b20      	cmp	r3, #32
 800573a:	d139      	bne.n	80057b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005746:	2302      	movs	r3, #2
 8005748:	e033      	b.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2224      	movs	r2, #36	@ 0x24
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af02      	add	r7, sp, #8
 80057c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e108      	b.n	80059e2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fe fae2 	bl	8003db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2203      	movs	r2, #3
 80057f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057fe:	d102      	bne.n	8005806 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f005 f848 	bl	800a8a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7c1a      	ldrb	r2, [r3, #16]
 8005818:	f88d 2000 	strb.w	r2, [sp]
 800581c:	3304      	adds	r3, #4
 800581e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005820:	f004 ffe4 	bl	800a7ec <USB_CoreInit>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0d5      	b.n	80059e2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f005 f840 	bl	800a8c2 <USB_SetCurrentMode>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0c6      	b.n	80059e2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]
 8005858:	e04a      	b.n	80058f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800585a:	7bfa      	ldrb	r2, [r7, #15]
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	3315      	adds	r3, #21
 800586a:	2201      	movs	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800586e:	7bfa      	ldrb	r2, [r7, #15]
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	440b      	add	r3, r1
 800587c:	3314      	adds	r3, #20
 800587e:	7bfa      	ldrb	r2, [r7, #15]
 8005880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005882:	7bfa      	ldrb	r2, [r7, #15]
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	b298      	uxth	r0, r3
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	332e      	adds	r3, #46	@ 0x2e
 8005896:	4602      	mov	r2, r0
 8005898:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800589a:	7bfa      	ldrb	r2, [r7, #15]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	3318      	adds	r3, #24
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058ae:	7bfa      	ldrb	r2, [r7, #15]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	331c      	adds	r3, #28
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058c2:	7bfa      	ldrb	r2, [r7, #15]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	3320      	adds	r3, #32
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058d6:	7bfa      	ldrb	r2, [r7, #15]
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	3324      	adds	r3, #36	@ 0x24
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	3301      	adds	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	791b      	ldrb	r3, [r3, #4]
 80058f4:	7bfa      	ldrb	r2, [r7, #15]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d3af      	bcc.n	800585a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
 80058fe:	e044      	b.n	800598a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005900:	7bfa      	ldrb	r2, [r7, #15]
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005916:	7bfa      	ldrb	r2, [r7, #15]
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005928:	7bfa      	ldrb	r2, [r7, #15]
 800592a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800592c:	7bfa      	ldrb	r2, [r7, #15]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005958:	7bfa      	ldrb	r2, [r7, #15]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	4613      	mov	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800596e:	7bfa      	ldrb	r2, [r7, #15]
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	3301      	adds	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	791b      	ldrb	r3, [r3, #4]
 800598e:	7bfa      	ldrb	r2, [r7, #15]
 8005990:	429a      	cmp	r2, r3
 8005992:	d3b5      	bcc.n	8005900 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7c1a      	ldrb	r2, [r3, #16]
 800599c:	f88d 2000 	strb.w	r2, [sp]
 80059a0:	3304      	adds	r3, #4
 80059a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059a4:	f004 ffda 	bl	800a95c <USB_DevInit>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e013      	b.n	80059e2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	7b1b      	ldrb	r3, [r3, #12]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d102      	bne.n	80059d6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f80b 	bl	80059ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f005 f995 	bl	800ad0a <USB_DevDisconnect>

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a1a:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <HAL_PCDEx_ActivateLPM+0x44>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	10000003 	.word	0x10000003

08005a34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a38:	4b05      	ldr	r3, [pc, #20]	@ (8005a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a04      	ldr	r2, [pc, #16]	@ (8005a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40007000 	.word	0x40007000

08005a54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a5e:	4b23      	ldr	r3, [pc, #140]	@ (8005aec <HAL_PWREx_EnableOverDrive+0x98>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	4a22      	ldr	r2, [pc, #136]	@ (8005aec <HAL_PWREx_EnableOverDrive+0x98>)
 8005a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a6a:	4b20      	ldr	r3, [pc, #128]	@ (8005aec <HAL_PWREx_EnableOverDrive+0x98>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a76:	4b1e      	ldr	r3, [pc, #120]	@ (8005af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a82:	f7fe fb83 	bl	800418c <HAL_GetTick>
 8005a86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a88:	e009      	b.n	8005a9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a8a:	f7fe fb7f 	bl	800418c <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a98:	d901      	bls.n	8005a9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e022      	b.n	8005ae4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a9e:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aaa:	d1ee      	bne.n	8005a8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005aac:	4b10      	ldr	r3, [pc, #64]	@ (8005af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8005af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ab6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ab8:	f7fe fb68 	bl	800418c <HAL_GetTick>
 8005abc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005abe:	e009      	b.n	8005ad4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ac0:	f7fe fb64 	bl	800418c <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ace:	d901      	bls.n	8005ad4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e007      	b.n	8005ae4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005adc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ae0:	d1ee      	bne.n	8005ac0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40023800 	.word	0x40023800
 8005af0:	40007000 	.word	0x40007000

08005af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005afc:	2300      	movs	r3, #0
 8005afe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e291      	b.n	800602e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8087 	beq.w	8005c26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b18:	4b96      	ldr	r3, [pc, #600]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 030c 	and.w	r3, r3, #12
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d00c      	beq.n	8005b3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b24:	4b93      	ldr	r3, [pc, #588]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 030c 	and.w	r3, r3, #12
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d112      	bne.n	8005b56 <HAL_RCC_OscConfig+0x62>
 8005b30:	4b90      	ldr	r3, [pc, #576]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b3c:	d10b      	bne.n	8005b56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d06c      	beq.n	8005c24 <HAL_RCC_OscConfig+0x130>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d168      	bne.n	8005c24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e26b      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b5e:	d106      	bne.n	8005b6e <HAL_RCC_OscConfig+0x7a>
 8005b60:	4b84      	ldr	r3, [pc, #528]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a83      	ldr	r2, [pc, #524]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e02e      	b.n	8005bcc <HAL_RCC_OscConfig+0xd8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCC_OscConfig+0x9c>
 8005b76:	4b7f      	ldr	r3, [pc, #508]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	4b7c      	ldr	r3, [pc, #496]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a7b      	ldr	r2, [pc, #492]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e01d      	b.n	8005bcc <HAL_RCC_OscConfig+0xd8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b98:	d10c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0xc0>
 8005b9a:	4b76      	ldr	r3, [pc, #472]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a75      	ldr	r2, [pc, #468]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	4b73      	ldr	r3, [pc, #460]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a72      	ldr	r2, [pc, #456]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCC_OscConfig+0xd8>
 8005bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a6e      	ldr	r2, [pc, #440]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a6b      	ldr	r2, [pc, #428]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fe fada 	bl	800418c <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bdc:	f7fe fad6 	bl	800418c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	@ 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e21f      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bee:	4b61      	ldr	r3, [pc, #388]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0xe8>
 8005bfa:	e014      	b.n	8005c26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fe fac6 	bl	800418c <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c04:	f7fe fac2 	bl	800418c <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	@ 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e20b      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c16:	4b57      	ldr	r3, [pc, #348]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0x110>
 8005c22:	e000      	b.n	8005c26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d069      	beq.n	8005d06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c32:	4b50      	ldr	r3, [pc, #320]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d11c      	bne.n	8005c84 <HAL_RCC_OscConfig+0x190>
 8005c4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d116      	bne.n	8005c84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c56:	4b47      	ldr	r3, [pc, #284]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_RCC_OscConfig+0x17a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d001      	beq.n	8005c6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e1df      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6e:	4b41      	ldr	r3, [pc, #260]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	493d      	ldr	r1, [pc, #244]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c82:	e040      	b.n	8005d06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d023      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c8c:	4b39      	ldr	r3, [pc, #228]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a38      	ldr	r2, [pc, #224]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fe fa78 	bl	800418c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca0:	f7fe fa74 	bl	800418c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e1bd      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb2:	4b30      	ldr	r3, [pc, #192]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4929      	ldr	r1, [pc, #164]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	600b      	str	r3, [r1, #0]
 8005cd2:	e018      	b.n	8005d06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd4:	4b27      	ldr	r3, [pc, #156]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a26      	ldr	r2, [pc, #152]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fe fa54 	bl	800418c <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce8:	f7fe fa50 	bl	800418c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e199      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d038      	beq.n	8005d84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d019      	beq.n	8005d4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1a:	4b16      	ldr	r3, [pc, #88]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1e:	4a15      	ldr	r2, [pc, #84]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d26:	f7fe fa31 	bl	800418c <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2e:	f7fe fa2d 	bl	800418c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e176      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d40:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x23a>
 8005d4c:	e01a      	b.n	8005d84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d4e:	4b09      	ldr	r3, [pc, #36]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d52:	4a08      	ldr	r2, [pc, #32]	@ (8005d74 <HAL_RCC_OscConfig+0x280>)
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5a:	f7fe fa17 	bl	800418c <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d60:	e00a      	b.n	8005d78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d62:	f7fe fa13 	bl	800418c <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d903      	bls.n	8005d78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e15c      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
 8005d74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d78:	4b91      	ldr	r3, [pc, #580]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1ee      	bne.n	8005d62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80a4 	beq.w	8005eda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d92:	4b8b      	ldr	r3, [pc, #556]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9e:	4b88      	ldr	r3, [pc, #544]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	4a87      	ldr	r2, [pc, #540]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005daa:	4b85      	ldr	r3, [pc, #532]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db6:	2301      	movs	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dba:	4b82      	ldr	r3, [pc, #520]	@ (8005fc4 <HAL_RCC_OscConfig+0x4d0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d118      	bne.n	8005df8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc4 <HAL_RCC_OscConfig+0x4d0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a7e      	ldr	r2, [pc, #504]	@ (8005fc4 <HAL_RCC_OscConfig+0x4d0>)
 8005dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd2:	f7fe f9db 	bl	800418c <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dda:	f7fe f9d7 	bl	800418c <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b64      	cmp	r3, #100	@ 0x64
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e120      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dec:	4b75      	ldr	r3, [pc, #468]	@ (8005fc4 <HAL_RCC_OscConfig+0x4d0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d106      	bne.n	8005e0e <HAL_RCC_OscConfig+0x31a>
 8005e00:	4b6f      	ldr	r3, [pc, #444]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e04:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0c:	e02d      	b.n	8005e6a <HAL_RCC_OscConfig+0x376>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x33c>
 8005e16:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	4a69      	ldr	r2, [pc, #420]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e22:	4b67      	ldr	r3, [pc, #412]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e26:	4a66      	ldr	r2, [pc, #408]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e28:	f023 0304 	bic.w	r3, r3, #4
 8005e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e2e:	e01c      	b.n	8005e6a <HAL_RCC_OscConfig+0x376>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d10c      	bne.n	8005e52 <HAL_RCC_OscConfig+0x35e>
 8005e38:	4b61      	ldr	r3, [pc, #388]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3c:	4a60      	ldr	r2, [pc, #384]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e3e:	f043 0304 	orr.w	r3, r3, #4
 8005e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e44:	4b5e      	ldr	r3, [pc, #376]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e48:	4a5d      	ldr	r2, [pc, #372]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e50:	e00b      	b.n	8005e6a <HAL_RCC_OscConfig+0x376>
 8005e52:	4b5b      	ldr	r3, [pc, #364]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e56:	4a5a      	ldr	r2, [pc, #360]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e58:	f023 0301 	bic.w	r3, r3, #1
 8005e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e5e:	4b58      	ldr	r3, [pc, #352]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e62:	4a57      	ldr	r2, [pc, #348]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e64:	f023 0304 	bic.w	r3, r3, #4
 8005e68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d015      	beq.n	8005e9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e72:	f7fe f98b 	bl	800418c <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e78:	e00a      	b.n	8005e90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7a:	f7fe f987 	bl	800418c <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e0ce      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e90:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0ee      	beq.n	8005e7a <HAL_RCC_OscConfig+0x386>
 8005e9c:	e014      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9e:	f7fe f975 	bl	800418c <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea4:	e00a      	b.n	8005ebc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea6:	f7fe f971 	bl	800418c <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e0b8      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ebc:	4b40      	ldr	r3, [pc, #256]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1ee      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d105      	bne.n	8005eda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ece:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ed8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80a4 	beq.w	800602c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ee4:	4b36      	ldr	r3, [pc, #216]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d06b      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d149      	bne.n	8005f8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef8:	4b31      	ldr	r3, [pc, #196]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a30      	ldr	r2, [pc, #192]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fe f942 	bl	800418c <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0c:	f7fe f93e 	bl	800418c <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e087      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f1e:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69da      	ldr	r2, [r3, #28]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	019b      	lsls	r3, r3, #6
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	3b01      	subs	r3, #1
 8005f44:	041b      	lsls	r3, r3, #16
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f58:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f64:	f7fe f912 	bl	800418c <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6c:	f7fe f90e 	bl	800418c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e057      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7e:	4b10      	ldr	r3, [pc, #64]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0x478>
 8005f8a:	e04f      	b.n	800602c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fe f8f8 	bl	800418c <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa0:	f7fe f8f4 	bl	800418c <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e03d      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb2:	4b03      	ldr	r3, [pc, #12]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x4ac>
 8005fbe:	e035      	b.n	800602c <HAL_RCC_OscConfig+0x538>
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006038 <HAL_RCC_OscConfig+0x544>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d028      	beq.n	8006028 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d121      	bne.n	8006028 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d11a      	bne.n	8006028 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ffe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006000:	4293      	cmp	r3, r2
 8006002:	d111      	bne.n	8006028 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	3b01      	subs	r3, #1
 8006012:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d107      	bne.n	8006028 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006022:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40023800 	.word	0x40023800

0800603c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0d0      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006054:	4b6a      	ldr	r3, [pc, #424]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d910      	bls.n	8006084 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006062:	4b67      	ldr	r3, [pc, #412]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f023 020f 	bic.w	r2, r3, #15
 800606a:	4965      	ldr	r1, [pc, #404]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	4313      	orrs	r3, r2
 8006070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006072:	4b63      	ldr	r3, [pc, #396]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d001      	beq.n	8006084 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0b8      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d020      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800609c:	4b59      	ldr	r3, [pc, #356]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4a58      	ldr	r2, [pc, #352]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b4:	4b53      	ldr	r3, [pc, #332]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	4a52      	ldr	r2, [pc, #328]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c0:	4b50      	ldr	r3, [pc, #320]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	494d      	ldr	r1, [pc, #308]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d040      	beq.n	8006160 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d107      	bne.n	80060f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e6:	4b47      	ldr	r3, [pc, #284]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d115      	bne.n	800611e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e07f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d107      	bne.n	800610e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fe:	4b41      	ldr	r3, [pc, #260]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e073      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610e:	4b3d      	ldr	r3, [pc, #244]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e06b      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800611e:	4b39      	ldr	r3, [pc, #228]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4936      	ldr	r1, [pc, #216]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 800612c:	4313      	orrs	r3, r2
 800612e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006130:	f7fe f82c 	bl	800418c <HAL_GetTick>
 8006134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006136:	e00a      	b.n	800614e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006138:	f7fe f828 	bl	800418c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e053      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614e:	4b2d      	ldr	r3, [pc, #180]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 020c 	and.w	r2, r3, #12
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	429a      	cmp	r2, r3
 800615e:	d1eb      	bne.n	8006138 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006160:	4b27      	ldr	r3, [pc, #156]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d210      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b24      	ldr	r3, [pc, #144]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 020f 	bic.w	r2, r3, #15
 8006176:	4922      	ldr	r1, [pc, #136]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b20      	ldr	r3, [pc, #128]	@ (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e032      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800619c:	4b19      	ldr	r3, [pc, #100]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4916      	ldr	r1, [pc, #88]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061ba:	4b12      	ldr	r3, [pc, #72]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	490e      	ldr	r1, [pc, #56]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ce:	f000 f821 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80061d2:	4602      	mov	r2, r0
 80061d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	490a      	ldr	r1, [pc, #40]	@ (8006208 <HAL_RCC_ClockConfig+0x1cc>)
 80061e0:	5ccb      	ldrb	r3, [r1, r3]
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	4a09      	ldr	r2, [pc, #36]	@ (800620c <HAL_RCC_ClockConfig+0x1d0>)
 80061e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061ea:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <HAL_RCC_ClockConfig+0x1d4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd ff88 	bl	8004104 <HAL_InitTick>

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40023c00 	.word	0x40023c00
 8006204:	40023800 	.word	0x40023800
 8006208:	0800c9f0 	.word	0x0800c9f0
 800620c:	2000004c 	.word	0x2000004c
 8006210:	20000050 	.word	0x20000050

08006214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b094      	sub	sp, #80	@ 0x50
 800621a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006220:	2300      	movs	r3, #0
 8006222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006224:	2300      	movs	r3, #0
 8006226:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800622c:	4b79      	ldr	r3, [pc, #484]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 030c 	and.w	r3, r3, #12
 8006234:	2b08      	cmp	r3, #8
 8006236:	d00d      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x40>
 8006238:	2b08      	cmp	r3, #8
 800623a:	f200 80e1 	bhi.w	8006400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0x34>
 8006242:	2b04      	cmp	r3, #4
 8006244:	d003      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0x3a>
 8006246:	e0db      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006248:	4b73      	ldr	r3, [pc, #460]	@ (8006418 <HAL_RCC_GetSysClockFreq+0x204>)
 800624a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800624c:	e0db      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624e:	4b73      	ldr	r3, [pc, #460]	@ (800641c <HAL_RCC_GetSysClockFreq+0x208>)
 8006250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006252:	e0d8      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006254:	4b6f      	ldr	r3, [pc, #444]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800625c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800625e:	4b6d      	ldr	r3, [pc, #436]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d063      	beq.n	8006332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626a:	4b6a      	ldr	r3, [pc, #424]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	099b      	lsrs	r3, r3, #6
 8006270:	2200      	movs	r2, #0
 8006272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627c:	633b      	str	r3, [r7, #48]	@ 0x30
 800627e:	2300      	movs	r3, #0
 8006280:	637b      	str	r3, [r7, #52]	@ 0x34
 8006282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006286:	4622      	mov	r2, r4
 8006288:	462b      	mov	r3, r5
 800628a:	f04f 0000 	mov.w	r0, #0
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	0159      	lsls	r1, r3, #5
 8006294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006298:	0150      	lsls	r0, r2, #5
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4621      	mov	r1, r4
 80062a0:	1a51      	subs	r1, r2, r1
 80062a2:	6139      	str	r1, [r7, #16]
 80062a4:	4629      	mov	r1, r5
 80062a6:	eb63 0301 	sbc.w	r3, r3, r1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062b8:	4659      	mov	r1, fp
 80062ba:	018b      	lsls	r3, r1, #6
 80062bc:	4651      	mov	r1, sl
 80062be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062c2:	4651      	mov	r1, sl
 80062c4:	018a      	lsls	r2, r1, #6
 80062c6:	4651      	mov	r1, sl
 80062c8:	ebb2 0801 	subs.w	r8, r2, r1
 80062cc:	4659      	mov	r1, fp
 80062ce:	eb63 0901 	sbc.w	r9, r3, r1
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062e6:	4690      	mov	r8, r2
 80062e8:	4699      	mov	r9, r3
 80062ea:	4623      	mov	r3, r4
 80062ec:	eb18 0303 	adds.w	r3, r8, r3
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	462b      	mov	r3, r5
 80062f4:	eb49 0303 	adc.w	r3, r9, r3
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006306:	4629      	mov	r1, r5
 8006308:	024b      	lsls	r3, r1, #9
 800630a:	4621      	mov	r1, r4
 800630c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006310:	4621      	mov	r1, r4
 8006312:	024a      	lsls	r2, r1, #9
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800631a:	2200      	movs	r2, #0
 800631c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800631e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006324:	f7f9 ffcc 	bl	80002c0 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4613      	mov	r3, r2
 800632e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006330:	e058      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006332:	4b38      	ldr	r3, [pc, #224]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	099b      	lsrs	r3, r3, #6
 8006338:	2200      	movs	r2, #0
 800633a:	4618      	mov	r0, r3
 800633c:	4611      	mov	r1, r2
 800633e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	2300      	movs	r3, #0
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
 8006348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	f04f 0000 	mov.w	r0, #0
 8006354:	f04f 0100 	mov.w	r1, #0
 8006358:	0159      	lsls	r1, r3, #5
 800635a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800635e:	0150      	lsls	r0, r2, #5
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4641      	mov	r1, r8
 8006366:	ebb2 0a01 	subs.w	sl, r2, r1
 800636a:	4649      	mov	r1, r9
 800636c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800637c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006384:	ebb2 040a 	subs.w	r4, r2, sl
 8006388:	eb63 050b 	sbc.w	r5, r3, fp
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	00eb      	lsls	r3, r5, #3
 8006396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800639a:	00e2      	lsls	r2, r4, #3
 800639c:	4614      	mov	r4, r2
 800639e:	461d      	mov	r5, r3
 80063a0:	4643      	mov	r3, r8
 80063a2:	18e3      	adds	r3, r4, r3
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	464b      	mov	r3, r9
 80063a8:	eb45 0303 	adc.w	r3, r5, r3
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063ba:	4629      	mov	r1, r5
 80063bc:	028b      	lsls	r3, r1, #10
 80063be:	4621      	mov	r1, r4
 80063c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063c4:	4621      	mov	r1, r4
 80063c6:	028a      	lsls	r2, r1, #10
 80063c8:	4610      	mov	r0, r2
 80063ca:	4619      	mov	r1, r3
 80063cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ce:	2200      	movs	r2, #0
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	61fa      	str	r2, [r7, #28]
 80063d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063d8:	f7f9 ff72 	bl	80002c0 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4613      	mov	r3, r2
 80063e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80063e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	0c1b      	lsrs	r3, r3, #16
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	3301      	adds	r3, #1
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80063f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063fe:	e002      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006400:	4b05      	ldr	r3, [pc, #20]	@ (8006418 <HAL_RCC_GetSysClockFreq+0x204>)
 8006402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006408:	4618      	mov	r0, r3
 800640a:	3750      	adds	r7, #80	@ 0x50
 800640c:	46bd      	mov	sp, r7
 800640e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800
 8006418:	00f42400 	.word	0x00f42400
 800641c:	007a1200 	.word	0x007a1200

08006420 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006424:	4b03      	ldr	r3, [pc, #12]	@ (8006434 <HAL_RCC_GetHCLKFreq+0x14>)
 8006426:	681b      	ldr	r3, [r3, #0]
}
 8006428:	4618      	mov	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	2000004c 	.word	0x2000004c

08006438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800643c:	f7ff fff0 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006440:	4602      	mov	r2, r0
 8006442:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	0a9b      	lsrs	r3, r3, #10
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	4903      	ldr	r1, [pc, #12]	@ (800645c <HAL_RCC_GetPCLK1Freq+0x24>)
 800644e:	5ccb      	ldrb	r3, [r1, r3]
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40023800 	.word	0x40023800
 800645c:	0800ca00 	.word	0x0800ca00

08006460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006464:	f7ff ffdc 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006468:	4602      	mov	r2, r0
 800646a:	4b05      	ldr	r3, [pc, #20]	@ (8006480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	0b5b      	lsrs	r3, r3, #13
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	4903      	ldr	r1, [pc, #12]	@ (8006484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006476:	5ccb      	ldrb	r3, [r1, r3]
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800647c:	4618      	mov	r0, r3
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40023800 	.word	0x40023800
 8006484:	0800ca00 	.word	0x0800ca00

08006488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d012      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064b0:	4b69      	ldr	r3, [pc, #420]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4a68      	ldr	r2, [pc, #416]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80064ba:	6093      	str	r3, [r2, #8]
 80064bc:	4b66      	ldr	r3, [pc, #408]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c4:	4964      	ldr	r1, [pc, #400]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80064d2:	2301      	movs	r3, #1
 80064d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d017      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064e2:	4b5d      	ldr	r3, [pc, #372]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f0:	4959      	ldr	r1, [pc, #356]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006500:	d101      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006502:	2301      	movs	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800650e:	2301      	movs	r3, #1
 8006510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d017      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800651e:	4b4e      	ldr	r3, [pc, #312]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006524:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	494a      	ldr	r1, [pc, #296]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800653c:	d101      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800653e:	2301      	movs	r3, #1
 8006540:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800654a:	2301      	movs	r3, #1
 800654c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800655a:	2301      	movs	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 808b 	beq.w	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800656c:	4b3a      	ldr	r3, [pc, #232]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006570:	4a39      	ldr	r2, [pc, #228]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006576:	6413      	str	r3, [r2, #64]	@ 0x40
 8006578:	4b37      	ldr	r3, [pc, #220]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006584:	4b35      	ldr	r3, [pc, #212]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a34      	ldr	r2, [pc, #208]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800658a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800658e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006590:	f7fd fdfc 	bl	800418c <HAL_GetTick>
 8006594:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006598:	f7fd fdf8 	bl	800418c <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	@ 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e357      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065aa:	4b2c      	ldr	r3, [pc, #176]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065b6:	4b28      	ldr	r3, [pc, #160]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d035      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d02e      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065d4:	4b20      	ldr	r3, [pc, #128]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065de:	4b1e      	ldr	r3, [pc, #120]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80065f6:	4a18      	ldr	r2, [pc, #96]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065fc:	4b16      	ldr	r3, [pc, #88]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d114      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fd fdc0 	bl	800418c <HAL_GetTick>
 800660c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660e:	e00a      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006610:	f7fd fdbc 	bl	800418c <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800661e:	4293      	cmp	r3, r2
 8006620:	d901      	bls.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e319      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006626:	4b0c      	ldr	r3, [pc, #48]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0ee      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800663a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800663e:	d111      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006640:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800664c:	4b04      	ldr	r3, [pc, #16]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800664e:	400b      	ands	r3, r1
 8006650:	4901      	ldr	r1, [pc, #4]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
 8006656:	e00b      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006658:	40023800 	.word	0x40023800
 800665c:	40007000 	.word	0x40007000
 8006660:	0ffffcff 	.word	0x0ffffcff
 8006664:	4baa      	ldr	r3, [pc, #680]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	4aa9      	ldr	r2, [pc, #676]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800666a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800666e:	6093      	str	r3, [r2, #8]
 8006670:	4ba7      	ldr	r3, [pc, #668]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006672:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800667c:	49a4      	ldr	r1, [pc, #656]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800667e:	4313      	orrs	r3, r2
 8006680:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0310 	and.w	r3, r3, #16
 800668a:	2b00      	cmp	r3, #0
 800668c:	d010      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800668e:	4ba0      	ldr	r3, [pc, #640]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006694:	4a9e      	ldr	r2, [pc, #632]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800669a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800669e:	4b9c      	ldr	r3, [pc, #624]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	4999      	ldr	r1, [pc, #612]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066bc:	4b94      	ldr	r3, [pc, #592]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066ca:	4991      	ldr	r1, [pc, #580]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066de:	4b8c      	ldr	r3, [pc, #560]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066ec:	4988      	ldr	r1, [pc, #544]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006700:	4b83      	ldr	r3, [pc, #524]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800670e:	4980      	ldr	r1, [pc, #512]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006722:	4b7b      	ldr	r3, [pc, #492]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006728:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006730:	4977      	ldr	r1, [pc, #476]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006744:	4b72      	ldr	r3, [pc, #456]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800674a:	f023 0203 	bic.w	r2, r3, #3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006752:	496f      	ldr	r1, [pc, #444]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006766:	4b6a      	ldr	r3, [pc, #424]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676c:	f023 020c 	bic.w	r2, r3, #12
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006774:	4966      	ldr	r1, [pc, #408]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006788:	4b61      	ldr	r3, [pc, #388]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006796:	495e      	ldr	r1, [pc, #376]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006798:	4313      	orrs	r3, r2
 800679a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067aa:	4b59      	ldr	r3, [pc, #356]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b8:	4955      	ldr	r1, [pc, #340]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067cc:	4b50      	ldr	r3, [pc, #320]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067da:	494d      	ldr	r1, [pc, #308]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80067ee:	4b48      	ldr	r3, [pc, #288]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fc:	4944      	ldr	r1, [pc, #272]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006810:	4b3f      	ldr	r3, [pc, #252]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681e:	493c      	ldr	r1, [pc, #240]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006832:	4b37      	ldr	r3, [pc, #220]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006838:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006840:	4933      	ldr	r1, [pc, #204]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006854:	4b2e      	ldr	r3, [pc, #184]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006862:	492b      	ldr	r1, [pc, #172]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006864:	4313      	orrs	r3, r2
 8006866:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d011      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006876:	4b26      	ldr	r3, [pc, #152]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006884:	4922      	ldr	r1, [pc, #136]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006894:	d101      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80068a6:	2301      	movs	r3, #1
 80068a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068b6:	4b16      	ldr	r3, [pc, #88]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c4:	4912      	ldr	r1, [pc, #72]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e8:	4909      	ldr	r1, [pc, #36]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d006      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 80d9 	beq.w	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006904:	4b02      	ldr	r3, [pc, #8]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a01      	ldr	r2, [pc, #4]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800690a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800690e:	e001      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006910:	40023800 	.word	0x40023800
 8006914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006916:	f7fd fc39 	bl	800418c <HAL_GetTick>
 800691a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800691c:	e008      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800691e:	f7fd fc35 	bl	800418c <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b64      	cmp	r3, #100	@ 0x64
 800692a:	d901      	bls.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e194      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006930:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f0      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d021      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11d      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006950:	4b64      	ldr	r3, [pc, #400]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800695e:	4b61      	ldr	r3, [pc, #388]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006964:	0e1b      	lsrs	r3, r3, #24
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	019a      	lsls	r2, r3, #6
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	431a      	orrs	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	061b      	lsls	r3, r3, #24
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	071b      	lsls	r3, r3, #28
 8006984:	4957      	ldr	r1, [pc, #348]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069a0:	d00a      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d02e      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069b6:	d129      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069b8:	4b4a      	ldr	r3, [pc, #296]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069be:	0c1b      	lsrs	r3, r3, #16
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069c6:	4b47      	ldr	r3, [pc, #284]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069cc:	0f1b      	lsrs	r3, r3, #28
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	019a      	lsls	r2, r3, #6
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	061b      	lsls	r3, r3, #24
 80069e6:	431a      	orrs	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	071b      	lsls	r3, r3, #28
 80069ec:	493d      	ldr	r1, [pc, #244]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069f4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069fa:	f023 021f 	bic.w	r2, r3, #31
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	3b01      	subs	r3, #1
 8006a04:	4937      	ldr	r1, [pc, #220]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01d      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a18:	4b32      	ldr	r3, [pc, #200]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a1e:	0e1b      	lsrs	r3, r3, #24
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a26:	4b2f      	ldr	r3, [pc, #188]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a2c:	0f1b      	lsrs	r3, r3, #28
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	019a      	lsls	r2, r3, #6
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	431a      	orrs	r2, r3
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	431a      	orrs	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	071b      	lsls	r3, r3, #28
 8006a4c:	4925      	ldr	r1, [pc, #148]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d011      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	019a      	lsls	r2, r3, #6
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	061b      	lsls	r3, r3, #24
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	071b      	lsls	r3, r3, #28
 8006a7c:	4919      	ldr	r1, [pc, #100]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a84:	4b17      	ldr	r3, [pc, #92]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a16      	ldr	r2, [pc, #88]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a90:	f7fd fb7c 	bl	800418c <HAL_GetTick>
 8006a94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a98:	f7fd fb78 	bl	800418c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	@ 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e0d7      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	f040 80cd 	bne.w	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006abe:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a08      	ldr	r2, [pc, #32]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aca:	f7fd fb5f 	bl	800418c <HAL_GetTick>
 8006ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ad0:	e00a      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ad2:	f7fd fb5b 	bl	800418c <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b64      	cmp	r3, #100	@ 0x64
 8006ade:	d903      	bls.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e0ba      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006ae4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006af4:	d0ed      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d02e      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d12a      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b1e:	4b51      	ldr	r3, [pc, #324]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b24:	0c1b      	lsrs	r3, r3, #16
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b32:	0f1b      	lsrs	r3, r3, #28
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	019a      	lsls	r2, r3, #6
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	061b      	lsls	r3, r3, #24
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	071b      	lsls	r3, r3, #28
 8006b52:	4944      	ldr	r1, [pc, #272]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b5a:	4b42      	ldr	r3, [pc, #264]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b60:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	493d      	ldr	r1, [pc, #244]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d022      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b88:	d11d      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b8a:	4b36      	ldr	r3, [pc, #216]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b90:	0e1b      	lsrs	r3, r3, #24
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b98:	4b32      	ldr	r3, [pc, #200]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9e:	0f1b      	lsrs	r3, r3, #28
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	019a      	lsls	r2, r3, #6
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	061b      	lsls	r3, r3, #24
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	071b      	lsls	r3, r3, #28
 8006bbe:	4929      	ldr	r1, [pc, #164]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d028      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bd2:	4b24      	ldr	r3, [pc, #144]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd8:	0e1b      	lsrs	r3, r3, #24
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006be0:	4b20      	ldr	r3, [pc, #128]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	019a      	lsls	r2, r3, #6
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	041b      	lsls	r3, r3, #16
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	061b      	lsls	r3, r3, #24
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	071b      	lsls	r3, r3, #28
 8006c06:	4917      	ldr	r1, [pc, #92]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c0e:	4b15      	ldr	r3, [pc, #84]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	4911      	ldr	r1, [pc, #68]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c24:	4b0f      	ldr	r3, [pc, #60]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a0e      	ldr	r2, [pc, #56]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c30:	f7fd faac 	bl	800418c <HAL_GetTick>
 8006c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c38:	f7fd faa8 	bl	800418c <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b64      	cmp	r3, #100	@ 0x64
 8006c44:	d901      	bls.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e007      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c4a:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c56:	d1ef      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40023800 	.word	0x40023800

08006c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e09d      	b.n	8006db6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d108      	bne.n	8006c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c8a:	d009      	beq.n	8006ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	61da      	str	r2, [r3, #28]
 8006c92:	e005      	b.n	8006ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fc fbc6 	bl	800344c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ce0:	d902      	bls.n	8006ce8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	e002      	b.n	8006cee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006cf6:	d007      	beq.n	8006d08 <HAL_SPI_Init+0xa0>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d00:	d002      	beq.n	8006d08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4a:	ea42 0103 	orr.w	r1, r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	0c1b      	lsrs	r3, r3, #16
 8006d64:	f003 0204 	and.w	r2, r3, #4
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d84:	ea42 0103 	orr.w	r1, r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b088      	sub	sp, #32
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_SPI_Transmit+0x22>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e15f      	b.n	80070a0 <HAL_SPI_Transmit+0x2e2>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006de8:	f7fd f9d0 	bl	800418c <HAL_GetTick>
 8006dec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d002      	beq.n	8006e04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e02:	e148      	b.n	8007096 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <HAL_SPI_Transmit+0x52>
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e14:	e13f      	b.n	8007096 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2203      	movs	r2, #3
 8006e1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	88fa      	ldrh	r2, [r7, #6]
 8006e2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e60:	d10f      	bne.n	8006e82 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8c:	2b40      	cmp	r3, #64	@ 0x40
 8006e8e:	d007      	beq.n	8006ea0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ea8:	d94f      	bls.n	8006f4a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_SPI_Transmit+0xfa>
 8006eb2:	8afb      	ldrh	r3, [r7, #22]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d142      	bne.n	8006f3e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebc:	881a      	ldrh	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	1c9a      	adds	r2, r3, #2
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006edc:	e02f      	b.n	8006f3e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d112      	bne.n	8006f12 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef0:	881a      	ldrh	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	1c9a      	adds	r2, r3, #2
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f10:	e015      	b.n	8006f3e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f12:	f7fd f93b 	bl	800418c <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d803      	bhi.n	8006f2a <HAL_SPI_Transmit+0x16c>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d102      	bne.n	8006f30 <HAL_SPI_Transmit+0x172>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f3c:	e0ab      	b.n	8007096 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1ca      	bne.n	8006ede <HAL_SPI_Transmit+0x120>
 8006f48:	e080      	b.n	800704c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <HAL_SPI_Transmit+0x19a>
 8006f52:	8afb      	ldrh	r3, [r7, #22]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d174      	bne.n	8007042 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d912      	bls.n	8006f88 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f66:	881a      	ldrh	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	1c9a      	adds	r2, r3, #2
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b02      	subs	r3, #2
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f86:	e05c      	b.n	8007042 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006fae:	e048      	b.n	8007042 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d12b      	bne.n	8007016 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d912      	bls.n	8006fee <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fcc:	881a      	ldrh	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b02      	subs	r3, #2
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fec:	e029      	b.n	8007042 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007014:	e015      	b.n	8007042 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007016:	f7fd f8b9 	bl	800418c <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d803      	bhi.n	800702e <HAL_SPI_Transmit+0x270>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d102      	bne.n	8007034 <HAL_SPI_Transmit+0x276>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007040:	e029      	b.n	8007096 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1b1      	bne.n	8006fb0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fb69 	bl	8007728 <SPI_EndRxTxTransaction>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800706a:	2300      	movs	r3, #0
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e003      	b.n	8007096 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800709e:	7ffb      	ldrb	r3, [r7, #31]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3720      	adds	r7, #32
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	@ 0x28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070b6:	2301      	movs	r3, #1
 80070b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x26>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e20a      	b.n	80074e4 <HAL_SPI_TransmitReceive+0x43c>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070d6:	f7fd f859 	bl	800418c <HAL_GetTick>
 80070da:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070e2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80070ea:	887b      	ldrh	r3, [r7, #2]
 80070ec:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80070ee:	887b      	ldrh	r3, [r7, #2]
 80070f0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070f2:	7efb      	ldrb	r3, [r7, #27]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d00e      	beq.n	8007116 <HAL_SPI_TransmitReceive+0x6e>
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070fe:	d106      	bne.n	800710e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <HAL_SPI_TransmitReceive+0x66>
 8007108:	7efb      	ldrb	r3, [r7, #27]
 800710a:	2b04      	cmp	r3, #4
 800710c:	d003      	beq.n	8007116 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800710e:	2302      	movs	r3, #2
 8007110:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007114:	e1e0      	b.n	80074d8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <HAL_SPI_TransmitReceive+0x80>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_SPI_TransmitReceive+0x80>
 8007122:	887b      	ldrh	r3, [r7, #2]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800712e:	e1d3      	b.n	80074d8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b04      	cmp	r3, #4
 800713a:	d003      	beq.n	8007144 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2205      	movs	r2, #5
 8007140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	887a      	ldrh	r2, [r7, #2]
 8007154:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	887a      	ldrh	r2, [r7, #2]
 800715c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	887a      	ldrh	r2, [r7, #2]
 800716a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	887a      	ldrh	r2, [r7, #2]
 8007170:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007186:	d802      	bhi.n	800718e <HAL_SPI_TransmitReceive+0xe6>
 8007188:	8a3b      	ldrh	r3, [r7, #16]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d908      	bls.n	80071a0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	e007      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ba:	2b40      	cmp	r3, #64	@ 0x40
 80071bc:	d007      	beq.n	80071ce <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071d6:	f240 8081 	bls.w	80072dc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x140>
 80071e2:	8a7b      	ldrh	r3, [r7, #18]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d16d      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ec:	881a      	ldrh	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f8:	1c9a      	adds	r2, r3, #2
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800720c:	e05a      	b.n	80072c4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b02      	cmp	r3, #2
 800721a:	d11b      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x1ac>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d016      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x1ac>
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	2b01      	cmp	r3, #1
 800722a:	d113      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	881a      	ldrh	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723c:	1c9a      	adds	r2, r3, #2
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b01      	cmp	r3, #1
 8007260:	d11c      	bne.n	800729c <HAL_SPI_TransmitReceive+0x1f4>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007278:	b292      	uxth	r2, r2
 800727a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007280:	1c9a      	adds	r2, r3, #2
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007298:	2301      	movs	r3, #1
 800729a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800729c:	f7fc ff76 	bl	800418c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d80b      	bhi.n	80072c4 <HAL_SPI_TransmitReceive+0x21c>
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d007      	beq.n	80072c4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80072c2:	e109      	b.n	80074d8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d19f      	bne.n	800720e <HAL_SPI_TransmitReceive+0x166>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d199      	bne.n	800720e <HAL_SPI_TransmitReceive+0x166>
 80072da:	e0e3      	b.n	80074a4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <HAL_SPI_TransmitReceive+0x244>
 80072e4:	8a7b      	ldrh	r3, [r7, #18]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	f040 80cf 	bne.w	800748a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d912      	bls.n	800731c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	881a      	ldrh	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	1c9a      	adds	r2, r3, #2
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b02      	subs	r3, #2
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800731a:	e0b6      	b.n	800748a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	7812      	ldrb	r2, [r2, #0]
 8007328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007342:	e0a2      	b.n	800748a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b02      	cmp	r3, #2
 8007350:	d134      	bne.n	80073bc <HAL_SPI_TransmitReceive+0x314>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d02f      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x314>
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	2b01      	cmp	r3, #1
 8007360:	d12c      	bne.n	80073bc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d912      	bls.n	8007392 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007370:	881a      	ldrh	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737c:	1c9a      	adds	r2, r3, #2
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b02      	subs	r3, #2
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007390:	e012      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	330c      	adds	r3, #12
 800739c:	7812      	ldrb	r2, [r2, #0]
 800739e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d148      	bne.n	800745c <HAL_SPI_TransmitReceive+0x3b4>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d042      	beq.n	800745c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d923      	bls.n	800742a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ec:	b292      	uxth	r2, r2
 80073ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	1c9a      	adds	r2, r3, #2
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b02      	subs	r3, #2
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d81f      	bhi.n	8007458 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007426:	605a      	str	r2, [r3, #4]
 8007428:	e016      	b.n	8007458 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f103 020c 	add.w	r2, r3, #12
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	7812      	ldrb	r2, [r2, #0]
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007458:	2301      	movs	r3, #1
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800745c:	f7fc fe96 	bl	800418c <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007468:	429a      	cmp	r2, r3
 800746a:	d803      	bhi.n	8007474 <HAL_SPI_TransmitReceive+0x3cc>
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007472:	d102      	bne.n	800747a <HAL_SPI_TransmitReceive+0x3d2>
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	2b00      	cmp	r3, #0
 8007478:	d107      	bne.n	800748a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007488:	e026      	b.n	80074d8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748e:	b29b      	uxth	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	f47f af57 	bne.w	8007344 <HAL_SPI_TransmitReceive+0x29c>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f47f af50 	bne.w	8007344 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f93d 	bl	8007728 <SPI_EndRxTxTransaction>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ce:	e003      	b.n	80074d8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80074e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3728      	adds	r7, #40	@ 0x28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	4613      	mov	r3, r2
 80074fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074fc:	f7fc fe46 	bl	800418c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	1a9b      	subs	r3, r3, r2
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	4413      	add	r3, r2
 800750a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800750c:	f7fc fe3e 	bl	800418c <HAL_GetTick>
 8007510:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007512:	4b39      	ldr	r3, [pc, #228]	@ (80075f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	015b      	lsls	r3, r3, #5
 8007518:	0d1b      	lsrs	r3, r3, #20
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	fb02 f303 	mul.w	r3, r2, r3
 8007520:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007522:	e054      	b.n	80075ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752a:	d050      	beq.n	80075ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800752c:	f7fc fe2e 	bl	800418c <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	429a      	cmp	r2, r3
 800753a:	d902      	bls.n	8007542 <SPI_WaitFlagStateUntilTimeout+0x56>
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d13d      	bne.n	80075be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007550:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800755a:	d111      	bne.n	8007580 <SPI_WaitFlagStateUntilTimeout+0x94>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007564:	d004      	beq.n	8007570 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756e:	d107      	bne.n	8007580 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800757e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007588:	d10f      	bne.n	80075aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e017      	b.n	80075ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	bf0c      	ite	eq
 80075de:	2301      	moveq	r3, #1
 80075e0:	2300      	movne	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d19b      	bne.n	8007524 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	2000004c 	.word	0x2000004c

080075fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	@ 0x28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800760e:	f7fc fdbd 	bl	800418c <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	4413      	add	r3, r2
 800761c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800761e:	f7fc fdb5 	bl	800418c <HAL_GetTick>
 8007622:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	330c      	adds	r3, #12
 800762a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800762c:	4b3d      	ldr	r3, [pc, #244]	@ (8007724 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	00da      	lsls	r2, r3, #3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	0d1b      	lsrs	r3, r3, #20
 800763c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800763e:	fb02 f303 	mul.w	r3, r2, r3
 8007642:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007644:	e060      	b.n	8007708 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800764c:	d107      	bne.n	800765e <SPI_WaitFifoStateUntilTimeout+0x62>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800765c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d050      	beq.n	8007708 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007666:	f7fc fd91 	bl	800418c <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007672:	429a      	cmp	r2, r3
 8007674:	d902      	bls.n	800767c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d13d      	bne.n	80076f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800768a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007694:	d111      	bne.n	80076ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800769e:	d004      	beq.n	80076aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a8:	d107      	bne.n	80076ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c2:	d10f      	bne.n	80076e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e010      	b.n	800771a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	3b01      	subs	r3, #1
 8007706:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	4013      	ands	r3, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d196      	bne.n	8007646 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3728      	adds	r7, #40	@ 0x28
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	2000004c 	.word	0x2000004c

08007728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af02      	add	r7, sp, #8
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2200      	movs	r2, #0
 800773c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff ff5b 	bl	80075fc <SPI_WaitFifoStateUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007750:	f043 0220 	orr.w	r2, r3, #32
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e046      	b.n	80077ea <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800775c:	4b25      	ldr	r3, [pc, #148]	@ (80077f4 <SPI_EndRxTxTransaction+0xcc>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a25      	ldr	r2, [pc, #148]	@ (80077f8 <SPI_EndRxTxTransaction+0xd0>)
 8007762:	fba2 2303 	umull	r2, r3, r2, r3
 8007766:	0d5b      	lsrs	r3, r3, #21
 8007768:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800776c:	fb02 f303 	mul.w	r3, r2, r3
 8007770:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800777a:	d112      	bne.n	80077a2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	2180      	movs	r1, #128	@ 0x80
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff feb0 	bl	80074ec <SPI_WaitFlagStateUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d016      	beq.n	80077c0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007796:	f043 0220 	orr.w	r2, r3, #32
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e023      	b.n	80077ea <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b8:	2b80      	cmp	r3, #128	@ 0x80
 80077ba:	d0f2      	beq.n	80077a2 <SPI_EndRxTxTransaction+0x7a>
 80077bc:	e000      	b.n	80077c0 <SPI_EndRxTxTransaction+0x98>
        break;
 80077be:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff ff15 	bl	80075fc <SPI_WaitFifoStateUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077dc:	f043 0220 	orr.w	r2, r3, #32
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e000      	b.n	80077ea <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	2000004c 	.word	0x2000004c
 80077f8:	165e9f81 	.word	0x165e9f81

080077fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e049      	b.n	80078a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fb fe74 	bl	8003510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f001 f876 	bl	800892c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d001      	beq.n	80078c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e04c      	b.n	800795e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a26      	ldr	r2, [pc, #152]	@ (800796c <HAL_TIM_Base_Start+0xc0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d022      	beq.n	800791c <HAL_TIM_Base_Start+0x70>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078de:	d01d      	beq.n	800791c <HAL_TIM_Base_Start+0x70>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a22      	ldr	r2, [pc, #136]	@ (8007970 <HAL_TIM_Base_Start+0xc4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d018      	beq.n	800791c <HAL_TIM_Base_Start+0x70>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a21      	ldr	r2, [pc, #132]	@ (8007974 <HAL_TIM_Base_Start+0xc8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d013      	beq.n	800791c <HAL_TIM_Base_Start+0x70>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007978 <HAL_TIM_Base_Start+0xcc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00e      	beq.n	800791c <HAL_TIM_Base_Start+0x70>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a1e      	ldr	r2, [pc, #120]	@ (800797c <HAL_TIM_Base_Start+0xd0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d009      	beq.n	800791c <HAL_TIM_Base_Start+0x70>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a1c      	ldr	r2, [pc, #112]	@ (8007980 <HAL_TIM_Base_Start+0xd4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d004      	beq.n	800791c <HAL_TIM_Base_Start+0x70>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1b      	ldr	r2, [pc, #108]	@ (8007984 <HAL_TIM_Base_Start+0xd8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d115      	bne.n	8007948 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	4b19      	ldr	r3, [pc, #100]	@ (8007988 <HAL_TIM_Base_Start+0xdc>)
 8007924:	4013      	ands	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b06      	cmp	r3, #6
 800792c:	d015      	beq.n	800795a <HAL_TIM_Base_Start+0xae>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007934:	d011      	beq.n	800795a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0201 	orr.w	r2, r2, #1
 8007944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007946:	e008      	b.n	800795a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	e000      	b.n	800795c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40010000 	.word	0x40010000
 8007970:	40000400 	.word	0x40000400
 8007974:	40000800 	.word	0x40000800
 8007978:	40000c00 	.word	0x40000c00
 800797c:	40010400 	.word	0x40010400
 8007980:	40014000 	.word	0x40014000
 8007984:	40001800 	.word	0x40001800
 8007988:	00010007 	.word	0x00010007

0800798c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6a1a      	ldr	r2, [r3, #32]
 800799a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800799e:	4013      	ands	r3, r2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10f      	bne.n	80079c4 <HAL_TIM_Base_Stop+0x38>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a1a      	ldr	r2, [r3, #32]
 80079aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80079ae:	4013      	ands	r3, r2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d107      	bne.n	80079c4 <HAL_TIM_Base_Stop+0x38>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0201 	bic.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e049      	b.n	8007a80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fb fe55 	bl	80036b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f000 ff87 	bl	800892c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d109      	bne.n	8007aac <HAL_TIM_PWM_Start+0x24>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	bf14      	ite	ne
 8007aa4:	2301      	movne	r3, #1
 8007aa6:	2300      	moveq	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	e03c      	b.n	8007b26 <HAL_TIM_PWM_Start+0x9e>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d109      	bne.n	8007ac6 <HAL_TIM_PWM_Start+0x3e>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	bf14      	ite	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	2300      	moveq	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	e02f      	b.n	8007b26 <HAL_TIM_PWM_Start+0x9e>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d109      	bne.n	8007ae0 <HAL_TIM_PWM_Start+0x58>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	bf14      	ite	ne
 8007ad8:	2301      	movne	r3, #1
 8007ada:	2300      	moveq	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	e022      	b.n	8007b26 <HAL_TIM_PWM_Start+0x9e>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2b0c      	cmp	r3, #12
 8007ae4:	d109      	bne.n	8007afa <HAL_TIM_PWM_Start+0x72>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	bf14      	ite	ne
 8007af2:	2301      	movne	r3, #1
 8007af4:	2300      	moveq	r3, #0
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	e015      	b.n	8007b26 <HAL_TIM_PWM_Start+0x9e>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d109      	bne.n	8007b14 <HAL_TIM_PWM_Start+0x8c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	bf14      	ite	ne
 8007b0c:	2301      	movne	r3, #1
 8007b0e:	2300      	moveq	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	e008      	b.n	8007b26 <HAL_TIM_PWM_Start+0x9e>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e092      	b.n	8007c54 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d104      	bne.n	8007b3e <HAL_TIM_PWM_Start+0xb6>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b3c:	e023      	b.n	8007b86 <HAL_TIM_PWM_Start+0xfe>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d104      	bne.n	8007b4e <HAL_TIM_PWM_Start+0xc6>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b4c:	e01b      	b.n	8007b86 <HAL_TIM_PWM_Start+0xfe>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d104      	bne.n	8007b5e <HAL_TIM_PWM_Start+0xd6>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b5c:	e013      	b.n	8007b86 <HAL_TIM_PWM_Start+0xfe>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b0c      	cmp	r3, #12
 8007b62:	d104      	bne.n	8007b6e <HAL_TIM_PWM_Start+0xe6>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b6c:	e00b      	b.n	8007b86 <HAL_TIM_PWM_Start+0xfe>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d104      	bne.n	8007b7e <HAL_TIM_PWM_Start+0xf6>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b7c:	e003      	b.n	8007b86 <HAL_TIM_PWM_Start+0xfe>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 fa70 	bl	8009074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a30      	ldr	r2, [pc, #192]	@ (8007c5c <HAL_TIM_PWM_Start+0x1d4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_TIM_PWM_Start+0x120>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c60 <HAL_TIM_PWM_Start+0x1d8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d101      	bne.n	8007bac <HAL_TIM_PWM_Start+0x124>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <HAL_TIM_PWM_Start+0x126>
 8007bac:	2300      	movs	r3, #0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a25      	ldr	r2, [pc, #148]	@ (8007c5c <HAL_TIM_PWM_Start+0x1d4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d022      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x18a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd4:	d01d      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x18a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a22      	ldr	r2, [pc, #136]	@ (8007c64 <HAL_TIM_PWM_Start+0x1dc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d018      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x18a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a20      	ldr	r2, [pc, #128]	@ (8007c68 <HAL_TIM_PWM_Start+0x1e0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d013      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x18a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1f      	ldr	r2, [pc, #124]	@ (8007c6c <HAL_TIM_PWM_Start+0x1e4>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d00e      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x18a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a19      	ldr	r2, [pc, #100]	@ (8007c60 <HAL_TIM_PWM_Start+0x1d8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d009      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x18a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a1b      	ldr	r2, [pc, #108]	@ (8007c70 <HAL_TIM_PWM_Start+0x1e8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d004      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x18a>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a19      	ldr	r2, [pc, #100]	@ (8007c74 <HAL_TIM_PWM_Start+0x1ec>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d115      	bne.n	8007c3e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	4b17      	ldr	r3, [pc, #92]	@ (8007c78 <HAL_TIM_PWM_Start+0x1f0>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b06      	cmp	r3, #6
 8007c22:	d015      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x1c8>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c2a:	d011      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0201 	orr.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3c:	e008      	b.n	8007c50 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e000      	b.n	8007c52 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40010000 	.word	0x40010000
 8007c60:	40010400 	.word	0x40010400
 8007c64:	40000400 	.word	0x40000400
 8007c68:	40000800 	.word	0x40000800
 8007c6c:	40000c00 	.word	0x40000c00
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40001800 	.word	0x40001800
 8007c78:	00010007 	.word	0x00010007

08007c7c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <HAL_TIM_PWM_Start_IT+0x28>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	bf14      	ite	ne
 8007c9c:	2301      	movne	r3, #1
 8007c9e:	2300      	moveq	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e03c      	b.n	8007d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d109      	bne.n	8007cbe <HAL_TIM_PWM_Start_IT+0x42>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	bf14      	ite	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	2300      	moveq	r3, #0
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	e02f      	b.n	8007d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d109      	bne.n	8007cd8 <HAL_TIM_PWM_Start_IT+0x5c>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	bf14      	ite	ne
 8007cd0:	2301      	movne	r3, #1
 8007cd2:	2300      	moveq	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	e022      	b.n	8007d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b0c      	cmp	r3, #12
 8007cdc:	d109      	bne.n	8007cf2 <HAL_TIM_PWM_Start_IT+0x76>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	bf14      	ite	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	2300      	moveq	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	e015      	b.n	8007d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b10      	cmp	r3, #16
 8007cf6:	d109      	bne.n	8007d0c <HAL_TIM_PWM_Start_IT+0x90>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	bf14      	ite	ne
 8007d04:	2301      	movne	r3, #1
 8007d06:	2300      	moveq	r3, #0
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	e008      	b.n	8007d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	bf14      	ite	ne
 8007d18:	2301      	movne	r3, #1
 8007d1a:	2300      	moveq	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e0dd      	b.n	8007ee2 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_PWM_Start_IT+0xba>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d34:	e023      	b.n	8007d7e <HAL_TIM_PWM_Start_IT+0x102>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_PWM_Start_IT+0xca>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d44:	e01b      	b.n	8007d7e <HAL_TIM_PWM_Start_IT+0x102>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_PWM_Start_IT+0xda>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d54:	e013      	b.n	8007d7e <HAL_TIM_PWM_Start_IT+0x102>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b0c      	cmp	r3, #12
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_PWM_Start_IT+0xea>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d64:	e00b      	b.n	8007d7e <HAL_TIM_PWM_Start_IT+0x102>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIM_PWM_Start_IT+0xfa>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d74:	e003      	b.n	8007d7e <HAL_TIM_PWM_Start_IT+0x102>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	d841      	bhi.n	8007e08 <HAL_TIM_PWM_Start_IT+0x18c>
 8007d84:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <HAL_TIM_PWM_Start_IT+0x110>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007dc1 	.word	0x08007dc1
 8007d90:	08007e09 	.word	0x08007e09
 8007d94:	08007e09 	.word	0x08007e09
 8007d98:	08007e09 	.word	0x08007e09
 8007d9c:	08007dd3 	.word	0x08007dd3
 8007da0:	08007e09 	.word	0x08007e09
 8007da4:	08007e09 	.word	0x08007e09
 8007da8:	08007e09 	.word	0x08007e09
 8007dac:	08007de5 	.word	0x08007de5
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e09 	.word	0x08007e09
 8007db8:	08007e09 	.word	0x08007e09
 8007dbc:	08007df7 	.word	0x08007df7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0202 	orr.w	r2, r2, #2
 8007dce:	60da      	str	r2, [r3, #12]
      break;
 8007dd0:	e01d      	b.n	8007e0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0204 	orr.w	r2, r2, #4
 8007de0:	60da      	str	r2, [r3, #12]
      break;
 8007de2:	e014      	b.n	8007e0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f042 0208 	orr.w	r2, r2, #8
 8007df2:	60da      	str	r2, [r3, #12]
      break;
 8007df4:	e00b      	b.n	8007e0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0210 	orr.w	r2, r2, #16
 8007e04:	60da      	str	r2, [r3, #12]
      break;
 8007e06:	e002      	b.n	8007e0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d165      	bne.n	8007ee0 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 f929 	bl	8009074 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a31      	ldr	r2, [pc, #196]	@ (8007eec <HAL_TIM_PWM_Start_IT+0x270>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d004      	beq.n	8007e36 <HAL_TIM_PWM_Start_IT+0x1ba>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a2f      	ldr	r2, [pc, #188]	@ (8007ef0 <HAL_TIM_PWM_Start_IT+0x274>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_PWM_Start_IT+0x1be>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <HAL_TIM_PWM_Start_IT+0x1c0>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e4e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a25      	ldr	r2, [pc, #148]	@ (8007eec <HAL_TIM_PWM_Start_IT+0x270>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d022      	beq.n	8007ea0 <HAL_TIM_PWM_Start_IT+0x224>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e62:	d01d      	beq.n	8007ea0 <HAL_TIM_PWM_Start_IT+0x224>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a22      	ldr	r2, [pc, #136]	@ (8007ef4 <HAL_TIM_PWM_Start_IT+0x278>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d018      	beq.n	8007ea0 <HAL_TIM_PWM_Start_IT+0x224>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a21      	ldr	r2, [pc, #132]	@ (8007ef8 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d013      	beq.n	8007ea0 <HAL_TIM_PWM_Start_IT+0x224>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007efc <HAL_TIM_PWM_Start_IT+0x280>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00e      	beq.n	8007ea0 <HAL_TIM_PWM_Start_IT+0x224>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a1a      	ldr	r2, [pc, #104]	@ (8007ef0 <HAL_TIM_PWM_Start_IT+0x274>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d009      	beq.n	8007ea0 <HAL_TIM_PWM_Start_IT+0x224>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1b      	ldr	r2, [pc, #108]	@ (8007f00 <HAL_TIM_PWM_Start_IT+0x284>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d004      	beq.n	8007ea0 <HAL_TIM_PWM_Start_IT+0x224>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007f04 <HAL_TIM_PWM_Start_IT+0x288>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d115      	bne.n	8007ecc <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	4b18      	ldr	r3, [pc, #96]	@ (8007f08 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b06      	cmp	r3, #6
 8007eb0:	d015      	beq.n	8007ede <HAL_TIM_PWM_Start_IT+0x262>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eb8:	d011      	beq.n	8007ede <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f042 0201 	orr.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eca:	e008      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	e000      	b.n	8007ee0 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ede:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40010400 	.word	0x40010400
 8007ef4:	40000400 	.word	0x40000400
 8007ef8:	40000800 	.word	0x40000800
 8007efc:	40000c00 	.word	0x40000c00
 8007f00:	40014000 	.word	0x40014000
 8007f04:	40001800 	.word	0x40001800
 8007f08:	00010007 	.word	0x00010007

08007f0c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b0c      	cmp	r3, #12
 8007f1e:	d841      	bhi.n	8007fa4 <HAL_TIM_PWM_Stop_IT+0x98>
 8007f20:	a201      	add	r2, pc, #4	@ (adr r2, 8007f28 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007f5d 	.word	0x08007f5d
 8007f2c:	08007fa5 	.word	0x08007fa5
 8007f30:	08007fa5 	.word	0x08007fa5
 8007f34:	08007fa5 	.word	0x08007fa5
 8007f38:	08007f6f 	.word	0x08007f6f
 8007f3c:	08007fa5 	.word	0x08007fa5
 8007f40:	08007fa5 	.word	0x08007fa5
 8007f44:	08007fa5 	.word	0x08007fa5
 8007f48:	08007f81 	.word	0x08007f81
 8007f4c:	08007fa5 	.word	0x08007fa5
 8007f50:	08007fa5 	.word	0x08007fa5
 8007f54:	08007fa5 	.word	0x08007fa5
 8007f58:	08007f93 	.word	0x08007f93
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0202 	bic.w	r2, r2, #2
 8007f6a:	60da      	str	r2, [r3, #12]
      break;
 8007f6c:	e01d      	b.n	8007faa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0204 	bic.w	r2, r2, #4
 8007f7c:	60da      	str	r2, [r3, #12]
      break;
 8007f7e:	e014      	b.n	8007faa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0208 	bic.w	r2, r2, #8
 8007f8e:	60da      	str	r2, [r3, #12]
      break;
 8007f90:	e00b      	b.n	8007faa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0210 	bic.w	r2, r2, #16
 8007fa0:	60da      	str	r2, [r3, #12]
      break;
 8007fa2:	e002      	b.n	8007faa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d171      	bne.n	8008094 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 f85b 	bl	8009074 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a37      	ldr	r2, [pc, #220]	@ (80080a0 <HAL_TIM_PWM_Stop_IT+0x194>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <HAL_TIM_PWM_Stop_IT+0xc6>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a35      	ldr	r2, [pc, #212]	@ (80080a4 <HAL_TIM_PWM_Stop_IT+0x198>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d101      	bne.n	8007fd6 <HAL_TIM_PWM_Stop_IT+0xca>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <HAL_TIM_PWM_Stop_IT+0xcc>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d017      	beq.n	800800c <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6a1a      	ldr	r2, [r3, #32]
 8007fe2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10f      	bne.n	800800c <HAL_TIM_PWM_Stop_IT+0x100>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6a1a      	ldr	r2, [r3, #32]
 8007ff2:	f240 4344 	movw	r3, #1092	@ 0x444
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d107      	bne.n	800800c <HAL_TIM_PWM_Stop_IT+0x100>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800800a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6a1a      	ldr	r2, [r3, #32]
 8008012:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008016:	4013      	ands	r3, r2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10f      	bne.n	800803c <HAL_TIM_PWM_Stop_IT+0x130>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6a1a      	ldr	r2, [r3, #32]
 8008022:	f240 4344 	movw	r3, #1092	@ 0x444
 8008026:	4013      	ands	r3, r2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d107      	bne.n	800803c <HAL_TIM_PWM_Stop_IT+0x130>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0201 	bic.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d104      	bne.n	800804c <HAL_TIM_PWM_Stop_IT+0x140>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800804a:	e023      	b.n	8008094 <HAL_TIM_PWM_Stop_IT+0x188>
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	2b04      	cmp	r3, #4
 8008050:	d104      	bne.n	800805c <HAL_TIM_PWM_Stop_IT+0x150>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800805a:	e01b      	b.n	8008094 <HAL_TIM_PWM_Stop_IT+0x188>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b08      	cmp	r3, #8
 8008060:	d104      	bne.n	800806c <HAL_TIM_PWM_Stop_IT+0x160>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800806a:	e013      	b.n	8008094 <HAL_TIM_PWM_Stop_IT+0x188>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b0c      	cmp	r3, #12
 8008070:	d104      	bne.n	800807c <HAL_TIM_PWM_Stop_IT+0x170>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800807a:	e00b      	b.n	8008094 <HAL_TIM_PWM_Stop_IT+0x188>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2b10      	cmp	r3, #16
 8008080:	d104      	bne.n	800808c <HAL_TIM_PWM_Stop_IT+0x180>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800808a:	e003      	b.n	8008094 <HAL_TIM_PWM_Stop_IT+0x188>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40010000 	.word	0x40010000
 80080a4:	40010400 	.word	0x40010400

080080a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e08f      	b.n	80081dc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7fb faa1 	bl	8003618 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6899      	ldr	r1, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	4b3e      	ldr	r3, [pc, #248]	@ (80081e4 <HAL_TIM_Encoder_Init+0x13c>)
 80080ea:	400b      	ands	r3, r1
 80080ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f000 fc17 	bl	800892c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4b31      	ldr	r3, [pc, #196]	@ (80081e8 <HAL_TIM_Encoder_Init+0x140>)
 8008124:	4013      	ands	r3, r2
 8008126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	4313      	orrs	r3, r2
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4b2b      	ldr	r3, [pc, #172]	@ (80081ec <HAL_TIM_Encoder_Init+0x144>)
 800813e:	4013      	ands	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	4b2a      	ldr	r3, [pc, #168]	@ (80081f0 <HAL_TIM_Encoder_Init+0x148>)
 8008146:	4013      	ands	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	4313      	orrs	r3, r2
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	011a      	lsls	r2, r3, #4
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	031b      	lsls	r3, r3, #12
 8008168:	4313      	orrs	r3, r2
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800817e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	4313      	orrs	r3, r2
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	fffebff8 	.word	0xfffebff8
 80081e8:	fffffcfc 	.word	0xfffffcfc
 80081ec:	fffff3f3 	.word	0xfffff3f3
 80081f0:	ffff0f0f 	.word	0xffff0f0f

080081f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008204:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800820c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008214:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800821c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d110      	bne.n	8008246 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d102      	bne.n	8008230 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800822a:	7b7b      	ldrb	r3, [r7, #13]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d001      	beq.n	8008234 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e069      	b.n	8008308 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008244:	e031      	b.n	80082aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b04      	cmp	r3, #4
 800824a:	d110      	bne.n	800826e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d102      	bne.n	8008258 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008252:	7b3b      	ldrb	r3, [r7, #12]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d001      	beq.n	800825c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e055      	b.n	8008308 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800826c:	e01d      	b.n	80082aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d108      	bne.n	8008286 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d105      	bne.n	8008286 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800827a:	7b7b      	ldrb	r3, [r7, #13]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d102      	bne.n	8008286 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008280:	7b3b      	ldrb	r3, [r7, #12]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d001      	beq.n	800828a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e03e      	b.n	8008308 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2202      	movs	r2, #2
 8008296:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2202      	movs	r2, #2
 800829e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2202      	movs	r2, #2
 80082a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <HAL_TIM_Encoder_Start+0xc4>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d008      	beq.n	80082c8 <HAL_TIM_Encoder_Start+0xd4>
 80082b6:	e00f      	b.n	80082d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2201      	movs	r2, #1
 80082be:	2100      	movs	r1, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fed7 	bl	8009074 <TIM_CCxChannelCmd>
      break;
 80082c6:	e016      	b.n	80082f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2201      	movs	r2, #1
 80082ce:	2104      	movs	r1, #4
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fecf 	bl	8009074 <TIM_CCxChannelCmd>
      break;
 80082d6:	e00e      	b.n	80082f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2201      	movs	r2, #1
 80082de:	2100      	movs	r1, #0
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fec7 	bl	8009074 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	2104      	movs	r1, #4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fec0 	bl	8009074 <TIM_CCxChannelCmd>
      break;
 80082f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0201 	orr.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d020      	beq.n	8008374 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01b      	beq.n	8008374 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0202 	mvn.w	r2, #2
 8008344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fad2 	bl	8008904 <HAL_TIM_IC_CaptureCallback>
 8008360:	e005      	b.n	800836e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fac4 	bl	80088f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7f8 fad7 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f003 0304 	and.w	r3, r3, #4
 800837a:	2b00      	cmp	r3, #0
 800837c:	d020      	beq.n	80083c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01b      	beq.n	80083c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0204 	mvn.w	r2, #4
 8008390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2202      	movs	r2, #2
 8008396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 faac 	bl	8008904 <HAL_TIM_IC_CaptureCallback>
 80083ac:	e005      	b.n	80083ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa9e 	bl	80088f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7f8 fab1 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d020      	beq.n	800840c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f003 0308 	and.w	r3, r3, #8
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01b      	beq.n	800840c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f06f 0208 	mvn.w	r2, #8
 80083dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2204      	movs	r2, #4
 80083e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa86 	bl	8008904 <HAL_TIM_IC_CaptureCallback>
 80083f8:	e005      	b.n	8008406 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa78 	bl	80088f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7f8 fa8b 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	2b00      	cmp	r3, #0
 8008414:	d020      	beq.n	8008458 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01b      	beq.n	8008458 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0210 	mvn.w	r2, #16
 8008428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2208      	movs	r2, #8
 800842e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa60 	bl	8008904 <HAL_TIM_IC_CaptureCallback>
 8008444:	e005      	b.n	8008452 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa52 	bl	80088f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7f8 fa65 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00c      	beq.n	800847c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0201 	mvn.w	r2, #1
 8008474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fa30 	bl	80088dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008482:	2b00      	cmp	r3, #0
 8008484:	d104      	bne.n	8008490 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00c      	beq.n	80084aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80084a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fea3 	bl	80091f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00c      	beq.n	80084ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80084c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fe9b 	bl	8009204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00c      	beq.n	80084f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d007      	beq.n	80084f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fa13 	bl	8008918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00c      	beq.n	8008516 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d007      	beq.n	8008516 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f06f 0220 	mvn.w	r2, #32
 800850e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fe63 	bl	80091dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008516:	bf00      	nop
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008536:	2b01      	cmp	r3, #1
 8008538:	d101      	bne.n	800853e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800853a:	2302      	movs	r3, #2
 800853c:	e0ff      	b.n	800873e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b14      	cmp	r3, #20
 800854a:	f200 80f0 	bhi.w	800872e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800854e:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008554:	080085a9 	.word	0x080085a9
 8008558:	0800872f 	.word	0x0800872f
 800855c:	0800872f 	.word	0x0800872f
 8008560:	0800872f 	.word	0x0800872f
 8008564:	080085e9 	.word	0x080085e9
 8008568:	0800872f 	.word	0x0800872f
 800856c:	0800872f 	.word	0x0800872f
 8008570:	0800872f 	.word	0x0800872f
 8008574:	0800862b 	.word	0x0800862b
 8008578:	0800872f 	.word	0x0800872f
 800857c:	0800872f 	.word	0x0800872f
 8008580:	0800872f 	.word	0x0800872f
 8008584:	0800866b 	.word	0x0800866b
 8008588:	0800872f 	.word	0x0800872f
 800858c:	0800872f 	.word	0x0800872f
 8008590:	0800872f 	.word	0x0800872f
 8008594:	080086ad 	.word	0x080086ad
 8008598:	0800872f 	.word	0x0800872f
 800859c:	0800872f 	.word	0x0800872f
 80085a0:	0800872f 	.word	0x0800872f
 80085a4:	080086ed 	.word	0x080086ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fa68 	bl	8008a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0208 	orr.w	r2, r2, #8
 80085c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0204 	bic.w	r2, r2, #4
 80085d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6999      	ldr	r1, [r3, #24]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	619a      	str	r2, [r3, #24]
      break;
 80085e6:	e0a5      	b.n	8008734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 faba 	bl	8008b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699a      	ldr	r2, [r3, #24]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6999      	ldr	r1, [r3, #24]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	021a      	lsls	r2, r3, #8
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	619a      	str	r2, [r3, #24]
      break;
 8008628:	e084      	b.n	8008734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fb11 	bl	8008c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	69da      	ldr	r2, [r3, #28]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f042 0208 	orr.w	r2, r2, #8
 8008644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 0204 	bic.w	r2, r2, #4
 8008654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69d9      	ldr	r1, [r3, #28]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	430a      	orrs	r2, r1
 8008666:	61da      	str	r2, [r3, #28]
      break;
 8008668:	e064      	b.n	8008734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68b9      	ldr	r1, [r7, #8]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fb67 	bl	8008d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69da      	ldr	r2, [r3, #28]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69da      	ldr	r2, [r3, #28]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69d9      	ldr	r1, [r3, #28]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	021a      	lsls	r2, r3, #8
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	61da      	str	r2, [r3, #28]
      break;
 80086aa:	e043      	b.n	8008734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fb9e 	bl	8008df4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0208 	orr.w	r2, r2, #8
 80086c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0204 	bic.w	r2, r2, #4
 80086d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80086ea:	e023      	b.n	8008734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fbd0 	bl	8008e98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008706:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008716:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	021a      	lsls	r2, r3, #8
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800872c:	e002      	b.n	8008734 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	75fb      	strb	r3, [r7, #23]
      break;
 8008732:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop

08008748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_TIM_ConfigClockSource+0x1c>
 8008760:	2302      	movs	r3, #2
 8008762:	e0b4      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x186>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	4b56      	ldr	r3, [pc, #344]	@ (80088d8 <HAL_TIM_ConfigClockSource+0x190>)
 8008780:	4013      	ands	r3, r2
 8008782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800878a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879c:	d03e      	beq.n	800881c <HAL_TIM_ConfigClockSource+0xd4>
 800879e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087a2:	f200 8087 	bhi.w	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087aa:	f000 8086 	beq.w	80088ba <HAL_TIM_ConfigClockSource+0x172>
 80087ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b2:	d87f      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087b4:	2b70      	cmp	r3, #112	@ 0x70
 80087b6:	d01a      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0xa6>
 80087b8:	2b70      	cmp	r3, #112	@ 0x70
 80087ba:	d87b      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087bc:	2b60      	cmp	r3, #96	@ 0x60
 80087be:	d050      	beq.n	8008862 <HAL_TIM_ConfigClockSource+0x11a>
 80087c0:	2b60      	cmp	r3, #96	@ 0x60
 80087c2:	d877      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087c4:	2b50      	cmp	r3, #80	@ 0x50
 80087c6:	d03c      	beq.n	8008842 <HAL_TIM_ConfigClockSource+0xfa>
 80087c8:	2b50      	cmp	r3, #80	@ 0x50
 80087ca:	d873      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087cc:	2b40      	cmp	r3, #64	@ 0x40
 80087ce:	d058      	beq.n	8008882 <HAL_TIM_ConfigClockSource+0x13a>
 80087d0:	2b40      	cmp	r3, #64	@ 0x40
 80087d2:	d86f      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087d4:	2b30      	cmp	r3, #48	@ 0x30
 80087d6:	d064      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x15a>
 80087d8:	2b30      	cmp	r3, #48	@ 0x30
 80087da:	d86b      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d060      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x15a>
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d867      	bhi.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d05c      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x15a>
 80087e8:	2b10      	cmp	r3, #16
 80087ea:	d05a      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x15a>
 80087ec:	e062      	b.n	80088b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087fe:	f000 fc19 	bl	8009034 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	609a      	str	r2, [r3, #8]
      break;
 800881a:	e04f      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800882c:	f000 fc02 	bl	8009034 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800883e:	609a      	str	r2, [r3, #8]
      break;
 8008840:	e03c      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800884e:	461a      	mov	r2, r3
 8008850:	f000 fb76 	bl	8008f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2150      	movs	r1, #80	@ 0x50
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fbcf 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008860:	e02c      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800886e:	461a      	mov	r2, r3
 8008870:	f000 fb95 	bl	8008f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2160      	movs	r1, #96	@ 0x60
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fbbf 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008880:	e01c      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800888e:	461a      	mov	r2, r3
 8008890:	f000 fb56 	bl	8008f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2140      	movs	r1, #64	@ 0x40
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fbaf 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 80088a0:	e00c      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f000 fba6 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 80088b2:	e003      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
      break;
 80088b8:	e000      	b.n	80088bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	fffeff88 	.word	0xfffeff88

080088dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a46      	ldr	r2, [pc, #280]	@ (8008a58 <TIM_Base_SetConfig+0x12c>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800894a:	d00f      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a43      	ldr	r2, [pc, #268]	@ (8008a5c <TIM_Base_SetConfig+0x130>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00b      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a42      	ldr	r2, [pc, #264]	@ (8008a60 <TIM_Base_SetConfig+0x134>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d007      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a41      	ldr	r2, [pc, #260]	@ (8008a64 <TIM_Base_SetConfig+0x138>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d003      	beq.n	800896c <TIM_Base_SetConfig+0x40>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a40      	ldr	r2, [pc, #256]	@ (8008a68 <TIM_Base_SetConfig+0x13c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d108      	bne.n	800897e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a35      	ldr	r2, [pc, #212]	@ (8008a58 <TIM_Base_SetConfig+0x12c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d02b      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800898c:	d027      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a32      	ldr	r2, [pc, #200]	@ (8008a5c <TIM_Base_SetConfig+0x130>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d023      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a31      	ldr	r2, [pc, #196]	@ (8008a60 <TIM_Base_SetConfig+0x134>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d01f      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a30      	ldr	r2, [pc, #192]	@ (8008a64 <TIM_Base_SetConfig+0x138>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d01b      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008a68 <TIM_Base_SetConfig+0x13c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d017      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a2e      	ldr	r2, [pc, #184]	@ (8008a6c <TIM_Base_SetConfig+0x140>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008a70 <TIM_Base_SetConfig+0x144>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00f      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008a74 <TIM_Base_SetConfig+0x148>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00b      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008a78 <TIM_Base_SetConfig+0x14c>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d007      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a2a      	ldr	r2, [pc, #168]	@ (8008a7c <TIM_Base_SetConfig+0x150>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_Base_SetConfig+0xb2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a29      	ldr	r2, [pc, #164]	@ (8008a80 <TIM_Base_SetConfig+0x154>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d108      	bne.n	80089f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689a      	ldr	r2, [r3, #8]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a10      	ldr	r2, [pc, #64]	@ (8008a58 <TIM_Base_SetConfig+0x12c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_Base_SetConfig+0xf8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a12      	ldr	r2, [pc, #72]	@ (8008a68 <TIM_Base_SetConfig+0x13c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d103      	bne.n	8008a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d105      	bne.n	8008a4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f023 0201 	bic.w	r2, r3, #1
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	611a      	str	r2, [r3, #16]
  }
}
 8008a4a:	bf00      	nop
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40010000 	.word	0x40010000
 8008a5c:	40000400 	.word	0x40000400
 8008a60:	40000800 	.word	0x40000800
 8008a64:	40000c00 	.word	0x40000c00
 8008a68:	40010400 	.word	0x40010400
 8008a6c:	40014000 	.word	0x40014000
 8008a70:	40014400 	.word	0x40014400
 8008a74:	40014800 	.word	0x40014800
 8008a78:	40001800 	.word	0x40001800
 8008a7c:	40001c00 	.word	0x40001c00
 8008a80:	40002000 	.word	0x40002000

08008a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	f023 0201 	bic.w	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4b2b      	ldr	r3, [pc, #172]	@ (8008b5c <TIM_OC1_SetConfig+0xd8>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f023 0302 	bic.w	r3, r3, #2
 8008acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a21      	ldr	r2, [pc, #132]	@ (8008b60 <TIM_OC1_SetConfig+0xdc>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d003      	beq.n	8008ae8 <TIM_OC1_SetConfig+0x64>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a20      	ldr	r2, [pc, #128]	@ (8008b64 <TIM_OC1_SetConfig+0xe0>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d10c      	bne.n	8008b02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f023 0308 	bic.w	r3, r3, #8
 8008aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f023 0304 	bic.w	r3, r3, #4
 8008b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a16      	ldr	r2, [pc, #88]	@ (8008b60 <TIM_OC1_SetConfig+0xdc>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d003      	beq.n	8008b12 <TIM_OC1_SetConfig+0x8e>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a15      	ldr	r2, [pc, #84]	@ (8008b64 <TIM_OC1_SetConfig+0xe0>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d111      	bne.n	8008b36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	621a      	str	r2, [r3, #32]
}
 8008b50:	bf00      	nop
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	fffeff8f 	.word	0xfffeff8f
 8008b60:	40010000 	.word	0x40010000
 8008b64:	40010400 	.word	0x40010400

08008b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	f023 0210 	bic.w	r2, r3, #16
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4b2e      	ldr	r3, [pc, #184]	@ (8008c4c <TIM_OC2_SetConfig+0xe4>)
 8008b94:	4013      	ands	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f023 0320 	bic.w	r3, r3, #32
 8008bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	011b      	lsls	r3, r3, #4
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a23      	ldr	r2, [pc, #140]	@ (8008c50 <TIM_OC2_SetConfig+0xe8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d003      	beq.n	8008bd0 <TIM_OC2_SetConfig+0x68>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a22      	ldr	r2, [pc, #136]	@ (8008c54 <TIM_OC2_SetConfig+0xec>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d10d      	bne.n	8008bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a18      	ldr	r2, [pc, #96]	@ (8008c50 <TIM_OC2_SetConfig+0xe8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d003      	beq.n	8008bfc <TIM_OC2_SetConfig+0x94>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a17      	ldr	r2, [pc, #92]	@ (8008c54 <TIM_OC2_SetConfig+0xec>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d113      	bne.n	8008c24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	621a      	str	r2, [r3, #32]
}
 8008c3e:	bf00      	nop
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	feff8fff 	.word	0xfeff8fff
 8008c50:	40010000 	.word	0x40010000
 8008c54:	40010400 	.word	0x40010400

08008c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a1b      	ldr	r3, [r3, #32]
 8008c6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4b2d      	ldr	r3, [pc, #180]	@ (8008d38 <TIM_OC3_SetConfig+0xe0>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	021b      	lsls	r3, r3, #8
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a22      	ldr	r2, [pc, #136]	@ (8008d3c <TIM_OC3_SetConfig+0xe4>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d003      	beq.n	8008cbe <TIM_OC3_SetConfig+0x66>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a21      	ldr	r2, [pc, #132]	@ (8008d40 <TIM_OC3_SetConfig+0xe8>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d10d      	bne.n	8008cda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a17      	ldr	r2, [pc, #92]	@ (8008d3c <TIM_OC3_SetConfig+0xe4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d003      	beq.n	8008cea <TIM_OC3_SetConfig+0x92>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a16      	ldr	r2, [pc, #88]	@ (8008d40 <TIM_OC3_SetConfig+0xe8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d113      	bne.n	8008d12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	011b      	lsls	r3, r3, #4
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	621a      	str	r2, [r3, #32]
}
 8008d2c:	bf00      	nop
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	fffeff8f 	.word	0xfffeff8f
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40010400 	.word	0x40010400

08008d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008de8 <TIM_OC4_SetConfig+0xa4>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	031b      	lsls	r3, r3, #12
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a13      	ldr	r2, [pc, #76]	@ (8008dec <TIM_OC4_SetConfig+0xa8>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d003      	beq.n	8008dac <TIM_OC4_SetConfig+0x68>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a12      	ldr	r2, [pc, #72]	@ (8008df0 <TIM_OC4_SetConfig+0xac>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d109      	bne.n	8008dc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	019b      	lsls	r3, r3, #6
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	621a      	str	r2, [r3, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	feff8fff 	.word	0xfeff8fff
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40010400 	.word	0x40010400

08008df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8008e8c <TIM_OC5_SetConfig+0x98>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a12      	ldr	r2, [pc, #72]	@ (8008e90 <TIM_OC5_SetConfig+0x9c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d003      	beq.n	8008e52 <TIM_OC5_SetConfig+0x5e>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a11      	ldr	r2, [pc, #68]	@ (8008e94 <TIM_OC5_SetConfig+0xa0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d109      	bne.n	8008e66 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	621a      	str	r2, [r3, #32]
}
 8008e80:	bf00      	nop
 8008e82:	371c      	adds	r7, #28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	fffeff8f 	.word	0xfffeff8f
 8008e90:	40010000 	.word	0x40010000
 8008e94:	40010400 	.word	0x40010400

08008e98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8008f34 <TIM_OC6_SetConfig+0x9c>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	051b      	lsls	r3, r3, #20
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a13      	ldr	r2, [pc, #76]	@ (8008f38 <TIM_OC6_SetConfig+0xa0>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d003      	beq.n	8008ef8 <TIM_OC6_SetConfig+0x60>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a12      	ldr	r2, [pc, #72]	@ (8008f3c <TIM_OC6_SetConfig+0xa4>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d109      	bne.n	8008f0c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008efe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	029b      	lsls	r3, r3, #10
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	feff8fff 	.word	0xfeff8fff
 8008f38:	40010000 	.word	0x40010000
 8008f3c:	40010400 	.word	0x40010400

08008f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f023 0201 	bic.w	r2, r3, #1
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f023 030a 	bic.w	r3, r3, #10
 8008f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b087      	sub	sp, #28
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	f023 0210 	bic.w	r2, r3, #16
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	031b      	lsls	r3, r3, #12
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	f043 0307 	orr.w	r3, r3, #7
 8009020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	609a      	str	r2, [r3, #8]
}
 8009028:	bf00      	nop
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800904e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	021a      	lsls	r2, r3, #8
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	431a      	orrs	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4313      	orrs	r3, r2
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	609a      	str	r2, [r3, #8]
}
 8009068:	bf00      	nop
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f003 031f 	and.w	r3, r3, #31
 8009086:	2201      	movs	r2, #1
 8009088:	fa02 f303 	lsl.w	r3, r2, r3
 800908c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a1a      	ldr	r2, [r3, #32]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	43db      	mvns	r3, r3
 8009096:	401a      	ands	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a1a      	ldr	r2, [r3, #32]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f003 031f 	and.w	r3, r3, #31
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	fa01 f303 	lsl.w	r3, r1, r3
 80090ac:	431a      	orrs	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	621a      	str	r2, [r3, #32]
}
 80090b2:	bf00      	nop
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
	...

080090c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d101      	bne.n	80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090d4:	2302      	movs	r3, #2
 80090d6:	e06d      	b.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a30      	ldr	r2, [pc, #192]	@ (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d004      	beq.n	800910c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a2f      	ldr	r2, [pc, #188]	@ (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d108      	bne.n	800911e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009112:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009124:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	4313      	orrs	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a20      	ldr	r2, [pc, #128]	@ (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d022      	beq.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800914a:	d01d      	beq.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a1d      	ldr	r2, [pc, #116]	@ (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d018      	beq.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a1c      	ldr	r2, [pc, #112]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d013      	beq.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a1a      	ldr	r2, [pc, #104]	@ (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00e      	beq.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a15      	ldr	r2, [pc, #84]	@ (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d009      	beq.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a16      	ldr	r2, [pc, #88]	@ (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d004      	beq.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a15      	ldr	r2, [pc, #84]	@ (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d10c      	bne.n	80091a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800918e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	4313      	orrs	r3, r2
 8009198:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	40010000 	.word	0x40010000
 80091c4:	40010400 	.word	0x40010400
 80091c8:	40000400 	.word	0x40000400
 80091cc:	40000800 	.word	0x40000800
 80091d0:	40000c00 	.word	0x40000c00
 80091d4:	40014000 	.word	0x40014000
 80091d8:	40001800 	.word	0x40001800

080091dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e040      	b.n	80092ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7fa fb64 	bl	8003908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2224      	movs	r2, #36	@ 0x24
 8009244:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0201 	bic.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fe4c 	bl	8009efc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fbe5 	bl	8009a34 <UART_SetConfig>
 800926a:	4603      	mov	r3, r0
 800926c:	2b01      	cmp	r3, #1
 800926e:	d101      	bne.n	8009274 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e01b      	b.n	80092ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0201 	orr.w	r2, r2, #1
 80092a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fecb 	bl	800a040 <UART_CheckIdleState>
 80092aa:	4603      	mov	r3, r0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08a      	sub	sp, #40	@ 0x28
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	d177      	bne.n	80093bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <HAL_UART_Transmit+0x24>
 80092d2:	88fb      	ldrh	r3, [r7, #6]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e070      	b.n	80093be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2221      	movs	r2, #33	@ 0x21
 80092e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092ea:	f7fa ff4f 	bl	800418c <HAL_GetTick>
 80092ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	88fa      	ldrh	r2, [r7, #6]
 80092f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	88fa      	ldrh	r2, [r7, #6]
 80092fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009308:	d108      	bne.n	800931c <HAL_UART_Transmit+0x68>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d104      	bne.n	800931c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	61bb      	str	r3, [r7, #24]
 800931a:	e003      	b.n	8009324 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009320:	2300      	movs	r3, #0
 8009322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009324:	e02f      	b.n	8009386 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2200      	movs	r2, #0
 800932e:	2180      	movs	r1, #128	@ 0x80
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 fedc 	bl	800a0ee <UART_WaitOnFlagUntilTimeout>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2220      	movs	r2, #32
 8009340:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e03b      	b.n	80093be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10b      	bne.n	8009364 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	881b      	ldrh	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800935a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	3302      	adds	r3, #2
 8009360:	61bb      	str	r3, [r7, #24]
 8009362:	e007      	b.n	8009374 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	781a      	ldrb	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	3301      	adds	r3, #1
 8009372:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800937a:	b29b      	uxth	r3, r3
 800937c:	3b01      	subs	r3, #1
 800937e:	b29a      	uxth	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800938c:	b29b      	uxth	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1c9      	bne.n	8009326 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2200      	movs	r2, #0
 800939a:	2140      	movs	r1, #64	@ 0x40
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 fea6 	bl	800a0ee <UART_WaitOnFlagUntilTimeout>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d004      	beq.n	80093b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2220      	movs	r2, #32
 80093ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e005      	b.n	80093be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2220      	movs	r2, #32
 80093b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	e000      	b.n	80093be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80093bc:	2302      	movs	r3, #2
  }
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3720      	adds	r7, #32
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b08a      	sub	sp, #40	@ 0x28
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	4613      	mov	r3, r2
 80093d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093da:	2b20      	cmp	r3, #32
 80093dc:	d132      	bne.n	8009444 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <HAL_UART_Receive_IT+0x24>
 80093e4:	88fb      	ldrh	r3, [r7, #6]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e02b      	b.n	8009446 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d018      	beq.n	8009434 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	e853 3f00 	ldrex	r3, [r3]
 800940e:	613b      	str	r3, [r7, #16]
   return(result);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009416:	627b      	str	r3, [r7, #36]	@ 0x24
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009420:	623b      	str	r3, [r7, #32]
 8009422:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	69f9      	ldr	r1, [r7, #28]
 8009426:	6a3a      	ldr	r2, [r7, #32]
 8009428:	e841 2300 	strex	r3, r2, [r1]
 800942c:	61bb      	str	r3, [r7, #24]
   return(result);
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e6      	bne.n	8009402 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009434:	88fb      	ldrh	r3, [r7, #6]
 8009436:	461a      	mov	r2, r3
 8009438:	68b9      	ldr	r1, [r7, #8]
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fec4 	bl	800a1c8 <UART_Start_Receive_IT>
 8009440:	4603      	mov	r3, r0
 8009442:	e000      	b.n	8009446 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009444:	2302      	movs	r3, #2
  }
}
 8009446:	4618      	mov	r0, r3
 8009448:	3728      	adds	r7, #40	@ 0x28
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b0ba      	sub	sp, #232	@ 0xe8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009476:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800947a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800947e:	4013      	ands	r3, r2
 8009480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d115      	bne.n	80094b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800948c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00f      	beq.n	80094b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 8297 	beq.w	80099dc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
      }
      return;
 80094b6:	e291      	b.n	80099dc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8117 	beq.w	80096f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80094c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d106      	bne.n	80094dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80094ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80094d2:	4b85      	ldr	r3, [pc, #532]	@ (80096e8 <HAL_UART_IRQHandler+0x298>)
 80094d4:	4013      	ands	r3, r2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 810a 	beq.w	80096f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d011      	beq.n	800950c <HAL_UART_IRQHandler+0xbc>
 80094e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00b      	beq.n	800950c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2201      	movs	r2, #1
 80094fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009502:	f043 0201 	orr.w	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800950c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d011      	beq.n	800953c <HAL_UART_IRQHandler+0xec>
 8009518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2202      	movs	r2, #2
 800952a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009532:	f043 0204 	orr.w	r2, r3, #4
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800953c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d011      	beq.n	800956c <HAL_UART_IRQHandler+0x11c>
 8009548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2204      	movs	r2, #4
 800955a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009562:	f043 0202 	orr.w	r2, r3, #2
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800956c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b00      	cmp	r3, #0
 8009576:	d017      	beq.n	80095a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800957c:	f003 0320 	and.w	r3, r3, #32
 8009580:	2b00      	cmp	r3, #0
 8009582:	d105      	bne.n	8009590 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009588:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2208      	movs	r2, #8
 8009596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800959e:	f043 0208 	orr.w	r2, r3, #8
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d012      	beq.n	80095da <HAL_UART_IRQHandler+0x18a>
 80095b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00c      	beq.n	80095da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095d0:	f043 0220 	orr.w	r2, r3, #32
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 81fd 	beq.w	80099e0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80095e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00d      	beq.n	800960e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009614:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009622:	2b40      	cmp	r3, #64	@ 0x40
 8009624:	d005      	beq.n	8009632 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800962a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800962e:	2b00      	cmp	r3, #0
 8009630:	d04f      	beq.n	80096d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fe8e 	bl	800a354 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009642:	2b40      	cmp	r3, #64	@ 0x40
 8009644:	d141      	bne.n	80096ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800965c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3308      	adds	r3, #8
 800966e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800967e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800968a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1d9      	bne.n	8009646 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009696:	2b00      	cmp	r3, #0
 8009698:	d013      	beq.n	80096c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969e:	4a13      	ldr	r2, [pc, #76]	@ (80096ec <HAL_UART_IRQHandler+0x29c>)
 80096a0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fa ffd0 	bl	800464c <HAL_DMA_Abort_IT>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d017      	beq.n	80096e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	e00f      	b.n	80096e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f9a0 	bl	8009a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c8:	e00b      	b.n	80096e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f99c 	bl	8009a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d0:	e007      	b.n	80096e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f998 	bl	8009a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80096e0:	e17e      	b.n	80099e0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e2:	bf00      	nop
    return;
 80096e4:	e17c      	b.n	80099e0 <HAL_UART_IRQHandler+0x590>
 80096e6:	bf00      	nop
 80096e8:	04000120 	.word	0x04000120
 80096ec:	0800a41d 	.word	0x0800a41d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	f040 814c 	bne.w	8009992 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096fe:	f003 0310 	and.w	r3, r3, #16
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 8145 	beq.w	8009992 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 813e 	beq.w	8009992 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2210      	movs	r2, #16
 800971c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009728:	2b40      	cmp	r3, #64	@ 0x40
 800972a:	f040 80b6 	bne.w	800989a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800973a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 8150 	beq.w	80099e4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800974a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800974e:	429a      	cmp	r2, r3
 8009750:	f080 8148 	bcs.w	80099e4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800975a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009768:	f000 8086 	beq.w	8009878 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800979a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80097a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80097ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1da      	bne.n	800976c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3308      	adds	r3, #8
 80097bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80097c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3308      	adds	r3, #8
 80097d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80097da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80097de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80097e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80097ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1e1      	bne.n	80097b6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3308      	adds	r3, #8
 80097f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3308      	adds	r3, #8
 8009812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800981c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e3      	bne.n	80097f2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2220      	movs	r2, #32
 800982e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009848:	f023 0310 	bic.w	r3, r3, #16
 800984c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	461a      	mov	r2, r3
 8009856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800985a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800985c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e4      	bne.n	8009838 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009872:	4618      	mov	r0, r3
 8009874:	f7fa fe7a 	bl	800456c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800988a:	b29b      	uxth	r3, r3
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	b29b      	uxth	r3, r3
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f8c2 	bl	8009a1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009898:	e0a4      	b.n	80099e4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 8096 	beq.w	80099e8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80098bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 8091 	beq.w	80099e8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e4      	bne.n	80098c6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	623b      	str	r3, [r7, #32]
   return(result);
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009920:	633a      	str	r2, [r7, #48]	@ 0x30
 8009922:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e3      	bne.n	80098fc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	60fb      	str	r3, [r7, #12]
   return(result);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f023 0310 	bic.w	r3, r3, #16
 800995c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800996a:	61fb      	str	r3, [r7, #28]
 800996c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	69b9      	ldr	r1, [r7, #24]
 8009970:	69fa      	ldr	r2, [r7, #28]
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	617b      	str	r3, [r7, #20]
   return(result);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e4      	bne.n	8009948 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2202      	movs	r2, #2
 8009982:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f846 	bl	8009a1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009990:	e02a      	b.n	80099e8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00e      	beq.n	80099bc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800999e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d008      	beq.n	80099bc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d01c      	beq.n	80099ec <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
    }
    return;
 80099ba:	e017      	b.n	80099ec <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d012      	beq.n	80099ee <HAL_UART_IRQHandler+0x59e>
 80099c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00c      	beq.n	80099ee <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fd37 	bl	800a448 <UART_EndTransmit_IT>
    return;
 80099da:	e008      	b.n	80099ee <HAL_UART_IRQHandler+0x59e>
      return;
 80099dc:	bf00      	nop
 80099de:	e006      	b.n	80099ee <HAL_UART_IRQHandler+0x59e>
    return;
 80099e0:	bf00      	nop
 80099e2:	e004      	b.n	80099ee <HAL_UART_IRQHandler+0x59e>
      return;
 80099e4:	bf00      	nop
 80099e6:	e002      	b.n	80099ee <HAL_UART_IRQHandler+0x59e>
      return;
 80099e8:	bf00      	nop
 80099ea:	e000      	b.n	80099ee <HAL_UART_IRQHandler+0x59e>
    return;
 80099ec:	bf00      	nop
  }

}
 80099ee:	37e8      	adds	r7, #232	@ 0xe8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	431a      	orrs	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	4ba6      	ldr	r3, [pc, #664]	@ (8009cf8 <UART_SetConfig+0x2c4>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	6979      	ldr	r1, [r7, #20]
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a1b      	ldr	r3, [r3, #32]
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a94      	ldr	r2, [pc, #592]	@ (8009cfc <UART_SetConfig+0x2c8>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d120      	bne.n	8009af2 <UART_SetConfig+0xbe>
 8009ab0:	4b93      	ldr	r3, [pc, #588]	@ (8009d00 <UART_SetConfig+0x2cc>)
 8009ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d816      	bhi.n	8009aec <UART_SetConfig+0xb8>
 8009abe:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac4 <UART_SetConfig+0x90>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009ae1 	.word	0x08009ae1
 8009acc:	08009adb 	.word	0x08009adb
 8009ad0:	08009ae7 	.word	0x08009ae7
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	77fb      	strb	r3, [r7, #31]
 8009ad8:	e150      	b.n	8009d7c <UART_SetConfig+0x348>
 8009ada:	2302      	movs	r3, #2
 8009adc:	77fb      	strb	r3, [r7, #31]
 8009ade:	e14d      	b.n	8009d7c <UART_SetConfig+0x348>
 8009ae0:	2304      	movs	r3, #4
 8009ae2:	77fb      	strb	r3, [r7, #31]
 8009ae4:	e14a      	b.n	8009d7c <UART_SetConfig+0x348>
 8009ae6:	2308      	movs	r3, #8
 8009ae8:	77fb      	strb	r3, [r7, #31]
 8009aea:	e147      	b.n	8009d7c <UART_SetConfig+0x348>
 8009aec:	2310      	movs	r3, #16
 8009aee:	77fb      	strb	r3, [r7, #31]
 8009af0:	e144      	b.n	8009d7c <UART_SetConfig+0x348>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a83      	ldr	r2, [pc, #524]	@ (8009d04 <UART_SetConfig+0x2d0>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d132      	bne.n	8009b62 <UART_SetConfig+0x12e>
 8009afc:	4b80      	ldr	r3, [pc, #512]	@ (8009d00 <UART_SetConfig+0x2cc>)
 8009afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b02:	f003 030c 	and.w	r3, r3, #12
 8009b06:	2b0c      	cmp	r3, #12
 8009b08:	d828      	bhi.n	8009b5c <UART_SetConfig+0x128>
 8009b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b10 <UART_SetConfig+0xdc>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b45 	.word	0x08009b45
 8009b14:	08009b5d 	.word	0x08009b5d
 8009b18:	08009b5d 	.word	0x08009b5d
 8009b1c:	08009b5d 	.word	0x08009b5d
 8009b20:	08009b51 	.word	0x08009b51
 8009b24:	08009b5d 	.word	0x08009b5d
 8009b28:	08009b5d 	.word	0x08009b5d
 8009b2c:	08009b5d 	.word	0x08009b5d
 8009b30:	08009b4b 	.word	0x08009b4b
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b5d 	.word	0x08009b5d
 8009b3c:	08009b5d 	.word	0x08009b5d
 8009b40:	08009b57 	.word	0x08009b57
 8009b44:	2300      	movs	r3, #0
 8009b46:	77fb      	strb	r3, [r7, #31]
 8009b48:	e118      	b.n	8009d7c <UART_SetConfig+0x348>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	77fb      	strb	r3, [r7, #31]
 8009b4e:	e115      	b.n	8009d7c <UART_SetConfig+0x348>
 8009b50:	2304      	movs	r3, #4
 8009b52:	77fb      	strb	r3, [r7, #31]
 8009b54:	e112      	b.n	8009d7c <UART_SetConfig+0x348>
 8009b56:	2308      	movs	r3, #8
 8009b58:	77fb      	strb	r3, [r7, #31]
 8009b5a:	e10f      	b.n	8009d7c <UART_SetConfig+0x348>
 8009b5c:	2310      	movs	r3, #16
 8009b5e:	77fb      	strb	r3, [r7, #31]
 8009b60:	e10c      	b.n	8009d7c <UART_SetConfig+0x348>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a68      	ldr	r2, [pc, #416]	@ (8009d08 <UART_SetConfig+0x2d4>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d120      	bne.n	8009bae <UART_SetConfig+0x17a>
 8009b6c:	4b64      	ldr	r3, [pc, #400]	@ (8009d00 <UART_SetConfig+0x2cc>)
 8009b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b76:	2b30      	cmp	r3, #48	@ 0x30
 8009b78:	d013      	beq.n	8009ba2 <UART_SetConfig+0x16e>
 8009b7a:	2b30      	cmp	r3, #48	@ 0x30
 8009b7c:	d814      	bhi.n	8009ba8 <UART_SetConfig+0x174>
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d009      	beq.n	8009b96 <UART_SetConfig+0x162>
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	d810      	bhi.n	8009ba8 <UART_SetConfig+0x174>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <UART_SetConfig+0x15c>
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d006      	beq.n	8009b9c <UART_SetConfig+0x168>
 8009b8e:	e00b      	b.n	8009ba8 <UART_SetConfig+0x174>
 8009b90:	2300      	movs	r3, #0
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e0f2      	b.n	8009d7c <UART_SetConfig+0x348>
 8009b96:	2302      	movs	r3, #2
 8009b98:	77fb      	strb	r3, [r7, #31]
 8009b9a:	e0ef      	b.n	8009d7c <UART_SetConfig+0x348>
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	77fb      	strb	r3, [r7, #31]
 8009ba0:	e0ec      	b.n	8009d7c <UART_SetConfig+0x348>
 8009ba2:	2308      	movs	r3, #8
 8009ba4:	77fb      	strb	r3, [r7, #31]
 8009ba6:	e0e9      	b.n	8009d7c <UART_SetConfig+0x348>
 8009ba8:	2310      	movs	r3, #16
 8009baa:	77fb      	strb	r3, [r7, #31]
 8009bac:	e0e6      	b.n	8009d7c <UART_SetConfig+0x348>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a56      	ldr	r2, [pc, #344]	@ (8009d0c <UART_SetConfig+0x2d8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d120      	bne.n	8009bfa <UART_SetConfig+0x1c6>
 8009bb8:	4b51      	ldr	r3, [pc, #324]	@ (8009d00 <UART_SetConfig+0x2cc>)
 8009bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bc4:	d013      	beq.n	8009bee <UART_SetConfig+0x1ba>
 8009bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bc8:	d814      	bhi.n	8009bf4 <UART_SetConfig+0x1c0>
 8009bca:	2b80      	cmp	r3, #128	@ 0x80
 8009bcc:	d009      	beq.n	8009be2 <UART_SetConfig+0x1ae>
 8009bce:	2b80      	cmp	r3, #128	@ 0x80
 8009bd0:	d810      	bhi.n	8009bf4 <UART_SetConfig+0x1c0>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <UART_SetConfig+0x1a8>
 8009bd6:	2b40      	cmp	r3, #64	@ 0x40
 8009bd8:	d006      	beq.n	8009be8 <UART_SetConfig+0x1b4>
 8009bda:	e00b      	b.n	8009bf4 <UART_SetConfig+0x1c0>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	77fb      	strb	r3, [r7, #31]
 8009be0:	e0cc      	b.n	8009d7c <UART_SetConfig+0x348>
 8009be2:	2302      	movs	r3, #2
 8009be4:	77fb      	strb	r3, [r7, #31]
 8009be6:	e0c9      	b.n	8009d7c <UART_SetConfig+0x348>
 8009be8:	2304      	movs	r3, #4
 8009bea:	77fb      	strb	r3, [r7, #31]
 8009bec:	e0c6      	b.n	8009d7c <UART_SetConfig+0x348>
 8009bee:	2308      	movs	r3, #8
 8009bf0:	77fb      	strb	r3, [r7, #31]
 8009bf2:	e0c3      	b.n	8009d7c <UART_SetConfig+0x348>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	77fb      	strb	r3, [r7, #31]
 8009bf8:	e0c0      	b.n	8009d7c <UART_SetConfig+0x348>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a44      	ldr	r2, [pc, #272]	@ (8009d10 <UART_SetConfig+0x2dc>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d125      	bne.n	8009c50 <UART_SetConfig+0x21c>
 8009c04:	4b3e      	ldr	r3, [pc, #248]	@ (8009d00 <UART_SetConfig+0x2cc>)
 8009c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c12:	d017      	beq.n	8009c44 <UART_SetConfig+0x210>
 8009c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c18:	d817      	bhi.n	8009c4a <UART_SetConfig+0x216>
 8009c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c1e:	d00b      	beq.n	8009c38 <UART_SetConfig+0x204>
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c24:	d811      	bhi.n	8009c4a <UART_SetConfig+0x216>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <UART_SetConfig+0x1fe>
 8009c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c2e:	d006      	beq.n	8009c3e <UART_SetConfig+0x20a>
 8009c30:	e00b      	b.n	8009c4a <UART_SetConfig+0x216>
 8009c32:	2300      	movs	r3, #0
 8009c34:	77fb      	strb	r3, [r7, #31]
 8009c36:	e0a1      	b.n	8009d7c <UART_SetConfig+0x348>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	77fb      	strb	r3, [r7, #31]
 8009c3c:	e09e      	b.n	8009d7c <UART_SetConfig+0x348>
 8009c3e:	2304      	movs	r3, #4
 8009c40:	77fb      	strb	r3, [r7, #31]
 8009c42:	e09b      	b.n	8009d7c <UART_SetConfig+0x348>
 8009c44:	2308      	movs	r3, #8
 8009c46:	77fb      	strb	r3, [r7, #31]
 8009c48:	e098      	b.n	8009d7c <UART_SetConfig+0x348>
 8009c4a:	2310      	movs	r3, #16
 8009c4c:	77fb      	strb	r3, [r7, #31]
 8009c4e:	e095      	b.n	8009d7c <UART_SetConfig+0x348>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a2f      	ldr	r2, [pc, #188]	@ (8009d14 <UART_SetConfig+0x2e0>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d125      	bne.n	8009ca6 <UART_SetConfig+0x272>
 8009c5a:	4b29      	ldr	r3, [pc, #164]	@ (8009d00 <UART_SetConfig+0x2cc>)
 8009c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c68:	d017      	beq.n	8009c9a <UART_SetConfig+0x266>
 8009c6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c6e:	d817      	bhi.n	8009ca0 <UART_SetConfig+0x26c>
 8009c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c74:	d00b      	beq.n	8009c8e <UART_SetConfig+0x25a>
 8009c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c7a:	d811      	bhi.n	8009ca0 <UART_SetConfig+0x26c>
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <UART_SetConfig+0x254>
 8009c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c84:	d006      	beq.n	8009c94 <UART_SetConfig+0x260>
 8009c86:	e00b      	b.n	8009ca0 <UART_SetConfig+0x26c>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	77fb      	strb	r3, [r7, #31]
 8009c8c:	e076      	b.n	8009d7c <UART_SetConfig+0x348>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	77fb      	strb	r3, [r7, #31]
 8009c92:	e073      	b.n	8009d7c <UART_SetConfig+0x348>
 8009c94:	2304      	movs	r3, #4
 8009c96:	77fb      	strb	r3, [r7, #31]
 8009c98:	e070      	b.n	8009d7c <UART_SetConfig+0x348>
 8009c9a:	2308      	movs	r3, #8
 8009c9c:	77fb      	strb	r3, [r7, #31]
 8009c9e:	e06d      	b.n	8009d7c <UART_SetConfig+0x348>
 8009ca0:	2310      	movs	r3, #16
 8009ca2:	77fb      	strb	r3, [r7, #31]
 8009ca4:	e06a      	b.n	8009d7c <UART_SetConfig+0x348>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a1b      	ldr	r2, [pc, #108]	@ (8009d18 <UART_SetConfig+0x2e4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d138      	bne.n	8009d22 <UART_SetConfig+0x2ee>
 8009cb0:	4b13      	ldr	r3, [pc, #76]	@ (8009d00 <UART_SetConfig+0x2cc>)
 8009cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cb6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009cba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cbe:	d017      	beq.n	8009cf0 <UART_SetConfig+0x2bc>
 8009cc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cc4:	d82a      	bhi.n	8009d1c <UART_SetConfig+0x2e8>
 8009cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cca:	d00b      	beq.n	8009ce4 <UART_SetConfig+0x2b0>
 8009ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd0:	d824      	bhi.n	8009d1c <UART_SetConfig+0x2e8>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <UART_SetConfig+0x2aa>
 8009cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cda:	d006      	beq.n	8009cea <UART_SetConfig+0x2b6>
 8009cdc:	e01e      	b.n	8009d1c <UART_SetConfig+0x2e8>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	77fb      	strb	r3, [r7, #31]
 8009ce2:	e04b      	b.n	8009d7c <UART_SetConfig+0x348>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	77fb      	strb	r3, [r7, #31]
 8009ce8:	e048      	b.n	8009d7c <UART_SetConfig+0x348>
 8009cea:	2304      	movs	r3, #4
 8009cec:	77fb      	strb	r3, [r7, #31]
 8009cee:	e045      	b.n	8009d7c <UART_SetConfig+0x348>
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	77fb      	strb	r3, [r7, #31]
 8009cf4:	e042      	b.n	8009d7c <UART_SetConfig+0x348>
 8009cf6:	bf00      	nop
 8009cf8:	efff69f3 	.word	0xefff69f3
 8009cfc:	40011000 	.word	0x40011000
 8009d00:	40023800 	.word	0x40023800
 8009d04:	40004400 	.word	0x40004400
 8009d08:	40004800 	.word	0x40004800
 8009d0c:	40004c00 	.word	0x40004c00
 8009d10:	40005000 	.word	0x40005000
 8009d14:	40011400 	.word	0x40011400
 8009d18:	40007800 	.word	0x40007800
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	77fb      	strb	r3, [r7, #31]
 8009d20:	e02c      	b.n	8009d7c <UART_SetConfig+0x348>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a72      	ldr	r2, [pc, #456]	@ (8009ef0 <UART_SetConfig+0x4bc>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d125      	bne.n	8009d78 <UART_SetConfig+0x344>
 8009d2c:	4b71      	ldr	r3, [pc, #452]	@ (8009ef4 <UART_SetConfig+0x4c0>)
 8009d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d32:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009d36:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d3a:	d017      	beq.n	8009d6c <UART_SetConfig+0x338>
 8009d3c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d40:	d817      	bhi.n	8009d72 <UART_SetConfig+0x33e>
 8009d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d46:	d00b      	beq.n	8009d60 <UART_SetConfig+0x32c>
 8009d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d4c:	d811      	bhi.n	8009d72 <UART_SetConfig+0x33e>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <UART_SetConfig+0x326>
 8009d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d56:	d006      	beq.n	8009d66 <UART_SetConfig+0x332>
 8009d58:	e00b      	b.n	8009d72 <UART_SetConfig+0x33e>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	77fb      	strb	r3, [r7, #31]
 8009d5e:	e00d      	b.n	8009d7c <UART_SetConfig+0x348>
 8009d60:	2302      	movs	r3, #2
 8009d62:	77fb      	strb	r3, [r7, #31]
 8009d64:	e00a      	b.n	8009d7c <UART_SetConfig+0x348>
 8009d66:	2304      	movs	r3, #4
 8009d68:	77fb      	strb	r3, [r7, #31]
 8009d6a:	e007      	b.n	8009d7c <UART_SetConfig+0x348>
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	77fb      	strb	r3, [r7, #31]
 8009d70:	e004      	b.n	8009d7c <UART_SetConfig+0x348>
 8009d72:	2310      	movs	r3, #16
 8009d74:	77fb      	strb	r3, [r7, #31]
 8009d76:	e001      	b.n	8009d7c <UART_SetConfig+0x348>
 8009d78:	2310      	movs	r3, #16
 8009d7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d84:	d15b      	bne.n	8009e3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d86:	7ffb      	ldrb	r3, [r7, #31]
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d828      	bhi.n	8009dde <UART_SetConfig+0x3aa>
 8009d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d94 <UART_SetConfig+0x360>)
 8009d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d92:	bf00      	nop
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	08009ddf 	.word	0x08009ddf
 8009da4:	08009dcf 	.word	0x08009dcf
 8009da8:	08009ddf 	.word	0x08009ddf
 8009dac:	08009ddf 	.word	0x08009ddf
 8009db0:	08009ddf 	.word	0x08009ddf
 8009db4:	08009dd7 	.word	0x08009dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009db8:	f7fc fb3e 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 8009dbc:	61b8      	str	r0, [r7, #24]
        break;
 8009dbe:	e013      	b.n	8009de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dc0:	f7fc fb4e 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 8009dc4:	61b8      	str	r0, [r7, #24]
        break;
 8009dc6:	e00f      	b.n	8009de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8009ef8 <UART_SetConfig+0x4c4>)
 8009dca:	61bb      	str	r3, [r7, #24]
        break;
 8009dcc:	e00c      	b.n	8009de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dce:	f7fc fa21 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 8009dd2:	61b8      	str	r0, [r7, #24]
        break;
 8009dd4:	e008      	b.n	8009de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dda:	61bb      	str	r3, [r7, #24]
        break;
 8009ddc:	e004      	b.n	8009de8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	77bb      	strb	r3, [r7, #30]
        break;
 8009de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d074      	beq.n	8009ed8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	005a      	lsls	r2, r3, #1
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	085b      	lsrs	r3, r3, #1
 8009df8:	441a      	add	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2b0f      	cmp	r3, #15
 8009e08:	d916      	bls.n	8009e38 <UART_SetConfig+0x404>
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e10:	d212      	bcs.n	8009e38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	f023 030f 	bic.w	r3, r3, #15
 8009e1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	085b      	lsrs	r3, r3, #1
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	89fb      	ldrh	r3, [r7, #14]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	89fa      	ldrh	r2, [r7, #14]
 8009e34:	60da      	str	r2, [r3, #12]
 8009e36:	e04f      	b.n	8009ed8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	77bb      	strb	r3, [r7, #30]
 8009e3c:	e04c      	b.n	8009ed8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e3e:	7ffb      	ldrb	r3, [r7, #31]
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d828      	bhi.n	8009e96 <UART_SetConfig+0x462>
 8009e44:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <UART_SetConfig+0x418>)
 8009e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4a:	bf00      	nop
 8009e4c:	08009e71 	.word	0x08009e71
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e81 	.word	0x08009e81
 8009e58:	08009e97 	.word	0x08009e97
 8009e5c:	08009e87 	.word	0x08009e87
 8009e60:	08009e97 	.word	0x08009e97
 8009e64:	08009e97 	.word	0x08009e97
 8009e68:	08009e97 	.word	0x08009e97
 8009e6c:	08009e8f 	.word	0x08009e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e70:	f7fc fae2 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 8009e74:	61b8      	str	r0, [r7, #24]
        break;
 8009e76:	e013      	b.n	8009ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e78:	f7fc faf2 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 8009e7c:	61b8      	str	r0, [r7, #24]
        break;
 8009e7e:	e00f      	b.n	8009ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e80:	4b1d      	ldr	r3, [pc, #116]	@ (8009ef8 <UART_SetConfig+0x4c4>)
 8009e82:	61bb      	str	r3, [r7, #24]
        break;
 8009e84:	e00c      	b.n	8009ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e86:	f7fc f9c5 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 8009e8a:	61b8      	str	r0, [r7, #24]
        break;
 8009e8c:	e008      	b.n	8009ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e92:	61bb      	str	r3, [r7, #24]
        break;
 8009e94:	e004      	b.n	8009ea0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	77bb      	strb	r3, [r7, #30]
        break;
 8009e9e:	bf00      	nop
    }

    if (pclk != 0U)
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d018      	beq.n	8009ed8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	085a      	lsrs	r2, r3, #1
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	441a      	add	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b0f      	cmp	r3, #15
 8009ebe:	d909      	bls.n	8009ed4 <UART_SetConfig+0x4a0>
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ec6:	d205      	bcs.n	8009ed4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60da      	str	r2, [r3, #12]
 8009ed2:	e001      	b.n	8009ed8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009ee4:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	40007c00 	.word	0x40007c00
 8009ef4:	40023800 	.word	0x40023800
 8009ef8:	00f42400 	.word	0x00f42400

08009efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00a      	beq.n	8009f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	430a      	orrs	r2, r1
 8009f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4c:	f003 0302 	and.w	r3, r3, #2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00a      	beq.n	8009f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6e:	f003 0304 	and.w	r3, r3, #4
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f90:	f003 0310 	and.w	r3, r3, #16
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00a      	beq.n	8009fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01a      	beq.n	800a012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ffa:	d10a      	bne.n	800a012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	430a      	orrs	r2, r1
 800a032:	605a      	str	r2, [r3, #4]
  }
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08c      	sub	sp, #48	@ 0x30
 800a044:	af02      	add	r7, sp, #8
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a050:	f7fa f89c 	bl	800418c <HAL_GetTick>
 800a054:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0308 	and.w	r3, r3, #8
 800a060:	2b08      	cmp	r3, #8
 800a062:	d12e      	bne.n	800a0c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	2200      	movs	r2, #0
 800a06e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f83b 	bl	800a0ee <UART_WaitOnFlagUntilTimeout>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d021      	beq.n	800a0c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	e853 3f00 	ldrex	r3, [r3]
 800a08a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a092:	623b      	str	r3, [r7, #32]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	69b9      	ldr	r1, [r7, #24]
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e6      	bne.n	800a07e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e011      	b.n	800a0e6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3728      	adds	r7, #40	@ 0x28
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b084      	sub	sp, #16
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	603b      	str	r3, [r7, #0]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0fe:	e04f      	b.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a106:	d04b      	beq.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a108:	f7fa f840 	bl	800418c <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	429a      	cmp	r2, r3
 800a116:	d302      	bcc.n	800a11e <UART_WaitOnFlagUntilTimeout+0x30>
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e04e      	b.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d037      	beq.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b80      	cmp	r3, #128	@ 0x80
 800a134:	d034      	beq.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b40      	cmp	r3, #64	@ 0x40
 800a13a:	d031      	beq.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	f003 0308 	and.w	r3, r3, #8
 800a146:	2b08      	cmp	r3, #8
 800a148:	d110      	bne.n	800a16c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2208      	movs	r2, #8
 800a150:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 f8fe 	bl	800a354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2208      	movs	r2, #8
 800a15c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e029      	b.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a17a:	d111      	bne.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a184:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 f8e4 	bl	800a354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2220      	movs	r2, #32
 800a190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e00f      	b.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	69da      	ldr	r2, [r3, #28]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	bf0c      	ite	eq
 800a1b0:	2301      	moveq	r3, #1
 800a1b2:	2300      	movne	r3, #0
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	79fb      	ldrb	r3, [r7, #7]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d0a0      	beq.n	800a100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b097      	sub	sp, #92	@ 0x5c
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	88fa      	ldrh	r2, [r7, #6]
 800a1e0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	88fa      	ldrh	r2, [r7, #6]
 800a1e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1fa:	d10e      	bne.n	800a21a <UART_Start_Receive_IT+0x52>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d105      	bne.n	800a210 <UART_Start_Receive_IT+0x48>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a20a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a20e:	e02d      	b.n	800a26c <UART_Start_Receive_IT+0xa4>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	22ff      	movs	r2, #255	@ 0xff
 800a214:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a218:	e028      	b.n	800a26c <UART_Start_Receive_IT+0xa4>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10d      	bne.n	800a23e <UART_Start_Receive_IT+0x76>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d104      	bne.n	800a234 <UART_Start_Receive_IT+0x6c>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	22ff      	movs	r2, #255	@ 0xff
 800a22e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a232:	e01b      	b.n	800a26c <UART_Start_Receive_IT+0xa4>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	227f      	movs	r2, #127	@ 0x7f
 800a238:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a23c:	e016      	b.n	800a26c <UART_Start_Receive_IT+0xa4>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a246:	d10d      	bne.n	800a264 <UART_Start_Receive_IT+0x9c>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d104      	bne.n	800a25a <UART_Start_Receive_IT+0x92>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	227f      	movs	r2, #127	@ 0x7f
 800a254:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a258:	e008      	b.n	800a26c <UART_Start_Receive_IT+0xa4>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	223f      	movs	r2, #63	@ 0x3f
 800a25e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a262:	e003      	b.n	800a26c <UART_Start_Receive_IT+0xa4>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2222      	movs	r2, #34	@ 0x22
 800a278:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3308      	adds	r3, #8
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a286:	e853 3f00 	ldrex	r3, [r3]
 800a28a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28e:	f043 0301 	orr.w	r3, r3, #1
 800a292:	657b      	str	r3, [r7, #84]	@ 0x54
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3308      	adds	r3, #8
 800a29a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a29c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a29e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2a4:	e841 2300 	strex	r3, r2, [r1]
 800a2a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e5      	bne.n	800a27c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2b8:	d107      	bne.n	800a2ca <UART_Start_Receive_IT+0x102>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d103      	bne.n	800a2ca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4a21      	ldr	r2, [pc, #132]	@ (800a34c <UART_Start_Receive_IT+0x184>)
 800a2c6:	669a      	str	r2, [r3, #104]	@ 0x68
 800a2c8:	e002      	b.n	800a2d0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	4a20      	ldr	r2, [pc, #128]	@ (800a350 <UART_Start_Receive_IT+0x188>)
 800a2ce:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d019      	beq.n	800a30c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a2ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2f8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e6      	bne.n	800a2d8 <UART_Start_Receive_IT+0x110>
 800a30a:	e018      	b.n	800a33e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	613b      	str	r3, [r7, #16]
   return(result);
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f043 0320 	orr.w	r3, r3, #32
 800a320:	653b      	str	r3, [r7, #80]	@ 0x50
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	461a      	mov	r2, r3
 800a328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a32a:	623b      	str	r3, [r7, #32]
 800a32c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32e:	69f9      	ldr	r1, [r7, #28]
 800a330:	6a3a      	ldr	r2, [r7, #32]
 800a332:	e841 2300 	strex	r3, r2, [r1]
 800a336:	61bb      	str	r3, [r7, #24]
   return(result);
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1e6      	bne.n	800a30c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	375c      	adds	r7, #92	@ 0x5c
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	0800a645 	.word	0x0800a645
 800a350:	0800a49d 	.word	0x0800a49d

0800a354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a354:	b480      	push	{r7}
 800a356:	b095      	sub	sp, #84	@ 0x54
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a364:	e853 3f00 	ldrex	r3, [r3]
 800a368:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a37a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a37c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a380:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e6      	bne.n	800a35c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3308      	adds	r3, #8
 800a3ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e5      	bne.n	800a38e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d118      	bne.n	800a3fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	e853 3f00 	ldrex	r3, [r3]
 800a3d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f023 0310 	bic.w	r3, r3, #16
 800a3de:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ec:	6979      	ldr	r1, [r7, #20]
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	e841 2300 	strex	r3, r2, [r1]
 800a3f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1e6      	bne.n	800a3ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a410:	bf00      	nop
 800a412:	3754      	adds	r7, #84	@ 0x54
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fae4 	bl	8009a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a440:	bf00      	nop
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a464:	61fb      	str	r3, [r7, #28]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	61bb      	str	r3, [r7, #24]
 800a470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a472:	6979      	ldr	r1, [r7, #20]
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	613b      	str	r3, [r7, #16]
   return(result);
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e6      	bne.n	800a450 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2220      	movs	r2, #32
 800a486:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff fab0 	bl	80099f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a494:	bf00      	nop
 800a496:	3720      	adds	r7, #32
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b09c      	sub	sp, #112	@ 0x70
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4b4:	2b22      	cmp	r3, #34	@ 0x22
 800a4b6:	f040 80b9 	bne.w	800a62c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a4c8:	b2d9      	uxtb	r1, r3
 800a4ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d4:	400a      	ands	r2, r1
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f040 809c 	bne.w	800a63c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a522:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a524:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a526:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1e6      	bne.n	800a504 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3308      	adds	r3, #8
 800a53c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a540:	e853 3f00 	ldrex	r3, [r3]
 800a544:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a548:	f023 0301 	bic.w	r3, r3, #1
 800a54c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3308      	adds	r3, #8
 800a554:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a556:	647a      	str	r2, [r7, #68]	@ 0x44
 800a558:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a55c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a55e:	e841 2300 	strex	r3, r2, [r1]
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1e5      	bne.n	800a536 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d018      	beq.n	800a5be <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a594:	e853 3f00 	ldrex	r3, [r3]
 800a598:	623b      	str	r3, [r7, #32]
   return(result);
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1e6      	bne.n	800a58c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d12e      	bne.n	800a624 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f023 0310 	bic.w	r3, r3, #16
 800a5e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5ea:	61fb      	str	r3, [r7, #28]
 800a5ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	69b9      	ldr	r1, [r7, #24]
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e6      	bne.n	800a5cc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	f003 0310 	and.w	r3, r3, #16
 800a608:	2b10      	cmp	r3, #16
 800a60a:	d103      	bne.n	800a614 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2210      	movs	r2, #16
 800a612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff f9fd 	bl	8009a1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a622:	e00b      	b.n	800a63c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7f7 fea9 	bl	800237c <HAL_UART_RxCpltCallback>
}
 800a62a:	e007      	b.n	800a63c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f042 0208 	orr.w	r2, r2, #8
 800a63a:	619a      	str	r2, [r3, #24]
}
 800a63c:	bf00      	nop
 800a63e:	3770      	adds	r7, #112	@ 0x70
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b09c      	sub	sp, #112	@ 0x70
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a652:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a65c:	2b22      	cmp	r3, #34	@ 0x22
 800a65e:	f040 80b9 	bne.w	800a7d4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a668:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a670:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a672:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a676:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a67a:	4013      	ands	r3, r2
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a680:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a686:	1c9a      	adds	r2, r3, #2
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a692:	b29b      	uxth	r3, r3
 800a694:	3b01      	subs	r3, #1
 800a696:	b29a      	uxth	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f040 809c 	bne.w	800a7e4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a6ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a6d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a6d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e6      	bne.n	800a6ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f0:	f023 0301 	bic.w	r3, r3, #1
 800a6f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3308      	adds	r3, #8
 800a6fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a6fe:	643a      	str	r2, [r7, #64]	@ 0x40
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a706:	e841 2300 	strex	r3, r2, [r1]
 800a70a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1e5      	bne.n	800a6de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2220      	movs	r2, #32
 800a716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d018      	beq.n	800a766 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	61fb      	str	r3, [r7, #28]
   return(result);
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a754:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a75a:	e841 2300 	strex	r3, r2, [r1]
 800a75e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1e6      	bne.n	800a734 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d12e      	bne.n	800a7cc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	60bb      	str	r3, [r7, #8]
   return(result);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f023 0310 	bic.w	r3, r3, #16
 800a788:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a792:	61bb      	str	r3, [r7, #24]
 800a794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a796:	6979      	ldr	r1, [r7, #20]
 800a798:	69ba      	ldr	r2, [r7, #24]
 800a79a:	e841 2300 	strex	r3, r2, [r1]
 800a79e:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1e6      	bne.n	800a774 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	f003 0310 	and.w	r3, r3, #16
 800a7b0:	2b10      	cmp	r3, #16
 800a7b2:	d103      	bne.n	800a7bc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2210      	movs	r2, #16
 800a7ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7ff f929 	bl	8009a1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7ca:	e00b      	b.n	800a7e4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7f7 fdd5 	bl	800237c <HAL_UART_RxCpltCallback>
}
 800a7d2:	e007      	b.n	800a7e4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	699a      	ldr	r2, [r3, #24]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0208 	orr.w	r2, r2, #8
 800a7e2:	619a      	str	r2, [r3, #24]
}
 800a7e4:	bf00      	nop
 800a7e6:	3770      	adds	r7, #112	@ 0x70
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	f107 001c 	add.w	r0, r7, #28
 800a7fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a802:	2b01      	cmp	r3, #1
 800a804:	d121      	bne.n	800a84a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a80a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	4b21      	ldr	r3, [pc, #132]	@ (800a89c <USB_CoreInit+0xb0>)
 800a818:	4013      	ands	r3, r2
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a82a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d105      	bne.n	800a83e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fa92 	bl	800ad68 <USB_CoreReset>
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]
 800a848:	e010      	b.n	800a86c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fa86 	bl	800ad68 <USB_CoreReset>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a864:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a86c:	7fbb      	ldrb	r3, [r7, #30]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d10b      	bne.n	800a88a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f043 0206 	orr.w	r2, r3, #6
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	f043 0220 	orr.w	r2, r3, #32
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a896:	b004      	add	sp, #16
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	ffbdffbf 	.word	0xffbdffbf

0800a8a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f023 0201 	bic.w	r2, r3, #1
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a8de:	78fb      	ldrb	r3, [r7, #3]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d115      	bne.n	800a910 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a8f0:	200a      	movs	r0, #10
 800a8f2:	f7f9 fc57 	bl	80041a4 <HAL_Delay>
      ms += 10U;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	330a      	adds	r3, #10
 800a8fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fa25 	bl	800ad4c <USB_GetMode>
 800a902:	4603      	mov	r3, r0
 800a904:	2b01      	cmp	r3, #1
 800a906:	d01e      	beq.n	800a946 <USB_SetCurrentMode+0x84>
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a90c:	d9f0      	bls.n	800a8f0 <USB_SetCurrentMode+0x2e>
 800a90e:	e01a      	b.n	800a946 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d115      	bne.n	800a942 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a922:	200a      	movs	r0, #10
 800a924:	f7f9 fc3e 	bl	80041a4 <HAL_Delay>
      ms += 10U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	330a      	adds	r3, #10
 800a92c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa0c 	bl	800ad4c <USB_GetMode>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d005      	beq.n	800a946 <USB_SetCurrentMode+0x84>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a93e:	d9f0      	bls.n	800a922 <USB_SetCurrentMode+0x60>
 800a940:	e001      	b.n	800a946 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e005      	b.n	800a952 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2bc8      	cmp	r3, #200	@ 0xc8
 800a94a:	d101      	bne.n	800a950 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e000      	b.n	800a952 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a95c:	b084      	sub	sp, #16
 800a95e:	b580      	push	{r7, lr}
 800a960:	b086      	sub	sp, #24
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a96a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a976:	2300      	movs	r3, #0
 800a978:	613b      	str	r3, [r7, #16]
 800a97a:	e009      	b.n	800a990 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	3340      	adds	r3, #64	@ 0x40
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	2200      	movs	r2, #0
 800a988:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	3301      	adds	r3, #1
 800a98e:	613b      	str	r3, [r7, #16]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2b0e      	cmp	r3, #14
 800a994:	d9f2      	bls.n	800a97c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a996:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d11c      	bne.n	800a9d8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9ac:	f043 0302 	orr.w	r3, r3, #2
 800a9b0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	e005      	b.n	800a9e4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d10d      	bne.n	800aa14 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d104      	bne.n	800aa0a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aa00:	2100      	movs	r1, #0
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f968 	bl	800acd8 <USB_SetDevSpeed>
 800aa08:	e008      	b.n	800aa1c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f963 	bl	800acd8 <USB_SetDevSpeed>
 800aa12:	e003      	b.n	800aa1c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa14:	2103      	movs	r1, #3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f95e 	bl	800acd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa1c:	2110      	movs	r1, #16
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f8fa 	bl	800ac18 <USB_FlushTxFifo>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f924 	bl	800ac7c <USB_FlushRxFifo>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa44:	461a      	mov	r2, r3
 800aa46:	2300      	movs	r3, #0
 800aa48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa50:	461a      	mov	r2, r3
 800aa52:	2300      	movs	r3, #0
 800aa54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	2300      	movs	r3, #0
 800aa60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa62:	2300      	movs	r3, #0
 800aa64:	613b      	str	r3, [r7, #16]
 800aa66:	e043      	b.n	800aaf0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa7e:	d118      	bne.n	800aab2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10a      	bne.n	800aa9c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa92:	461a      	mov	r2, r3
 800aa94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aa98:	6013      	str	r3, [r2, #0]
 800aa9a:	e013      	b.n	800aac4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	015a      	lsls	r2, r3, #5
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	e008      	b.n	800aac4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	015a      	lsls	r2, r3, #5
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4413      	add	r3, r2
 800aaba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aabe:	461a      	mov	r2, r3
 800aac0:	2300      	movs	r3, #0
 800aac2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad0:	461a      	mov	r2, r3
 800aad2:	2300      	movs	r3, #0
 800aad4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae2:	461a      	mov	r2, r3
 800aae4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aae8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	3301      	adds	r3, #1
 800aaee:	613b      	str	r3, [r7, #16]
 800aaf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d3b5      	bcc.n	800aa68 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aafc:	2300      	movs	r3, #0
 800aafe:	613b      	str	r3, [r7, #16]
 800ab00:	e043      	b.n	800ab8a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	015a      	lsls	r2, r3, #5
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4413      	add	r3, r2
 800ab0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab18:	d118      	bne.n	800ab4c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	e013      	b.n	800ab5e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab42:	461a      	mov	r2, r3
 800ab44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	e008      	b.n	800ab5e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab58:	461a      	mov	r2, r3
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ab82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	3301      	adds	r3, #1
 800ab88:	613b      	str	r3, [r7, #16]
 800ab8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab8e:	461a      	mov	r2, r3
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d3b5      	bcc.n	800ab02 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aba8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800abb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800abb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d105      	bne.n	800abcc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	f043 0210 	orr.w	r2, r3, #16
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	699a      	ldr	r2, [r3, #24]
 800abd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ac10 <USB_DevInit+0x2b4>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800abd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	f043 0208 	orr.w	r2, r3, #8
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800abec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d105      	bne.n	800ac00 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	699a      	ldr	r2, [r3, #24]
 800abf8:	4b06      	ldr	r3, [pc, #24]	@ (800ac14 <USB_DevInit+0x2b8>)
 800abfa:	4313      	orrs	r3, r2
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3718      	adds	r7, #24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac0c:	b004      	add	sp, #16
 800ac0e:	4770      	bx	lr
 800ac10:	803c3800 	.word	0x803c3800
 800ac14:	40000004 	.word	0x40000004

0800ac18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac32:	d901      	bls.n	800ac38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e01b      	b.n	800ac70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	daf2      	bge.n	800ac26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	019b      	lsls	r3, r3, #6
 800ac48:	f043 0220 	orr.w	r2, r3, #32
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3301      	adds	r3, #1
 800ac54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac5c:	d901      	bls.n	800ac62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e006      	b.n	800ac70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b20      	cmp	r3, #32
 800ac6c:	d0f0      	beq.n	800ac50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac94:	d901      	bls.n	800ac9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac96:	2303      	movs	r3, #3
 800ac98:	e018      	b.n	800accc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	daf2      	bge.n	800ac88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2210      	movs	r2, #16
 800acaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	3301      	adds	r3, #1
 800acb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800acb8:	d901      	bls.n	800acbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e006      	b.n	800accc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	f003 0310 	and.w	r3, r3, #16
 800acc6:	2b10      	cmp	r3, #16
 800acc8:	d0f0      	beq.n	800acac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acf8:	4313      	orrs	r3, r2
 800acfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b085      	sub	sp, #20
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad24:	f023 0303 	bic.w	r3, r3, #3
 800ad28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad38:	f043 0302 	orr.w	r3, r3, #2
 800ad3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	f003 0301 	and.w	r3, r3, #1
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3301      	adds	r3, #1
 800ad78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad80:	d901      	bls.n	800ad86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e01b      	b.n	800adbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	daf2      	bge.n	800ad74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	f043 0201 	orr.w	r2, r3, #1
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3301      	adds	r3, #1
 800ada2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adaa:	d901      	bls.n	800adb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e006      	b.n	800adbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	f003 0301 	and.w	r3, r3, #1
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d0f0      	beq.n	800ad9e <USB_CoreReset+0x36>

  return HAL_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
	...

0800adcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800add0:	4904      	ldr	r1, [pc, #16]	@ (800ade4 <MX_FATFS_Init+0x18>)
 800add2:	4805      	ldr	r0, [pc, #20]	@ (800ade8 <MX_FATFS_Init+0x1c>)
 800add4:	f000 fd94 	bl	800b900 <FATFS_LinkDriver>
 800add8:	4603      	mov	r3, r0
 800adda:	461a      	mov	r2, r3
 800addc:	4b03      	ldr	r3, [pc, #12]	@ (800adec <MX_FATFS_Init+0x20>)
 800adde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ade0:	bf00      	nop
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	20000ee4 	.word	0x20000ee4
 800ade8:	20000058 	.word	0x20000058
 800adec:	20000ee0 	.word	0x20000ee0

0800adf0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f9d7 	bl	800b1b0 <USER_SPI_initialize>
 800ae02:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 fabd 	bl	800b398 <USER_SPI_status>
 800ae1e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	607a      	str	r2, [r7, #4]
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800ae38:	7bf8      	ldrb	r0, [r7, #15]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	f000 fac0 	bl	800b3c4 <USER_SPI_read>
 800ae44:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b084      	sub	sp, #16
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800ae5e:	7bf8      	ldrb	r0, [r7, #15]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	f000 fb13 	bl	800b490 <USER_SPI_write>
 800ae6a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	603a      	str	r2, [r7, #0]
 800ae7e:	71fb      	strb	r3, [r7, #7]
 800ae80:	460b      	mov	r3, r1
 800ae82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800ae84:	79b9      	ldrb	r1, [r7, #6]
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fb7c 	bl	800b588 <USER_SPI_ioctl>
 800ae90:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
	...

0800ae9c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800aea4:	f7f9 f972 	bl	800418c <HAL_GetTick>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	4a04      	ldr	r2, [pc, #16]	@ (800aebc <SPI_Timer_On+0x20>)
 800aeac:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800aeae:	4a04      	ldr	r2, [pc, #16]	@ (800aec0 <SPI_Timer_On+0x24>)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6013      	str	r3, [r2, #0]
}
 800aeb4:	bf00      	nop
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	20000eec 	.word	0x20000eec
 800aec0:	20000ef0 	.word	0x20000ef0

0800aec4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800aec8:	f7f9 f960 	bl	800418c <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <SPI_Timer_Status+0x24>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	1ad2      	subs	r2, r2, r3
 800aed4:	4b05      	ldr	r3, [pc, #20]	@ (800aeec <SPI_Timer_Status+0x28>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	bf34      	ite	cc
 800aedc:	2301      	movcc	r3, #1
 800aede:	2300      	movcs	r3, #0
 800aee0:	b2db      	uxtb	r3, r3
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20000eec 	.word	0x20000eec
 800aeec:	20000ef0 	.word	0x20000ef0

0800aef0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af02      	add	r7, sp, #8
 800aef6:	4603      	mov	r3, r0
 800aef8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800aefa:	f107 020f 	add.w	r2, r7, #15
 800aefe:	1df9      	adds	r1, r7, #7
 800af00:	2332      	movs	r3, #50	@ 0x32
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	2301      	movs	r3, #1
 800af06:	4804      	ldr	r0, [pc, #16]	@ (800af18 <xchg_spi+0x28>)
 800af08:	f7fc f8ce 	bl	80070a8 <HAL_SPI_TransmitReceive>
    return rxDat;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	2000017c 	.word	0x2000017c

0800af1c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800af1c:	b590      	push	{r4, r7, lr}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	e00a      	b.n	800af42 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	18d4      	adds	r4, r2, r3
 800af32:	20ff      	movs	r0, #255	@ 0xff
 800af34:	f7ff ffdc 	bl	800aef0 <xchg_spi>
 800af38:	4603      	mov	r3, r0
 800af3a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d3f0      	bcc.n	800af2c <rcvr_spi_multi+0x10>
	}
}
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	bd90      	pop	{r4, r7, pc}

0800af54 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	b29a      	uxth	r2, r3
 800af62:	f04f 33ff 	mov.w	r3, #4294967295
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	4803      	ldr	r0, [pc, #12]	@ (800af78 <xmit_spi_multi+0x24>)
 800af6a:	f7fb ff28 	bl	8006dbe <HAL_SPI_Transmit>
}
 800af6e:	bf00      	nop
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	2000017c 	.word	0x2000017c

0800af7c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800af84:	f7f9 f902 	bl	800418c <HAL_GetTick>
 800af88:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800af8e:	20ff      	movs	r0, #255	@ 0xff
 800af90:	f7ff ffae 	bl	800aef0 <xchg_spi>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	2bff      	cmp	r3, #255	@ 0xff
 800af9c:	d007      	beq.n	800afae <wait_ready+0x32>
 800af9e:	f7f9 f8f5 	bl	800418c <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d8ef      	bhi.n	800af8e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800afae:	7bfb      	ldrb	r3, [r7, #15]
 800afb0:	2bff      	cmp	r3, #255	@ 0xff
 800afb2:	bf0c      	ite	eq
 800afb4:	2301      	moveq	r3, #1
 800afb6:	2300      	movne	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800afc8:	2201      	movs	r2, #1
 800afca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800afce:	4804      	ldr	r0, [pc, #16]	@ (800afe0 <despiselect+0x1c>)
 800afd0:	f7f9 ff5e 	bl	8004e90 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800afd4:	20ff      	movs	r0, #255	@ 0xff
 800afd6:	f7ff ff8b 	bl	800aef0 <xchg_spi>

}
 800afda:	bf00      	nop
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	40020c00 	.word	0x40020c00

0800afe4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800afe8:	2200      	movs	r2, #0
 800afea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800afee:	480a      	ldr	r0, [pc, #40]	@ (800b018 <spiselect+0x34>)
 800aff0:	f7f9 ff4e 	bl	8004e90 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800aff4:	20ff      	movs	r0, #255	@ 0xff
 800aff6:	f7ff ff7b 	bl	800aef0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800affa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800affe:	f7ff ffbd 	bl	800af7c <wait_ready>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d001      	beq.n	800b00c <spiselect+0x28>
 800b008:	2301      	movs	r3, #1
 800b00a:	e002      	b.n	800b012 <spiselect+0x2e>

	despiselect();
 800b00c:	f7ff ffda 	bl	800afc4 <despiselect>
	return 0;	/* Timeout */
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	40020c00 	.word	0x40020c00

0800b01c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b026:	20c8      	movs	r0, #200	@ 0xc8
 800b028:	f7ff ff38 	bl	800ae9c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b02c:	20ff      	movs	r0, #255	@ 0xff
 800b02e:	f7ff ff5f 	bl	800aef0 <xchg_spi>
 800b032:	4603      	mov	r3, r0
 800b034:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	2bff      	cmp	r3, #255	@ 0xff
 800b03a:	d104      	bne.n	800b046 <rcvr_datablock+0x2a>
 800b03c:	f7ff ff42 	bl	800aec4 <SPI_Timer_Status>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1f2      	bne.n	800b02c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	2bfe      	cmp	r3, #254	@ 0xfe
 800b04a:	d001      	beq.n	800b050 <rcvr_datablock+0x34>
 800b04c:	2300      	movs	r3, #0
 800b04e:	e00a      	b.n	800b066 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff ff62 	bl	800af1c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b058:	20ff      	movs	r0, #255	@ 0xff
 800b05a:	f7ff ff49 	bl	800aef0 <xchg_spi>
 800b05e:	20ff      	movs	r0, #255	@ 0xff
 800b060:	f7ff ff46 	bl	800aef0 <xchg_spi>

	return 1;						/* Function succeeded */
 800b064:	2301      	movs	r3, #1
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	460b      	mov	r3, r1
 800b078:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b07a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b07e:	f7ff ff7d 	bl	800af7c <wait_ready>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <xmit_datablock+0x1e>
 800b088:	2300      	movs	r3, #0
 800b08a:	e01e      	b.n	800b0ca <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b08c:	78fb      	ldrb	r3, [r7, #3]
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff ff2e 	bl	800aef0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	2bfd      	cmp	r3, #253	@ 0xfd
 800b098:	d016      	beq.n	800b0c8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b09a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff ff58 	bl	800af54 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b0a4:	20ff      	movs	r0, #255	@ 0xff
 800b0a6:	f7ff ff23 	bl	800aef0 <xchg_spi>
 800b0aa:	20ff      	movs	r0, #255	@ 0xff
 800b0ac:	f7ff ff20 	bl	800aef0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b0b0:	20ff      	movs	r0, #255	@ 0xff
 800b0b2:	f7ff ff1d 	bl	800aef0 <xchg_spi>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	f003 031f 	and.w	r3, r3, #31
 800b0c0:	2b05      	cmp	r3, #5
 800b0c2:	d001      	beq.n	800b0c8 <xmit_datablock+0x5a>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e000      	b.n	800b0ca <xmit_datablock+0x5c>
	}
	return 1;
 800b0c8:	2301      	movs	r3, #1
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	4603      	mov	r3, r0
 800b0da:	6039      	str	r1, [r7, #0]
 800b0dc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	da0e      	bge.n	800b104 <send_cmd+0x32>
		cmd &= 0x7F;
 800b0e6:	79fb      	ldrb	r3, [r7, #7]
 800b0e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ec:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	2037      	movs	r0, #55	@ 0x37
 800b0f2:	f7ff ffee 	bl	800b0d2 <send_cmd>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b0fa:	7bbb      	ldrb	r3, [r7, #14]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d901      	bls.n	800b104 <send_cmd+0x32>
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	e051      	b.n	800b1a8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b104:	79fb      	ldrb	r3, [r7, #7]
 800b106:	2b0c      	cmp	r3, #12
 800b108:	d008      	beq.n	800b11c <send_cmd+0x4a>
		despiselect();
 800b10a:	f7ff ff5b 	bl	800afc4 <despiselect>
		if (!spiselect()) return 0xFF;
 800b10e:	f7ff ff69 	bl	800afe4 <spiselect>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d101      	bne.n	800b11c <send_cmd+0x4a>
 800b118:	23ff      	movs	r3, #255	@ 0xff
 800b11a:	e045      	b.n	800b1a8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b11c:	79fb      	ldrb	r3, [r7, #7]
 800b11e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b122:	b2db      	uxtb	r3, r3
 800b124:	4618      	mov	r0, r3
 800b126:	f7ff fee3 	bl	800aef0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	0e1b      	lsrs	r3, r3, #24
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff fedd 	bl	800aef0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	0c1b      	lsrs	r3, r3, #16
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff fed7 	bl	800aef0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	0a1b      	lsrs	r3, r3, #8
 800b146:	b2db      	uxtb	r3, r3
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff fed1 	bl	800aef0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	b2db      	uxtb	r3, r3
 800b152:	4618      	mov	r0, r3
 800b154:	f7ff fecc 	bl	800aef0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b158:	2301      	movs	r3, #1
 800b15a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b15c:	79fb      	ldrb	r3, [r7, #7]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <send_cmd+0x94>
 800b162:	2395      	movs	r3, #149	@ 0x95
 800b164:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	2b08      	cmp	r3, #8
 800b16a:	d101      	bne.n	800b170 <send_cmd+0x9e>
 800b16c:	2387      	movs	r3, #135	@ 0x87
 800b16e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff febc 	bl	800aef0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b178:	79fb      	ldrb	r3, [r7, #7]
 800b17a:	2b0c      	cmp	r3, #12
 800b17c:	d102      	bne.n	800b184 <send_cmd+0xb2>
 800b17e:	20ff      	movs	r0, #255	@ 0xff
 800b180:	f7ff feb6 	bl	800aef0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b184:	230a      	movs	r3, #10
 800b186:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b188:	20ff      	movs	r0, #255	@ 0xff
 800b18a:	f7ff feb1 	bl	800aef0 <xchg_spi>
 800b18e:	4603      	mov	r3, r0
 800b190:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b196:	2b00      	cmp	r3, #0
 800b198:	da05      	bge.n	800b1a6 <send_cmd+0xd4>
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	73fb      	strb	r3, [r7, #15]
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1f0      	bne.n	800b188 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b1b0:	b590      	push	{r4, r7, lr}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <USER_SPI_initialize+0x14>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e0dc      	b.n	800b37e <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b1c4:	4b70      	ldr	r3, [pc, #448]	@ (800b388 <USER_SPI_initialize+0x1d8>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <USER_SPI_initialize+0x2a>
 800b1d2:	4b6d      	ldr	r3, [pc, #436]	@ (800b388 <USER_SPI_initialize+0x1d8>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	e0d1      	b.n	800b37e <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800b1da:	4b6b      	ldr	r3, [pc, #428]	@ (800b388 <USER_SPI_initialize+0x1d8>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4b6a      	ldr	r3, [pc, #424]	@ (800b38c <USER_SPI_initialize+0x1dc>)
 800b1e4:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800b1e6:	4b6a      	ldr	r3, [pc, #424]	@ (800b390 <USER_SPI_initialize+0x1e0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b1f0:	4b67      	ldr	r3, [pc, #412]	@ (800b390 <USER_SPI_initialize+0x1e0>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800b1f8:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b1fa:	230a      	movs	r3, #10
 800b1fc:	73fb      	strb	r3, [r7, #15]
 800b1fe:	e005      	b.n	800b20c <USER_SPI_initialize+0x5c>
 800b200:	20ff      	movs	r0, #255	@ 0xff
 800b202:	f7ff fe75 	bl	800aef0 <xchg_spi>
 800b206:	7bfb      	ldrb	r3, [r7, #15]
 800b208:	3b01      	subs	r3, #1
 800b20a:	73fb      	strb	r3, [r7, #15]
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1f6      	bne.n	800b200 <USER_SPI_initialize+0x50>

	ty = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b216:	2100      	movs	r1, #0
 800b218:	2000      	movs	r0, #0
 800b21a:	f7ff ff5a 	bl	800b0d2 <send_cmd>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b01      	cmp	r3, #1
 800b222:	f040 808b 	bne.w	800b33c <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b226:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b22a:	f7ff fe37 	bl	800ae9c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b22e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b232:	2008      	movs	r0, #8
 800b234:	f7ff ff4d 	bl	800b0d2 <send_cmd>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d151      	bne.n	800b2e2 <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b23e:	2300      	movs	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]
 800b242:	e00d      	b.n	800b260 <USER_SPI_initialize+0xb0>
 800b244:	7bfc      	ldrb	r4, [r7, #15]
 800b246:	20ff      	movs	r0, #255	@ 0xff
 800b248:	f7ff fe52 	bl	800aef0 <xchg_spi>
 800b24c:	4603      	mov	r3, r0
 800b24e:	461a      	mov	r2, r3
 800b250:	f104 0310 	add.w	r3, r4, #16
 800b254:	443b      	add	r3, r7
 800b256:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	3301      	adds	r3, #1
 800b25e:	73fb      	strb	r3, [r7, #15]
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	2b03      	cmp	r3, #3
 800b264:	d9ee      	bls.n	800b244 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b266:	7abb      	ldrb	r3, [r7, #10]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d167      	bne.n	800b33c <USER_SPI_initialize+0x18c>
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	2baa      	cmp	r3, #170	@ 0xaa
 800b270:	d164      	bne.n	800b33c <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b272:	bf00      	nop
 800b274:	f7ff fe26 	bl	800aec4 <SPI_Timer_Status>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d007      	beq.n	800b28e <USER_SPI_initialize+0xde>
 800b27e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b282:	20a9      	movs	r0, #169	@ 0xa9
 800b284:	f7ff ff25 	bl	800b0d2 <send_cmd>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1f2      	bne.n	800b274 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b28e:	f7ff fe19 	bl	800aec4 <SPI_Timer_Status>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d051      	beq.n	800b33c <USER_SPI_initialize+0x18c>
 800b298:	2100      	movs	r1, #0
 800b29a:	203a      	movs	r0, #58	@ 0x3a
 800b29c:	f7ff ff19 	bl	800b0d2 <send_cmd>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d14a      	bne.n	800b33c <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	73fb      	strb	r3, [r7, #15]
 800b2aa:	e00d      	b.n	800b2c8 <USER_SPI_initialize+0x118>
 800b2ac:	7bfc      	ldrb	r4, [r7, #15]
 800b2ae:	20ff      	movs	r0, #255	@ 0xff
 800b2b0:	f7ff fe1e 	bl	800aef0 <xchg_spi>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	f104 0310 	add.w	r3, r4, #16
 800b2bc:	443b      	add	r3, r7
 800b2be:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	73fb      	strb	r3, [r7, #15]
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d9ee      	bls.n	800b2ac <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b2ce:	7a3b      	ldrb	r3, [r7, #8]
 800b2d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <USER_SPI_initialize+0x12c>
 800b2d8:	230c      	movs	r3, #12
 800b2da:	e000      	b.n	800b2de <USER_SPI_initialize+0x12e>
 800b2dc:	2304      	movs	r3, #4
 800b2de:	737b      	strb	r3, [r7, #13]
 800b2e0:	e02c      	b.n	800b33c <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	20a9      	movs	r0, #169	@ 0xa9
 800b2e6:	f7ff fef4 	bl	800b0d2 <send_cmd>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d804      	bhi.n	800b2fa <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	737b      	strb	r3, [r7, #13]
 800b2f4:	23a9      	movs	r3, #169	@ 0xa9
 800b2f6:	73bb      	strb	r3, [r7, #14]
 800b2f8:	e003      	b.n	800b302 <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	737b      	strb	r3, [r7, #13]
 800b2fe:	2301      	movs	r3, #1
 800b300:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b302:	bf00      	nop
 800b304:	f7ff fdde 	bl	800aec4 <SPI_Timer_Status>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <USER_SPI_initialize+0x16e>
 800b30e:	7bbb      	ldrb	r3, [r7, #14]
 800b310:	2100      	movs	r1, #0
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff fedd 	bl	800b0d2 <send_cmd>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1f2      	bne.n	800b304 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b31e:	f7ff fdd1 	bl	800aec4 <SPI_Timer_Status>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d007      	beq.n	800b338 <USER_SPI_initialize+0x188>
 800b328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b32c:	2010      	movs	r0, #16
 800b32e:	f7ff fed0 	bl	800b0d2 <send_cmd>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <USER_SPI_initialize+0x18c>
				ty = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b33c:	4a15      	ldr	r2, [pc, #84]	@ (800b394 <USER_SPI_initialize+0x1e4>)
 800b33e:	7b7b      	ldrb	r3, [r7, #13]
 800b340:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b342:	f7ff fe3f 	bl	800afc4 <despiselect>

	if (ty) {			/* OK */
 800b346:	7b7b      	ldrb	r3, [r7, #13]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d012      	beq.n	800b372 <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800b34c:	4b10      	ldr	r3, [pc, #64]	@ (800b390 <USER_SPI_initialize+0x1e0>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b356:	4b0e      	ldr	r3, [pc, #56]	@ (800b390 <USER_SPI_initialize+0x1e0>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f042 0210 	orr.w	r2, r2, #16
 800b35e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b360:	4b09      	ldr	r3, [pc, #36]	@ (800b388 <USER_SPI_initialize+0x1d8>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	b2db      	uxtb	r3, r3
 800b366:	f023 0301 	bic.w	r3, r3, #1
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	4b06      	ldr	r3, [pc, #24]	@ (800b388 <USER_SPI_initialize+0x1d8>)
 800b36e:	701a      	strb	r2, [r3, #0]
 800b370:	e002      	b.n	800b378 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b372:	4b05      	ldr	r3, [pc, #20]	@ (800b388 <USER_SPI_initialize+0x1d8>)
 800b374:	2201      	movs	r2, #1
 800b376:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b378:	4b03      	ldr	r3, [pc, #12]	@ (800b388 <USER_SPI_initialize+0x1d8>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b2db      	uxtb	r3, r3
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	bd90      	pop	{r4, r7, pc}
 800b386:	bf00      	nop
 800b388:	2000006c 	.word	0x2000006c
 800b38c:	20000cf4 	.word	0x20000cf4
 800b390:	2000017c 	.word	0x2000017c
 800b394:	20000ee8 	.word	0x20000ee8

0800b398 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <USER_SPI_status+0x14>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e002      	b.n	800b3b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b3ac:	4b04      	ldr	r3, [pc, #16]	@ (800b3c0 <USER_SPI_status+0x28>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	b2db      	uxtb	r3, r3
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	2000006c 	.word	0x2000006c

0800b3c4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d102      	bne.n	800b3e0 <USER_SPI_read+0x1c>
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <USER_SPI_read+0x20>
 800b3e0:	2304      	movs	r3, #4
 800b3e2:	e04d      	b.n	800b480 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b3e4:	4b28      	ldr	r3, [pc, #160]	@ (800b488 <USER_SPI_read+0xc4>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <USER_SPI_read+0x32>
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e044      	b.n	800b480 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b3f6:	4b25      	ldr	r3, [pc, #148]	@ (800b48c <USER_SPI_read+0xc8>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	f003 0308 	and.w	r3, r3, #8
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d102      	bne.n	800b408 <USER_SPI_read+0x44>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	025b      	lsls	r3, r3, #9
 800b406:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d111      	bne.n	800b432 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	2011      	movs	r0, #17
 800b412:	f7ff fe5e 	bl	800b0d2 <send_cmd>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d129      	bne.n	800b470 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b41c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b420:	68b8      	ldr	r0, [r7, #8]
 800b422:	f7ff fdfb 	bl	800b01c <rcvr_datablock>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d021      	beq.n	800b470 <USER_SPI_read+0xac>
			count = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	e01e      	b.n	800b470 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b432:	6879      	ldr	r1, [r7, #4]
 800b434:	2012      	movs	r0, #18
 800b436:	f7ff fe4c 	bl	800b0d2 <send_cmd>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d117      	bne.n	800b470 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b444:	68b8      	ldr	r0, [r7, #8]
 800b446:	f7ff fde9 	bl	800b01c <rcvr_datablock>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00a      	beq.n	800b466 <USER_SPI_read+0xa2>
				buff += 512;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b456:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	603b      	str	r3, [r7, #0]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1ed      	bne.n	800b440 <USER_SPI_read+0x7c>
 800b464:	e000      	b.n	800b468 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b466:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b468:	2100      	movs	r1, #0
 800b46a:	200c      	movs	r0, #12
 800b46c:	f7ff fe31 	bl	800b0d2 <send_cmd>
		}
	}
	despiselect();
 800b470:	f7ff fda8 	bl	800afc4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	bf14      	ite	ne
 800b47a:	2301      	movne	r3, #1
 800b47c:	2300      	moveq	r3, #0
 800b47e:	b2db      	uxtb	r3, r3
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	2000006c 	.word	0x2000006c
 800b48c:	20000ee8 	.word	0x20000ee8

0800b490 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d102      	bne.n	800b4ac <USER_SPI_write+0x1c>
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d101      	bne.n	800b4b0 <USER_SPI_write+0x20>
 800b4ac:	2304      	movs	r3, #4
 800b4ae:	e063      	b.n	800b578 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b4b0:	4b33      	ldr	r3, [pc, #204]	@ (800b580 <USER_SPI_write+0xf0>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <USER_SPI_write+0x32>
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e05a      	b.n	800b578 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b4c2:	4b2f      	ldr	r3, [pc, #188]	@ (800b580 <USER_SPI_write+0xf0>)
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <USER_SPI_write+0x44>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e051      	b.n	800b578 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b4d4:	4b2b      	ldr	r3, [pc, #172]	@ (800b584 <USER_SPI_write+0xf4>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d102      	bne.n	800b4e6 <USER_SPI_write+0x56>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	025b      	lsls	r3, r3, #9
 800b4e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d110      	bne.n	800b50e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b4ec:	6879      	ldr	r1, [r7, #4]
 800b4ee:	2018      	movs	r0, #24
 800b4f0:	f7ff fdef 	bl	800b0d2 <send_cmd>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d136      	bne.n	800b568 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b4fa:	21fe      	movs	r1, #254	@ 0xfe
 800b4fc:	68b8      	ldr	r0, [r7, #8]
 800b4fe:	f7ff fdb6 	bl	800b06e <xmit_datablock>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d02f      	beq.n	800b568 <USER_SPI_write+0xd8>
			count = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	e02c      	b.n	800b568 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b50e:	4b1d      	ldr	r3, [pc, #116]	@ (800b584 <USER_SPI_write+0xf4>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f003 0306 	and.w	r3, r3, #6
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <USER_SPI_write+0x92>
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	2097      	movs	r0, #151	@ 0x97
 800b51e:	f7ff fdd8 	bl	800b0d2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b522:	6879      	ldr	r1, [r7, #4]
 800b524:	2019      	movs	r0, #25
 800b526:	f7ff fdd4 	bl	800b0d2 <send_cmd>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d11b      	bne.n	800b568 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b530:	21fc      	movs	r1, #252	@ 0xfc
 800b532:	68b8      	ldr	r0, [r7, #8]
 800b534:	f7ff fd9b 	bl	800b06e <xmit_datablock>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00a      	beq.n	800b554 <USER_SPI_write+0xc4>
				buff += 512;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b544:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	3b01      	subs	r3, #1
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1ee      	bne.n	800b530 <USER_SPI_write+0xa0>
 800b552:	e000      	b.n	800b556 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b554:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b556:	21fd      	movs	r1, #253	@ 0xfd
 800b558:	2000      	movs	r0, #0
 800b55a:	f7ff fd88 	bl	800b06e <xmit_datablock>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <USER_SPI_write+0xd8>
 800b564:	2301      	movs	r3, #1
 800b566:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b568:	f7ff fd2c 	bl	800afc4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bf14      	ite	ne
 800b572:	2301      	movne	r3, #1
 800b574:	2300      	moveq	r3, #0
 800b576:	b2db      	uxtb	r3, r3
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	2000006c 	.word	0x2000006c
 800b584:	20000ee8 	.word	0x20000ee8

0800b588 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08c      	sub	sp, #48	@ 0x30
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	603a      	str	r2, [r7, #0]
 800b592:	71fb      	strb	r3, [r7, #7]
 800b594:	460b      	mov	r3, r1
 800b596:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b598:	79fb      	ldrb	r3, [r7, #7]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <USER_SPI_ioctl+0x1a>
 800b59e:	2304      	movs	r3, #4
 800b5a0:	e15a      	b.n	800b858 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b5a2:	4baf      	ldr	r3, [pc, #700]	@ (800b860 <USER_SPI_ioctl+0x2d8>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <USER_SPI_ioctl+0x2c>
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e151      	b.n	800b858 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800b5ba:	79bb      	ldrb	r3, [r7, #6]
 800b5bc:	2b04      	cmp	r3, #4
 800b5be:	f200 8136 	bhi.w	800b82e <USER_SPI_ioctl+0x2a6>
 800b5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c8 <USER_SPI_ioctl+0x40>)
 800b5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c8:	0800b5dd 	.word	0x0800b5dd
 800b5cc:	0800b5f1 	.word	0x0800b5f1
 800b5d0:	0800b82f 	.word	0x0800b82f
 800b5d4:	0800b69d 	.word	0x0800b69d
 800b5d8:	0800b793 	.word	0x0800b793
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b5dc:	f7ff fd02 	bl	800afe4 <spiselect>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f000 8127 	beq.w	800b836 <USER_SPI_ioctl+0x2ae>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b5ee:	e122      	b.n	800b836 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	2009      	movs	r0, #9
 800b5f4:	f7ff fd6d 	bl	800b0d2 <send_cmd>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f040 811d 	bne.w	800b83a <USER_SPI_ioctl+0x2b2>
 800b600:	f107 030c 	add.w	r3, r7, #12
 800b604:	2110      	movs	r1, #16
 800b606:	4618      	mov	r0, r3
 800b608:	f7ff fd08 	bl	800b01c <rcvr_datablock>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f000 8113 	beq.w	800b83a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b614:	7b3b      	ldrb	r3, [r7, #12]
 800b616:	099b      	lsrs	r3, r3, #6
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d111      	bne.n	800b642 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b61e:	7d7b      	ldrb	r3, [r7, #21]
 800b620:	461a      	mov	r2, r3
 800b622:	7d3b      	ldrb	r3, [r7, #20]
 800b624:	021b      	lsls	r3, r3, #8
 800b626:	4413      	add	r3, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	7cfb      	ldrb	r3, [r7, #19]
 800b62c:	041b      	lsls	r3, r3, #16
 800b62e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b632:	4413      	add	r3, r2
 800b634:	3301      	adds	r3, #1
 800b636:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	029a      	lsls	r2, r3, #10
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	e028      	b.n	800b694 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b642:	7c7b      	ldrb	r3, [r7, #17]
 800b644:	f003 030f 	and.w	r3, r3, #15
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	7dbb      	ldrb	r3, [r7, #22]
 800b64c:	09db      	lsrs	r3, r3, #7
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	4413      	add	r3, r2
 800b652:	b2da      	uxtb	r2, r3
 800b654:	7d7b      	ldrb	r3, [r7, #21]
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	f003 0306 	and.w	r3, r3, #6
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	4413      	add	r3, r2
 800b662:	b2db      	uxtb	r3, r3
 800b664:	3302      	adds	r3, #2
 800b666:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b66a:	7d3b      	ldrb	r3, [r7, #20]
 800b66c:	099b      	lsrs	r3, r3, #6
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	461a      	mov	r2, r3
 800b672:	7cfb      	ldrb	r3, [r7, #19]
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	441a      	add	r2, r3
 800b678:	7cbb      	ldrb	r3, [r7, #18]
 800b67a:	029b      	lsls	r3, r3, #10
 800b67c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b680:	4413      	add	r3, r2
 800b682:	3301      	adds	r3, #1
 800b684:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b686:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b68a:	3b09      	subs	r3, #9
 800b68c:	69fa      	ldr	r2, [r7, #28]
 800b68e:	409a      	lsls	r2, r3
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b694:	2300      	movs	r3, #0
 800b696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b69a:	e0ce      	b.n	800b83a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b69c:	4b71      	ldr	r3, [pc, #452]	@ (800b864 <USER_SPI_ioctl+0x2dc>)
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	f003 0304 	and.w	r3, r3, #4
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d031      	beq.n	800b70c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	208d      	movs	r0, #141	@ 0x8d
 800b6ac:	f7ff fd11 	bl	800b0d2 <send_cmd>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f040 80c3 	bne.w	800b83e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b6b8:	20ff      	movs	r0, #255	@ 0xff
 800b6ba:	f7ff fc19 	bl	800aef0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b6be:	f107 030c 	add.w	r3, r7, #12
 800b6c2:	2110      	movs	r1, #16
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff fca9 	bl	800b01c <rcvr_datablock>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 80b6 	beq.w	800b83e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b6d2:	2330      	movs	r3, #48	@ 0x30
 800b6d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b6d8:	e007      	b.n	800b6ea <USER_SPI_ioctl+0x162>
 800b6da:	20ff      	movs	r0, #255	@ 0xff
 800b6dc:	f7ff fc08 	bl	800aef0 <xchg_spi>
 800b6e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b6ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1f3      	bne.n	800b6da <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b6f2:	7dbb      	ldrb	r3, [r7, #22]
 800b6f4:	091b      	lsrs	r3, r3, #4
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	2310      	movs	r3, #16
 800b6fc:	fa03 f202 	lsl.w	r2, r3, r2
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b70a:	e098      	b.n	800b83e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b70c:	2100      	movs	r1, #0
 800b70e:	2009      	movs	r0, #9
 800b710:	f7ff fcdf 	bl	800b0d2 <send_cmd>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	f040 8091 	bne.w	800b83e <USER_SPI_ioctl+0x2b6>
 800b71c:	f107 030c 	add.w	r3, r7, #12
 800b720:	2110      	movs	r1, #16
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff fc7a 	bl	800b01c <rcvr_datablock>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 8087 	beq.w	800b83e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b730:	4b4c      	ldr	r3, [pc, #304]	@ (800b864 <USER_SPI_ioctl+0x2dc>)
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d012      	beq.n	800b762 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b73c:	7dbb      	ldrb	r3, [r7, #22]
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b744:	7dfa      	ldrb	r2, [r7, #23]
 800b746:	09d2      	lsrs	r2, r2, #7
 800b748:	b2d2      	uxtb	r2, r2
 800b74a:	4413      	add	r3, r2
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	7e7b      	ldrb	r3, [r7, #25]
 800b750:	099b      	lsrs	r3, r3, #6
 800b752:	b2db      	uxtb	r3, r3
 800b754:	3b01      	subs	r3, #1
 800b756:	fa02 f303 	lsl.w	r3, r2, r3
 800b75a:	461a      	mov	r2, r3
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	e013      	b.n	800b78a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b762:	7dbb      	ldrb	r3, [r7, #22]
 800b764:	109b      	asrs	r3, r3, #2
 800b766:	b29b      	uxth	r3, r3
 800b768:	f003 031f 	and.w	r3, r3, #31
 800b76c:	3301      	adds	r3, #1
 800b76e:	7dfa      	ldrb	r2, [r7, #23]
 800b770:	00d2      	lsls	r2, r2, #3
 800b772:	f002 0218 	and.w	r2, r2, #24
 800b776:	7df9      	ldrb	r1, [r7, #23]
 800b778:	0949      	lsrs	r1, r1, #5
 800b77a:	b2c9      	uxtb	r1, r1
 800b77c:	440a      	add	r2, r1
 800b77e:	3201      	adds	r2, #1
 800b780:	fb02 f303 	mul.w	r3, r2, r3
 800b784:	461a      	mov	r2, r3
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b790:	e055      	b.n	800b83e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b792:	4b34      	ldr	r3, [pc, #208]	@ (800b864 <USER_SPI_ioctl+0x2dc>)
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	f003 0306 	and.w	r3, r3, #6
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d051      	beq.n	800b842 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b79e:	f107 020c 	add.w	r2, r7, #12
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	210b      	movs	r1, #11
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff feee 	bl	800b588 <USER_SPI_ioctl>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d149      	bne.n	800b846 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b7b2:	7b3b      	ldrb	r3, [r7, #12]
 800b7b4:	099b      	lsrs	r3, r3, #6
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d104      	bne.n	800b7c6 <USER_SPI_ioctl+0x23e>
 800b7bc:	7dbb      	ldrb	r3, [r7, #22]
 800b7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d041      	beq.n	800b84a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	623b      	str	r3, [r7, #32]
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800b7d6:	4b23      	ldr	r3, [pc, #140]	@ (800b864 <USER_SPI_ioctl+0x2dc>)
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	f003 0308 	and.w	r3, r3, #8
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d105      	bne.n	800b7ee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e4:	025b      	lsls	r3, r3, #9
 800b7e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	025b      	lsls	r3, r3, #9
 800b7ec:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b7ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7f0:	2020      	movs	r0, #32
 800b7f2:	f7ff fc6e 	bl	800b0d2 <send_cmd>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d128      	bne.n	800b84e <USER_SPI_ioctl+0x2c6>
 800b7fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7fe:	2021      	movs	r0, #33	@ 0x21
 800b800:	f7ff fc67 	bl	800b0d2 <send_cmd>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d121      	bne.n	800b84e <USER_SPI_ioctl+0x2c6>
 800b80a:	2100      	movs	r1, #0
 800b80c:	2026      	movs	r0, #38	@ 0x26
 800b80e:	f7ff fc60 	bl	800b0d2 <send_cmd>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d11a      	bne.n	800b84e <USER_SPI_ioctl+0x2c6>
 800b818:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b81c:	f7ff fbae 	bl	800af7c <wait_ready>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d013      	beq.n	800b84e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b826:	2300      	movs	r3, #0
 800b828:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b82c:	e00f      	b.n	800b84e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b82e:	2304      	movs	r3, #4
 800b830:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b834:	e00c      	b.n	800b850 <USER_SPI_ioctl+0x2c8>
		break;
 800b836:	bf00      	nop
 800b838:	e00a      	b.n	800b850 <USER_SPI_ioctl+0x2c8>
		break;
 800b83a:	bf00      	nop
 800b83c:	e008      	b.n	800b850 <USER_SPI_ioctl+0x2c8>
		break;
 800b83e:	bf00      	nop
 800b840:	e006      	b.n	800b850 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b842:	bf00      	nop
 800b844:	e004      	b.n	800b850 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b846:	bf00      	nop
 800b848:	e002      	b.n	800b850 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b84a:	bf00      	nop
 800b84c:	e000      	b.n	800b850 <USER_SPI_ioctl+0x2c8>
		break;
 800b84e:	bf00      	nop
	}

	despiselect();
 800b850:	f7ff fbb8 	bl	800afc4 <despiselect>

	return res;
 800b854:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3730      	adds	r7, #48	@ 0x30
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	2000006c 	.word	0x2000006c
 800b864:	20000ee8 	.word	0x20000ee8

0800b868 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	4613      	mov	r3, r2
 800b874:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b876:	2301      	movs	r3, #1
 800b878:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b87e:	4b1f      	ldr	r3, [pc, #124]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b880:	7a5b      	ldrb	r3, [r3, #9]
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d131      	bne.n	800b8ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b888:	4b1c      	ldr	r3, [pc, #112]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b88a:	7a5b      	ldrb	r3, [r3, #9]
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	461a      	mov	r2, r3
 800b890:	4b1a      	ldr	r3, [pc, #104]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b892:	2100      	movs	r1, #0
 800b894:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b896:	4b19      	ldr	r3, [pc, #100]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b898:	7a5b      	ldrb	r3, [r3, #9]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	4a17      	ldr	r2, [pc, #92]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b8a6:	4b15      	ldr	r3, [pc, #84]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b8a8:	7a5b      	ldrb	r3, [r3, #9]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	4b13      	ldr	r3, [pc, #76]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b8b0:	4413      	add	r3, r2
 800b8b2:	79fa      	ldrb	r2, [r7, #7]
 800b8b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b8b6:	4b11      	ldr	r3, [pc, #68]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b8b8:	7a5b      	ldrb	r3, [r3, #9]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	b2d1      	uxtb	r1, r2
 800b8c0:	4a0e      	ldr	r2, [pc, #56]	@ (800b8fc <FATFS_LinkDriverEx+0x94>)
 800b8c2:	7251      	strb	r1, [r2, #9]
 800b8c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b8c6:	7dbb      	ldrb	r3, [r7, #22]
 800b8c8:	3330      	adds	r3, #48	@ 0x30
 800b8ca:	b2da      	uxtb	r2, r3
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	223a      	movs	r2, #58	@ 0x3a
 800b8d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	3302      	adds	r3, #2
 800b8dc:	222f      	movs	r2, #47	@ 0x2f
 800b8de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	3303      	adds	r3, #3
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	371c      	adds	r7, #28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	20000ef4 	.word	0x20000ef4

0800b900 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b90a:	2200      	movs	r2, #0
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff ffaa 	bl	800b868 <FATFS_LinkDriverEx>
 800b914:	4603      	mov	r3, r0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <sniprintf>:
 800b920:	b40c      	push	{r2, r3}
 800b922:	b530      	push	{r4, r5, lr}
 800b924:	4b17      	ldr	r3, [pc, #92]	@ (800b984 <sniprintf+0x64>)
 800b926:	1e0c      	subs	r4, r1, #0
 800b928:	681d      	ldr	r5, [r3, #0]
 800b92a:	b09d      	sub	sp, #116	@ 0x74
 800b92c:	da08      	bge.n	800b940 <sniprintf+0x20>
 800b92e:	238b      	movs	r3, #139	@ 0x8b
 800b930:	602b      	str	r3, [r5, #0]
 800b932:	f04f 30ff 	mov.w	r0, #4294967295
 800b936:	b01d      	add	sp, #116	@ 0x74
 800b938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b93c:	b002      	add	sp, #8
 800b93e:	4770      	bx	lr
 800b940:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b944:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b948:	bf14      	ite	ne
 800b94a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b94e:	4623      	moveq	r3, r4
 800b950:	9304      	str	r3, [sp, #16]
 800b952:	9307      	str	r3, [sp, #28]
 800b954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b958:	9002      	str	r0, [sp, #8]
 800b95a:	9006      	str	r0, [sp, #24]
 800b95c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b960:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b962:	ab21      	add	r3, sp, #132	@ 0x84
 800b964:	a902      	add	r1, sp, #8
 800b966:	4628      	mov	r0, r5
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	f000 f9c3 	bl	800bcf4 <_svfiprintf_r>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	bfbc      	itt	lt
 800b972:	238b      	movlt	r3, #139	@ 0x8b
 800b974:	602b      	strlt	r3, [r5, #0]
 800b976:	2c00      	cmp	r4, #0
 800b978:	d0dd      	beq.n	800b936 <sniprintf+0x16>
 800b97a:	9b02      	ldr	r3, [sp, #8]
 800b97c:	2200      	movs	r2, #0
 800b97e:	701a      	strb	r2, [r3, #0]
 800b980:	e7d9      	b.n	800b936 <sniprintf+0x16>
 800b982:	bf00      	nop
 800b984:	20000070 	.word	0x20000070

0800b988 <siprintf>:
 800b988:	b40e      	push	{r1, r2, r3}
 800b98a:	b500      	push	{lr}
 800b98c:	b09c      	sub	sp, #112	@ 0x70
 800b98e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b990:	9002      	str	r0, [sp, #8]
 800b992:	9006      	str	r0, [sp, #24]
 800b994:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b998:	4809      	ldr	r0, [pc, #36]	@ (800b9c0 <siprintf+0x38>)
 800b99a:	9107      	str	r1, [sp, #28]
 800b99c:	9104      	str	r1, [sp, #16]
 800b99e:	4909      	ldr	r1, [pc, #36]	@ (800b9c4 <siprintf+0x3c>)
 800b9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a4:	9105      	str	r1, [sp, #20]
 800b9a6:	6800      	ldr	r0, [r0, #0]
 800b9a8:	9301      	str	r3, [sp, #4]
 800b9aa:	a902      	add	r1, sp, #8
 800b9ac:	f000 f9a2 	bl	800bcf4 <_svfiprintf_r>
 800b9b0:	9b02      	ldr	r3, [sp, #8]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	701a      	strb	r2, [r3, #0]
 800b9b6:	b01c      	add	sp, #112	@ 0x70
 800b9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9bc:	b003      	add	sp, #12
 800b9be:	4770      	bx	lr
 800b9c0:	20000070 	.word	0x20000070
 800b9c4:	ffff0208 	.word	0xffff0208

0800b9c8 <memset>:
 800b9c8:	4402      	add	r2, r0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d100      	bne.n	800b9d2 <memset+0xa>
 800b9d0:	4770      	bx	lr
 800b9d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d6:	e7f9      	b.n	800b9cc <memset+0x4>

0800b9d8 <__errno>:
 800b9d8:	4b01      	ldr	r3, [pc, #4]	@ (800b9e0 <__errno+0x8>)
 800b9da:	6818      	ldr	r0, [r3, #0]
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	20000070 	.word	0x20000070

0800b9e4 <__libc_init_array>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	4d0d      	ldr	r5, [pc, #52]	@ (800ba1c <__libc_init_array+0x38>)
 800b9e8:	4c0d      	ldr	r4, [pc, #52]	@ (800ba20 <__libc_init_array+0x3c>)
 800b9ea:	1b64      	subs	r4, r4, r5
 800b9ec:	10a4      	asrs	r4, r4, #2
 800b9ee:	2600      	movs	r6, #0
 800b9f0:	42a6      	cmp	r6, r4
 800b9f2:	d109      	bne.n	800ba08 <__libc_init_array+0x24>
 800b9f4:	4d0b      	ldr	r5, [pc, #44]	@ (800ba24 <__libc_init_array+0x40>)
 800b9f6:	4c0c      	ldr	r4, [pc, #48]	@ (800ba28 <__libc_init_array+0x44>)
 800b9f8:	f000 fcbc 	bl	800c374 <_init>
 800b9fc:	1b64      	subs	r4, r4, r5
 800b9fe:	10a4      	asrs	r4, r4, #2
 800ba00:	2600      	movs	r6, #0
 800ba02:	42a6      	cmp	r6, r4
 800ba04:	d105      	bne.n	800ba12 <__libc_init_array+0x2e>
 800ba06:	bd70      	pop	{r4, r5, r6, pc}
 800ba08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba0c:	4798      	blx	r3
 800ba0e:	3601      	adds	r6, #1
 800ba10:	e7ee      	b.n	800b9f0 <__libc_init_array+0xc>
 800ba12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba16:	4798      	blx	r3
 800ba18:	3601      	adds	r6, #1
 800ba1a:	e7f2      	b.n	800ba02 <__libc_init_array+0x1e>
 800ba1c:	0800ca4c 	.word	0x0800ca4c
 800ba20:	0800ca4c 	.word	0x0800ca4c
 800ba24:	0800ca4c 	.word	0x0800ca4c
 800ba28:	0800ca50 	.word	0x0800ca50

0800ba2c <__retarget_lock_acquire_recursive>:
 800ba2c:	4770      	bx	lr

0800ba2e <__retarget_lock_release_recursive>:
 800ba2e:	4770      	bx	lr

0800ba30 <memcpy>:
 800ba30:	440a      	add	r2, r1
 800ba32:	4291      	cmp	r1, r2
 800ba34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba38:	d100      	bne.n	800ba3c <memcpy+0xc>
 800ba3a:	4770      	bx	lr
 800ba3c:	b510      	push	{r4, lr}
 800ba3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba46:	4291      	cmp	r1, r2
 800ba48:	d1f9      	bne.n	800ba3e <memcpy+0xe>
 800ba4a:	bd10      	pop	{r4, pc}

0800ba4c <_free_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4605      	mov	r5, r0
 800ba50:	2900      	cmp	r1, #0
 800ba52:	d041      	beq.n	800bad8 <_free_r+0x8c>
 800ba54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba58:	1f0c      	subs	r4, r1, #4
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	bfb8      	it	lt
 800ba5e:	18e4      	addlt	r4, r4, r3
 800ba60:	f000 f8e0 	bl	800bc24 <__malloc_lock>
 800ba64:	4a1d      	ldr	r2, [pc, #116]	@ (800badc <_free_r+0x90>)
 800ba66:	6813      	ldr	r3, [r2, #0]
 800ba68:	b933      	cbnz	r3, 800ba78 <_free_r+0x2c>
 800ba6a:	6063      	str	r3, [r4, #4]
 800ba6c:	6014      	str	r4, [r2, #0]
 800ba6e:	4628      	mov	r0, r5
 800ba70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba74:	f000 b8dc 	b.w	800bc30 <__malloc_unlock>
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	d908      	bls.n	800ba8e <_free_r+0x42>
 800ba7c:	6820      	ldr	r0, [r4, #0]
 800ba7e:	1821      	adds	r1, r4, r0
 800ba80:	428b      	cmp	r3, r1
 800ba82:	bf01      	itttt	eq
 800ba84:	6819      	ldreq	r1, [r3, #0]
 800ba86:	685b      	ldreq	r3, [r3, #4]
 800ba88:	1809      	addeq	r1, r1, r0
 800ba8a:	6021      	streq	r1, [r4, #0]
 800ba8c:	e7ed      	b.n	800ba6a <_free_r+0x1e>
 800ba8e:	461a      	mov	r2, r3
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	b10b      	cbz	r3, 800ba98 <_free_r+0x4c>
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	d9fa      	bls.n	800ba8e <_free_r+0x42>
 800ba98:	6811      	ldr	r1, [r2, #0]
 800ba9a:	1850      	adds	r0, r2, r1
 800ba9c:	42a0      	cmp	r0, r4
 800ba9e:	d10b      	bne.n	800bab8 <_free_r+0x6c>
 800baa0:	6820      	ldr	r0, [r4, #0]
 800baa2:	4401      	add	r1, r0
 800baa4:	1850      	adds	r0, r2, r1
 800baa6:	4283      	cmp	r3, r0
 800baa8:	6011      	str	r1, [r2, #0]
 800baaa:	d1e0      	bne.n	800ba6e <_free_r+0x22>
 800baac:	6818      	ldr	r0, [r3, #0]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	6053      	str	r3, [r2, #4]
 800bab2:	4408      	add	r0, r1
 800bab4:	6010      	str	r0, [r2, #0]
 800bab6:	e7da      	b.n	800ba6e <_free_r+0x22>
 800bab8:	d902      	bls.n	800bac0 <_free_r+0x74>
 800baba:	230c      	movs	r3, #12
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	e7d6      	b.n	800ba6e <_free_r+0x22>
 800bac0:	6820      	ldr	r0, [r4, #0]
 800bac2:	1821      	adds	r1, r4, r0
 800bac4:	428b      	cmp	r3, r1
 800bac6:	bf04      	itt	eq
 800bac8:	6819      	ldreq	r1, [r3, #0]
 800baca:	685b      	ldreq	r3, [r3, #4]
 800bacc:	6063      	str	r3, [r4, #4]
 800bace:	bf04      	itt	eq
 800bad0:	1809      	addeq	r1, r1, r0
 800bad2:	6021      	streq	r1, [r4, #0]
 800bad4:	6054      	str	r4, [r2, #4]
 800bad6:	e7ca      	b.n	800ba6e <_free_r+0x22>
 800bad8:	bd38      	pop	{r3, r4, r5, pc}
 800bada:	bf00      	nop
 800badc:	20001044 	.word	0x20001044

0800bae0 <sbrk_aligned>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	4e0f      	ldr	r6, [pc, #60]	@ (800bb20 <sbrk_aligned+0x40>)
 800bae4:	460c      	mov	r4, r1
 800bae6:	6831      	ldr	r1, [r6, #0]
 800bae8:	4605      	mov	r5, r0
 800baea:	b911      	cbnz	r1, 800baf2 <sbrk_aligned+0x12>
 800baec:	f000 fba6 	bl	800c23c <_sbrk_r>
 800baf0:	6030      	str	r0, [r6, #0]
 800baf2:	4621      	mov	r1, r4
 800baf4:	4628      	mov	r0, r5
 800baf6:	f000 fba1 	bl	800c23c <_sbrk_r>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d103      	bne.n	800bb06 <sbrk_aligned+0x26>
 800bafe:	f04f 34ff 	mov.w	r4, #4294967295
 800bb02:	4620      	mov	r0, r4
 800bb04:	bd70      	pop	{r4, r5, r6, pc}
 800bb06:	1cc4      	adds	r4, r0, #3
 800bb08:	f024 0403 	bic.w	r4, r4, #3
 800bb0c:	42a0      	cmp	r0, r4
 800bb0e:	d0f8      	beq.n	800bb02 <sbrk_aligned+0x22>
 800bb10:	1a21      	subs	r1, r4, r0
 800bb12:	4628      	mov	r0, r5
 800bb14:	f000 fb92 	bl	800c23c <_sbrk_r>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d1f2      	bne.n	800bb02 <sbrk_aligned+0x22>
 800bb1c:	e7ef      	b.n	800bafe <sbrk_aligned+0x1e>
 800bb1e:	bf00      	nop
 800bb20:	20001040 	.word	0x20001040

0800bb24 <_malloc_r>:
 800bb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb28:	1ccd      	adds	r5, r1, #3
 800bb2a:	f025 0503 	bic.w	r5, r5, #3
 800bb2e:	3508      	adds	r5, #8
 800bb30:	2d0c      	cmp	r5, #12
 800bb32:	bf38      	it	cc
 800bb34:	250c      	movcc	r5, #12
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	4606      	mov	r6, r0
 800bb3a:	db01      	blt.n	800bb40 <_malloc_r+0x1c>
 800bb3c:	42a9      	cmp	r1, r5
 800bb3e:	d904      	bls.n	800bb4a <_malloc_r+0x26>
 800bb40:	230c      	movs	r3, #12
 800bb42:	6033      	str	r3, [r6, #0]
 800bb44:	2000      	movs	r0, #0
 800bb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc20 <_malloc_r+0xfc>
 800bb4e:	f000 f869 	bl	800bc24 <__malloc_lock>
 800bb52:	f8d8 3000 	ldr.w	r3, [r8]
 800bb56:	461c      	mov	r4, r3
 800bb58:	bb44      	cbnz	r4, 800bbac <_malloc_r+0x88>
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7ff ffbf 	bl	800bae0 <sbrk_aligned>
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	4604      	mov	r4, r0
 800bb66:	d158      	bne.n	800bc1a <_malloc_r+0xf6>
 800bb68:	f8d8 4000 	ldr.w	r4, [r8]
 800bb6c:	4627      	mov	r7, r4
 800bb6e:	2f00      	cmp	r7, #0
 800bb70:	d143      	bne.n	800bbfa <_malloc_r+0xd6>
 800bb72:	2c00      	cmp	r4, #0
 800bb74:	d04b      	beq.n	800bc0e <_malloc_r+0xea>
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	4639      	mov	r1, r7
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	eb04 0903 	add.w	r9, r4, r3
 800bb80:	f000 fb5c 	bl	800c23c <_sbrk_r>
 800bb84:	4581      	cmp	r9, r0
 800bb86:	d142      	bne.n	800bc0e <_malloc_r+0xea>
 800bb88:	6821      	ldr	r1, [r4, #0]
 800bb8a:	1a6d      	subs	r5, r5, r1
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f7ff ffa6 	bl	800bae0 <sbrk_aligned>
 800bb94:	3001      	adds	r0, #1
 800bb96:	d03a      	beq.n	800bc0e <_malloc_r+0xea>
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	442b      	add	r3, r5
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	f8d8 3000 	ldr.w	r3, [r8]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	bb62      	cbnz	r2, 800bc00 <_malloc_r+0xdc>
 800bba6:	f8c8 7000 	str.w	r7, [r8]
 800bbaa:	e00f      	b.n	800bbcc <_malloc_r+0xa8>
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	1b52      	subs	r2, r2, r5
 800bbb0:	d420      	bmi.n	800bbf4 <_malloc_r+0xd0>
 800bbb2:	2a0b      	cmp	r2, #11
 800bbb4:	d917      	bls.n	800bbe6 <_malloc_r+0xc2>
 800bbb6:	1961      	adds	r1, r4, r5
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	6025      	str	r5, [r4, #0]
 800bbbc:	bf18      	it	ne
 800bbbe:	6059      	strne	r1, [r3, #4]
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	bf08      	it	eq
 800bbc4:	f8c8 1000 	streq.w	r1, [r8]
 800bbc8:	5162      	str	r2, [r4, r5]
 800bbca:	604b      	str	r3, [r1, #4]
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f000 f82f 	bl	800bc30 <__malloc_unlock>
 800bbd2:	f104 000b 	add.w	r0, r4, #11
 800bbd6:	1d23      	adds	r3, r4, #4
 800bbd8:	f020 0007 	bic.w	r0, r0, #7
 800bbdc:	1ac2      	subs	r2, r0, r3
 800bbde:	bf1c      	itt	ne
 800bbe0:	1a1b      	subne	r3, r3, r0
 800bbe2:	50a3      	strne	r3, [r4, r2]
 800bbe4:	e7af      	b.n	800bb46 <_malloc_r+0x22>
 800bbe6:	6862      	ldr	r2, [r4, #4]
 800bbe8:	42a3      	cmp	r3, r4
 800bbea:	bf0c      	ite	eq
 800bbec:	f8c8 2000 	streq.w	r2, [r8]
 800bbf0:	605a      	strne	r2, [r3, #4]
 800bbf2:	e7eb      	b.n	800bbcc <_malloc_r+0xa8>
 800bbf4:	4623      	mov	r3, r4
 800bbf6:	6864      	ldr	r4, [r4, #4]
 800bbf8:	e7ae      	b.n	800bb58 <_malloc_r+0x34>
 800bbfa:	463c      	mov	r4, r7
 800bbfc:	687f      	ldr	r7, [r7, #4]
 800bbfe:	e7b6      	b.n	800bb6e <_malloc_r+0x4a>
 800bc00:	461a      	mov	r2, r3
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	d1fb      	bne.n	800bc00 <_malloc_r+0xdc>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	6053      	str	r3, [r2, #4]
 800bc0c:	e7de      	b.n	800bbcc <_malloc_r+0xa8>
 800bc0e:	230c      	movs	r3, #12
 800bc10:	6033      	str	r3, [r6, #0]
 800bc12:	4630      	mov	r0, r6
 800bc14:	f000 f80c 	bl	800bc30 <__malloc_unlock>
 800bc18:	e794      	b.n	800bb44 <_malloc_r+0x20>
 800bc1a:	6005      	str	r5, [r0, #0]
 800bc1c:	e7d6      	b.n	800bbcc <_malloc_r+0xa8>
 800bc1e:	bf00      	nop
 800bc20:	20001044 	.word	0x20001044

0800bc24 <__malloc_lock>:
 800bc24:	4801      	ldr	r0, [pc, #4]	@ (800bc2c <__malloc_lock+0x8>)
 800bc26:	f7ff bf01 	b.w	800ba2c <__retarget_lock_acquire_recursive>
 800bc2a:	bf00      	nop
 800bc2c:	2000103c 	.word	0x2000103c

0800bc30 <__malloc_unlock>:
 800bc30:	4801      	ldr	r0, [pc, #4]	@ (800bc38 <__malloc_unlock+0x8>)
 800bc32:	f7ff befc 	b.w	800ba2e <__retarget_lock_release_recursive>
 800bc36:	bf00      	nop
 800bc38:	2000103c 	.word	0x2000103c

0800bc3c <__ssputs_r>:
 800bc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc40:	688e      	ldr	r6, [r1, #8]
 800bc42:	461f      	mov	r7, r3
 800bc44:	42be      	cmp	r6, r7
 800bc46:	680b      	ldr	r3, [r1, #0]
 800bc48:	4682      	mov	sl, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	4690      	mov	r8, r2
 800bc4e:	d82d      	bhi.n	800bcac <__ssputs_r+0x70>
 800bc50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc58:	d026      	beq.n	800bca8 <__ssputs_r+0x6c>
 800bc5a:	6965      	ldr	r5, [r4, #20]
 800bc5c:	6909      	ldr	r1, [r1, #16]
 800bc5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc62:	eba3 0901 	sub.w	r9, r3, r1
 800bc66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc6a:	1c7b      	adds	r3, r7, #1
 800bc6c:	444b      	add	r3, r9
 800bc6e:	106d      	asrs	r5, r5, #1
 800bc70:	429d      	cmp	r5, r3
 800bc72:	bf38      	it	cc
 800bc74:	461d      	movcc	r5, r3
 800bc76:	0553      	lsls	r3, r2, #21
 800bc78:	d527      	bpl.n	800bcca <__ssputs_r+0x8e>
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f7ff ff52 	bl	800bb24 <_malloc_r>
 800bc80:	4606      	mov	r6, r0
 800bc82:	b360      	cbz	r0, 800bcde <__ssputs_r+0xa2>
 800bc84:	6921      	ldr	r1, [r4, #16]
 800bc86:	464a      	mov	r2, r9
 800bc88:	f7ff fed2 	bl	800ba30 <memcpy>
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc96:	81a3      	strh	r3, [r4, #12]
 800bc98:	6126      	str	r6, [r4, #16]
 800bc9a:	6165      	str	r5, [r4, #20]
 800bc9c:	444e      	add	r6, r9
 800bc9e:	eba5 0509 	sub.w	r5, r5, r9
 800bca2:	6026      	str	r6, [r4, #0]
 800bca4:	60a5      	str	r5, [r4, #8]
 800bca6:	463e      	mov	r6, r7
 800bca8:	42be      	cmp	r6, r7
 800bcaa:	d900      	bls.n	800bcae <__ssputs_r+0x72>
 800bcac:	463e      	mov	r6, r7
 800bcae:	6820      	ldr	r0, [r4, #0]
 800bcb0:	4632      	mov	r2, r6
 800bcb2:	4641      	mov	r1, r8
 800bcb4:	f000 faa8 	bl	800c208 <memmove>
 800bcb8:	68a3      	ldr	r3, [r4, #8]
 800bcba:	1b9b      	subs	r3, r3, r6
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	4433      	add	r3, r6
 800bcc2:	6023      	str	r3, [r4, #0]
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcca:	462a      	mov	r2, r5
 800bccc:	f000 fac6 	bl	800c25c <_realloc_r>
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d1e0      	bne.n	800bc98 <__ssputs_r+0x5c>
 800bcd6:	6921      	ldr	r1, [r4, #16]
 800bcd8:	4650      	mov	r0, sl
 800bcda:	f7ff feb7 	bl	800ba4c <_free_r>
 800bcde:	230c      	movs	r3, #12
 800bce0:	f8ca 3000 	str.w	r3, [sl]
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcea:	81a3      	strh	r3, [r4, #12]
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf0:	e7e9      	b.n	800bcc6 <__ssputs_r+0x8a>
	...

0800bcf4 <_svfiprintf_r>:
 800bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf8:	4698      	mov	r8, r3
 800bcfa:	898b      	ldrh	r3, [r1, #12]
 800bcfc:	061b      	lsls	r3, r3, #24
 800bcfe:	b09d      	sub	sp, #116	@ 0x74
 800bd00:	4607      	mov	r7, r0
 800bd02:	460d      	mov	r5, r1
 800bd04:	4614      	mov	r4, r2
 800bd06:	d510      	bpl.n	800bd2a <_svfiprintf_r+0x36>
 800bd08:	690b      	ldr	r3, [r1, #16]
 800bd0a:	b973      	cbnz	r3, 800bd2a <_svfiprintf_r+0x36>
 800bd0c:	2140      	movs	r1, #64	@ 0x40
 800bd0e:	f7ff ff09 	bl	800bb24 <_malloc_r>
 800bd12:	6028      	str	r0, [r5, #0]
 800bd14:	6128      	str	r0, [r5, #16]
 800bd16:	b930      	cbnz	r0, 800bd26 <_svfiprintf_r+0x32>
 800bd18:	230c      	movs	r3, #12
 800bd1a:	603b      	str	r3, [r7, #0]
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd20:	b01d      	add	sp, #116	@ 0x74
 800bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd26:	2340      	movs	r3, #64	@ 0x40
 800bd28:	616b      	str	r3, [r5, #20]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd2e:	2320      	movs	r3, #32
 800bd30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd34:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd38:	2330      	movs	r3, #48	@ 0x30
 800bd3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bed8 <_svfiprintf_r+0x1e4>
 800bd3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd42:	f04f 0901 	mov.w	r9, #1
 800bd46:	4623      	mov	r3, r4
 800bd48:	469a      	mov	sl, r3
 800bd4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd4e:	b10a      	cbz	r2, 800bd54 <_svfiprintf_r+0x60>
 800bd50:	2a25      	cmp	r2, #37	@ 0x25
 800bd52:	d1f9      	bne.n	800bd48 <_svfiprintf_r+0x54>
 800bd54:	ebba 0b04 	subs.w	fp, sl, r4
 800bd58:	d00b      	beq.n	800bd72 <_svfiprintf_r+0x7e>
 800bd5a:	465b      	mov	r3, fp
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	4638      	mov	r0, r7
 800bd62:	f7ff ff6b 	bl	800bc3c <__ssputs_r>
 800bd66:	3001      	adds	r0, #1
 800bd68:	f000 80a7 	beq.w	800beba <_svfiprintf_r+0x1c6>
 800bd6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd6e:	445a      	add	r2, fp
 800bd70:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd72:	f89a 3000 	ldrb.w	r3, [sl]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 809f 	beq.w	800beba <_svfiprintf_r+0x1c6>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd86:	f10a 0a01 	add.w	sl, sl, #1
 800bd8a:	9304      	str	r3, [sp, #16]
 800bd8c:	9307      	str	r3, [sp, #28]
 800bd8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd92:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd94:	4654      	mov	r4, sl
 800bd96:	2205      	movs	r2, #5
 800bd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9c:	484e      	ldr	r0, [pc, #312]	@ (800bed8 <_svfiprintf_r+0x1e4>)
 800bd9e:	f7f4 fa3f 	bl	8000220 <memchr>
 800bda2:	9a04      	ldr	r2, [sp, #16]
 800bda4:	b9d8      	cbnz	r0, 800bdde <_svfiprintf_r+0xea>
 800bda6:	06d0      	lsls	r0, r2, #27
 800bda8:	bf44      	itt	mi
 800bdaa:	2320      	movmi	r3, #32
 800bdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb0:	0711      	lsls	r1, r2, #28
 800bdb2:	bf44      	itt	mi
 800bdb4:	232b      	movmi	r3, #43	@ 0x2b
 800bdb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdba:	f89a 3000 	ldrb.w	r3, [sl]
 800bdbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdc0:	d015      	beq.n	800bdee <_svfiprintf_r+0xfa>
 800bdc2:	9a07      	ldr	r2, [sp, #28]
 800bdc4:	4654      	mov	r4, sl
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	f04f 0c0a 	mov.w	ip, #10
 800bdcc:	4621      	mov	r1, r4
 800bdce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdd2:	3b30      	subs	r3, #48	@ 0x30
 800bdd4:	2b09      	cmp	r3, #9
 800bdd6:	d94b      	bls.n	800be70 <_svfiprintf_r+0x17c>
 800bdd8:	b1b0      	cbz	r0, 800be08 <_svfiprintf_r+0x114>
 800bdda:	9207      	str	r2, [sp, #28]
 800bddc:	e014      	b.n	800be08 <_svfiprintf_r+0x114>
 800bdde:	eba0 0308 	sub.w	r3, r0, r8
 800bde2:	fa09 f303 	lsl.w	r3, r9, r3
 800bde6:	4313      	orrs	r3, r2
 800bde8:	9304      	str	r3, [sp, #16]
 800bdea:	46a2      	mov	sl, r4
 800bdec:	e7d2      	b.n	800bd94 <_svfiprintf_r+0xa0>
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	1d19      	adds	r1, r3, #4
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	9103      	str	r1, [sp, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	bfbb      	ittet	lt
 800bdfa:	425b      	neglt	r3, r3
 800bdfc:	f042 0202 	orrlt.w	r2, r2, #2
 800be00:	9307      	strge	r3, [sp, #28]
 800be02:	9307      	strlt	r3, [sp, #28]
 800be04:	bfb8      	it	lt
 800be06:	9204      	strlt	r2, [sp, #16]
 800be08:	7823      	ldrb	r3, [r4, #0]
 800be0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800be0c:	d10a      	bne.n	800be24 <_svfiprintf_r+0x130>
 800be0e:	7863      	ldrb	r3, [r4, #1]
 800be10:	2b2a      	cmp	r3, #42	@ 0x2a
 800be12:	d132      	bne.n	800be7a <_svfiprintf_r+0x186>
 800be14:	9b03      	ldr	r3, [sp, #12]
 800be16:	1d1a      	adds	r2, r3, #4
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	9203      	str	r2, [sp, #12]
 800be1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be20:	3402      	adds	r4, #2
 800be22:	9305      	str	r3, [sp, #20]
 800be24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bee8 <_svfiprintf_r+0x1f4>
 800be28:	7821      	ldrb	r1, [r4, #0]
 800be2a:	2203      	movs	r2, #3
 800be2c:	4650      	mov	r0, sl
 800be2e:	f7f4 f9f7 	bl	8000220 <memchr>
 800be32:	b138      	cbz	r0, 800be44 <_svfiprintf_r+0x150>
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	eba0 000a 	sub.w	r0, r0, sl
 800be3a:	2240      	movs	r2, #64	@ 0x40
 800be3c:	4082      	lsls	r2, r0
 800be3e:	4313      	orrs	r3, r2
 800be40:	3401      	adds	r4, #1
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be48:	4824      	ldr	r0, [pc, #144]	@ (800bedc <_svfiprintf_r+0x1e8>)
 800be4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be4e:	2206      	movs	r2, #6
 800be50:	f7f4 f9e6 	bl	8000220 <memchr>
 800be54:	2800      	cmp	r0, #0
 800be56:	d036      	beq.n	800bec6 <_svfiprintf_r+0x1d2>
 800be58:	4b21      	ldr	r3, [pc, #132]	@ (800bee0 <_svfiprintf_r+0x1ec>)
 800be5a:	bb1b      	cbnz	r3, 800bea4 <_svfiprintf_r+0x1b0>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	3307      	adds	r3, #7
 800be60:	f023 0307 	bic.w	r3, r3, #7
 800be64:	3308      	adds	r3, #8
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6a:	4433      	add	r3, r6
 800be6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be6e:	e76a      	b.n	800bd46 <_svfiprintf_r+0x52>
 800be70:	fb0c 3202 	mla	r2, ip, r2, r3
 800be74:	460c      	mov	r4, r1
 800be76:	2001      	movs	r0, #1
 800be78:	e7a8      	b.n	800bdcc <_svfiprintf_r+0xd8>
 800be7a:	2300      	movs	r3, #0
 800be7c:	3401      	adds	r4, #1
 800be7e:	9305      	str	r3, [sp, #20]
 800be80:	4619      	mov	r1, r3
 800be82:	f04f 0c0a 	mov.w	ip, #10
 800be86:	4620      	mov	r0, r4
 800be88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be8c:	3a30      	subs	r2, #48	@ 0x30
 800be8e:	2a09      	cmp	r2, #9
 800be90:	d903      	bls.n	800be9a <_svfiprintf_r+0x1a6>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0c6      	beq.n	800be24 <_svfiprintf_r+0x130>
 800be96:	9105      	str	r1, [sp, #20]
 800be98:	e7c4      	b.n	800be24 <_svfiprintf_r+0x130>
 800be9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800be9e:	4604      	mov	r4, r0
 800bea0:	2301      	movs	r3, #1
 800bea2:	e7f0      	b.n	800be86 <_svfiprintf_r+0x192>
 800bea4:	ab03      	add	r3, sp, #12
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	462a      	mov	r2, r5
 800beaa:	4b0e      	ldr	r3, [pc, #56]	@ (800bee4 <_svfiprintf_r+0x1f0>)
 800beac:	a904      	add	r1, sp, #16
 800beae:	4638      	mov	r0, r7
 800beb0:	f3af 8000 	nop.w
 800beb4:	1c42      	adds	r2, r0, #1
 800beb6:	4606      	mov	r6, r0
 800beb8:	d1d6      	bne.n	800be68 <_svfiprintf_r+0x174>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	065b      	lsls	r3, r3, #25
 800bebe:	f53f af2d 	bmi.w	800bd1c <_svfiprintf_r+0x28>
 800bec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bec4:	e72c      	b.n	800bd20 <_svfiprintf_r+0x2c>
 800bec6:	ab03      	add	r3, sp, #12
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	462a      	mov	r2, r5
 800becc:	4b05      	ldr	r3, [pc, #20]	@ (800bee4 <_svfiprintf_r+0x1f0>)
 800bece:	a904      	add	r1, sp, #16
 800bed0:	4638      	mov	r0, r7
 800bed2:	f000 f879 	bl	800bfc8 <_printf_i>
 800bed6:	e7ed      	b.n	800beb4 <_svfiprintf_r+0x1c0>
 800bed8:	0800ca10 	.word	0x0800ca10
 800bedc:	0800ca1a 	.word	0x0800ca1a
 800bee0:	00000000 	.word	0x00000000
 800bee4:	0800bc3d 	.word	0x0800bc3d
 800bee8:	0800ca16 	.word	0x0800ca16

0800beec <_printf_common>:
 800beec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef0:	4616      	mov	r6, r2
 800bef2:	4698      	mov	r8, r3
 800bef4:	688a      	ldr	r2, [r1, #8]
 800bef6:	690b      	ldr	r3, [r1, #16]
 800bef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800befc:	4293      	cmp	r3, r2
 800befe:	bfb8      	it	lt
 800bf00:	4613      	movlt	r3, r2
 800bf02:	6033      	str	r3, [r6, #0]
 800bf04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf08:	4607      	mov	r7, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	b10a      	cbz	r2, 800bf12 <_printf_common+0x26>
 800bf0e:	3301      	adds	r3, #1
 800bf10:	6033      	str	r3, [r6, #0]
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	0699      	lsls	r1, r3, #26
 800bf16:	bf42      	ittt	mi
 800bf18:	6833      	ldrmi	r3, [r6, #0]
 800bf1a:	3302      	addmi	r3, #2
 800bf1c:	6033      	strmi	r3, [r6, #0]
 800bf1e:	6825      	ldr	r5, [r4, #0]
 800bf20:	f015 0506 	ands.w	r5, r5, #6
 800bf24:	d106      	bne.n	800bf34 <_printf_common+0x48>
 800bf26:	f104 0a19 	add.w	sl, r4, #25
 800bf2a:	68e3      	ldr	r3, [r4, #12]
 800bf2c:	6832      	ldr	r2, [r6, #0]
 800bf2e:	1a9b      	subs	r3, r3, r2
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	dc26      	bgt.n	800bf82 <_printf_common+0x96>
 800bf34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf38:	6822      	ldr	r2, [r4, #0]
 800bf3a:	3b00      	subs	r3, #0
 800bf3c:	bf18      	it	ne
 800bf3e:	2301      	movne	r3, #1
 800bf40:	0692      	lsls	r2, r2, #26
 800bf42:	d42b      	bmi.n	800bf9c <_printf_common+0xb0>
 800bf44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf48:	4641      	mov	r1, r8
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	47c8      	blx	r9
 800bf4e:	3001      	adds	r0, #1
 800bf50:	d01e      	beq.n	800bf90 <_printf_common+0xa4>
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	6922      	ldr	r2, [r4, #16]
 800bf56:	f003 0306 	and.w	r3, r3, #6
 800bf5a:	2b04      	cmp	r3, #4
 800bf5c:	bf02      	ittt	eq
 800bf5e:	68e5      	ldreq	r5, [r4, #12]
 800bf60:	6833      	ldreq	r3, [r6, #0]
 800bf62:	1aed      	subeq	r5, r5, r3
 800bf64:	68a3      	ldr	r3, [r4, #8]
 800bf66:	bf0c      	ite	eq
 800bf68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf6c:	2500      	movne	r5, #0
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	bfc4      	itt	gt
 800bf72:	1a9b      	subgt	r3, r3, r2
 800bf74:	18ed      	addgt	r5, r5, r3
 800bf76:	2600      	movs	r6, #0
 800bf78:	341a      	adds	r4, #26
 800bf7a:	42b5      	cmp	r5, r6
 800bf7c:	d11a      	bne.n	800bfb4 <_printf_common+0xc8>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	e008      	b.n	800bf94 <_printf_common+0xa8>
 800bf82:	2301      	movs	r3, #1
 800bf84:	4652      	mov	r2, sl
 800bf86:	4641      	mov	r1, r8
 800bf88:	4638      	mov	r0, r7
 800bf8a:	47c8      	blx	r9
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d103      	bne.n	800bf98 <_printf_common+0xac>
 800bf90:	f04f 30ff 	mov.w	r0, #4294967295
 800bf94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf98:	3501      	adds	r5, #1
 800bf9a:	e7c6      	b.n	800bf2a <_printf_common+0x3e>
 800bf9c:	18e1      	adds	r1, r4, r3
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	2030      	movs	r0, #48	@ 0x30
 800bfa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfa6:	4422      	add	r2, r4
 800bfa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfb0:	3302      	adds	r3, #2
 800bfb2:	e7c7      	b.n	800bf44 <_printf_common+0x58>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	4622      	mov	r2, r4
 800bfb8:	4641      	mov	r1, r8
 800bfba:	4638      	mov	r0, r7
 800bfbc:	47c8      	blx	r9
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	d0e6      	beq.n	800bf90 <_printf_common+0xa4>
 800bfc2:	3601      	adds	r6, #1
 800bfc4:	e7d9      	b.n	800bf7a <_printf_common+0x8e>
	...

0800bfc8 <_printf_i>:
 800bfc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfcc:	7e0f      	ldrb	r7, [r1, #24]
 800bfce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfd0:	2f78      	cmp	r7, #120	@ 0x78
 800bfd2:	4691      	mov	r9, r2
 800bfd4:	4680      	mov	r8, r0
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	469a      	mov	sl, r3
 800bfda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfde:	d807      	bhi.n	800bff0 <_printf_i+0x28>
 800bfe0:	2f62      	cmp	r7, #98	@ 0x62
 800bfe2:	d80a      	bhi.n	800bffa <_printf_i+0x32>
 800bfe4:	2f00      	cmp	r7, #0
 800bfe6:	f000 80d2 	beq.w	800c18e <_printf_i+0x1c6>
 800bfea:	2f58      	cmp	r7, #88	@ 0x58
 800bfec:	f000 80b9 	beq.w	800c162 <_printf_i+0x19a>
 800bff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bff8:	e03a      	b.n	800c070 <_printf_i+0xa8>
 800bffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bffe:	2b15      	cmp	r3, #21
 800c000:	d8f6      	bhi.n	800bff0 <_printf_i+0x28>
 800c002:	a101      	add	r1, pc, #4	@ (adr r1, 800c008 <_printf_i+0x40>)
 800c004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c008:	0800c061 	.word	0x0800c061
 800c00c:	0800c075 	.word	0x0800c075
 800c010:	0800bff1 	.word	0x0800bff1
 800c014:	0800bff1 	.word	0x0800bff1
 800c018:	0800bff1 	.word	0x0800bff1
 800c01c:	0800bff1 	.word	0x0800bff1
 800c020:	0800c075 	.word	0x0800c075
 800c024:	0800bff1 	.word	0x0800bff1
 800c028:	0800bff1 	.word	0x0800bff1
 800c02c:	0800bff1 	.word	0x0800bff1
 800c030:	0800bff1 	.word	0x0800bff1
 800c034:	0800c175 	.word	0x0800c175
 800c038:	0800c09f 	.word	0x0800c09f
 800c03c:	0800c12f 	.word	0x0800c12f
 800c040:	0800bff1 	.word	0x0800bff1
 800c044:	0800bff1 	.word	0x0800bff1
 800c048:	0800c197 	.word	0x0800c197
 800c04c:	0800bff1 	.word	0x0800bff1
 800c050:	0800c09f 	.word	0x0800c09f
 800c054:	0800bff1 	.word	0x0800bff1
 800c058:	0800bff1 	.word	0x0800bff1
 800c05c:	0800c137 	.word	0x0800c137
 800c060:	6833      	ldr	r3, [r6, #0]
 800c062:	1d1a      	adds	r2, r3, #4
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6032      	str	r2, [r6, #0]
 800c068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c06c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c070:	2301      	movs	r3, #1
 800c072:	e09d      	b.n	800c1b0 <_printf_i+0x1e8>
 800c074:	6833      	ldr	r3, [r6, #0]
 800c076:	6820      	ldr	r0, [r4, #0]
 800c078:	1d19      	adds	r1, r3, #4
 800c07a:	6031      	str	r1, [r6, #0]
 800c07c:	0606      	lsls	r6, r0, #24
 800c07e:	d501      	bpl.n	800c084 <_printf_i+0xbc>
 800c080:	681d      	ldr	r5, [r3, #0]
 800c082:	e003      	b.n	800c08c <_printf_i+0xc4>
 800c084:	0645      	lsls	r5, r0, #25
 800c086:	d5fb      	bpl.n	800c080 <_printf_i+0xb8>
 800c088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c08c:	2d00      	cmp	r5, #0
 800c08e:	da03      	bge.n	800c098 <_printf_i+0xd0>
 800c090:	232d      	movs	r3, #45	@ 0x2d
 800c092:	426d      	negs	r5, r5
 800c094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c098:	4859      	ldr	r0, [pc, #356]	@ (800c200 <_printf_i+0x238>)
 800c09a:	230a      	movs	r3, #10
 800c09c:	e011      	b.n	800c0c2 <_printf_i+0xfa>
 800c09e:	6821      	ldr	r1, [r4, #0]
 800c0a0:	6833      	ldr	r3, [r6, #0]
 800c0a2:	0608      	lsls	r0, r1, #24
 800c0a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0a8:	d402      	bmi.n	800c0b0 <_printf_i+0xe8>
 800c0aa:	0649      	lsls	r1, r1, #25
 800c0ac:	bf48      	it	mi
 800c0ae:	b2ad      	uxthmi	r5, r5
 800c0b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0b2:	4853      	ldr	r0, [pc, #332]	@ (800c200 <_printf_i+0x238>)
 800c0b4:	6033      	str	r3, [r6, #0]
 800c0b6:	bf14      	ite	ne
 800c0b8:	230a      	movne	r3, #10
 800c0ba:	2308      	moveq	r3, #8
 800c0bc:	2100      	movs	r1, #0
 800c0be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0c2:	6866      	ldr	r6, [r4, #4]
 800c0c4:	60a6      	str	r6, [r4, #8]
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	bfa2      	ittt	ge
 800c0ca:	6821      	ldrge	r1, [r4, #0]
 800c0cc:	f021 0104 	bicge.w	r1, r1, #4
 800c0d0:	6021      	strge	r1, [r4, #0]
 800c0d2:	b90d      	cbnz	r5, 800c0d8 <_printf_i+0x110>
 800c0d4:	2e00      	cmp	r6, #0
 800c0d6:	d04b      	beq.n	800c170 <_printf_i+0x1a8>
 800c0d8:	4616      	mov	r6, r2
 800c0da:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0de:	fb03 5711 	mls	r7, r3, r1, r5
 800c0e2:	5dc7      	ldrb	r7, [r0, r7]
 800c0e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0e8:	462f      	mov	r7, r5
 800c0ea:	42bb      	cmp	r3, r7
 800c0ec:	460d      	mov	r5, r1
 800c0ee:	d9f4      	bls.n	800c0da <_printf_i+0x112>
 800c0f0:	2b08      	cmp	r3, #8
 800c0f2:	d10b      	bne.n	800c10c <_printf_i+0x144>
 800c0f4:	6823      	ldr	r3, [r4, #0]
 800c0f6:	07df      	lsls	r7, r3, #31
 800c0f8:	d508      	bpl.n	800c10c <_printf_i+0x144>
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	6861      	ldr	r1, [r4, #4]
 800c0fe:	4299      	cmp	r1, r3
 800c100:	bfde      	ittt	le
 800c102:	2330      	movle	r3, #48	@ 0x30
 800c104:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c108:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c10c:	1b92      	subs	r2, r2, r6
 800c10e:	6122      	str	r2, [r4, #16]
 800c110:	f8cd a000 	str.w	sl, [sp]
 800c114:	464b      	mov	r3, r9
 800c116:	aa03      	add	r2, sp, #12
 800c118:	4621      	mov	r1, r4
 800c11a:	4640      	mov	r0, r8
 800c11c:	f7ff fee6 	bl	800beec <_printf_common>
 800c120:	3001      	adds	r0, #1
 800c122:	d14a      	bne.n	800c1ba <_printf_i+0x1f2>
 800c124:	f04f 30ff 	mov.w	r0, #4294967295
 800c128:	b004      	add	sp, #16
 800c12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	f043 0320 	orr.w	r3, r3, #32
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	4833      	ldr	r0, [pc, #204]	@ (800c204 <_printf_i+0x23c>)
 800c138:	2778      	movs	r7, #120	@ 0x78
 800c13a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c13e:	6823      	ldr	r3, [r4, #0]
 800c140:	6831      	ldr	r1, [r6, #0]
 800c142:	061f      	lsls	r7, r3, #24
 800c144:	f851 5b04 	ldr.w	r5, [r1], #4
 800c148:	d402      	bmi.n	800c150 <_printf_i+0x188>
 800c14a:	065f      	lsls	r7, r3, #25
 800c14c:	bf48      	it	mi
 800c14e:	b2ad      	uxthmi	r5, r5
 800c150:	6031      	str	r1, [r6, #0]
 800c152:	07d9      	lsls	r1, r3, #31
 800c154:	bf44      	itt	mi
 800c156:	f043 0320 	orrmi.w	r3, r3, #32
 800c15a:	6023      	strmi	r3, [r4, #0]
 800c15c:	b11d      	cbz	r5, 800c166 <_printf_i+0x19e>
 800c15e:	2310      	movs	r3, #16
 800c160:	e7ac      	b.n	800c0bc <_printf_i+0xf4>
 800c162:	4827      	ldr	r0, [pc, #156]	@ (800c200 <_printf_i+0x238>)
 800c164:	e7e9      	b.n	800c13a <_printf_i+0x172>
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	f023 0320 	bic.w	r3, r3, #32
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	e7f6      	b.n	800c15e <_printf_i+0x196>
 800c170:	4616      	mov	r6, r2
 800c172:	e7bd      	b.n	800c0f0 <_printf_i+0x128>
 800c174:	6833      	ldr	r3, [r6, #0]
 800c176:	6825      	ldr	r5, [r4, #0]
 800c178:	6961      	ldr	r1, [r4, #20]
 800c17a:	1d18      	adds	r0, r3, #4
 800c17c:	6030      	str	r0, [r6, #0]
 800c17e:	062e      	lsls	r6, r5, #24
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	d501      	bpl.n	800c188 <_printf_i+0x1c0>
 800c184:	6019      	str	r1, [r3, #0]
 800c186:	e002      	b.n	800c18e <_printf_i+0x1c6>
 800c188:	0668      	lsls	r0, r5, #25
 800c18a:	d5fb      	bpl.n	800c184 <_printf_i+0x1bc>
 800c18c:	8019      	strh	r1, [r3, #0]
 800c18e:	2300      	movs	r3, #0
 800c190:	6123      	str	r3, [r4, #16]
 800c192:	4616      	mov	r6, r2
 800c194:	e7bc      	b.n	800c110 <_printf_i+0x148>
 800c196:	6833      	ldr	r3, [r6, #0]
 800c198:	1d1a      	adds	r2, r3, #4
 800c19a:	6032      	str	r2, [r6, #0]
 800c19c:	681e      	ldr	r6, [r3, #0]
 800c19e:	6862      	ldr	r2, [r4, #4]
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f7f4 f83c 	bl	8000220 <memchr>
 800c1a8:	b108      	cbz	r0, 800c1ae <_printf_i+0x1e6>
 800c1aa:	1b80      	subs	r0, r0, r6
 800c1ac:	6060      	str	r0, [r4, #4]
 800c1ae:	6863      	ldr	r3, [r4, #4]
 800c1b0:	6123      	str	r3, [r4, #16]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1b8:	e7aa      	b.n	800c110 <_printf_i+0x148>
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	4632      	mov	r2, r6
 800c1be:	4649      	mov	r1, r9
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	47d0      	blx	sl
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d0ad      	beq.n	800c124 <_printf_i+0x15c>
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	079b      	lsls	r3, r3, #30
 800c1cc:	d413      	bmi.n	800c1f6 <_printf_i+0x22e>
 800c1ce:	68e0      	ldr	r0, [r4, #12]
 800c1d0:	9b03      	ldr	r3, [sp, #12]
 800c1d2:	4298      	cmp	r0, r3
 800c1d4:	bfb8      	it	lt
 800c1d6:	4618      	movlt	r0, r3
 800c1d8:	e7a6      	b.n	800c128 <_printf_i+0x160>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4632      	mov	r2, r6
 800c1de:	4649      	mov	r1, r9
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	47d0      	blx	sl
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	d09d      	beq.n	800c124 <_printf_i+0x15c>
 800c1e8:	3501      	adds	r5, #1
 800c1ea:	68e3      	ldr	r3, [r4, #12]
 800c1ec:	9903      	ldr	r1, [sp, #12]
 800c1ee:	1a5b      	subs	r3, r3, r1
 800c1f0:	42ab      	cmp	r3, r5
 800c1f2:	dcf2      	bgt.n	800c1da <_printf_i+0x212>
 800c1f4:	e7eb      	b.n	800c1ce <_printf_i+0x206>
 800c1f6:	2500      	movs	r5, #0
 800c1f8:	f104 0619 	add.w	r6, r4, #25
 800c1fc:	e7f5      	b.n	800c1ea <_printf_i+0x222>
 800c1fe:	bf00      	nop
 800c200:	0800ca21 	.word	0x0800ca21
 800c204:	0800ca32 	.word	0x0800ca32

0800c208 <memmove>:
 800c208:	4288      	cmp	r0, r1
 800c20a:	b510      	push	{r4, lr}
 800c20c:	eb01 0402 	add.w	r4, r1, r2
 800c210:	d902      	bls.n	800c218 <memmove+0x10>
 800c212:	4284      	cmp	r4, r0
 800c214:	4623      	mov	r3, r4
 800c216:	d807      	bhi.n	800c228 <memmove+0x20>
 800c218:	1e43      	subs	r3, r0, #1
 800c21a:	42a1      	cmp	r1, r4
 800c21c:	d008      	beq.n	800c230 <memmove+0x28>
 800c21e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c222:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c226:	e7f8      	b.n	800c21a <memmove+0x12>
 800c228:	4402      	add	r2, r0
 800c22a:	4601      	mov	r1, r0
 800c22c:	428a      	cmp	r2, r1
 800c22e:	d100      	bne.n	800c232 <memmove+0x2a>
 800c230:	bd10      	pop	{r4, pc}
 800c232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c23a:	e7f7      	b.n	800c22c <memmove+0x24>

0800c23c <_sbrk_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d06      	ldr	r5, [pc, #24]	@ (800c258 <_sbrk_r+0x1c>)
 800c240:	2300      	movs	r3, #0
 800c242:	4604      	mov	r4, r0
 800c244:	4608      	mov	r0, r1
 800c246:	602b      	str	r3, [r5, #0]
 800c248:	f7f7 fede 	bl	8004008 <_sbrk>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_sbrk_r+0x1a>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_sbrk_r+0x1a>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	20001038 	.word	0x20001038

0800c25c <_realloc_r>:
 800c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c260:	4680      	mov	r8, r0
 800c262:	4615      	mov	r5, r2
 800c264:	460c      	mov	r4, r1
 800c266:	b921      	cbnz	r1, 800c272 <_realloc_r+0x16>
 800c268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c26c:	4611      	mov	r1, r2
 800c26e:	f7ff bc59 	b.w	800bb24 <_malloc_r>
 800c272:	b92a      	cbnz	r2, 800c280 <_realloc_r+0x24>
 800c274:	f7ff fbea 	bl	800ba4c <_free_r>
 800c278:	2400      	movs	r4, #0
 800c27a:	4620      	mov	r0, r4
 800c27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c280:	f000 f81a 	bl	800c2b8 <_malloc_usable_size_r>
 800c284:	4285      	cmp	r5, r0
 800c286:	4606      	mov	r6, r0
 800c288:	d802      	bhi.n	800c290 <_realloc_r+0x34>
 800c28a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c28e:	d8f4      	bhi.n	800c27a <_realloc_r+0x1e>
 800c290:	4629      	mov	r1, r5
 800c292:	4640      	mov	r0, r8
 800c294:	f7ff fc46 	bl	800bb24 <_malloc_r>
 800c298:	4607      	mov	r7, r0
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d0ec      	beq.n	800c278 <_realloc_r+0x1c>
 800c29e:	42b5      	cmp	r5, r6
 800c2a0:	462a      	mov	r2, r5
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	bf28      	it	cs
 800c2a6:	4632      	movcs	r2, r6
 800c2a8:	f7ff fbc2 	bl	800ba30 <memcpy>
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	f7ff fbcc 	bl	800ba4c <_free_r>
 800c2b4:	463c      	mov	r4, r7
 800c2b6:	e7e0      	b.n	800c27a <_realloc_r+0x1e>

0800c2b8 <_malloc_usable_size_r>:
 800c2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2bc:	1f18      	subs	r0, r3, #4
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	bfbc      	itt	lt
 800c2c2:	580b      	ldrlt	r3, [r1, r0]
 800c2c4:	18c0      	addlt	r0, r0, r3
 800c2c6:	4770      	bx	lr

0800c2c8 <fmaxf>:
 800c2c8:	b508      	push	{r3, lr}
 800c2ca:	ed2d 8b02 	vpush	{d8}
 800c2ce:	eeb0 8a40 	vmov.f32	s16, s0
 800c2d2:	eef0 8a60 	vmov.f32	s17, s1
 800c2d6:	f000 f831 	bl	800c33c <__fpclassifyf>
 800c2da:	b930      	cbnz	r0, 800c2ea <fmaxf+0x22>
 800c2dc:	eeb0 8a68 	vmov.f32	s16, s17
 800c2e0:	eeb0 0a48 	vmov.f32	s0, s16
 800c2e4:	ecbd 8b02 	vpop	{d8}
 800c2e8:	bd08      	pop	{r3, pc}
 800c2ea:	eeb0 0a68 	vmov.f32	s0, s17
 800c2ee:	f000 f825 	bl	800c33c <__fpclassifyf>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d0f4      	beq.n	800c2e0 <fmaxf+0x18>
 800c2f6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fe:	dded      	ble.n	800c2dc <fmaxf+0x14>
 800c300:	e7ee      	b.n	800c2e0 <fmaxf+0x18>

0800c302 <fminf>:
 800c302:	b508      	push	{r3, lr}
 800c304:	ed2d 8b02 	vpush	{d8}
 800c308:	eeb0 8a40 	vmov.f32	s16, s0
 800c30c:	eef0 8a60 	vmov.f32	s17, s1
 800c310:	f000 f814 	bl	800c33c <__fpclassifyf>
 800c314:	b930      	cbnz	r0, 800c324 <fminf+0x22>
 800c316:	eeb0 8a68 	vmov.f32	s16, s17
 800c31a:	eeb0 0a48 	vmov.f32	s0, s16
 800c31e:	ecbd 8b02 	vpop	{d8}
 800c322:	bd08      	pop	{r3, pc}
 800c324:	eeb0 0a68 	vmov.f32	s0, s17
 800c328:	f000 f808 	bl	800c33c <__fpclassifyf>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d0f4      	beq.n	800c31a <fminf+0x18>
 800c330:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c338:	d5ed      	bpl.n	800c316 <fminf+0x14>
 800c33a:	e7ee      	b.n	800c31a <fminf+0x18>

0800c33c <__fpclassifyf>:
 800c33c:	ee10 3a10 	vmov	r3, s0
 800c340:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c344:	d00d      	beq.n	800c362 <__fpclassifyf+0x26>
 800c346:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c34a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c34e:	d30a      	bcc.n	800c366 <__fpclassifyf+0x2a>
 800c350:	4b07      	ldr	r3, [pc, #28]	@ (800c370 <__fpclassifyf+0x34>)
 800c352:	1e42      	subs	r2, r0, #1
 800c354:	429a      	cmp	r2, r3
 800c356:	d908      	bls.n	800c36a <__fpclassifyf+0x2e>
 800c358:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c35c:	4258      	negs	r0, r3
 800c35e:	4158      	adcs	r0, r3
 800c360:	4770      	bx	lr
 800c362:	2002      	movs	r0, #2
 800c364:	4770      	bx	lr
 800c366:	2004      	movs	r0, #4
 800c368:	4770      	bx	lr
 800c36a:	2003      	movs	r0, #3
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	007ffffe 	.word	0x007ffffe

0800c374 <_init>:
 800c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c376:	bf00      	nop
 800c378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c37a:	bc08      	pop	{r3}
 800c37c:	469e      	mov	lr, r3
 800c37e:	4770      	bx	lr

0800c380 <_fini>:
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	bf00      	nop
 800c384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c386:	bc08      	pop	{r3}
 800c388:	469e      	mov	lr, r3
 800c38a:	4770      	bx	lr
